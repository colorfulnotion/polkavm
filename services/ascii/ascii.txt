// RO data = 57/60 bytes
// RW data = 8/3813408 bytes
// Stack size = 1048576 bytes
// RO data = [64, 37, 35, 42, 43, 61, 45, 32, 46, 32, 114, 101, 102, 105, 110, 101, 58, 32, 65, 83, 67, 73, 73, 32, 97, 114, 116, 32, 103, 101, 110, 101, 114, 97, 116, 101, 100, 114, 101, 102, 105, 110, 101, 58, 32, 102, 101, 116, 99, 104, 32, 102, 97, 105, 108, 101, 100]
// RW data = [143, 227, 56, 142, 227, 56, 142, 3]
// Instructions = 553
// Code size = 1612 bytes

      :                          @0
     0: 28 d3 01 00 00           jump @47
      :                          @1
     5: 28 83 05 00 00           jump @115
      :                          @2
    10: 28 87 05                 jump @116
      :                          @3
    13: 95 11 c8                 sp = sp + 0xffffffffffffffc8
    16: 7b 10 30                 u64 [sp + 0x30] = ra
    19: 7b 15 28                 u64 [sp + 0x28] = s0
    22: 7b 16 20                 u64 [sp + 0x20] = s1
    25: 64 95                    s0 = a2
    27: 64 72                    t0 = a0
    29: 51 08 79                 jump @13 if a1 == 0
      :                          @4
    32: 82 a7 08                 a0 = u64 [a3 + 0x8]
    35: 51 07 7c                 jump @14 if a0 == 0
      :                          @5
    38: 82 a9 10                 a2 = u64 [a3 + 0x10]
    41: 51 09 aa 00              jump @21 if a2 == 0
      :                          @6
    45: 82 a8                    a1 = u64 [a3]
    47: 33 06 10 30 2d           s1 = 0x2d3010
    52: 33 03 00 00 10           t1 = 0x100000
    57: c8 36 06                 s1 = s1 + t1
    60: 01                       fallthrough
      :                          @7
    61: 82 6a                    a3 = u64 [s1]
    63: c8 5a 07                 a0 = a3 + s0
    66: ac a7 cf 00              jump @27 if a0 <u a3
      :                          @8
    70: 95 7b 01                 a4 = a0 + 0x1
    73: 88 bc 01                 a5 = a4 <u 0x1
    76: d8 b3 0b                 a4 = t1 <u a4
    79: d4 cb 0b                 a4 = a4 | a5
    82: 52 0b bf 00              jump @27 if a4 != 0
      :                          @9
    86: 82 6b                    a4 = u64 [s1]
    88: ab ab e5                 jump @7 if a4 != a3
      :                          @10
    91: 7b 67                    u64 [s1] = a0
    93: 33 0c                    a5 = 0
    95: 7b 12 18                 u64 [sp + 0x18] = t0
    98: 33 0a 10 30 2d           a3 = 0x2d3010
   103: 33 0b 00 00 10           a4 = 0x100000
   108: 7b 1a                    u64 [sp] = a3
   110: c8 ba 0a                 a3 = a3 + a4
   113: c9 7a 07                 a0 = a3 - a0
   116: 7b 17 10                 u64 [sp + 0x10] = a0
   119: 7b 18 08                 u64 [sp + 0x8] = a1
   122: 64 96                    s1 = a2
   124: 50 10 02 1e 05           ra = 2, jump @117
      :                          @11 [@dyn 1]
   129: 54 36 00 00 10 98 00     jump @28 if s1 <=u 1048576
      :                          @12
   136: 82 12 18                 t0 = u64 [sp + 0x18]
   139: 82 18 10                 a1 = u64 [sp + 0x10]
   142: 33 07                    a0 = 0
   144: 7b 28 08                 u64 [t0 + 0x8] = a1
   147: 28 b5 00                 jump @34
      :                          @13
   150: 49 12 08                 u64 [t0 + 8] = 0
   153: 33 07 01                 a0 = 0x1
   156: 28 ac 00                 jump @34
      :                          @14
   159: 33 09 10 30 2d           a2 = 0x2d3010
   164: 33 07 00 00 10           a0 = 0x100000
   169: c8 79 09                 a2 = a2 + a0
   172: 01                       fallthrough
      :                          @15
   173: 82 9a                    a3 = u64 [a2]
   175: c8 5a 08                 a1 = a3 + s0
   178: ac a8 5f                 jump @27 if a1 <u a3
      :                          @16
   181: 95 8b 01                 a4 = a1 + 0x1
   184: 88 bc 01                 a5 = a4 <u 0x1
   187: d8 b7 0b                 a4 = a0 <u a4
   190: d4 cb 0b                 a4 = a4 | a5
   193: 52 0b 50                 jump @27 if a4 != 0
      :                          @17
   196: 82 9b                    a4 = u64 [a2]
   198: ab ab e7                 jump @15 if a4 != a3
      :                          @18
   201: 7b 98                    u64 [a2] = a1
   203: 33 0c                    a5 = 0
   205: 01                       fallthrough
      :                          @19
   206: ab ab df                 jump @15 if a4 != a3
      :                          @20
   209: 28 31                    jump @26
      :                          @21
   211: 33 09 10 30 2d           a2 = 0x2d3010
   216: 33 07 00 00 10           a0 = 0x100000
   221: c8 79 09                 a2 = a2 + a0
   224: 01                       fallthrough
      :                          @22
   225: 82 9a                    a3 = u64 [a2]
   227: c8 5a 08                 a1 = a3 + s0
   230: ac a8 2b                 jump @27 if a1 <u a3
      :                          @23
   233: 95 8b 01                 a4 = a1 + 0x1
   236: 88 bc 01                 a5 = a4 <u 0x1
   239: d8 b7 0b                 a4 = a0 <u a4
   242: d4 cb 0b                 a4 = a4 | a5
   245: 52 0b 1c                 jump @27 if a4 != 0
      :                          @24
   248: 82 9b                    a4 = u64 [a2]
   250: ab ab e7                 jump @22 if a4 != a3
      :                          @25
   253: 7b 98                    u64 [a2] = a1
   255: 33 0c                    a5 = 0
   257: 01                       fallthrough
      :                          @26
   258: 33 07 10 30 3d           a0 = 0x3d3010
   263: c9 87 08                 a1 = a0 - a1
   266: 33 07                    a0 = 0
   268: 7b 28 08                 u64 [t0 + 0x8] = a1
   271: 28 39                    jump @34
      :                          @27
   273: 33 07 01                 a0 = 0x1
   276: 7b 27 08                 u64 [t0 + 0x8] = a0
   279: 28 31                    jump @34
      :                          @28
   281: 64 6c                    a5 = s1
   283: 82 17                    a0 = u64 [sp]
   285: 95 77 00 00 10           a0 = a0 + 0x100000
   290: 82 12 18                 t0 = u64 [sp + 0x18]
   293: 82 16 08                 s1 = u64 [sp + 0x8]
   296: 01                       fallthrough
      :                          @29
   297: 82 78                    a1 = u64 [a0]
   299: c9 87 09                 a2 = a0 - a1
   302: ab 69 11                 jump @33 if a2 != s1
      :                          @30
   305: c9 c8 09                 a2 = a1 - a5
   308: 01                       fallthrough
      :                          @31
   309: 82 7a                    a3 = u64 [a0]
   311: ab 8a f2                 jump @29 if a3 != a1
      :                          @32
   314: 7b 79                    u64 [a0] = a2
   316: 33 0b                    a4 = 0
   318: 01                       fallthrough
      :                          @33
   319: 82 18 10                 a1 = u64 [sp + 0x10]
   322: 33 07                    a0 = 0
   324: 7b 28 08                 u64 [t0 + 0x8] = a1
   327: 01                       fallthrough
      :                          @34
   328: 7b 25 10                 u64 [t0 + 0x10] = s0
   331: 7b 27                    u64 [t0] = a0
   333: 82 10 30                 ra = u64 [sp + 0x30]
   336: 82 15 28                 s0 = u64 [sp + 0x28]
   339: 82 16 20                 s1 = u64 [sp + 0x20]
   342: 95 11 38                 sp = sp + 0x38
   345: 32 00                    ret
      :                          @35
   347: 95 11 b8                 sp = sp + 0xffffffffffffffb8
   350: 7b 10 40                 u64 [sp + 0x40] = ra
   353: 7b 15 38                 u64 [sp + 0x38] = s0
   356: 7b 16 30                 u64 [sp + 0x30] = s1
   359: 95 88 01                 a1 = a1 + 0x1
   362: 51 08 53                 jump @43 if a1 == 0
      :                          @36
   365: 64 75                    s0 = a0
   367: 82 77                    a0 = u64 [a0]
   369: 97 79 01                 a2 = a0 << 0x1
   372: 33 0a 08                 a3 = 0x8
   375: e4 a8 08                 a1 = maxu(a1, a3)
   378: e4 89 06                 s1 = maxu(a2, a1)
   381: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
   384: 98 88 3f                 a1 = a1 >> 0x3f
   387: 51 07 12                 jump @38 if a0 == 0
      :                          @37
   390: 82 59 08                 a2 = u64 [s0 + 0x8]
   393: 7b 19 18                 u64 [sp + 0x18] = a2
   396: 49 11 20 01              u64 [sp + 32] = 0x1
   400: 7b 17 28                 u64 [sp + 0x28] = a0
   403: 28 06                    jump @39
      :                          @38
   405: 49 11 20                 u64 [sp + 32] = 0
   408: 01                       fallthrough
      :                          @39
   409: 64 17                    a0 = sp
   411: 95 1a 18                 a3 = sp + 0x18
   414: 64 69                    a2 = s1
   416: 50 10 04 6d fe           ra = 4, jump @3
      :                          @40 [@dyn 2]
   421: 82 18                    a1 = u64 [sp]
   423: 82 17 08                 a0 = u64 [sp + 0x8]
   426: 51 08 14                 jump @44 if a1 == 0
      :                          @41
   429: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
   439: aa 87 0d                 jump @45 if a0 == a1
      :                          @42
   442: 52 07 18                 jump @46 if a0 != 0
      :                          @43
   445: 00                       trap
      :                          @44
   446: 7b 57 08                 u64 [s0 + 0x8] = a0
   449: 7b 56                    u64 [s0] = s1
   451: 01                       fallthrough
      :                          @45
   452: 82 10 40                 ra = u64 [sp + 0x40]
   455: 82 15 38                 s0 = u64 [sp + 0x38]
   458: 82 16 30                 s1 = u64 [sp + 0x30]
   461: 95 11 48                 sp = sp + 0x48
   464: 32 00                    ret
      :                          @46
   466: 00                       trap
      :                          @47 [export #0: 'refine']
   467: 95 11 68 ff              sp = sp + 0xffffffffffffff68
   471: 7b 10 90 00              u64 [sp + 0x90] = ra
   475: 7b 15 88 00              u64 [sp + 0x88] = s0
   479: 7b 16 80 00              u64 [sp + 0x80] = s1
   483: 33 07 09 00 03           a0 = 0x30009
   488: 33 09 00 30 2a           a2 = 0x2a3000
   493: 33 0a 1e                 a3 = 0x1e
   496: 33 06 ff                 s1 = 0xffffffffffffffff
   499: 33 08                    a1 = 0
   501: 33 0b                    a4 = 0
   503: 33 0c                    a5 = 0
   505: 33 00 06                 ra = 0x6
   508: 0a 01                    ecalli 1 // 'fetch'
   510: 01                       fallthrough
      :                          @48 [@dyn 3]
   511: aa 67 92 02              jump @85 if a0 == s1
      :                          @49
   515: 64 75                    s0 = a0
   517: 33 09 10 30 2d           a2 = 0x2d3010
   522: 33 08 00 00 10           a1 = 0x100000
   527: c8 89 09                 a2 = a2 + a1
   530: 33 0a 00 10 0e           a3 = 0xe1000
   535: 01                       fallthrough
      :                          @50
   536: 82 9b                    a4 = u64 [a2]
   538: c8 ab 07                 a0 = a4 + a3
   541: ac b7 68 03              jump @112 if a0 <u a4
      :                          @51
   545: 95 7c 01                 a5 = a0 + 0x1
   548: 88 c6 01                 s1 = a5 <u 0x1
   551: d8 c8 0c                 a5 = a1 <u a5
   554: d4 6c 0c                 a5 = a5 | s1
   557: 52 0c 58 03              jump @112 if a5 != 0
      :                          @52
   561: 82 9c                    a5 = u64 [a2]
   563: ab bc e5                 jump @50 if a5 != a4
      :                          @53
   566: 7b 97                    u64 [a2] = a0
   568: 33 03                    t1 = 0
   570: 33 08 10 30 3d           a1 = 0x3d3010
   575: c9 78 04                 t2 = a1 - a0
   578: 49 11 38 00 10 0e        u64 [sp + 56] = 0xe1000
   584: 7b 14 40                 u64 [sp + 0x40] = t2
   587: 49 11 48                 u64 [sp + 72] = 0
   590: 33 06 00 30 2a           s1 = 0x2a3000
   595: 33 0b 3b                 a4 = 0x3b
   598: 33 00 0b                 ra = 0xb
   601: 33 0c 7b 14              a5 = 0x147b
   605: 33 07 03                 a0 = 0x3
   608: 7b 1c 18                 u64 [sp + 0x18] = a5
   611: 28 31                    jump @55
      :                          @54
   613: 95 66 fd                 s1 = s1 + 0xfffffffffffffffd
   616: 96 98 1e                 a1 = a2 * 0x1e
   619: ca ba 09                 a2 = a3 * a4
   622: c8 98 08                 a1 = a1 + a2
   625: 82 19 30                 a2 = u64 [sp + 0x30]
   628: ca 09 09                 a2 = a2 * ra
   631: c8 98 08                 a1 = a1 + a2
   634: ca c8 08                 a1 = a1 * a5
   637: 98 88 13                 a1 = a1 >> 0x13
   640: c8 34 09                 a2 = t2 + t1
   643: 78 98                    u8 [a2] = a1
   645: 95 33 01                 t1 = t1 + 0x1
   648: 7b 13 48                 u64 [sp + 0x48] = t1
   651: 95 55 03                 s0 = s0 + 0x3
   654: 7b 13 28                 u64 [sp + 0x28] = t1
   657: ac 76 3e                 jump @58 if s1 <u a0
      :                          @55
   660: 7c 59                    a2 = u8 [s0]
   662: 7c 5a 01                 a3 = u8 [s0 + 0x1]
   665: 82 18 38                 a1 = u64 [sp + 0x38]
   668: 7c 52 02                 t0 = u8 [s0 + 0x2]
   671: 7b 12 30                 u64 [sp + 0x30] = t0
   674: ab 83 c3                 jump @54 if t1 != a1
      :                          @56
   677: 95 17 38                 a0 = sp + 0x38
   680: 64 38                    a1 = t1
   682: 7b 19 28                 u64 [sp + 0x28] = a2
   685: 7b 1a 20                 u64 [sp + 0x20] = a3
   688: 50 10 08 ab fe           ra = 8, jump @35
      :                          @57 [@dyn 4]
   693: 82 1a 20                 a3 = u64 [sp + 0x20]
   696: 82 19 28                 a2 = u64 [sp + 0x28]
   699: 33 07 03                 a0 = 0x3
   702: 82 1c 18                 a5 = u64 [sp + 0x18]
   705: 33 00 0b                 ra = 0xb
   708: 33 0b 3b                 a4 = 0x3b
   711: 82 13 48                 t1 = u64 [sp + 0x48]
   714: 82 14 40                 t2 = u64 [sp + 0x40]
   717: 28 98                    jump @54
      :                          @58
   719: 33 09 10 30 2d           a2 = 0x2d3010
   724: 33 08 00 00 10           a1 = 0x100000
   729: c8 89 09                 a2 = a2 + a1
   732: 33 0a 00 24              a3 = 0x2400
   736: 01                       fallthrough
      :                          @59
   737: 82 97                    a0 = u64 [a2]
   739: c8 a7 05                 s0 = a0 + a3
   742: ac 75 a0 02              jump @113 if s0 <u a0
      :                          @60
   746: 95 5c 01                 a5 = s0 + 0x1
   749: 88 c6 01                 s1 = a5 <u 0x1
   752: d8 c8 0c                 a5 = a1 <u a5
   755: d4 6c 0c                 a5 = a5 | s1
   758: 52 0c 90 02              jump @113 if a5 != 0
      :                          @61
   762: 82 9c                    a5 = u64 [a2]
   764: ab 7c e5                 jump @59 if a5 != a0
      :                          @62
   767: 7b 95                    u64 [a2] = s0
   769: 33 09                    a2 = 0
   771: 33 0a                    a3 = 0
   773: 33 08 10 30 3d           a1 = 0x3d3010
   778: c9 58 07                 a0 = a1 - s0
   781: 33 05                    s0 = 0
   783: 49 11 50 00 24           u64 [sp + 80] = 0x2400
   788: 7b 17 58                 u64 [sp + 0x58] = a0
   791: 82 1c 40                 a5 = u64 [sp + 0x40]
   794: 3a 08 00 00 03           a1 = u64 [0x30000]
   799: 7b 18 08                 u64 [sp + 0x8] = a1
   802: 49 11 60                 u64 [sp + 96] = 0
   805: 7b 1c 20                 u64 [sp + 0x20] = a5
   808: 28 10                    jump @64
      :                          @63
   810: 82 19 18                 a2 = u64 [sp + 0x18]
   813: 95 99 d0 02              a2 = a2 + 0x2d0
   817: 82 15 10                 s0 = u64 [sp + 0x10]
   820: 51 15 48 60              jump @70 if s0 == 72
      :                          @64
   824: 7b 19 18                 u64 [sp + 0x18] = a2
   827: 6e 98                    a1 = zext.h a2
   829: 82 19 08                 a2 = u64 [sp + 0x8]
   832: d6 98 08                 a1 = a1 mulhu a2
   835: 96 86 00 05              s1 = a1 * 0x500
   839: 83 55 01                 i32 s0 = s0 + 0x1
   842: 7b 15 10                 u64 [sp + 0x10] = s0
   845: 33 05 80 00              s0 = 0x80
   849: 28 16                    jump @66
      :                          @65
   851: c8 a7 08                 a1 = a0 + a3
   854: 78 8b                    u8 [a1] = a4
   856: 95 aa 01                 a3 = a3 + 0x1
   859: 7b 1a 60                 u64 [sp + 0x60] = a3
   862: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
   865: 95 66 0a                 s1 = s1 + 0xa
   868: 51 05 c6                 jump @63 if s0 == 0
      :                          @66
   871: ae 36 de 01              jump @103 if s1 >=u t1
      :                          @67
   875: c8 6c 08                 a1 = a5 + s1
   878: 82 19 50                 a2 = u64 [sp + 0x50]
   881: 7c 8b                    a4 = u8 [a1]
   883: ab 9a e0                 jump @65 if a3 != a2
      :                          @68
   886: 95 17 50                 a0 = sp + 0x50
   889: 64 a8                    a1 = a3
   891: 7b 1b 30                 u64 [sp + 0x30] = a4
   894: 50 10 0a dd fd           ra = 10, jump @35
      :                          @69 [@dyn 5]
   899: 82 1b 30                 a4 = u64 [sp + 0x30]
   902: 82 1c 20                 a5 = u64 [sp + 0x20]
   905: 82 13 28                 t1 = u64 [sp + 0x28]
   908: 82 1a 60                 a3 = u64 [sp + 0x60]
   911: 82 17 58                 a0 = u64 [sp + 0x58]
   914: 28 c1                    jump @65
      :                          @70
   916: 33 09 10 30 2d           a2 = 0x2d3010
   921: 33 08 00 00 10           a1 = 0x100000
   926: c8 89 09                 a2 = a2 + a1
   929: 33 05 48 24              s0 = 0x2448
   933: 01                       fallthrough
      :                          @71
   934: 82 9b                    a4 = u64 [a2]
   936: c8 5b 07                 a0 = a4 + s0
   939: ac b7 dc 01              jump @114 if a0 <u a4
      :                          @72
   943: 95 7c 01                 a5 = a0 + 0x1
   946: 88 c6 01                 s1 = a5 <u 0x1
   949: d8 c8 0c                 a5 = a1 <u a5
   952: d4 6c 0c                 a5 = a5 | s1
   955: 52 0c cc 01              jump @114 if a5 != 0
      :                          @73
   959: 82 9c                    a5 = u64 [a2]
   961: ab bc e5                 jump @71 if a5 != a4
      :                          @74
   964: 7b 97                    u64 [a2] = a0
   966: 33 06                    s1 = 0
   968: 33 08                    a1 = 0
   970: 33 0c                    a5 = 0
   972: 33 09 10 30 3d           a2 = 0x3d3010
   977: c9 79 0b                 a4 = a2 - a0
   980: 49 11 68 48 24           u64 [sp + 104] = 0x2448
   985: 7b 1b 70                 u64 [sp + 0x70] = a4
   988: 82 17 58                 a0 = u64 [sp + 0x58]
   991: 7b 17 30                 u64 [sp + 0x30] = a0
   994: 49 11 78                 u64 [sp + 120] = 0
   997: 49 11 28 11 10           u64 [sp + 40] = 0x1011
  1002: 33 07 00 00 01           a0 = 0x10000
  1007: 7b 17 20                 u64 [sp + 0x20] = a0
  1010: 28 1f                    jump @76
      :                          @75
  1012: 82 16 08                 s1 = u64 [sp + 0x8]
  1015: 82 1c                    a5 = u64 [sp]
  1017: 82 1b 70                 a4 = u64 [sp + 0x70]
  1020: c8 8b 07                 a0 = a4 + a1
  1023: 46 07 0a                 u8 [a0 + 0] = 0xa
  1026: 95 88 01                 a1 = a1 + 0x1
  1029: 7b 18 78                 u64 [sp + 0x78] = a1
  1032: 95 66 80 00              s1 = s1 + 0x80
  1036: 51 1c 48 a0 00           jump @86 if a5 == 72
      :                          @76
  1041: 95 cc 01                 a5 = a5 + 0x1
  1044: 7b 1c                    u64 [sp] = a5
  1046: 33 05 80 00              s0 = 0x80
  1050: 7b 16 08                 u64 [sp + 0x8] = s1
  1053: 28 16                    jump @78
      :                          @77
  1055: c8 8b 07                 a0 = a4 + a1
  1058: 78 7c                    u8 [a0] = a5
  1060: 95 88 01                 a1 = a1 + 0x1
  1063: 7b 18 78                 u64 [sp + 0x78] = a1
  1066: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  1069: 95 66 01                 s1 = s1 + 0x1
  1072: 51 05 48                 jump @82 if s0 == 0
      :                          @78
  1075: ae a6 13 01              jump @104 if s1 >=u a3
      :                          @79
  1079: 82 17 30                 a0 = u64 [sp + 0x30]
  1082: c8 67 07                 a0 = a0 + s1
  1085: 7c 77                    a0 = u8 [a0]
  1087: 97 79 03                 a2 = a0 << 0x3
  1090: c8 97 07                 a0 = a0 + a2
  1093: 82 19 28                 a2 = u64 [sp + 0x28]
  1096: ca 97 07                 a0 = a0 * a2
  1099: 98 77 14                 a0 = a0 >> 0x14
  1102: 82 19 20                 a2 = u64 [sp + 0x20]
  1105: c8 97 07                 a0 = a0 + a2
  1108: 82 19 68                 a2 = u64 [sp + 0x68]
  1111: 7c 7c                    a5 = u8 [a0]
  1113: ab 98 c6                 jump @77 if a1 != a2
      :                          @80
  1116: 95 17 68                 a0 = sp + 0x68
  1119: 7b 1a 18                 u64 [sp + 0x18] = a3
  1122: 7b 1c 10                 u64 [sp + 0x10] = a5
  1125: 50 10 0c f6 fc           ra = 12, jump @35
      :                          @81 [@dyn 6]
  1130: 82 1c 10                 a5 = u64 [sp + 0x10]
  1133: 82 1a 18                 a3 = u64 [sp + 0x18]
  1136: 82 18 78                 a1 = u64 [sp + 0x78]
  1139: 82 1b 70                 a4 = u64 [sp + 0x70]
  1142: 28 a9                    jump @77
      :                          @82
  1144: 82 17 68                 a0 = u64 [sp + 0x68]
  1147: ab 78 79 ff              jump @75 if a1 != a0
      :                          @83
  1151: 95 17 68                 a0 = sp + 0x68
  1154: 64 a5                    s0 = a3
  1156: 50 10 0e d7 fc           ra = 14, jump @35
      :                          @84 [@dyn 7]
  1161: 64 5a                    a3 = s0
  1163: 82 18 78                 a1 = u64 [sp + 0x78]
  1166: 28 66 ff                 jump @75
      :                          @85
  1169: 33 0a 25 00 01           a3 = 0x10025
  1174: 33 07 02                 a0 = 0x2
  1177: 33 0b 14                 a4 = 0x14
  1180: 33 08                    a1 = 0
  1182: 33 09                    a2 = 0
  1184: 0a 64                    ecalli 100 // 'log'
  1186: 33 08                    a1 = 0
  1188: 33 07 00 00 01           a0 = 0x10000
  1193: 28 ca 00                 jump @111
      :                          @86
  1196: 7b 1b 30                 u64 [sp + 0x30] = a4
  1199: 7b 18 28                 u64 [sp + 0x28] = a1
  1202: 82 17 50                 a0 = u64 [sp + 0x50]
  1205: 82 15 68                 s0 = u64 [sp + 0x68]
  1208: 51 07 2d                 jump @93 if a0 == 0
      :                          @87
  1211: 56 37 00 00 10 2a        jump @93 if a0 >u 1048576
      :                          @88
  1217: 82 18 58                 a1 = u64 [sp + 0x58]
  1220: 33 0a 10 30 2d           a3 = 0x2d3010
  1225: 95 a9 00 00 10           a2 = a3 + 0x100000
  1230: 01                       fallthrough
      :                          @89
  1231: 82 9a                    a3 = u64 [a2]
  1233: c9 a9 0b                 a4 = a2 - a3
  1236: ab 8b 11                 jump @93 if a4 != a1
      :                          @90
  1239: c9 7a 0b                 a4 = a3 - a0
  1242: 01                       fallthrough
      :                          @91
  1243: 82 9c                    a5 = u64 [a2]
  1245: ab ac f2                 jump @89 if a5 != a3
      :                          @92
  1248: 7b 9b                    u64 [a2] = a4
  1250: 33 06                    s1 = 0
  1252: 01                       fallthrough
      :                          @93
  1253: 82 17 38                 a0 = u64 [sp + 0x38]
  1256: 51 07 2d                 jump @100 if a0 == 0
      :                          @94
  1259: 56 37 00 00 10 2a        jump @100 if a0 >u 1048576
      :                          @95
  1265: 82 18 40                 a1 = u64 [sp + 0x40]
  1268: 33 0a 10 30 2d           a3 = 0x2d3010
  1273: 95 a9 00 00 10           a2 = a3 + 0x100000
  1278: 01                       fallthrough
      :                          @96
  1279: 82 9a                    a3 = u64 [a2]
  1281: c9 a9 0b                 a4 = a2 - a3
  1284: ab 8b 11                 jump @100 if a4 != a1
      :                          @97
  1287: c9 7a 0b                 a4 = a3 - a0
  1290: 01                       fallthrough
      :                          @98
  1291: 82 9c                    a5 = u64 [a2]
  1293: ab ac f2                 jump @96 if a5 != a3
      :                          @99
  1296: 7b 9b                    u64 [a2] = a4
  1298: 33 06                    s1 = 0
  1300: 01                       fallthrough
      :                          @100
  1301: 33 0a 0a 00 01           a3 = 0x1000a
  1306: 33 07 01                 a0 = 0x1
  1309: 33 0b 1b                 a4 = 0x1b
  1312: 33 08                    a1 = 0
  1314: 33 09                    a2 = 0
  1316: 0a 64                    ecalli 100 // 'log'
  1318: 82 17 30                 a0 = u64 [sp + 0x30]
  1321: 82 18 28                 a1 = u64 [sp + 0x28]
  1324: 33 00 10                 ra = 0x10
  1327: 0a 07                    ecalli 7 // 'export'
  1329: 01                       fallthrough
      :                          @101 [@dyn 8]
  1330: 95 58 ff ff ef           a1 = s0 + 0xffffffffffefffff
  1335: 55 38 00 00 f0 10        jump @105 if a1 >=u 4293918720
      :                          @102
  1341: 82 18 28                 a1 = u64 [sp + 0x28]
  1344: 82 17 30                 a0 = u64 [sp + 0x30]
  1347: 28 30                    jump @111
      :                          @103
  1349: 00                       trap
      :                          @104
  1350: 00                       trap
      :                          @105
  1351: 33 07 10 30 2d           a0 = 0x2d3010
  1356: 95 7c 00 00 10           a5 = a0 + 0x100000
  1361: 82 17 30                 a0 = u64 [sp + 0x30]
  1364: 01                       fallthrough
      :                          @106
  1365: 82 c8                    a1 = u64 [a5]
  1367: c9 8c 09                 a2 = a5 - a1
  1370: ab 79 15                 jump @110 if a2 != a0
      :                          @107
  1373: c9 58 09                 a2 = a1 - s0
  1376: 01                       fallthrough
      :                          @108
  1377: 82 ca                    a3 = u64 [a5]
  1379: ab 8a f2                 jump @106 if a3 != a1
      :                          @109
  1382: 7b c9                    u64 [a5] = a2
  1384: 33 0b                    a4 = 0
  1386: 82 18 28                 a1 = u64 [sp + 0x28]
  1389: 28 06                    jump @111
      :                          @110
  1391: 82 18 28                 a1 = u64 [sp + 0x28]
  1394: 01                       fallthrough
      :                          @111
  1395: 82 10 90 00              ra = u64 [sp + 0x90]
  1399: 82 15 88 00              s0 = u64 [sp + 0x88]
  1403: 82 16 80 00              s1 = u64 [sp + 0x80]
  1407: 95 11 98 00              sp = sp + 0x98
  1411: 32 00                    ret
      :                          @112
  1413: 00                       trap
      :                          @113
  1414: 00                       trap
      :                          @114
  1415: 00                       trap
      :                          @115 [export #1: 'accumulate']
  1416: 33 07 00 00 01           a0 = 0x10000
  1421: 33 08                    a1 = 0
  1423: 32 00                    ret
      :                          @116 [export #2: 'on_transfer']
  1425: 33 07 00 00 01           a0 = 0x10000
  1430: 33 08                    a1 = 0
  1432: 32 00                    ret
      :                          @117
  1434: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  1437: 7b 10 18                 u64 [sp + 0x18] = ra
  1440: 7b 15 10                 u64 [sp + 0x10] = s0
  1443: 7b 16 08                 u64 [sp + 0x8] = s1
  1446: 53 19 10 64              jump @126 if a2 <u 16
      :                          @118
  1450: 8d 7a                    i32 a3 = -a0
  1452: 84 a2 07                 t0 = a3 & 0x7
  1455: c8 27 0b                 a4 = a0 + t0
  1458: 51 02 15                 jump @121 if t0 == 0
      :                          @119
  1461: 64 8c                    a5 = a1
  1463: 64 75                    s0 = a0
  1465: 01                       fallthrough
      :                          @120
  1466: 7c ca                    a3 = u8 [a5]
  1468: 78 5a                    u8 [s0] = a3
  1470: 95 55 01                 s0 = s0 + 0x1
  1473: 95 cc 01                 a5 = a5 + 0x1
  1476: ac b5 f6                 jump @120 if s0 <u a4
      :                          @121
  1479: c8 28 03                 t1 = a1 + t0
  1482: c9 29 02                 t0 = a2 - t0
  1485: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  1488: 84 38 07                 a1 = t1 & 0x7
  1491: c8 4b 0a                 a3 = a4 + t2
  1494: 51 08 3b                 jump @128 if a1 == 0
      :                          @122
  1497: 58 04 4b                 jump @131 if t2 <=s 0
      :                          @123
  1500: 97 38 03                 a1 = t1 << 0x3
  1503: 84 80 38                 ra = a1 & 0x38
  1506: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  1509: 82 c5                    s0 = u64 [a5]
  1511: 8d 88                    i32 a1 = -a1
  1513: 84 88 38                 a1 = a1 & 0x38
  1516: 95 cc 08                 a5 = a5 + 0x8
  1519: 01                       fallthrough
      :                          @124
  1520: 82 c6                    s1 = u64 [a5]
  1522: d0 05 05                 s0 = s0 >> ra
  1525: cf 86 09                 a2 = s1 << a1
  1528: d4 59 09                 a2 = a2 | s0
  1531: 7b b9                    u64 [a4] = a2
  1533: 95 bb 08                 a4 = a4 + 0x8
  1536: 95 cc 08                 a5 = a5 + 0x8
  1539: 64 65                    s0 = s1
  1541: ac ab eb                 jump @124 if a4 <u a3
      :                          @125
  1544: 28 1c                    jump @131
      :                          @126
  1546: 64 7a                    a3 = a0
  1548: 52 09 21                 jump @132 if a2 != 0
      :                          @127
  1551: 28 2f                    jump @134
      :                          @128
  1553: 58 04 13                 jump @131 if t2 <=s 0
      :                          @129
  1556: 64 38                    a1 = t1
  1558: 01                       fallthrough
      :                          @130
  1559: 82 89                    a2 = u64 [a1]
  1561: 7b b9                    u64 [a4] = a2
  1563: 95 bb 08                 a4 = a4 + 0x8
  1566: 95 88 08                 a1 = a1 + 0x8
  1569: ac ab f6                 jump @130 if a4 <u a3
      :                          @131
  1572: c8 43 08                 a1 = t1 + t2
  1575: 84 29 07                 a2 = t0 & 0x7
  1578: 51 09 14                 jump @134 if a2 == 0
      :                          @132
  1581: c8 a9 09                 a2 = a2 + a3
  1584: 01                       fallthrough
      :                          @133
  1585: 7c 8b                    a4 = u8 [a1]
  1587: 78 ab                    u8 [a3] = a4
  1589: 95 aa 01                 a3 = a3 + 0x1
  1592: 95 88 01                 a1 = a1 + 0x1
  1595: ac 9a f6                 jump @133 if a3 <u a2
      :                          @134
  1598: 82 10 18                 ra = u64 [sp + 0x18]
  1601: 82 15 10                 s0 = u64 [sp + 0x10]
  1604: 82 16 08                 s1 = u64 [sp + 0x8]
  1607: 95 11 20                 sp = sp + 0x20
  1610: 32 00                    ret
