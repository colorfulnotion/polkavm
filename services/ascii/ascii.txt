// RO data = 368/368 bytes
// RW data = 16/3813424 bytes
// Stack size = 1048576 bytes
// RO data = [64, 37, 35, 42, 43, 61, 45, 32, 46, 32, 114, 101, 102, 105, 110, 101, 58, 32, 65, 83, 67, 73, 73, 32, 97, 114, 116, 32, 103, 101, 110, 101, 114, 97, 116, 101, 100, 44, 32, 108, 101, 110, 103, 116, 104, 58, 32, 44, 32, 101, 120, 112, 101, 99, 116, 101, 100, 58, 32, 0, 0, 0, 0, 0, 10, 0, 1, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 47, 0, 1, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 114, 101, 102, 105, 110, 101, 58, 32, 102, 101, 116, 99, 104, 32, 102, 97, 105, 108, 101, 100, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57]
// RW data = [143, 227, 56, 142, 227, 56, 142, 3, 75, 89, 134, 56, 214, 197, 109, 52]
// Instructions = 1433
// Code size = 4175 bytes

      :                          @0
     0: 28 d3 01 00 00           jump @47
      :                          @1
     5: 28 5d 06 00 00           jump @129
      :                          @2
    10: 28 61 06                 jump @130
      :                          @3
    13: 95 11 c8                 sp = sp + 0xffffffffffffffc8
    16: 7b 10 30                 u64 [sp + 0x30] = ra
    19: 7b 15 28                 u64 [sp + 0x28] = s0
    22: 7b 16 20                 u64 [sp + 0x20] = s1
    25: 64 95                    s0 = a2
    27: 64 72                    t0 = a0
    29: 51 08 79                 jump @13 if a1 == 0
      :                          @4
    32: 82 a7 08                 a0 = u64 [a3 + 0x8]
    35: 51 07 7c                 jump @14 if a0 == 0
      :                          @5
    38: 82 a9 10                 a2 = u64 [a3 + 0x10]
    41: 51 09 aa 00              jump @21 if a2 == 0
      :                          @6
    45: 82 a8                    a1 = u64 [a3]
    47: 33 06 20 30 2d           s1 = 0x2d3020
    52: 33 03 00 00 10           t1 = 0x100000
    57: c8 36 06                 s1 = s1 + t1
    60: 01                       fallthrough
      :                          @7
    61: 82 6a                    a3 = u64 [s1]
    63: c8 5a 07                 a0 = a3 + s0
    66: ac a7 cf 00              jump @27 if a0 <u a3
      :                          @8
    70: 95 7b 01                 a4 = a0 + 0x1
    73: 88 bc 01                 a5 = a4 <u 0x1
    76: d8 b3 0b                 a4 = t1 <u a4
    79: d4 cb 0b                 a4 = a4 | a5
    82: 52 0b bf 00              jump @27 if a4 != 0
      :                          @9
    86: 82 6b                    a4 = u64 [s1]
    88: ab ab e5                 jump @7 if a4 != a3
      :                          @10
    91: 7b 67                    u64 [s1] = a0
    93: 33 0c                    a5 = 0
    95: 7b 12 18                 u64 [sp + 0x18] = t0
    98: 33 0a 20 30 2d           a3 = 0x2d3020
   103: 33 0b 00 00 10           a4 = 0x100000
   108: 7b 1a                    u64 [sp] = a3
   110: c8 ba 0a                 a3 = a3 + a4
   113: c9 7a 07                 a0 = a3 - a0
   116: 7b 17 10                 u64 [sp + 0x10] = a0
   119: 7b 18 08                 u64 [sp + 0x8] = a1
   122: 64 96                    s1 = a2
   124: 50 10 02 d1 09           ra = 2, jump @216
      :                          @11 [@dyn 1]
   129: 54 36 00 00 10 98 00     jump @28 if s1 <=u 1048576
      :                          @12
   136: 82 12 18                 t0 = u64 [sp + 0x18]
   139: 82 18 10                 a1 = u64 [sp + 0x10]
   142: 33 07                    a0 = 0
   144: 7b 28 08                 u64 [t0 + 0x8] = a1
   147: 28 b5 00                 jump @34
      :                          @13
   150: 49 12 08                 u64 [t0 + 8] = 0
   153: 33 07 01                 a0 = 0x1
   156: 28 ac 00                 jump @34
      :                          @14
   159: 33 09 20 30 2d           a2 = 0x2d3020
   164: 33 07 00 00 10           a0 = 0x100000
   169: c8 79 09                 a2 = a2 + a0
   172: 01                       fallthrough
      :                          @15
   173: 82 9a                    a3 = u64 [a2]
   175: c8 5a 08                 a1 = a3 + s0
   178: ac a8 5f                 jump @27 if a1 <u a3
      :                          @16
   181: 95 8b 01                 a4 = a1 + 0x1
   184: 88 bc 01                 a5 = a4 <u 0x1
   187: d8 b7 0b                 a4 = a0 <u a4
   190: d4 cb 0b                 a4 = a4 | a5
   193: 52 0b 50                 jump @27 if a4 != 0
      :                          @17
   196: 82 9b                    a4 = u64 [a2]
   198: ab ab e7                 jump @15 if a4 != a3
      :                          @18
   201: 7b 98                    u64 [a2] = a1
   203: 33 0c                    a5 = 0
   205: 01                       fallthrough
      :                          @19
   206: ab ab df                 jump @15 if a4 != a3
      :                          @20
   209: 28 31                    jump @26
      :                          @21
   211: 33 09 20 30 2d           a2 = 0x2d3020
   216: 33 07 00 00 10           a0 = 0x100000
   221: c8 79 09                 a2 = a2 + a0
   224: 01                       fallthrough
      :                          @22
   225: 82 9a                    a3 = u64 [a2]
   227: c8 5a 08                 a1 = a3 + s0
   230: ac a8 2b                 jump @27 if a1 <u a3
      :                          @23
   233: 95 8b 01                 a4 = a1 + 0x1
   236: 88 bc 01                 a5 = a4 <u 0x1
   239: d8 b7 0b                 a4 = a0 <u a4
   242: d4 cb 0b                 a4 = a4 | a5
   245: 52 0b 1c                 jump @27 if a4 != 0
      :                          @24
   248: 82 9b                    a4 = u64 [a2]
   250: ab ab e7                 jump @22 if a4 != a3
      :                          @25
   253: 7b 98                    u64 [a2] = a1
   255: 33 0c                    a5 = 0
   257: 01                       fallthrough
      :                          @26
   258: 33 07 20 30 3d           a0 = 0x3d3020
   263: c9 87 08                 a1 = a0 - a1
   266: 33 07                    a0 = 0
   268: 7b 28 08                 u64 [t0 + 0x8] = a1
   271: 28 39                    jump @34
      :                          @27
   273: 33 07 01                 a0 = 0x1
   276: 7b 27 08                 u64 [t0 + 0x8] = a0
   279: 28 31                    jump @34
      :                          @28
   281: 64 6c                    a5 = s1
   283: 82 17                    a0 = u64 [sp]
   285: 95 77 00 00 10           a0 = a0 + 0x100000
   290: 82 12 18                 t0 = u64 [sp + 0x18]
   293: 82 16 08                 s1 = u64 [sp + 0x8]
   296: 01                       fallthrough
      :                          @29
   297: 82 78                    a1 = u64 [a0]
   299: c9 87 09                 a2 = a0 - a1
   302: ab 69 11                 jump @33 if a2 != s1
      :                          @30
   305: c9 c8 09                 a2 = a1 - a5
   308: 01                       fallthrough
      :                          @31
   309: 82 7a                    a3 = u64 [a0]
   311: ab 8a f2                 jump @29 if a3 != a1
      :                          @32
   314: 7b 79                    u64 [a0] = a2
   316: 33 0b                    a4 = 0
   318: 01                       fallthrough
      :                          @33
   319: 82 18 10                 a1 = u64 [sp + 0x10]
   322: 33 07                    a0 = 0
   324: 7b 28 08                 u64 [t0 + 0x8] = a1
   327: 01                       fallthrough
      :                          @34
   328: 7b 25 10                 u64 [t0 + 0x10] = s0
   331: 7b 27                    u64 [t0] = a0
   333: 82 10 30                 ra = u64 [sp + 0x30]
   336: 82 15 28                 s0 = u64 [sp + 0x28]
   339: 82 16 20                 s1 = u64 [sp + 0x20]
   342: 95 11 38                 sp = sp + 0x38
   345: 32 00                    ret
      :                          @35
   347: 95 11 b8                 sp = sp + 0xffffffffffffffb8
   350: 7b 10 40                 u64 [sp + 0x40] = ra
   353: 7b 15 38                 u64 [sp + 0x38] = s0
   356: 7b 16 30                 u64 [sp + 0x30] = s1
   359: 95 88 01                 a1 = a1 + 0x1
   362: 51 08 53                 jump @43 if a1 == 0
      :                          @36
   365: 64 75                    s0 = a0
   367: 82 77                    a0 = u64 [a0]
   369: 97 79 01                 a2 = a0 << 0x1
   372: 33 0a 08                 a3 = 0x8
   375: e4 a8 08                 a1 = maxu(a1, a3)
   378: e4 89 06                 s1 = maxu(a2, a1)
   381: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
   384: 98 88 3f                 a1 = a1 >> 0x3f
   387: 51 07 12                 jump @38 if a0 == 0
      :                          @37
   390: 82 59 08                 a2 = u64 [s0 + 0x8]
   393: 7b 19 18                 u64 [sp + 0x18] = a2
   396: 49 11 20 01              u64 [sp + 32] = 0x1
   400: 7b 17 28                 u64 [sp + 0x28] = a0
   403: 28 06                    jump @39
      :                          @38
   405: 49 11 20                 u64 [sp + 32] = 0
   408: 01                       fallthrough
      :                          @39
   409: 64 17                    a0 = sp
   411: 95 1a 18                 a3 = sp + 0x18
   414: 64 69                    a2 = s1
   416: 50 10 04 6d fe           ra = 4, jump @3
      :                          @40 [@dyn 2]
   421: 82 18                    a1 = u64 [sp]
   423: 82 17 08                 a0 = u64 [sp + 0x8]
   426: 51 08 14                 jump @44 if a1 == 0
      :                          @41
   429: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
   439: aa 87 0d                 jump @45 if a0 == a1
      :                          @42
   442: 52 07 18                 jump @46 if a0 != 0
      :                          @43
   445: 00                       trap
      :                          @44
   446: 7b 57 08                 u64 [s0 + 0x8] = a0
   449: 7b 56                    u64 [s0] = s1
   451: 01                       fallthrough
      :                          @45
   452: 82 10 40                 ra = u64 [sp + 0x40]
   455: 82 15 38                 s0 = u64 [sp + 0x38]
   458: 82 16 30                 s1 = u64 [sp + 0x30]
   461: 95 11 48                 sp = sp + 0x48
   464: 32 00                    ret
      :                          @46
   466: 00                       trap
      :                          @47 [export #0: 'refine']
   467: 95 11 30 ff              sp = sp + 0xffffffffffffff30
   471: 7b 10 c8 00              u64 [sp + 0xc8] = ra
   475: 7b 15 c0 00              u64 [sp + 0xc0] = s0
   479: 7b 16 b8 00              u64 [sp + 0xb8] = s1
   483: 33 07 11 00 03           a0 = 0x30011
   488: 33 09 00 30 2a           a2 = 0x2a3000
   493: 33 0a 1e                 a3 = 0x1e
   496: 33 05 ff                 s0 = 0xffffffffffffffff
   499: 33 08                    a1 = 0
   501: 33 0b                    a4 = 0
   503: 33 0c                    a5 = 0
   505: 33 00 06                 ra = 0x6
   508: 0a 01                    ecalli 1 // 'fetch'
   510: 01                       fallthrough
      :                          @48 [@dyn 3]
   511: aa 57 9b 02              jump @85 if a0 == s0
      :                          @49
   515: 64 76                    s1 = a0
   517: 33 09 20 30 2d           a2 = 0x2d3020
   522: 33 08 00 00 10           a1 = 0x100000
   527: c8 89 09                 a2 = a2 + a1
   530: 33 0a 00 10 0e           a3 = 0xe1000
   535: 01                       fallthrough
      :                          @50
   536: 82 9b                    a4 = u64 [a2]
   538: c8 ab 07                 a0 = a4 + a3
   541: ac b7 40 04              jump @124 if a0 <u a4
      :                          @51
   545: 95 7c 01                 a5 = a0 + 0x1
   548: 88 c5 01                 s0 = a5 <u 0x1
   551: d8 c8 0c                 a5 = a1 <u a5
   554: d4 5c 0c                 a5 = a5 | s0
   557: 52 0c 30 04              jump @124 if a5 != 0
      :                          @52
   561: 82 9c                    a5 = u64 [a2]
   563: ab bc e5                 jump @50 if a5 != a4
      :                          @53
   566: 7b 97                    u64 [a2] = a0
   568: 33 03                    t1 = 0
   570: 33 08 20 30 3d           a1 = 0x3d3020
   575: c9 78 04                 t2 = a1 - a0
   578: 49 21 98 00 00 10 0e     u64 [sp + 152] = 0xe1000
   585: 7b 14 a0 00              u64 [sp + 0xa0] = t2
   589: 49 21 a8 00              u64 [sp + 168] = 0
   593: 33 05 00 30 2a           s0 = 0x2a3000
   598: 33 0b 3b                 a4 = 0x3b
   601: 33 00 0b                 ra = 0xb
   604: 33 0c 7b 14              a5 = 0x147b
   608: 33 07 03                 a0 = 0x3
   611: 7b 1c 18                 u64 [sp + 0x18] = a5
   614: 28 32                    jump @55
      :                          @54
   616: 95 55 fd                 s0 = s0 + 0xfffffffffffffffd
   619: 96 98 1e                 a1 = a2 * 0x1e
   622: ca ba 09                 a2 = a3 * a4
   625: c8 98 08                 a1 = a1 + a2
   628: 82 19 30                 a2 = u64 [sp + 0x30]
   631: ca 09 09                 a2 = a2 * ra
   634: c8 98 08                 a1 = a1 + a2
   637: ca c8 08                 a1 = a1 * a5
   640: 98 88 13                 a1 = a1 >> 0x13
   643: c8 34 09                 a2 = t2 + t1
   646: 78 98                    u8 [a2] = a1
   648: 95 33 01                 t1 = t1 + 0x1
   651: 7b 13 a8 00              u64 [sp + 0xa8] = t1
   655: 95 66 03                 s1 = s1 + 0x3
   658: 7b 13 28                 u64 [sp + 0x28] = t1
   661: ac 75 42                 jump @58 if s0 <u a0
      :                          @55
   664: 7c 69                    a2 = u8 [s1]
   666: 7c 6a 01                 a3 = u8 [s1 + 0x1]
   669: 82 18 98 00              a1 = u64 [sp + 0x98]
   673: 7c 62 02                 t0 = u8 [s1 + 0x2]
   676: 7b 12 30                 u64 [sp + 0x30] = t0
   679: ab 83 c1                 jump @54 if t1 != a1
      :                          @56
   682: 95 17 98 00              a0 = sp + 0x98
   686: 64 38                    a1 = t1
   688: 7b 19 28                 u64 [sp + 0x28] = a2
   691: 7b 1a 20                 u64 [sp + 0x20] = a3
   694: 50 10 08 a5 fe           ra = 8, jump @35
      :                          @57 [@dyn 4]
   699: 82 1a 20                 a3 = u64 [sp + 0x20]
   702: 82 19 28                 a2 = u64 [sp + 0x28]
   705: 33 07 03                 a0 = 0x3
   708: 82 1c 18                 a5 = u64 [sp + 0x18]
   711: 33 00 0b                 ra = 0xb
   714: 33 0b 3b                 a4 = 0x3b
   717: 82 13 a8 00              t1 = u64 [sp + 0xa8]
   721: 82 14 a0 00              t2 = u64 [sp + 0xa0]
   725: 28 93                    jump @54
      :                          @58
   727: 33 09 20 30 2d           a2 = 0x2d3020
   732: 33 08 00 00 10           a1 = 0x100000
   737: c8 89 09                 a2 = a2 + a1
   740: 33 0a 00 24              a3 = 0x2400
   744: 01                       fallthrough
      :                          @59
   745: 82 97                    a0 = u64 [a2]
   747: c8 a7 05                 s0 = a0 + a3
   750: ac 75 70 03              jump @125 if s0 <u a0
      :                          @60
   754: 95 5c 01                 a5 = s0 + 0x1
   757: 88 c6 01                 s1 = a5 <u 0x1
   760: d8 c8 0c                 a5 = a1 <u a5
   763: d4 6c 0c                 a5 = a5 | s1
   766: 52 0c 60 03              jump @125 if a5 != 0
      :                          @61
   770: 82 9c                    a5 = u64 [a2]
   772: ab 7c e5                 jump @59 if a5 != a0
      :                          @62
   775: 7b 95                    u64 [a2] = s0
   777: 33 09                    a2 = 0
   779: 33 0a                    a3 = 0
   781: 33 06                    s1 = 0
   783: 33 08 20 30 3d           a1 = 0x3d3020
   788: c9 58 07                 a0 = a1 - s0
   791: 49 11 68 00 24           u64 [sp + 104] = 0x2400
   796: 7b 17 70                 u64 [sp + 0x70] = a0
   799: 82 1c a0 00              a5 = u64 [sp + 0xa0]
   803: 3a 08 00 00 03           a1 = u64 [0x30000]
   808: 7b 18 08                 u64 [sp + 0x8] = a1
   811: 49 11 78                 u64 [sp + 120] = 0
   814: 7b 1c 20                 u64 [sp + 0x20] = a5
   817: 28 10                    jump @64
      :                          @63
   819: 82 19 18                 a2 = u64 [sp + 0x18]
   822: 95 99 d0 02              a2 = a2 + 0x2d0
   826: 82 16 10                 s1 = u64 [sp + 0x10]
   829: 51 16 48 60              jump @70 if s1 == 72
      :                          @64
   833: 7b 19 18                 u64 [sp + 0x18] = a2
   836: 6e 98                    a1 = zext.h a2
   838: 82 19 08                 a2 = u64 [sp + 0x8]
   841: d6 98 08                 a1 = a1 mulhu a2
   844: 96 85 00 05              s0 = a1 * 0x500
   848: 83 66 01                 i32 s1 = s1 + 0x1
   851: 7b 16 10                 u64 [sp + 0x10] = s1
   854: 33 06 80 00              s1 = 0x80
   858: 28 16                    jump @66
      :                          @65
   860: c8 a7 08                 a1 = a0 + a3
   863: 78 8b                    u8 [a1] = a4
   865: 95 aa 01                 a3 = a3 + 0x1
   868: 7b 1a 78                 u64 [sp + 0x78] = a3
   871: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
   874: 95 55 0a                 s0 = s0 + 0xa
   877: 51 06 c6                 jump @63 if s1 == 0
      :                          @66
   880: ae 35 b2 02              jump @116 if s0 >=u t1
      :                          @67
   884: c8 5c 08                 a1 = a5 + s0
   887: 82 19 68                 a2 = u64 [sp + 0x68]
   890: 7c 8b                    a4 = u8 [a1]
   892: ab 9a e0                 jump @65 if a3 != a2
      :                          @68
   895: 95 17 68                 a0 = sp + 0x68
   898: 64 a8                    a1 = a3
   900: 7b 1b 30                 u64 [sp + 0x30] = a4
   903: 50 10 0a d4 fd           ra = 10, jump @35
      :                          @69 [@dyn 5]
   908: 82 1b 30                 a4 = u64 [sp + 0x30]
   911: 82 1c 20                 a5 = u64 [sp + 0x20]
   914: 82 13 28                 t1 = u64 [sp + 0x28]
   917: 82 1a 78                 a3 = u64 [sp + 0x78]
   920: 82 17 70                 a0 = u64 [sp + 0x70]
   923: 28 c1                    jump @65
      :                          @70
   925: 33 09 20 30 2d           a2 = 0x2d3020
   930: 33 08 00 00 10           a1 = 0x100000
   935: c8 89 09                 a2 = a2 + a1
   938: 33 05 48 24              s0 = 0x2448
   942: 01                       fallthrough
      :                          @71
   943: 82 9b                    a4 = u64 [a2]
   945: c8 5b 07                 a0 = a4 + s0
   948: ac b7 ab 02              jump @126 if a0 <u a4
      :                          @72
   952: 95 7c 01                 a5 = a0 + 0x1
   955: 88 c6 01                 s1 = a5 <u 0x1
   958: d8 c8 0c                 a5 = a1 <u a5
   961: d4 6c 0c                 a5 = a5 | s1
   964: 52 0c 9b 02              jump @126 if a5 != 0
      :                          @73
   968: 82 9c                    a5 = u64 [a2]
   970: ab bc e5                 jump @71 if a5 != a4
      :                          @74
   973: 7b 97                    u64 [a2] = a0
   975: 33 05                    s0 = 0
   977: 33 08                    a1 = 0
   979: 33 0b                    a4 = 0
   981: 33 09 20 30 3d           a2 = 0x3d3020
   986: c9 79 02                 t0 = a2 - a0
   989: 49 11 38 48 24           u64 [sp + 56] = 0x2448
   994: 7b 12 40                 u64 [sp + 0x40] = t0
   997: 82 17 70                 a0 = u64 [sp + 0x70]
  1000: 7b 17 30                 u64 [sp + 0x30] = a0
  1003: 49 11 48                 u64 [sp + 72] = 0
  1006: 49 11 28 11 10           u64 [sp + 40] = 0x1011
  1011: 33 07 00 00 01           a0 = 0x10000
  1016: 7b 17 20                 u64 [sp + 0x20] = a0
  1019: 28 1f                    jump @76
      :                          @75
  1021: 82 15 08                 s0 = u64 [sp + 0x8]
  1024: 82 1b                    a4 = u64 [sp]
  1026: 82 12 40                 t0 = u64 [sp + 0x40]
  1029: c8 82 07                 a0 = t0 + a1
  1032: 46 07 0a                 u8 [a0 + 0] = 0xa
  1035: 95 88 01                 a1 = a1 + 0x1
  1038: 7b 18 48                 u64 [sp + 0x48] = a1
  1041: 95 55 80 00              s0 = s0 + 0x80
  1045: 51 1b 48 a0 00           jump @86 if a4 == 72
      :                          @76
  1050: 95 bb 01                 a4 = a4 + 0x1
  1053: 7b 1b                    u64 [sp] = a4
  1055: 33 06 80 00              s1 = 0x80
  1059: 7b 15 08                 u64 [sp + 0x8] = s0
  1062: 28 16                    jump @78
      :                          @77
  1064: c8 82 07                 a0 = t0 + a1
  1067: 78 7b                    u8 [a0] = a4
  1069: 95 88 01                 a1 = a1 + 0x1
  1072: 7b 18 48                 u64 [sp + 0x48] = a1
  1075: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
  1078: 95 55 01                 s0 = s0 + 0x1
  1081: 51 06 48                 jump @82 if s1 == 0
      :                          @78
  1084: ae a5 e7 01              jump @117 if s0 >=u a3
      :                          @79
  1088: 82 17 30                 a0 = u64 [sp + 0x30]
  1091: c8 57 07                 a0 = a0 + s0
  1094: 7c 77                    a0 = u8 [a0]
  1096: 97 79 03                 a2 = a0 << 0x3
  1099: c8 97 07                 a0 = a0 + a2
  1102: 82 19 28                 a2 = u64 [sp + 0x28]
  1105: ca 97 07                 a0 = a0 * a2
  1108: 98 77 14                 a0 = a0 >> 0x14
  1111: 82 19 20                 a2 = u64 [sp + 0x20]
  1114: c8 97 07                 a0 = a0 + a2
  1117: 82 19 38                 a2 = u64 [sp + 0x38]
  1120: 7c 7b                    a4 = u8 [a0]
  1122: ab 98 c6                 jump @77 if a1 != a2
      :                          @80
  1125: 95 17 38                 a0 = sp + 0x38
  1128: 7b 1a 18                 u64 [sp + 0x18] = a3
  1131: 7b 1b 10                 u64 [sp + 0x10] = a4
  1134: 50 10 0c ed fc           ra = 12, jump @35
      :                          @81 [@dyn 6]
  1139: 82 1b 10                 a4 = u64 [sp + 0x10]
  1142: 82 1a 18                 a3 = u64 [sp + 0x18]
  1145: 82 18 48                 a1 = u64 [sp + 0x48]
  1148: 82 12 40                 t0 = u64 [sp + 0x40]
  1151: 28 a9                    jump @77
      :                          @82
  1153: 82 17 38                 a0 = u64 [sp + 0x38]
  1156: ab 78 79 ff              jump @75 if a1 != a0
      :                          @83
  1160: 95 17 38                 a0 = sp + 0x38
  1163: 64 a5                    s0 = a3
  1165: 50 10 0e ce fc           ra = 14, jump @35
      :                          @84 [@dyn 7]
  1170: 64 5a                    a3 = s0
  1172: 82 18 48                 a1 = u64 [sp + 0x48]
  1175: 28 66 ff                 jump @75
      :                          @85
  1178: 33 0a 60 00 01           a3 = 0x10060
  1183: 33 07 02                 a0 = 0x2
  1186: 33 0b 14                 a4 = 0x14
  1189: 33 08                    a1 = 0
  1191: 33 09                    a2 = 0
  1193: 0a 64                    ecalli 100 // 'log'
  1195: 33 08                    a1 = 0
  1197: 33 07 00 00 01           a0 = 0x10000
  1202: 28 99 01                 jump @123
      :                          @86
  1205: 82 17 68                 a0 = u64 [sp + 0x68]
  1208: 82 13 38                 t1 = u64 [sp + 0x38]
  1211: 51 07 2d                 jump @93 if a0 == 0
      :                          @87
  1214: 56 37 00 00 10 2a        jump @93 if a0 >u 1048576
      :                          @88
  1220: 82 15 70                 s0 = u64 [sp + 0x70]
  1223: 33 0a 20 30 2d           a3 = 0x2d3020
  1228: 95 a9 00 00 10           a2 = a3 + 0x100000
  1233: 01                       fallthrough
      :                          @89
  1234: 82 9a                    a3 = u64 [a2]
  1236: c9 a9 0b                 a4 = a2 - a3
  1239: ab 5b 11                 jump @93 if a4 != s0
      :                          @90
  1242: c9 7a 0b                 a4 = a3 - a0
  1245: 01                       fallthrough
      :                          @91
  1246: 82 9c                    a5 = u64 [a2]
  1248: ab ac f2                 jump @89 if a5 != a3
      :                          @92
  1251: 7b 9b                    u64 [a2] = a4
  1253: 33 06                    s1 = 0
  1255: 01                       fallthrough
      :                          @93
  1256: 82 17 98 00              a0 = u64 [sp + 0x98]
  1260: 51 07 2c                 jump @100 if a0 == 0
      :                          @94
  1263: 56 37 00 00 10 29        jump @100 if a0 >u 1048576
      :                          @95
  1269: 82 15 a0 00              s0 = u64 [sp + 0xa0]
  1273: 33 0a 20 30 2d           a3 = 0x2d3020
  1278: 95 a9 00 00 10           a2 = a3 + 0x100000
  1283: 01                       fallthrough
      :                          @96
  1284: 82 9a                    a3 = u64 [a2]
  1286: c9 a9 0b                 a4 = a2 - a3
  1289: ab 5b 0f                 jump @100 if a4 != s0
      :                          @97
  1292: c9 7a 0b                 a4 = a3 - a0
  1295: 01                       fallthrough
      :                          @98
  1296: 82 9c                    a5 = u64 [a2]
  1298: ab ac f2                 jump @96 if a5 != a3
      :                          @99
  1301: 7b 9b                    u64 [a2] = a4
  1303: 01                       fallthrough
      :                          @100
  1304: 7b 18 88 00              u64 [sp + 0x88] = a1
  1308: 48 21 94 00 48 24        u32 [sp + 148] = 0x2448
  1314: 95 17 88 00              a0 = sp + 0x88
  1318: 7b 17 68                 u64 [sp + 0x68] = a0
  1321: 33 07 30                 a0 = 0x30
  1324: 7b 17 70                 u64 [sp + 0x70] = a0
  1327: 95 17 94 00              a0 = sp + 0x94
  1331: 7b 17 78                 u64 [sp + 0x78] = a0
  1334: 33 07 50                 a0 = 0x50
  1337: 7b 17 80 00              u64 [sp + 0x80] = a0
  1341: 33 07 40 00 01           a0 = 0x10040
  1346: 7b 17 38                 u64 [sp + 0x38] = a0
  1349: 49 11 40 02              u64 [sp + 64] = 0x2
  1353: 49 11 58                 u64 [sp + 88] = 0
  1356: 95 19 68                 a2 = sp + 0x68
  1359: 7b 19 48                 u64 [sp + 0x48] = a2
  1362: 49 11 50 02              u64 [sp + 80] = 0x2
  1366: 33 09 20 30 2d           a2 = 0x2d3020
  1371: 33 07 00 00 10           a0 = 0x100000
  1376: c8 79 09                 a2 = a2 + a0
  1379: 01                       fallthrough
      :                          @101
  1380: 82 9a                    a3 = u64 [a2]
  1382: 95 a6 62                 s1 = a3 + 0x62
  1385: ac a6 f7 00              jump @127 if s1 <u a3
      :                          @102
  1389: 95 6b 01                 a4 = s1 + 0x1
  1392: 88 bc 01                 a5 = a4 <u 0x1
  1395: d8 b7 0b                 a4 = a0 <u a4
  1398: d4 cb 0b                 a4 = a4 | a5
  1401: 52 0b e7 00              jump @127 if a4 != 0
      :                          @103
  1405: 82 9b                    a4 = u64 [a2]
  1407: ab ab e5                 jump @101 if a4 != a3
      :                          @104
  1410: 7b 96                    u64 [a2] = s1
  1412: 33 0c                    a5 = 0
  1414: 7b 13 20                 u64 [sp + 0x20] = t1
  1417: 7b 12 28                 u64 [sp + 0x28] = t0
  1420: 7b 18 30                 u64 [sp + 0x30] = a1
  1423: 33 07 20 30 3d           a0 = 0x3d3020
  1428: c9 67 07                 a0 = a0 - s1
  1431: 49 21 98 00 62           u64 [sp + 152] = 0x62
  1436: 7b 17 a0 00              u64 [sp + 0xa0] = a0
  1440: 49 21 a8 00              u64 [sp + 168] = 0
  1444: 95 17 98 00              a0 = sp + 0x98
  1448: 95 18 38                 a1 = sp + 0x38
  1451: 50 10 10 a6 08           ra = 16, jump @295
      :                          @105 [@dyn 8]
  1456: 52 07 b1 00              jump @128 if a0 != 0
      :                          @106
  1460: 82 15 a0 00              s0 = u64 [sp + 0xa0]
  1464: 82 1b a8 00              a4 = u64 [sp + 0xa8]
  1468: 82 16 98 00              s1 = u64 [sp + 0x98]
  1472: 33 07 01                 a0 = 0x1
  1475: 33 08                    a1 = 0
  1477: 33 09                    a2 = 0
  1479: 64 5a                    a3 = s0
  1481: 33 00 12                 ra = 0x12
  1484: 0a 64                    ecalli 100 // 'log'
  1486: 01                       fallthrough
      :                          @107 [@dyn 9]
  1487: 49 11 18 ff ff ef        u64 [sp + 24] = 0xffffffffffefffff
  1493: 95 67 ff ff ef           a0 = s1 + 0xffffffffffefffff
  1498: 53 37 00 00 f0 25        jump @113 if a0 <u 4293918720
      :                          @108
  1504: 33 07 20 30 2d           a0 = 0x2d3020
  1509: 95 77 00 00 10           a0 = a0 + 0x100000
  1514: 01                       fallthrough
      :                          @109
  1515: 82 78                    a1 = u64 [a0]
  1517: c9 87 09                 a2 = a0 - a1
  1520: ab 59 0f                 jump @113 if a2 != s0
      :                          @110
  1523: c9 68 09                 a2 = a1 - s1
  1526: 01                       fallthrough
      :                          @111
  1527: 82 7a                    a3 = u64 [a0]
  1529: ab 8a f2                 jump @109 if a3 != a1
      :                          @112
  1532: 7b 79                    u64 [a0] = a2
  1534: 01                       fallthrough
      :                          @113
  1535: 82 17 28                 a0 = u64 [sp + 0x28]
  1538: 82 18 30                 a1 = u64 [sp + 0x30]
  1541: 33 00 14                 ra = 0x14
  1544: 0a 07                    ecalli 7 // 'export'
  1546: 01                       fallthrough
      :                          @114 [@dyn 10]
  1547: 82 15 20                 s0 = u64 [sp + 0x20]
  1550: 82 17 18                 a0 = u64 [sp + 0x18]
  1553: c8 57 07                 a0 = a0 + s0
  1556: 55 37 00 00 f0 10        jump @118 if a0 >=u 4293918720
      :                          @115
  1562: 82 18 30                 a1 = u64 [sp + 0x30]
  1565: 82 17 28                 a0 = u64 [sp + 0x28]
  1568: 28 2b                    jump @123
      :                          @116
  1570: 00                       trap
      :                          @117
  1571: 00                       trap
      :                          @118
  1572: 33 07 20 30 2d           a0 = 0x2d3020
  1577: 95 76 00 00 10           s1 = a0 + 0x100000
  1582: 82 18 30                 a1 = u64 [sp + 0x30]
  1585: 82 17 28                 a0 = u64 [sp + 0x28]
  1588: 01                       fallthrough
      :                          @119
  1589: 82 6c                    a5 = u64 [s1]
  1591: c9 c6 09                 a2 = s1 - a5
  1594: ab 79 11                 jump @123 if a2 != a0
      :                          @120
  1597: c9 5c 09                 a2 = a5 - s0
  1600: 01                       fallthrough
      :                          @121
  1601: 82 6a                    a3 = u64 [s1]
  1603: ab ca f2                 jump @119 if a3 != a5
      :                          @122
  1606: 7b 69                    u64 [s1] = a2
  1608: 33 0b                    a4 = 0
  1610: 01                       fallthrough
      :                          @123
  1611: 82 10 c8 00              ra = u64 [sp + 0xc8]
  1615: 82 15 c0 00              s0 = u64 [sp + 0xc0]
  1619: 82 16 b8 00              s1 = u64 [sp + 0xb8]
  1623: 95 11 d0 00              sp = sp + 0xd0
  1627: 32 00                    ret
      :                          @124
  1629: 00                       trap
      :                          @125
  1630: 00                       trap
      :                          @126
  1631: 00                       trap
      :                          @127
  1632: 00                       trap
      :                          @128
  1633: 00                       trap
      :                          @129 [export #1: 'accumulate']
  1634: 33 07 00 00 01           a0 = 0x10000
  1639: 33 08                    a1 = 0
  1641: 32 00                    ret
      :                          @130 [export #2: 'on_transfer']
  1643: 33 07 00 00 01           a0 = 0x10000
  1648: 33 08                    a1 = 0
  1650: 32 00                    ret
      :                          @131
  1652: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1655: 7b 10 40                 u64 [sp + 0x40] = ra
  1658: 7b 15 38                 u64 [sp + 0x38] = s0
  1661: 7b 16 30                 u64 [sp + 0x30] = s1
  1664: c8 89 09                 a2 = a2 + a1
  1667: ac 89 52                 jump @139 if a2 <u a1
      :                          @132
  1670: 64 75                    s0 = a0
  1672: 82 77                    a0 = u64 [a0]
  1674: 97 78 01                 a1 = a0 << 0x1
  1677: 33 0a 08                 a3 = 0x8
  1680: e4 a9 09                 a2 = maxu(a2, a3)
  1683: e4 98 06                 s1 = maxu(a1, a2)
  1686: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1689: 98 88 3f                 a1 = a1 >> 0x3f
  1692: 51 07 12                 jump @134 if a0 == 0
      :                          @133
  1695: 82 59 08                 a2 = u64 [s0 + 0x8]
  1698: 7b 19 18                 u64 [sp + 0x18] = a2
  1701: 49 11 20 01              u64 [sp + 32] = 0x1
  1705: 7b 17 28                 u64 [sp + 0x28] = a0
  1708: 28 06                    jump @135
      :                          @134
  1710: 49 11 20                 u64 [sp + 32] = 0
  1713: 01                       fallthrough
      :                          @135
  1714: 64 17                    a0 = sp
  1716: 95 1a 18                 a3 = sp + 0x18
  1719: 64 69                    a2 = s1
  1721: 50 10 16 32              ra = 22, jump @143
      :                          @136 [@dyn 11]
  1725: 82 18                    a1 = u64 [sp]
  1727: 82 17 08                 a0 = u64 [sp + 0x8]
  1730: 51 08 14                 jump @140 if a1 == 0
      :                          @137
  1733: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1743: aa 87 0d                 jump @141 if a0 == a1
      :                          @138
  1746: 52 07 18                 jump @142 if a0 != 0
      :                          @139
  1749: 00                       trap
      :                          @140
  1750: 7b 57 08                 u64 [s0 + 0x8] = a0
  1753: 7b 56                    u64 [s0] = s1
  1755: 01                       fallthrough
      :                          @141
  1756: 82 10 40                 ra = u64 [sp + 0x40]
  1759: 82 15 38                 s0 = u64 [sp + 0x38]
  1762: 82 16 30                 s1 = u64 [sp + 0x30]
  1765: 95 11 48                 sp = sp + 0x48
  1768: 32 00                    ret
      :                          @142
  1770: 00                       trap
      :                          @143
  1771: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  1774: 7b 10 30                 u64 [sp + 0x30] = ra
  1777: 7b 15 28                 u64 [sp + 0x28] = s0
  1780: 7b 16 20                 u64 [sp + 0x20] = s1
  1783: 64 95                    s0 = a2
  1785: 64 72                    t0 = a0
  1787: 51 08 79                 jump @153 if a1 == 0
      :                          @144
  1790: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1793: 51 07 7c                 jump @154 if a0 == 0
      :                          @145
  1796: 82 a9 10                 a2 = u64 [a3 + 0x10]
  1799: 51 09 aa 00              jump @161 if a2 == 0
      :                          @146
  1803: 82 a8                    a1 = u64 [a3]
  1805: 33 06 20 30 2d           s1 = 0x2d3020
  1810: 33 03 00 00 10           t1 = 0x100000
  1815: c8 36 06                 s1 = s1 + t1
  1818: 01                       fallthrough
      :                          @147
  1819: 82 6a                    a3 = u64 [s1]
  1821: c8 5a 07                 a0 = a3 + s0
  1824: ac a7 cf 00              jump @167 if a0 <u a3
      :                          @148
  1828: 95 7b 01                 a4 = a0 + 0x1
  1831: 88 bc 01                 a5 = a4 <u 0x1
  1834: d8 b3 0b                 a4 = t1 <u a4
  1837: d4 cb 0b                 a4 = a4 | a5
  1840: 52 0b bf 00              jump @167 if a4 != 0
      :                          @149
  1844: 82 6b                    a4 = u64 [s1]
  1846: ab ab e5                 jump @147 if a4 != a3
      :                          @150
  1849: 7b 67                    u64 [s1] = a0
  1851: 33 0c                    a5 = 0
  1853: 7b 12 18                 u64 [sp + 0x18] = t0
  1856: 33 0a 20 30 2d           a3 = 0x2d3020
  1861: 33 0b 00 00 10           a4 = 0x100000
  1866: 7b 1a                    u64 [sp] = a3
  1868: c8 ba 0a                 a3 = a3 + a4
  1871: c9 7a 07                 a0 = a3 - a0
  1874: 7b 17 10                 u64 [sp + 0x10] = a0
  1877: 7b 18 08                 u64 [sp + 0x8] = a1
  1880: 64 96                    s1 = a2
  1882: 50 10 18 f3 02           ra = 24, jump @216
      :                          @151 [@dyn 12]
  1887: 54 36 00 00 10 98 00     jump @168 if s1 <=u 1048576
      :                          @152
  1894: 82 12 18                 t0 = u64 [sp + 0x18]
  1897: 82 18 10                 a1 = u64 [sp + 0x10]
  1900: 33 07                    a0 = 0
  1902: 7b 28 08                 u64 [t0 + 0x8] = a1
  1905: 28 b5 00                 jump @174
      :                          @153
  1908: 49 12 08                 u64 [t0 + 8] = 0
  1911: 33 07 01                 a0 = 0x1
  1914: 28 ac 00                 jump @174
      :                          @154
  1917: 33 09 20 30 2d           a2 = 0x2d3020
  1922: 33 07 00 00 10           a0 = 0x100000
  1927: c8 79 09                 a2 = a2 + a0
  1930: 01                       fallthrough
      :                          @155
  1931: 82 9a                    a3 = u64 [a2]
  1933: c8 5a 08                 a1 = a3 + s0
  1936: ac a8 5f                 jump @167 if a1 <u a3
      :                          @156
  1939: 95 8b 01                 a4 = a1 + 0x1
  1942: 88 bc 01                 a5 = a4 <u 0x1
  1945: d8 b7 0b                 a4 = a0 <u a4
  1948: d4 cb 0b                 a4 = a4 | a5
  1951: 52 0b 50                 jump @167 if a4 != 0
      :                          @157
  1954: 82 9b                    a4 = u64 [a2]
  1956: ab ab e7                 jump @155 if a4 != a3
      :                          @158
  1959: 7b 98                    u64 [a2] = a1
  1961: 33 0c                    a5 = 0
  1963: 01                       fallthrough
      :                          @159
  1964: ab ab df                 jump @155 if a4 != a3
      :                          @160
  1967: 28 31                    jump @166
      :                          @161
  1969: 33 09 20 30 2d           a2 = 0x2d3020
  1974: 33 07 00 00 10           a0 = 0x100000
  1979: c8 79 09                 a2 = a2 + a0
  1982: 01                       fallthrough
      :                          @162
  1983: 82 9a                    a3 = u64 [a2]
  1985: c8 5a 08                 a1 = a3 + s0
  1988: ac a8 2b                 jump @167 if a1 <u a3
      :                          @163
  1991: 95 8b 01                 a4 = a1 + 0x1
  1994: 88 bc 01                 a5 = a4 <u 0x1
  1997: d8 b7 0b                 a4 = a0 <u a4
  2000: d4 cb 0b                 a4 = a4 | a5
  2003: 52 0b 1c                 jump @167 if a4 != 0
      :                          @164
  2006: 82 9b                    a4 = u64 [a2]
  2008: ab ab e7                 jump @162 if a4 != a3
      :                          @165
  2011: 7b 98                    u64 [a2] = a1
  2013: 33 0c                    a5 = 0
  2015: 01                       fallthrough
      :                          @166
  2016: 33 07 20 30 3d           a0 = 0x3d3020
  2021: c9 87 08                 a1 = a0 - a1
  2024: 33 07                    a0 = 0
  2026: 7b 28 08                 u64 [t0 + 0x8] = a1
  2029: 28 39                    jump @174
      :                          @167
  2031: 33 07 01                 a0 = 0x1
  2034: 7b 27 08                 u64 [t0 + 0x8] = a0
  2037: 28 31                    jump @174
      :                          @168
  2039: 64 6c                    a5 = s1
  2041: 82 17                    a0 = u64 [sp]
  2043: 95 77 00 00 10           a0 = a0 + 0x100000
  2048: 82 12 18                 t0 = u64 [sp + 0x18]
  2051: 82 16 08                 s1 = u64 [sp + 0x8]
  2054: 01                       fallthrough
      :                          @169
  2055: 82 78                    a1 = u64 [a0]
  2057: c9 87 09                 a2 = a0 - a1
  2060: ab 69 11                 jump @173 if a2 != s1
      :                          @170
  2063: c9 c8 09                 a2 = a1 - a5
  2066: 01                       fallthrough
      :                          @171
  2067: 82 7a                    a3 = u64 [a0]
  2069: ab 8a f2                 jump @169 if a3 != a1
      :                          @172
  2072: 7b 79                    u64 [a0] = a2
  2074: 33 0b                    a4 = 0
  2076: 01                       fallthrough
      :                          @173
  2077: 82 18 10                 a1 = u64 [sp + 0x10]
  2080: 33 07                    a0 = 0
  2082: 7b 28 08                 u64 [t0 + 0x8] = a1
  2085: 01                       fallthrough
      :                          @174
  2086: 7b 25 10                 u64 [t0 + 0x10] = s0
  2089: 7b 27                    u64 [t0] = a0
  2091: 82 10 30                 ra = u64 [sp + 0x30]
  2094: 82 15 28                 s0 = u64 [sp + 0x28]
  2097: 82 16 20                 s1 = u64 [sp + 0x20]
  2100: 95 11 38                 sp = sp + 0x38
  2103: 32 00                    ret
      :                          @175
  2105: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  2108: 7b 10 40                 u64 [sp + 0x40] = ra
  2111: 7b 15 38                 u64 [sp + 0x38] = s0
  2114: 7b 16 30                 u64 [sp + 0x30] = s1
  2117: 95 88 01                 a1 = a1 + 0x1
  2120: 51 08 53                 jump @183 if a1 == 0
      :                          @176
  2123: 64 75                    s0 = a0
  2125: 82 77                    a0 = u64 [a0]
  2127: 97 79 01                 a2 = a0 << 0x1
  2130: 33 0a 08                 a3 = 0x8
  2133: e4 a8 08                 a1 = maxu(a1, a3)
  2136: e4 89 06                 s1 = maxu(a2, a1)
  2139: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  2142: 98 88 3f                 a1 = a1 >> 0x3f
  2145: 51 07 12                 jump @178 if a0 == 0
      :                          @177
  2148: 82 59 08                 a2 = u64 [s0 + 0x8]
  2151: 7b 19 18                 u64 [sp + 0x18] = a2
  2154: 49 11 20 01              u64 [sp + 32] = 0x1
  2158: 7b 17 28                 u64 [sp + 0x28] = a0
  2161: 28 06                    jump @179
      :                          @178
  2163: 49 11 20                 u64 [sp + 32] = 0
  2166: 01                       fallthrough
      :                          @179
  2167: 64 17                    a0 = sp
  2169: 95 1a 18                 a3 = sp + 0x18
  2172: 64 69                    a2 = s1
  2174: 50 10 1a 6d fe           ra = 26, jump @143
      :                          @180 [@dyn 13]
  2179: 82 18                    a1 = u64 [sp]
  2181: 82 17 08                 a0 = u64 [sp + 0x8]
  2184: 51 08 14                 jump @184 if a1 == 0
      :                          @181
  2187: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  2197: aa 87 0d                 jump @185 if a0 == a1
      :                          @182
  2200: 52 07 18                 jump @186 if a0 != 0
      :                          @183
  2203: 00                       trap
      :                          @184
  2204: 7b 57 08                 u64 [s0 + 0x8] = a0
  2207: 7b 56                    u64 [s0] = s1
  2209: 01                       fallthrough
      :                          @185
  2210: 82 10 40                 ra = u64 [sp + 0x40]
  2213: 82 15 38                 s0 = u64 [sp + 0x38]
  2216: 82 16 30                 s1 = u64 [sp + 0x30]
  2219: 95 11 48                 sp = sp + 0x48
  2222: 32 00                    ret
      :                          @186
  2224: 00                       trap
      :                          @187 [@dyn 14]
  2225: 82 72                    t0 = u64 [a0]
  2227: 33 09 00 00 f0           a2 = 0xfffffffffff00000
  2232: 95 2a ff ff ef           a3 = t0 + 0xffffffffffefffff
  2237: ac 9a 28                 jump @193 if a3 <u a2
      :                          @188
  2240: 82 77 08                 a0 = u64 [a0 + 0x8]
  2243: 33 09 20 30 2d           a2 = 0x2d3020
  2248: 95 99 00 00 10           a2 = a2 + 0x100000
  2253: 01                       fallthrough
      :                          @189
  2254: 82 9a                    a3 = u64 [a2]
  2256: c9 a9 0b                 a4 = a2 - a3
  2259: ab 7b 12                 jump @193 if a4 != a0
      :                          @190
  2262: c9 2a 0b                 a4 = a3 - t0
  2265: 01                       fallthrough
      :                          @191
  2266: 82 9c                    a5 = u64 [a2]
  2268: ab ac f2                 jump @189 if a5 != a3
      :                          @192
  2271: 7b 9b                    u64 [a2] = a4
  2273: 33 08                    a1 = 0
  2275: 32 00                    ret
      :                          @193
  2277: 32 00                    ret
      :                          @194 [@dyn 15]
  2279: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  2282: 7b 10 18                 u64 [sp + 0x18] = ra
  2285: 7b 15 10                 u64 [sp + 0x10] = s0
  2288: 7b 16 08                 u64 [sp + 0x8] = s1
  2291: 64 75                    s0 = a0
  2293: 82 7a 10                 a3 = u64 [a0 + 0x10]
  2296: 82 77                    a0 = u64 [a0]
  2298: c9 a7 07                 a0 = a0 - a3
  2301: 64 96                    s1 = a2
  2303: ac 97 2a                 jump @197 if a0 <u a2
      :                          @195
  2306: 7b 1a                    u64 [sp] = a3
  2308: 82 57 08                 a0 = u64 [s0 + 0x8]
  2311: c8 a7 07                 a0 = a0 + a3
  2314: 64 69                    a2 = s1
  2316: 50 10 20 41 01           ra = 32, jump @216
      :                          @196 [@dyn 16]
  2321: 82 17                    a0 = u64 [sp]
  2323: c8 76 06                 s1 = s1 + a0
  2326: 7b 56 10                 u64 [s0 + 0x10] = s1
  2329: 33 07                    a0 = 0
  2331: 82 10 18                 ra = u64 [sp + 0x18]
  2334: 82 15 10                 s0 = u64 [sp + 0x10]
  2337: 82 16 08                 s1 = u64 [sp + 0x8]
  2340: 95 11 20                 sp = sp + 0x20
  2343: 32 00                    ret
      :                          @197
  2345: 64 57                    a0 = s0
  2347: 7b 18                    u64 [sp] = a1
  2349: 64 a8                    a1 = a3
  2351: 64 69                    a2 = s1
  2353: 50 10 22 43 fd           ra = 34, jump @131
      :                          @198 [@dyn 17]
  2358: 82 18                    a1 = u64 [sp]
  2360: 82 5a 10                 a3 = u64 [s0 + 0x10]
  2363: 28 c7                    jump @195
      :                          @199 [@dyn 18]
  2365: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  2368: 7b 10 20                 u64 [sp + 0x20] = ra
  2371: 7b 15 18                 u64 [sp + 0x18] = s0
  2374: 7b 16 10                 u64 [sp + 0x10] = s1
  2377: 64 86                    s1 = a1
  2379: 83 88                    i32 a1 = a1 + 0
  2381: 33 09 80 00              a2 = 0x80
  2385: 64 7a                    a3 = a0
  2387: ae 98 2b                 jump @204 if a1 >=u a2
      :                          @200
  2390: 82 a8 10                 a1 = u64 [a3 + 0x10]
  2393: 82 a7                    a0 = u64 [a3]
  2395: ab 78 12                 jump @203 if a1 != a0
      :                          @201
  2398: 64 a7                    a0 = a3
  2400: 64 a5                    s0 = a3
  2402: 50 10 26 d7 fe           ra = 38, jump @175
      :                          @202 [@dyn 19]
  2407: 64 5a                    a3 = s0
  2409: 82 58 10                 a1 = u64 [s0 + 0x10]
  2412: 01                       fallthrough
      :                          @203
  2413: 82 a7 08                 a0 = u64 [a3 + 0x8]
  2416: c8 87 07                 a0 = a0 + a1
  2419: 78 76                    u8 [a0] = s1
  2421: 95 88 01                 a1 = a1 + 0x1
  2424: 7b a8 10                 u64 [a3 + 0x10] = a1
  2427: 28 ab 00                 jump @212
      :                          @204
  2430: 8b 67 0b                 i32 a0 = s1 >> 0xb
  2433: 48 11 0c                 u32 [sp + 12] = 0
  2436: 52 07 1c                 jump @206 if a0 != 0
      :                          @205
  2439: 98 67 06                 a0 = s1 >> 0x6
  2442: 86 77 c0 00              a0 = a0 | 0xc0
  2446: 78 17 0c                 u8 [sp + 0xc] = a0
  2449: 84 67 3f                 a0 = s1 & 0x3f
  2452: 86 77 80 00              a0 = a0 | 0x80
  2456: 78 17 0d                 u8 [sp + 0xd] = a0
  2459: 33 06 02                 s1 = 0x2
  2462: 28 63                    jump @209
      :                          @206
  2464: 8b 67 10                 i32 a0 = s1 >> 0x10
  2467: 52 07 29                 jump @208 if a0 != 0
      :                          @207
  2470: 98 67 0c                 a0 = s1 >> 0xc
  2473: 86 77 e0 00              a0 = a0 | 0xe0
  2477: 78 17 0c                 u8 [sp + 0xc] = a0
  2480: 97 67 34                 a0 = s1 << 0x34
  2483: 98 77 3a                 a0 = a0 >> 0x3a
  2486: 95 77 80 00              a0 = a0 + 0x80
  2490: 78 17 0d                 u8 [sp + 0xd] = a0
  2493: 84 67 3f                 a0 = s1 & 0x3f
  2496: 86 77 80 00              a0 = a0 | 0x80
  2500: 78 17 0e                 u8 [sp + 0xe] = a0
  2503: 33 06 03                 s1 = 0x3
  2506: 28 37                    jump @209
      :                          @208
  2508: 97 67 2b                 a0 = s1 << 0x2b
  2511: 98 77 3d                 a0 = a0 >> 0x3d
  2514: 95 77 f0 00              a0 = a0 + 0xf0
  2518: 78 17 0c                 u8 [sp + 0xc] = a0
  2521: 97 67 2e                 a0 = s1 << 0x2e
  2524: 98 77 3a                 a0 = a0 >> 0x3a
  2527: 95 77 80 00              a0 = a0 + 0x80
  2531: 78 17 0d                 u8 [sp + 0xd] = a0
  2534: 97 67 34                 a0 = s1 << 0x34
  2537: 98 77 3a                 a0 = a0 >> 0x3a
  2540: 95 77 80 00              a0 = a0 + 0x80
  2544: 78 17 0e                 u8 [sp + 0xe] = a0
  2547: 84 67 3f                 a0 = s1 & 0x3f
  2550: 86 77 80 00              a0 = a0 | 0x80
  2554: 78 17 0f                 u8 [sp + 0xf] = a0
  2557: 33 06 04                 s1 = 0x4
  2560: 01                       fallthrough
      :                          @209
  2561: 82 a5 10                 s0 = u64 [a3 + 0x10]
  2564: 82 a7                    a0 = u64 [a3]
  2566: c9 57 07                 a0 = a0 - s0
  2569: ac 67 2d                 jump @213 if a0 <u s1
      :                          @210
  2572: 7b 1a                    u64 [sp] = a3
  2574: 82 a7 08                 a0 = u64 [a3 + 0x8]
  2577: c8 57 07                 a0 = a0 + s0
  2580: 95 18 0c                 a1 = sp + 0xc
  2583: 64 69                    a2 = s1
  2585: 50 10 28 34              ra = 40, jump @216
      :                          @211 [@dyn 20]
  2589: c8 56 06                 s1 = s1 + s0
  2592: 82 17                    a0 = u64 [sp]
  2594: 7b 76 10                 u64 [a0 + 0x10] = s1
  2597: 01                       fallthrough
      :                          @212
  2598: 33 07                    a0 = 0
  2600: 82 10 20                 ra = u64 [sp + 0x20]
  2603: 82 15 18                 s0 = u64 [sp + 0x18]
  2606: 82 16 10                 s1 = u64 [sp + 0x10]
  2609: 95 11 28                 sp = sp + 0x28
  2612: 32 00                    ret
      :                          @213
  2614: 64 a7                    a0 = a3
  2616: 64 58                    a1 = s0
  2618: 64 69                    a2 = s1
  2620: 64 a5                    s0 = a3
  2622: 50 10 2a 36 fc           ra = 42, jump @131
      :                          @214 [@dyn 21]
  2627: 64 5a                    a3 = s0
  2629: 82 55 10                 s0 = u64 [s0 + 0x10]
  2632: 28 c4                    jump @210
      :                          @215 [@dyn 22]
  2634: 28 07 04                 jump @295
      :                          @216
  2637: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  2640: 7b 10 18                 u64 [sp + 0x18] = ra
  2643: 7b 15 10                 u64 [sp + 0x10] = s0
  2646: 7b 16 08                 u64 [sp + 0x8] = s1
  2649: 53 19 10 64              jump @225 if a2 <u 16
      :                          @217
  2653: 8d 7a                    i32 a3 = -a0
  2655: 84 a2 07                 t0 = a3 & 0x7
  2658: c8 27 0b                 a4 = a0 + t0
  2661: 51 02 15                 jump @220 if t0 == 0
      :                          @218
  2664: 64 8c                    a5 = a1
  2666: 64 75                    s0 = a0
  2668: 01                       fallthrough
      :                          @219
  2669: 7c ca                    a3 = u8 [a5]
  2671: 78 5a                    u8 [s0] = a3
  2673: 95 55 01                 s0 = s0 + 0x1
  2676: 95 cc 01                 a5 = a5 + 0x1
  2679: ac b5 f6                 jump @219 if s0 <u a4
      :                          @220
  2682: c8 28 03                 t1 = a1 + t0
  2685: c9 29 02                 t0 = a2 - t0
  2688: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  2691: 84 38 07                 a1 = t1 & 0x7
  2694: c8 4b 0a                 a3 = a4 + t2
  2697: 51 08 3b                 jump @227 if a1 == 0
      :                          @221
  2700: 58 04 4b                 jump @230 if t2 <=s 0
      :                          @222
  2703: 97 38 03                 a1 = t1 << 0x3
  2706: 84 80 38                 ra = a1 & 0x38
  2709: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  2712: 82 c5                    s0 = u64 [a5]
  2714: 8d 88                    i32 a1 = -a1
  2716: 84 88 38                 a1 = a1 & 0x38
  2719: 95 cc 08                 a5 = a5 + 0x8
  2722: 01                       fallthrough
      :                          @223
  2723: 82 c6                    s1 = u64 [a5]
  2725: d0 05 05                 s0 = s0 >> ra
  2728: cf 86 09                 a2 = s1 << a1
  2731: d4 59 09                 a2 = a2 | s0
  2734: 7b b9                    u64 [a4] = a2
  2736: 95 bb 08                 a4 = a4 + 0x8
  2739: 95 cc 08                 a5 = a5 + 0x8
  2742: 64 65                    s0 = s1
  2744: ac ab eb                 jump @223 if a4 <u a3
      :                          @224
  2747: 28 1c                    jump @230
      :                          @225
  2749: 64 7a                    a3 = a0
  2751: 52 09 21                 jump @231 if a2 != 0
      :                          @226
  2754: 28 2f                    jump @233
      :                          @227
  2756: 58 04 13                 jump @230 if t2 <=s 0
      :                          @228
  2759: 64 38                    a1 = t1
  2761: 01                       fallthrough
      :                          @229
  2762: 82 89                    a2 = u64 [a1]
  2764: 7b b9                    u64 [a4] = a2
  2766: 95 bb 08                 a4 = a4 + 0x8
  2769: 95 88 08                 a1 = a1 + 0x8
  2772: ac ab f6                 jump @229 if a4 <u a3
      :                          @230
  2775: c8 43 08                 a1 = t1 + t2
  2778: 84 29 07                 a2 = t0 & 0x7
  2781: 51 09 14                 jump @233 if a2 == 0
      :                          @231
  2784: c8 a9 09                 a2 = a2 + a3
  2787: 01                       fallthrough
      :                          @232
  2788: 7c 8b                    a4 = u8 [a1]
  2790: 78 ab                    u8 [a3] = a4
  2792: 95 aa 01                 a3 = a3 + 0x1
  2795: 95 88 01                 a1 = a1 + 0x1
  2798: ac 9a f6                 jump @232 if a3 <u a2
      :                          @233
  2801: 82 10 18                 ra = u64 [sp + 0x18]
  2804: 82 15 10                 s0 = u64 [sp + 0x10]
  2807: 82 16 08                 s1 = u64 [sp + 0x8]
  2810: 95 11 20                 sp = sp + 0x20
  2813: 32 00                    ret
      :                          @234 [@dyn 23]
  2815: 82 77                    a0 = u64 [a0]
  2817: 01                       fallthrough
      :                          @235
  2818: 28                       jump @235
      :                          @236 [@dyn 24]
  2819: 82 77                    a0 = u64 [a0]
  2821: 64 89                    a2 = a1
  2823: 33 08 01                 a1 = 0x1
  2826: 01                       fallthrough
      :                          @237
  2827: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  2831: 7b 10 80 00              u64 [sp + 0x80] = ra
  2835: 7b 15 78                 u64 [sp + 0x78] = s0
  2838: 7b 16 70                 u64 [sp + 0x70] = s1
  2841: 98 7a 04                 a3 = a0 >> 0x4
  2844: 33 04 27                 t2 = 0x27
  2847: 7b 19 30                 u64 [sp + 0x30] = a2
  2850: 7b 18 28                 u64 [sp + 0x28] = a1
  2853: 53 2a 71 02 84 00        jump @240 if a3 <u 625
      :                          @238
  2859: 33 04 27                 t2 = 0x27
  2862: 95 1a 6e                 a3 = sp + 0x6e
  2865: 3a 08 08 00 03           a1 = u64 [0x30008]
  2870: 7b 18 40                 u64 [sp + 0x40] = a1
  2873: 49 11 38 f0 d8 00        u64 [sp + 56] = 0xd8f0
  2879: 33 00 7b 14              ra = 0x147b
  2883: 33 05 a8 00 01           s0 = 0x100a8
  2888: 33 0b ff e0 f5 05        a4 = 0x5f5e0ff
  2894: 33 09 9c                 a2 = 0xffffffffffffff9c
  2897: 01                       fallthrough
      :                          @239
  2898: 64 72                    t0 = a0
  2900: 82 17 40                 a0 = u64 [sp + 0x40]
  2903: d6 72 07                 a0 = t0 mulhu a0
  2906: 98 77 0b                 a0 = a0 >> 0xb
  2909: 82 18 38                 a1 = u64 [sp + 0x38]
  2912: c0 87 06                 i32 s1 = a0 * a1
  2915: c8 26 0c                 a5 = s1 + t0
  2918: 97 c6 30                 s1 = a5 << 0x30
  2921: 98 66 32                 s1 = s1 >> 0x32
  2924: ca 06 06                 s1 = s1 * ra
  2927: 98 68 11                 a1 = s1 >> 0x11
  2930: 98 66 10                 s1 = s1 >> 0x10
  2933: 84 66 fe 07              s1 = s1 & 0x7fe
  2937: ca 98 08                 a1 = a1 * a2
  2940: c8 c8 08                 a1 = a1 + a5
  2943: 97 88 31                 a1 = a1 << 0x31
  2946: 98 88 30                 a1 = a1 >> 0x30
  2949: c8 56 06                 s1 = s1 + s0
  2952: 7c 6c                    a5 = u8 [s1]
  2954: 7c 66 01                 s1 = u8 [s1 + 0x1]
  2957: c8 58 08                 a1 = a1 + s0
  2960: 7c 83 01                 t1 = u8 [a1 + 0x1]
  2963: 7c 88                    a1 = u8 [a1]
  2965: 78 a6 ff                 u8 [a3 + 0xffffffffffffffff] = s1
  2968: 78 ac fe                 u8 [a3 + 0xfffffffffffffffe] = a5
  2971: 78 a3 01                 u8 [a3 + 0x1] = t1
  2974: 78 a8                    u8 [a3] = a1
  2976: 95 44 fc                 t2 = t2 + 0xfffffffffffffffc
  2979: 95 aa fc                 a3 = a3 + 0xfffffffffffffffc
  2982: ac 2b ac                 jump @239 if a4 <u t0
      :                          @240
  2985: 54 17 63 3b              jump @242 if a0 <=u 99
      :                          @241
  2989: 97 78 30                 a1 = a0 << 0x30
  2992: 98 88 32                 a1 = a1 >> 0x32
  2995: 96 88 7b 14              a1 = a1 * 0x147b
  2999: 98 88 11                 a1 = a1 >> 0x11
  3002: 96 8a 9c                 a3 = a1 * 0xffffffffffffff9c
  3005: c8 a7 07                 a0 = a0 + a3
  3008: 97 77 31                 a0 = a0 << 0x31
  3011: 98 77 30                 a0 = a0 >> 0x30
  3014: 95 44 fe                 t2 = t2 + 0xfffffffffffffffe
  3017: 33 0a a8 00 01           a3 = 0x100a8
  3022: c8 a7 07                 a0 = a0 + a3
  3025: 7c 7a 01                 a3 = u8 [a0 + 0x1]
  3028: 7c 77                    a0 = u8 [a0]
  3030: 95 1b 49                 a4 = sp + 0x49
  3033: c8 4b 0b                 a4 = a4 + t2
  3036: 78 ba 01                 u8 [a4 + 0x1] = a3
  3039: 78 b7                    u8 [a4] = a0
  3041: 64 87                    a0 = a1
  3043: 01                       fallthrough
      :                          @242
  3044: 82 1c 30                 a5 = u64 [sp + 0x30]
  3047: 55 17 0a 14              jump @244 if a0 >=u 10
      :                          @243
  3051: 95 49 ff                 a2 = t2 + 0xffffffffffffffff
  3054: 95 18 49                 a1 = sp + 0x49
  3057: c8 98 08                 a1 = a1 + a2
  3060: 83 77 30                 i32 a0 = a0 + 0x30
  3063: 78 87                    u8 [a1] = a0
  3065: 28 21                    jump @245
      :                          @244
  3067: 97 77 01                 a0 = a0 << 0x1
  3070: 95 49 fe                 a2 = t2 + 0xfffffffffffffffe
  3073: 33 08 a8 00 01           a1 = 0x100a8
  3078: c8 87 07                 a0 = a0 + a1
  3081: 7c 78 01                 a1 = u8 [a0 + 0x1]
  3084: 7c 77                    a0 = u8 [a0]
  3086: 95 1a 49                 a3 = sp + 0x49
  3089: c8 9a 0a                 a3 = a3 + a2
  3092: 78 a8 01                 u8 [a3 + 0x1] = a1
  3095: 78 a7                    u8 [a3] = a0
  3097: 01                       fallthrough
      :                          @245
  3098: 82 18 28                 a1 = u64 [sp + 0x28]
  3101: 95 1a 49                 a3 = sp + 0x49
  3104: 9a 96 27                 s1 = 0x27 - a2
  3107: 51 08 19                 jump @247 if a1 == 0
      :                          @246
  3110: 80 c7 34                 a0 = u32 [a5 + 0x34]
  3113: 84 78 01                 a1 = a0 & 0x1
  3116: 33 05 00 00 11           s0 = 0x110000
  3121: 94 85 2b                 s0 = 0x2b if a1 != 0
  3124: 7b 15 28                 u64 [sp + 0x28] = s0
  3127: c8 86 0b                 a4 = s1 + a1
  3130: 28 0d                    jump @248
      :                          @247
  3132: 81 c7 34                 a0 = i32 [a5 + 0x34]
  3135: 9a 9b 28                 a4 = 0x28 - a2
  3138: 49 11 28 2d              u64 [sp + 40] = 0x2d
  3142: 01                       fallthrough
      :                          @248
  3143: c8 a9 09                 a2 = a2 + a3
  3146: 7b 19 18                 u64 [sp + 0x18] = a2
  3149: 97 78 3d                 a1 = a0 << 0x3d
  3152: 82 c9                    a2 = u64 [a5]
  3154: 99 88 3f                 a1 = a1 >>a 0x3f
  3157: 33 0a a8 00 01           a3 = 0x100a8
  3162: d2 8a 0a                 a3 = a3 & a1
  3165: 7b 16 20                 u64 [sp + 0x20] = s1
  3168: 51 09 27                 jump @254 if a2 == 0
      :                          @249
  3171: 82 c5 08                 s0 = u64 [a5 + 0x8]
  3174: ae 5b 21                 jump @254 if a4 >=u s0
      :                          @250
  3177: 7b 1a 10                 u64 [sp + 0x10] = a3
  3180: 84 77 08                 a0 = a0 & 0x8
  3183: 52 07 45                 jump @258 if a0 != 0
      :                          @251
  3186: 7c c7 38                 a0 = u8 [a5 + 0x38]
  3189: c9 b5 09                 a2 = s0 - a4
  3192: 5a 17 01 8e 00           jump @265 if a0 >s 1
      :                          @252
  3197: 52 07 9b 00              jump @267 if a0 != 0
      :                          @253
  3201: 7b 19 08                 u64 [sp + 0x8] = a2
  3204: 28 9a 00                 jump @268
      :                          @254
  3207: 82 c5 20                 s0 = u64 [a5 + 0x20]
  3210: 82 c6 28                 s1 = u64 [a5 + 0x28]
  3213: 64 57                    a0 = s0
  3215: 64 68                    a1 = s1
  3217: 82 19 28                 a2 = u64 [sp + 0x28]
  3220: 50 10 32 5f 01           ra = 50, jump @288
      :                          @255 [@dyn 25]
  3225: 33 08 01                 a1 = 0x1
  3228: 52 07 af 00              jump @273 if a0 != 0
      :                          @256
  3232: 82 6a 18                 a3 = u64 [s1 + 0x18]
  3235: 64 57                    a0 = s0
  3237: 82 18 18                 a1 = u64 [sp + 0x18]
  3240: 82 19 20                 a2 = u64 [sp + 0x20]
  3243: b4 a0 01 34              ra = 52, jump [a3]
      :                          @257 [@dyn 26]
  3247: 64 78                    a1 = a0
  3249: 28 9a 00                 jump @273
      :                          @258
  3252: 7b 1b 38                 u64 [sp + 0x38] = a4
  3255: 81 c7 30                 a0 = i32 [a5 + 0x30]
  3258: 7b 17 08                 u64 [sp + 0x8] = a0
  3261: 7c c8 38                 a1 = u8 [a5 + 0x38]
  3264: 7b 18                    u64 [sp] = a1
  3266: 82 c7 20                 a0 = u64 [a5 + 0x20]
  3269: 82 c6 28                 s1 = u64 [a5 + 0x28]
  3272: 48 1c 30 30              u32 [a5 + 48] = 0x30
  3276: 46 1c 38 01              u8 [a5 + 56] = 0x1
  3280: 7b 17 40                 u64 [sp + 0x40] = a0
  3283: 64 68                    a1 = s1
  3285: 82 19 28                 a2 = u64 [sp + 0x28]
  3288: 82 1a 10                 a3 = u64 [sp + 0x10]
  3291: 50 10 36 18 01           ra = 54, jump @288
      :                          @259 [@dyn 27]
  3296: 52 07 67                 jump @272 if a0 != 0
      :                          @260
  3299: 82 17 38                 a0 = u64 [sp + 0x38]
  3302: c9 75 05                 s0 = s0 - a0
  3305: 95 55 01                 s0 = s0 + 0x1
  3308: 01                       fallthrough
      :                          @261
  3309: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  3312: 51 05 c5 00              jump @283 if s0 == 0
      :                          @262
  3316: 82 69 20                 a2 = u64 [s1 + 0x20]
  3319: 33 08 30                 a1 = 0x30
  3322: 82 17 40                 a0 = u64 [sp + 0x40]
  3325: b4 90 01 38              ra = 56, jump [a2]
      :                          @263 [@dyn 28]
  3329: 51 07 ec                 jump @261 if a0 == 0
      :                          @264
  3332: 28 43                    jump @272
      :                          @265
  3334: 52 17 02 12              jump @267 if a0 != 2
      :                          @266
  3338: 98 97 01                 a0 = a2 >> 0x1
  3341: 95 98 01                 a1 = a2 + 0x1
  3344: 98 88 01                 a1 = a1 >> 0x1
  3347: 7b 18 08                 u64 [sp + 0x8] = a1
  3350: 28 08                    jump @268
      :                          @267
  3352: 64 97                    a0 = a2
  3354: 49 11 08                 u64 [sp + 8] = 0
  3357: 01                       fallthrough
      :                          @268
  3358: 82 c8 20                 a1 = u64 [a5 + 0x20]
  3361: 7b 18 40                 u64 [sp + 0x40] = a1
  3364: 82 c5 28                 s0 = u64 [a5 + 0x28]
  3367: 81 c8 30                 a1 = i32 [a5 + 0x30]
  3370: 7b 18 38                 u64 [sp + 0x38] = a1
  3373: 95 76 01                 s1 = a0 + 0x1
  3376: 01                       fallthrough
      :                          @269
  3377: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
  3380: 51 06 29                 jump @274 if s1 == 0
      :                          @270
  3383: 82 59 20                 a2 = u64 [s0 + 0x20]
  3386: 82 17 40                 a0 = u64 [sp + 0x40]
  3389: 82 18 38                 a1 = u64 [sp + 0x38]
  3392: b4 90 01 3a              ra = 58, jump [a2]
      :                          @271 [@dyn 29]
  3396: 51 07 ed                 jump @269 if a0 == 0
      :                          @272
  3399: 33 08 01                 a1 = 0x1
  3402: 01                       fallthrough
      :                          @273
  3403: 64 87                    a0 = a1
  3405: 82 10 80 00              ra = u64 [sp + 0x80]
  3409: 82 15 78                 s0 = u64 [sp + 0x78]
  3412: 82 16 70                 s1 = u64 [sp + 0x70]
  3415: 95 11 88 00              sp = sp + 0x88
  3419: 32 00                    ret
      :                          @274
  3421: 82 16 40                 s1 = u64 [sp + 0x40]
  3424: 64 67                    a0 = s1
  3426: 64 58                    a1 = s0
  3428: 82 19 28                 a2 = u64 [sp + 0x28]
  3431: 82 1a 10                 a3 = u64 [sp + 0x10]
  3434: 50 10 3c 89 00           ra = 60, jump @288
      :                          @275 [@dyn 30]
  3439: 33 08 01                 a1 = 0x1
  3442: 52 07 d9                 jump @273 if a0 != 0
      :                          @276
  3445: 82 5a 18                 a3 = u64 [s0 + 0x18]
  3448: 64 67                    a0 = s1
  3450: 82 18 18                 a1 = u64 [sp + 0x18]
  3453: 82 19 20                 a2 = u64 [sp + 0x20]
  3456: b4 a0 01 3e              ra = 62, jump [a3]
      :                          @277 [@dyn 31]
  3460: 33 08 01                 a1 = 0x1
  3463: 52 07 c4                 jump @273 if a0 != 0
      :                          @278
  3466: 82 17 08                 a0 = u64 [sp + 0x8]
  3469: 9a 77                    a0 = -a0
  3471: 7b 17 30                 u64 [sp + 0x30] = a0
  3474: 33 06 ff                 s1 = 0xffffffffffffffff
  3477: 01                       fallthrough
      :                          @279
  3478: 82 17 30                 a0 = u64 [sp + 0x30]
  3481: c8 67 07                 a0 = a0 + s1
  3484: 51 17 ff 42              jump @286 if a0 == 4294967295
      :                          @280
  3488: 82 59 20                 a2 = u64 [s0 + 0x20]
  3491: 82 17 40                 a0 = u64 [sp + 0x40]
  3494: 82 18 38                 a1 = u64 [sp + 0x38]
  3497: b4 90 01 40              ra = 64, jump [a2]
      :                          @281 [@dyn 32]
  3501: 95 66 01                 s1 = s1 + 0x1
  3504: 51 07 e6                 jump @279 if a0 == 0
      :                          @282
  3507: 28 37                    jump @287
      :                          @283
  3509: 82 6a 18                 a3 = u64 [s1 + 0x18]
  3512: 82 17 40                 a0 = u64 [sp + 0x40]
  3515: 82 18 18                 a1 = u64 [sp + 0x18]
  3518: 82 19 20                 a2 = u64 [sp + 0x20]
  3521: b4 a0 01 42              ra = 66, jump [a3]
      :                          @284 [@dyn 33]
  3525: 33 08 01                 a1 = 0x1
  3528: 52 07 83                 jump @273 if a0 != 0
      :                          @285
  3531: 33 08                    a1 = 0
  3533: 82 17 30                 a0 = u64 [sp + 0x30]
  3536: 82 19 08                 a2 = u64 [sp + 0x8]
  3539: 7a 79 30                 u32 [a0 + 0x30] = a2
  3542: 82 19                    a2 = u64 [sp]
  3544: 78 79 38                 u8 [a0 + 0x38] = a2
  3547: 28 70 ff                 jump @273
      :                          @286
  3550: 82 16 08                 s1 = u64 [sp + 0x8]
  3553: 82 17 08                 a0 = u64 [sp + 0x8]
  3556: d8 76 08                 a1 = s1 <u a0
  3559: 28 64 ff                 jump @273
      :                          @287
  3562: 82 17 08                 a0 = u64 [sp + 0x8]
  3565: d8 76 08                 a1 = s1 <u a0
  3568: 28 5b ff                 jump @273
      :                          @288
  3571: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  3574: 7b 10 18                 u64 [sp + 0x18] = ra
  3577: 7b 15 10                 u64 [sp + 0x10] = s0
  3580: 7b 16 08                 u64 [sp + 0x8] = s1
  3583: 83 9b                    i32 a4 = a2 + 0
  3585: 33 0c 00 00 11           a5 = 0x110000
  3590: 64 a5                    s0 = a3
  3592: 64 86                    s1 = a1
  3594: 64 7a                    a3 = a0
  3596: aa cb 1a                 jump @291 if a4 == a5
      :                          @289
  3599: 82 6b 20                 a4 = u64 [s1 + 0x20]
  3602: 64 a7                    a0 = a3
  3604: 64 98                    a1 = a2
  3606: 7b 1a                    u64 [sp] = a3
  3608: b4 b0 01 44              ra = 68, jump [a4]
      :                          @290 [@dyn 34]
  3612: 82 1a                    a3 = u64 [sp]
  3614: 64 78                    a1 = a0
  3616: 33 07 01                 a0 = 0x1
  3619: 52 08 20                 jump @294 if a1 != 0
      :                          @291
  3622: 51 05 1a                 jump @293 if s0 == 0
      :                          @292
  3625: 82 6c 18                 a5 = u64 [s1 + 0x18]
  3628: 64 a7                    a0 = a3
  3630: 64 58                    a1 = s0
  3632: 33 09                    a2 = 0
  3634: 82 10 18                 ra = u64 [sp + 0x18]
  3637: 82 15 10                 s0 = u64 [sp + 0x10]
  3640: 82 16 08                 s1 = u64 [sp + 0x8]
  3643: 95 11 20                 sp = sp + 0x20
  3646: 32 0c                    jump [a5]
      :                          @293
  3648: 33 07                    a0 = 0
  3650: 01                       fallthrough
      :                          @294
  3651: 82 10 18                 ra = u64 [sp + 0x18]
  3654: 82 15 10                 s0 = u64 [sp + 0x10]
  3657: 82 16 08                 s1 = u64 [sp + 0x8]
  3660: 95 11 20                 sp = sp + 0x20
  3663: 32 00                    ret
      :                          @295
  3665: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  3669: 7b 10 80 00              u64 [sp + 0x80] = ra
  3673: 7b 15 78                 u64 [sp + 0x78] = s0
  3676: 7b 16 70                 u64 [sp + 0x70] = s1
  3679: 49 11 60 20              u64 [sp + 96] = 0x20
  3683: 33 09 03                 a2 = 0x3
  3686: 78 19 68                 u8 [sp + 0x68] = a2
  3689: 49 11 30                 u64 [sp + 48] = 0
  3692: 49 11 40                 u64 [sp + 64] = 0
  3695: 82 86 20                 s1 = u64 [a1 + 0x20]
  3698: 7b 17 50                 u64 [sp + 0x50] = a0
  3701: 33 07 78 00 01           a0 = 0x10078
  3706: 7b 17 58                 u64 [sp + 0x58] = a0
  3709: 51 06 06 01              jump @317 if s1 == 0
      :                          @296
  3713: 82 87 28                 a0 = u64 [a1 + 0x28]
  3716: 51 07 73 01              jump @327 if a0 == 0
      :                          @297
  3720: 33 09                    a2 = 0
  3722: 82 85                    s0 = u64 [a1]
  3724: 7b 18 08                 u64 [sp + 0x8] = a1
  3727: 82 88 10                 a1 = u64 [a1 + 0x10]
  3730: 7b 18 18                 u64 [sp + 0x18] = a1
  3733: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  3736: 97 88 03                 a1 = a1 << 0x3
  3739: 98 88 03                 a1 = a1 >> 0x3
  3742: 95 88 01                 a1 = a1 + 0x1
  3745: 7b 18                    u64 [sp] = a1
  3747: 95 55 08                 s0 = s0 + 0x8
  3750: 96 78 38                 a1 = a0 * 0x38
  3753: 95 66 18                 s1 = s1 + 0x18
  3756: 33 07 2e                 a0 = 0x2e
  3759: 7b 17 10                 u64 [sp + 0x10] = a0
  3762: 01                       fallthrough
      :                          @298
  3763: 7b 18 20                 u64 [sp + 0x20] = a1
  3766: 7b 19 28                 u64 [sp + 0x28] = a2
  3769: 82 59                    a2 = u64 [s0]
  3771: 51 09 17                 jump @301 if a2 == 0
      :                          @299
  3774: 82 1a 58                 a3 = u64 [sp + 0x58]
  3777: 82 17 50                 a0 = u64 [sp + 0x50]
  3780: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  3783: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3786: b4 a0 01 46              ra = 70, jump [a3]
      :                          @300 [@dyn 35]
  3790: 52 07 4e 01              jump @330 if a0 != 0
      :                          @301
  3794: 81 67 10                 a0 = i32 [s1 + 0x10]
  3797: 7a 17 60                 u32 [sp + 0x60] = a0
  3800: 7c 67 18                 a0 = u8 [s1 + 0x18]
  3803: 78 17 68                 u8 [sp + 0x68] = a0
  3806: 81 67 14                 a0 = i32 [s1 + 0x14]
  3809: 7a 17 64                 u32 [sp + 0x64] = a0
  3812: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3815: 82 67                    a0 = u64 [s1]
  3817: 51 08 26                 jump @306 if a1 == 0
      :                          @302
  3820: 52 18 01 16              jump @304 if a1 != 1
      :                          @303
  3824: 97 77 04                 a0 = a0 << 0x4
  3827: 82 18 18                 a1 = u64 [sp + 0x18]
  3830: c8 87 07                 a0 = a0 + a1
  3833: 82 78 08                 a1 = u64 [a0 + 0x8]
  3836: 82 19 10                 a2 = u64 [sp + 0x10]
  3839: aa 98 07                 jump @305 if a1 == a2
      :                          @304
  3842: 33 08                    a1 = 0
  3844: 28 0f                    jump @307
      :                          @305
  3846: 82 77                    a0 = u64 [a0]
  3848: 82 77                    a0 = u64 [a0]
  3850: 33 08 01                 a1 = 0x1
  3853: 28 06                    jump @307
      :                          @306
  3855: 33 08 01                 a1 = 0x1
  3858: 01                       fallthrough
      :                          @307
  3859: 7b 18 30                 u64 [sp + 0x30] = a1
  3862: 7b 17 38                 u64 [sp + 0x38] = a0
  3865: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  3868: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  3871: 51 08 26                 jump @312 if a1 == 0
      :                          @308
  3874: 52 18 01 16              jump @310 if a1 != 1
      :                          @309
  3878: 97 77 04                 a0 = a0 << 0x4
  3881: 82 18 18                 a1 = u64 [sp + 0x18]
  3884: c8 87 07                 a0 = a0 + a1
  3887: 82 78 08                 a1 = u64 [a0 + 0x8]
  3890: 82 19 10                 a2 = u64 [sp + 0x10]
  3893: aa 98 07                 jump @311 if a1 == a2
      :                          @310
  3896: 33 08                    a1 = 0
  3898: 28 0f                    jump @313
      :                          @311
  3900: 82 77                    a0 = u64 [a0]
  3902: 82 77                    a0 = u64 [a0]
  3904: 33 08 01                 a1 = 0x1
  3907: 28 06                    jump @313
      :                          @312
  3909: 33 08 01                 a1 = 0x1
  3912: 01                       fallthrough
      :                          @313
  3913: 7b 18 40                 u64 [sp + 0x40] = a1
  3916: 7b 17 48                 u64 [sp + 0x48] = a0
  3919: 82 67 08                 a0 = u64 [s1 + 0x8]
  3922: 97 77 04                 a0 = a0 << 0x4
  3925: 82 18 18                 a1 = u64 [sp + 0x18]
  3928: c8 78 08                 a1 = a1 + a0
  3931: 82 87                    a0 = u64 [a1]
  3933: 82 89 08                 a2 = u64 [a1 + 0x8]
  3936: 95 18 30                 a1 = sp + 0x30
  3939: b4 90 01 48              ra = 72, jump [a2]
      :                          @314 [@dyn 36]
  3943: 52 07 b5 00              jump @330 if a0 != 0
      :                          @315
  3947: 95 55 10                 s0 = s0 + 0x10
  3950: 82 18 20                 a1 = u64 [sp + 0x20]
  3953: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  3956: 95 66 38                 s1 = s1 + 0x38
  3959: 82 19 28                 a2 = u64 [sp + 0x28]
  3962: 95 99 01                 a2 = a2 + 0x1
  3965: 52 08 36 ff              jump @298 if a1 != 0
      :                          @316
  3969: 28 69                    jump @325
      :                          @317
  3971: 82 87 18                 a0 = u64 [a1 + 0x18]
  3974: 51 07 71                 jump @327 if a0 == 0
      :                          @318
  3977: 82 85 10                 s0 = u64 [a1 + 0x10]
  3980: 33 0a                    a3 = 0
  3982: 97 79 04                 a2 = a0 << 0x4
  3985: c8 59 09                 a2 = a2 + s0
  3988: 7b 19 20                 u64 [sp + 0x20] = a2
  3991: 7b 18 08                 u64 [sp + 0x8] = a1
  3994: 82 86                    s1 = u64 [a1]
  3996: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  3999: 97 77 04                 a0 = a0 << 0x4
  4002: 98 77 04                 a0 = a0 >> 0x4
  4005: 95 77 01                 a0 = a0 + 0x1
  4008: 7b 17                    u64 [sp] = a0
  4010: 95 66 08                 s1 = s1 + 0x8
  4013: 01                       fallthrough
      :                          @319
  4014: 7b 1a 28                 u64 [sp + 0x28] = a3
  4017: 82 69                    a2 = u64 [s1]
  4019: 51 09 16                 jump @322 if a2 == 0
      :                          @320
  4022: 82 1a 58                 a3 = u64 [sp + 0x58]
  4025: 82 17 50                 a0 = u64 [sp + 0x50]
  4028: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  4031: 82 aa 18                 a3 = u64 [a3 + 0x18]
  4034: b4 a0 01 4a              ra = 74, jump [a3]
      :                          @321 [@dyn 37]
  4038: 52 07 56                 jump @330 if a0 != 0
      :                          @322
  4041: 82 57                    a0 = u64 [s0]
  4043: 82 59 08                 a2 = u64 [s0 + 0x8]
  4046: 95 18 30                 a1 = sp + 0x30
  4049: b4 90 01 4c              ra = 76, jump [a2]
      :                          @323 [@dyn 38]
  4053: 52 07 47                 jump @330 if a0 != 0
      :                          @324
  4056: 95 66 10                 s1 = s1 + 0x10
  4059: 95 55 10                 s0 = s0 + 0x10
  4062: 82 1a 28                 a3 = u64 [sp + 0x28]
  4065: 95 aa 01                 a3 = a3 + 0x1
  4068: 82 17 20                 a0 = u64 [sp + 0x20]
  4071: ab 75 c7                 jump @319 if s0 != a0
      :                          @325
  4074: 82 18 08                 a1 = u64 [sp + 0x8]
  4077: 82 1a                    a3 = u64 [sp]
  4079: 82 87 08                 a0 = u64 [a1 + 0x8]
  4082: ac 7a 0d                 jump @328 if a3 <u a0
      :                          @326
  4085: 28 2c                    jump @331
      :                          @327
  4087: 33 0a                    a3 = 0
  4089: 82 87 08                 a0 = u64 [a1 + 0x8]
  4092: 54 07 25                 jump @331 if a0 <=u 0
      :                          @328
  4095: 82 87                    a0 = u64 [a1]
  4097: 97 a8 04                 a1 = a3 << 0x4
  4100: c8 87 09                 a2 = a0 + a1
  4103: 82 1a 58                 a3 = u64 [sp + 0x58]
  4106: 82 17 50                 a0 = u64 [sp + 0x50]
  4109: 82 98                    a1 = u64 [a2]
  4111: 82 99 08                 a2 = u64 [a2 + 0x8]
  4114: 82 aa 18                 a3 = u64 [a3 + 0x18]
  4117: b4 a0 01 4e              ra = 78, jump [a3]
      :                          @329 [@dyn 39]
  4121: 51 07 08                 jump @331 if a0 == 0
      :                          @330
  4124: 33 07 01                 a0 = 0x1
  4127: 28 05                    jump @332
      :                          @331
  4129: 33 07                    a0 = 0
  4131: 01                       fallthrough
      :                          @332
  4132: 82 10 80 00              ra = u64 [sp + 0x80]
  4136: 82 15 78                 s0 = u64 [sp + 0x78]
  4139: 82 16 70                 s1 = u64 [sp + 0x70]
  4142: 95 11 88 00              sp = sp + 0x88
  4146: 32 00                    ret
      :                          @333 [@dyn 40]
  4148: 81 77                    a0 = i32 [a0]
  4150: 89 7a                    a3 = a0 <s 0
  4152: 85 a9 01                 a2 = a3 ^ 0x1
  4155: 97 7b 20                 a4 = a0 << 0x20
  4158: 98 bb 20                 a4 = a4 >> 0x20
  4161: 9a 77                    a0 = -a0
  4163: da ab 07                 a0 = a4 if a3 == 0
  4166: 64 8a                    a3 = a1
  4168: 64 98                    a1 = a2
  4170: 64 a9                    a2 = a3
  4172: 28 bf fa                 jump @237
