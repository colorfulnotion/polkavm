// RO data = 57/60 bytes
// RW data = 8/1048608 bytes
// Stack size = 1048576 bytes
// RO data = [64, 37, 35, 42, 43, 61, 45, 32, 46, 32, 114, 101, 102, 105, 110, 101, 58, 32, 65, 83, 67, 73, 73, 32, 97, 114, 116, 32, 103, 101, 110, 101, 114, 97, 116, 101, 100, 114, 101, 102, 105, 110, 101, 58, 32, 102, 101, 116, 99, 104, 32, 102, 97, 105, 108, 101, 100]
// RW data = [143, 227, 56, 142, 227, 56, 142, 3]
// Instructions = 749
// Code size = 2216 bytes

      :                          @0
     0: 28 d3 01 00 00           jump @47
      :                          @1
     5: 28 df 07 00 00           jump @193
      :                          @2
    10: 28 e3 07                 jump @194
      :                          @3
    13: 95 11 c8                 sp = sp + 0xffffffffffffffc8
    16: 7b 10 30                 u64 [sp + 0x30] = ra
    19: 7b 15 28                 u64 [sp + 0x28] = s0
    22: 7b 16 20                 u64 [sp + 0x20] = s1
    25: 64 95                    s0 = a2
    27: 64 72                    t0 = a0
    29: 51 08 79                 jump @13 if a1 == 0
      :                          @4
    32: 82 a7 08                 a0 = u64 [a3 + 0x8]
    35: 51 07 7c                 jump @14 if a0 == 0
      :                          @5
    38: 82 a9 10                 a2 = u64 [a3 + 0x10]
    41: 51 09 aa 00              jump @21 if a2 == 0
      :                          @6
    45: 82 a8                    a1 = u64 [a3]
    47: 33 06 10 00 03           s1 = 0x30010
    52: 33 03 00 00 10           t1 = 0x100000
    57: c8 36 06                 s1 = s1 + t1
    60: 01                       fallthrough
      :                          @7
    61: 82 6a                    a3 = u64 [s1]
    63: c8 5a 07                 a0 = a3 + s0
    66: ac a7 cf 00              jump @27 if a0 <u a3
      :                          @8
    70: 95 7b 01                 a4 = a0 + 0x1
    73: 88 bc 01                 a5 = a4 <u 0x1
    76: d8 b3 0b                 a4 = t1 <u a4
    79: d4 cb 0b                 a4 = a4 | a5
    82: 52 0b bf 00              jump @27 if a4 != 0
      :                          @9
    86: 82 6b                    a4 = u64 [s1]
    88: ab ab e5                 jump @7 if a4 != a3
      :                          @10
    91: 7b 67                    u64 [s1] = a0
    93: 33 0c                    a5 = 0
    95: 7b 12 18                 u64 [sp + 0x18] = t0
    98: 33 0a 10 00 03           a3 = 0x30010
   103: 33 0b 00 00 10           a4 = 0x100000
   108: 7b 1a                    u64 [sp] = a3
   110: c8 ba 0a                 a3 = a3 + a4
   113: c9 7a 07                 a0 = a3 - a0
   116: 7b 17 10                 u64 [sp + 0x10] = a0
   119: 7b 18 08                 u64 [sp + 0x8] = a1
   122: 64 96                    s1 = a2
   124: 50 10 02 7a 07           ra = 2, jump @195
      :                          @11 [@dyn 1]
   129: 54 36 00 00 10 98 00     jump @28 if s1 <=u 1048576
      :                          @12
   136: 82 12 18                 t0 = u64 [sp + 0x18]
   139: 82 18 10                 a1 = u64 [sp + 0x10]
   142: 33 07                    a0 = 0
   144: 7b 28 08                 u64 [t0 + 0x8] = a1
   147: 28 b5 00                 jump @34
      :                          @13
   150: 49 12 08                 u64 [t0 + 8] = 0
   153: 33 07 01                 a0 = 0x1
   156: 28 ac 00                 jump @34
      :                          @14
   159: 33 09 10 00 03           a2 = 0x30010
   164: 33 07 00 00 10           a0 = 0x100000
   169: c8 79 09                 a2 = a2 + a0
   172: 01                       fallthrough
      :                          @15
   173: 82 9a                    a3 = u64 [a2]
   175: c8 5a 08                 a1 = a3 + s0
   178: ac a8 5f                 jump @27 if a1 <u a3
      :                          @16
   181: 95 8b 01                 a4 = a1 + 0x1
   184: 88 bc 01                 a5 = a4 <u 0x1
   187: d8 b7 0b                 a4 = a0 <u a4
   190: d4 cb 0b                 a4 = a4 | a5
   193: 52 0b 50                 jump @27 if a4 != 0
      :                          @17
   196: 82 9b                    a4 = u64 [a2]
   198: ab ab e7                 jump @15 if a4 != a3
      :                          @18
   201: 7b 98                    u64 [a2] = a1
   203: 33 0c                    a5 = 0
   205: 01                       fallthrough
      :                          @19
   206: ab ab df                 jump @15 if a4 != a3
      :                          @20
   209: 28 31                    jump @26
      :                          @21
   211: 33 09 10 00 03           a2 = 0x30010
   216: 33 07 00 00 10           a0 = 0x100000
   221: c8 79 09                 a2 = a2 + a0
   224: 01                       fallthrough
      :                          @22
   225: 82 9a                    a3 = u64 [a2]
   227: c8 5a 08                 a1 = a3 + s0
   230: ac a8 2b                 jump @27 if a1 <u a3
      :                          @23
   233: 95 8b 01                 a4 = a1 + 0x1
   236: 88 bc 01                 a5 = a4 <u 0x1
   239: d8 b7 0b                 a4 = a0 <u a4
   242: d4 cb 0b                 a4 = a4 | a5
   245: 52 0b 1c                 jump @27 if a4 != 0
      :                          @24
   248: 82 9b                    a4 = u64 [a2]
   250: ab ab e7                 jump @22 if a4 != a3
      :                          @25
   253: 7b 98                    u64 [a2] = a1
   255: 33 0c                    a5 = 0
   257: 01                       fallthrough
      :                          @26
   258: 33 07 10 00 13           a0 = 0x130010
   263: c9 87 08                 a1 = a0 - a1
   266: 33 07                    a0 = 0
   268: 7b 28 08                 u64 [t0 + 0x8] = a1
   271: 28 39                    jump @34
      :                          @27
   273: 33 07 01                 a0 = 0x1
   276: 7b 27 08                 u64 [t0 + 0x8] = a0
   279: 28 31                    jump @34
      :                          @28
   281: 64 6c                    a5 = s1
   283: 82 17                    a0 = u64 [sp]
   285: 95 77 00 00 10           a0 = a0 + 0x100000
   290: 82 12 18                 t0 = u64 [sp + 0x18]
   293: 82 16 08                 s1 = u64 [sp + 0x8]
   296: 01                       fallthrough
      :                          @29
   297: 82 78                    a1 = u64 [a0]
   299: c9 87 09                 a2 = a0 - a1
   302: ab 69 11                 jump @33 if a2 != s1
      :                          @30
   305: c9 c8 09                 a2 = a1 - a5
   308: 01                       fallthrough
      :                          @31
   309: 82 7a                    a3 = u64 [a0]
   311: ab 8a f2                 jump @29 if a3 != a1
      :                          @32
   314: 7b 79                    u64 [a0] = a2
   316: 33 0b                    a4 = 0
   318: 01                       fallthrough
      :                          @33
   319: 82 18 10                 a1 = u64 [sp + 0x10]
   322: 33 07                    a0 = 0
   324: 7b 28 08                 u64 [t0 + 0x8] = a1
   327: 01                       fallthrough
      :                          @34
   328: 7b 25 10                 u64 [t0 + 0x10] = s0
   331: 7b 27                    u64 [t0] = a0
   333: 82 10 30                 ra = u64 [sp + 0x30]
   336: 82 15 28                 s0 = u64 [sp + 0x28]
   339: 82 16 20                 s1 = u64 [sp + 0x20]
   342: 95 11 38                 sp = sp + 0x38
   345: 32 00                    ret
      :                          @35
   347: 95 11 b8                 sp = sp + 0xffffffffffffffb8
   350: 7b 10 40                 u64 [sp + 0x40] = ra
   353: 7b 15 38                 u64 [sp + 0x38] = s0
   356: 7b 16 30                 u64 [sp + 0x30] = s1
   359: 95 88 01                 a1 = a1 + 0x1
   362: 51 08 53                 jump @43 if a1 == 0
      :                          @36
   365: 64 75                    s0 = a0
   367: 82 77                    a0 = u64 [a0]
   369: 97 79 01                 a2 = a0 << 0x1
   372: 33 0a 08                 a3 = 0x8
   375: e4 a8 08                 a1 = maxu(a1, a3)
   378: e4 89 06                 s1 = maxu(a2, a1)
   381: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
   384: 98 88 3f                 a1 = a1 >> 0x3f
   387: 51 07 12                 jump @38 if a0 == 0
      :                          @37
   390: 82 59 08                 a2 = u64 [s0 + 0x8]
   393: 7b 19 18                 u64 [sp + 0x18] = a2
   396: 49 11 20 01              u64 [sp + 32] = 0x1
   400: 7b 17 28                 u64 [sp + 0x28] = a0
   403: 28 06                    jump @39
      :                          @38
   405: 49 11 20                 u64 [sp + 32] = 0
   408: 01                       fallthrough
      :                          @39
   409: 64 17                    a0 = sp
   411: 95 1a 18                 a3 = sp + 0x18
   414: 64 69                    a2 = s1
   416: 50 10 04 6d fe           ra = 4, jump @3
      :                          @40 [@dyn 2]
   421: 82 18                    a1 = u64 [sp]
   423: 82 17 08                 a0 = u64 [sp + 0x8]
   426: 51 08 14                 jump @44 if a1 == 0
      :                          @41
   429: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
   439: aa 87 0d                 jump @45 if a0 == a1
      :                          @42
   442: 52 07 18                 jump @46 if a0 != 0
      :                          @43
   445: 00                       trap
      :                          @44
   446: 7b 57 08                 u64 [s0 + 0x8] = a0
   449: 7b 56                    u64 [s0] = s1
   451: 01                       fallthrough
      :                          @45
   452: 82 10 40                 ra = u64 [sp + 0x40]
   455: 82 15 38                 s0 = u64 [sp + 0x38]
   458: 82 16 30                 s1 = u64 [sp + 0x30]
   461: 95 11 48                 sp = sp + 0x48
   464: 32 00                    ret
      :                          @46
   466: 00                       trap
      :                          @47 [export #0: 'refine']
   467: 95 11 68 ff              sp = sp + 0xffffffffffffff68
   471: 7b 10 90 00              u64 [sp + 0x90] = ra
   475: 7b 15 88 00              u64 [sp + 0x88] = s0
   479: 7b 16 80 00              u64 [sp + 0x80] = s1
   483: 33 09 04                 a2 = 0x4
   486: 33 05 00 00 01           s0 = 0x10000
   491: ac 98 4a 02              jump @116 if a1 <u a2
      :                          @48
   495: 7d 7b                    a4 = i8 [a0]
   497: 84 ba ff 00              a3 = a4 & 0xff
   501: 33 09 01                 a2 = 0x1
   504: 59 0b 40                 jump @55 if a4 >=s 0
      :                          @49
   507: 33 0b c0 00              a4 = 0xc0
   511: 33 09 02                 a2 = 0x2
   514: ac ba 36                 jump @55 if a3 <u a4
      :                          @50
   517: 33 0b e0 00              a4 = 0xe0
   521: 33 09 03                 a2 = 0x3
   524: ac ba 2c                 jump @55 if a3 <u a4
      :                          @51
   527: 33 0b f0 00              a4 = 0xf0
   531: 33 09 04                 a2 = 0x4
   534: ac ba 22                 jump @55 if a3 <u a4
      :                          @52
   537: 33 0b f8 00              a4 = 0xf8
   541: 33 09 05                 a2 = 0x5
   544: ac ba 18                 jump @55 if a3 <u a4
      :                          @53
   547: 33 0b fc 00              a4 = 0xfc
   551: 33 09 06                 a2 = 0x6
   554: ac ba 0e                 jump @55 if a3 <u a4
      :                          @54
   557: 88 a9 fe 00              a2 = a3 <u 0xfe
   561: 33 0b 08                 a4 = 0x8
   564: c9 9b 09                 a2 = a4 - a2
   567: 01                       fallthrough
      :                          @55
   568: ac 98 fd 01              jump @116 if a1 <u a2
      :                          @56
   572: 51 0a 4c                 jump @66 if a3 == 0
      :                          @57
   575: 51 2a ff 00 9e 05        jump @186 if a3 == 255
      :                          @58
   581: 6c ab                    a4 = sext.b a3
   583: 59 0b 41                 jump @66 if a4 >=s 0
      :                          @59
   586: 33 0c c0 00              a5 = 0xc0
   590: 33 0b 01                 a4 = 0x1
   593: ac ca 33                 jump @65 if a3 <u a5
      :                          @60
   596: 33 0c e0 00              a5 = 0xe0
   600: 33 0b 02                 a4 = 0x2
   603: ac ca 29                 jump @65 if a3 <u a5
      :                          @61
   606: 33 0c f0 00              a5 = 0xf0
   610: 33 0b 03                 a4 = 0x3
   613: ac ca 1f                 jump @65 if a3 <u a5
      :                          @62
   616: 33 0c f8 00              a5 = 0xf8
   620: 33 0b 04                 a4 = 0x4
   623: ac ca 15                 jump @65 if a3 <u a5
      :                          @63
   626: 33 0c fc 00              a5 = 0xfc
   630: 33 0b 05                 a4 = 0x5
   633: ac ca 0b                 jump @65 if a3 <u a5
      :                          @64
   636: 88 aa fe 00              a3 = a3 <u 0xfe
   640: 85 ab 07                 a4 = a3 ^ 0x7
   643: 01                       fallthrough
      :                          @65
   644: ae 9b 5a 05              jump @187 if a4 >=u a2
      :                          @66
   648: aa 98 ad 01              jump @116 if a1 == a2
      :                          @67
   652: c8 97 07                 a0 = a0 + a2
   655: 7d 7b                    a4 = i8 [a0]
   657: c9 98 09                 a2 = a1 - a2
   660: 84 ba ff 00              a3 = a4 & 0xff
   664: 33 08 01                 a1 = 0x1
   667: 59 0b 40                 jump @74 if a4 >=s 0
      :                          @68
   670: 33 0b c0 00              a4 = 0xc0
   674: 33 08 02                 a1 = 0x2
   677: ac ba 36                 jump @74 if a3 <u a4
      :                          @69
   680: 33 0b e0 00              a4 = 0xe0
   684: 33 08 03                 a1 = 0x3
   687: ac ba 2c                 jump @74 if a3 <u a4
      :                          @70
   690: 33 0b f0 00              a4 = 0xf0
   694: 33 08 04                 a1 = 0x4
   697: ac ba 22                 jump @74 if a3 <u a4
      :                          @71
   700: 33 0b f8 00              a4 = 0xf8
   704: 33 08 05                 a1 = 0x5
   707: ac ba 18                 jump @74 if a3 <u a4
      :                          @72
   710: 33 0b fc 00              a4 = 0xfc
   714: 33 08 06                 a1 = 0x6
   717: ac ba 0e                 jump @74 if a3 <u a4
      :                          @73
   720: 88 a8 fe 00              a1 = a3 <u 0xfe
   724: 33 0b 08                 a4 = 0x8
   727: c9 8b 08                 a1 = a4 - a1
   730: 01                       fallthrough
      :                          @74
   731: ac 89 5a 01              jump @116 if a2 <u a1
      :                          @75
   735: 51 0a 4c                 jump @85 if a3 == 0
      :                          @76
   738: 51 2a ff 00 fd 04        jump @188 if a3 == 255
      :                          @77
   744: 6c ab                    a4 = sext.b a3
   746: 59 0b 41                 jump @85 if a4 >=s 0
      :                          @78
   749: 33 0c c0 00              a5 = 0xc0
   753: 33 0b 01                 a4 = 0x1
   756: ac ca 33                 jump @84 if a3 <u a5
      :                          @79
   759: 33 0c e0 00              a5 = 0xe0
   763: 33 0b 02                 a4 = 0x2
   766: ac ca 29                 jump @84 if a3 <u a5
      :                          @80
   769: 33 0c f0 00              a5 = 0xf0
   773: 33 0b 03                 a4 = 0x3
   776: ac ca 1f                 jump @84 if a3 <u a5
      :                          @81
   779: 33 0c f8 00              a5 = 0xf8
   783: 33 0b 04                 a4 = 0x4
   786: ac ca 15                 jump @84 if a3 <u a5
      :                          @82
   789: 33 0c fc 00              a5 = 0xfc
   793: 33 0b 05                 a4 = 0x5
   796: ac ca 0b                 jump @84 if a3 <u a5
      :                          @83
   799: 88 aa fe 00              a3 = a3 <u 0xfe
   803: 85 ab 07                 a4 = a3 ^ 0x7
   806: 01                       fallthrough
      :                          @84
   807: ae 8b bb 04              jump @191 if a4 >=u a1
      :                          @85
   811: ab 89 0a                 jump @87 if a2 != a1
      :                          @86
   814: 33 07                    a0 = 0
   816: 33 06                    s1 = 0
   818: 28 f9 00                 jump @115
      :                          @87
   821: c8 87 07                 a0 = a0 + a1
   824: 7d 7b                    a4 = i8 [a0]
   826: c9 89 08                 a1 = a2 - a1
   829: 84 b9 ff 00              a2 = a4 & 0xff
   833: 33 02 01                 t0 = 0x1
   836: 59 0b 40                 jump @94 if a4 >=s 0
      :                          @88
   839: 33 0b c0 00              a4 = 0xc0
   843: 33 02 02                 t0 = 0x2
   846: ac b9 36                 jump @94 if a2 <u a4
      :                          @89
   849: 33 0b e0 00              a4 = 0xe0
   853: 33 02 03                 t0 = 0x3
   856: ac b9 2c                 jump @94 if a2 <u a4
      :                          @90
   859: 33 0b f0 00              a4 = 0xf0
   863: 33 02 04                 t0 = 0x4
   866: ac b9 22                 jump @94 if a2 <u a4
      :                          @91
   869: 33 0b f8 00              a4 = 0xf8
   873: 33 02 05                 t0 = 0x5
   876: ac b9 18                 jump @94 if a2 <u a4
      :                          @92
   879: 33 0b fc 00              a4 = 0xfc
   883: 33 02 06                 t0 = 0x6
   886: ac b9 0e                 jump @94 if a2 <u a4
      :                          @93
   889: 88 9a fe 00              a3 = a2 <u 0xfe
   893: 33 0b 08                 a4 = 0x8
   896: c9 ab 02                 t0 = a4 - a3
   899: 01                       fallthrough
      :                          @94
   900: ac 28 5c 04              jump @189 if a1 <u t0
      :                          @95
   904: 51 09 14                 jump @99 if a2 == 0
      :                          @96
   907: 51 29 ff 00 56 04        jump @190 if a2 == 255
      :                          @97
   913: 6c 9b                    a4 = sext.b a2
   915: 57 0b 14                 jump @100 if a4 <s 0
      :                          @98
   918: 33 0b                    a4 = 0
   920: 33 06                    s1 = 0
   922: 28 7f                    jump @114
      :                          @99
   924: 33 06                    s1 = 0
   926: e4 28 07                 a0 = maxu(a1, t0)
   929: c9 27 07                 a0 = a0 - t0
   932: 28 87 00                 jump @115
      :                          @100
   935: 55 29 c0 00 0d           jump @102 if a2 >=u 192
      :                          @101
   940: 33 0b 01                 a4 = 0x1
   943: 33 0c 80                 a5 = 0xffffffffffffff80
   946: 28 4a                    jump @111
      :                          @102
   948: 55 29 e0 00 0e           jump @104 if a2 >=u 224
      :                          @103
   953: 33 0b 02                 a4 = 0x2
   956: 33 0c 40 ff              a5 = 0xffffffffffffff40
   960: 28 3c                    jump @111
      :                          @104
   962: 55 29 f0 00 0e           jump @106 if a2 >=u 240
      :                          @105
   967: 33 0b 03                 a4 = 0x3
   970: 33 0c 20 ff              a5 = 0xffffffffffffff20
   974: 28 2e                    jump @111
      :                          @106
   976: 55 29 f8 00 0e           jump @108 if a2 >=u 248
      :                          @107
   981: 33 0b 04                 a4 = 0x4
   984: 33 0c 10 ff              a5 = 0xffffffffffffff10
   988: 28 20                    jump @111
      :                          @108
   990: 55 29 fc 00 0e           jump @110 if a2 >=u 252
      :                          @109
   995: 33 0b 05                 a4 = 0x5
   998: 33 0c 08 ff              a5 = 0xffffffffffffff08
  1002: 28 12                    jump @111
      :                          @110
  1004: 88 9b fe 00              a4 = a2 <u 0xfe
  1008: 33 0c 04 ff              a5 = 0xffffffffffffff04
  1012: 93 bc 02 ff              a5 = 0xffffffffffffff02 if a4 == 0
  1016: 85 bb 07                 a4 = a4 ^ 0x7
  1019: 01                       fallthrough
      :                          @111
  1020: ae 2b e7 03              jump @192 if a4 >=u t0
      :                          @112
  1024: 33 06                    s1 = 0
  1026: c8 c9 09                 a2 = a2 + a5
  1029: 64 bc                    a5 = a4
  1031: 01                       fallthrough
      :                          @113
  1032: c8 c7 0a                 a3 = a0 + a5
  1035: 7c aa                    a3 = u8 [a3]
  1037: 97 66 08                 s1 = s1 << 0x8
  1040: 95 cc ff                 a5 = a5 + 0xffffffffffffffff
  1043: d4 a6 06                 s1 = s1 | a3
  1046: 52 0c f2                 jump @113 if a5 != 0
      :                          @114
  1049: 8a b7 03                 i32 a0 = a4 << 0x3
  1052: cf 79 07                 a0 = a2 << a0
  1055: c8 76 06                 s1 = s1 + a0
  1058: e4 28 07                 a0 = maxu(a1, t0)
  1061: c9 27 07                 a0 = a0 - t0
  1064: ac 67 0d                 jump @116 if a0 <u s1
      :                          @115
  1067: e4 67 07                 a0 = maxu(a0, s1)
  1070: c9 67 07                 a0 = a0 - s1
  1073: 55 17 20 1b              jump @118 if a0 >=u 32
      :                          @116
  1077: 33 08                    a1 = 0
  1079: 01                       fallthrough
      :                          @117
  1080: 64 57                    a0 = s0
  1082: 82 10 90 00              ra = u64 [sp + 0x90]
  1086: 82 15 88 00              s0 = u64 [sp + 0x88]
  1090: 82 16 80 00              s1 = u64 [sp + 0x80]
  1094: 95 11 98 00              sp = sp + 0x98
  1098: 32 00                    ret
      :                          @118
  1100: 33 09 00 30 2a           a2 = 0x2a3000
  1105: 33 0a 1e                 a3 = 0x1e
  1108: 33 05 ff                 s0 = 0xffffffffffffffff
  1111: 33 07                    a0 = 0
  1113: 33 08                    a1 = 0
  1115: 33 0b                    a4 = 0
  1117: 33 0c                    a5 = 0
  1119: 33 00 06                 ra = 0x6
  1122: 0a 01                    ecalli 1 // 'fetch'
  1124: 01                       fallthrough
      :                          @119 [@dyn 3]
  1125: aa 57 94 02              jump @156 if a0 == s0
      :                          @120
  1129: 64 76                    s1 = a0
  1131: 33 09 10 00 03           a2 = 0x30010
  1136: 33 08 00 00 10           a1 = 0x100000
  1141: c8 89 09                 a2 = a2 + a1
  1144: 33 0a 00 10 0e           a3 = 0xe1000
  1149: 01                       fallthrough
      :                          @121
  1150: 82 9b                    a4 = u64 [a2]
  1152: c8 ab 07                 a0 = a4 + a3
  1155: ac b7 57 03              jump @183 if a0 <u a4
      :                          @122
  1159: 95 7c 01                 a5 = a0 + 0x1
  1162: 88 c5 01                 s0 = a5 <u 0x1
  1165: d8 c8 0c                 a5 = a1 <u a5
  1168: d4 5c 0c                 a5 = a5 | s0
  1171: 52 0c 47 03              jump @183 if a5 != 0
      :                          @123
  1175: 82 9c                    a5 = u64 [a2]
  1177: ab bc e5                 jump @121 if a5 != a4
      :                          @124
  1180: 7b 97                    u64 [a2] = a0
  1182: 33 03                    t1 = 0
  1184: 33 08 10 00 13           a1 = 0x130010
  1189: c9 78 04                 t2 = a1 - a0
  1192: 49 11 38 00 10 0e        u64 [sp + 56] = 0xe1000
  1198: 7b 14 40                 u64 [sp + 0x40] = t2
  1201: 49 11 48                 u64 [sp + 72] = 0
  1204: 33 05 00 30 2a           s0 = 0x2a3000
  1209: 33 0b 3b                 a4 = 0x3b
  1212: 33 00 0b                 ra = 0xb
  1215: 33 0c 7b 14              a5 = 0x147b
  1219: 33 07 03                 a0 = 0x3
  1222: 7b 1c 18                 u64 [sp + 0x18] = a5
  1225: 28 31                    jump @126
      :                          @125
  1227: 95 55 fd                 s0 = s0 + 0xfffffffffffffffd
  1230: 96 98 1e                 a1 = a2 * 0x1e
  1233: ca ba 09                 a2 = a3 * a4
  1236: c8 98 08                 a1 = a1 + a2
  1239: 82 19 30                 a2 = u64 [sp + 0x30]
  1242: ca 09 09                 a2 = a2 * ra
  1245: c8 98 08                 a1 = a1 + a2
  1248: ca c8 08                 a1 = a1 * a5
  1251: 98 88 13                 a1 = a1 >> 0x13
  1254: c8 34 09                 a2 = t2 + t1
  1257: 78 98                    u8 [a2] = a1
  1259: 95 33 01                 t1 = t1 + 0x1
  1262: 7b 13 48                 u64 [sp + 0x48] = t1
  1265: 95 66 03                 s1 = s1 + 0x3
  1268: 7b 13 28                 u64 [sp + 0x28] = t1
  1271: ac 75 3e                 jump @129 if s0 <u a0
      :                          @126
  1274: 7c 69                    a2 = u8 [s1]
  1276: 7c 6a 01                 a3 = u8 [s1 + 0x1]
  1279: 82 18 38                 a1 = u64 [sp + 0x38]
  1282: 7c 62 02                 t0 = u8 [s1 + 0x2]
  1285: 7b 12 30                 u64 [sp + 0x30] = t0
  1288: ab 83 c3                 jump @125 if t1 != a1
      :                          @127
  1291: 95 17 38                 a0 = sp + 0x38
  1294: 64 38                    a1 = t1
  1296: 7b 19 28                 u64 [sp + 0x28] = a2
  1299: 7b 1a 20                 u64 [sp + 0x20] = a3
  1302: 50 10 08 45 fc           ra = 8, jump @35
      :                          @128 [@dyn 4]
  1307: 82 1a 20                 a3 = u64 [sp + 0x20]
  1310: 82 19 28                 a2 = u64 [sp + 0x28]
  1313: 33 07 03                 a0 = 0x3
  1316: 82 1c 18                 a5 = u64 [sp + 0x18]
  1319: 33 00 0b                 ra = 0xb
  1322: 33 0b 3b                 a4 = 0x3b
  1325: 82 13 48                 t1 = u64 [sp + 0x48]
  1328: 82 14 40                 t2 = u64 [sp + 0x40]
  1331: 28 98                    jump @125
      :                          @129
  1333: 33 09 10 00 03           a2 = 0x30010
  1338: 33 08 00 00 10           a1 = 0x100000
  1343: c8 89 09                 a2 = a2 + a1
  1346: 33 0a 00 24              a3 = 0x2400
  1350: 01                       fallthrough
      :                          @130
  1351: 82 97                    a0 = u64 [a2]
  1353: c8 a7 05                 s0 = a0 + a3
  1356: ac 75 8f 02              jump @184 if s0 <u a0
      :                          @131
  1360: 95 5c 01                 a5 = s0 + 0x1
  1363: 88 c6 01                 s1 = a5 <u 0x1
  1366: d8 c8 0c                 a5 = a1 <u a5
  1369: d4 6c 0c                 a5 = a5 | s1
  1372: 52 0c 7f 02              jump @184 if a5 != 0
      :                          @132
  1376: 82 9c                    a5 = u64 [a2]
  1378: ab 7c e5                 jump @130 if a5 != a0
      :                          @133
  1381: 7b 95                    u64 [a2] = s0
  1383: 33 09                    a2 = 0
  1385: 33 0a                    a3 = 0
  1387: 33 06                    s1 = 0
  1389: 33 08 10 00 13           a1 = 0x130010
  1394: c9 58 07                 a0 = a1 - s0
  1397: 49 11 50 00 24           u64 [sp + 80] = 0x2400
  1402: 7b 17 58                 u64 [sp + 0x58] = a0
  1405: 82 1c 40                 a5 = u64 [sp + 0x40]
  1408: 3a 08 00 00 03           a1 = u64 [0x30000]
  1413: 7b 18 08                 u64 [sp + 0x8] = a1
  1416: 49 11 60                 u64 [sp + 96] = 0
  1419: 7b 1c 20                 u64 [sp + 0x20] = a5
  1422: 28 10                    jump @135
      :                          @134
  1424: 82 19 18                 a2 = u64 [sp + 0x18]
  1427: 95 99 d0 02              a2 = a2 + 0x2d0
  1431: 82 16 10                 s1 = u64 [sp + 0x10]
  1434: 51 16 48 60              jump @141 if s1 == 72
      :                          @135
  1438: 7b 19 18                 u64 [sp + 0x18] = a2
  1441: 6e 98                    a1 = zext.h a2
  1443: 82 19 08                 a2 = u64 [sp + 0x8]
  1446: d6 98 08                 a1 = a1 mulhu a2
  1449: 96 85 00 05              s0 = a1 * 0x500
  1453: 83 66 01                 i32 s1 = s1 + 0x1
  1456: 7b 16 10                 u64 [sp + 0x10] = s1
  1459: 33 06 80 00              s1 = 0x80
  1463: 28 16                    jump @137
      :                          @136
  1465: c8 a7 08                 a1 = a0 + a3
  1468: 78 8b                    u8 [a1] = a4
  1470: 95 aa 01                 a3 = a3 + 0x1
  1473: 7b 1a 60                 u64 [sp + 0x60] = a3
  1476: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
  1479: 95 55 0a                 s0 = s0 + 0xa
  1482: 51 06 c6                 jump @134 if s1 == 0
      :                          @137
  1485: ae 35 e0 01              jump @174 if s0 >=u t1
      :                          @138
  1489: c8 5c 08                 a1 = a5 + s0
  1492: 82 19 50                 a2 = u64 [sp + 0x50]
  1495: 7c 8b                    a4 = u8 [a1]
  1497: ab 9a e0                 jump @136 if a3 != a2
      :                          @139
  1500: 95 17 50                 a0 = sp + 0x50
  1503: 64 a8                    a1 = a3
  1505: 7b 1b 30                 u64 [sp + 0x30] = a4
  1508: 50 10 0a 77 fb           ra = 10, jump @35
      :                          @140 [@dyn 5]
  1513: 82 1b 30                 a4 = u64 [sp + 0x30]
  1516: 82 1c 20                 a5 = u64 [sp + 0x20]
  1519: 82 13 28                 t1 = u64 [sp + 0x28]
  1522: 82 1a 60                 a3 = u64 [sp + 0x60]
  1525: 82 17 58                 a0 = u64 [sp + 0x58]
  1528: 28 c1                    jump @136
      :                          @141
  1530: 33 09 10 00 03           a2 = 0x30010
  1535: 33 08 00 00 10           a1 = 0x100000
  1540: c8 89 09                 a2 = a2 + a1
  1543: 33 05 48 24              s0 = 0x2448
  1547: 01                       fallthrough
      :                          @142
  1548: 82 9b                    a4 = u64 [a2]
  1550: c8 5b 07                 a0 = a4 + s0
  1553: ac b7 cb 01              jump @185 if a0 <u a4
      :                          @143
  1557: 95 7c 01                 a5 = a0 + 0x1
  1560: 88 c6 01                 s1 = a5 <u 0x1
  1563: d8 c8 0c                 a5 = a1 <u a5
  1566: d4 6c 0c                 a5 = a5 | s1
  1569: 52 0c bb 01              jump @185 if a5 != 0
      :                          @144
  1573: 82 9c                    a5 = u64 [a2]
  1575: ab bc e5                 jump @142 if a5 != a4
      :                          @145
  1578: 7b 97                    u64 [a2] = a0
  1580: 33 05                    s0 = 0
  1582: 33 08                    a1 = 0
  1584: 33 0b                    a4 = 0
  1586: 33 09 10 00 13           a2 = 0x130010
  1591: c9 79 09                 a2 = a2 - a0
  1594: 49 11 68 48 24           u64 [sp + 104] = 0x2448
  1599: 7b 19 70                 u64 [sp + 0x70] = a2
  1602: 82 17 58                 a0 = u64 [sp + 0x58]
  1605: 7b 17 30                 u64 [sp + 0x30] = a0
  1608: 49 11 78                 u64 [sp + 120] = 0
  1611: 49 11 28 11 10           u64 [sp + 40] = 0x1011
  1616: 33 07 00 00 01           a0 = 0x10000
  1621: 7b 17 20                 u64 [sp + 0x20] = a0
  1624: 28 21                    jump @147
      :                          @146
  1626: 82 15 08                 s0 = u64 [sp + 0x8]
  1629: 82 1b                    a4 = u64 [sp]
  1631: 82 19 70                 a2 = u64 [sp + 0x70]
  1634: c8 89 07                 a0 = a2 + a1
  1637: 33 0c 0a                 a5 = 0xa
  1640: 78 7c                    u8 [a0] = a5
  1642: 95 88 01                 a1 = a1 + 0x1
  1645: 7b 18 78                 u64 [sp + 0x78] = a1
  1648: 95 55 80 00              s0 = s0 + 0x80
  1652: 51 1b 48 a0 00           jump @157 if a4 == 72
      :                          @147
  1657: 95 bb 01                 a4 = a4 + 0x1
  1660: 7b 1b                    u64 [sp] = a4
  1662: 33 06 80 00              s1 = 0x80
  1666: 7b 15 08                 u64 [sp + 0x8] = s0
  1669: 28 16                    jump @149
      :                          @148
  1671: c8 89 07                 a0 = a2 + a1
  1674: 78 7c                    u8 [a0] = a5
  1676: 95 88 01                 a1 = a1 + 0x1
  1679: 7b 18 78                 u64 [sp + 0x78] = a1
  1682: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
  1685: 95 55 01                 s0 = s0 + 0x1
  1688: 51 06 48                 jump @153 if s1 == 0
      :                          @149
  1691: ae a5 13 01              jump @175 if s0 >=u a3
      :                          @150
  1695: 82 17 30                 a0 = u64 [sp + 0x30]
  1698: c8 57 07                 a0 = a0 + s0
  1701: 7c 77                    a0 = u8 [a0]
  1703: 97 7b 03                 a4 = a0 << 0x3
  1706: c8 b7 07                 a0 = a0 + a4
  1709: 82 1b 28                 a4 = u64 [sp + 0x28]
  1712: ca b7 07                 a0 = a0 * a4
  1715: 98 77 14                 a0 = a0 >> 0x14
  1718: 82 1b 20                 a4 = u64 [sp + 0x20]
  1721: c8 b7 07                 a0 = a0 + a4
  1724: 82 1b 68                 a4 = u64 [sp + 0x68]
  1727: 7c 7c                    a5 = u8 [a0]
  1729: ab b8 c6                 jump @148 if a1 != a4
      :                          @151
  1732: 95 17 68                 a0 = sp + 0x68
  1735: 7b 1a 18                 u64 [sp + 0x18] = a3
  1738: 7b 1c 10                 u64 [sp + 0x10] = a5
  1741: 50 10 0c 8e fa           ra = 12, jump @35
      :                          @152 [@dyn 6]
  1746: 82 1c 10                 a5 = u64 [sp + 0x10]
  1749: 82 1a 18                 a3 = u64 [sp + 0x18]
  1752: 82 18 78                 a1 = u64 [sp + 0x78]
  1755: 82 19 70                 a2 = u64 [sp + 0x70]
  1758: 28 a9                    jump @148
      :                          @153
  1760: 82 17 68                 a0 = u64 [sp + 0x68]
  1763: ab 78 77 ff              jump @146 if a1 != a0
      :                          @154
  1767: 95 17 68                 a0 = sp + 0x68
  1770: 64 a5                    s0 = a3
  1772: 50 10 0e 6f fa           ra = 14, jump @35
      :                          @155 [@dyn 7]
  1777: 64 5a                    a3 = s0
  1779: 82 18 78                 a1 = u64 [sp + 0x78]
  1782: 28 64 ff                 jump @146
      :                          @156
  1785: 33 0a 25 00 01           a3 = 0x10025
  1790: 33 07 02                 a0 = 0x2
  1793: 33 0b 14                 a4 = 0x14
  1796: 33 08                    a1 = 0
  1798: 33 09                    a2 = 0
  1800: 0a 64                    ecalli 100 // 'log'
  1802: 33 08                    a1 = 0
  1804: 33 05 00 00 01           s0 = 0x10000
  1809: 28 27 fd                 jump @117
      :                          @157
  1812: 7b 18 30                 u64 [sp + 0x30] = a1
  1815: 82 17 50                 a0 = u64 [sp + 0x50]
  1818: 82 12 68                 t0 = u64 [sp + 0x68]
  1821: 51 07 2d                 jump @164 if a0 == 0
      :                          @158
  1824: 56 37 00 00 10 2a        jump @164 if a0 >u 1048576
      :                          @159
  1830: 82 18 58                 a1 = u64 [sp + 0x58]
  1833: 33 0a 10 00 03           a3 = 0x30010
  1838: 95 a5 00 00 10           s0 = a3 + 0x100000
  1843: 01                       fallthrough
      :                          @160
  1844: 82 5a                    a3 = u64 [s0]
  1846: c9 a5 0b                 a4 = s0 - a3
  1849: ab 8b 11                 jump @164 if a4 != a1
      :                          @161
  1852: c9 7a 0b                 a4 = a3 - a0
  1855: 01                       fallthrough
      :                          @162
  1856: 82 5c                    a5 = u64 [s0]
  1858: ab ac f2                 jump @160 if a5 != a3
      :                          @163
  1861: 7b 5b                    u64 [s0] = a4
  1863: 33 06                    s1 = 0
  1865: 01                       fallthrough
      :                          @164
  1866: 7b 12 28                 u64 [sp + 0x28] = t0
  1869: 64 95                    s0 = a2
  1871: 82 17 38                 a0 = u64 [sp + 0x38]
  1874: 51 07 2b                 jump @171 if a0 == 0
      :                          @165
  1877: 56 37 00 00 10 28        jump @171 if a0 >u 1048576
      :                          @166
  1883: 82 18 40                 a1 = u64 [sp + 0x40]
  1886: 33 0a 10 00 03           a3 = 0x30010
  1891: 95 a9 00 00 10           a2 = a3 + 0x100000
  1896: 01                       fallthrough
      :                          @167
  1897: 82 9a                    a3 = u64 [a2]
  1899: c9 a9 0b                 a4 = a2 - a3
  1902: ab 8b 0f                 jump @171 if a4 != a1
      :                          @168
  1905: c9 7a 0b                 a4 = a3 - a0
  1908: 01                       fallthrough
      :                          @169
  1909: 82 9c                    a5 = u64 [a2]
  1911: ab ac f2                 jump @167 if a5 != a3
      :                          @170
  1914: 7b 9b                    u64 [a2] = a4
  1916: 01                       fallthrough
      :                          @171
  1917: 33 0a 0a 00 01           a3 = 0x1000a
  1922: 33 07 01                 a0 = 0x1
  1925: 33 0b 1b                 a4 = 0x1b
  1928: 33 08                    a1 = 0
  1930: 33 09                    a2 = 0
  1932: 0a 64                    ecalli 100 // 'log'
  1934: 64 57                    a0 = s0
  1936: 82 18 30                 a1 = u64 [sp + 0x30]
  1939: 33 00 10                 ra = 0x10
  1942: 0a 07                    ecalli 7 // 'export'
  1944: 01                       fallthrough
      :                          @172 [@dyn 8]
  1945: 82 16 28                 s1 = u64 [sp + 0x28]
  1948: 95 68 ff ff ef           a1 = s1 + 0xffffffffffefffff
  1953: 55 38 00 00 f0 0e        jump @176 if a1 >=u 4293918720
      :                          @173
  1959: 82 18 30                 a1 = u64 [sp + 0x30]
  1962: 28 8e fc                 jump @117
      :                          @174
  1965: 00                       trap
      :                          @175
  1966: 00                       trap
      :                          @176
  1967: 33 07 10 00 03           a0 = 0x30010
  1972: 95 77 00 00 10           a0 = a0 + 0x100000
  1977: 82 18 30                 a1 = u64 [sp + 0x30]
  1980: 01                       fallthrough
      :                          @177
  1981: 82 7c                    a5 = u64 [a0]
  1983: c9 c7 09                 a2 = a0 - a5
  1986: ab 59 76 fc              jump @117 if a2 != s0
      :                          @178
  1990: c9 6c 09                 a2 = a5 - s1
  1993: 01                       fallthrough
      :                          @179
  1994: 82 7a                    a3 = u64 [a0]
  1996: ab ca f1                 jump @177 if a3 != a5
      :                          @180
  1999: 7b 79                    u64 [a0] = a2
  2001: 33 0b                    a4 = 0
  2003: 01                       fallthrough
      :                          @181
  2004: ab ca e9                 jump @177 if a3 != a5
      :                          @182
  2007: 28 61 fc                 jump @117
      :                          @183
  2010: 00                       trap
      :                          @184
  2011: 00                       trap
      :                          @185
  2012: 00                       trap
      :                          @186
  2013: 00                       trap
      :                          @187
  2014: 00                       trap
      :                          @188
  2015: 00                       trap
      :                          @189
  2016: 00                       trap
      :                          @190
  2017: 00                       trap
      :                          @191
  2018: 00                       trap
      :                          @192
  2019: 00                       trap
      :                          @193 [export #1: 'accumulate']
  2020: 33 07 00 00 01           a0 = 0x10000
  2025: 33 08                    a1 = 0
  2027: 32 00                    ret
      :                          @194 [export #2: 'on_transfer']
  2029: 33 07 00 00 01           a0 = 0x10000
  2034: 33 08                    a1 = 0
  2036: 32 00                    ret
      :                          @195
  2038: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  2041: 7b 10 18                 u64 [sp + 0x18] = ra
  2044: 7b 15 10                 u64 [sp + 0x10] = s0
  2047: 7b 16 08                 u64 [sp + 0x8] = s1
  2050: 53 19 10 64              jump @204 if a2 <u 16
      :                          @196
  2054: 8d 7a                    i32 a3 = -a0
  2056: 84 a2 07                 t0 = a3 & 0x7
  2059: c8 27 0b                 a4 = a0 + t0
  2062: 51 02 15                 jump @199 if t0 == 0
      :                          @197
  2065: 64 8c                    a5 = a1
  2067: 64 75                    s0 = a0
  2069: 01                       fallthrough
      :                          @198
  2070: 7c ca                    a3 = u8 [a5]
  2072: 78 5a                    u8 [s0] = a3
  2074: 95 55 01                 s0 = s0 + 0x1
  2077: 95 cc 01                 a5 = a5 + 0x1
  2080: ac b5 f6                 jump @198 if s0 <u a4
      :                          @199
  2083: c8 28 03                 t1 = a1 + t0
  2086: c9 29 02                 t0 = a2 - t0
  2089: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  2092: 84 38 07                 a1 = t1 & 0x7
  2095: c8 4b 0a                 a3 = a4 + t2
  2098: 51 08 3b                 jump @206 if a1 == 0
      :                          @200
  2101: 58 04 4b                 jump @209 if t2 <=s 0
      :                          @201
  2104: 97 38 03                 a1 = t1 << 0x3
  2107: 84 80 38                 ra = a1 & 0x38
  2110: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  2113: 82 c5                    s0 = u64 [a5]
  2115: 8d 88                    i32 a1 = -a1
  2117: 84 88 38                 a1 = a1 & 0x38
  2120: 95 cc 08                 a5 = a5 + 0x8
  2123: 01                       fallthrough
      :                          @202
  2124: 82 c6                    s1 = u64 [a5]
  2126: d0 05 05                 s0 = s0 >> ra
  2129: cf 86 09                 a2 = s1 << a1
  2132: d4 59 09                 a2 = a2 | s0
  2135: 7b b9                    u64 [a4] = a2
  2137: 95 bb 08                 a4 = a4 + 0x8
  2140: 95 cc 08                 a5 = a5 + 0x8
  2143: 64 65                    s0 = s1
  2145: ac ab eb                 jump @202 if a4 <u a3
      :                          @203
  2148: 28 1c                    jump @209
      :                          @204
  2150: 64 7a                    a3 = a0
  2152: 52 09 21                 jump @210 if a2 != 0
      :                          @205
  2155: 28 2f                    jump @212
      :                          @206
  2157: 58 04 13                 jump @209 if t2 <=s 0
      :                          @207
  2160: 64 38                    a1 = t1
  2162: 01                       fallthrough
      :                          @208
  2163: 82 89                    a2 = u64 [a1]
  2165: 7b b9                    u64 [a4] = a2
  2167: 95 bb 08                 a4 = a4 + 0x8
  2170: 95 88 08                 a1 = a1 + 0x8
  2173: ac ab f6                 jump @208 if a4 <u a3
      :                          @209
  2176: c8 43 08                 a1 = t1 + t2
  2179: 84 29 07                 a2 = t0 & 0x7
  2182: 51 09 14                 jump @212 if a2 == 0
      :                          @210
  2185: c8 a9 09                 a2 = a2 + a3
  2188: 01                       fallthrough
      :                          @211
  2189: 7c 8b                    a4 = u8 [a1]
  2191: 78 ab                    u8 [a3] = a4
  2193: 95 aa 01                 a3 = a3 + 0x1
  2196: 95 88 01                 a1 = a1 + 0x1
  2199: ac 9a f6                 jump @211 if a3 <u a2
      :                          @212
  2202: 82 10 18                 ra = u64 [sp + 0x18]
  2205: 82 15 10                 s0 = u64 [sp + 0x10]
  2208: 82 16 08                 s1 = u64 [sp + 0x8]
  2211: 95 11 20                 sp = sp + 0x20
  2214: 32 00                    ret
