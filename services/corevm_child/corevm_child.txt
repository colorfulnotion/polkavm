// RO data = 520/520 bytes
// RW data = 8/4128 bytes
// Stack size = 40960 bytes
// Jump table entry point size = 2 bytes
// RO data = [67, 72, 73, 76, 68, 32, 78, 79, 82, 77, 32, 110, 61, 32, 102, 105, 98, 95, 110, 95, 50, 61, 32, 114, 101, 115, 117, 108, 116, 61, 32, 40, 97, 100, 100, 114, 50, 61, 32, 40, 97, 100, 100, 114, 49, 61, 41, 32, 102, 105, 98, 95, 110, 95, 49, 61, 41, 32, 114, 101, 115, 117, 108, 116, 61, 67, 72, 73, 76, 68, 32, 66, 65, 83, 69, 32, 110, 61, 67, 72, 73, 76, 68, 32, 87, 82, 73, 84, 69, 32, 111, 117, 116, 95, 97, 100, 100, 114, 101, 115, 115, 61, 0, 0, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 13, 0, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 30, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 46, 0, 1, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 38, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 56, 0, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 65, 0, 1, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 22, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 78, 0, 1, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 22, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0]
// RW data = [75, 89, 134, 56, 214, 197, 109, 52]
// Instructions = 1282
// Code size = 3690 bytes

      :                          @0
     0: 28 81 01                 jump @29
      :                          @1 [@dyn 1]
     3: 95 11 78 ff              sp = sp + 0xffffffffffffff78
     7: 7b 10 80 00              u64 [sp + 0x80] = ra
    11: 80 89 34                 a2 = u32 [a1 + 0x34]
    14: 84 9a 10                 a3 = a2 & 0x10
    17: 52 0a 16                 jump @4 if a3 != 0
      :                          @2
    20: 84 99 20                 a2 = a2 & 0x20
    23: 52 09 51                 jump @8 if a2 != 0
      :                          @3
    26: 80 77                    a0 = u32 [a0]
    28: 82 10 80 00              ra = u64 [sp + 0x80]
    32: 95 11 88 00              sp = sp + 0x88
    36: 28 d8 08                 jump @183
      :                          @4
    39: 81 7b                    a4 = i32 [a0]
    41: 33 09 81 00              a2 = 0x81
    45: 95 17 7f                 a0 = sp + 0x7f
    48: 33 02 57                 t0 = 0x57
    51: 01                       fallthrough
      :                          @5
    52: 64 9c                    a5 = a2
    54: 8b ba 04                 i32 a3 = a4 >> 0x4
    57: 84 bb 0f                 a4 = a4 & 0xf
    60: 88 b3 0a                 t1 = a4 <u 0xa
    63: 33 09 30                 a2 = 0x30
    66: da 32 09                 a2 = t0 if t1 == 0
    69: be b9 09                 i32 a2 = a2 + a4
    72: 78 79                    u8 [a0] = a2
    74: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
    77: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
    80: 64 ab                    a4 = a3
    82: 52 0a e2                 jump @5 if a3 != 0
      :                          @6
    85: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
    88: 56 27 80 00 69           jump @14 if a0 >u 128
      :                          @7
    93: 9a 9b 81 00              a4 = 0x81 - a2
    97: 64 1a                    a3 = sp
    99: c8 7a 0a                 a3 = a3 + a0
   102: 28 42                    jump @12
      :                          @8
   104: 81 7b                    a4 = i32 [a0]
   106: 33 09 81 00              a2 = 0x81
   110: 95 17 7f                 a0 = sp + 0x7f
   113: 33 02 37                 t0 = 0x37
   116: 01                       fallthrough
      :                          @9
   117: 64 9c                    a5 = a2
   119: 8b ba 04                 i32 a3 = a4 >> 0x4
   122: 84 bb 0f                 a4 = a4 & 0xf
   125: 88 b3 0a                 t1 = a4 <u 0xa
   128: 33 09 30                 a2 = 0x30
   131: da 32 09                 a2 = t0 if t1 == 0
   134: be b9 09                 i32 a2 = a2 + a4
   137: 78 79                    u8 [a0] = a2
   139: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   142: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   145: 64 ab                    a4 = a3
   147: 52 0a e2                 jump @9 if a3 != 0
      :                          @10
   150: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
   153: 56 27 80 00 28           jump @14 if a0 >u 128
      :                          @11
   158: 9a 9b 81 00              a4 = 0x81 - a2
   162: 64 1a                    a3 = sp
   164: c8 7a 0a                 a3 = a3 + a0
   167: 01                       fallthrough
      :                          @12
   168: 33 09 02                 a2 = 0x2
   171: 64 87                    a0 = a1
   173: 33 08 68 00 01           a1 = 0x10068
   178: 50 10 04 66 09           ra = 4, jump @193
      :                          @13 [@dyn 2]
   183: 82 10 80 00              ra = u64 [sp + 0x80]
   187: 95 11 88 00              sp = sp + 0x88
   191: 32 00                    ret
      :                          @14
   193: 00                       trap
      :                          @15 [@dyn 3]
   194: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   198: 7b 10 80 00              u64 [sp + 0x80] = ra
   202: 80 89 34                 a2 = u32 [a1 + 0x34]
   205: 84 9a 10                 a3 = a2 & 0x10
   208: 52 0a 16                 jump @18 if a3 != 0
      :                          @16
   211: 84 99 20                 a2 = a2 & 0x20
   214: 52 09 51                 jump @22 if a2 != 0
      :                          @17
   217: 82 77                    a0 = u64 [a0]
   219: 82 10 80 00              ra = u64 [sp + 0x80]
   223: 95 11 88 00              sp = sp + 0x88
   227: 28 19 08                 jump @183
      :                          @18
   230: 82 7b                    a4 = u64 [a0]
   232: 33 09 81 00              a2 = 0x81
   236: 95 17 7f                 a0 = sp + 0x7f
   239: 33 02 57                 t0 = 0x57
   242: 01                       fallthrough
      :                          @19
   243: 64 9c                    a5 = a2
   245: 98 ba 04                 a3 = a4 >> 0x4
   248: 84 bb 0f                 a4 = a4 & 0xf
   251: 88 b3 0a                 t1 = a4 <u 0xa
   254: 33 09 30                 a2 = 0x30
   257: da 32 09                 a2 = t0 if t1 == 0
   260: be b9 09                 i32 a2 = a2 + a4
   263: 78 79                    u8 [a0] = a2
   265: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   268: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   271: 64 ab                    a4 = a3
   273: 52 0a e2                 jump @19 if a3 != 0
      :                          @20
   276: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
   279: 56 27 80 00 69           jump @28 if a0 >u 128
      :                          @21
   284: 9a 9b 81 00              a4 = 0x81 - a2
   288: 64 1a                    a3 = sp
   290: c8 7a 0a                 a3 = a3 + a0
   293: 28 42                    jump @26
      :                          @22
   295: 82 7b                    a4 = u64 [a0]
   297: 33 09 81 00              a2 = 0x81
   301: 95 17 7f                 a0 = sp + 0x7f
   304: 33 02 37                 t0 = 0x37
   307: 01                       fallthrough
      :                          @23
   308: 64 9c                    a5 = a2
   310: 98 ba 04                 a3 = a4 >> 0x4
   313: 84 bb 0f                 a4 = a4 & 0xf
   316: 88 b3 0a                 t1 = a4 <u 0xa
   319: 33 09 30                 a2 = 0x30
   322: da 32 09                 a2 = t0 if t1 == 0
   325: be b9 09                 i32 a2 = a2 + a4
   328: 78 79                    u8 [a0] = a2
   330: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   333: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   336: 64 ab                    a4 = a3
   338: 52 0a e2                 jump @23 if a3 != 0
      :                          @24
   341: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
   344: 56 27 80 00 28           jump @28 if a0 >u 128
      :                          @25
   349: 9a 9b 81 00              a4 = 0x81 - a2
   353: 64 1a                    a3 = sp
   355: c8 7a 0a                 a3 = a3 + a0
   358: 01                       fallthrough
      :                          @26
   359: 33 09 02                 a2 = 0x2
   362: 64 87                    a0 = a1
   364: 33 08 68 00 01           a1 = 0x10068
   369: 50 10 08 a7 08           ra = 8, jump @193
      :                          @27 [@dyn 4]
   374: 82 10 80 00              ra = u64 [sp + 0x80]
   378: 95 11 88 00              sp = sp + 0x88
   382: 32 00                    ret
      :                          @28
   384: 00                       trap
      :                          @29 [export #0: 'main']
   385: 95 11 00 ff              sp = sp + 0xffffffffffffff00
   389: 7b 10 f8 00              u64 [sp + 0xf8] = ra
   393: 7b 15 f0 00              u64 [sp + 0xf0] = s0
   397: 7b 16 e8 00              u64 [sp + 0xe8] = s1
   401: 49 11 08 ff ef           u64 [sp + 8] = 0xffffffffffffefff
   406: 7b 17 10                 u64 [sp + 0x10] = a0
   409: 33 0a 02                 a3 = 0x2
   412: 7b 1a                    u64 [sp] = a3
   414: 55 17 02 94 00           jump @40 if a0 >=u 2
      :                          @30
   419: 48 11 1c 01              u32 [sp + 28] = 0x1
   423: 95 17 10                 a0 = sp + 0x10
   426: 7b 17 40                 u64 [sp + 0x40] = a0
   429: 33 07 06                 a0 = 0x6
   432: 7b 17 48                 u64 [sp + 0x48] = a0
   435: 95 17 1c                 a0 = sp + 0x1c
   438: 7b 17 50                 u64 [sp + 0x50] = a0
   441: 7b 1a 58                 u64 [sp + 0x58] = a3
   444: 33 07 98 01 01           a0 = 0x10198
   449: 7b 17 70                 u64 [sp + 0x70] = a0
   452: 49 11 78 02              u64 [sp + 120] = 0x2
   456: 49 21 90 00              u64 [sp + 144] = 0
   460: 95 17 40                 a0 = sp + 0x40
   463: 7b 17 80 00              u64 [sp + 0x80] = a0
   467: 49 21 88 00 02           u64 [sp + 136] = 0x2
   472: 95 17 d0 00              a0 = sp + 0xd0
   476: 95 18 70                 a1 = sp + 0x70
   479: 50 10 0a 05 04           ra = 10, jump @113
      :                          @31 [@dyn 5]
   484: 82 15 d8 00              s0 = u64 [sp + 0xd8]
   488: 82 1b e0 00              a4 = u64 [sp + 0xe0]
   492: 82 16 d0 00              s1 = u64 [sp + 0xd0]
   496: 33 07 02                 a0 = 0x2
   499: 33 08                    a1 = 0
   501: 33 09                    a2 = 0
   503: 64 5a                    a3 = s0
   505: 33 00 0c                 ra = 0xc
   508: 0a 64                    ecalli 100 // 'log'
   510: 01                       fallthrough
      :                          @32 [@dyn 6]
   511: 82 17 08                 a0 = u64 [sp + 0x8]
   514: c8 67 07                 a0 = a0 + s1
   517: 53 27 00 f0 fe 00        jump @48 if a0 <u 4294963200
      :                          @33
   523: 33 07 10 00 03           a0 = 0x30010
   528: 95 77 00 10              a0 = a0 + 0x1000
   532: 01                       fallthrough
      :                          @34
   533: 82 78                    a1 = u64 [a0]
   535: c9 87 09                 a2 = a0 - a1
   538: ab 59 e9 00              jump @48 if a2 != s0
      :                          @35
   542: c9 68 09                 a2 = a1 - s1
   545: 01                       fallthrough
      :                          @36
   546: 82 7a                    a3 = u64 [a0]
   548: ab 8a f1                 jump @34 if a3 != a1
      :                          @37
   551: 7b 79                    u64 [a0] = a2
   553: 33 0b                    a4 = 0
   555: 01                       fallthrough
      :                          @38
   556: ab 8a e9                 jump @34 if a3 != a1
      :                          @39
   559: 28 d4 00                 jump @48
      :                          @40
   562: 97 77 0c                 a0 = a0 << 0xc
   565: 95 78 00 e0 00           a1 = a0 + 0xe000
   570: 7b 18 20                 u64 [sp + 0x20] = a1
   573: 81 88                    a1 = i32 [a1]
   575: 7a 18 2c                 u32 [sp + 0x2c] = a1
   578: 95 77 00 f0 00           a0 = a0 + 0xf000
   583: 7b 17 30                 u64 [sp + 0x30] = a0
   586: 81 77                    a0 = i32 [a0]
   588: 7a 17 3c                 u32 [sp + 0x3c] = a0
   591: be 87 07                 i32 a0 = a0 + a1
   594: 7a 17 1c                 u32 [sp + 0x1c] = a0
   597: 95 17 10                 a0 = sp + 0x10
   600: 7b 17 70                 u64 [sp + 0x70] = a0
   603: 33 07 06                 a0 = 0x6
   606: 7b 17 78                 u64 [sp + 0x78] = a0
   609: 95 18 2c                 a1 = sp + 0x2c
   612: 7b 18 80 00              u64 [sp + 0x80] = a1
   616: 7b 1a 88 00              u64 [sp + 0x88] = a3
   620: 95 18 20                 a1 = sp + 0x20
   623: 7b 18 90 00              u64 [sp + 0x90] = a1
   627: 7b 17 98 00              u64 [sp + 0x98] = a0
   631: 95 18 3c                 a1 = sp + 0x3c
   634: 7b 18 a0 00              u64 [sp + 0xa0] = a1
   638: 7b 1a a8 00              u64 [sp + 0xa8] = a3
   642: 95 18 30                 a1 = sp + 0x30
   645: 7b 18 b0 00              u64 [sp + 0xb0] = a1
   649: 7b 17 b8 00              u64 [sp + 0xb8] = a0
   653: 95 17 1c                 a0 = sp + 0x1c
   656: 7b 17 c0 00              u64 [sp + 0xc0] = a0
   660: 7b 1a c8 00              u64 [sp + 0xc8] = a3
   664: 33 07 38 01 01           a0 = 0x10138
   669: 7b 17 40                 u64 [sp + 0x40] = a0
   672: 49 11 48 06              u64 [sp + 72] = 0x6
   676: 49 11 60                 u64 [sp + 96] = 0
   679: 95 18 70                 a1 = sp + 0x70
   682: 7b 18 50                 u64 [sp + 0x50] = a1
   685: 49 11 58 06              u64 [sp + 88] = 0x6
   689: 95 17 d0 00              a0 = sp + 0xd0
   693: 95 18 40                 a1 = sp + 0x40
   696: 50 10 0e 2c 03           ra = 14, jump @113
      :                          @41 [@dyn 7]
   701: 82 15 d8 00              s0 = u64 [sp + 0xd8]
   705: 82 1b e0 00              a4 = u64 [sp + 0xe0]
   709: 82 16 d0 00              s1 = u64 [sp + 0xd0]
   713: 33 07 02                 a0 = 0x2
   716: 33 08                    a1 = 0
   718: 33 09                    a2 = 0
   720: 64 5a                    a3 = s0
   722: 33 00 10                 ra = 0x10
   725: 0a 64                    ecalli 100 // 'log'
   727: 01                       fallthrough
      :                          @42 [@dyn 8]
   728: 82 17 08                 a0 = u64 [sp + 0x8]
   731: c8 67 07                 a0 = a0 + s1
   734: 53 27 00 f0 25           jump @48 if a0 <u 4294963200
      :                          @43
   739: 33 07 10 00 03           a0 = 0x30010
   744: 95 77 00 10              a0 = a0 + 0x1000
   748: 01                       fallthrough
      :                          @44
   749: 82 78                    a1 = u64 [a0]
   751: c9 87 09                 a2 = a0 - a1
   754: ab 59 11                 jump @48 if a2 != s0
      :                          @45
   757: c9 68 09                 a2 = a1 - s1
   760: 01                       fallthrough
      :                          @46
   761: 82 7a                    a3 = u64 [a0]
   763: ab 8a f2                 jump @44 if a3 != a1
      :                          @47
   766: 7b 79                    u64 [a0] = a2
   768: 33 0b                    a4 = 0
   770: 01                       fallthrough
      :                          @48
   771: 81 17 10                 a0 = i32 [sp + 0x10]
   774: 97 77 0c                 a0 = a0 << 0xc
   777: 83 77 00 00 01           i32 a0 = a0 + 0x10000
   782: 7a 17 30                 u32 [sp + 0x30] = a0
   785: 95 17 30                 a0 = sp + 0x30
   788: 7b 17 40                 u64 [sp + 0x40] = a0
   791: 82 18                    a1 = u64 [sp]
   793: 7b 18 48                 u64 [sp + 0x48] = a1
   796: 95 17 1c                 a0 = sp + 0x1c
   799: 7b 17 50                 u64 [sp + 0x50] = a0
   802: 7b 18 58                 u64 [sp + 0x58] = a1
   805: 33 07 b8 01 01           a0 = 0x101b8
   810: 7b 17 70                 u64 [sp + 0x70] = a0
   813: 49 11 78 02              u64 [sp + 120] = 0x2
   817: 49 21 90 00              u64 [sp + 144] = 0
   821: 95 18 40                 a1 = sp + 0x40
   824: 7b 18 80 00              u64 [sp + 0x80] = a1
   828: 49 21 88 00 02           u64 [sp + 136] = 0x2
   833: 95 17 d0 00              a0 = sp + 0xd0
   837: 95 18 70                 a1 = sp + 0x70
   840: 50 10 12 9c 02           ra = 18, jump @113
      :                          @49 [@dyn 9]
   845: 82 15 d8 00              s0 = u64 [sp + 0xd8]
   849: 82 1b e0 00              a4 = u64 [sp + 0xe0]
   853: 82 16 d0 00              s1 = u64 [sp + 0xd0]
   857: 33 07 02                 a0 = 0x2
   860: 33 08                    a1 = 0
   862: 33 09                    a2 = 0
   864: 64 5a                    a3 = s0
   866: 33 00 14                 ra = 0x14
   869: 0a 64                    ecalli 100 // 'log'
   871: 01                       fallthrough
      :                          @50 [@dyn 10]
   872: 82 17 08                 a0 = u64 [sp + 0x8]
   875: c8 67 07                 a0 = a0 + s1
   878: 53 27 00 f0 25           jump @56 if a0 <u 4294963200
      :                          @51
   883: 33 07 10 00 03           a0 = 0x30010
   888: 95 77 00 10              a0 = a0 + 0x1000
   892: 01                       fallthrough
      :                          @52
   893: 82 78                    a1 = u64 [a0]
   895: c9 87 09                 a2 = a0 - a1
   898: ab 59 11                 jump @56 if a2 != s0
      :                          @53
   901: c9 68 09                 a2 = a1 - s1
   904: 01                       fallthrough
      :                          @54
   905: 82 7a                    a3 = u64 [a0]
   907: ab 8a f2                 jump @52 if a3 != a1
      :                          @55
   910: 7b 79                    u64 [a0] = a2
   912: 33 0b                    a4 = 0
   914: 01                       fallthrough
      :                          @56
   915: 80 19 30                 a2 = u32 [sp + 0x30]
   918: 81 1a 1c                 a3 = i32 [sp + 0x1c]
   921: 33 07 00 00 01           a0 = 0x10000
   926: 33 08 00 10              a1 = 0x1000
   930: 7a 9a                    u32 [a2] = a3
   932: 82 10 f8 00              ra = u64 [sp + 0xf8]
   936: 82 15 f0 00              s0 = u64 [sp + 0xf0]
   940: 82 16 e8 00              s1 = u64 [sp + 0xe8]
   944: 95 11 00 01              sp = sp + 0x100
   948: 32 00                    ret
      :                          @57
   950: 95 11 b8                 sp = sp + 0xffffffffffffffb8
   953: 7b 10 40                 u64 [sp + 0x40] = ra
   956: 7b 15 38                 u64 [sp + 0x38] = s0
   959: 7b 16 30                 u64 [sp + 0x30] = s1
   962: c8 89 09                 a2 = a2 + a1
   965: ac 89 52                 jump @65 if a2 <u a1
      :                          @58
   968: 64 75                    s0 = a0
   970: 82 77                    a0 = u64 [a0]
   972: 97 78 01                 a1 = a0 << 0x1
   975: 33 0a 08                 a3 = 0x8
   978: e4 a9 09                 a2 = maxu(a2, a3)
   981: e4 98 06                 s1 = maxu(a1, a2)
   984: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
   987: 98 88 3f                 a1 = a1 >> 0x3f
   990: 51 07 12                 jump @60 if a0 == 0
      :                          @59
   993: 82 59 08                 a2 = u64 [s0 + 0x8]
   996: 7b 19 18                 u64 [sp + 0x18] = a2
   999: 49 11 20 01              u64 [sp + 32] = 0x1
  1003: 7b 17 28                 u64 [sp + 0x28] = a0
  1006: 28 06                    jump @61
      :                          @60
  1008: 49 11 20                 u64 [sp + 32] = 0
  1011: 01                       fallthrough
      :                          @61
  1012: 64 17                    a0 = sp
  1014: 95 1a 18                 a3 = sp + 0x18
  1017: 64 69                    a2 = s1
  1019: 50 10 16 32              ra = 22, jump @69
      :                          @62 [@dyn 11]
  1023: 82 18                    a1 = u64 [sp]
  1025: 82 17 08                 a0 = u64 [sp + 0x8]
  1028: 51 08 14                 jump @66 if a1 == 0
      :                          @63
  1031: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1041: aa 87 0d                 jump @67 if a0 == a1
      :                          @64
  1044: 52 07 18                 jump @68 if a0 != 0
      :                          @65
  1047: 00                       trap
      :                          @66
  1048: 7b 57 08                 u64 [s0 + 0x8] = a0
  1051: 7b 56                    u64 [s0] = s1
  1053: 01                       fallthrough
      :                          @67
  1054: 82 10 40                 ra = u64 [sp + 0x40]
  1057: 82 15 38                 s0 = u64 [sp + 0x38]
  1060: 82 16 30                 s1 = u64 [sp + 0x30]
  1063: 95 11 48                 sp = sp + 0x48
  1066: 32 00                    ret
      :                          @68
  1068: 00                       trap
      :                          @69
  1069: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  1072: 7b 10 30                 u64 [sp + 0x30] = ra
  1075: 7b 15 28                 u64 [sp + 0x28] = s0
  1078: 7b 16 20                 u64 [sp + 0x20] = s1
  1081: 64 96                    s1 = a2
  1083: 64 73                    t1 = a0
  1085: 51 08 6e                 jump @79 if a1 == 0
      :                          @70
  1088: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1091: 51 07 71                 jump @80 if a0 == 0
      :                          @71
  1094: 82 a9 10                 a2 = u64 [a3 + 0x10]
  1097: 51 09 9e 00              jump @87 if a2 == 0
      :                          @72
  1101: 82 a8                    a1 = u64 [a3]
  1103: 33 02 00 10              t0 = 0x1000
  1107: 33 04 10 00 03           t2 = 0x30010
  1112: c8 24 07                 a0 = t2 + t0
  1115: 01                       fallthrough
      :                          @73
  1116: 82 7a                    a3 = u64 [a0]
  1118: c8 6a 05                 s0 = a3 + s1
  1121: ac a5 c2 00              jump @93 if s0 <u a3
      :                          @74
  1125: 95 5b 01                 a4 = s0 + 0x1
  1128: 88 bc 01                 a5 = a4 <u 0x1
  1131: d8 b2 0b                 a4 = t0 <u a4
  1134: d4 cb 0b                 a4 = a4 | a5
  1137: 52 0b b2 00              jump @93 if a4 != 0
      :                          @75
  1141: 82 7b                    a4 = u64 [a0]
  1143: ab ab e5                 jump @73 if a4 != a3
      :                          @76
  1146: 7b 75                    u64 [a0] = s0
  1148: 33 0c                    a5 = 0
  1150: 7b 13 18                 u64 [sp + 0x18] = t1
  1153: c9 54 07                 a0 = t2 - s0
  1156: 95 77 00 10              a0 = a0 + 0x1000
  1160: 7b 17 10                 u64 [sp + 0x10] = a0
  1163: 7b 18 08                 u64 [sp + 0x8] = a1
  1166: 64 95                    s0 = a2
  1168: 7b 14                    u64 [sp] = t2
  1170: 50 10 18 b4 03           ra = 24, jump @163
      :                          @77 [@dyn 12]
  1175: 54 25 00 10 94 00        jump @94 if s0 <=u 4096
      :                          @78
  1181: 82 13 18                 t1 = u64 [sp + 0x18]
  1184: 82 18 10                 a1 = u64 [sp + 0x10]
  1187: 33 07                    a0 = 0
  1189: 7b 38 08                 u64 [t1 + 0x8] = a1
  1192: 28 b1 00                 jump @100
      :                          @79
  1195: 49 13 08                 u64 [t1 + 8] = 0
  1198: 33 07 01                 a0 = 0x1
  1201: 28 a8 00                 jump @100
      :                          @80
  1204: 33 07 00 10              a0 = 0x1000
  1208: 33 02 10 00 03           t0 = 0x30010
  1213: c8 72 09                 a2 = t0 + a0
  1216: 01                       fallthrough
      :                          @81
  1217: 82 9b                    a4 = u64 [a2]
  1219: c8 6b 0a                 a3 = a4 + s1
  1222: ac ba 5d                 jump @93 if a3 <u a4
      :                          @82
  1225: 95 ac 01                 a5 = a3 + 0x1
  1228: 88 c8 01                 a1 = a5 <u 0x1
  1231: d8 c7 0c                 a5 = a0 <u a5
  1234: d4 c8 08                 a1 = a1 | a5
  1237: 52 08 4e                 jump @93 if a1 != 0
      :                          @83
  1240: 82 98                    a1 = u64 [a2]
  1242: ab b8 e7                 jump @81 if a1 != a4
      :                          @84
  1245: 7b 9a                    u64 [a2] = a3
  1247: 33 0c                    a5 = 0
  1249: 01                       fallthrough
      :                          @85
  1250: ab b8 df                 jump @81 if a1 != a4
      :                          @86
  1253: 28 30                    jump @92
      :                          @87
  1255: 33 07 00 10              a0 = 0x1000
  1259: 33 02 10 00 03           t0 = 0x30010
  1264: c8 72 09                 a2 = t0 + a0
  1267: 01                       fallthrough
      :                          @88
  1268: 82 9b                    a4 = u64 [a2]
  1270: c8 6b 0a                 a3 = a4 + s1
  1273: ac ba 2a                 jump @93 if a3 <u a4
      :                          @89
  1276: 95 ac 01                 a5 = a3 + 0x1
  1279: 88 c8 01                 a1 = a5 <u 0x1
  1282: d8 c7 0c                 a5 = a0 <u a5
  1285: d4 c8 08                 a1 = a1 | a5
  1288: 52 08 1b                 jump @93 if a1 != 0
      :                          @90
  1291: 82 98                    a1 = u64 [a2]
  1293: ab b8 e7                 jump @88 if a1 != a4
      :                          @91
  1296: 7b 9a                    u64 [a2] = a3
  1298: 33 0c                    a5 = 0
  1300: 01                       fallthrough
      :                          @92
  1301: c9 a2 07                 a0 = t0 - a3
  1304: 95 78 00 10              a1 = a0 + 0x1000
  1308: 33 07                    a0 = 0
  1310: 7b 38 08                 u64 [t1 + 0x8] = a1
  1313: 28 38                    jump @100
      :                          @93
  1315: 33 07 01                 a0 = 0x1
  1318: 7b 37 08                 u64 [t1 + 0x8] = a0
  1321: 28 30                    jump @100
      :                          @94
  1323: 64 5c                    a5 = s0
  1325: 82 18                    a1 = u64 [sp]
  1327: 95 87 00 10              a0 = a1 + 0x1000
  1331: 82 13 18                 t1 = u64 [sp + 0x18]
  1334: 82 15 08                 s0 = u64 [sp + 0x8]
  1337: 01                       fallthrough
      :                          @95
  1338: 82 78                    a1 = u64 [a0]
  1340: c9 87 09                 a2 = a0 - a1
  1343: ab 59 11                 jump @99 if a2 != s0
      :                          @96
  1346: c9 c8 09                 a2 = a1 - a5
  1349: 01                       fallthrough
      :                          @97
  1350: 82 7a                    a3 = u64 [a0]
  1352: ab 8a f2                 jump @95 if a3 != a1
      :                          @98
  1355: 7b 79                    u64 [a0] = a2
  1357: 33 0b                    a4 = 0
  1359: 01                       fallthrough
      :                          @99
  1360: 82 18 10                 a1 = u64 [sp + 0x10]
  1363: 33 07                    a0 = 0
  1365: 7b 38 08                 u64 [t1 + 0x8] = a1
  1368: 01                       fallthrough
      :                          @100
  1369: 7b 36 10                 u64 [t1 + 0x10] = s1
  1372: 7b 37                    u64 [t1] = a0
  1374: 82 10 30                 ra = u64 [sp + 0x30]
  1377: 82 15 28                 s0 = u64 [sp + 0x28]
  1380: 82 16 20                 s1 = u64 [sp + 0x20]
  1383: 95 11 38                 sp = sp + 0x38
  1386: 32 00                    ret
      :                          @101
  1388: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1391: 7b 10 40                 u64 [sp + 0x40] = ra
  1394: 7b 15 38                 u64 [sp + 0x38] = s0
  1397: 7b 16 30                 u64 [sp + 0x30] = s1
  1400: 95 88 01                 a1 = a1 + 0x1
  1403: 51 08 53                 jump @109 if a1 == 0
      :                          @102
  1406: 64 75                    s0 = a0
  1408: 82 77                    a0 = u64 [a0]
  1410: 97 79 01                 a2 = a0 << 0x1
  1413: 33 0a 08                 a3 = 0x8
  1416: e4 a8 08                 a1 = maxu(a1, a3)
  1419: e4 89 06                 s1 = maxu(a2, a1)
  1422: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1425: 98 88 3f                 a1 = a1 >> 0x3f
  1428: 51 07 12                 jump @104 if a0 == 0
      :                          @103
  1431: 82 59 08                 a2 = u64 [s0 + 0x8]
  1434: 7b 19 18                 u64 [sp + 0x18] = a2
  1437: 49 11 20 01              u64 [sp + 32] = 0x1
  1441: 7b 17 28                 u64 [sp + 0x28] = a0
  1444: 28 06                    jump @105
      :                          @104
  1446: 49 11 20                 u64 [sp + 32] = 0
  1449: 01                       fallthrough
      :                          @105
  1450: 64 17                    a0 = sp
  1452: 95 1a 18                 a3 = sp + 0x18
  1455: 64 69                    a2 = s1
  1457: 50 10 1a 7c fe           ra = 26, jump @69
      :                          @106 [@dyn 13]
  1462: 82 18                    a1 = u64 [sp]
  1464: 82 17 08                 a0 = u64 [sp + 0x8]
  1467: 51 08 14                 jump @110 if a1 == 0
      :                          @107
  1470: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1480: aa 87 0d                 jump @111 if a0 == a1
      :                          @108
  1483: 52 07 18                 jump @112 if a0 != 0
      :                          @109
  1486: 00                       trap
      :                          @110
  1487: 7b 57 08                 u64 [s0 + 0x8] = a0
  1490: 7b 56                    u64 [s0] = s1
  1492: 01                       fallthrough
      :                          @111
  1493: 82 10 40                 ra = u64 [sp + 0x40]
  1496: 82 15 38                 s0 = u64 [sp + 0x38]
  1499: 82 16 30                 s1 = u64 [sp + 0x30]
  1502: 95 11 48                 sp = sp + 0x48
  1505: 32 00                    ret
      :                          @112
  1507: 00                       trap
      :                          @113
  1508: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  1511: 7b 10 30                 u64 [sp + 0x30] = ra
  1514: 7b 15 28                 u64 [sp + 0x28] = s0
  1517: 7b 16 20                 u64 [sp + 0x20] = s1
  1520: 82 8a 08                 a3 = u64 [a1 + 0x8]
  1523: 64 75                    s0 = a0
  1525: 51 0a 35                 jump @118 if a3 == 0
      :                          @114
  1528: 82 89                    a2 = u64 [a1]
  1530: 33 07                    a0 = 0
  1532: 95 9b 08                 a4 = a2 + 0x8
  1535: 01                       fallthrough
      :                          @115
  1536: 82 bc                    a5 = u64 [a4]
  1538: c8 c7 07                 a0 = a0 + a5
  1541: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  1544: 95 bb 10                 a4 = a4 + 0x10
  1547: 52 0a f5                 jump @115 if a3 != 0
      :                          @116
  1550: 82 8a 18                 a3 = u64 [a1 + 0x18]
  1553: 51 0a 24                 jump @120 if a3 == 0
      :                          @117
  1556: 82 99 08                 a2 = u64 [a2 + 0x8]
  1559: 8e 99                    a2 = a2 >u 0
  1561: 88 7a 10                 a3 = a0 <u 0x10
  1564: 85 aa 01                 a3 = a3 ^ 0x1
  1567: d4 a9 09                 a2 = a2 | a3
  1570: 89 7a                    a3 = a0 <s 0
  1572: e0 a9 09                 a2 = a2 & ~a3
  1575: 52 09 0a                 jump @119 if a2 != 0
      :                          @118
  1578: 33 07                    a0 = 0
  1580: 33 09 01                 a2 = 0x1
  1583: 28 4b                    jump @128
      :                          @119
  1585: 97 77 01                 a0 = a0 << 0x1
  1588: 01                       fallthrough
      :                          @120
  1589: 51 07 41                 jump @127 if a0 == 0
      :                          @121
  1592: 57 07 74                 jump @133 if a0 <s 0
      :                          @122
  1595: 64 53                    t1 = s0
  1597: 33 09 00 10              a2 = 0x1000
  1601: 33 02 10 00 03           t0 = 0x30010
  1606: c8 92 0b                 a4 = t0 + a2
  1609: 01                       fallthrough
      :                          @123
  1610: 82 bc                    a5 = u64 [a4]
  1612: c8 7c 0a                 a3 = a5 + a0
  1615: ac ca 5b                 jump @131 if a3 <u a5
      :                          @124
  1618: 95 a5 01                 s0 = a3 + 0x1
  1621: 88 56 01                 s1 = s0 <u 0x1
  1624: d8 59 05                 s0 = a2 <u s0
  1627: d4 65 05                 s0 = s0 | s1
  1630: 52 05 4c                 jump @131 if s0 != 0
      :                          @125
  1633: 82 b6                    s1 = u64 [a4]
  1635: ab c6 e7                 jump @123 if s1 != a5
      :                          @126
  1638: 7b ba                    u64 [a4] = a3
  1640: c9 a2 09                 a2 = t0 - a3
  1643: 33 0a 00 10              a3 = 0x1000
  1647: c8 a9 09                 a2 = a2 + a3
  1650: 64 35                    s0 = t1
  1652: 28 06                    jump @128
      :                          @127
  1654: 33 09 01                 a2 = 0x1
  1657: 01                       fallthrough
      :                          @128
  1658: 7b 17                    u64 [sp] = a0
  1660: 7b 19 08                 u64 [sp + 0x8] = a2
  1663: 49 11 10                 u64 [sp + 16] = 0
  1666: 64 17                    a0 = sp
  1668: 50 10 1c 03 06           ra = 28, jump @245
      :                          @129 [@dyn 14]
  1673: 52 07 22                 jump @132 if a0 != 0
      :                          @130
  1676: 82 17 10                 a0 = u64 [sp + 0x10]
  1679: 82 18 08                 a1 = u64 [sp + 0x8]
  1682: 82 19                    a2 = u64 [sp]
  1684: 7b 57 10                 u64 [s0 + 0x10] = a0
  1687: 7b 58 08                 u64 [s0 + 0x8] = a1
  1690: 7b 59                    u64 [s0] = a2
  1692: 82 10 30                 ra = u64 [sp + 0x30]
  1695: 82 15 28                 s0 = u64 [sp + 0x28]
  1698: 82 16 20                 s1 = u64 [sp + 0x20]
  1701: 95 11 38                 sp = sp + 0x38
  1704: 32 00                    ret
      :                          @131
  1706: 00                       trap
      :                          @132
  1707: 00                       trap
      :                          @133
  1708: 00                       trap
      :                          @134 [@dyn 15]
  1709: 82 72                    t0 = u64 [a0]
  1711: 33 09 00 f0              a2 = 0xfffffffffffff000
  1715: 95 2a ff ef              a3 = t0 + 0xffffffffffffefff
  1719: ac 9a 27                 jump @140 if a3 <u a2
      :                          @135
  1722: 82 77 08                 a0 = u64 [a0 + 0x8]
  1725: 33 09 10 00 03           a2 = 0x30010
  1730: 95 99 00 10              a2 = a2 + 0x1000
  1734: 01                       fallthrough
      :                          @136
  1735: 82 9a                    a3 = u64 [a2]
  1737: c9 a9 0b                 a4 = a2 - a3
  1740: ab 7b 12                 jump @140 if a4 != a0
      :                          @137
  1743: c9 2a 0b                 a4 = a3 - t0
  1746: 01                       fallthrough
      :                          @138
  1747: 82 9c                    a5 = u64 [a2]
  1749: ab ac f2                 jump @136 if a5 != a3
      :                          @139
  1752: 7b 9b                    u64 [a2] = a4
  1754: 33 08                    a1 = 0
  1756: 32 00                    ret
      :                          @140
  1758: 32 00                    ret
      :                          @141 [@dyn 16]
  1760: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  1763: 7b 10 18                 u64 [sp + 0x18] = ra
  1766: 7b 15 10                 u64 [sp + 0x10] = s0
  1769: 7b 16 08                 u64 [sp + 0x8] = s1
  1772: 64 75                    s0 = a0
  1774: 82 7a 10                 a3 = u64 [a0 + 0x10]
  1777: 82 77                    a0 = u64 [a0]
  1779: c9 a7 07                 a0 = a0 - a3
  1782: 64 96                    s1 = a2
  1784: ac 97 2a                 jump @144 if a0 <u a2
      :                          @142
  1787: 7b 1a                    u64 [sp] = a3
  1789: 82 57 08                 a0 = u64 [s0 + 0x8]
  1792: c8 a7 07                 a0 = a0 + a3
  1795: 64 69                    a2 = s1
  1797: 50 10 22 41 01           ra = 34, jump @163
      :                          @143 [@dyn 17]
  1802: 82 17                    a0 = u64 [sp]
  1804: c8 76 06                 s1 = s1 + a0
  1807: 7b 56 10                 u64 [s0 + 0x10] = s1
  1810: 33 07                    a0 = 0
  1812: 82 10 18                 ra = u64 [sp + 0x18]
  1815: 82 15 10                 s0 = u64 [sp + 0x10]
  1818: 82 16 08                 s1 = u64 [sp + 0x8]
  1821: 95 11 20                 sp = sp + 0x20
  1824: 32 00                    ret
      :                          @144
  1826: 64 57                    a0 = s0
  1828: 7b 18                    u64 [sp] = a1
  1830: 64 a8                    a1 = a3
  1832: 64 69                    a2 = s1
  1834: 50 10 24 8c fc           ra = 36, jump @57
      :                          @145 [@dyn 18]
  1839: 82 18                    a1 = u64 [sp]
  1841: 82 5a 10                 a3 = u64 [s0 + 0x10]
  1844: 28 c7                    jump @142
      :                          @146 [@dyn 19]
  1846: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  1849: 7b 10 20                 u64 [sp + 0x20] = ra
  1852: 7b 15 18                 u64 [sp + 0x18] = s0
  1855: 7b 16 10                 u64 [sp + 0x10] = s1
  1858: 64 86                    s1 = a1
  1860: 83 88                    i32 a1 = a1 + 0
  1862: 33 09 80 00              a2 = 0x80
  1866: 64 7a                    a3 = a0
  1868: ae 98 2b                 jump @151 if a1 >=u a2
      :                          @147
  1871: 82 a8 10                 a1 = u64 [a3 + 0x10]
  1874: 82 a7                    a0 = u64 [a3]
  1876: ab 78 12                 jump @150 if a1 != a0
      :                          @148
  1879: 64 a7                    a0 = a3
  1881: 64 a5                    s0 = a3
  1883: 50 10 28 11 fe           ra = 40, jump @101
      :                          @149 [@dyn 20]
  1888: 64 5a                    a3 = s0
  1890: 82 58 10                 a1 = u64 [s0 + 0x10]
  1893: 01                       fallthrough
      :                          @150
  1894: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1897: c8 87 07                 a0 = a0 + a1
  1900: 78 76                    u8 [a0] = s1
  1902: 95 88 01                 a1 = a1 + 0x1
  1905: 7b a8 10                 u64 [a3 + 0x10] = a1
  1908: 28 ab 00                 jump @159
      :                          @151
  1911: 8b 67 0b                 i32 a0 = s1 >> 0xb
  1914: 48 11 0c                 u32 [sp + 12] = 0
  1917: 52 07 1c                 jump @153 if a0 != 0
      :                          @152
  1920: 98 67 06                 a0 = s1 >> 0x6
  1923: 86 77 c0 00              a0 = a0 | 0xc0
  1927: 78 17 0c                 u8 [sp + 0xc] = a0
  1930: 84 67 3f                 a0 = s1 & 0x3f
  1933: 86 77 80 00              a0 = a0 | 0x80
  1937: 78 17 0d                 u8 [sp + 0xd] = a0
  1940: 33 06 02                 s1 = 0x2
  1943: 28 63                    jump @156
      :                          @153
  1945: 8b 67 10                 i32 a0 = s1 >> 0x10
  1948: 52 07 29                 jump @155 if a0 != 0
      :                          @154
  1951: 98 67 0c                 a0 = s1 >> 0xc
  1954: 86 77 e0 00              a0 = a0 | 0xe0
  1958: 78 17 0c                 u8 [sp + 0xc] = a0
  1961: 97 67 34                 a0 = s1 << 0x34
  1964: 98 77 3a                 a0 = a0 >> 0x3a
  1967: 95 77 80 00              a0 = a0 + 0x80
  1971: 78 17 0d                 u8 [sp + 0xd] = a0
  1974: 84 67 3f                 a0 = s1 & 0x3f
  1977: 86 77 80 00              a0 = a0 | 0x80
  1981: 78 17 0e                 u8 [sp + 0xe] = a0
  1984: 33 06 03                 s1 = 0x3
  1987: 28 37                    jump @156
      :                          @155
  1989: 97 67 2b                 a0 = s1 << 0x2b
  1992: 98 77 3d                 a0 = a0 >> 0x3d
  1995: 95 77 f0 00              a0 = a0 + 0xf0
  1999: 78 17 0c                 u8 [sp + 0xc] = a0
  2002: 97 67 2e                 a0 = s1 << 0x2e
  2005: 98 77 3a                 a0 = a0 >> 0x3a
  2008: 95 77 80 00              a0 = a0 + 0x80
  2012: 78 17 0d                 u8 [sp + 0xd] = a0
  2015: 97 67 34                 a0 = s1 << 0x34
  2018: 98 77 3a                 a0 = a0 >> 0x3a
  2021: 95 77 80 00              a0 = a0 + 0x80
  2025: 78 17 0e                 u8 [sp + 0xe] = a0
  2028: 84 67 3f                 a0 = s1 & 0x3f
  2031: 86 77 80 00              a0 = a0 | 0x80
  2035: 78 17 0f                 u8 [sp + 0xf] = a0
  2038: 33 06 04                 s1 = 0x4
  2041: 01                       fallthrough
      :                          @156
  2042: 82 a5 10                 s0 = u64 [a3 + 0x10]
  2045: 82 a7                    a0 = u64 [a3]
  2047: c9 57 07                 a0 = a0 - s0
  2050: ac 67 2d                 jump @160 if a0 <u s1
      :                          @157
  2053: 7b 1a                    u64 [sp] = a3
  2055: 82 a7 08                 a0 = u64 [a3 + 0x8]
  2058: c8 57 07                 a0 = a0 + s0
  2061: 95 18 0c                 a1 = sp + 0xc
  2064: 64 69                    a2 = s1
  2066: 50 10 2a 34              ra = 42, jump @163
      :                          @158 [@dyn 21]
  2070: c8 56 06                 s1 = s1 + s0
  2073: 82 17                    a0 = u64 [sp]
  2075: 7b 76 10                 u64 [a0 + 0x10] = s1
  2078: 01                       fallthrough
      :                          @159
  2079: 33 07                    a0 = 0
  2081: 82 10 20                 ra = u64 [sp + 0x20]
  2084: 82 15 18                 s0 = u64 [sp + 0x18]
  2087: 82 16 10                 s1 = u64 [sp + 0x10]
  2090: 95 11 28                 sp = sp + 0x28
  2093: 32 00                    ret
      :                          @160
  2095: 64 a7                    a0 = a3
  2097: 64 58                    a1 = s0
  2099: 64 69                    a2 = s1
  2101: 64 a5                    s0 = a3
  2103: 50 10 2c 7f fb           ra = 44, jump @57
      :                          @161 [@dyn 22]
  2108: 64 5a                    a3 = s0
  2110: 82 55 10                 s0 = u64 [s0 + 0x10]
  2113: 28 c4                    jump @157
      :                          @162 [@dyn 23]
  2115: 28 44 04                 jump @245
      :                          @163
  2118: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  2121: 7b 10 18                 u64 [sp + 0x18] = ra
  2124: 7b 15 10                 u64 [sp + 0x10] = s0
  2127: 7b 16 08                 u64 [sp + 0x8] = s1
  2130: 53 19 10 64              jump @172 if a2 <u 16
      :                          @164
  2134: 8d 7a                    i32 a3 = -a0
  2136: 84 a2 07                 t0 = a3 & 0x7
  2139: c8 27 0b                 a4 = a0 + t0
  2142: 51 02 15                 jump @167 if t0 == 0
      :                          @165
  2145: 64 8c                    a5 = a1
  2147: 64 75                    s0 = a0
  2149: 01                       fallthrough
      :                          @166
  2150: 7c ca                    a3 = u8 [a5]
  2152: 78 5a                    u8 [s0] = a3
  2154: 95 55 01                 s0 = s0 + 0x1
  2157: 95 cc 01                 a5 = a5 + 0x1
  2160: ac b5 f6                 jump @166 if s0 <u a4
      :                          @167
  2163: c8 28 03                 t1 = a1 + t0
  2166: c9 29 02                 t0 = a2 - t0
  2169: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  2172: 84 38 07                 a1 = t1 & 0x7
  2175: c8 4b 0a                 a3 = a4 + t2
  2178: 51 08 3b                 jump @174 if a1 == 0
      :                          @168
  2181: 58 04 4b                 jump @177 if t2 <=s 0
      :                          @169
  2184: 97 38 03                 a1 = t1 << 0x3
  2187: 84 80 38                 ra = a1 & 0x38
  2190: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  2193: 82 c5                    s0 = u64 [a5]
  2195: 8d 88                    i32 a1 = -a1
  2197: 84 88 38                 a1 = a1 & 0x38
  2200: 95 cc 08                 a5 = a5 + 0x8
  2203: 01                       fallthrough
      :                          @170
  2204: 82 c6                    s1 = u64 [a5]
  2206: d0 05 05                 s0 = s0 >> ra
  2209: cf 86 09                 a2 = s1 << a1
  2212: d4 59 09                 a2 = a2 | s0
  2215: 7b b9                    u64 [a4] = a2
  2217: 95 bb 08                 a4 = a4 + 0x8
  2220: 95 cc 08                 a5 = a5 + 0x8
  2223: 64 65                    s0 = s1
  2225: ac ab eb                 jump @170 if a4 <u a3
      :                          @171
  2228: 28 1c                    jump @177
      :                          @172
  2230: 64 7a                    a3 = a0
  2232: 52 09 21                 jump @178 if a2 != 0
      :                          @173
  2235: 28 2f                    jump @180
      :                          @174
  2237: 58 04 13                 jump @177 if t2 <=s 0
      :                          @175
  2240: 64 38                    a1 = t1
  2242: 01                       fallthrough
      :                          @176
  2243: 82 89                    a2 = u64 [a1]
  2245: 7b b9                    u64 [a4] = a2
  2247: 95 bb 08                 a4 = a4 + 0x8
  2250: 95 88 08                 a1 = a1 + 0x8
  2253: ac ab f6                 jump @176 if a4 <u a3
      :                          @177
  2256: c8 43 08                 a1 = t1 + t2
  2259: 84 29 07                 a2 = t0 & 0x7
  2262: 51 09 14                 jump @180 if a2 == 0
      :                          @178
  2265: c8 a9 09                 a2 = a2 + a3
  2268: 01                       fallthrough
      :                          @179
  2269: 7c 8b                    a4 = u8 [a1]
  2271: 78 ab                    u8 [a3] = a4
  2273: 95 aa 01                 a3 = a3 + 0x1
  2276: 95 88 01                 a1 = a1 + 0x1
  2279: ac 9a f6                 jump @179 if a3 <u a2
      :                          @180
  2282: 82 10 18                 ra = u64 [sp + 0x18]
  2285: 82 15 10                 s0 = u64 [sp + 0x10]
  2288: 82 16 08                 s1 = u64 [sp + 0x8]
  2291: 95 11 20                 sp = sp + 0x20
  2294: 32 00                    ret
      :                          @181 [@dyn 24]
  2296: 82 77                    a0 = u64 [a0]
  2298: 01                       fallthrough
      :                          @182
  2299: 28                       jump @182
      :                          @183
  2300: 95 11 a8                 sp = sp + 0xffffffffffffffa8
  2303: 7b 10 50                 u64 [sp + 0x50] = ra
  2306: 7b 15 48                 u64 [sp + 0x48] = s0
  2309: 7b 16 40                 u64 [sp + 0x40] = s1
  2312: 7b 18                    u64 [sp] = a1
  2314: 98 79 04                 a2 = a0 >> 0x4
  2317: 33 08 27                 a1 = 0x27
  2320: 33 0a 6a 00 01           a3 = 0x1006a
  2325: 53 29 71 02 7b           jump @186 if a2 <u 625
      :                          @184
  2330: 33 08 27                 a1 = 0x27
  2333: 95 1b 3e                 a4 = sp + 0x3e
  2336: 3a 09 00 00 03           a2 = u64 [0x30000]
  2341: 7b 19 10                 u64 [sp + 0x10] = a2
  2344: 49 11 08 f0 d8 00        u64 [sp + 8] = 0xd8f0
  2350: 33 03 7b 14              t1 = 0x147b
  2354: 33 00 ff e0 f5 05        ra = 0x5f5e0ff
  2360: 01                       fallthrough
      :                          @185
  2361: 64 72                    t0 = a0
  2363: 82 17 10                 a0 = u64 [sp + 0x10]
  2366: d6 72 07                 a0 = t0 mulhu a0
  2369: 98 77 0b                 a0 = a0 >> 0xb
  2372: 82 19 08                 a2 = u64 [sp + 0x8]
  2375: c0 97 09                 i32 a2 = a0 * a2
  2378: c8 29 06                 s1 = a2 + t0
  2381: 97 69 30                 a2 = s1 << 0x30
  2384: 98 99 32                 a2 = a2 >> 0x32
  2387: ca 39 09                 a2 = a2 * t1
  2390: 98 94 11                 t2 = a2 >> 0x11
  2393: 98 99 10                 a2 = a2 >> 0x10
  2396: 84 99 fe 07              a2 = a2 & 0x7fe
  2400: 96 4c 9c                 a5 = t2 * 0xffffffffffffff9c
  2403: c8 6c 0c                 a5 = a5 + s1
  2406: 97 cc 31                 a5 = a5 << 0x31
  2409: 98 cc 30                 a5 = a5 >> 0x30
  2412: c8 a9 09                 a2 = a2 + a3
  2415: 7c 96                    s1 = u8 [a2]
  2417: 7c 99 01                 a2 = u8 [a2 + 0x1]
  2420: c8 ac 0c                 a5 = a5 + a3
  2423: 7c c5 01                 s0 = u8 [a5 + 0x1]
  2426: 7c cc                    a5 = u8 [a5]
  2428: 78 b9 ff                 u8 [a4 + 0xffffffffffffffff] = a2
  2431: 78 b6 fe                 u8 [a4 + 0xfffffffffffffffe] = s1
  2434: 78 b5 01                 u8 [a4 + 0x1] = s0
  2437: 78 bc                    u8 [a4] = a5
  2439: 95 88 fc                 a1 = a1 + 0xfffffffffffffffc
  2442: 95 bb fc                 a4 = a4 + 0xfffffffffffffffc
  2445: ac 20 ac                 jump @185 if ra <u t0
      :                          @186
  2448: 54 17 63 36              jump @188 if a0 <=u 99
      :                          @187
  2452: 97 79 30                 a2 = a0 << 0x30
  2455: 98 99 32                 a2 = a2 >> 0x32
  2458: 96 99 7b 14              a2 = a2 * 0x147b
  2462: 98 99 11                 a2 = a2 >> 0x11
  2465: 96 9b 9c                 a4 = a2 * 0xffffffffffffff9c
  2468: c8 b7 07                 a0 = a0 + a4
  2471: 97 77 31                 a0 = a0 << 0x31
  2474: 98 77 30                 a0 = a0 >> 0x30
  2477: 95 88 fe                 a1 = a1 + 0xfffffffffffffffe
  2480: c8 a7 07                 a0 = a0 + a3
  2483: 7c 7b 01                 a4 = u8 [a0 + 0x1]
  2486: 7c 77                    a0 = u8 [a0]
  2488: 95 1c 19                 a5 = sp + 0x19
  2491: c8 8c 0c                 a5 = a5 + a1
  2494: 78 cb 01                 u8 [a5 + 0x1] = a4
  2497: 78 c7                    u8 [a5] = a0
  2499: 64 97                    a0 = a2
  2501: 01                       fallthrough
      :                          @188
  2502: 55 17 0a 14              jump @190 if a0 >=u 10
      :                          @189
  2506: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
  2509: 95 19 19                 a2 = sp + 0x19
  2512: c8 89 09                 a2 = a2 + a1
  2515: 83 77 30                 i32 a0 = a0 + 0x30
  2518: 78 97                    u8 [a2] = a0
  2520: 28 1c                    jump @191
      :                          @190
  2522: 97 77 01                 a0 = a0 << 0x1
  2525: 95 88 fe                 a1 = a1 + 0xfffffffffffffffe
  2528: c8 a7 07                 a0 = a0 + a3
  2531: 7c 79 01                 a2 = u8 [a0 + 0x1]
  2534: 7c 77                    a0 = u8 [a0]
  2536: 95 1a 19                 a3 = sp + 0x19
  2539: c8 8a 0a                 a3 = a3 + a1
  2542: 78 a9 01                 u8 [a3 + 0x1] = a2
  2545: 78 a7                    u8 [a3] = a0
  2547: 01                       fallthrough
      :                          @191
  2548: 95 1a 19                 a3 = sp + 0x19
  2551: c8 8a 0a                 a3 = a3 + a1
  2554: 9a 8b 27                 a4 = 0x27 - a1
  2557: 33 08 68 00 01           a1 = 0x10068
  2562: 82 17                    a0 = u64 [sp]
  2564: 33 09                    a2 = 0
  2566: 50 10 32 12              ra = 50, jump @193
      :                          @192 [@dyn 25]
  2570: 82 10 50                 ra = u64 [sp + 0x50]
  2573: 82 15 48                 s0 = u64 [sp + 0x48]
  2576: 82 16 40                 s1 = u64 [sp + 0x40]
  2579: 95 11 58                 sp = sp + 0x58
  2582: 32 00                    ret
      :                          @193
  2584: 95 11 98                 sp = sp + 0xffffffffffffff98
  2587: 7b 10 60                 u64 [sp + 0x60] = ra
  2590: 7b 15 58                 u64 [sp + 0x58] = s0
  2593: 7b 16 50                 u64 [sp + 0x50] = s1
  2596: 80 73 34                 t1 = u32 [a0 + 0x34]
  2599: 7b 1a 20                 u64 [sp + 0x20] = a3
  2602: 64 9c                    a5 = a2
  2604: 84 36 01                 s1 = t1 & 0x1
  2607: 33 02 2b                 t0 = 0x2b
  2610: 33 09 00 00 11           a2 = 0x110000
  2615: 84 3a 04                 a3 = t1 & 0x4
  2618: 7b 1b 28                 u64 [sp + 0x28] = a4
  2621: c8 b6 04                 t2 = s1 + a4
  2624: 7b 1c 30                 u64 [sp + 0x30] = a5
  2627: 52 0a 10                 jump @196 if a3 != 0
      :                          @194
  2630: 49 11 38                 u64 [sp + 56] = 0
  2633: 82 78                    a1 = u64 [a0]
  2635: 94 69 2b                 a2 = 0x2b if s1 != 0
  2638: 52 08 35                 jump @200 if a1 != 0
      :                          @195
  2641: 28 56                    jump @205
      :                          @196
  2643: 7b 18 38                 u64 [sp + 0x38] = a1
  2646: 33 09                    a2 = 0
  2648: 51 0c 1b                 jump @199 if a5 == 0
      :                          @197
  2651: 82 1b 38                 a4 = u64 [sp + 0x38]
  2654: 01                       fallthrough
      :                          @198
  2655: 7d b5                    s0 = i8 [a4]
  2657: 89 55 c0                 s0 = s0 <s 0xffffffffffffffc0
  2660: 85 5a 01                 a3 = s0 ^ 0x1
  2663: c8 a9 09                 a2 = a2 + a3
  2666: 95 cc ff                 a5 = a5 + 0xffffffffffffffff
  2669: 95 bb 01                 a4 = a4 + 0x1
  2672: 52 0c ef                 jump @198 if a5 != 0
      :                          @199
  2675: c8 94 04                 t2 = t2 + a2
  2678: 33 09 00 00 11           a2 = 0x110000
  2683: 82 78                    a1 = u64 [a0]
  2685: db 62 09                 a2 = t0 if s1 != 0
  2688: 51 08 27                 jump @205 if a1 == 0
      :                          @200
  2691: 82 7a 08                 a3 = u64 [a0 + 0x8]
  2694: ae a4 21                 jump @205 if t2 >=u a3
      :                          @201
  2697: 84 38 08                 a1 = t1 & 0x8
  2700: 52 08 50                 jump @208 if a1 != 0
      :                          @202
  2703: 7c 76 38                 s1 = u8 [a0 + 0x38]
  2706: c9 4a 0a                 a3 = a3 - t2
  2709: 7b 19 18                 u64 [sp + 0x18] = a2
  2712: 5a 16 01 9d 00           jump @215 if s1 >s 1
      :                          @203
  2717: 52 06 aa 00              jump @217 if s1 != 0
      :                          @204
  2721: 7b 1a 10                 u64 [sp + 0x10] = a3
  2724: 28 a9 00                 jump @218
      :                          @205
  2727: 82 75 20                 s0 = u64 [a0 + 0x20]
  2730: 82 76 28                 s1 = u64 [a0 + 0x28]
  2733: 64 57                    a0 = s0
  2735: 64 68                    a1 = s1
  2737: 82 1a 38                 a3 = u64 [sp + 0x38]
  2740: 82 1b 30                 a4 = u64 [sp + 0x30]
  2743: 50 10 34 6c 01           ra = 52, jump @238
      :                          @206 [@dyn 26]
  2748: 33 08 01                 a1 = 0x1
  2751: 52 07 bb 00              jump @223 if a0 != 0
      :                          @207
  2755: 82 6c 18                 a5 = u64 [s1 + 0x18]
  2758: 64 57                    a0 = s0
  2760: 82 18 20                 a1 = u64 [sp + 0x20]
  2763: 82 19 28                 a2 = u64 [sp + 0x28]
  2766: 82 10 60                 ra = u64 [sp + 0x60]
  2769: 82 15 58                 s0 = u64 [sp + 0x58]
  2772: 82 16 50                 s1 = u64 [sp + 0x50]
  2775: 95 11 68                 sp = sp + 0x68
  2778: 32 0c                    jump [a5]
      :                          @208
  2780: 7b 1a 40                 u64 [sp + 0x40] = a3
  2783: 64 45                    s0 = t2
  2785: 81 78 30                 a1 = i32 [a0 + 0x30]
  2788: 7b 18 10                 u64 [sp + 0x10] = a1
  2791: 7c 7a 38                 a3 = u8 [a0 + 0x38]
  2794: 7b 1a 08                 u64 [sp + 0x8] = a3
  2797: 82 7a 20                 a3 = u64 [a0 + 0x20]
  2800: 82 78 28                 a1 = u64 [a0 + 0x28]
  2803: 48 17 30 30              u32 [a0 + 48] = 0x30
  2807: 7b 17                    u64 [sp] = a0
  2809: 46 17 38 01              u8 [a0 + 56] = 0x1
  2813: 7b 1a 48                 u64 [sp + 0x48] = a3
  2816: 64 a7                    a0 = a3
  2818: 64 86                    s1 = a1
  2820: 82 1a 38                 a3 = u64 [sp + 0x38]
  2823: 82 1b 30                 a4 = u64 [sp + 0x30]
  2826: 50 10 36 19 01           ra = 54, jump @238
      :                          @209 [@dyn 27]
  2831: 52 07 67                 jump @222 if a0 != 0
      :                          @210
  2834: 82 17 40                 a0 = u64 [sp + 0x40]
  2837: c9 57 05                 s0 = a0 - s0
  2840: 95 55 01                 s0 = s0 + 0x1
  2843: 01                       fallthrough
      :                          @211
  2844: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  2847: 51 05 c6 00              jump @233 if s0 == 0
      :                          @212
  2851: 82 69 20                 a2 = u64 [s1 + 0x20]
  2854: 33 08 30                 a1 = 0x30
  2857: 82 17 48                 a0 = u64 [sp + 0x48]
  2860: b4 90 01 38              ra = 56, jump [a2]
      :                          @213 [@dyn 28]
  2864: 51 07 ec                 jump @211 if a0 == 0
      :                          @214
  2867: 28 43                    jump @222
      :                          @215
  2869: 52 16 02 12              jump @217 if s1 != 2
      :                          @216
  2873: 98 a6 01                 s1 = a3 >> 0x1
  2876: 95 a8 01                 a1 = a3 + 0x1
  2879: 98 88 01                 a1 = a1 >> 0x1
  2882: 7b 18 10                 u64 [sp + 0x10] = a1
  2885: 28 08                    jump @218
      :                          @217
  2887: 64 a6                    s1 = a3
  2889: 49 11 10                 u64 [sp + 16] = 0
  2892: 01                       fallthrough
      :                          @218
  2893: 82 78 20                 a1 = u64 [a0 + 0x20]
  2896: 7b 18 48                 u64 [sp + 0x48] = a1
  2899: 82 75 28                 s0 = u64 [a0 + 0x28]
  2902: 81 77 30                 a0 = i32 [a0 + 0x30]
  2905: 7b 17 40                 u64 [sp + 0x40] = a0
  2908: 95 66 01                 s1 = s1 + 0x1
  2911: 01                       fallthrough
      :                          @219
  2912: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
  2915: 51 06 27                 jump @224 if s1 == 0
      :                          @220
  2918: 82 59 20                 a2 = u64 [s0 + 0x20]
  2921: 82 17 48                 a0 = u64 [sp + 0x48]
  2924: 82 18 40                 a1 = u64 [sp + 0x40]
  2927: b4 90 01 3a              ra = 58, jump [a2]
      :                          @221 [@dyn 29]
  2931: 51 07 ed                 jump @219 if a0 == 0
      :                          @222
  2934: 33 08 01                 a1 = 0x1
  2937: 01                       fallthrough
      :                          @223
  2938: 64 87                    a0 = a1
  2940: 82 10 60                 ra = u64 [sp + 0x60]
  2943: 82 15 58                 s0 = u64 [sp + 0x58]
  2946: 82 16 50                 s1 = u64 [sp + 0x50]
  2949: 95 11 68                 sp = sp + 0x68
  2952: 32 00                    ret
      :                          @224
  2954: 82 16 48                 s1 = u64 [sp + 0x48]
  2957: 64 67                    a0 = s1
  2959: 64 58                    a1 = s0
  2961: 82 19 18                 a2 = u64 [sp + 0x18]
  2964: 82 1a 38                 a3 = u64 [sp + 0x38]
  2967: 82 1b 30                 a4 = u64 [sp + 0x30]
  2970: 50 10 3c 89 00           ra = 60, jump @238
      :                          @225 [@dyn 30]
  2975: 33 08 01                 a1 = 0x1
  2978: 52 07 d8                 jump @223 if a0 != 0
      :                          @226
  2981: 82 5a 18                 a3 = u64 [s0 + 0x18]
  2984: 64 67                    a0 = s1
  2986: 82 18 20                 a1 = u64 [sp + 0x20]
  2989: 82 19 28                 a2 = u64 [sp + 0x28]
  2992: b4 a0 01 3e              ra = 62, jump [a3]
      :                          @227 [@dyn 31]
  2996: 33 08 01                 a1 = 0x1
  2999: 52 07 c3                 jump @223 if a0 != 0
      :                          @228
  3002: 82 17 10                 a0 = u64 [sp + 0x10]
  3005: 9a 77                    a0 = -a0
  3007: 7b 17 38                 u64 [sp + 0x38] = a0
  3010: 33 06 ff                 s1 = 0xffffffffffffffff
  3013: 01                       fallthrough
      :                          @229
  3014: 82 17 38                 a0 = u64 [sp + 0x38]
  3017: c8 67 07                 a0 = a0 + s1
  3020: 51 17 ff 42              jump @236 if a0 == 4294967295
      :                          @230
  3024: 82 59 20                 a2 = u64 [s0 + 0x20]
  3027: 82 17 48                 a0 = u64 [sp + 0x48]
  3030: 82 18 40                 a1 = u64 [sp + 0x40]
  3033: b4 90 01 40              ra = 64, jump [a2]
      :                          @231 [@dyn 32]
  3037: 95 66 01                 s1 = s1 + 0x1
  3040: 51 07 e6                 jump @229 if a0 == 0
      :                          @232
  3043: 28 37                    jump @237
      :                          @233
  3045: 82 6a 18                 a3 = u64 [s1 + 0x18]
  3048: 82 17 48                 a0 = u64 [sp + 0x48]
  3051: 82 18 20                 a1 = u64 [sp + 0x20]
  3054: 82 19 28                 a2 = u64 [sp + 0x28]
  3057: b4 a0 01 42              ra = 66, jump [a3]
      :                          @234 [@dyn 33]
  3061: 33 08 01                 a1 = 0x1
  3064: 52 07 82                 jump @223 if a0 != 0
      :                          @235
  3067: 33 08                    a1 = 0
  3069: 82 16                    s1 = u64 [sp]
  3071: 82 17 10                 a0 = u64 [sp + 0x10]
  3074: 7a 67 30                 u32 [s1 + 0x30] = a0
  3077: 82 17 08                 a0 = u64 [sp + 0x8]
  3080: 78 67 38                 u8 [s1 + 0x38] = a0
  3083: 28 6f ff                 jump @223
      :                          @236
  3086: 82 16 10                 s1 = u64 [sp + 0x10]
  3089: 82 17 10                 a0 = u64 [sp + 0x10]
  3092: d8 76 08                 a1 = s1 <u a0
  3095: 28 63 ff                 jump @223
      :                          @237
  3098: 82 17 10                 a0 = u64 [sp + 0x10]
  3101: d8 76 08                 a1 = s1 <u a0
  3104: 28 5a ff                 jump @223
      :                          @238
  3107: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  3110: 7b 10 20                 u64 [sp + 0x20] = ra
  3113: 7b 15 18                 u64 [sp + 0x18] = s0
  3116: 7b 16 10                 u64 [sp + 0x10] = s1
  3119: 83 9c                    i32 a5 = a2 + 0
  3121: 33 02 00 00 11           t0 = 0x110000
  3126: 64 a6                    s1 = a3
  3128: 64 85                    s0 = a1
  3130: 64 7a                    a3 = a0
  3132: aa 2c 20                 jump @241 if a5 == t0
      :                          @239
  3135: 82 5c 20                 a5 = u64 [s0 + 0x20]
  3138: 64 a7                    a0 = a3
  3140: 64 98                    a1 = a2
  3142: 7b 1b 08                 u64 [sp + 0x8] = a4
  3145: 7b 1a                    u64 [sp] = a3
  3147: b4 c0 01 44              ra = 68, jump [a5]
      :                          @240 [@dyn 34]
  3151: 82 1a                    a3 = u64 [sp]
  3153: 82 1b 08                 a4 = u64 [sp + 0x8]
  3156: 64 78                    a1 = a0
  3158: 33 07 01                 a0 = 0x1
  3161: 52 08 20                 jump @244 if a1 != 0
      :                          @241
  3164: 51 06 1a                 jump @243 if s1 == 0
      :                          @242
  3167: 82 5c 18                 a5 = u64 [s0 + 0x18]
  3170: 64 a7                    a0 = a3
  3172: 64 68                    a1 = s1
  3174: 64 b9                    a2 = a4
  3176: 82 10 20                 ra = u64 [sp + 0x20]
  3179: 82 15 18                 s0 = u64 [sp + 0x18]
  3182: 82 16 10                 s1 = u64 [sp + 0x10]
  3185: 95 11 28                 sp = sp + 0x28
  3188: 32 0c                    jump [a5]
      :                          @243
  3190: 33 07                    a0 = 0
  3192: 01                       fallthrough
      :                          @244
  3193: 82 10 20                 ra = u64 [sp + 0x20]
  3196: 82 15 18                 s0 = u64 [sp + 0x18]
  3199: 82 16 10                 s1 = u64 [sp + 0x10]
  3202: 95 11 28                 sp = sp + 0x28
  3205: 32 00                    ret
      :                          @245
  3207: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  3211: 7b 10 80 00              u64 [sp + 0x80] = ra
  3215: 7b 15 78                 u64 [sp + 0x78] = s0
  3218: 7b 16 70                 u64 [sp + 0x70] = s1
  3221: 49 11 60 20              u64 [sp + 96] = 0x20
  3225: 33 09 03                 a2 = 0x3
  3228: 78 19 68                 u8 [sp + 0x68] = a2
  3231: 49 11 30                 u64 [sp + 48] = 0
  3234: 49 11 40                 u64 [sp + 64] = 0
  3237: 82 86 20                 s1 = u64 [a1 + 0x20]
  3240: 7b 17 50                 u64 [sp + 0x50] = a0
  3243: 33 07 d8 01 01           a0 = 0x101d8
  3248: 7b 17 58                 u64 [sp + 0x58] = a0
  3251: 51 06 06 01              jump @267 if s1 == 0
      :                          @246
  3255: 82 87 28                 a0 = u64 [a1 + 0x28]
  3258: 51 07 73 01              jump @277 if a0 == 0
      :                          @247
  3262: 33 09                    a2 = 0
  3264: 82 85                    s0 = u64 [a1]
  3266: 7b 18 08                 u64 [sp + 0x8] = a1
  3269: 82 88 10                 a1 = u64 [a1 + 0x10]
  3272: 7b 18 18                 u64 [sp + 0x18] = a1
  3275: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  3278: 97 88 03                 a1 = a1 << 0x3
  3281: 98 88 03                 a1 = a1 >> 0x3
  3284: 95 88 01                 a1 = a1 + 0x1
  3287: 7b 18                    u64 [sp] = a1
  3289: 95 55 08                 s0 = s0 + 0x8
  3292: 96 78 38                 a1 = a0 * 0x38
  3295: 95 66 18                 s1 = s1 + 0x18
  3298: 33 07 30                 a0 = 0x30
  3301: 7b 17 10                 u64 [sp + 0x10] = a0
  3304: 01                       fallthrough
      :                          @248
  3305: 7b 18 20                 u64 [sp + 0x20] = a1
  3308: 7b 19 28                 u64 [sp + 0x28] = a2
  3311: 82 59                    a2 = u64 [s0]
  3313: 51 09 17                 jump @251 if a2 == 0
      :                          @249
  3316: 82 1a 58                 a3 = u64 [sp + 0x58]
  3319: 82 17 50                 a0 = u64 [sp + 0x50]
  3322: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  3325: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3328: b4 a0 01 46              ra = 70, jump [a3]
      :                          @250 [@dyn 35]
  3332: 52 07 4e 01              jump @280 if a0 != 0
      :                          @251
  3336: 81 67 10                 a0 = i32 [s1 + 0x10]
  3339: 7a 17 60                 u32 [sp + 0x60] = a0
  3342: 7c 67 18                 a0 = u8 [s1 + 0x18]
  3345: 78 17 68                 u8 [sp + 0x68] = a0
  3348: 81 67 14                 a0 = i32 [s1 + 0x14]
  3351: 7a 17 64                 u32 [sp + 0x64] = a0
  3354: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3357: 82 67                    a0 = u64 [s1]
  3359: 51 08 26                 jump @256 if a1 == 0
      :                          @252
  3362: 52 18 01 16              jump @254 if a1 != 1
      :                          @253
  3366: 97 77 04                 a0 = a0 << 0x4
  3369: 82 18 18                 a1 = u64 [sp + 0x18]
  3372: c8 87 07                 a0 = a0 + a1
  3375: 82 78 08                 a1 = u64 [a0 + 0x8]
  3378: 82 19 10                 a2 = u64 [sp + 0x10]
  3381: aa 98 07                 jump @255 if a1 == a2
      :                          @254
  3384: 33 08                    a1 = 0
  3386: 28 0f                    jump @257
      :                          @255
  3388: 82 77                    a0 = u64 [a0]
  3390: 82 77                    a0 = u64 [a0]
  3392: 33 08 01                 a1 = 0x1
  3395: 28 06                    jump @257
      :                          @256
  3397: 33 08 01                 a1 = 0x1
  3400: 01                       fallthrough
      :                          @257
  3401: 7b 18 30                 u64 [sp + 0x30] = a1
  3404: 7b 17 38                 u64 [sp + 0x38] = a0
  3407: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  3410: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  3413: 51 08 26                 jump @262 if a1 == 0
      :                          @258
  3416: 52 18 01 16              jump @260 if a1 != 1
      :                          @259
  3420: 97 77 04                 a0 = a0 << 0x4
  3423: 82 18 18                 a1 = u64 [sp + 0x18]
  3426: c8 87 07                 a0 = a0 + a1
  3429: 82 78 08                 a1 = u64 [a0 + 0x8]
  3432: 82 19 10                 a2 = u64 [sp + 0x10]
  3435: aa 98 07                 jump @261 if a1 == a2
      :                          @260
  3438: 33 08                    a1 = 0
  3440: 28 0f                    jump @263
      :                          @261
  3442: 82 77                    a0 = u64 [a0]
  3444: 82 77                    a0 = u64 [a0]
  3446: 33 08 01                 a1 = 0x1
  3449: 28 06                    jump @263
      :                          @262
  3451: 33 08 01                 a1 = 0x1
  3454: 01                       fallthrough
      :                          @263
  3455: 7b 18 40                 u64 [sp + 0x40] = a1
  3458: 7b 17 48                 u64 [sp + 0x48] = a0
  3461: 82 67 08                 a0 = u64 [s1 + 0x8]
  3464: 97 77 04                 a0 = a0 << 0x4
  3467: 82 18 18                 a1 = u64 [sp + 0x18]
  3470: c8 78 08                 a1 = a1 + a0
  3473: 82 87                    a0 = u64 [a1]
  3475: 82 89 08                 a2 = u64 [a1 + 0x8]
  3478: 95 18 30                 a1 = sp + 0x30
  3481: b4 90 01 48              ra = 72, jump [a2]
      :                          @264 [@dyn 36]
  3485: 52 07 b5 00              jump @280 if a0 != 0
      :                          @265
  3489: 95 55 10                 s0 = s0 + 0x10
  3492: 82 18 20                 a1 = u64 [sp + 0x20]
  3495: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  3498: 95 66 38                 s1 = s1 + 0x38
  3501: 82 19 28                 a2 = u64 [sp + 0x28]
  3504: 95 99 01                 a2 = a2 + 0x1
  3507: 52 08 36 ff              jump @248 if a1 != 0
      :                          @266
  3511: 28 69                    jump @275
      :                          @267
  3513: 82 87 18                 a0 = u64 [a1 + 0x18]
  3516: 51 07 71                 jump @277 if a0 == 0
      :                          @268
  3519: 82 85 10                 s0 = u64 [a1 + 0x10]
  3522: 33 0a                    a3 = 0
  3524: 97 79 04                 a2 = a0 << 0x4
  3527: c8 59 09                 a2 = a2 + s0
  3530: 7b 19 20                 u64 [sp + 0x20] = a2
  3533: 7b 18 08                 u64 [sp + 0x8] = a1
  3536: 82 86                    s1 = u64 [a1]
  3538: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  3541: 97 77 04                 a0 = a0 << 0x4
  3544: 98 77 04                 a0 = a0 >> 0x4
  3547: 95 77 01                 a0 = a0 + 0x1
  3550: 7b 17                    u64 [sp] = a0
  3552: 95 66 08                 s1 = s1 + 0x8
  3555: 01                       fallthrough
      :                          @269
  3556: 7b 1a 28                 u64 [sp + 0x28] = a3
  3559: 82 69                    a2 = u64 [s1]
  3561: 51 09 16                 jump @272 if a2 == 0
      :                          @270
  3564: 82 1a 58                 a3 = u64 [sp + 0x58]
  3567: 82 17 50                 a0 = u64 [sp + 0x50]
  3570: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3573: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3576: b4 a0 01 4a              ra = 74, jump [a3]
      :                          @271 [@dyn 37]
  3580: 52 07 56                 jump @280 if a0 != 0
      :                          @272
  3583: 82 57                    a0 = u64 [s0]
  3585: 82 59 08                 a2 = u64 [s0 + 0x8]
  3588: 95 18 30                 a1 = sp + 0x30
  3591: b4 90 01 4c              ra = 76, jump [a2]
      :                          @273 [@dyn 38]
  3595: 52 07 47                 jump @280 if a0 != 0
      :                          @274
  3598: 95 66 10                 s1 = s1 + 0x10
  3601: 95 55 10                 s0 = s0 + 0x10
  3604: 82 1a 28                 a3 = u64 [sp + 0x28]
  3607: 95 aa 01                 a3 = a3 + 0x1
  3610: 82 17 20                 a0 = u64 [sp + 0x20]
  3613: ab 75 c7                 jump @269 if s0 != a0
      :                          @275
  3616: 82 18 08                 a1 = u64 [sp + 0x8]
  3619: 82 1a                    a3 = u64 [sp]
  3621: 82 87 08                 a0 = u64 [a1 + 0x8]
  3624: ac 7a 0d                 jump @278 if a3 <u a0
      :                          @276
  3627: 28 2c                    jump @281
      :                          @277
  3629: 33 0a                    a3 = 0
  3631: 82 87 08                 a0 = u64 [a1 + 0x8]
  3634: 54 07 25                 jump @281 if a0 <=u 0
      :                          @278
  3637: 82 87                    a0 = u64 [a1]
  3639: 97 a8 04                 a1 = a3 << 0x4
  3642: c8 87 09                 a2 = a0 + a1
  3645: 82 1a 58                 a3 = u64 [sp + 0x58]
  3648: 82 17 50                 a0 = u64 [sp + 0x50]
  3651: 82 98                    a1 = u64 [a2]
  3653: 82 99 08                 a2 = u64 [a2 + 0x8]
  3656: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3659: b4 a0 01 4e              ra = 78, jump [a3]
      :                          @279 [@dyn 39]
  3663: 51 07 08                 jump @281 if a0 == 0
      :                          @280
  3666: 33 07 01                 a0 = 0x1
  3669: 28 05                    jump @282
      :                          @281
  3671: 33 07                    a0 = 0
  3673: 01                       fallthrough
      :                          @282
  3674: 82 10 80 00              ra = u64 [sp + 0x80]
  3678: 82 15 78                 s0 = u64 [sp + 0x78]
  3681: 82 16 70                 s1 = u64 [sp + 0x70]
  3684: 95 11 88 00              sp = sp + 0x88
  3688: 32 00                    ret
