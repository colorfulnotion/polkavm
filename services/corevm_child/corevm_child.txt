// RO data = 522/524 bytes
// RW data = 8/4128 bytes
// Stack size = 40960 bytes
// RO data = [67, 72, 73, 76, 68, 32, 78, 79, 82, 77, 32, 110, 61, 32, 102, 105, 98, 95, 110, 95, 50, 61, 32, 114, 101, 115, 117, 108, 116, 61, 32, 40, 97, 100, 100, 114, 50, 61, 32, 40, 97, 100, 100, 114, 49, 61, 41, 32, 102, 105, 98, 95, 110, 95, 49, 61, 41, 32, 114, 101, 115, 117, 108, 116, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 13, 0, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 30, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 46, 0, 1, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 38, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 56, 0, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 67, 72, 73, 76, 68, 32, 66, 65, 83, 69, 32, 110, 61, 0, 0, 0, 168, 0, 1, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 22, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 67, 72, 73, 76, 68, 32, 87, 82, 73, 84, 69, 32, 111, 117, 116, 95, 97, 100, 100, 114, 101, 115, 115, 61, 216, 0, 1, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 22, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57]
// RW data = [75, 89, 134, 56, 214, 197, 109, 52]
// Instructions = 1275
// Code size = 3682 bytes

      :                          @0
     0: 28 5d 01                 jump @25
      :                          @1 [@dyn 1]
     3: 95 11 78 ff              sp = sp + 0xffffffffffffff78
     7: 7b 10 80 00              u64 [sp + 0x80] = ra
    11: 80 89 34                 a2 = u32 [a1 + 0x34]
    14: 84 9a 10                 a3 = a2 & 0x10
    17: 52 0a 16                 jump @4 if a3 != 0
      :                          @2
    20: 84 99 20                 a2 = a2 & 0x20
    23: 52 09 40                 jump @7 if a2 != 0
      :                          @3
    26: 80 77                    a0 = u32 [a0]
    28: 82 10 80 00              ra = u64 [sp + 0x80]
    32: 95 11 88 00              sp = sp + 0x88
    36: 28 c5 08                 jump @179
      :                          @4
    39: 81 7b                    a4 = i32 [a0]
    41: 33 09 81 00              a2 = 0x81
    45: 95 17 7f                 a0 = sp + 0x7f
    48: 33 02 57                 t0 = 0x57
    51: 01                       fallthrough
      :                          @5
    52: 64 9c                    a5 = a2
    54: 8b ba 04                 i32 a3 = a4 >> 0x4
    57: 84 bb 0f                 a4 = a4 & 0xf
    60: 88 b3 0a                 t1 = a4 <u 0xa
    63: 33 09 30                 a2 = 0x30
    66: da 32 09                 a2 = t0 if t1 == 0
    69: be b9 09                 i32 a2 = a2 + a4
    72: 78 79                    u8 [a0] = a2
    74: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
    77: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
    80: 64 ab                    a4 = a3
    82: 52 0a e2                 jump @5 if a3 != 0
      :                          @6
    85: 28 30                    jump @9
      :                          @7
    87: 81 7b                    a4 = i32 [a0]
    89: 33 09 81 00              a2 = 0x81
    93: 95 17 7f                 a0 = sp + 0x7f
    96: 33 02 37                 t0 = 0x37
    99: 01                       fallthrough
      :                          @8
   100: 64 9c                    a5 = a2
   102: 8b ba 04                 i32 a3 = a4 >> 0x4
   105: 84 bb 0f                 a4 = a4 & 0xf
   108: 88 b3 0a                 t1 = a4 <u 0xa
   111: 33 09 30                 a2 = 0x30
   114: da 32 09                 a2 = t0 if t1 == 0
   117: be b9 09                 i32 a2 = a2 + a4
   120: 78 79                    u8 [a0] = a2
   122: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   125: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   128: 64 ab                    a4 = a3
   130: 52 0a e2                 jump @8 if a3 != 0
      :                          @9
   133: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
   136: 56 27 80 00 27           jump @12 if a0 >u 128
      :                          @10
   141: 9a 9b 81 00              a4 = 0x81 - a2
   145: 64 1a                    a3 = sp
   147: c8 7a 0a                 a3 = a3 + a0
   150: 33 09 02                 a2 = 0x2
   153: 64 87                    a0 = a1
   155: 33 08 40 01 01           a1 = 0x10140
   160: 50 10 04 70 09           ra = 4, jump @189
      :                          @11 [@dyn 2]
   165: 82 10 80 00              ra = u64 [sp + 0x80]
   169: 95 11 88 00              sp = sp + 0x88
   173: 32 00                    ret
      :                          @12
   175: 00                       trap
      :                          @13 [@dyn 3]
   176: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   180: 7b 10 80 00              u64 [sp + 0x80] = ra
   184: 80 89 34                 a2 = u32 [a1 + 0x34]
   187: 84 9a 10                 a3 = a2 & 0x10
   190: 52 0a 16                 jump @16 if a3 != 0
      :                          @14
   193: 84 99 20                 a2 = a2 & 0x20
   196: 52 09 40                 jump @19 if a2 != 0
      :                          @15
   199: 82 77                    a0 = u64 [a0]
   201: 82 10 80 00              ra = u64 [sp + 0x80]
   205: 95 11 88 00              sp = sp + 0x88
   209: 28 18 08                 jump @179
      :                          @16
   212: 82 7b                    a4 = u64 [a0]
   214: 33 09 81 00              a2 = 0x81
   218: 95 17 7f                 a0 = sp + 0x7f
   221: 33 02 57                 t0 = 0x57
   224: 01                       fallthrough
      :                          @17
   225: 64 9c                    a5 = a2
   227: 98 ba 04                 a3 = a4 >> 0x4
   230: 84 bb 0f                 a4 = a4 & 0xf
   233: 88 b3 0a                 t1 = a4 <u 0xa
   236: 33 09 30                 a2 = 0x30
   239: da 32 09                 a2 = t0 if t1 == 0
   242: be b9 09                 i32 a2 = a2 + a4
   245: 78 79                    u8 [a0] = a2
   247: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   250: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   253: 64 ab                    a4 = a3
   255: 52 0a e2                 jump @17 if a3 != 0
      :                          @18
   258: 28 30                    jump @21
      :                          @19
   260: 82 7b                    a4 = u64 [a0]
   262: 33 09 81 00              a2 = 0x81
   266: 95 17 7f                 a0 = sp + 0x7f
   269: 33 02 37                 t0 = 0x37
   272: 01                       fallthrough
      :                          @20
   273: 64 9c                    a5 = a2
   275: 98 ba 04                 a3 = a4 >> 0x4
   278: 84 bb 0f                 a4 = a4 & 0xf
   281: 88 b3 0a                 t1 = a4 <u 0xa
   284: 33 09 30                 a2 = 0x30
   287: da 32 09                 a2 = t0 if t1 == 0
   290: be b9 09                 i32 a2 = a2 + a4
   293: 78 79                    u8 [a0] = a2
   295: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   298: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   301: 64 ab                    a4 = a3
   303: 52 0a e2                 jump @20 if a3 != 0
      :                          @21
   306: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
   309: 56 27 80 00 27           jump @24 if a0 >u 128
      :                          @22
   314: 9a 9b 81 00              a4 = 0x81 - a2
   318: 64 1a                    a3 = sp
   320: c8 7a 0a                 a3 = a3 + a0
   323: 33 09 02                 a2 = 0x2
   326: 64 87                    a0 = a1
   328: 33 08 40 01 01           a1 = 0x10140
   333: 50 10 08 c3 08           ra = 8, jump @189
      :                          @23 [@dyn 4]
   338: 82 10 80 00              ra = u64 [sp + 0x80]
   342: 95 11 88 00              sp = sp + 0x88
   346: 32 00                    ret
      :                          @24
   348: 00                       trap
      :                          @25 [export #0: 'main']
   349: 95 11 08 ff              sp = sp + 0xffffffffffffff08
   353: 7b 10 f0 00              u64 [sp + 0xf0] = ra
   357: 7b 15 e8 00              u64 [sp + 0xe8] = s0
   361: 7b 16 e0 00              u64 [sp + 0xe0] = s1
   365: 49 01 ff ef              u64 [sp + 0] = 0xffffffffffffefff
   369: 7b 17 08                 u64 [sp + 0x8] = a0
   372: 55 17 02 95 00           jump @36 if a0 >=u 2
      :                          @26
   377: 48 11 14 01              u32 [sp + 20] = 0x1
   381: 95 17 08                 a0 = sp + 0x8
   384: 7b 17 38                 u64 [sp + 0x38] = a0
   387: 33 07 06                 a0 = 0x6
   390: 7b 17 40                 u64 [sp + 0x40] = a0
   393: 95 17 14                 a0 = sp + 0x14
   396: 7b 17 48                 u64 [sp + 0x48] = a0
   399: 33 07 02                 a0 = 0x2
   402: 7b 17 50                 u64 [sp + 0x50] = a0
   405: 33 07 b8 00 01           a0 = 0x100b8
   410: 7b 17 68                 u64 [sp + 0x68] = a0
   413: 49 11 70 02              u64 [sp + 112] = 0x2
   417: 49 21 88 00              u64 [sp + 136] = 0
   421: 95 17 38                 a0 = sp + 0x38
   424: 7b 17 78                 u64 [sp + 0x78] = a0
   427: 49 21 80 00 02           u64 [sp + 128] = 0x2
   432: 95 17 c8 00              a0 = sp + 0xc8
   436: 95 18 68                 a1 = sp + 0x68
   439: 50 10 0a 1c 04           ra = 10, jump @109
      :                          @27 [@dyn 5]
   444: 82 15 d0 00              s0 = u64 [sp + 0xd0]
   448: 82 1b d8 00              a4 = u64 [sp + 0xd8]
   452: 82 16 c8 00              s1 = u64 [sp + 0xc8]
   456: 33 07 02                 a0 = 0x2
   459: 33 08                    a1 = 0
   461: 33 09                    a2 = 0
   463: 64 5a                    a3 = s0
   465: 33 00 0c                 ra = 0xc
   468: 0a 64                    ecalli 100 // 'log'
   470: 01                       fallthrough
      :                          @28 [@dyn 6]
   471: 82 17                    a0 = u64 [sp]
   473: c8 67 07                 a0 = a0 + s1
   476: 53 27 00 f0 0f 01        jump @44 if a0 <u 4294963200
      :                          @29
   482: 33 07 10 00 03           a0 = 0x30010
   487: 95 77 00 10              a0 = a0 + 0x1000
   491: 01                       fallthrough
      :                          @30
   492: 82 78                    a1 = u64 [a0]
   494: c9 87 09                 a2 = a0 - a1
   497: ab 59 fa 00              jump @44 if a2 != s0
      :                          @31
   501: c9 68 09                 a2 = a1 - s1
   504: 01                       fallthrough
      :                          @32
   505: 82 7a                    a3 = u64 [a0]
   507: ab 8a f1                 jump @30 if a3 != a1
      :                          @33
   510: 7b 79                    u64 [a0] = a2
   512: 33 0b                    a4 = 0
   514: 01                       fallthrough
      :                          @34
   515: ab 8a e9                 jump @30 if a3 != a1
      :                          @35
   518: 28 e5 00                 jump @44
      :                          @36
   521: 97 77 0c                 a0 = a0 << 0xc
   524: 14 08 00 e0 fe fe 00 00 00 00 a1 = 0xfefee000
   534: c8 78 08                 a1 = a1 + a0
   537: 7b 18 18                 u64 [sp + 0x18] = a1
   540: 81 88                    a1 = i32 [a1]
   542: 7a 18 24                 u32 [sp + 0x24] = a1
   545: 14 09 00 f0 fe fe 00 00 00 00 a2 = 0xfefef000
   555: c8 97 07                 a0 = a0 + a2
   558: 7b 17 28                 u64 [sp + 0x28] = a0
   561: 81 77                    a0 = i32 [a0]
   563: 7a 17 34                 u32 [sp + 0x34] = a0
   566: be 87 07                 i32 a0 = a0 + a1
   569: 7a 17 14                 u32 [sp + 0x14] = a0
   572: 95 17 08                 a0 = sp + 0x8
   575: 7b 17 68                 u64 [sp + 0x68] = a0
   578: 33 07 06                 a0 = 0x6
   581: 7b 17 70                 u64 [sp + 0x70] = a0
   584: 95 18 24                 a1 = sp + 0x24
   587: 7b 18 78                 u64 [sp + 0x78] = a1
   590: 33 08 02                 a1 = 0x2
   593: 7b 18 80 00              u64 [sp + 0x80] = a1
   597: 95 19 18                 a2 = sp + 0x18
   600: 7b 19 88 00              u64 [sp + 0x88] = a2
   604: 7b 17 90 00              u64 [sp + 0x90] = a0
   608: 95 19 34                 a2 = sp + 0x34
   611: 7b 19 98 00              u64 [sp + 0x98] = a2
   615: 7b 18 a0 00              u64 [sp + 0xa0] = a1
   619: 95 19 28                 a2 = sp + 0x28
   622: 7b 19 a8 00              u64 [sp + 0xa8] = a2
   626: 7b 17 b0 00              u64 [sp + 0xb0] = a0
   630: 95 17 14                 a0 = sp + 0x14
   633: 7b 17 b8 00              u64 [sp + 0xb8] = a0
   637: 7b 18 c0 00              u64 [sp + 0xc0] = a1
   641: 33 07 48 00 01           a0 = 0x10048
   646: 7b 17 38                 u64 [sp + 0x38] = a0
   649: 49 11 40 06              u64 [sp + 64] = 0x6
   653: 49 11 58                 u64 [sp + 88] = 0
   656: 95 18 68                 a1 = sp + 0x68
   659: 7b 18 48                 u64 [sp + 0x48] = a1
   662: 49 11 50 06              u64 [sp + 80] = 0x6
   666: 95 17 c8 00              a0 = sp + 0xc8
   670: 95 18 38                 a1 = sp + 0x38
   673: 50 10 0e 32 03           ra = 14, jump @109
      :                          @37 [@dyn 7]
   678: 82 15 d0 00              s0 = u64 [sp + 0xd0]
   682: 82 1b d8 00              a4 = u64 [sp + 0xd8]
   686: 82 16 c8 00              s1 = u64 [sp + 0xc8]
   690: 33 07 02                 a0 = 0x2
   693: 33 08                    a1 = 0
   695: 33 09                    a2 = 0
   697: 64 5a                    a3 = s0
   699: 33 00 10                 ra = 0x10
   702: 0a 64                    ecalli 100 // 'log'
   704: 01                       fallthrough
      :                          @38 [@dyn 8]
   705: 82 17                    a0 = u64 [sp]
   707: c8 67 07                 a0 = a0 + s1
   710: 53 27 00 f0 25           jump @44 if a0 <u 4294963200
      :                          @39
   715: 33 07 10 00 03           a0 = 0x30010
   720: 95 77 00 10              a0 = a0 + 0x1000
   724: 01                       fallthrough
      :                          @40
   725: 82 78                    a1 = u64 [a0]
   727: c9 87 09                 a2 = a0 - a1
   730: ab 59 11                 jump @44 if a2 != s0
      :                          @41
   733: c9 68 09                 a2 = a1 - s1
   736: 01                       fallthrough
      :                          @42
   737: 82 7a                    a3 = u64 [a0]
   739: ab 8a f2                 jump @40 if a3 != a1
      :                          @43
   742: 7b 79                    u64 [a0] = a2
   744: 33 0b                    a4 = 0
   746: 01                       fallthrough
      :                          @44
   747: 81 17 08                 a0 = i32 [sp + 0x8]
   750: 97 77 0c                 a0 = a0 << 0xc
   753: 83 77 00 00 ff fe        i32 a0 = a0 + 0xfffffffffeff0000
   759: 7a 17 28                 u32 [sp + 0x28] = a0
   762: 95 17 28                 a0 = sp + 0x28
   765: 7b 17 38                 u64 [sp + 0x38] = a0
   768: 33 07 02                 a0 = 0x2
   771: 7b 17 40                 u64 [sp + 0x40] = a0
   774: 95 18 14                 a1 = sp + 0x14
   777: 7b 18 48                 u64 [sp + 0x48] = a1
   780: 7b 17 50                 u64 [sp + 0x50] = a0
   783: 33 07 f0 00 01           a0 = 0x100f0
   788: 7b 17 68                 u64 [sp + 0x68] = a0
   791: 49 11 70 02              u64 [sp + 112] = 0x2
   795: 49 21 88 00              u64 [sp + 136] = 0
   799: 95 18 38                 a1 = sp + 0x38
   802: 7b 18 78                 u64 [sp + 0x78] = a1
   805: 49 21 80 00 02           u64 [sp + 128] = 0x2
   810: 95 17 c8 00              a0 = sp + 0xc8
   814: 95 18 68                 a1 = sp + 0x68
   817: 50 10 12 a2 02           ra = 18, jump @109
      :                          @45 [@dyn 9]
   822: 82 15 d0 00              s0 = u64 [sp + 0xd0]
   826: 82 1b d8 00              a4 = u64 [sp + 0xd8]
   830: 82 16 c8 00              s1 = u64 [sp + 0xc8]
   834: 33 07 02                 a0 = 0x2
   837: 33 08                    a1 = 0
   839: 33 09                    a2 = 0
   841: 64 5a                    a3 = s0
   843: 33 00 14                 ra = 0x14
   846: 0a 64                    ecalli 100 // 'log'
   848: 01                       fallthrough
      :                          @46 [@dyn 10]
   849: 82 17                    a0 = u64 [sp]
   851: c8 67 07                 a0 = a0 + s1
   854: 53 27 00 f0 25           jump @52 if a0 <u 4294963200
      :                          @47
   859: 33 07 10 00 03           a0 = 0x30010
   864: 95 77 00 10              a0 = a0 + 0x1000
   868: 01                       fallthrough
      :                          @48
   869: 82 78                    a1 = u64 [a0]
   871: c9 87 09                 a2 = a0 - a1
   874: ab 59 11                 jump @52 if a2 != s0
      :                          @49
   877: c9 68 09                 a2 = a1 - s1
   880: 01                       fallthrough
      :                          @50
   881: 82 7a                    a3 = u64 [a0]
   883: ab 8a f2                 jump @48 if a3 != a1
      :                          @51
   886: 7b 79                    u64 [a0] = a2
   888: 33 0b                    a4 = 0
   890: 01                       fallthrough
      :                          @52
   891: 80 17 28                 a0 = u32 [sp + 0x28]
   894: 81 18 14                 a1 = i32 [sp + 0x14]
   897: 7a 78                    u32 [a0] = a1
   899: 80 17 28                 a0 = u32 [sp + 0x28]
   902: 33 08 00 10              a1 = 0x1000
   906: 82 10 f0 00              ra = u64 [sp + 0xf0]
   910: 82 15 e8 00              s0 = u64 [sp + 0xe8]
   914: 82 16 e0 00              s1 = u64 [sp + 0xe0]
   918: 95 11 f8 00              sp = sp + 0xf8
   922: 32 00                    ret
      :                          @53
   924: 95 11 b8                 sp = sp + 0xffffffffffffffb8
   927: 7b 10 40                 u64 [sp + 0x40] = ra
   930: 7b 15 38                 u64 [sp + 0x38] = s0
   933: 7b 16 30                 u64 [sp + 0x30] = s1
   936: c8 89 09                 a2 = a2 + a1
   939: ac 89 52                 jump @61 if a2 <u a1
      :                          @54
   942: 64 75                    s0 = a0
   944: 82 77                    a0 = u64 [a0]
   946: 97 78 01                 a1 = a0 << 0x1
   949: 33 0a 08                 a3 = 0x8
   952: e4 a9 09                 a2 = maxu(a2, a3)
   955: e4 98 06                 s1 = maxu(a1, a2)
   958: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
   961: 98 88 3f                 a1 = a1 >> 0x3f
   964: 51 07 12                 jump @56 if a0 == 0
      :                          @55
   967: 82 59 08                 a2 = u64 [s0 + 0x8]
   970: 7b 19 18                 u64 [sp + 0x18] = a2
   973: 49 11 20 01              u64 [sp + 32] = 0x1
   977: 7b 17 28                 u64 [sp + 0x28] = a0
   980: 28 06                    jump @57
      :                          @56
   982: 49 11 20                 u64 [sp + 32] = 0
   985: 01                       fallthrough
      :                          @57
   986: 64 17                    a0 = sp
   988: 95 1a 18                 a3 = sp + 0x18
   991: 64 69                    a2 = s1
   993: 50 10 16 32              ra = 22, jump @65
      :                          @58 [@dyn 11]
   997: 82 18                    a1 = u64 [sp]
   999: 82 17 08                 a0 = u64 [sp + 0x8]
  1002: 51 08 14                 jump @62 if a1 == 0
      :                          @59
  1005: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1015: aa 87 0d                 jump @63 if a0 == a1
      :                          @60
  1018: 52 07 18                 jump @64 if a0 != 0
      :                          @61
  1021: 00                       trap
      :                          @62
  1022: 7b 57 08                 u64 [s0 + 0x8] = a0
  1025: 7b 56                    u64 [s0] = s1
  1027: 01                       fallthrough
      :                          @63
  1028: 82 10 40                 ra = u64 [sp + 0x40]
  1031: 82 15 38                 s0 = u64 [sp + 0x38]
  1034: 82 16 30                 s1 = u64 [sp + 0x30]
  1037: 95 11 48                 sp = sp + 0x48
  1040: 32 00                    ret
      :                          @64
  1042: 00                       trap
      :                          @65
  1043: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  1046: 7b 10 30                 u64 [sp + 0x30] = ra
  1049: 7b 15 28                 u64 [sp + 0x28] = s0
  1052: 7b 16 20                 u64 [sp + 0x20] = s1
  1055: 64 95                    s0 = a2
  1057: 64 72                    t0 = a0
  1059: 51 08 76                 jump @75 if a1 == 0
      :                          @66
  1062: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1065: 51 07 79                 jump @76 if a0 == 0
      :                          @67
  1068: 82 a9 10                 a2 = u64 [a3 + 0x10]
  1071: 51 09 a6 00              jump @83 if a2 == 0
      :                          @68
  1075: 82 a8                    a1 = u64 [a3]
  1077: 33 06 10 00 03           s1 = 0x30010
  1082: 33 03 00 10              t1 = 0x1000
  1086: c8 36 06                 s1 = s1 + t1
  1089: 01                       fallthrough
      :                          @69
  1090: 82 6a                    a3 = u64 [s1]
  1092: c8 5a 07                 a0 = a3 + s0
  1095: ac a7 cb 00              jump @89 if a0 <u a3
      :                          @70
  1099: 95 7b 01                 a4 = a0 + 0x1
  1102: 88 bc 01                 a5 = a4 <u 0x1
  1105: d8 b3 0b                 a4 = t1 <u a4
  1108: d4 cb 0b                 a4 = a4 | a5
  1111: 52 0b bb 00              jump @89 if a4 != 0
      :                          @71
  1115: 82 6b                    a4 = u64 [s1]
  1117: ab ab e5                 jump @69 if a4 != a3
      :                          @72
  1120: 7b 67                    u64 [s1] = a0
  1122: 33 0c                    a5 = 0
  1124: 7b 12 18                 u64 [sp + 0x18] = t0
  1127: 33 0a 10 00 03           a3 = 0x30010
  1132: 33 0b 00 10              a4 = 0x1000
  1136: 7b 1a                    u64 [sp] = a3
  1138: c8 ba 0a                 a3 = a3 + a4
  1141: c9 7a 07                 a0 = a3 - a0
  1144: 7b 17 10                 u64 [sp + 0x10] = a0
  1147: 7b 18 08                 u64 [sp + 0x8] = a1
  1150: 64 96                    s1 = a2
  1152: 50 10 18 b3 03           ra = 24, jump @159
      :                          @73 [@dyn 12]
  1157: 54 26 00 10 95 00        jump @90 if s1 <=u 4096
      :                          @74
  1163: 82 12 18                 t0 = u64 [sp + 0x18]
  1166: 82 18 10                 a1 = u64 [sp + 0x10]
  1169: 33 07                    a0 = 0
  1171: 7b 28 08                 u64 [t0 + 0x8] = a1
  1174: 28 b2 00                 jump @96
      :                          @75
  1177: 49 12 08                 u64 [t0 + 8] = 0
  1180: 33 07 01                 a0 = 0x1
  1183: 28 a9 00                 jump @96
      :                          @76
  1186: 33 09 10 00 03           a2 = 0x30010
  1191: 33 07 00 10              a0 = 0x1000
  1195: c8 79 09                 a2 = a2 + a0
  1198: 01                       fallthrough
      :                          @77
  1199: 82 9a                    a3 = u64 [a2]
  1201: c8 5a 08                 a1 = a3 + s0
  1204: ac a8 5e                 jump @89 if a1 <u a3
      :                          @78
  1207: 95 8b 01                 a4 = a1 + 0x1
  1210: 88 bc 01                 a5 = a4 <u 0x1
  1213: d8 b7 0b                 a4 = a0 <u a4
  1216: d4 cb 0b                 a4 = a4 | a5
  1219: 52 0b 4f                 jump @89 if a4 != 0
      :                          @79
  1222: 82 9b                    a4 = u64 [a2]
  1224: ab ab e7                 jump @77 if a4 != a3
      :                          @80
  1227: 7b 98                    u64 [a2] = a1
  1229: 33 0c                    a5 = 0
  1231: 01                       fallthrough
      :                          @81
  1232: ab ab df                 jump @77 if a4 != a3
      :                          @82
  1235: 28 30                    jump @88
      :                          @83
  1237: 33 09 10 00 03           a2 = 0x30010
  1242: 33 07 00 10              a0 = 0x1000
  1246: c8 79 09                 a2 = a2 + a0
  1249: 01                       fallthrough
      :                          @84
  1250: 82 9a                    a3 = u64 [a2]
  1252: c8 5a 08                 a1 = a3 + s0
  1255: ac a8 2b                 jump @89 if a1 <u a3
      :                          @85
  1258: 95 8b 01                 a4 = a1 + 0x1
  1261: 88 bc 01                 a5 = a4 <u 0x1
  1264: d8 b7 0b                 a4 = a0 <u a4
  1267: d4 cb 0b                 a4 = a4 | a5
  1270: 52 0b 1c                 jump @89 if a4 != 0
      :                          @86
  1273: 82 9b                    a4 = u64 [a2]
  1275: ab ab e7                 jump @84 if a4 != a3
      :                          @87
  1278: 7b 98                    u64 [a2] = a1
  1280: 33 0c                    a5 = 0
  1282: 01                       fallthrough
      :                          @88
  1283: 33 07 10 10 03           a0 = 0x31010
  1288: c9 87 08                 a1 = a0 - a1
  1291: 33 07                    a0 = 0
  1293: 7b 28 08                 u64 [t0 + 0x8] = a1
  1296: 28 38                    jump @96
      :                          @89
  1298: 33 07 01                 a0 = 0x1
  1301: 7b 27 08                 u64 [t0 + 0x8] = a0
  1304: 28 30                    jump @96
      :                          @90
  1306: 64 6c                    a5 = s1
  1308: 82 17                    a0 = u64 [sp]
  1310: 95 77 00 10              a0 = a0 + 0x1000
  1314: 82 12 18                 t0 = u64 [sp + 0x18]
  1317: 82 16 08                 s1 = u64 [sp + 0x8]
  1320: 01                       fallthrough
      :                          @91
  1321: 82 78                    a1 = u64 [a0]
  1323: c9 87 09                 a2 = a0 - a1
  1326: ab 69 11                 jump @95 if a2 != s1
      :                          @92
  1329: c9 c8 09                 a2 = a1 - a5
  1332: 01                       fallthrough
      :                          @93
  1333: 82 7a                    a3 = u64 [a0]
  1335: ab 8a f2                 jump @91 if a3 != a1
      :                          @94
  1338: 7b 79                    u64 [a0] = a2
  1340: 33 0b                    a4 = 0
  1342: 01                       fallthrough
      :                          @95
  1343: 82 18 10                 a1 = u64 [sp + 0x10]
  1346: 33 07                    a0 = 0
  1348: 7b 28 08                 u64 [t0 + 0x8] = a1
  1351: 01                       fallthrough
      :                          @96
  1352: 7b 25 10                 u64 [t0 + 0x10] = s0
  1355: 7b 27                    u64 [t0] = a0
  1357: 82 10 30                 ra = u64 [sp + 0x30]
  1360: 82 15 28                 s0 = u64 [sp + 0x28]
  1363: 82 16 20                 s1 = u64 [sp + 0x20]
  1366: 95 11 38                 sp = sp + 0x38
  1369: 32 00                    ret
      :                          @97
  1371: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1374: 7b 10 40                 u64 [sp + 0x40] = ra
  1377: 7b 15 38                 u64 [sp + 0x38] = s0
  1380: 7b 16 30                 u64 [sp + 0x30] = s1
  1383: 95 88 01                 a1 = a1 + 0x1
  1386: 51 08 53                 jump @105 if a1 == 0
      :                          @98
  1389: 64 75                    s0 = a0
  1391: 82 77                    a0 = u64 [a0]
  1393: 97 79 01                 a2 = a0 << 0x1
  1396: 33 0a 08                 a3 = 0x8
  1399: e4 a8 08                 a1 = maxu(a1, a3)
  1402: e4 89 06                 s1 = maxu(a2, a1)
  1405: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1408: 98 88 3f                 a1 = a1 >> 0x3f
  1411: 51 07 12                 jump @100 if a0 == 0
      :                          @99
  1414: 82 59 08                 a2 = u64 [s0 + 0x8]
  1417: 7b 19 18                 u64 [sp + 0x18] = a2
  1420: 49 11 20 01              u64 [sp + 32] = 0x1
  1424: 7b 17 28                 u64 [sp + 0x28] = a0
  1427: 28 06                    jump @101
      :                          @100
  1429: 49 11 20                 u64 [sp + 32] = 0
  1432: 01                       fallthrough
      :                          @101
  1433: 64 17                    a0 = sp
  1435: 95 1a 18                 a3 = sp + 0x18
  1438: 64 69                    a2 = s1
  1440: 50 10 1a 73 fe           ra = 26, jump @65
      :                          @102 [@dyn 13]
  1445: 82 18                    a1 = u64 [sp]
  1447: 82 17 08                 a0 = u64 [sp + 0x8]
  1450: 51 08 14                 jump @106 if a1 == 0
      :                          @103
  1453: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1463: aa 87 0d                 jump @107 if a0 == a1
      :                          @104
  1466: 52 07 18                 jump @108 if a0 != 0
      :                          @105
  1469: 00                       trap
      :                          @106
  1470: 7b 57 08                 u64 [s0 + 0x8] = a0
  1473: 7b 56                    u64 [s0] = s1
  1475: 01                       fallthrough
      :                          @107
  1476: 82 10 40                 ra = u64 [sp + 0x40]
  1479: 82 15 38                 s0 = u64 [sp + 0x38]
  1482: 82 16 30                 s1 = u64 [sp + 0x30]
  1485: 95 11 48                 sp = sp + 0x48
  1488: 32 00                    ret
      :                          @108
  1490: 00                       trap
      :                          @109
  1491: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  1494: 7b 10 30                 u64 [sp + 0x30] = ra
  1497: 7b 15 28                 u64 [sp + 0x28] = s0
  1500: 7b 16 20                 u64 [sp + 0x20] = s1
  1503: 82 8a 08                 a3 = u64 [a1 + 0x8]
  1506: 64 75                    s0 = a0
  1508: 51 0a 35                 jump @114 if a3 == 0
      :                          @110
  1511: 82 89                    a2 = u64 [a1]
  1513: 33 07                    a0 = 0
  1515: 95 9b 08                 a4 = a2 + 0x8
  1518: 01                       fallthrough
      :                          @111
  1519: 82 bc                    a5 = u64 [a4]
  1521: c8 c7 07                 a0 = a0 + a5
  1524: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  1527: 95 bb 10                 a4 = a4 + 0x10
  1530: 52 0a f5                 jump @111 if a3 != 0
      :                          @112
  1533: 82 8a 18                 a3 = u64 [a1 + 0x18]
  1536: 51 0a 24                 jump @116 if a3 == 0
      :                          @113
  1539: 82 99 08                 a2 = u64 [a2 + 0x8]
  1542: 8e 99                    a2 = a2 >u 0
  1544: 88 7a 10                 a3 = a0 <u 0x10
  1547: 85 aa 01                 a3 = a3 ^ 0x1
  1550: d4 a9 09                 a2 = a2 | a3
  1553: 89 7a                    a3 = a0 <s 0
  1555: e0 a9 09                 a2 = a2 & ~a3
  1558: 52 09 0a                 jump @115 if a2 != 0
      :                          @114
  1561: 33 07                    a0 = 0
  1563: 33 09 01                 a2 = 0x1
  1566: 28 49                    jump @124
      :                          @115
  1568: 97 77 01                 a0 = a0 << 0x1
  1571: 01                       fallthrough
      :                          @116
  1572: 51 07 3f                 jump @123 if a0 == 0
      :                          @117
  1575: 57 07 72                 jump @129 if a0 <s 0
      :                          @118
  1578: 64 52                    t0 = s0
  1580: 33 0b 10 00 03           a4 = 0x30010
  1585: 33 09 00 10              a2 = 0x1000
  1589: c8 9b 0b                 a4 = a4 + a2
  1592: 01                       fallthrough
      :                          @119
  1593: 82 bc                    a5 = u64 [a4]
  1595: c8 7c 0a                 a3 = a5 + a0
  1598: ac ca 59                 jump @127 if a3 <u a5
      :                          @120
  1601: 95 a5 01                 s0 = a3 + 0x1
  1604: 88 56 01                 s1 = s0 <u 0x1
  1607: d8 59 05                 s0 = a2 <u s0
  1610: d4 65 05                 s0 = s0 | s1
  1613: 52 05 4a                 jump @127 if s0 != 0
      :                          @121
  1616: 82 b6                    s1 = u64 [a4]
  1618: ab c6 e7                 jump @119 if s1 != a5
      :                          @122
  1621: 7b ba                    u64 [a4] = a3
  1623: 33 09 10 10 03           a2 = 0x31010
  1628: c9 a9 09                 a2 = a2 - a3
  1631: 64 25                    s0 = t0
  1633: 28 06                    jump @124
      :                          @123
  1635: 33 09 01                 a2 = 0x1
  1638: 01                       fallthrough
      :                          @124
  1639: 7b 17                    u64 [sp] = a0
  1641: 7b 19 08                 u64 [sp + 0x8] = a2
  1644: 49 11 10                 u64 [sp + 16] = 0
  1647: 64 17                    a0 = sp
  1649: 50 10 1c 0e 06           ra = 28, jump @241
      :                          @125 [@dyn 14]
  1654: 52 07 22                 jump @128 if a0 != 0
      :                          @126
  1657: 82 17 10                 a0 = u64 [sp + 0x10]
  1660: 82 18 08                 a1 = u64 [sp + 0x8]
  1663: 82 19                    a2 = u64 [sp]
  1665: 7b 57 10                 u64 [s0 + 0x10] = a0
  1668: 7b 58 08                 u64 [s0 + 0x8] = a1
  1671: 7b 59                    u64 [s0] = a2
  1673: 82 10 30                 ra = u64 [sp + 0x30]
  1676: 82 15 28                 s0 = u64 [sp + 0x28]
  1679: 82 16 20                 s1 = u64 [sp + 0x20]
  1682: 95 11 38                 sp = sp + 0x38
  1685: 32 00                    ret
      :                          @127
  1687: 00                       trap
      :                          @128
  1688: 00                       trap
      :                          @129
  1689: 00                       trap
      :                          @130 [@dyn 15]
  1690: 82 72                    t0 = u64 [a0]
  1692: 33 09 00 f0              a2 = 0xfffffffffffff000
  1696: 95 2a ff ef              a3 = t0 + 0xffffffffffffefff
  1700: ac 9a 27                 jump @136 if a3 <u a2
      :                          @131
  1703: 82 77 08                 a0 = u64 [a0 + 0x8]
  1706: 33 09 10 00 03           a2 = 0x30010
  1711: 95 99 00 10              a2 = a2 + 0x1000
  1715: 01                       fallthrough
      :                          @132
  1716: 82 9a                    a3 = u64 [a2]
  1718: c9 a9 0b                 a4 = a2 - a3
  1721: ab 7b 12                 jump @136 if a4 != a0
      :                          @133
  1724: c9 2a 0b                 a4 = a3 - t0
  1727: 01                       fallthrough
      :                          @134
  1728: 82 9c                    a5 = u64 [a2]
  1730: ab ac f2                 jump @132 if a5 != a3
      :                          @135
  1733: 7b 9b                    u64 [a2] = a4
  1735: 33 08                    a1 = 0
  1737: 32 00                    ret
      :                          @136
  1739: 32 00                    ret
      :                          @137 [@dyn 16]
  1741: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  1744: 7b 10 18                 u64 [sp + 0x18] = ra
  1747: 7b 15 10                 u64 [sp + 0x10] = s0
  1750: 7b 16 08                 u64 [sp + 0x8] = s1
  1753: 64 75                    s0 = a0
  1755: 82 7a 10                 a3 = u64 [a0 + 0x10]
  1758: 82 77                    a0 = u64 [a0]
  1760: c9 a7 07                 a0 = a0 - a3
  1763: 64 96                    s1 = a2
  1765: ac 97 2a                 jump @140 if a0 <u a2
      :                          @138
  1768: 7b 1a                    u64 [sp] = a3
  1770: 82 57 08                 a0 = u64 [s0 + 0x8]
  1773: c8 a7 07                 a0 = a0 + a3
  1776: 64 69                    a2 = s1
  1778: 50 10 22 41 01           ra = 34, jump @159
      :                          @139 [@dyn 17]
  1783: 82 17                    a0 = u64 [sp]
  1785: c8 76 06                 s1 = s1 + a0
  1788: 7b 56 10                 u64 [s0 + 0x10] = s1
  1791: 33 07                    a0 = 0
  1793: 82 10 18                 ra = u64 [sp + 0x18]
  1796: 82 15 10                 s0 = u64 [sp + 0x10]
  1799: 82 16 08                 s1 = u64 [sp + 0x8]
  1802: 95 11 20                 sp = sp + 0x20
  1805: 32 00                    ret
      :                          @140
  1807: 64 57                    a0 = s0
  1809: 7b 18                    u64 [sp] = a1
  1811: 64 a8                    a1 = a3
  1813: 64 69                    a2 = s1
  1815: 50 10 24 85 fc           ra = 36, jump @53
      :                          @141 [@dyn 18]
  1820: 82 18                    a1 = u64 [sp]
  1822: 82 5a 10                 a3 = u64 [s0 + 0x10]
  1825: 28 c7                    jump @138
      :                          @142 [@dyn 19]
  1827: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  1830: 7b 10 20                 u64 [sp + 0x20] = ra
  1833: 7b 15 18                 u64 [sp + 0x18] = s0
  1836: 7b 16 10                 u64 [sp + 0x10] = s1
  1839: 64 86                    s1 = a1
  1841: 83 88                    i32 a1 = a1 + 0
  1843: 33 09 80 00              a2 = 0x80
  1847: 64 7a                    a3 = a0
  1849: ae 98 2b                 jump @147 if a1 >=u a2
      :                          @143
  1852: 82 a8 10                 a1 = u64 [a3 + 0x10]
  1855: 82 a7                    a0 = u64 [a3]
  1857: ab 78 12                 jump @146 if a1 != a0
      :                          @144
  1860: 64 a7                    a0 = a3
  1862: 64 a5                    s0 = a3
  1864: 50 10 28 13 fe           ra = 40, jump @97
      :                          @145 [@dyn 20]
  1869: 64 5a                    a3 = s0
  1871: 82 58 10                 a1 = u64 [s0 + 0x10]
  1874: 01                       fallthrough
      :                          @146
  1875: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1878: c8 87 07                 a0 = a0 + a1
  1881: 78 76                    u8 [a0] = s1
  1883: 95 88 01                 a1 = a1 + 0x1
  1886: 7b a8 10                 u64 [a3 + 0x10] = a1
  1889: 28 ab 00                 jump @155
      :                          @147
  1892: 8b 67 0b                 i32 a0 = s1 >> 0xb
  1895: 48 11 0c                 u32 [sp + 12] = 0
  1898: 52 07 1c                 jump @149 if a0 != 0
      :                          @148
  1901: 98 67 06                 a0 = s1 >> 0x6
  1904: 86 77 c0 00              a0 = a0 | 0xc0
  1908: 78 17 0c                 u8 [sp + 0xc] = a0
  1911: 84 67 3f                 a0 = s1 & 0x3f
  1914: 86 77 80 00              a0 = a0 | 0x80
  1918: 78 17 0d                 u8 [sp + 0xd] = a0
  1921: 33 06 02                 s1 = 0x2
  1924: 28 63                    jump @152
      :                          @149
  1926: 8b 67 10                 i32 a0 = s1 >> 0x10
  1929: 52 07 29                 jump @151 if a0 != 0
      :                          @150
  1932: 98 67 0c                 a0 = s1 >> 0xc
  1935: 86 77 e0 00              a0 = a0 | 0xe0
  1939: 78 17 0c                 u8 [sp + 0xc] = a0
  1942: 97 67 34                 a0 = s1 << 0x34
  1945: 98 77 3a                 a0 = a0 >> 0x3a
  1948: 95 77 80 00              a0 = a0 + 0x80
  1952: 78 17 0d                 u8 [sp + 0xd] = a0
  1955: 84 67 3f                 a0 = s1 & 0x3f
  1958: 86 77 80 00              a0 = a0 | 0x80
  1962: 78 17 0e                 u8 [sp + 0xe] = a0
  1965: 33 06 03                 s1 = 0x3
  1968: 28 37                    jump @152
      :                          @151
  1970: 97 67 2b                 a0 = s1 << 0x2b
  1973: 98 77 3d                 a0 = a0 >> 0x3d
  1976: 95 77 f0 00              a0 = a0 + 0xf0
  1980: 78 17 0c                 u8 [sp + 0xc] = a0
  1983: 97 67 2e                 a0 = s1 << 0x2e
  1986: 98 77 3a                 a0 = a0 >> 0x3a
  1989: 95 77 80 00              a0 = a0 + 0x80
  1993: 78 17 0d                 u8 [sp + 0xd] = a0
  1996: 97 67 34                 a0 = s1 << 0x34
  1999: 98 77 3a                 a0 = a0 >> 0x3a
  2002: 95 77 80 00              a0 = a0 + 0x80
  2006: 78 17 0e                 u8 [sp + 0xe] = a0
  2009: 84 67 3f                 a0 = s1 & 0x3f
  2012: 86 77 80 00              a0 = a0 | 0x80
  2016: 78 17 0f                 u8 [sp + 0xf] = a0
  2019: 33 06 04                 s1 = 0x4
  2022: 01                       fallthrough
      :                          @152
  2023: 82 a5 10                 s0 = u64 [a3 + 0x10]
  2026: 82 a7                    a0 = u64 [a3]
  2028: c9 57 07                 a0 = a0 - s0
  2031: ac 67 2d                 jump @156 if a0 <u s1
      :                          @153
  2034: 7b 1a                    u64 [sp] = a3
  2036: 82 a7 08                 a0 = u64 [a3 + 0x8]
  2039: c8 57 07                 a0 = a0 + s0
  2042: 95 18 0c                 a1 = sp + 0xc
  2045: 64 69                    a2 = s1
  2047: 50 10 2a 34              ra = 42, jump @159
      :                          @154 [@dyn 21]
  2051: c8 56 06                 s1 = s1 + s0
  2054: 82 17                    a0 = u64 [sp]
  2056: 7b 76 10                 u64 [a0 + 0x10] = s1
  2059: 01                       fallthrough
      :                          @155
  2060: 33 07                    a0 = 0
  2062: 82 10 20                 ra = u64 [sp + 0x20]
  2065: 82 15 18                 s0 = u64 [sp + 0x18]
  2068: 82 16 10                 s1 = u64 [sp + 0x10]
  2071: 95 11 28                 sp = sp + 0x28
  2074: 32 00                    ret
      :                          @156
  2076: 64 a7                    a0 = a3
  2078: 64 58                    a1 = s0
  2080: 64 69                    a2 = s1
  2082: 64 a5                    s0 = a3
  2084: 50 10 2c 78 fb           ra = 44, jump @53
      :                          @157 [@dyn 22]
  2089: 64 5a                    a3 = s0
  2091: 82 55 10                 s0 = u64 [s0 + 0x10]
  2094: 28 c4                    jump @153
      :                          @158 [@dyn 23]
  2096: 28 4f 04                 jump @241
      :                          @159
  2099: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  2102: 7b 10 18                 u64 [sp + 0x18] = ra
  2105: 7b 15 10                 u64 [sp + 0x10] = s0
  2108: 7b 16 08                 u64 [sp + 0x8] = s1
  2111: 53 19 10 64              jump @168 if a2 <u 16
      :                          @160
  2115: 8d 7a                    i32 a3 = -a0
  2117: 84 a2 07                 t0 = a3 & 0x7
  2120: c8 27 0b                 a4 = a0 + t0
  2123: 51 02 15                 jump @163 if t0 == 0
      :                          @161
  2126: 64 8c                    a5 = a1
  2128: 64 75                    s0 = a0
  2130: 01                       fallthrough
      :                          @162
  2131: 7c ca                    a3 = u8 [a5]
  2133: 78 5a                    u8 [s0] = a3
  2135: 95 55 01                 s0 = s0 + 0x1
  2138: 95 cc 01                 a5 = a5 + 0x1
  2141: ac b5 f6                 jump @162 if s0 <u a4
      :                          @163
  2144: c8 28 03                 t1 = a1 + t0
  2147: c9 29 02                 t0 = a2 - t0
  2150: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  2153: 84 38 07                 a1 = t1 & 0x7
  2156: c8 4b 0a                 a3 = a4 + t2
  2159: 51 08 3b                 jump @170 if a1 == 0
      :                          @164
  2162: 58 04 4b                 jump @173 if t2 <=s 0
      :                          @165
  2165: 97 38 03                 a1 = t1 << 0x3
  2168: 84 80 38                 ra = a1 & 0x38
  2171: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  2174: 82 c5                    s0 = u64 [a5]
  2176: 8d 88                    i32 a1 = -a1
  2178: 84 88 38                 a1 = a1 & 0x38
  2181: 95 cc 08                 a5 = a5 + 0x8
  2184: 01                       fallthrough
      :                          @166
  2185: 82 c6                    s1 = u64 [a5]
  2187: d0 05 05                 s0 = s0 >> ra
  2190: cf 86 09                 a2 = s1 << a1
  2193: d4 59 09                 a2 = a2 | s0
  2196: 7b b9                    u64 [a4] = a2
  2198: 95 bb 08                 a4 = a4 + 0x8
  2201: 95 cc 08                 a5 = a5 + 0x8
  2204: 64 65                    s0 = s1
  2206: ac ab eb                 jump @166 if a4 <u a3
      :                          @167
  2209: 28 1c                    jump @173
      :                          @168
  2211: 64 7a                    a3 = a0
  2213: 52 09 21                 jump @174 if a2 != 0
      :                          @169
  2216: 28 2f                    jump @176
      :                          @170
  2218: 58 04 13                 jump @173 if t2 <=s 0
      :                          @171
  2221: 64 38                    a1 = t1
  2223: 01                       fallthrough
      :                          @172
  2224: 82 89                    a2 = u64 [a1]
  2226: 7b b9                    u64 [a4] = a2
  2228: 95 bb 08                 a4 = a4 + 0x8
  2231: 95 88 08                 a1 = a1 + 0x8
  2234: ac ab f6                 jump @172 if a4 <u a3
      :                          @173
  2237: c8 43 08                 a1 = t1 + t2
  2240: 84 29 07                 a2 = t0 & 0x7
  2243: 51 09 14                 jump @176 if a2 == 0
      :                          @174
  2246: c8 a9 09                 a2 = a2 + a3
  2249: 01                       fallthrough
      :                          @175
  2250: 7c 8b                    a4 = u8 [a1]
  2252: 78 ab                    u8 [a3] = a4
  2254: 95 aa 01                 a3 = a3 + 0x1
  2257: 95 88 01                 a1 = a1 + 0x1
  2260: ac 9a f6                 jump @175 if a3 <u a2
      :                          @176
  2263: 82 10 18                 ra = u64 [sp + 0x18]
  2266: 82 15 10                 s0 = u64 [sp + 0x10]
  2269: 82 16 08                 s1 = u64 [sp + 0x8]
  2272: 95 11 20                 sp = sp + 0x20
  2275: 32 00                    ret
      :                          @177 [@dyn 24]
  2277: 82 77                    a0 = u64 [a0]
  2279: 01                       fallthrough
      :                          @178
  2280: 28                       jump @178
      :                          @179
  2281: 95 11 a8                 sp = sp + 0xffffffffffffffa8
  2284: 7b 10 50                 u64 [sp + 0x50] = ra
  2287: 7b 15 48                 u64 [sp + 0x48] = s0
  2290: 7b 16 40                 u64 [sp + 0x40] = s1
  2293: 7b 18                    u64 [sp] = a1
  2295: 98 79 04                 a2 = a0 >> 0x4
  2298: 33 08 27                 a1 = 0x27
  2301: 53 29 71 02 81 00        jump @182 if a2 <u 625
      :                          @180
  2307: 33 08 27                 a1 = 0x27
  2310: 95 1a 3e                 a3 = sp + 0x3e
  2313: 3a 09 00 00 03           a2 = u64 [0x30000]
  2318: 7b 19 10                 u64 [sp + 0x10] = a2
  2321: 49 11 08 f0 d8 00        u64 [sp + 8] = 0xd8f0
  2327: 33 04 7b 14              t2 = 0x147b
  2331: 33 0b 42 01 01           a4 = 0x10142
  2336: 33 00 ff e0 f5 05        ra = 0x5f5e0ff
  2342: 01                       fallthrough
      :                          @181
  2343: 64 72                    t0 = a0
  2345: 82 17 10                 a0 = u64 [sp + 0x10]
  2348: d6 72 07                 a0 = t0 mulhu a0
  2351: 98 77 0b                 a0 = a0 >> 0xb
  2354: 82 19 08                 a2 = u64 [sp + 0x8]
  2357: c0 97 0c                 i32 a5 = a0 * a2
  2360: c8 2c 06                 s1 = a5 + t0
  2363: 97 6c 30                 a5 = s1 << 0x30
  2366: 98 cc 32                 a5 = a5 >> 0x32
  2369: ca 4c 0c                 a5 = a5 * t2
  2372: 98 c3 11                 t1 = a5 >> 0x11
  2375: 98 cc 10                 a5 = a5 >> 0x10
  2378: 84 cc fe 07              a5 = a5 & 0x7fe
  2382: 96 39 9c                 a2 = t1 * 0xffffffffffffff9c
  2385: c8 69 09                 a2 = a2 + s1
  2388: 97 99 31                 a2 = a2 << 0x31
  2391: 98 99 30                 a2 = a2 >> 0x30
  2394: c8 bc 0c                 a5 = a5 + a4
  2397: 7c c6                    s1 = u8 [a5]
  2399: 7c cc 01                 a5 = u8 [a5 + 0x1]
  2402: c8 b9 09                 a2 = a2 + a4
  2405: 7c 95 01                 s0 = u8 [a2 + 0x1]
  2408: 7c 99                    a2 = u8 [a2]
  2410: 78 ac ff                 u8 [a3 + 0xffffffffffffffff] = a5
  2413: 78 a6 fe                 u8 [a3 + 0xfffffffffffffffe] = s1
  2416: 78 a5 01                 u8 [a3 + 0x1] = s0
  2419: 78 a9                    u8 [a3] = a2
  2421: 95 88 fc                 a1 = a1 + 0xfffffffffffffffc
  2424: 95 aa fc                 a3 = a3 + 0xfffffffffffffffc
  2427: ac 20 ac                 jump @181 if ra <u t0
      :                          @182
  2430: 54 17 63 3b              jump @184 if a0 <=u 99
      :                          @183
  2434: 97 79 30                 a2 = a0 << 0x30
  2437: 98 99 32                 a2 = a2 >> 0x32
  2440: 96 99 7b 14              a2 = a2 * 0x147b
  2444: 98 99 11                 a2 = a2 >> 0x11
  2447: 96 9a 9c                 a3 = a2 * 0xffffffffffffff9c
  2450: c8 a7 07                 a0 = a0 + a3
  2453: 97 77 31                 a0 = a0 << 0x31
  2456: 98 77 30                 a0 = a0 >> 0x30
  2459: 95 88 fe                 a1 = a1 + 0xfffffffffffffffe
  2462: 33 0a 42 01 01           a3 = 0x10142
  2467: c8 a7 07                 a0 = a0 + a3
  2470: 7c 7a 01                 a3 = u8 [a0 + 0x1]
  2473: 7c 77                    a0 = u8 [a0]
  2475: 95 1b 19                 a4 = sp + 0x19
  2478: c8 8b 0b                 a4 = a4 + a1
  2481: 78 ba 01                 u8 [a4 + 0x1] = a3
  2484: 78 b7                    u8 [a4] = a0
  2486: 64 97                    a0 = a2
  2488: 01                       fallthrough
      :                          @184
  2489: 55 17 0a 14              jump @186 if a0 >=u 10
      :                          @185
  2493: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
  2496: 95 19 19                 a2 = sp + 0x19
  2499: c8 89 09                 a2 = a2 + a1
  2502: 83 77 30                 i32 a0 = a0 + 0x30
  2505: 78 97                    u8 [a2] = a0
  2507: 28 21                    jump @187
      :                          @186
  2509: 97 77 01                 a0 = a0 << 0x1
  2512: 95 88 fe                 a1 = a1 + 0xfffffffffffffffe
  2515: 33 09 42 01 01           a2 = 0x10142
  2520: c8 97 07                 a0 = a0 + a2
  2523: 7c 79 01                 a2 = u8 [a0 + 0x1]
  2526: 7c 77                    a0 = u8 [a0]
  2528: 95 1a 19                 a3 = sp + 0x19
  2531: c8 8a 0a                 a3 = a3 + a1
  2534: 78 a9 01                 u8 [a3 + 0x1] = a2
  2537: 78 a7                    u8 [a3] = a0
  2539: 01                       fallthrough
      :                          @187
  2540: 95 1a 19                 a3 = sp + 0x19
  2543: c8 8a 0a                 a3 = a3 + a1
  2546: 9a 8b 27                 a4 = 0x27 - a1
  2549: 33 08 40 01 01           a1 = 0x10140
  2554: 82 17                    a0 = u64 [sp]
  2556: 33 09                    a2 = 0
  2558: 50 10 32 12              ra = 50, jump @189
      :                          @188 [@dyn 25]
  2562: 82 10 50                 ra = u64 [sp + 0x50]
  2565: 82 15 48                 s0 = u64 [sp + 0x48]
  2568: 82 16 40                 s1 = u64 [sp + 0x40]
  2571: 95 11 58                 sp = sp + 0x58
  2574: 32 00                    ret
      :                          @189
  2576: 95 11 98                 sp = sp + 0xffffffffffffff98
  2579: 7b 10 60                 u64 [sp + 0x60] = ra
  2582: 7b 15 58                 u64 [sp + 0x58] = s0
  2585: 7b 16 50                 u64 [sp + 0x50] = s1
  2588: 80 73 34                 t1 = u32 [a0 + 0x34]
  2591: 7b 1a 20                 u64 [sp + 0x20] = a3
  2594: 64 9c                    a5 = a2
  2596: 84 36 01                 s1 = t1 & 0x1
  2599: 33 02 2b                 t0 = 0x2b
  2602: 33 09 00 00 11           a2 = 0x110000
  2607: 84 3a 04                 a3 = t1 & 0x4
  2610: 7b 1b 28                 u64 [sp + 0x28] = a4
  2613: c8 b6 04                 t2 = s1 + a4
  2616: 7b 1c 30                 u64 [sp + 0x30] = a5
  2619: 52 0a 10                 jump @192 if a3 != 0
      :                          @190
  2622: 49 11 38                 u64 [sp + 56] = 0
  2625: 82 78                    a1 = u64 [a0]
  2627: 94 69 2b                 a2 = 0x2b if s1 != 0
  2630: 52 08 35                 jump @196 if a1 != 0
      :                          @191
  2633: 28 56                    jump @201
      :                          @192
  2635: 7b 18 38                 u64 [sp + 0x38] = a1
  2638: 33 09                    a2 = 0
  2640: 51 0c 1b                 jump @195 if a5 == 0
      :                          @193
  2643: 82 1b 38                 a4 = u64 [sp + 0x38]
  2646: 01                       fallthrough
      :                          @194
  2647: 7d b5                    s0 = i8 [a4]
  2649: 89 55 c0                 s0 = s0 <s 0xffffffffffffffc0
  2652: 85 5a 01                 a3 = s0 ^ 0x1
  2655: c8 a9 09                 a2 = a2 + a3
  2658: 95 cc ff                 a5 = a5 + 0xffffffffffffffff
  2661: 95 bb 01                 a4 = a4 + 0x1
  2664: 52 0c ef                 jump @194 if a5 != 0
      :                          @195
  2667: c8 94 04                 t2 = t2 + a2
  2670: 33 09 00 00 11           a2 = 0x110000
  2675: 82 78                    a1 = u64 [a0]
  2677: db 62 09                 a2 = t0 if s1 != 0
  2680: 51 08 27                 jump @201 if a1 == 0
      :                          @196
  2683: 82 7a 08                 a3 = u64 [a0 + 0x8]
  2686: ae a4 21                 jump @201 if t2 >=u a3
      :                          @197
  2689: 84 38 08                 a1 = t1 & 0x8
  2692: 52 08 50                 jump @204 if a1 != 0
      :                          @198
  2695: 7c 76 38                 s1 = u8 [a0 + 0x38]
  2698: c9 4a 0a                 a3 = a3 - t2
  2701: 7b 19 18                 u64 [sp + 0x18] = a2
  2704: 5a 16 01 9d 00           jump @211 if s1 >s 1
      :                          @199
  2709: 52 06 aa 00              jump @213 if s1 != 0
      :                          @200
  2713: 7b 1a 10                 u64 [sp + 0x10] = a3
  2716: 28 a9 00                 jump @214
      :                          @201
  2719: 82 75 20                 s0 = u64 [a0 + 0x20]
  2722: 82 76 28                 s1 = u64 [a0 + 0x28]
  2725: 64 57                    a0 = s0
  2727: 64 68                    a1 = s1
  2729: 82 1a 38                 a3 = u64 [sp + 0x38]
  2732: 82 1b 30                 a4 = u64 [sp + 0x30]
  2735: 50 10 34 6c 01           ra = 52, jump @234
      :                          @202 [@dyn 26]
  2740: 33 08 01                 a1 = 0x1
  2743: 52 07 bb 00              jump @219 if a0 != 0
      :                          @203
  2747: 82 6c 18                 a5 = u64 [s1 + 0x18]
  2750: 64 57                    a0 = s0
  2752: 82 18 20                 a1 = u64 [sp + 0x20]
  2755: 82 19 28                 a2 = u64 [sp + 0x28]
  2758: 82 10 60                 ra = u64 [sp + 0x60]
  2761: 82 15 58                 s0 = u64 [sp + 0x58]
  2764: 82 16 50                 s1 = u64 [sp + 0x50]
  2767: 95 11 68                 sp = sp + 0x68
  2770: 32 0c                    jump [a5]
      :                          @204
  2772: 7b 1a 40                 u64 [sp + 0x40] = a3
  2775: 64 45                    s0 = t2
  2777: 81 78 30                 a1 = i32 [a0 + 0x30]
  2780: 7b 18 10                 u64 [sp + 0x10] = a1
  2783: 7c 7a 38                 a3 = u8 [a0 + 0x38]
  2786: 7b 1a 08                 u64 [sp + 0x8] = a3
  2789: 82 7a 20                 a3 = u64 [a0 + 0x20]
  2792: 82 78 28                 a1 = u64 [a0 + 0x28]
  2795: 48 17 30 30              u32 [a0 + 48] = 0x30
  2799: 7b 17                    u64 [sp] = a0
  2801: 46 17 38 01              u8 [a0 + 56] = 0x1
  2805: 7b 1a 48                 u64 [sp + 0x48] = a3
  2808: 64 a7                    a0 = a3
  2810: 64 86                    s1 = a1
  2812: 82 1a 38                 a3 = u64 [sp + 0x38]
  2815: 82 1b 30                 a4 = u64 [sp + 0x30]
  2818: 50 10 36 19 01           ra = 54, jump @234
      :                          @205 [@dyn 27]
  2823: 52 07 67                 jump @218 if a0 != 0
      :                          @206
  2826: 82 17 40                 a0 = u64 [sp + 0x40]
  2829: c9 57 05                 s0 = a0 - s0
  2832: 95 55 01                 s0 = s0 + 0x1
  2835: 01                       fallthrough
      :                          @207
  2836: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  2839: 51 05 c6 00              jump @229 if s0 == 0
      :                          @208
  2843: 82 69 20                 a2 = u64 [s1 + 0x20]
  2846: 33 08 30                 a1 = 0x30
  2849: 82 17 48                 a0 = u64 [sp + 0x48]
  2852: b4 90 01 38              ra = 56, jump [a2]
      :                          @209 [@dyn 28]
  2856: 51 07 ec                 jump @207 if a0 == 0
      :                          @210
  2859: 28 43                    jump @218
      :                          @211
  2861: 52 16 02 12              jump @213 if s1 != 2
      :                          @212
  2865: 98 a6 01                 s1 = a3 >> 0x1
  2868: 95 a8 01                 a1 = a3 + 0x1
  2871: 98 88 01                 a1 = a1 >> 0x1
  2874: 7b 18 10                 u64 [sp + 0x10] = a1
  2877: 28 08                    jump @214
      :                          @213
  2879: 64 a6                    s1 = a3
  2881: 49 11 10                 u64 [sp + 16] = 0
  2884: 01                       fallthrough
      :                          @214
  2885: 82 78 20                 a1 = u64 [a0 + 0x20]
  2888: 7b 18 48                 u64 [sp + 0x48] = a1
  2891: 82 75 28                 s0 = u64 [a0 + 0x28]
  2894: 81 77 30                 a0 = i32 [a0 + 0x30]
  2897: 7b 17 40                 u64 [sp + 0x40] = a0
  2900: 95 66 01                 s1 = s1 + 0x1
  2903: 01                       fallthrough
      :                          @215
  2904: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
  2907: 51 06 27                 jump @220 if s1 == 0
      :                          @216
  2910: 82 59 20                 a2 = u64 [s0 + 0x20]
  2913: 82 17 48                 a0 = u64 [sp + 0x48]
  2916: 82 18 40                 a1 = u64 [sp + 0x40]
  2919: b4 90 01 3a              ra = 58, jump [a2]
      :                          @217 [@dyn 29]
  2923: 51 07 ed                 jump @215 if a0 == 0
      :                          @218
  2926: 33 08 01                 a1 = 0x1
  2929: 01                       fallthrough
      :                          @219
  2930: 64 87                    a0 = a1
  2932: 82 10 60                 ra = u64 [sp + 0x60]
  2935: 82 15 58                 s0 = u64 [sp + 0x58]
  2938: 82 16 50                 s1 = u64 [sp + 0x50]
  2941: 95 11 68                 sp = sp + 0x68
  2944: 32 00                    ret
      :                          @220
  2946: 82 16 48                 s1 = u64 [sp + 0x48]
  2949: 64 67                    a0 = s1
  2951: 64 58                    a1 = s0
  2953: 82 19 18                 a2 = u64 [sp + 0x18]
  2956: 82 1a 38                 a3 = u64 [sp + 0x38]
  2959: 82 1b 30                 a4 = u64 [sp + 0x30]
  2962: 50 10 3c 89 00           ra = 60, jump @234
      :                          @221 [@dyn 30]
  2967: 33 08 01                 a1 = 0x1
  2970: 52 07 d8                 jump @219 if a0 != 0
      :                          @222
  2973: 82 5a 18                 a3 = u64 [s0 + 0x18]
  2976: 64 67                    a0 = s1
  2978: 82 18 20                 a1 = u64 [sp + 0x20]
  2981: 82 19 28                 a2 = u64 [sp + 0x28]
  2984: b4 a0 01 3e              ra = 62, jump [a3]
      :                          @223 [@dyn 31]
  2988: 33 08 01                 a1 = 0x1
  2991: 52 07 c3                 jump @219 if a0 != 0
      :                          @224
  2994: 82 17 10                 a0 = u64 [sp + 0x10]
  2997: 9a 77                    a0 = -a0
  2999: 7b 17 38                 u64 [sp + 0x38] = a0
  3002: 33 06 ff                 s1 = 0xffffffffffffffff
  3005: 01                       fallthrough
      :                          @225
  3006: 82 17 38                 a0 = u64 [sp + 0x38]
  3009: c8 67 07                 a0 = a0 + s1
  3012: 51 17 ff 42              jump @232 if a0 == 4294967295
      :                          @226
  3016: 82 59 20                 a2 = u64 [s0 + 0x20]
  3019: 82 17 48                 a0 = u64 [sp + 0x48]
  3022: 82 18 40                 a1 = u64 [sp + 0x40]
  3025: b4 90 01 40              ra = 64, jump [a2]
      :                          @227 [@dyn 32]
  3029: 95 66 01                 s1 = s1 + 0x1
  3032: 51 07 e6                 jump @225 if a0 == 0
      :                          @228
  3035: 28 37                    jump @233
      :                          @229
  3037: 82 6a 18                 a3 = u64 [s1 + 0x18]
  3040: 82 17 48                 a0 = u64 [sp + 0x48]
  3043: 82 18 20                 a1 = u64 [sp + 0x20]
  3046: 82 19 28                 a2 = u64 [sp + 0x28]
  3049: b4 a0 01 42              ra = 66, jump [a3]
      :                          @230 [@dyn 33]
  3053: 33 08 01                 a1 = 0x1
  3056: 52 07 82                 jump @219 if a0 != 0
      :                          @231
  3059: 33 08                    a1 = 0
  3061: 82 16                    s1 = u64 [sp]
  3063: 82 17 10                 a0 = u64 [sp + 0x10]
  3066: 7a 67 30                 u32 [s1 + 0x30] = a0
  3069: 82 17 08                 a0 = u64 [sp + 0x8]
  3072: 78 67 38                 u8 [s1 + 0x38] = a0
  3075: 28 6f ff                 jump @219
      :                          @232
  3078: 82 16 10                 s1 = u64 [sp + 0x10]
  3081: 82 17 10                 a0 = u64 [sp + 0x10]
  3084: d8 76 08                 a1 = s1 <u a0
  3087: 28 63 ff                 jump @219
      :                          @233
  3090: 82 17 10                 a0 = u64 [sp + 0x10]
  3093: d8 76 08                 a1 = s1 <u a0
  3096: 28 5a ff                 jump @219
      :                          @234
  3099: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  3102: 7b 10 20                 u64 [sp + 0x20] = ra
  3105: 7b 15 18                 u64 [sp + 0x18] = s0
  3108: 7b 16 10                 u64 [sp + 0x10] = s1
  3111: 83 9c                    i32 a5 = a2 + 0
  3113: 33 02 00 00 11           t0 = 0x110000
  3118: 64 a6                    s1 = a3
  3120: 64 85                    s0 = a1
  3122: 64 7a                    a3 = a0
  3124: aa 2c 20                 jump @237 if a5 == t0
      :                          @235
  3127: 82 5c 20                 a5 = u64 [s0 + 0x20]
  3130: 64 a7                    a0 = a3
  3132: 64 98                    a1 = a2
  3134: 7b 1b 08                 u64 [sp + 0x8] = a4
  3137: 7b 1a                    u64 [sp] = a3
  3139: b4 c0 01 44              ra = 68, jump [a5]
      :                          @236 [@dyn 34]
  3143: 82 1a                    a3 = u64 [sp]
  3145: 82 1b 08                 a4 = u64 [sp + 0x8]
  3148: 64 78                    a1 = a0
  3150: 33 07 01                 a0 = 0x1
  3153: 52 08 20                 jump @240 if a1 != 0
      :                          @237
  3156: 51 06 1a                 jump @239 if s1 == 0
      :                          @238
  3159: 82 5c 18                 a5 = u64 [s0 + 0x18]
  3162: 64 a7                    a0 = a3
  3164: 64 68                    a1 = s1
  3166: 64 b9                    a2 = a4
  3168: 82 10 20                 ra = u64 [sp + 0x20]
  3171: 82 15 18                 s0 = u64 [sp + 0x18]
  3174: 82 16 10                 s1 = u64 [sp + 0x10]
  3177: 95 11 28                 sp = sp + 0x28
  3180: 32 0c                    jump [a5]
      :                          @239
  3182: 33 07                    a0 = 0
  3184: 01                       fallthrough
      :                          @240
  3185: 82 10 20                 ra = u64 [sp + 0x20]
  3188: 82 15 18                 s0 = u64 [sp + 0x18]
  3191: 82 16 10                 s1 = u64 [sp + 0x10]
  3194: 95 11 28                 sp = sp + 0x28
  3197: 32 00                    ret
      :                          @241
  3199: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  3203: 7b 10 80 00              u64 [sp + 0x80] = ra
  3207: 7b 15 78                 u64 [sp + 0x78] = s0
  3210: 7b 16 70                 u64 [sp + 0x70] = s1
  3213: 49 11 60 20              u64 [sp + 96] = 0x20
  3217: 33 09 03                 a2 = 0x3
  3220: 78 19 68                 u8 [sp + 0x68] = a2
  3223: 49 11 30                 u64 [sp + 48] = 0
  3226: 49 11 40                 u64 [sp + 64] = 0
  3229: 82 86 20                 s1 = u64 [a1 + 0x20]
  3232: 7b 17 50                 u64 [sp + 0x50] = a0
  3235: 33 07 10 01 01           a0 = 0x10110
  3240: 7b 17 58                 u64 [sp + 0x58] = a0
  3243: 51 06 06 01              jump @263 if s1 == 0
      :                          @242
  3247: 82 87 28                 a0 = u64 [a1 + 0x28]
  3250: 51 07 73 01              jump @273 if a0 == 0
      :                          @243
  3254: 33 09                    a2 = 0
  3256: 82 85                    s0 = u64 [a1]
  3258: 7b 18 08                 u64 [sp + 0x8] = a1
  3261: 82 88 10                 a1 = u64 [a1 + 0x10]
  3264: 7b 18 18                 u64 [sp + 0x18] = a1
  3267: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  3270: 97 88 03                 a1 = a1 << 0x3
  3273: 98 88 03                 a1 = a1 >> 0x3
  3276: 95 88 01                 a1 = a1 + 0x1
  3279: 7b 18                    u64 [sp] = a1
  3281: 95 55 08                 s0 = s0 + 0x8
  3284: 96 78 38                 a1 = a0 * 0x38
  3287: 95 66 18                 s1 = s1 + 0x18
  3290: 33 07 30                 a0 = 0x30
  3293: 7b 17 10                 u64 [sp + 0x10] = a0
  3296: 01                       fallthrough
      :                          @244
  3297: 7b 18 20                 u64 [sp + 0x20] = a1
  3300: 7b 19 28                 u64 [sp + 0x28] = a2
  3303: 82 59                    a2 = u64 [s0]
  3305: 51 09 17                 jump @247 if a2 == 0
      :                          @245
  3308: 82 1a 58                 a3 = u64 [sp + 0x58]
  3311: 82 17 50                 a0 = u64 [sp + 0x50]
  3314: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  3317: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3320: b4 a0 01 46              ra = 70, jump [a3]
      :                          @246 [@dyn 35]
  3324: 52 07 4e 01              jump @276 if a0 != 0
      :                          @247
  3328: 81 67 10                 a0 = i32 [s1 + 0x10]
  3331: 7a 17 60                 u32 [sp + 0x60] = a0
  3334: 7c 67 18                 a0 = u8 [s1 + 0x18]
  3337: 78 17 68                 u8 [sp + 0x68] = a0
  3340: 81 67 14                 a0 = i32 [s1 + 0x14]
  3343: 7a 17 64                 u32 [sp + 0x64] = a0
  3346: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3349: 82 67                    a0 = u64 [s1]
  3351: 51 08 26                 jump @252 if a1 == 0
      :                          @248
  3354: 52 18 01 16              jump @250 if a1 != 1
      :                          @249
  3358: 97 77 04                 a0 = a0 << 0x4
  3361: 82 18 18                 a1 = u64 [sp + 0x18]
  3364: c8 87 07                 a0 = a0 + a1
  3367: 82 78 08                 a1 = u64 [a0 + 0x8]
  3370: 82 19 10                 a2 = u64 [sp + 0x10]
  3373: aa 98 07                 jump @251 if a1 == a2
      :                          @250
  3376: 33 08                    a1 = 0
  3378: 28 0f                    jump @253
      :                          @251
  3380: 82 77                    a0 = u64 [a0]
  3382: 82 77                    a0 = u64 [a0]
  3384: 33 08 01                 a1 = 0x1
  3387: 28 06                    jump @253
      :                          @252
  3389: 33 08 01                 a1 = 0x1
  3392: 01                       fallthrough
      :                          @253
  3393: 7b 18 30                 u64 [sp + 0x30] = a1
  3396: 7b 17 38                 u64 [sp + 0x38] = a0
  3399: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  3402: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  3405: 51 08 26                 jump @258 if a1 == 0
      :                          @254
  3408: 52 18 01 16              jump @256 if a1 != 1
      :                          @255
  3412: 97 77 04                 a0 = a0 << 0x4
  3415: 82 18 18                 a1 = u64 [sp + 0x18]
  3418: c8 87 07                 a0 = a0 + a1
  3421: 82 78 08                 a1 = u64 [a0 + 0x8]
  3424: 82 19 10                 a2 = u64 [sp + 0x10]
  3427: aa 98 07                 jump @257 if a1 == a2
      :                          @256
  3430: 33 08                    a1 = 0
  3432: 28 0f                    jump @259
      :                          @257
  3434: 82 77                    a0 = u64 [a0]
  3436: 82 77                    a0 = u64 [a0]
  3438: 33 08 01                 a1 = 0x1
  3441: 28 06                    jump @259
      :                          @258
  3443: 33 08 01                 a1 = 0x1
  3446: 01                       fallthrough
      :                          @259
  3447: 7b 18 40                 u64 [sp + 0x40] = a1
  3450: 7b 17 48                 u64 [sp + 0x48] = a0
  3453: 82 67 08                 a0 = u64 [s1 + 0x8]
  3456: 97 77 04                 a0 = a0 << 0x4
  3459: 82 18 18                 a1 = u64 [sp + 0x18]
  3462: c8 78 08                 a1 = a1 + a0
  3465: 82 87                    a0 = u64 [a1]
  3467: 82 89 08                 a2 = u64 [a1 + 0x8]
  3470: 95 18 30                 a1 = sp + 0x30
  3473: b4 90 01 48              ra = 72, jump [a2]
      :                          @260 [@dyn 36]
  3477: 52 07 b5 00              jump @276 if a0 != 0
      :                          @261
  3481: 95 55 10                 s0 = s0 + 0x10
  3484: 82 18 20                 a1 = u64 [sp + 0x20]
  3487: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  3490: 95 66 38                 s1 = s1 + 0x38
  3493: 82 19 28                 a2 = u64 [sp + 0x28]
  3496: 95 99 01                 a2 = a2 + 0x1
  3499: 52 08 36 ff              jump @244 if a1 != 0
      :                          @262
  3503: 28 69                    jump @271
      :                          @263
  3505: 82 87 18                 a0 = u64 [a1 + 0x18]
  3508: 51 07 71                 jump @273 if a0 == 0
      :                          @264
  3511: 82 85 10                 s0 = u64 [a1 + 0x10]
  3514: 33 0a                    a3 = 0
  3516: 97 79 04                 a2 = a0 << 0x4
  3519: c8 59 09                 a2 = a2 + s0
  3522: 7b 19 20                 u64 [sp + 0x20] = a2
  3525: 7b 18 08                 u64 [sp + 0x8] = a1
  3528: 82 86                    s1 = u64 [a1]
  3530: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  3533: 97 77 04                 a0 = a0 << 0x4
  3536: 98 77 04                 a0 = a0 >> 0x4
  3539: 95 77 01                 a0 = a0 + 0x1
  3542: 7b 17                    u64 [sp] = a0
  3544: 95 66 08                 s1 = s1 + 0x8
  3547: 01                       fallthrough
      :                          @265
  3548: 7b 1a 28                 u64 [sp + 0x28] = a3
  3551: 82 69                    a2 = u64 [s1]
  3553: 51 09 16                 jump @268 if a2 == 0
      :                          @266
  3556: 82 1a 58                 a3 = u64 [sp + 0x58]
  3559: 82 17 50                 a0 = u64 [sp + 0x50]
  3562: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3565: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3568: b4 a0 01 4a              ra = 74, jump [a3]
      :                          @267 [@dyn 37]
  3572: 52 07 56                 jump @276 if a0 != 0
      :                          @268
  3575: 82 57                    a0 = u64 [s0]
  3577: 82 59 08                 a2 = u64 [s0 + 0x8]
  3580: 95 18 30                 a1 = sp + 0x30
  3583: b4 90 01 4c              ra = 76, jump [a2]
      :                          @269 [@dyn 38]
  3587: 52 07 47                 jump @276 if a0 != 0
      :                          @270
  3590: 95 66 10                 s1 = s1 + 0x10
  3593: 95 55 10                 s0 = s0 + 0x10
  3596: 82 1a 28                 a3 = u64 [sp + 0x28]
  3599: 95 aa 01                 a3 = a3 + 0x1
  3602: 82 17 20                 a0 = u64 [sp + 0x20]
  3605: ab 75 c7                 jump @265 if s0 != a0
      :                          @271
  3608: 82 18 08                 a1 = u64 [sp + 0x8]
  3611: 82 1a                    a3 = u64 [sp]
  3613: 82 87 08                 a0 = u64 [a1 + 0x8]
  3616: ac 7a 0d                 jump @274 if a3 <u a0
      :                          @272
  3619: 28 2c                    jump @277
      :                          @273
  3621: 33 0a                    a3 = 0
  3623: 82 87 08                 a0 = u64 [a1 + 0x8]
  3626: 54 07 25                 jump @277 if a0 <=u 0
      :                          @274
  3629: 82 87                    a0 = u64 [a1]
  3631: 97 a8 04                 a1 = a3 << 0x4
  3634: c8 87 09                 a2 = a0 + a1
  3637: 82 1a 58                 a3 = u64 [sp + 0x58]
  3640: 82 17 50                 a0 = u64 [sp + 0x50]
  3643: 82 98                    a1 = u64 [a2]
  3645: 82 99 08                 a2 = u64 [a2 + 0x8]
  3648: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3651: b4 a0 01 4e              ra = 78, jump [a3]
      :                          @275 [@dyn 39]
  3655: 51 07 08                 jump @277 if a0 == 0
      :                          @276
  3658: 33 07 01                 a0 = 0x1
  3661: 28 05                    jump @278
      :                          @277
  3663: 33 07                    a0 = 0
  3665: 01                       fallthrough
      :                          @278
  3666: 82 10 80 00              ra = u64 [sp + 0x80]
  3670: 82 15 78                 s0 = u64 [sp + 0x78]
  3673: 82 16 70                 s1 = u64 [sp + 0x70]
  3676: 95 11 88 00              sp = sp + 0x88
  3680: 32 00                    ret
