// RO data = 522/524 bytes
// RW data = 8/1048608 bytes
// Stack size = 1048576 bytes
// RO data = [67, 72, 73, 76, 68, 32, 78, 79, 82, 77, 32, 110, 61, 32, 102, 105, 98, 95, 110, 95, 50, 61, 32, 114, 101, 115, 117, 108, 116, 61, 32, 40, 97, 100, 100, 114, 50, 61, 32, 40, 97, 100, 100, 114, 49, 61, 41, 32, 102, 105, 98, 95, 110, 95, 49, 61, 41, 32, 114, 101, 115, 117, 108, 116, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 13, 0, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 30, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 46, 0, 1, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 38, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 56, 0, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 67, 72, 73, 76, 68, 32, 66, 65, 83, 69, 32, 110, 61, 0, 0, 0, 168, 0, 1, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 22, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 67, 72, 73, 76, 68, 32, 87, 82, 73, 84, 69, 32, 111, 117, 116, 95, 97, 100, 100, 114, 101, 115, 115, 61, 216, 0, 1, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 22, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57]
// RW data = [75, 89, 134, 56, 214, 197, 109, 52]
// Instructions = 1275
// Code size = 3699 bytes

      :                          @0
     0: 28 5d 01                 jump @25
      :                          @1 [@dyn 1]
     3: 95 11 78 ff              sp = sp + 0xffffffffffffff78
     7: 7b 10 80 00              u64 [sp + 0x80] = ra
    11: 80 89 34                 a2 = u32 [a1 + 0x34]
    14: 84 9a 10                 a3 = a2 & 0x10
    17: 52 0a 16                 jump @4 if a3 != 0
      :                          @2
    20: 84 99 20                 a2 = a2 & 0x20
    23: 52 09 40                 jump @7 if a2 != 0
      :                          @3
    26: 80 77                    a0 = u32 [a0]
    28: 82 10 80 00              ra = u64 [sp + 0x80]
    32: 95 11 88 00              sp = sp + 0x88
    36: 28 d6 08                 jump @179
      :                          @4
    39: 81 7b                    a4 = i32 [a0]
    41: 33 09 81 00              a2 = 0x81
    45: 95 17 7f                 a0 = sp + 0x7f
    48: 33 02 57                 t0 = 0x57
    51: 01                       fallthrough
      :                          @5
    52: 64 9c                    a5 = a2
    54: 8b ba 04                 i32 a3 = a4 >> 0x4
    57: 84 bb 0f                 a4 = a4 & 0xf
    60: 88 b3 0a                 t1 = a4 <u 0xa
    63: 33 09 30                 a2 = 0x30
    66: da 32 09                 a2 = t0 if t1 == 0
    69: be b9 09                 i32 a2 = a2 + a4
    72: 78 79                    u8 [a0] = a2
    74: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
    77: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
    80: 64 ab                    a4 = a3
    82: 52 0a e2                 jump @5 if a3 != 0
      :                          @6
    85: 28 30                    jump @9
      :                          @7
    87: 81 7b                    a4 = i32 [a0]
    89: 33 09 81 00              a2 = 0x81
    93: 95 17 7f                 a0 = sp + 0x7f
    96: 33 02 37                 t0 = 0x37
    99: 01                       fallthrough
      :                          @8
   100: 64 9c                    a5 = a2
   102: 8b ba 04                 i32 a3 = a4 >> 0x4
   105: 84 bb 0f                 a4 = a4 & 0xf
   108: 88 b3 0a                 t1 = a4 <u 0xa
   111: 33 09 30                 a2 = 0x30
   114: da 32 09                 a2 = t0 if t1 == 0
   117: be b9 09                 i32 a2 = a2 + a4
   120: 78 79                    u8 [a0] = a2
   122: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   125: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   128: 64 ab                    a4 = a3
   130: 52 0a e2                 jump @8 if a3 != 0
      :                          @9
   133: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
   136: 56 27 80 00 27           jump @12 if a0 >u 128
      :                          @10
   141: 9a 9b 81 00              a4 = 0x81 - a2
   145: 64 1a                    a3 = sp
   147: c8 7a 0a                 a3 = a3 + a0
   150: 33 09 02                 a2 = 0x2
   153: 64 87                    a0 = a1
   155: 33 08 40 01 01           a1 = 0x10140
   160: 50 10 04 81 09           ra = 4, jump @189
      :                          @11 [@dyn 2]
   165: 82 10 80 00              ra = u64 [sp + 0x80]
   169: 95 11 88 00              sp = sp + 0x88
   173: 32 00                    ret
      :                          @12
   175: 00                       trap
      :                          @13 [@dyn 3]
   176: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   180: 7b 10 80 00              u64 [sp + 0x80] = ra
   184: 80 89 34                 a2 = u32 [a1 + 0x34]
   187: 84 9a 10                 a3 = a2 & 0x10
   190: 52 0a 16                 jump @16 if a3 != 0
      :                          @14
   193: 84 99 20                 a2 = a2 & 0x20
   196: 52 09 40                 jump @19 if a2 != 0
      :                          @15
   199: 82 77                    a0 = u64 [a0]
   201: 82 10 80 00              ra = u64 [sp + 0x80]
   205: 95 11 88 00              sp = sp + 0x88
   209: 28 29 08                 jump @179
      :                          @16
   212: 82 7b                    a4 = u64 [a0]
   214: 33 09 81 00              a2 = 0x81
   218: 95 17 7f                 a0 = sp + 0x7f
   221: 33 02 57                 t0 = 0x57
   224: 01                       fallthrough
      :                          @17
   225: 64 9c                    a5 = a2
   227: 98 ba 04                 a3 = a4 >> 0x4
   230: 84 bb 0f                 a4 = a4 & 0xf
   233: 88 b3 0a                 t1 = a4 <u 0xa
   236: 33 09 30                 a2 = 0x30
   239: da 32 09                 a2 = t0 if t1 == 0
   242: be b9 09                 i32 a2 = a2 + a4
   245: 78 79                    u8 [a0] = a2
   247: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   250: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   253: 64 ab                    a4 = a3
   255: 52 0a e2                 jump @17 if a3 != 0
      :                          @18
   258: 28 30                    jump @21
      :                          @19
   260: 82 7b                    a4 = u64 [a0]
   262: 33 09 81 00              a2 = 0x81
   266: 95 17 7f                 a0 = sp + 0x7f
   269: 33 02 37                 t0 = 0x37
   272: 01                       fallthrough
      :                          @20
   273: 64 9c                    a5 = a2
   275: 98 ba 04                 a3 = a4 >> 0x4
   278: 84 bb 0f                 a4 = a4 & 0xf
   281: 88 b3 0a                 t1 = a4 <u 0xa
   284: 33 09 30                 a2 = 0x30
   287: da 32 09                 a2 = t0 if t1 == 0
   290: be b9 09                 i32 a2 = a2 + a4
   293: 78 79                    u8 [a0] = a2
   295: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   298: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   301: 64 ab                    a4 = a3
   303: 52 0a e2                 jump @20 if a3 != 0
      :                          @21
   306: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
   309: 56 27 80 00 27           jump @24 if a0 >u 128
      :                          @22
   314: 9a 9b 81 00              a4 = 0x81 - a2
   318: 64 1a                    a3 = sp
   320: c8 7a 0a                 a3 = a3 + a0
   323: 33 09 02                 a2 = 0x2
   326: 64 87                    a0 = a1
   328: 33 08 40 01 01           a1 = 0x10140
   333: 50 10 08 d4 08           ra = 8, jump @189
      :                          @23 [@dyn 4]
   338: 82 10 80 00              ra = u64 [sp + 0x80]
   342: 95 11 88 00              sp = sp + 0x88
   346: 32 00                    ret
      :                          @24
   348: 00                       trap
      :                          @25 [export #0: 'main']
   349: 95 11 08 ff              sp = sp + 0xffffffffffffff08
   353: 7b 10 f0 00              u64 [sp + 0xf0] = ra
   357: 7b 15 e8 00              u64 [sp + 0xe8] = s0
   361: 7b 16 e0 00              u64 [sp + 0xe0] = s1
   365: 49 01 ff ff ef           u64 [sp + 0] = 0xffffffffffefffff
   370: 7b 17 08                 u64 [sp + 0x8] = a0
   373: 55 17 02 97 00           jump @36 if a0 >=u 2
      :                          @26
   378: 48 11 14 01              u32 [sp + 20] = 0x1
   382: 95 17 08                 a0 = sp + 0x8
   385: 7b 17 38                 u64 [sp + 0x38] = a0
   388: 33 07 06                 a0 = 0x6
   391: 7b 17 40                 u64 [sp + 0x40] = a0
   394: 95 17 14                 a0 = sp + 0x14
   397: 7b 17 48                 u64 [sp + 0x48] = a0
   400: 33 07 02                 a0 = 0x2
   403: 7b 17 50                 u64 [sp + 0x50] = a0
   406: 33 07 b8 00 01           a0 = 0x100b8
   411: 7b 17 68                 u64 [sp + 0x68] = a0
   414: 49 11 70 02              u64 [sp + 112] = 0x2
   418: 49 21 88 00              u64 [sp + 136] = 0
   422: 95 17 38                 a0 = sp + 0x38
   425: 7b 17 78                 u64 [sp + 0x78] = a0
   428: 49 21 80 00 02           u64 [sp + 128] = 0x2
   433: 95 17 c8 00              a0 = sp + 0xc8
   437: 95 18 68                 a1 = sp + 0x68
   440: 50 10 0a 28 04           ra = 10, jump @109
      :                          @27 [@dyn 5]
   445: 82 15 d0 00              s0 = u64 [sp + 0xd0]
   449: 82 1b d8 00              a4 = u64 [sp + 0xd8]
   453: 82 16 c8 00              s1 = u64 [sp + 0xc8]
   457: 33 07 02                 a0 = 0x2
   460: 33 08                    a1 = 0
   462: 33 09                    a2 = 0
   464: 64 5a                    a3 = s0
   466: 33 00 0c                 ra = 0xc
   469: 0a 64                    ecalli 100 // 'log'
   471: 01                       fallthrough
      :                          @28 [@dyn 6]
   472: 82 17                    a0 = u64 [sp]
   474: c8 67 07                 a0 = a0 + s1
   477: 53 37 00 00 f0 13 01     jump @44 if a0 <u 4293918720
      :                          @29
   484: 33 07 10 00 03           a0 = 0x30010
   489: 95 77 00 00 10           a0 = a0 + 0x100000
   494: 01                       fallthrough
      :                          @30
   495: 82 78                    a1 = u64 [a0]
   497: c9 87 09                 a2 = a0 - a1
   500: ab 59 fc 00              jump @44 if a2 != s0
      :                          @31
   504: c9 68 09                 a2 = a1 - s1
   507: 01                       fallthrough
      :                          @32
   508: 82 7a                    a3 = u64 [a0]
   510: ab 8a f1                 jump @30 if a3 != a1
      :                          @33
   513: 7b 79                    u64 [a0] = a2
   515: 33 0b                    a4 = 0
   517: 01                       fallthrough
      :                          @34
   518: ab 8a e9                 jump @30 if a3 != a1
      :                          @35
   521: 28 e7 00                 jump @44
      :                          @36
   524: 97 77 0c                 a0 = a0 << 0xc
   527: 14 08 00 e0 fe fe 00 00 00 00 a1 = 0xfefee000
   537: c8 78 08                 a1 = a1 + a0
   540: 7b 18 18                 u64 [sp + 0x18] = a1
   543: 81 88                    a1 = i32 [a1]
   545: 7a 18 24                 u32 [sp + 0x24] = a1
   548: 14 09 00 f0 fe fe 00 00 00 00 a2 = 0xfefef000
   558: c8 97 07                 a0 = a0 + a2
   561: 7b 17 28                 u64 [sp + 0x28] = a0
   564: 81 77                    a0 = i32 [a0]
   566: 7a 17 34                 u32 [sp + 0x34] = a0
   569: be 87 07                 i32 a0 = a0 + a1
   572: 7a 17 14                 u32 [sp + 0x14] = a0
   575: 95 17 08                 a0 = sp + 0x8
   578: 7b 17 68                 u64 [sp + 0x68] = a0
   581: 33 07 06                 a0 = 0x6
   584: 7b 17 70                 u64 [sp + 0x70] = a0
   587: 95 18 24                 a1 = sp + 0x24
   590: 7b 18 78                 u64 [sp + 0x78] = a1
   593: 33 08 02                 a1 = 0x2
   596: 7b 18 80 00              u64 [sp + 0x80] = a1
   600: 95 19 18                 a2 = sp + 0x18
   603: 7b 19 88 00              u64 [sp + 0x88] = a2
   607: 7b 17 90 00              u64 [sp + 0x90] = a0
   611: 95 19 34                 a2 = sp + 0x34
   614: 7b 19 98 00              u64 [sp + 0x98] = a2
   618: 7b 18 a0 00              u64 [sp + 0xa0] = a1
   622: 95 19 28                 a2 = sp + 0x28
   625: 7b 19 a8 00              u64 [sp + 0xa8] = a2
   629: 7b 17 b0 00              u64 [sp + 0xb0] = a0
   633: 95 17 14                 a0 = sp + 0x14
   636: 7b 17 b8 00              u64 [sp + 0xb8] = a0
   640: 7b 18 c0 00              u64 [sp + 0xc0] = a1
   644: 33 07 48 00 01           a0 = 0x10048
   649: 7b 17 38                 u64 [sp + 0x38] = a0
   652: 49 11 40 06              u64 [sp + 64] = 0x6
   656: 49 11 58                 u64 [sp + 88] = 0
   659: 95 18 68                 a1 = sp + 0x68
   662: 7b 18 48                 u64 [sp + 0x48] = a1
   665: 49 11 50 06              u64 [sp + 80] = 0x6
   669: 95 17 c8 00              a0 = sp + 0xc8
   673: 95 18 38                 a1 = sp + 0x38
   676: 50 10 0e 3c 03           ra = 14, jump @109
      :                          @37 [@dyn 7]
   681: 82 15 d0 00              s0 = u64 [sp + 0xd0]
   685: 82 1b d8 00              a4 = u64 [sp + 0xd8]
   689: 82 16 c8 00              s1 = u64 [sp + 0xc8]
   693: 33 07 02                 a0 = 0x2
   696: 33 08                    a1 = 0
   698: 33 09                    a2 = 0
   700: 64 5a                    a3 = s0
   702: 33 00 10                 ra = 0x10
   705: 0a 64                    ecalli 100 // 'log'
   707: 01                       fallthrough
      :                          @38 [@dyn 8]
   708: 82 17                    a0 = u64 [sp]
   710: c8 67 07                 a0 = a0 + s1
   713: 53 37 00 00 f0 27        jump @44 if a0 <u 4293918720
      :                          @39
   719: 33 07 10 00 03           a0 = 0x30010
   724: 95 77 00 00 10           a0 = a0 + 0x100000
   729: 01                       fallthrough
      :                          @40
   730: 82 78                    a1 = u64 [a0]
   732: c9 87 09                 a2 = a0 - a1
   735: ab 59 11                 jump @44 if a2 != s0
      :                          @41
   738: c9 68 09                 a2 = a1 - s1
   741: 01                       fallthrough
      :                          @42
   742: 82 7a                    a3 = u64 [a0]
   744: ab 8a f2                 jump @40 if a3 != a1
      :                          @43
   747: 7b 79                    u64 [a0] = a2
   749: 33 0b                    a4 = 0
   751: 01                       fallthrough
      :                          @44
   752: 81 17 08                 a0 = i32 [sp + 0x8]
   755: 97 77 0c                 a0 = a0 << 0xc
   758: 83 77 00 00 ff fe        i32 a0 = a0 + 0xfffffffffeff0000
   764: 7a 17 28                 u32 [sp + 0x28] = a0
   767: 95 17 28                 a0 = sp + 0x28
   770: 7b 17 38                 u64 [sp + 0x38] = a0
   773: 33 07 02                 a0 = 0x2
   776: 7b 17 40                 u64 [sp + 0x40] = a0
   779: 95 18 14                 a1 = sp + 0x14
   782: 7b 18 48                 u64 [sp + 0x48] = a1
   785: 7b 17 50                 u64 [sp + 0x50] = a0
   788: 33 07 f0 00 01           a0 = 0x100f0
   793: 7b 17 68                 u64 [sp + 0x68] = a0
   796: 49 11 70 02              u64 [sp + 112] = 0x2
   800: 49 21 88 00              u64 [sp + 136] = 0
   804: 95 18 38                 a1 = sp + 0x38
   807: 7b 18 78                 u64 [sp + 0x78] = a1
   810: 49 21 80 00 02           u64 [sp + 128] = 0x2
   815: 95 17 c8 00              a0 = sp + 0xc8
   819: 95 18 68                 a1 = sp + 0x68
   822: 50 10 12 aa 02           ra = 18, jump @109
      :                          @45 [@dyn 9]
   827: 82 15 d0 00              s0 = u64 [sp + 0xd0]
   831: 82 1b d8 00              a4 = u64 [sp + 0xd8]
   835: 82 16 c8 00              s1 = u64 [sp + 0xc8]
   839: 33 07 02                 a0 = 0x2
   842: 33 08                    a1 = 0
   844: 33 09                    a2 = 0
   846: 64 5a                    a3 = s0
   848: 33 00 14                 ra = 0x14
   851: 0a 64                    ecalli 100 // 'log'
   853: 01                       fallthrough
      :                          @46 [@dyn 10]
   854: 82 17                    a0 = u64 [sp]
   856: c8 67 07                 a0 = a0 + s1
   859: 53 37 00 00 f0 27        jump @52 if a0 <u 4293918720
      :                          @47
   865: 33 07 10 00 03           a0 = 0x30010
   870: 95 77 00 00 10           a0 = a0 + 0x100000
   875: 01                       fallthrough
      :                          @48
   876: 82 78                    a1 = u64 [a0]
   878: c9 87 09                 a2 = a0 - a1
   881: ab 59 11                 jump @52 if a2 != s0
      :                          @49
   884: c9 68 09                 a2 = a1 - s1
   887: 01                       fallthrough
      :                          @50
   888: 82 7a                    a3 = u64 [a0]
   890: ab 8a f2                 jump @48 if a3 != a1
      :                          @51
   893: 7b 79                    u64 [a0] = a2
   895: 33 0b                    a4 = 0
   897: 01                       fallthrough
      :                          @52
   898: 80 17 28                 a0 = u32 [sp + 0x28]
   901: 81 18 14                 a1 = i32 [sp + 0x14]
   904: 7a 78                    u32 [a0] = a1
   906: 80 17 28                 a0 = u32 [sp + 0x28]
   909: 33 08 00 10              a1 = 0x1000
   913: 82 10 f0 00              ra = u64 [sp + 0xf0]
   917: 82 15 e8 00              s0 = u64 [sp + 0xe8]
   921: 82 16 e0 00              s1 = u64 [sp + 0xe0]
   925: 95 11 f8 00              sp = sp + 0xf8
   929: 32 00                    ret
      :                          @53
   931: 95 11 b8                 sp = sp + 0xffffffffffffffb8
   934: 7b 10 40                 u64 [sp + 0x40] = ra
   937: 7b 15 38                 u64 [sp + 0x38] = s0
   940: 7b 16 30                 u64 [sp + 0x30] = s1
   943: c8 89 09                 a2 = a2 + a1
   946: ac 89 52                 jump @61 if a2 <u a1
      :                          @54
   949: 64 75                    s0 = a0
   951: 82 77                    a0 = u64 [a0]
   953: 97 78 01                 a1 = a0 << 0x1
   956: 33 0a 08                 a3 = 0x8
   959: e4 a9 09                 a2 = maxu(a2, a3)
   962: e4 98 06                 s1 = maxu(a1, a2)
   965: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
   968: 98 88 3f                 a1 = a1 >> 0x3f
   971: 51 07 12                 jump @56 if a0 == 0
      :                          @55
   974: 82 59 08                 a2 = u64 [s0 + 0x8]
   977: 7b 19 18                 u64 [sp + 0x18] = a2
   980: 49 11 20 01              u64 [sp + 32] = 0x1
   984: 7b 17 28                 u64 [sp + 0x28] = a0
   987: 28 06                    jump @57
      :                          @56
   989: 49 11 20                 u64 [sp + 32] = 0
   992: 01                       fallthrough
      :                          @57
   993: 64 17                    a0 = sp
   995: 95 1a 18                 a3 = sp + 0x18
   998: 64 69                    a2 = s1
  1000: 50 10 16 32              ra = 22, jump @65
      :                          @58 [@dyn 11]
  1004: 82 18                    a1 = u64 [sp]
  1006: 82 17 08                 a0 = u64 [sp + 0x8]
  1009: 51 08 14                 jump @62 if a1 == 0
      :                          @59
  1012: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1022: aa 87 0d                 jump @63 if a0 == a1
      :                          @60
  1025: 52 07 18                 jump @64 if a0 != 0
      :                          @61
  1028: 00                       trap
      :                          @62
  1029: 7b 57 08                 u64 [s0 + 0x8] = a0
  1032: 7b 56                    u64 [s0] = s1
  1034: 01                       fallthrough
      :                          @63
  1035: 82 10 40                 ra = u64 [sp + 0x40]
  1038: 82 15 38                 s0 = u64 [sp + 0x38]
  1041: 82 16 30                 s1 = u64 [sp + 0x30]
  1044: 95 11 48                 sp = sp + 0x48
  1047: 32 00                    ret
      :                          @64
  1049: 00                       trap
      :                          @65
  1050: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  1053: 7b 10 30                 u64 [sp + 0x30] = ra
  1056: 7b 15 28                 u64 [sp + 0x28] = s0
  1059: 7b 16 20                 u64 [sp + 0x20] = s1
  1062: 64 95                    s0 = a2
  1064: 64 72                    t0 = a0
  1066: 51 08 79                 jump @75 if a1 == 0
      :                          @66
  1069: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1072: 51 07 7c                 jump @76 if a0 == 0
      :                          @67
  1075: 82 a9 10                 a2 = u64 [a3 + 0x10]
  1078: 51 09 aa 00              jump @83 if a2 == 0
      :                          @68
  1082: 82 a8                    a1 = u64 [a3]
  1084: 33 06 10 00 03           s1 = 0x30010
  1089: 33 03 00 00 10           t1 = 0x100000
  1094: c8 36 06                 s1 = s1 + t1
  1097: 01                       fallthrough
      :                          @69
  1098: 82 6a                    a3 = u64 [s1]
  1100: c8 5a 07                 a0 = a3 + s0
  1103: ac a7 cf 00              jump @89 if a0 <u a3
      :                          @70
  1107: 95 7b 01                 a4 = a0 + 0x1
  1110: 88 bc 01                 a5 = a4 <u 0x1
  1113: d8 b3 0b                 a4 = t1 <u a4
  1116: d4 cb 0b                 a4 = a4 | a5
  1119: 52 0b bf 00              jump @89 if a4 != 0
      :                          @71
  1123: 82 6b                    a4 = u64 [s1]
  1125: ab ab e5                 jump @69 if a4 != a3
      :                          @72
  1128: 7b 67                    u64 [s1] = a0
  1130: 33 0c                    a5 = 0
  1132: 7b 12 18                 u64 [sp + 0x18] = t0
  1135: 33 0a 10 00 03           a3 = 0x30010
  1140: 33 0b 00 00 10           a4 = 0x100000
  1145: 7b 1a                    u64 [sp] = a3
  1147: c8 ba 0a                 a3 = a3 + a4
  1150: c9 7a 07                 a0 = a3 - a0
  1153: 7b 17 10                 u64 [sp + 0x10] = a0
  1156: 7b 18 08                 u64 [sp + 0x8] = a1
  1159: 64 96                    s1 = a2
  1161: 50 10 18 bb 03           ra = 24, jump @159
      :                          @73 [@dyn 12]
  1166: 54 36 00 00 10 98 00     jump @90 if s1 <=u 1048576
      :                          @74
  1173: 82 12 18                 t0 = u64 [sp + 0x18]
  1176: 82 18 10                 a1 = u64 [sp + 0x10]
  1179: 33 07                    a0 = 0
  1181: 7b 28 08                 u64 [t0 + 0x8] = a1
  1184: 28 b5 00                 jump @96
      :                          @75
  1187: 49 12 08                 u64 [t0 + 8] = 0
  1190: 33 07 01                 a0 = 0x1
  1193: 28 ac 00                 jump @96
      :                          @76
  1196: 33 09 10 00 03           a2 = 0x30010
  1201: 33 07 00 00 10           a0 = 0x100000
  1206: c8 79 09                 a2 = a2 + a0
  1209: 01                       fallthrough
      :                          @77
  1210: 82 9a                    a3 = u64 [a2]
  1212: c8 5a 08                 a1 = a3 + s0
  1215: ac a8 5f                 jump @89 if a1 <u a3
      :                          @78
  1218: 95 8b 01                 a4 = a1 + 0x1
  1221: 88 bc 01                 a5 = a4 <u 0x1
  1224: d8 b7 0b                 a4 = a0 <u a4
  1227: d4 cb 0b                 a4 = a4 | a5
  1230: 52 0b 50                 jump @89 if a4 != 0
      :                          @79
  1233: 82 9b                    a4 = u64 [a2]
  1235: ab ab e7                 jump @77 if a4 != a3
      :                          @80
  1238: 7b 98                    u64 [a2] = a1
  1240: 33 0c                    a5 = 0
  1242: 01                       fallthrough
      :                          @81
  1243: ab ab df                 jump @77 if a4 != a3
      :                          @82
  1246: 28 31                    jump @88
      :                          @83
  1248: 33 09 10 00 03           a2 = 0x30010
  1253: 33 07 00 00 10           a0 = 0x100000
  1258: c8 79 09                 a2 = a2 + a0
  1261: 01                       fallthrough
      :                          @84
  1262: 82 9a                    a3 = u64 [a2]
  1264: c8 5a 08                 a1 = a3 + s0
  1267: ac a8 2b                 jump @89 if a1 <u a3
      :                          @85
  1270: 95 8b 01                 a4 = a1 + 0x1
  1273: 88 bc 01                 a5 = a4 <u 0x1
  1276: d8 b7 0b                 a4 = a0 <u a4
  1279: d4 cb 0b                 a4 = a4 | a5
  1282: 52 0b 1c                 jump @89 if a4 != 0
      :                          @86
  1285: 82 9b                    a4 = u64 [a2]
  1287: ab ab e7                 jump @84 if a4 != a3
      :                          @87
  1290: 7b 98                    u64 [a2] = a1
  1292: 33 0c                    a5 = 0
  1294: 01                       fallthrough
      :                          @88
  1295: 33 07 10 00 13           a0 = 0x130010
  1300: c9 87 08                 a1 = a0 - a1
  1303: 33 07                    a0 = 0
  1305: 7b 28 08                 u64 [t0 + 0x8] = a1
  1308: 28 39                    jump @96
      :                          @89
  1310: 33 07 01                 a0 = 0x1
  1313: 7b 27 08                 u64 [t0 + 0x8] = a0
  1316: 28 31                    jump @96
      :                          @90
  1318: 64 6c                    a5 = s1
  1320: 82 17                    a0 = u64 [sp]
  1322: 95 77 00 00 10           a0 = a0 + 0x100000
  1327: 82 12 18                 t0 = u64 [sp + 0x18]
  1330: 82 16 08                 s1 = u64 [sp + 0x8]
  1333: 01                       fallthrough
      :                          @91
  1334: 82 78                    a1 = u64 [a0]
  1336: c9 87 09                 a2 = a0 - a1
  1339: ab 69 11                 jump @95 if a2 != s1
      :                          @92
  1342: c9 c8 09                 a2 = a1 - a5
  1345: 01                       fallthrough
      :                          @93
  1346: 82 7a                    a3 = u64 [a0]
  1348: ab 8a f2                 jump @91 if a3 != a1
      :                          @94
  1351: 7b 79                    u64 [a0] = a2
  1353: 33 0b                    a4 = 0
  1355: 01                       fallthrough
      :                          @95
  1356: 82 18 10                 a1 = u64 [sp + 0x10]
  1359: 33 07                    a0 = 0
  1361: 7b 28 08                 u64 [t0 + 0x8] = a1
  1364: 01                       fallthrough
      :                          @96
  1365: 7b 25 10                 u64 [t0 + 0x10] = s0
  1368: 7b 27                    u64 [t0] = a0
  1370: 82 10 30                 ra = u64 [sp + 0x30]
  1373: 82 15 28                 s0 = u64 [sp + 0x28]
  1376: 82 16 20                 s1 = u64 [sp + 0x20]
  1379: 95 11 38                 sp = sp + 0x38
  1382: 32 00                    ret
      :                          @97
  1384: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1387: 7b 10 40                 u64 [sp + 0x40] = ra
  1390: 7b 15 38                 u64 [sp + 0x38] = s0
  1393: 7b 16 30                 u64 [sp + 0x30] = s1
  1396: 95 88 01                 a1 = a1 + 0x1
  1399: 51 08 53                 jump @105 if a1 == 0
      :                          @98
  1402: 64 75                    s0 = a0
  1404: 82 77                    a0 = u64 [a0]
  1406: 97 79 01                 a2 = a0 << 0x1
  1409: 33 0a 08                 a3 = 0x8
  1412: e4 a8 08                 a1 = maxu(a1, a3)
  1415: e4 89 06                 s1 = maxu(a2, a1)
  1418: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1421: 98 88 3f                 a1 = a1 >> 0x3f
  1424: 51 07 12                 jump @100 if a0 == 0
      :                          @99
  1427: 82 59 08                 a2 = u64 [s0 + 0x8]
  1430: 7b 19 18                 u64 [sp + 0x18] = a2
  1433: 49 11 20 01              u64 [sp + 32] = 0x1
  1437: 7b 17 28                 u64 [sp + 0x28] = a0
  1440: 28 06                    jump @101
      :                          @100
  1442: 49 11 20                 u64 [sp + 32] = 0
  1445: 01                       fallthrough
      :                          @101
  1446: 64 17                    a0 = sp
  1448: 95 1a 18                 a3 = sp + 0x18
  1451: 64 69                    a2 = s1
  1453: 50 10 1a 6d fe           ra = 26, jump @65
      :                          @102 [@dyn 13]
  1458: 82 18                    a1 = u64 [sp]
  1460: 82 17 08                 a0 = u64 [sp + 0x8]
  1463: 51 08 14                 jump @106 if a1 == 0
      :                          @103
  1466: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1476: aa 87 0d                 jump @107 if a0 == a1
      :                          @104
  1479: 52 07 18                 jump @108 if a0 != 0
      :                          @105
  1482: 00                       trap
      :                          @106
  1483: 7b 57 08                 u64 [s0 + 0x8] = a0
  1486: 7b 56                    u64 [s0] = s1
  1488: 01                       fallthrough
      :                          @107
  1489: 82 10 40                 ra = u64 [sp + 0x40]
  1492: 82 15 38                 s0 = u64 [sp + 0x38]
  1495: 82 16 30                 s1 = u64 [sp + 0x30]
  1498: 95 11 48                 sp = sp + 0x48
  1501: 32 00                    ret
      :                          @108
  1503: 00                       trap
      :                          @109
  1504: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  1507: 7b 10 30                 u64 [sp + 0x30] = ra
  1510: 7b 15 28                 u64 [sp + 0x28] = s0
  1513: 7b 16 20                 u64 [sp + 0x20] = s1
  1516: 82 8a 08                 a3 = u64 [a1 + 0x8]
  1519: 64 75                    s0 = a0
  1521: 51 0a 35                 jump @114 if a3 == 0
      :                          @110
  1524: 82 89                    a2 = u64 [a1]
  1526: 33 07                    a0 = 0
  1528: 95 9b 08                 a4 = a2 + 0x8
  1531: 01                       fallthrough
      :                          @111
  1532: 82 bc                    a5 = u64 [a4]
  1534: c8 c7 07                 a0 = a0 + a5
  1537: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  1540: 95 bb 10                 a4 = a4 + 0x10
  1543: 52 0a f5                 jump @111 if a3 != 0
      :                          @112
  1546: 82 8a 18                 a3 = u64 [a1 + 0x18]
  1549: 51 0a 24                 jump @116 if a3 == 0
      :                          @113
  1552: 82 99 08                 a2 = u64 [a2 + 0x8]
  1555: 8e 99                    a2 = a2 >u 0
  1557: 88 7a 10                 a3 = a0 <u 0x10
  1560: 85 aa 01                 a3 = a3 ^ 0x1
  1563: d4 a9 09                 a2 = a2 | a3
  1566: 89 7a                    a3 = a0 <s 0
  1568: e0 a9 09                 a2 = a2 & ~a3
  1571: 52 09 0a                 jump @115 if a2 != 0
      :                          @114
  1574: 33 07                    a0 = 0
  1576: 33 09 01                 a2 = 0x1
  1579: 28 4a                    jump @124
      :                          @115
  1581: 97 77 01                 a0 = a0 << 0x1
  1584: 01                       fallthrough
      :                          @116
  1585: 51 07 40                 jump @123 if a0 == 0
      :                          @117
  1588: 57 07 73                 jump @129 if a0 <s 0
      :                          @118
  1591: 64 52                    t0 = s0
  1593: 33 0b 10 00 03           a4 = 0x30010
  1598: 33 09 00 00 10           a2 = 0x100000
  1603: c8 9b 0b                 a4 = a4 + a2
  1606: 01                       fallthrough
      :                          @119
  1607: 82 bc                    a5 = u64 [a4]
  1609: c8 7c 0a                 a3 = a5 + a0
  1612: ac ca 59                 jump @127 if a3 <u a5
      :                          @120
  1615: 95 a5 01                 s0 = a3 + 0x1
  1618: 88 56 01                 s1 = s0 <u 0x1
  1621: d8 59 05                 s0 = a2 <u s0
  1624: d4 65 05                 s0 = s0 | s1
  1627: 52 05 4a                 jump @127 if s0 != 0
      :                          @121
  1630: 82 b6                    s1 = u64 [a4]
  1632: ab c6 e7                 jump @119 if s1 != a5
      :                          @122
  1635: 7b ba                    u64 [a4] = a3
  1637: 33 09 10 00 13           a2 = 0x130010
  1642: c9 a9 09                 a2 = a2 - a3
  1645: 64 25                    s0 = t0
  1647: 28 06                    jump @124
      :                          @123
  1649: 33 09 01                 a2 = 0x1
  1652: 01                       fallthrough
      :                          @124
  1653: 7b 17                    u64 [sp] = a0
  1655: 7b 19 08                 u64 [sp + 0x8] = a2
  1658: 49 11 10                 u64 [sp + 16] = 0
  1661: 64 17                    a0 = sp
  1663: 50 10 1c 11 06           ra = 28, jump @241
      :                          @125 [@dyn 14]
  1668: 52 07 22                 jump @128 if a0 != 0
      :                          @126
  1671: 82 17 10                 a0 = u64 [sp + 0x10]
  1674: 82 18 08                 a1 = u64 [sp + 0x8]
  1677: 82 19                    a2 = u64 [sp]
  1679: 7b 57 10                 u64 [s0 + 0x10] = a0
  1682: 7b 58 08                 u64 [s0 + 0x8] = a1
  1685: 7b 59                    u64 [s0] = a2
  1687: 82 10 30                 ra = u64 [sp + 0x30]
  1690: 82 15 28                 s0 = u64 [sp + 0x28]
  1693: 82 16 20                 s1 = u64 [sp + 0x20]
  1696: 95 11 38                 sp = sp + 0x38
  1699: 32 00                    ret
      :                          @127
  1701: 00                       trap
      :                          @128
  1702: 00                       trap
      :                          @129
  1703: 00                       trap
      :                          @130 [@dyn 15]
  1704: 82 72                    t0 = u64 [a0]
  1706: 33 09 00 00 f0           a2 = 0xfffffffffff00000
  1711: 95 2a ff ff ef           a3 = t0 + 0xffffffffffefffff
  1716: ac 9a 28                 jump @136 if a3 <u a2
      :                          @131
  1719: 82 77 08                 a0 = u64 [a0 + 0x8]
  1722: 33 09 10 00 03           a2 = 0x30010
  1727: 95 99 00 00 10           a2 = a2 + 0x100000
  1732: 01                       fallthrough
      :                          @132
  1733: 82 9a                    a3 = u64 [a2]
  1735: c9 a9 0b                 a4 = a2 - a3
  1738: ab 7b 12                 jump @136 if a4 != a0
      :                          @133
  1741: c9 2a 0b                 a4 = a3 - t0
  1744: 01                       fallthrough
      :                          @134
  1745: 82 9c                    a5 = u64 [a2]
  1747: ab ac f2                 jump @132 if a5 != a3
      :                          @135
  1750: 7b 9b                    u64 [a2] = a4
  1752: 33 08                    a1 = 0
  1754: 32 00                    ret
      :                          @136
  1756: 32 00                    ret
      :                          @137 [@dyn 16]
  1758: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  1761: 7b 10 18                 u64 [sp + 0x18] = ra
  1764: 7b 15 10                 u64 [sp + 0x10] = s0
  1767: 7b 16 08                 u64 [sp + 0x8] = s1
  1770: 64 75                    s0 = a0
  1772: 82 7a 10                 a3 = u64 [a0 + 0x10]
  1775: 82 77                    a0 = u64 [a0]
  1777: c9 a7 07                 a0 = a0 - a3
  1780: 64 96                    s1 = a2
  1782: ac 97 2a                 jump @140 if a0 <u a2
      :                          @138
  1785: 7b 1a                    u64 [sp] = a3
  1787: 82 57 08                 a0 = u64 [s0 + 0x8]
  1790: c8 a7 07                 a0 = a0 + a3
  1793: 64 69                    a2 = s1
  1795: 50 10 22 41 01           ra = 34, jump @159
      :                          @139 [@dyn 17]
  1800: 82 17                    a0 = u64 [sp]
  1802: c8 76 06                 s1 = s1 + a0
  1805: 7b 56 10                 u64 [s0 + 0x10] = s1
  1808: 33 07                    a0 = 0
  1810: 82 10 18                 ra = u64 [sp + 0x18]
  1813: 82 15 10                 s0 = u64 [sp + 0x10]
  1816: 82 16 08                 s1 = u64 [sp + 0x8]
  1819: 95 11 20                 sp = sp + 0x20
  1822: 32 00                    ret
      :                          @140
  1824: 64 57                    a0 = s0
  1826: 7b 18                    u64 [sp] = a1
  1828: 64 a8                    a1 = a3
  1830: 64 69                    a2 = s1
  1832: 50 10 24 7b fc           ra = 36, jump @53
      :                          @141 [@dyn 18]
  1837: 82 18                    a1 = u64 [sp]
  1839: 82 5a 10                 a3 = u64 [s0 + 0x10]
  1842: 28 c7                    jump @138
      :                          @142 [@dyn 19]
  1844: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  1847: 7b 10 20                 u64 [sp + 0x20] = ra
  1850: 7b 15 18                 u64 [sp + 0x18] = s0
  1853: 7b 16 10                 u64 [sp + 0x10] = s1
  1856: 64 86                    s1 = a1
  1858: 83 88                    i32 a1 = a1 + 0
  1860: 33 09 80 00              a2 = 0x80
  1864: 64 7a                    a3 = a0
  1866: ae 98 2b                 jump @147 if a1 >=u a2
      :                          @143
  1869: 82 a8 10                 a1 = u64 [a3 + 0x10]
  1872: 82 a7                    a0 = u64 [a3]
  1874: ab 78 12                 jump @146 if a1 != a0
      :                          @144
  1877: 64 a7                    a0 = a3
  1879: 64 a5                    s0 = a3
  1881: 50 10 28 0f fe           ra = 40, jump @97
      :                          @145 [@dyn 20]
  1886: 64 5a                    a3 = s0
  1888: 82 58 10                 a1 = u64 [s0 + 0x10]
  1891: 01                       fallthrough
      :                          @146
  1892: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1895: c8 87 07                 a0 = a0 + a1
  1898: 78 76                    u8 [a0] = s1
  1900: 95 88 01                 a1 = a1 + 0x1
  1903: 7b a8 10                 u64 [a3 + 0x10] = a1
  1906: 28 ab 00                 jump @155
      :                          @147
  1909: 8b 67 0b                 i32 a0 = s1 >> 0xb
  1912: 48 11 0c                 u32 [sp + 12] = 0
  1915: 52 07 1c                 jump @149 if a0 != 0
      :                          @148
  1918: 98 67 06                 a0 = s1 >> 0x6
  1921: 86 77 c0 00              a0 = a0 | 0xc0
  1925: 78 17 0c                 u8 [sp + 0xc] = a0
  1928: 84 67 3f                 a0 = s1 & 0x3f
  1931: 86 77 80 00              a0 = a0 | 0x80
  1935: 78 17 0d                 u8 [sp + 0xd] = a0
  1938: 33 06 02                 s1 = 0x2
  1941: 28 63                    jump @152
      :                          @149
  1943: 8b 67 10                 i32 a0 = s1 >> 0x10
  1946: 52 07 29                 jump @151 if a0 != 0
      :                          @150
  1949: 98 67 0c                 a0 = s1 >> 0xc
  1952: 86 77 e0 00              a0 = a0 | 0xe0
  1956: 78 17 0c                 u8 [sp + 0xc] = a0
  1959: 97 67 34                 a0 = s1 << 0x34
  1962: 98 77 3a                 a0 = a0 >> 0x3a
  1965: 95 77 80 00              a0 = a0 + 0x80
  1969: 78 17 0d                 u8 [sp + 0xd] = a0
  1972: 84 67 3f                 a0 = s1 & 0x3f
  1975: 86 77 80 00              a0 = a0 | 0x80
  1979: 78 17 0e                 u8 [sp + 0xe] = a0
  1982: 33 06 03                 s1 = 0x3
  1985: 28 37                    jump @152
      :                          @151
  1987: 97 67 2b                 a0 = s1 << 0x2b
  1990: 98 77 3d                 a0 = a0 >> 0x3d
  1993: 95 77 f0 00              a0 = a0 + 0xf0
  1997: 78 17 0c                 u8 [sp + 0xc] = a0
  2000: 97 67 2e                 a0 = s1 << 0x2e
  2003: 98 77 3a                 a0 = a0 >> 0x3a
  2006: 95 77 80 00              a0 = a0 + 0x80
  2010: 78 17 0d                 u8 [sp + 0xd] = a0
  2013: 97 67 34                 a0 = s1 << 0x34
  2016: 98 77 3a                 a0 = a0 >> 0x3a
  2019: 95 77 80 00              a0 = a0 + 0x80
  2023: 78 17 0e                 u8 [sp + 0xe] = a0
  2026: 84 67 3f                 a0 = s1 & 0x3f
  2029: 86 77 80 00              a0 = a0 | 0x80
  2033: 78 17 0f                 u8 [sp + 0xf] = a0
  2036: 33 06 04                 s1 = 0x4
  2039: 01                       fallthrough
      :                          @152
  2040: 82 a5 10                 s0 = u64 [a3 + 0x10]
  2043: 82 a7                    a0 = u64 [a3]
  2045: c9 57 07                 a0 = a0 - s0
  2048: ac 67 2d                 jump @156 if a0 <u s1
      :                          @153
  2051: 7b 1a                    u64 [sp] = a3
  2053: 82 a7 08                 a0 = u64 [a3 + 0x8]
  2056: c8 57 07                 a0 = a0 + s0
  2059: 95 18 0c                 a1 = sp + 0xc
  2062: 64 69                    a2 = s1
  2064: 50 10 2a 34              ra = 42, jump @159
      :                          @154 [@dyn 21]
  2068: c8 56 06                 s1 = s1 + s0
  2071: 82 17                    a0 = u64 [sp]
  2073: 7b 76 10                 u64 [a0 + 0x10] = s1
  2076: 01                       fallthrough
      :                          @155
  2077: 33 07                    a0 = 0
  2079: 82 10 20                 ra = u64 [sp + 0x20]
  2082: 82 15 18                 s0 = u64 [sp + 0x18]
  2085: 82 16 10                 s1 = u64 [sp + 0x10]
  2088: 95 11 28                 sp = sp + 0x28
  2091: 32 00                    ret
      :                          @156
  2093: 64 a7                    a0 = a3
  2095: 64 58                    a1 = s0
  2097: 64 69                    a2 = s1
  2099: 64 a5                    s0 = a3
  2101: 50 10 2c 6e fb           ra = 44, jump @53
      :                          @157 [@dyn 22]
  2106: 64 5a                    a3 = s0
  2108: 82 55 10                 s0 = u64 [s0 + 0x10]
  2111: 28 c4                    jump @153
      :                          @158 [@dyn 23]
  2113: 28 4f 04                 jump @241
      :                          @159
  2116: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  2119: 7b 10 18                 u64 [sp + 0x18] = ra
  2122: 7b 15 10                 u64 [sp + 0x10] = s0
  2125: 7b 16 08                 u64 [sp + 0x8] = s1
  2128: 53 19 10 64              jump @168 if a2 <u 16
      :                          @160
  2132: 8d 7a                    i32 a3 = -a0
  2134: 84 a2 07                 t0 = a3 & 0x7
  2137: c8 27 0b                 a4 = a0 + t0
  2140: 51 02 15                 jump @163 if t0 == 0
      :                          @161
  2143: 64 8c                    a5 = a1
  2145: 64 75                    s0 = a0
  2147: 01                       fallthrough
      :                          @162
  2148: 7c ca                    a3 = u8 [a5]
  2150: 78 5a                    u8 [s0] = a3
  2152: 95 55 01                 s0 = s0 + 0x1
  2155: 95 cc 01                 a5 = a5 + 0x1
  2158: ac b5 f6                 jump @162 if s0 <u a4
      :                          @163
  2161: c8 28 03                 t1 = a1 + t0
  2164: c9 29 02                 t0 = a2 - t0
  2167: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  2170: 84 38 07                 a1 = t1 & 0x7
  2173: c8 4b 0a                 a3 = a4 + t2
  2176: 51 08 3b                 jump @170 if a1 == 0
      :                          @164
  2179: 58 04 4b                 jump @173 if t2 <=s 0
      :                          @165
  2182: 97 38 03                 a1 = t1 << 0x3
  2185: 84 80 38                 ra = a1 & 0x38
  2188: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  2191: 82 c5                    s0 = u64 [a5]
  2193: 8d 88                    i32 a1 = -a1
  2195: 84 88 38                 a1 = a1 & 0x38
  2198: 95 cc 08                 a5 = a5 + 0x8
  2201: 01                       fallthrough
      :                          @166
  2202: 82 c6                    s1 = u64 [a5]
  2204: d0 05 05                 s0 = s0 >> ra
  2207: cf 86 09                 a2 = s1 << a1
  2210: d4 59 09                 a2 = a2 | s0
  2213: 7b b9                    u64 [a4] = a2
  2215: 95 bb 08                 a4 = a4 + 0x8
  2218: 95 cc 08                 a5 = a5 + 0x8
  2221: 64 65                    s0 = s1
  2223: ac ab eb                 jump @166 if a4 <u a3
      :                          @167
  2226: 28 1c                    jump @173
      :                          @168
  2228: 64 7a                    a3 = a0
  2230: 52 09 21                 jump @174 if a2 != 0
      :                          @169
  2233: 28 2f                    jump @176
      :                          @170
  2235: 58 04 13                 jump @173 if t2 <=s 0
      :                          @171
  2238: 64 38                    a1 = t1
  2240: 01                       fallthrough
      :                          @172
  2241: 82 89                    a2 = u64 [a1]
  2243: 7b b9                    u64 [a4] = a2
  2245: 95 bb 08                 a4 = a4 + 0x8
  2248: 95 88 08                 a1 = a1 + 0x8
  2251: ac ab f6                 jump @172 if a4 <u a3
      :                          @173
  2254: c8 43 08                 a1 = t1 + t2
  2257: 84 29 07                 a2 = t0 & 0x7
  2260: 51 09 14                 jump @176 if a2 == 0
      :                          @174
  2263: c8 a9 09                 a2 = a2 + a3
  2266: 01                       fallthrough
      :                          @175
  2267: 7c 8b                    a4 = u8 [a1]
  2269: 78 ab                    u8 [a3] = a4
  2271: 95 aa 01                 a3 = a3 + 0x1
  2274: 95 88 01                 a1 = a1 + 0x1
  2277: ac 9a f6                 jump @175 if a3 <u a2
      :                          @176
  2280: 82 10 18                 ra = u64 [sp + 0x18]
  2283: 82 15 10                 s0 = u64 [sp + 0x10]
  2286: 82 16 08                 s1 = u64 [sp + 0x8]
  2289: 95 11 20                 sp = sp + 0x20
  2292: 32 00                    ret
      :                          @177 [@dyn 24]
  2294: 82 77                    a0 = u64 [a0]
  2296: 01                       fallthrough
      :                          @178
  2297: 28                       jump @178
      :                          @179
  2298: 95 11 a8                 sp = sp + 0xffffffffffffffa8
  2301: 7b 10 50                 u64 [sp + 0x50] = ra
  2304: 7b 15 48                 u64 [sp + 0x48] = s0
  2307: 7b 16 40                 u64 [sp + 0x40] = s1
  2310: 7b 18                    u64 [sp] = a1
  2312: 98 79 04                 a2 = a0 >> 0x4
  2315: 33 08 27                 a1 = 0x27
  2318: 53 29 71 02 81 00        jump @182 if a2 <u 625
      :                          @180
  2324: 33 08 27                 a1 = 0x27
  2327: 95 1a 3e                 a3 = sp + 0x3e
  2330: 3a 09 00 00 03           a2 = u64 [0x30000]
  2335: 7b 19 10                 u64 [sp + 0x10] = a2
  2338: 49 11 08 f0 d8 00        u64 [sp + 8] = 0xd8f0
  2344: 33 04 7b 14              t2 = 0x147b
  2348: 33 0b 42 01 01           a4 = 0x10142
  2353: 33 00 ff e0 f5 05        ra = 0x5f5e0ff
  2359: 01                       fallthrough
      :                          @181
  2360: 64 72                    t0 = a0
  2362: 82 17 10                 a0 = u64 [sp + 0x10]
  2365: d6 72 07                 a0 = t0 mulhu a0
  2368: 98 77 0b                 a0 = a0 >> 0xb
  2371: 82 19 08                 a2 = u64 [sp + 0x8]
  2374: c0 97 0c                 i32 a5 = a0 * a2
  2377: c8 2c 06                 s1 = a5 + t0
  2380: 97 6c 30                 a5 = s1 << 0x30
  2383: 98 cc 32                 a5 = a5 >> 0x32
  2386: ca 4c 0c                 a5 = a5 * t2
  2389: 98 c3 11                 t1 = a5 >> 0x11
  2392: 98 cc 10                 a5 = a5 >> 0x10
  2395: 84 cc fe 07              a5 = a5 & 0x7fe
  2399: 96 39 9c                 a2 = t1 * 0xffffffffffffff9c
  2402: c8 69 09                 a2 = a2 + s1
  2405: 97 99 31                 a2 = a2 << 0x31
  2408: 98 99 30                 a2 = a2 >> 0x30
  2411: c8 bc 0c                 a5 = a5 + a4
  2414: 7c c6                    s1 = u8 [a5]
  2416: 7c cc 01                 a5 = u8 [a5 + 0x1]
  2419: c8 b9 09                 a2 = a2 + a4
  2422: 7c 95 01                 s0 = u8 [a2 + 0x1]
  2425: 7c 99                    a2 = u8 [a2]
  2427: 78 ac ff                 u8 [a3 + 0xffffffffffffffff] = a5
  2430: 78 a6 fe                 u8 [a3 + 0xfffffffffffffffe] = s1
  2433: 78 a5 01                 u8 [a3 + 0x1] = s0
  2436: 78 a9                    u8 [a3] = a2
  2438: 95 88 fc                 a1 = a1 + 0xfffffffffffffffc
  2441: 95 aa fc                 a3 = a3 + 0xfffffffffffffffc
  2444: ac 20 ac                 jump @181 if ra <u t0
      :                          @182
  2447: 54 17 63 3b              jump @184 if a0 <=u 99
      :                          @183
  2451: 97 79 30                 a2 = a0 << 0x30
  2454: 98 99 32                 a2 = a2 >> 0x32
  2457: 96 99 7b 14              a2 = a2 * 0x147b
  2461: 98 99 11                 a2 = a2 >> 0x11
  2464: 96 9a 9c                 a3 = a2 * 0xffffffffffffff9c
  2467: c8 a7 07                 a0 = a0 + a3
  2470: 97 77 31                 a0 = a0 << 0x31
  2473: 98 77 30                 a0 = a0 >> 0x30
  2476: 95 88 fe                 a1 = a1 + 0xfffffffffffffffe
  2479: 33 0a 42 01 01           a3 = 0x10142
  2484: c8 a7 07                 a0 = a0 + a3
  2487: 7c 7a 01                 a3 = u8 [a0 + 0x1]
  2490: 7c 77                    a0 = u8 [a0]
  2492: 95 1b 19                 a4 = sp + 0x19
  2495: c8 8b 0b                 a4 = a4 + a1
  2498: 78 ba 01                 u8 [a4 + 0x1] = a3
  2501: 78 b7                    u8 [a4] = a0
  2503: 64 97                    a0 = a2
  2505: 01                       fallthrough
      :                          @184
  2506: 55 17 0a 14              jump @186 if a0 >=u 10
      :                          @185
  2510: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
  2513: 95 19 19                 a2 = sp + 0x19
  2516: c8 89 09                 a2 = a2 + a1
  2519: 83 77 30                 i32 a0 = a0 + 0x30
  2522: 78 97                    u8 [a2] = a0
  2524: 28 21                    jump @187
      :                          @186
  2526: 97 77 01                 a0 = a0 << 0x1
  2529: 95 88 fe                 a1 = a1 + 0xfffffffffffffffe
  2532: 33 09 42 01 01           a2 = 0x10142
  2537: c8 97 07                 a0 = a0 + a2
  2540: 7c 79 01                 a2 = u8 [a0 + 0x1]
  2543: 7c 77                    a0 = u8 [a0]
  2545: 95 1a 19                 a3 = sp + 0x19
  2548: c8 8a 0a                 a3 = a3 + a1
  2551: 78 a9 01                 u8 [a3 + 0x1] = a2
  2554: 78 a7                    u8 [a3] = a0
  2556: 01                       fallthrough
      :                          @187
  2557: 95 1a 19                 a3 = sp + 0x19
  2560: c8 8a 0a                 a3 = a3 + a1
  2563: 9a 8b 27                 a4 = 0x27 - a1
  2566: 33 08 40 01 01           a1 = 0x10140
  2571: 82 17                    a0 = u64 [sp]
  2573: 33 09                    a2 = 0
  2575: 50 10 32 12              ra = 50, jump @189
      :                          @188 [@dyn 25]
  2579: 82 10 50                 ra = u64 [sp + 0x50]
  2582: 82 15 48                 s0 = u64 [sp + 0x48]
  2585: 82 16 40                 s1 = u64 [sp + 0x40]
  2588: 95 11 58                 sp = sp + 0x58
  2591: 32 00                    ret
      :                          @189
  2593: 95 11 98                 sp = sp + 0xffffffffffffff98
  2596: 7b 10 60                 u64 [sp + 0x60] = ra
  2599: 7b 15 58                 u64 [sp + 0x58] = s0
  2602: 7b 16 50                 u64 [sp + 0x50] = s1
  2605: 80 73 34                 t1 = u32 [a0 + 0x34]
  2608: 7b 1a 20                 u64 [sp + 0x20] = a3
  2611: 64 9c                    a5 = a2
  2613: 84 36 01                 s1 = t1 & 0x1
  2616: 33 02 2b                 t0 = 0x2b
  2619: 33 09 00 00 11           a2 = 0x110000
  2624: 84 3a 04                 a3 = t1 & 0x4
  2627: 7b 1b 28                 u64 [sp + 0x28] = a4
  2630: c8 b6 04                 t2 = s1 + a4
  2633: 7b 1c 30                 u64 [sp + 0x30] = a5
  2636: 52 0a 10                 jump @192 if a3 != 0
      :                          @190
  2639: 49 11 38                 u64 [sp + 56] = 0
  2642: 82 78                    a1 = u64 [a0]
  2644: 94 69 2b                 a2 = 0x2b if s1 != 0
  2647: 52 08 35                 jump @196 if a1 != 0
      :                          @191
  2650: 28 56                    jump @201
      :                          @192
  2652: 7b 18 38                 u64 [sp + 0x38] = a1
  2655: 33 09                    a2 = 0
  2657: 51 0c 1b                 jump @195 if a5 == 0
      :                          @193
  2660: 82 1b 38                 a4 = u64 [sp + 0x38]
  2663: 01                       fallthrough
      :                          @194
  2664: 7d b5                    s0 = i8 [a4]
  2666: 89 55 c0                 s0 = s0 <s 0xffffffffffffffc0
  2669: 85 5a 01                 a3 = s0 ^ 0x1
  2672: c8 a9 09                 a2 = a2 + a3
  2675: 95 cc ff                 a5 = a5 + 0xffffffffffffffff
  2678: 95 bb 01                 a4 = a4 + 0x1
  2681: 52 0c ef                 jump @194 if a5 != 0
      :                          @195
  2684: c8 94 04                 t2 = t2 + a2
  2687: 33 09 00 00 11           a2 = 0x110000
  2692: 82 78                    a1 = u64 [a0]
  2694: db 62 09                 a2 = t0 if s1 != 0
  2697: 51 08 27                 jump @201 if a1 == 0
      :                          @196
  2700: 82 7a 08                 a3 = u64 [a0 + 0x8]
  2703: ae a4 21                 jump @201 if t2 >=u a3
      :                          @197
  2706: 84 38 08                 a1 = t1 & 0x8
  2709: 52 08 50                 jump @204 if a1 != 0
      :                          @198
  2712: 7c 76 38                 s1 = u8 [a0 + 0x38]
  2715: c9 4a 0a                 a3 = a3 - t2
  2718: 7b 19 18                 u64 [sp + 0x18] = a2
  2721: 5a 16 01 9d 00           jump @211 if s1 >s 1
      :                          @199
  2726: 52 06 aa 00              jump @213 if s1 != 0
      :                          @200
  2730: 7b 1a 10                 u64 [sp + 0x10] = a3
  2733: 28 a9 00                 jump @214
      :                          @201
  2736: 82 75 20                 s0 = u64 [a0 + 0x20]
  2739: 82 76 28                 s1 = u64 [a0 + 0x28]
  2742: 64 57                    a0 = s0
  2744: 64 68                    a1 = s1
  2746: 82 1a 38                 a3 = u64 [sp + 0x38]
  2749: 82 1b 30                 a4 = u64 [sp + 0x30]
  2752: 50 10 34 6c 01           ra = 52, jump @234
      :                          @202 [@dyn 26]
  2757: 33 08 01                 a1 = 0x1
  2760: 52 07 bb 00              jump @219 if a0 != 0
      :                          @203
  2764: 82 6c 18                 a5 = u64 [s1 + 0x18]
  2767: 64 57                    a0 = s0
  2769: 82 18 20                 a1 = u64 [sp + 0x20]
  2772: 82 19 28                 a2 = u64 [sp + 0x28]
  2775: 82 10 60                 ra = u64 [sp + 0x60]
  2778: 82 15 58                 s0 = u64 [sp + 0x58]
  2781: 82 16 50                 s1 = u64 [sp + 0x50]
  2784: 95 11 68                 sp = sp + 0x68
  2787: 32 0c                    jump [a5]
      :                          @204
  2789: 7b 1a 40                 u64 [sp + 0x40] = a3
  2792: 64 45                    s0 = t2
  2794: 81 78 30                 a1 = i32 [a0 + 0x30]
  2797: 7b 18 10                 u64 [sp + 0x10] = a1
  2800: 7c 7a 38                 a3 = u8 [a0 + 0x38]
  2803: 7b 1a 08                 u64 [sp + 0x8] = a3
  2806: 82 7a 20                 a3 = u64 [a0 + 0x20]
  2809: 82 78 28                 a1 = u64 [a0 + 0x28]
  2812: 48 17 30 30              u32 [a0 + 48] = 0x30
  2816: 7b 17                    u64 [sp] = a0
  2818: 46 17 38 01              u8 [a0 + 56] = 0x1
  2822: 7b 1a 48                 u64 [sp + 0x48] = a3
  2825: 64 a7                    a0 = a3
  2827: 64 86                    s1 = a1
  2829: 82 1a 38                 a3 = u64 [sp + 0x38]
  2832: 82 1b 30                 a4 = u64 [sp + 0x30]
  2835: 50 10 36 19 01           ra = 54, jump @234
      :                          @205 [@dyn 27]
  2840: 52 07 67                 jump @218 if a0 != 0
      :                          @206
  2843: 82 17 40                 a0 = u64 [sp + 0x40]
  2846: c9 57 05                 s0 = a0 - s0
  2849: 95 55 01                 s0 = s0 + 0x1
  2852: 01                       fallthrough
      :                          @207
  2853: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  2856: 51 05 c6 00              jump @229 if s0 == 0
      :                          @208
  2860: 82 69 20                 a2 = u64 [s1 + 0x20]
  2863: 33 08 30                 a1 = 0x30
  2866: 82 17 48                 a0 = u64 [sp + 0x48]
  2869: b4 90 01 38              ra = 56, jump [a2]
      :                          @209 [@dyn 28]
  2873: 51 07 ec                 jump @207 if a0 == 0
      :                          @210
  2876: 28 43                    jump @218
      :                          @211
  2878: 52 16 02 12              jump @213 if s1 != 2
      :                          @212
  2882: 98 a6 01                 s1 = a3 >> 0x1
  2885: 95 a8 01                 a1 = a3 + 0x1
  2888: 98 88 01                 a1 = a1 >> 0x1
  2891: 7b 18 10                 u64 [sp + 0x10] = a1
  2894: 28 08                    jump @214
      :                          @213
  2896: 64 a6                    s1 = a3
  2898: 49 11 10                 u64 [sp + 16] = 0
  2901: 01                       fallthrough
      :                          @214
  2902: 82 78 20                 a1 = u64 [a0 + 0x20]
  2905: 7b 18 48                 u64 [sp + 0x48] = a1
  2908: 82 75 28                 s0 = u64 [a0 + 0x28]
  2911: 81 77 30                 a0 = i32 [a0 + 0x30]
  2914: 7b 17 40                 u64 [sp + 0x40] = a0
  2917: 95 66 01                 s1 = s1 + 0x1
  2920: 01                       fallthrough
      :                          @215
  2921: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
  2924: 51 06 27                 jump @220 if s1 == 0
      :                          @216
  2927: 82 59 20                 a2 = u64 [s0 + 0x20]
  2930: 82 17 48                 a0 = u64 [sp + 0x48]
  2933: 82 18 40                 a1 = u64 [sp + 0x40]
  2936: b4 90 01 3a              ra = 58, jump [a2]
      :                          @217 [@dyn 29]
  2940: 51 07 ed                 jump @215 if a0 == 0
      :                          @218
  2943: 33 08 01                 a1 = 0x1
  2946: 01                       fallthrough
      :                          @219
  2947: 64 87                    a0 = a1
  2949: 82 10 60                 ra = u64 [sp + 0x60]
  2952: 82 15 58                 s0 = u64 [sp + 0x58]
  2955: 82 16 50                 s1 = u64 [sp + 0x50]
  2958: 95 11 68                 sp = sp + 0x68
  2961: 32 00                    ret
      :                          @220
  2963: 82 16 48                 s1 = u64 [sp + 0x48]
  2966: 64 67                    a0 = s1
  2968: 64 58                    a1 = s0
  2970: 82 19 18                 a2 = u64 [sp + 0x18]
  2973: 82 1a 38                 a3 = u64 [sp + 0x38]
  2976: 82 1b 30                 a4 = u64 [sp + 0x30]
  2979: 50 10 3c 89 00           ra = 60, jump @234
      :                          @221 [@dyn 30]
  2984: 33 08 01                 a1 = 0x1
  2987: 52 07 d8                 jump @219 if a0 != 0
      :                          @222
  2990: 82 5a 18                 a3 = u64 [s0 + 0x18]
  2993: 64 67                    a0 = s1
  2995: 82 18 20                 a1 = u64 [sp + 0x20]
  2998: 82 19 28                 a2 = u64 [sp + 0x28]
  3001: b4 a0 01 3e              ra = 62, jump [a3]
      :                          @223 [@dyn 31]
  3005: 33 08 01                 a1 = 0x1
  3008: 52 07 c3                 jump @219 if a0 != 0
      :                          @224
  3011: 82 17 10                 a0 = u64 [sp + 0x10]
  3014: 9a 77                    a0 = -a0
  3016: 7b 17 38                 u64 [sp + 0x38] = a0
  3019: 33 06 ff                 s1 = 0xffffffffffffffff
  3022: 01                       fallthrough
      :                          @225
  3023: 82 17 38                 a0 = u64 [sp + 0x38]
  3026: c8 67 07                 a0 = a0 + s1
  3029: 51 17 ff 42              jump @232 if a0 == 4294967295
      :                          @226
  3033: 82 59 20                 a2 = u64 [s0 + 0x20]
  3036: 82 17 48                 a0 = u64 [sp + 0x48]
  3039: 82 18 40                 a1 = u64 [sp + 0x40]
  3042: b4 90 01 40              ra = 64, jump [a2]
      :                          @227 [@dyn 32]
  3046: 95 66 01                 s1 = s1 + 0x1
  3049: 51 07 e6                 jump @225 if a0 == 0
      :                          @228
  3052: 28 37                    jump @233
      :                          @229
  3054: 82 6a 18                 a3 = u64 [s1 + 0x18]
  3057: 82 17 48                 a0 = u64 [sp + 0x48]
  3060: 82 18 20                 a1 = u64 [sp + 0x20]
  3063: 82 19 28                 a2 = u64 [sp + 0x28]
  3066: b4 a0 01 42              ra = 66, jump [a3]
      :                          @230 [@dyn 33]
  3070: 33 08 01                 a1 = 0x1
  3073: 52 07 82                 jump @219 if a0 != 0
      :                          @231
  3076: 33 08                    a1 = 0
  3078: 82 16                    s1 = u64 [sp]
  3080: 82 17 10                 a0 = u64 [sp + 0x10]
  3083: 7a 67 30                 u32 [s1 + 0x30] = a0
  3086: 82 17 08                 a0 = u64 [sp + 0x8]
  3089: 78 67 38                 u8 [s1 + 0x38] = a0
  3092: 28 6f ff                 jump @219
      :                          @232
  3095: 82 16 10                 s1 = u64 [sp + 0x10]
  3098: 82 17 10                 a0 = u64 [sp + 0x10]
  3101: d8 76 08                 a1 = s1 <u a0
  3104: 28 63 ff                 jump @219
      :                          @233
  3107: 82 17 10                 a0 = u64 [sp + 0x10]
  3110: d8 76 08                 a1 = s1 <u a0
  3113: 28 5a ff                 jump @219
      :                          @234
  3116: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  3119: 7b 10 20                 u64 [sp + 0x20] = ra
  3122: 7b 15 18                 u64 [sp + 0x18] = s0
  3125: 7b 16 10                 u64 [sp + 0x10] = s1
  3128: 83 9c                    i32 a5 = a2 + 0
  3130: 33 02 00 00 11           t0 = 0x110000
  3135: 64 a6                    s1 = a3
  3137: 64 85                    s0 = a1
  3139: 64 7a                    a3 = a0
  3141: aa 2c 20                 jump @237 if a5 == t0
      :                          @235
  3144: 82 5c 20                 a5 = u64 [s0 + 0x20]
  3147: 64 a7                    a0 = a3
  3149: 64 98                    a1 = a2
  3151: 7b 1b 08                 u64 [sp + 0x8] = a4
  3154: 7b 1a                    u64 [sp] = a3
  3156: b4 c0 01 44              ra = 68, jump [a5]
      :                          @236 [@dyn 34]
  3160: 82 1a                    a3 = u64 [sp]
  3162: 82 1b 08                 a4 = u64 [sp + 0x8]
  3165: 64 78                    a1 = a0
  3167: 33 07 01                 a0 = 0x1
  3170: 52 08 20                 jump @240 if a1 != 0
      :                          @237
  3173: 51 06 1a                 jump @239 if s1 == 0
      :                          @238
  3176: 82 5c 18                 a5 = u64 [s0 + 0x18]
  3179: 64 a7                    a0 = a3
  3181: 64 68                    a1 = s1
  3183: 64 b9                    a2 = a4
  3185: 82 10 20                 ra = u64 [sp + 0x20]
  3188: 82 15 18                 s0 = u64 [sp + 0x18]
  3191: 82 16 10                 s1 = u64 [sp + 0x10]
  3194: 95 11 28                 sp = sp + 0x28
  3197: 32 0c                    jump [a5]
      :                          @239
  3199: 33 07                    a0 = 0
  3201: 01                       fallthrough
      :                          @240
  3202: 82 10 20                 ra = u64 [sp + 0x20]
  3205: 82 15 18                 s0 = u64 [sp + 0x18]
  3208: 82 16 10                 s1 = u64 [sp + 0x10]
  3211: 95 11 28                 sp = sp + 0x28
  3214: 32 00                    ret
      :                          @241
  3216: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  3220: 7b 10 80 00              u64 [sp + 0x80] = ra
  3224: 7b 15 78                 u64 [sp + 0x78] = s0
  3227: 7b 16 70                 u64 [sp + 0x70] = s1
  3230: 49 11 60 20              u64 [sp + 96] = 0x20
  3234: 33 09 03                 a2 = 0x3
  3237: 78 19 68                 u8 [sp + 0x68] = a2
  3240: 49 11 30                 u64 [sp + 48] = 0
  3243: 49 11 40                 u64 [sp + 64] = 0
  3246: 82 86 20                 s1 = u64 [a1 + 0x20]
  3249: 7b 17 50                 u64 [sp + 0x50] = a0
  3252: 33 07 10 01 01           a0 = 0x10110
  3257: 7b 17 58                 u64 [sp + 0x58] = a0
  3260: 51 06 06 01              jump @263 if s1 == 0
      :                          @242
  3264: 82 87 28                 a0 = u64 [a1 + 0x28]
  3267: 51 07 73 01              jump @273 if a0 == 0
      :                          @243
  3271: 33 09                    a2 = 0
  3273: 82 85                    s0 = u64 [a1]
  3275: 7b 18 08                 u64 [sp + 0x8] = a1
  3278: 82 88 10                 a1 = u64 [a1 + 0x10]
  3281: 7b 18 18                 u64 [sp + 0x18] = a1
  3284: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  3287: 97 88 03                 a1 = a1 << 0x3
  3290: 98 88 03                 a1 = a1 >> 0x3
  3293: 95 88 01                 a1 = a1 + 0x1
  3296: 7b 18                    u64 [sp] = a1
  3298: 95 55 08                 s0 = s0 + 0x8
  3301: 96 78 38                 a1 = a0 * 0x38
  3304: 95 66 18                 s1 = s1 + 0x18
  3307: 33 07 30                 a0 = 0x30
  3310: 7b 17 10                 u64 [sp + 0x10] = a0
  3313: 01                       fallthrough
      :                          @244
  3314: 7b 18 20                 u64 [sp + 0x20] = a1
  3317: 7b 19 28                 u64 [sp + 0x28] = a2
  3320: 82 59                    a2 = u64 [s0]
  3322: 51 09 17                 jump @247 if a2 == 0
      :                          @245
  3325: 82 1a 58                 a3 = u64 [sp + 0x58]
  3328: 82 17 50                 a0 = u64 [sp + 0x50]
  3331: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  3334: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3337: b4 a0 01 46              ra = 70, jump [a3]
      :                          @246 [@dyn 35]
  3341: 52 07 4e 01              jump @276 if a0 != 0
      :                          @247
  3345: 81 67 10                 a0 = i32 [s1 + 0x10]
  3348: 7a 17 60                 u32 [sp + 0x60] = a0
  3351: 7c 67 18                 a0 = u8 [s1 + 0x18]
  3354: 78 17 68                 u8 [sp + 0x68] = a0
  3357: 81 67 14                 a0 = i32 [s1 + 0x14]
  3360: 7a 17 64                 u32 [sp + 0x64] = a0
  3363: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3366: 82 67                    a0 = u64 [s1]
  3368: 51 08 26                 jump @252 if a1 == 0
      :                          @248
  3371: 52 18 01 16              jump @250 if a1 != 1
      :                          @249
  3375: 97 77 04                 a0 = a0 << 0x4
  3378: 82 18 18                 a1 = u64 [sp + 0x18]
  3381: c8 87 07                 a0 = a0 + a1
  3384: 82 78 08                 a1 = u64 [a0 + 0x8]
  3387: 82 19 10                 a2 = u64 [sp + 0x10]
  3390: aa 98 07                 jump @251 if a1 == a2
      :                          @250
  3393: 33 08                    a1 = 0
  3395: 28 0f                    jump @253
      :                          @251
  3397: 82 77                    a0 = u64 [a0]
  3399: 82 77                    a0 = u64 [a0]
  3401: 33 08 01                 a1 = 0x1
  3404: 28 06                    jump @253
      :                          @252
  3406: 33 08 01                 a1 = 0x1
  3409: 01                       fallthrough
      :                          @253
  3410: 7b 18 30                 u64 [sp + 0x30] = a1
  3413: 7b 17 38                 u64 [sp + 0x38] = a0
  3416: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  3419: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  3422: 51 08 26                 jump @258 if a1 == 0
      :                          @254
  3425: 52 18 01 16              jump @256 if a1 != 1
      :                          @255
  3429: 97 77 04                 a0 = a0 << 0x4
  3432: 82 18 18                 a1 = u64 [sp + 0x18]
  3435: c8 87 07                 a0 = a0 + a1
  3438: 82 78 08                 a1 = u64 [a0 + 0x8]
  3441: 82 19 10                 a2 = u64 [sp + 0x10]
  3444: aa 98 07                 jump @257 if a1 == a2
      :                          @256
  3447: 33 08                    a1 = 0
  3449: 28 0f                    jump @259
      :                          @257
  3451: 82 77                    a0 = u64 [a0]
  3453: 82 77                    a0 = u64 [a0]
  3455: 33 08 01                 a1 = 0x1
  3458: 28 06                    jump @259
      :                          @258
  3460: 33 08 01                 a1 = 0x1
  3463: 01                       fallthrough
      :                          @259
  3464: 7b 18 40                 u64 [sp + 0x40] = a1
  3467: 7b 17 48                 u64 [sp + 0x48] = a0
  3470: 82 67 08                 a0 = u64 [s1 + 0x8]
  3473: 97 77 04                 a0 = a0 << 0x4
  3476: 82 18 18                 a1 = u64 [sp + 0x18]
  3479: c8 78 08                 a1 = a1 + a0
  3482: 82 87                    a0 = u64 [a1]
  3484: 82 89 08                 a2 = u64 [a1 + 0x8]
  3487: 95 18 30                 a1 = sp + 0x30
  3490: b4 90 01 48              ra = 72, jump [a2]
      :                          @260 [@dyn 36]
  3494: 52 07 b5 00              jump @276 if a0 != 0
      :                          @261
  3498: 95 55 10                 s0 = s0 + 0x10
  3501: 82 18 20                 a1 = u64 [sp + 0x20]
  3504: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  3507: 95 66 38                 s1 = s1 + 0x38
  3510: 82 19 28                 a2 = u64 [sp + 0x28]
  3513: 95 99 01                 a2 = a2 + 0x1
  3516: 52 08 36 ff              jump @244 if a1 != 0
      :                          @262
  3520: 28 69                    jump @271
      :                          @263
  3522: 82 87 18                 a0 = u64 [a1 + 0x18]
  3525: 51 07 71                 jump @273 if a0 == 0
      :                          @264
  3528: 82 85 10                 s0 = u64 [a1 + 0x10]
  3531: 33 0a                    a3 = 0
  3533: 97 79 04                 a2 = a0 << 0x4
  3536: c8 59 09                 a2 = a2 + s0
  3539: 7b 19 20                 u64 [sp + 0x20] = a2
  3542: 7b 18 08                 u64 [sp + 0x8] = a1
  3545: 82 86                    s1 = u64 [a1]
  3547: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  3550: 97 77 04                 a0 = a0 << 0x4
  3553: 98 77 04                 a0 = a0 >> 0x4
  3556: 95 77 01                 a0 = a0 + 0x1
  3559: 7b 17                    u64 [sp] = a0
  3561: 95 66 08                 s1 = s1 + 0x8
  3564: 01                       fallthrough
      :                          @265
  3565: 7b 1a 28                 u64 [sp + 0x28] = a3
  3568: 82 69                    a2 = u64 [s1]
  3570: 51 09 16                 jump @268 if a2 == 0
      :                          @266
  3573: 82 1a 58                 a3 = u64 [sp + 0x58]
  3576: 82 17 50                 a0 = u64 [sp + 0x50]
  3579: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3582: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3585: b4 a0 01 4a              ra = 74, jump [a3]
      :                          @267 [@dyn 37]
  3589: 52 07 56                 jump @276 if a0 != 0
      :                          @268
  3592: 82 57                    a0 = u64 [s0]
  3594: 82 59 08                 a2 = u64 [s0 + 0x8]
  3597: 95 18 30                 a1 = sp + 0x30
  3600: b4 90 01 4c              ra = 76, jump [a2]
      :                          @269 [@dyn 38]
  3604: 52 07 47                 jump @276 if a0 != 0
      :                          @270
  3607: 95 66 10                 s1 = s1 + 0x10
  3610: 95 55 10                 s0 = s0 + 0x10
  3613: 82 1a 28                 a3 = u64 [sp + 0x28]
  3616: 95 aa 01                 a3 = a3 + 0x1
  3619: 82 17 20                 a0 = u64 [sp + 0x20]
  3622: ab 75 c7                 jump @265 if s0 != a0
      :                          @271
  3625: 82 18 08                 a1 = u64 [sp + 0x8]
  3628: 82 1a                    a3 = u64 [sp]
  3630: 82 87 08                 a0 = u64 [a1 + 0x8]
  3633: ac 7a 0d                 jump @274 if a3 <u a0
      :                          @272
  3636: 28 2c                    jump @277
      :                          @273
  3638: 33 0a                    a3 = 0
  3640: 82 87 08                 a0 = u64 [a1 + 0x8]
  3643: 54 07 25                 jump @277 if a0 <=u 0
      :                          @274
  3646: 82 87                    a0 = u64 [a1]
  3648: 97 a8 04                 a1 = a3 << 0x4
  3651: c8 87 09                 a2 = a0 + a1
  3654: 82 1a 58                 a3 = u64 [sp + 0x58]
  3657: 82 17 50                 a0 = u64 [sp + 0x50]
  3660: 82 98                    a1 = u64 [a2]
  3662: 82 99 08                 a2 = u64 [a2 + 0x8]
  3665: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3668: b4 a0 01 4e              ra = 78, jump [a3]
      :                          @275 [@dyn 39]
  3672: 51 07 08                 jump @277 if a0 == 0
      :                          @276
  3675: 33 07 01                 a0 = 0x1
  3678: 28 05                    jump @278
      :                          @277
  3680: 33 07                    a0 = 0
  3682: 01                       fallthrough
      :                          @278
  3683: 82 10 80 00              ra = u64 [sp + 0x80]
  3687: 82 15 78                 s0 = u64 [sp + 0x78]
  3690: 82 16 70                 s1 = u64 [sp + 0x70]
  3693: 95 11 88 00              sp = sp + 0x88
  3697: 32 00                    ret
