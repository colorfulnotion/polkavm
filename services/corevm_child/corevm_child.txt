// RO data = 520/520 bytes
// RW data = 8/4128 bytes
// Stack size = 40960 bytes
// RO data = [67, 72, 73, 76, 68, 32, 78, 79, 82, 77, 32, 110, 61, 32, 102, 105, 98, 95, 110, 95, 50, 61, 32, 114, 101, 115, 117, 108, 116, 61, 32, 40, 97, 100, 100, 114, 50, 61, 32, 40, 97, 100, 100, 114, 49, 61, 41, 32, 102, 105, 98, 95, 110, 95, 49, 61, 41, 32, 114, 101, 115, 117, 108, 116, 61, 67, 72, 73, 76, 68, 32, 66, 65, 83, 69, 32, 110, 61, 67, 72, 73, 76, 68, 32, 87, 82, 73, 84, 69, 32, 111, 117, 116, 95, 97, 100, 100, 114, 101, 115, 115, 61, 0, 0, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 13, 0, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 30, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 46, 0, 1, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 38, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 56, 0, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 65, 0, 1, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 22, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 78, 0, 1, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 22, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0]
// RW data = [75, 89, 134, 56, 214, 197, 109, 52]
// Instructions = 1284
// Code size = 3705 bytes

      :                          @0
     0: 28 81 01                 jump @29
      :                          @1 [@dyn 1]
     3: 95 11 78 ff              sp = sp + 0xffffffffffffff78
     7: 7b 10 80 00              u64 [sp + 0x80] = ra
    11: 80 89 34                 a2 = u32 [a1 + 0x34]
    14: 84 9a 10                 a3 = a2 & 0x10
    17: 52 0a 16                 jump @4 if a3 != 0
      :                          @2
    20: 84 99 20                 a2 = a2 & 0x20
    23: 52 09 51                 jump @8 if a2 != 0
      :                          @3
    26: 80 77                    a0 = u32 [a0]
    28: 82 10 80 00              ra = u64 [sp + 0x80]
    32: 95 11 88 00              sp = sp + 0x88
    36: 28 e7 08                 jump @183
      :                          @4
    39: 81 7b                    a4 = i32 [a0]
    41: 33 09 81 00              a2 = 0x81
    45: 95 17 7f                 a0 = sp + 0x7f
    48: 33 02 57                 t0 = 0x57
    51: 01                       fallthrough
      :                          @5
    52: 64 9c                    a5 = a2
    54: 8b ba 04                 i32 a3 = a4 >> 0x4
    57: 84 bb 0f                 a4 = a4 & 0xf
    60: 88 b3 0a                 t1 = a4 <u 0xa
    63: 33 09 30                 a2 = 0x30
    66: da 32 09                 a2 = t0 if t1 == 0
    69: be b9 09                 i32 a2 = a2 + a4
    72: 78 79                    u8 [a0] = a2
    74: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
    77: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
    80: 64 ab                    a4 = a3
    82: 52 0a e2                 jump @5 if a3 != 0
      :                          @6
    85: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
    88: 56 27 80 00 69           jump @14 if a0 >u 128
      :                          @7
    93: 9a 9b 81 00              a4 = 0x81 - a2
    97: 64 1a                    a3 = sp
    99: c8 7a 0a                 a3 = a3 + a0
   102: 28 42                    jump @12
      :                          @8
   104: 81 7b                    a4 = i32 [a0]
   106: 33 09 81 00              a2 = 0x81
   110: 95 17 7f                 a0 = sp + 0x7f
   113: 33 02 37                 t0 = 0x37
   116: 01                       fallthrough
      :                          @9
   117: 64 9c                    a5 = a2
   119: 8b ba 04                 i32 a3 = a4 >> 0x4
   122: 84 bb 0f                 a4 = a4 & 0xf
   125: 88 b3 0a                 t1 = a4 <u 0xa
   128: 33 09 30                 a2 = 0x30
   131: da 32 09                 a2 = t0 if t1 == 0
   134: be b9 09                 i32 a2 = a2 + a4
   137: 78 79                    u8 [a0] = a2
   139: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   142: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   145: 64 ab                    a4 = a3
   147: 52 0a e2                 jump @9 if a3 != 0
      :                          @10
   150: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
   153: 56 27 80 00 28           jump @14 if a0 >u 128
      :                          @11
   158: 9a 9b 81 00              a4 = 0x81 - a2
   162: 64 1a                    a3 = sp
   164: c8 7a 0a                 a3 = a3 + a0
   167: 01                       fallthrough
      :                          @12
   168: 33 09 02                 a2 = 0x2
   171: 64 87                    a0 = a1
   173: 33 08 68 00 01           a1 = 0x10068
   178: 50 10 04 75 09           ra = 4, jump @193
      :                          @13 [@dyn 2]
   183: 82 10 80 00              ra = u64 [sp + 0x80]
   187: 95 11 88 00              sp = sp + 0x88
   191: 32 00                    ret
      :                          @14
   193: 00                       trap
      :                          @15 [@dyn 3]
   194: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   198: 7b 10 80 00              u64 [sp + 0x80] = ra
   202: 80 89 34                 a2 = u32 [a1 + 0x34]
   205: 84 9a 10                 a3 = a2 & 0x10
   208: 52 0a 16                 jump @18 if a3 != 0
      :                          @16
   211: 84 99 20                 a2 = a2 & 0x20
   214: 52 09 51                 jump @22 if a2 != 0
      :                          @17
   217: 82 77                    a0 = u64 [a0]
   219: 82 10 80 00              ra = u64 [sp + 0x80]
   223: 95 11 88 00              sp = sp + 0x88
   227: 28 28 08                 jump @183
      :                          @18
   230: 82 7b                    a4 = u64 [a0]
   232: 33 09 81 00              a2 = 0x81
   236: 95 17 7f                 a0 = sp + 0x7f
   239: 33 02 57                 t0 = 0x57
   242: 01                       fallthrough
      :                          @19
   243: 64 9c                    a5 = a2
   245: 98 ba 04                 a3 = a4 >> 0x4
   248: 84 bb 0f                 a4 = a4 & 0xf
   251: 88 b3 0a                 t1 = a4 <u 0xa
   254: 33 09 30                 a2 = 0x30
   257: da 32 09                 a2 = t0 if t1 == 0
   260: be b9 09                 i32 a2 = a2 + a4
   263: 78 79                    u8 [a0] = a2
   265: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   268: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   271: 64 ab                    a4 = a3
   273: 52 0a e2                 jump @19 if a3 != 0
      :                          @20
   276: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
   279: 56 27 80 00 69           jump @28 if a0 >u 128
      :                          @21
   284: 9a 9b 81 00              a4 = 0x81 - a2
   288: 64 1a                    a3 = sp
   290: c8 7a 0a                 a3 = a3 + a0
   293: 28 42                    jump @26
      :                          @22
   295: 82 7b                    a4 = u64 [a0]
   297: 33 09 81 00              a2 = 0x81
   301: 95 17 7f                 a0 = sp + 0x7f
   304: 33 02 37                 t0 = 0x37
   307: 01                       fallthrough
      :                          @23
   308: 64 9c                    a5 = a2
   310: 98 ba 04                 a3 = a4 >> 0x4
   313: 84 bb 0f                 a4 = a4 & 0xf
   316: 88 b3 0a                 t1 = a4 <u 0xa
   319: 33 09 30                 a2 = 0x30
   322: da 32 09                 a2 = t0 if t1 == 0
   325: be b9 09                 i32 a2 = a2 + a4
   328: 78 79                    u8 [a0] = a2
   330: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   333: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   336: 64 ab                    a4 = a3
   338: 52 0a e2                 jump @23 if a3 != 0
      :                          @24
   341: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
   344: 56 27 80 00 28           jump @28 if a0 >u 128
      :                          @25
   349: 9a 9b 81 00              a4 = 0x81 - a2
   353: 64 1a                    a3 = sp
   355: c8 7a 0a                 a3 = a3 + a0
   358: 01                       fallthrough
      :                          @26
   359: 33 09 02                 a2 = 0x2
   362: 64 87                    a0 = a1
   364: 33 08 68 00 01           a1 = 0x10068
   369: 50 10 08 b6 08           ra = 8, jump @193
      :                          @27 [@dyn 4]
   374: 82 10 80 00              ra = u64 [sp + 0x80]
   378: 95 11 88 00              sp = sp + 0x88
   382: 32 00                    ret
      :                          @28
   384: 00                       trap
      :                          @29 [export #0: 'main']
   385: 95 11 00 ff              sp = sp + 0xffffffffffffff00
   389: 7b 10 f8 00              u64 [sp + 0xf8] = ra
   393: 7b 15 f0 00              u64 [sp + 0xf0] = s0
   397: 7b 16 e8 00              u64 [sp + 0xe8] = s1
   401: 49 11 08 ff ef           u64 [sp + 8] = 0xffffffffffffefff
   406: 7b 17 10                 u64 [sp + 0x10] = a0
   409: 33 0a 02                 a3 = 0x2
   412: 7b 1a                    u64 [sp] = a3
   414: 55 17 02 94 00           jump @40 if a0 >=u 2
      :                          @30
   419: 48 11 1c 01              u32 [sp + 28] = 0x1
   423: 95 17 10                 a0 = sp + 0x10
   426: 7b 17 40                 u64 [sp + 0x40] = a0
   429: 33 07 06                 a0 = 0x6
   432: 7b 17 48                 u64 [sp + 0x48] = a0
   435: 95 17 1c                 a0 = sp + 0x1c
   438: 7b 17 50                 u64 [sp + 0x50] = a0
   441: 7b 1a 58                 u64 [sp + 0x58] = a3
   444: 33 07 98 01 01           a0 = 0x10198
   449: 7b 17 70                 u64 [sp + 0x70] = a0
   452: 49 11 78 02              u64 [sp + 120] = 0x2
   456: 49 21 90 00              u64 [sp + 144] = 0
   460: 95 17 40                 a0 = sp + 0x40
   463: 7b 17 80 00              u64 [sp + 0x80] = a0
   467: 49 21 88 00 02           u64 [sp + 136] = 0x2
   472: 95 17 d0 00              a0 = sp + 0xd0
   476: 95 18 70                 a1 = sp + 0x70
   479: 50 10 0a 14 04           ra = 10, jump @113
      :                          @31 [@dyn 5]
   484: 82 15 d8 00              s0 = u64 [sp + 0xd8]
   488: 82 1b e0 00              a4 = u64 [sp + 0xe0]
   492: 82 16 d0 00              s1 = u64 [sp + 0xd0]
   496: 33 07 02                 a0 = 0x2
   499: 33 08                    a1 = 0
   501: 33 09                    a2 = 0
   503: 64 5a                    a3 = s0
   505: 33 00 0c                 ra = 0xc
   508: 0a 64                    ecalli 100 // 'log'
   510: 01                       fallthrough
      :                          @32 [@dyn 6]
   511: 82 17 08                 a0 = u64 [sp + 0x8]
   514: c8 67 07                 a0 = a0 + s1
   517: 53 27 00 f0 0e 01        jump @48 if a0 <u 4294963200
      :                          @33
   523: 33 07 10 00 03           a0 = 0x30010
   528: 95 77 00 10              a0 = a0 + 0x1000
   532: 01                       fallthrough
      :                          @34
   533: 82 78                    a1 = u64 [a0]
   535: c9 87 09                 a2 = a0 - a1
   538: ab 59 f9 00              jump @48 if a2 != s0
      :                          @35
   542: c9 68 09                 a2 = a1 - s1
   545: 01                       fallthrough
      :                          @36
   546: 82 7a                    a3 = u64 [a0]
   548: ab 8a f1                 jump @34 if a3 != a1
      :                          @37
   551: 7b 79                    u64 [a0] = a2
   553: 33 0b                    a4 = 0
   555: 01                       fallthrough
      :                          @38
   556: ab 8a e9                 jump @34 if a3 != a1
      :                          @39
   559: 28 e4 00                 jump @48
      :                          @40
   562: 97 77 0c                 a0 = a0 << 0xc
   565: 14 08 00 e0 fe fe 00 00 00 00 a1 = 0xfefee000
   575: c8 78 08                 a1 = a1 + a0
   578: 7b 18 20                 u64 [sp + 0x20] = a1
   581: 81 88                    a1 = i32 [a1]
   583: 7a 18 2c                 u32 [sp + 0x2c] = a1
   586: 14 09 00 f0 fe fe 00 00 00 00 a2 = 0xfefef000
   596: c8 97 07                 a0 = a0 + a2
   599: 7b 17 30                 u64 [sp + 0x30] = a0
   602: 81 77                    a0 = i32 [a0]
   604: 7a 17 3c                 u32 [sp + 0x3c] = a0
   607: be 87 07                 i32 a0 = a0 + a1
   610: 7a 17 1c                 u32 [sp + 0x1c] = a0
   613: 95 17 10                 a0 = sp + 0x10
   616: 7b 17 70                 u64 [sp + 0x70] = a0
   619: 33 07 06                 a0 = 0x6
   622: 7b 17 78                 u64 [sp + 0x78] = a0
   625: 95 18 2c                 a1 = sp + 0x2c
   628: 7b 18 80 00              u64 [sp + 0x80] = a1
   632: 7b 1a 88 00              u64 [sp + 0x88] = a3
   636: 95 18 20                 a1 = sp + 0x20
   639: 7b 18 90 00              u64 [sp + 0x90] = a1
   643: 7b 17 98 00              u64 [sp + 0x98] = a0
   647: 95 18 3c                 a1 = sp + 0x3c
   650: 7b 18 a0 00              u64 [sp + 0xa0] = a1
   654: 7b 1a a8 00              u64 [sp + 0xa8] = a3
   658: 95 18 30                 a1 = sp + 0x30
   661: 7b 18 b0 00              u64 [sp + 0xb0] = a1
   665: 7b 17 b8 00              u64 [sp + 0xb8] = a0
   669: 95 17 1c                 a0 = sp + 0x1c
   672: 7b 17 c0 00              u64 [sp + 0xc0] = a0
   676: 7b 1a c8 00              u64 [sp + 0xc8] = a3
   680: 33 07 38 01 01           a0 = 0x10138
   685: 7b 17 40                 u64 [sp + 0x40] = a0
   688: 49 11 48 06              u64 [sp + 72] = 0x6
   692: 49 11 60                 u64 [sp + 96] = 0
   695: 95 18 70                 a1 = sp + 0x70
   698: 7b 18 50                 u64 [sp + 0x50] = a1
   701: 49 11 58 06              u64 [sp + 88] = 0x6
   705: 95 17 d0 00              a0 = sp + 0xd0
   709: 95 18 40                 a1 = sp + 0x40
   712: 50 10 0e 2b 03           ra = 14, jump @113
      :                          @41 [@dyn 7]
   717: 82 15 d8 00              s0 = u64 [sp + 0xd8]
   721: 82 1b e0 00              a4 = u64 [sp + 0xe0]
   725: 82 16 d0 00              s1 = u64 [sp + 0xd0]
   729: 33 07 02                 a0 = 0x2
   732: 33 08                    a1 = 0
   734: 33 09                    a2 = 0
   736: 64 5a                    a3 = s0
   738: 33 00 10                 ra = 0x10
   741: 0a 64                    ecalli 100 // 'log'
   743: 01                       fallthrough
      :                          @42 [@dyn 8]
   744: 82 17 08                 a0 = u64 [sp + 0x8]
   747: c8 67 07                 a0 = a0 + s1
   750: 53 27 00 f0 25           jump @48 if a0 <u 4294963200
      :                          @43
   755: 33 07 10 00 03           a0 = 0x30010
   760: 95 77 00 10              a0 = a0 + 0x1000
   764: 01                       fallthrough
      :                          @44
   765: 82 78                    a1 = u64 [a0]
   767: c9 87 09                 a2 = a0 - a1
   770: ab 59 11                 jump @48 if a2 != s0
      :                          @45
   773: c9 68 09                 a2 = a1 - s1
   776: 01                       fallthrough
      :                          @46
   777: 82 7a                    a3 = u64 [a0]
   779: ab 8a f2                 jump @44 if a3 != a1
      :                          @47
   782: 7b 79                    u64 [a0] = a2
   784: 33 0b                    a4 = 0
   786: 01                       fallthrough
      :                          @48
   787: 81 17 10                 a0 = i32 [sp + 0x10]
   790: 97 77 0c                 a0 = a0 << 0xc
   793: 83 77 00 00 ff fe        i32 a0 = a0 + 0xfffffffffeff0000
   799: 7a 17 30                 u32 [sp + 0x30] = a0
   802: 95 17 30                 a0 = sp + 0x30
   805: 7b 17 40                 u64 [sp + 0x40] = a0
   808: 82 18                    a1 = u64 [sp]
   810: 7b 18 48                 u64 [sp + 0x48] = a1
   813: 95 17 1c                 a0 = sp + 0x1c
   816: 7b 17 50                 u64 [sp + 0x50] = a0
   819: 7b 18 58                 u64 [sp + 0x58] = a1
   822: 33 07 b8 01 01           a0 = 0x101b8
   827: 7b 17 70                 u64 [sp + 0x70] = a0
   830: 49 11 78 02              u64 [sp + 120] = 0x2
   834: 49 21 90 00              u64 [sp + 144] = 0
   838: 95 18 40                 a1 = sp + 0x40
   841: 7b 18 80 00              u64 [sp + 0x80] = a1
   845: 49 21 88 00 02           u64 [sp + 136] = 0x2
   850: 95 17 d0 00              a0 = sp + 0xd0
   854: 95 18 70                 a1 = sp + 0x70
   857: 50 10 12 9a 02           ra = 18, jump @113
      :                          @49 [@dyn 9]
   862: 82 15 d8 00              s0 = u64 [sp + 0xd8]
   866: 82 1b e0 00              a4 = u64 [sp + 0xe0]
   870: 82 16 d0 00              s1 = u64 [sp + 0xd0]
   874: 33 07 02                 a0 = 0x2
   877: 33 08                    a1 = 0
   879: 33 09                    a2 = 0
   881: 64 5a                    a3 = s0
   883: 33 00 14                 ra = 0x14
   886: 0a 64                    ecalli 100 // 'log'
   888: 01                       fallthrough
      :                          @50 [@dyn 10]
   889: 82 17 08                 a0 = u64 [sp + 0x8]
   892: c8 67 07                 a0 = a0 + s1
   895: 53 27 00 f0 25           jump @56 if a0 <u 4294963200
      :                          @51
   900: 33 07 10 00 03           a0 = 0x30010
   905: 95 77 00 10              a0 = a0 + 0x1000
   909: 01                       fallthrough
      :                          @52
   910: 82 78                    a1 = u64 [a0]
   912: c9 87 09                 a2 = a0 - a1
   915: ab 59 11                 jump @56 if a2 != s0
      :                          @53
   918: c9 68 09                 a2 = a1 - s1
   921: 01                       fallthrough
      :                          @54
   922: 82 7a                    a3 = u64 [a0]
   924: ab 8a f2                 jump @52 if a3 != a1
      :                          @55
   927: 7b 79                    u64 [a0] = a2
   929: 33 0b                    a4 = 0
   931: 01                       fallthrough
      :                          @56
   932: 80 17 30                 a0 = u32 [sp + 0x30]
   935: 81 18 1c                 a1 = i32 [sp + 0x1c]
   938: 7a 78                    u32 [a0] = a1
   940: 80 17 30                 a0 = u32 [sp + 0x30]
   943: 33 08 00 10              a1 = 0x1000
   947: 82 10 f8 00              ra = u64 [sp + 0xf8]
   951: 82 15 f0 00              s0 = u64 [sp + 0xf0]
   955: 82 16 e8 00              s1 = u64 [sp + 0xe8]
   959: 95 11 00 01              sp = sp + 0x100
   963: 32 00                    ret
      :                          @57
   965: 95 11 b8                 sp = sp + 0xffffffffffffffb8
   968: 7b 10 40                 u64 [sp + 0x40] = ra
   971: 7b 15 38                 u64 [sp + 0x38] = s0
   974: 7b 16 30                 u64 [sp + 0x30] = s1
   977: c8 89 09                 a2 = a2 + a1
   980: ac 89 52                 jump @65 if a2 <u a1
      :                          @58
   983: 64 75                    s0 = a0
   985: 82 77                    a0 = u64 [a0]
   987: 97 78 01                 a1 = a0 << 0x1
   990: 33 0a 08                 a3 = 0x8
   993: e4 a9 09                 a2 = maxu(a2, a3)
   996: e4 98 06                 s1 = maxu(a1, a2)
   999: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1002: 98 88 3f                 a1 = a1 >> 0x3f
  1005: 51 07 12                 jump @60 if a0 == 0
      :                          @59
  1008: 82 59 08                 a2 = u64 [s0 + 0x8]
  1011: 7b 19 18                 u64 [sp + 0x18] = a2
  1014: 49 11 20 01              u64 [sp + 32] = 0x1
  1018: 7b 17 28                 u64 [sp + 0x28] = a0
  1021: 28 06                    jump @61
      :                          @60
  1023: 49 11 20                 u64 [sp + 32] = 0
  1026: 01                       fallthrough
      :                          @61
  1027: 64 17                    a0 = sp
  1029: 95 1a 18                 a3 = sp + 0x18
  1032: 64 69                    a2 = s1
  1034: 50 10 16 32              ra = 22, jump @69
      :                          @62 [@dyn 11]
  1038: 82 18                    a1 = u64 [sp]
  1040: 82 17 08                 a0 = u64 [sp + 0x8]
  1043: 51 08 14                 jump @66 if a1 == 0
      :                          @63
  1046: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1056: aa 87 0d                 jump @67 if a0 == a1
      :                          @64
  1059: 52 07 18                 jump @68 if a0 != 0
      :                          @65
  1062: 00                       trap
      :                          @66
  1063: 7b 57 08                 u64 [s0 + 0x8] = a0
  1066: 7b 56                    u64 [s0] = s1
  1068: 01                       fallthrough
      :                          @67
  1069: 82 10 40                 ra = u64 [sp + 0x40]
  1072: 82 15 38                 s0 = u64 [sp + 0x38]
  1075: 82 16 30                 s1 = u64 [sp + 0x30]
  1078: 95 11 48                 sp = sp + 0x48
  1081: 32 00                    ret
      :                          @68
  1083: 00                       trap
      :                          @69
  1084: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  1087: 7b 10 30                 u64 [sp + 0x30] = ra
  1090: 7b 15 28                 u64 [sp + 0x28] = s0
  1093: 7b 16 20                 u64 [sp + 0x20] = s1
  1096: 64 96                    s1 = a2
  1098: 64 73                    t1 = a0
  1100: 51 08 6e                 jump @79 if a1 == 0
      :                          @70
  1103: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1106: 51 07 71                 jump @80 if a0 == 0
      :                          @71
  1109: 82 a9 10                 a2 = u64 [a3 + 0x10]
  1112: 51 09 9e 00              jump @87 if a2 == 0
      :                          @72
  1116: 82 a8                    a1 = u64 [a3]
  1118: 33 02 00 10              t0 = 0x1000
  1122: 33 04 10 00 03           t2 = 0x30010
  1127: c8 24 07                 a0 = t2 + t0
  1130: 01                       fallthrough
      :                          @73
  1131: 82 7a                    a3 = u64 [a0]
  1133: c8 6a 05                 s0 = a3 + s1
  1136: ac a5 c2 00              jump @93 if s0 <u a3
      :                          @74
  1140: 95 5b 01                 a4 = s0 + 0x1
  1143: 88 bc 01                 a5 = a4 <u 0x1
  1146: d8 b2 0b                 a4 = t0 <u a4
  1149: d4 cb 0b                 a4 = a4 | a5
  1152: 52 0b b2 00              jump @93 if a4 != 0
      :                          @75
  1156: 82 7b                    a4 = u64 [a0]
  1158: ab ab e5                 jump @73 if a4 != a3
      :                          @76
  1161: 7b 75                    u64 [a0] = s0
  1163: 33 0c                    a5 = 0
  1165: 7b 13 18                 u64 [sp + 0x18] = t1
  1168: c9 54 07                 a0 = t2 - s0
  1171: 95 77 00 10              a0 = a0 + 0x1000
  1175: 7b 17 10                 u64 [sp + 0x10] = a0
  1178: 7b 18 08                 u64 [sp + 0x8] = a1
  1181: 64 95                    s0 = a2
  1183: 7b 14                    u64 [sp] = t2
  1185: 50 10 18 b4 03           ra = 24, jump @163
      :                          @77 [@dyn 12]
  1190: 54 25 00 10 94 00        jump @94 if s0 <=u 4096
      :                          @78
  1196: 82 13 18                 t1 = u64 [sp + 0x18]
  1199: 82 18 10                 a1 = u64 [sp + 0x10]
  1202: 33 07                    a0 = 0
  1204: 7b 38 08                 u64 [t1 + 0x8] = a1
  1207: 28 b1 00                 jump @100
      :                          @79
  1210: 49 13 08                 u64 [t1 + 8] = 0
  1213: 33 07 01                 a0 = 0x1
  1216: 28 a8 00                 jump @100
      :                          @80
  1219: 33 07 00 10              a0 = 0x1000
  1223: 33 02 10 00 03           t0 = 0x30010
  1228: c8 72 09                 a2 = t0 + a0
  1231: 01                       fallthrough
      :                          @81
  1232: 82 9b                    a4 = u64 [a2]
  1234: c8 6b 0a                 a3 = a4 + s1
  1237: ac ba 5d                 jump @93 if a3 <u a4
      :                          @82
  1240: 95 ac 01                 a5 = a3 + 0x1
  1243: 88 c8 01                 a1 = a5 <u 0x1
  1246: d8 c7 0c                 a5 = a0 <u a5
  1249: d4 c8 08                 a1 = a1 | a5
  1252: 52 08 4e                 jump @93 if a1 != 0
      :                          @83
  1255: 82 98                    a1 = u64 [a2]
  1257: ab b8 e7                 jump @81 if a1 != a4
      :                          @84
  1260: 7b 9a                    u64 [a2] = a3
  1262: 33 0c                    a5 = 0
  1264: 01                       fallthrough
      :                          @85
  1265: ab b8 df                 jump @81 if a1 != a4
      :                          @86
  1268: 28 30                    jump @92
      :                          @87
  1270: 33 07 00 10              a0 = 0x1000
  1274: 33 02 10 00 03           t0 = 0x30010
  1279: c8 72 09                 a2 = t0 + a0
  1282: 01                       fallthrough
      :                          @88
  1283: 82 9b                    a4 = u64 [a2]
  1285: c8 6b 0a                 a3 = a4 + s1
  1288: ac ba 2a                 jump @93 if a3 <u a4
      :                          @89
  1291: 95 ac 01                 a5 = a3 + 0x1
  1294: 88 c8 01                 a1 = a5 <u 0x1
  1297: d8 c7 0c                 a5 = a0 <u a5
  1300: d4 c8 08                 a1 = a1 | a5
  1303: 52 08 1b                 jump @93 if a1 != 0
      :                          @90
  1306: 82 98                    a1 = u64 [a2]
  1308: ab b8 e7                 jump @88 if a1 != a4
      :                          @91
  1311: 7b 9a                    u64 [a2] = a3
  1313: 33 0c                    a5 = 0
  1315: 01                       fallthrough
      :                          @92
  1316: c9 a2 07                 a0 = t0 - a3
  1319: 95 78 00 10              a1 = a0 + 0x1000
  1323: 33 07                    a0 = 0
  1325: 7b 38 08                 u64 [t1 + 0x8] = a1
  1328: 28 38                    jump @100
      :                          @93
  1330: 33 07 01                 a0 = 0x1
  1333: 7b 37 08                 u64 [t1 + 0x8] = a0
  1336: 28 30                    jump @100
      :                          @94
  1338: 64 5c                    a5 = s0
  1340: 82 18                    a1 = u64 [sp]
  1342: 95 87 00 10              a0 = a1 + 0x1000
  1346: 82 13 18                 t1 = u64 [sp + 0x18]
  1349: 82 15 08                 s0 = u64 [sp + 0x8]
  1352: 01                       fallthrough
      :                          @95
  1353: 82 78                    a1 = u64 [a0]
  1355: c9 87 09                 a2 = a0 - a1
  1358: ab 59 11                 jump @99 if a2 != s0
      :                          @96
  1361: c9 c8 09                 a2 = a1 - a5
  1364: 01                       fallthrough
      :                          @97
  1365: 82 7a                    a3 = u64 [a0]
  1367: ab 8a f2                 jump @95 if a3 != a1
      :                          @98
  1370: 7b 79                    u64 [a0] = a2
  1372: 33 0b                    a4 = 0
  1374: 01                       fallthrough
      :                          @99
  1375: 82 18 10                 a1 = u64 [sp + 0x10]
  1378: 33 07                    a0 = 0
  1380: 7b 38 08                 u64 [t1 + 0x8] = a1
  1383: 01                       fallthrough
      :                          @100
  1384: 7b 36 10                 u64 [t1 + 0x10] = s1
  1387: 7b 37                    u64 [t1] = a0
  1389: 82 10 30                 ra = u64 [sp + 0x30]
  1392: 82 15 28                 s0 = u64 [sp + 0x28]
  1395: 82 16 20                 s1 = u64 [sp + 0x20]
  1398: 95 11 38                 sp = sp + 0x38
  1401: 32 00                    ret
      :                          @101
  1403: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1406: 7b 10 40                 u64 [sp + 0x40] = ra
  1409: 7b 15 38                 u64 [sp + 0x38] = s0
  1412: 7b 16 30                 u64 [sp + 0x30] = s1
  1415: 95 88 01                 a1 = a1 + 0x1
  1418: 51 08 53                 jump @109 if a1 == 0
      :                          @102
  1421: 64 75                    s0 = a0
  1423: 82 77                    a0 = u64 [a0]
  1425: 97 79 01                 a2 = a0 << 0x1
  1428: 33 0a 08                 a3 = 0x8
  1431: e4 a8 08                 a1 = maxu(a1, a3)
  1434: e4 89 06                 s1 = maxu(a2, a1)
  1437: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1440: 98 88 3f                 a1 = a1 >> 0x3f
  1443: 51 07 12                 jump @104 if a0 == 0
      :                          @103
  1446: 82 59 08                 a2 = u64 [s0 + 0x8]
  1449: 7b 19 18                 u64 [sp + 0x18] = a2
  1452: 49 11 20 01              u64 [sp + 32] = 0x1
  1456: 7b 17 28                 u64 [sp + 0x28] = a0
  1459: 28 06                    jump @105
      :                          @104
  1461: 49 11 20                 u64 [sp + 32] = 0
  1464: 01                       fallthrough
      :                          @105
  1465: 64 17                    a0 = sp
  1467: 95 1a 18                 a3 = sp + 0x18
  1470: 64 69                    a2 = s1
  1472: 50 10 1a 7c fe           ra = 26, jump @69
      :                          @106 [@dyn 13]
  1477: 82 18                    a1 = u64 [sp]
  1479: 82 17 08                 a0 = u64 [sp + 0x8]
  1482: 51 08 14                 jump @110 if a1 == 0
      :                          @107
  1485: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1495: aa 87 0d                 jump @111 if a0 == a1
      :                          @108
  1498: 52 07 18                 jump @112 if a0 != 0
      :                          @109
  1501: 00                       trap
      :                          @110
  1502: 7b 57 08                 u64 [s0 + 0x8] = a0
  1505: 7b 56                    u64 [s0] = s1
  1507: 01                       fallthrough
      :                          @111
  1508: 82 10 40                 ra = u64 [sp + 0x40]
  1511: 82 15 38                 s0 = u64 [sp + 0x38]
  1514: 82 16 30                 s1 = u64 [sp + 0x30]
  1517: 95 11 48                 sp = sp + 0x48
  1520: 32 00                    ret
      :                          @112
  1522: 00                       trap
      :                          @113
  1523: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  1526: 7b 10 30                 u64 [sp + 0x30] = ra
  1529: 7b 15 28                 u64 [sp + 0x28] = s0
  1532: 7b 16 20                 u64 [sp + 0x20] = s1
  1535: 82 8a 08                 a3 = u64 [a1 + 0x8]
  1538: 64 75                    s0 = a0
  1540: 51 0a 35                 jump @118 if a3 == 0
      :                          @114
  1543: 82 89                    a2 = u64 [a1]
  1545: 33 07                    a0 = 0
  1547: 95 9b 08                 a4 = a2 + 0x8
  1550: 01                       fallthrough
      :                          @115
  1551: 82 bc                    a5 = u64 [a4]
  1553: c8 c7 07                 a0 = a0 + a5
  1556: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  1559: 95 bb 10                 a4 = a4 + 0x10
  1562: 52 0a f5                 jump @115 if a3 != 0
      :                          @116
  1565: 82 8a 18                 a3 = u64 [a1 + 0x18]
  1568: 51 0a 24                 jump @120 if a3 == 0
      :                          @117
  1571: 82 99 08                 a2 = u64 [a2 + 0x8]
  1574: 8e 99                    a2 = a2 >u 0
  1576: 88 7a 10                 a3 = a0 <u 0x10
  1579: 85 aa 01                 a3 = a3 ^ 0x1
  1582: d4 a9 09                 a2 = a2 | a3
  1585: 89 7a                    a3 = a0 <s 0
  1587: e0 a9 09                 a2 = a2 & ~a3
  1590: 52 09 0a                 jump @119 if a2 != 0
      :                          @118
  1593: 33 07                    a0 = 0
  1595: 33 09 01                 a2 = 0x1
  1598: 28 4b                    jump @128
      :                          @119
  1600: 97 77 01                 a0 = a0 << 0x1
  1603: 01                       fallthrough
      :                          @120
  1604: 51 07 41                 jump @127 if a0 == 0
      :                          @121
  1607: 57 07 74                 jump @133 if a0 <s 0
      :                          @122
  1610: 64 53                    t1 = s0
  1612: 33 09 00 10              a2 = 0x1000
  1616: 33 02 10 00 03           t0 = 0x30010
  1621: c8 92 0b                 a4 = t0 + a2
  1624: 01                       fallthrough
      :                          @123
  1625: 82 bc                    a5 = u64 [a4]
  1627: c8 7c 0a                 a3 = a5 + a0
  1630: ac ca 5b                 jump @131 if a3 <u a5
      :                          @124
  1633: 95 a5 01                 s0 = a3 + 0x1
  1636: 88 56 01                 s1 = s0 <u 0x1
  1639: d8 59 05                 s0 = a2 <u s0
  1642: d4 65 05                 s0 = s0 | s1
  1645: 52 05 4c                 jump @131 if s0 != 0
      :                          @125
  1648: 82 b6                    s1 = u64 [a4]
  1650: ab c6 e7                 jump @123 if s1 != a5
      :                          @126
  1653: 7b ba                    u64 [a4] = a3
  1655: c9 a2 09                 a2 = t0 - a3
  1658: 33 0a 00 10              a3 = 0x1000
  1662: c8 a9 09                 a2 = a2 + a3
  1665: 64 35                    s0 = t1
  1667: 28 06                    jump @128
      :                          @127
  1669: 33 09 01                 a2 = 0x1
  1672: 01                       fallthrough
      :                          @128
  1673: 7b 17                    u64 [sp] = a0
  1675: 7b 19 08                 u64 [sp + 0x8] = a2
  1678: 49 11 10                 u64 [sp + 16] = 0
  1681: 64 17                    a0 = sp
  1683: 50 10 1c 03 06           ra = 28, jump @245
      :                          @129 [@dyn 14]
  1688: 52 07 22                 jump @132 if a0 != 0
      :                          @130
  1691: 82 17 10                 a0 = u64 [sp + 0x10]
  1694: 82 18 08                 a1 = u64 [sp + 0x8]
  1697: 82 19                    a2 = u64 [sp]
  1699: 7b 57 10                 u64 [s0 + 0x10] = a0
  1702: 7b 58 08                 u64 [s0 + 0x8] = a1
  1705: 7b 59                    u64 [s0] = a2
  1707: 82 10 30                 ra = u64 [sp + 0x30]
  1710: 82 15 28                 s0 = u64 [sp + 0x28]
  1713: 82 16 20                 s1 = u64 [sp + 0x20]
  1716: 95 11 38                 sp = sp + 0x38
  1719: 32 00                    ret
      :                          @131
  1721: 00                       trap
      :                          @132
  1722: 00                       trap
      :                          @133
  1723: 00                       trap
      :                          @134 [@dyn 15]
  1724: 82 72                    t0 = u64 [a0]
  1726: 33 09 00 f0              a2 = 0xfffffffffffff000
  1730: 95 2a ff ef              a3 = t0 + 0xffffffffffffefff
  1734: ac 9a 27                 jump @140 if a3 <u a2
      :                          @135
  1737: 82 77 08                 a0 = u64 [a0 + 0x8]
  1740: 33 09 10 00 03           a2 = 0x30010
  1745: 95 99 00 10              a2 = a2 + 0x1000
  1749: 01                       fallthrough
      :                          @136
  1750: 82 9a                    a3 = u64 [a2]
  1752: c9 a9 0b                 a4 = a2 - a3
  1755: ab 7b 12                 jump @140 if a4 != a0
      :                          @137
  1758: c9 2a 0b                 a4 = a3 - t0
  1761: 01                       fallthrough
      :                          @138
  1762: 82 9c                    a5 = u64 [a2]
  1764: ab ac f2                 jump @136 if a5 != a3
      :                          @139
  1767: 7b 9b                    u64 [a2] = a4
  1769: 33 08                    a1 = 0
  1771: 32 00                    ret
      :                          @140
  1773: 32 00                    ret
      :                          @141 [@dyn 16]
  1775: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  1778: 7b 10 18                 u64 [sp + 0x18] = ra
  1781: 7b 15 10                 u64 [sp + 0x10] = s0
  1784: 7b 16 08                 u64 [sp + 0x8] = s1
  1787: 64 75                    s0 = a0
  1789: 82 7a 10                 a3 = u64 [a0 + 0x10]
  1792: 82 77                    a0 = u64 [a0]
  1794: c9 a7 07                 a0 = a0 - a3
  1797: 64 96                    s1 = a2
  1799: ac 97 2a                 jump @144 if a0 <u a2
      :                          @142
  1802: 7b 1a                    u64 [sp] = a3
  1804: 82 57 08                 a0 = u64 [s0 + 0x8]
  1807: c8 a7 07                 a0 = a0 + a3
  1810: 64 69                    a2 = s1
  1812: 50 10 22 41 01           ra = 34, jump @163
      :                          @143 [@dyn 17]
  1817: 82 17                    a0 = u64 [sp]
  1819: c8 76 06                 s1 = s1 + a0
  1822: 7b 56 10                 u64 [s0 + 0x10] = s1
  1825: 33 07                    a0 = 0
  1827: 82 10 18                 ra = u64 [sp + 0x18]
  1830: 82 15 10                 s0 = u64 [sp + 0x10]
  1833: 82 16 08                 s1 = u64 [sp + 0x8]
  1836: 95 11 20                 sp = sp + 0x20
  1839: 32 00                    ret
      :                          @144
  1841: 64 57                    a0 = s0
  1843: 7b 18                    u64 [sp] = a1
  1845: 64 a8                    a1 = a3
  1847: 64 69                    a2 = s1
  1849: 50 10 24 8c fc           ra = 36, jump @57
      :                          @145 [@dyn 18]
  1854: 82 18                    a1 = u64 [sp]
  1856: 82 5a 10                 a3 = u64 [s0 + 0x10]
  1859: 28 c7                    jump @142
      :                          @146 [@dyn 19]
  1861: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  1864: 7b 10 20                 u64 [sp + 0x20] = ra
  1867: 7b 15 18                 u64 [sp + 0x18] = s0
  1870: 7b 16 10                 u64 [sp + 0x10] = s1
  1873: 64 86                    s1 = a1
  1875: 83 88                    i32 a1 = a1 + 0
  1877: 33 09 80 00              a2 = 0x80
  1881: 64 7a                    a3 = a0
  1883: ae 98 2b                 jump @151 if a1 >=u a2
      :                          @147
  1886: 82 a8 10                 a1 = u64 [a3 + 0x10]
  1889: 82 a7                    a0 = u64 [a3]
  1891: ab 78 12                 jump @150 if a1 != a0
      :                          @148
  1894: 64 a7                    a0 = a3
  1896: 64 a5                    s0 = a3
  1898: 50 10 28 11 fe           ra = 40, jump @101
      :                          @149 [@dyn 20]
  1903: 64 5a                    a3 = s0
  1905: 82 58 10                 a1 = u64 [s0 + 0x10]
  1908: 01                       fallthrough
      :                          @150
  1909: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1912: c8 87 07                 a0 = a0 + a1
  1915: 78 76                    u8 [a0] = s1
  1917: 95 88 01                 a1 = a1 + 0x1
  1920: 7b a8 10                 u64 [a3 + 0x10] = a1
  1923: 28 ab 00                 jump @159
      :                          @151
  1926: 8b 67 0b                 i32 a0 = s1 >> 0xb
  1929: 48 11 0c                 u32 [sp + 12] = 0
  1932: 52 07 1c                 jump @153 if a0 != 0
      :                          @152
  1935: 98 67 06                 a0 = s1 >> 0x6
  1938: 86 77 c0 00              a0 = a0 | 0xc0
  1942: 78 17 0c                 u8 [sp + 0xc] = a0
  1945: 84 67 3f                 a0 = s1 & 0x3f
  1948: 86 77 80 00              a0 = a0 | 0x80
  1952: 78 17 0d                 u8 [sp + 0xd] = a0
  1955: 33 06 02                 s1 = 0x2
  1958: 28 63                    jump @156
      :                          @153
  1960: 8b 67 10                 i32 a0 = s1 >> 0x10
  1963: 52 07 29                 jump @155 if a0 != 0
      :                          @154
  1966: 98 67 0c                 a0 = s1 >> 0xc
  1969: 86 77 e0 00              a0 = a0 | 0xe0
  1973: 78 17 0c                 u8 [sp + 0xc] = a0
  1976: 97 67 34                 a0 = s1 << 0x34
  1979: 98 77 3a                 a0 = a0 >> 0x3a
  1982: 95 77 80 00              a0 = a0 + 0x80
  1986: 78 17 0d                 u8 [sp + 0xd] = a0
  1989: 84 67 3f                 a0 = s1 & 0x3f
  1992: 86 77 80 00              a0 = a0 | 0x80
  1996: 78 17 0e                 u8 [sp + 0xe] = a0
  1999: 33 06 03                 s1 = 0x3
  2002: 28 37                    jump @156
      :                          @155
  2004: 97 67 2b                 a0 = s1 << 0x2b
  2007: 98 77 3d                 a0 = a0 >> 0x3d
  2010: 95 77 f0 00              a0 = a0 + 0xf0
  2014: 78 17 0c                 u8 [sp + 0xc] = a0
  2017: 97 67 2e                 a0 = s1 << 0x2e
  2020: 98 77 3a                 a0 = a0 >> 0x3a
  2023: 95 77 80 00              a0 = a0 + 0x80
  2027: 78 17 0d                 u8 [sp + 0xd] = a0
  2030: 97 67 34                 a0 = s1 << 0x34
  2033: 98 77 3a                 a0 = a0 >> 0x3a
  2036: 95 77 80 00              a0 = a0 + 0x80
  2040: 78 17 0e                 u8 [sp + 0xe] = a0
  2043: 84 67 3f                 a0 = s1 & 0x3f
  2046: 86 77 80 00              a0 = a0 | 0x80
  2050: 78 17 0f                 u8 [sp + 0xf] = a0
  2053: 33 06 04                 s1 = 0x4
  2056: 01                       fallthrough
      :                          @156
  2057: 82 a5 10                 s0 = u64 [a3 + 0x10]
  2060: 82 a7                    a0 = u64 [a3]
  2062: c9 57 07                 a0 = a0 - s0
  2065: ac 67 2d                 jump @160 if a0 <u s1
      :                          @157
  2068: 7b 1a                    u64 [sp] = a3
  2070: 82 a7 08                 a0 = u64 [a3 + 0x8]
  2073: c8 57 07                 a0 = a0 + s0
  2076: 95 18 0c                 a1 = sp + 0xc
  2079: 64 69                    a2 = s1
  2081: 50 10 2a 34              ra = 42, jump @163
      :                          @158 [@dyn 21]
  2085: c8 56 06                 s1 = s1 + s0
  2088: 82 17                    a0 = u64 [sp]
  2090: 7b 76 10                 u64 [a0 + 0x10] = s1
  2093: 01                       fallthrough
      :                          @159
  2094: 33 07                    a0 = 0
  2096: 82 10 20                 ra = u64 [sp + 0x20]
  2099: 82 15 18                 s0 = u64 [sp + 0x18]
  2102: 82 16 10                 s1 = u64 [sp + 0x10]
  2105: 95 11 28                 sp = sp + 0x28
  2108: 32 00                    ret
      :                          @160
  2110: 64 a7                    a0 = a3
  2112: 64 58                    a1 = s0
  2114: 64 69                    a2 = s1
  2116: 64 a5                    s0 = a3
  2118: 50 10 2c 7f fb           ra = 44, jump @57
      :                          @161 [@dyn 22]
  2123: 64 5a                    a3 = s0
  2125: 82 55 10                 s0 = u64 [s0 + 0x10]
  2128: 28 c4                    jump @157
      :                          @162 [@dyn 23]
  2130: 28 44 04                 jump @245
      :                          @163
  2133: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  2136: 7b 10 18                 u64 [sp + 0x18] = ra
  2139: 7b 15 10                 u64 [sp + 0x10] = s0
  2142: 7b 16 08                 u64 [sp + 0x8] = s1
  2145: 53 19 10 64              jump @172 if a2 <u 16
      :                          @164
  2149: 8d 7a                    i32 a3 = -a0
  2151: 84 a2 07                 t0 = a3 & 0x7
  2154: c8 27 0b                 a4 = a0 + t0
  2157: 51 02 15                 jump @167 if t0 == 0
      :                          @165
  2160: 64 8c                    a5 = a1
  2162: 64 75                    s0 = a0
  2164: 01                       fallthrough
      :                          @166
  2165: 7c ca                    a3 = u8 [a5]
  2167: 78 5a                    u8 [s0] = a3
  2169: 95 55 01                 s0 = s0 + 0x1
  2172: 95 cc 01                 a5 = a5 + 0x1
  2175: ac b5 f6                 jump @166 if s0 <u a4
      :                          @167
  2178: c8 28 03                 t1 = a1 + t0
  2181: c9 29 02                 t0 = a2 - t0
  2184: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  2187: 84 38 07                 a1 = t1 & 0x7
  2190: c8 4b 0a                 a3 = a4 + t2
  2193: 51 08 3b                 jump @174 if a1 == 0
      :                          @168
  2196: 58 04 4b                 jump @177 if t2 <=s 0
      :                          @169
  2199: 97 38 03                 a1 = t1 << 0x3
  2202: 84 80 38                 ra = a1 & 0x38
  2205: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  2208: 82 c5                    s0 = u64 [a5]
  2210: 8d 88                    i32 a1 = -a1
  2212: 84 88 38                 a1 = a1 & 0x38
  2215: 95 cc 08                 a5 = a5 + 0x8
  2218: 01                       fallthrough
      :                          @170
  2219: 82 c6                    s1 = u64 [a5]
  2221: d0 05 05                 s0 = s0 >> ra
  2224: cf 86 09                 a2 = s1 << a1
  2227: d4 59 09                 a2 = a2 | s0
  2230: 7b b9                    u64 [a4] = a2
  2232: 95 bb 08                 a4 = a4 + 0x8
  2235: 95 cc 08                 a5 = a5 + 0x8
  2238: 64 65                    s0 = s1
  2240: ac ab eb                 jump @170 if a4 <u a3
      :                          @171
  2243: 28 1c                    jump @177
      :                          @172
  2245: 64 7a                    a3 = a0
  2247: 52 09 21                 jump @178 if a2 != 0
      :                          @173
  2250: 28 2f                    jump @180
      :                          @174
  2252: 58 04 13                 jump @177 if t2 <=s 0
      :                          @175
  2255: 64 38                    a1 = t1
  2257: 01                       fallthrough
      :                          @176
  2258: 82 89                    a2 = u64 [a1]
  2260: 7b b9                    u64 [a4] = a2
  2262: 95 bb 08                 a4 = a4 + 0x8
  2265: 95 88 08                 a1 = a1 + 0x8
  2268: ac ab f6                 jump @176 if a4 <u a3
      :                          @177
  2271: c8 43 08                 a1 = t1 + t2
  2274: 84 29 07                 a2 = t0 & 0x7
  2277: 51 09 14                 jump @180 if a2 == 0
      :                          @178
  2280: c8 a9 09                 a2 = a2 + a3
  2283: 01                       fallthrough
      :                          @179
  2284: 7c 8b                    a4 = u8 [a1]
  2286: 78 ab                    u8 [a3] = a4
  2288: 95 aa 01                 a3 = a3 + 0x1
  2291: 95 88 01                 a1 = a1 + 0x1
  2294: ac 9a f6                 jump @179 if a3 <u a2
      :                          @180
  2297: 82 10 18                 ra = u64 [sp + 0x18]
  2300: 82 15 10                 s0 = u64 [sp + 0x10]
  2303: 82 16 08                 s1 = u64 [sp + 0x8]
  2306: 95 11 20                 sp = sp + 0x20
  2309: 32 00                    ret
      :                          @181 [@dyn 24]
  2311: 82 77                    a0 = u64 [a0]
  2313: 01                       fallthrough
      :                          @182
  2314: 28                       jump @182
      :                          @183
  2315: 95 11 a8                 sp = sp + 0xffffffffffffffa8
  2318: 7b 10 50                 u64 [sp + 0x50] = ra
  2321: 7b 15 48                 u64 [sp + 0x48] = s0
  2324: 7b 16 40                 u64 [sp + 0x40] = s1
  2327: 7b 18                    u64 [sp] = a1
  2329: 98 79 04                 a2 = a0 >> 0x4
  2332: 33 08 27                 a1 = 0x27
  2335: 33 0a 6a 00 01           a3 = 0x1006a
  2340: 53 29 71 02 7b           jump @186 if a2 <u 625
      :                          @184
  2345: 33 08 27                 a1 = 0x27
  2348: 95 1b 3e                 a4 = sp + 0x3e
  2351: 3a 09 00 00 03           a2 = u64 [0x30000]
  2356: 7b 19 10                 u64 [sp + 0x10] = a2
  2359: 49 11 08 f0 d8 00        u64 [sp + 8] = 0xd8f0
  2365: 33 03 7b 14              t1 = 0x147b
  2369: 33 00 ff e0 f5 05        ra = 0x5f5e0ff
  2375: 01                       fallthrough
      :                          @185
  2376: 64 72                    t0 = a0
  2378: 82 17 10                 a0 = u64 [sp + 0x10]
  2381: d6 72 07                 a0 = t0 mulhu a0
  2384: 98 77 0b                 a0 = a0 >> 0xb
  2387: 82 19 08                 a2 = u64 [sp + 0x8]
  2390: c0 97 09                 i32 a2 = a0 * a2
  2393: c8 29 06                 s1 = a2 + t0
  2396: 97 69 30                 a2 = s1 << 0x30
  2399: 98 99 32                 a2 = a2 >> 0x32
  2402: ca 39 09                 a2 = a2 * t1
  2405: 98 94 11                 t2 = a2 >> 0x11
  2408: 98 99 10                 a2 = a2 >> 0x10
  2411: 84 99 fe 07              a2 = a2 & 0x7fe
  2415: 96 4c 9c                 a5 = t2 * 0xffffffffffffff9c
  2418: c8 6c 0c                 a5 = a5 + s1
  2421: 97 cc 31                 a5 = a5 << 0x31
  2424: 98 cc 30                 a5 = a5 >> 0x30
  2427: c8 a9 09                 a2 = a2 + a3
  2430: 7c 96                    s1 = u8 [a2]
  2432: 7c 99 01                 a2 = u8 [a2 + 0x1]
  2435: c8 ac 0c                 a5 = a5 + a3
  2438: 7c c5 01                 s0 = u8 [a5 + 0x1]
  2441: 7c cc                    a5 = u8 [a5]
  2443: 78 b9 ff                 u8 [a4 + 0xffffffffffffffff] = a2
  2446: 78 b6 fe                 u8 [a4 + 0xfffffffffffffffe] = s1
  2449: 78 b5 01                 u8 [a4 + 0x1] = s0
  2452: 78 bc                    u8 [a4] = a5
  2454: 95 88 fc                 a1 = a1 + 0xfffffffffffffffc
  2457: 95 bb fc                 a4 = a4 + 0xfffffffffffffffc
  2460: ac 20 ac                 jump @185 if ra <u t0
      :                          @186
  2463: 54 17 63 36              jump @188 if a0 <=u 99
      :                          @187
  2467: 97 79 30                 a2 = a0 << 0x30
  2470: 98 99 32                 a2 = a2 >> 0x32
  2473: 96 99 7b 14              a2 = a2 * 0x147b
  2477: 98 99 11                 a2 = a2 >> 0x11
  2480: 96 9b 9c                 a4 = a2 * 0xffffffffffffff9c
  2483: c8 b7 07                 a0 = a0 + a4
  2486: 97 77 31                 a0 = a0 << 0x31
  2489: 98 77 30                 a0 = a0 >> 0x30
  2492: 95 88 fe                 a1 = a1 + 0xfffffffffffffffe
  2495: c8 a7 07                 a0 = a0 + a3
  2498: 7c 7b 01                 a4 = u8 [a0 + 0x1]
  2501: 7c 77                    a0 = u8 [a0]
  2503: 95 1c 19                 a5 = sp + 0x19
  2506: c8 8c 0c                 a5 = a5 + a1
  2509: 78 cb 01                 u8 [a5 + 0x1] = a4
  2512: 78 c7                    u8 [a5] = a0
  2514: 64 97                    a0 = a2
  2516: 01                       fallthrough
      :                          @188
  2517: 55 17 0a 14              jump @190 if a0 >=u 10
      :                          @189
  2521: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
  2524: 95 19 19                 a2 = sp + 0x19
  2527: c8 89 09                 a2 = a2 + a1
  2530: 83 77 30                 i32 a0 = a0 + 0x30
  2533: 78 97                    u8 [a2] = a0
  2535: 28 1c                    jump @191
      :                          @190
  2537: 97 77 01                 a0 = a0 << 0x1
  2540: 95 88 fe                 a1 = a1 + 0xfffffffffffffffe
  2543: c8 a7 07                 a0 = a0 + a3
  2546: 7c 79 01                 a2 = u8 [a0 + 0x1]
  2549: 7c 77                    a0 = u8 [a0]
  2551: 95 1a 19                 a3 = sp + 0x19
  2554: c8 8a 0a                 a3 = a3 + a1
  2557: 78 a9 01                 u8 [a3 + 0x1] = a2
  2560: 78 a7                    u8 [a3] = a0
  2562: 01                       fallthrough
      :                          @191
  2563: 95 1a 19                 a3 = sp + 0x19
  2566: c8 8a 0a                 a3 = a3 + a1
  2569: 9a 8b 27                 a4 = 0x27 - a1
  2572: 33 08 68 00 01           a1 = 0x10068
  2577: 82 17                    a0 = u64 [sp]
  2579: 33 09                    a2 = 0
  2581: 50 10 32 12              ra = 50, jump @193
      :                          @192 [@dyn 25]
  2585: 82 10 50                 ra = u64 [sp + 0x50]
  2588: 82 15 48                 s0 = u64 [sp + 0x48]
  2591: 82 16 40                 s1 = u64 [sp + 0x40]
  2594: 95 11 58                 sp = sp + 0x58
  2597: 32 00                    ret
      :                          @193
  2599: 95 11 98                 sp = sp + 0xffffffffffffff98
  2602: 7b 10 60                 u64 [sp + 0x60] = ra
  2605: 7b 15 58                 u64 [sp + 0x58] = s0
  2608: 7b 16 50                 u64 [sp + 0x50] = s1
  2611: 80 73 34                 t1 = u32 [a0 + 0x34]
  2614: 7b 1a 20                 u64 [sp + 0x20] = a3
  2617: 64 9c                    a5 = a2
  2619: 84 36 01                 s1 = t1 & 0x1
  2622: 33 02 2b                 t0 = 0x2b
  2625: 33 09 00 00 11           a2 = 0x110000
  2630: 84 3a 04                 a3 = t1 & 0x4
  2633: 7b 1b 28                 u64 [sp + 0x28] = a4
  2636: c8 b6 04                 t2 = s1 + a4
  2639: 7b 1c 30                 u64 [sp + 0x30] = a5
  2642: 52 0a 10                 jump @196 if a3 != 0
      :                          @194
  2645: 49 11 38                 u64 [sp + 56] = 0
  2648: 82 78                    a1 = u64 [a0]
  2650: 94 69 2b                 a2 = 0x2b if s1 != 0
  2653: 52 08 35                 jump @200 if a1 != 0
      :                          @195
  2656: 28 56                    jump @205
      :                          @196
  2658: 7b 18 38                 u64 [sp + 0x38] = a1
  2661: 33 09                    a2 = 0
  2663: 51 0c 1b                 jump @199 if a5 == 0
      :                          @197
  2666: 82 1b 38                 a4 = u64 [sp + 0x38]
  2669: 01                       fallthrough
      :                          @198
  2670: 7d b5                    s0 = i8 [a4]
  2672: 89 55 c0                 s0 = s0 <s 0xffffffffffffffc0
  2675: 85 5a 01                 a3 = s0 ^ 0x1
  2678: c8 a9 09                 a2 = a2 + a3
  2681: 95 cc ff                 a5 = a5 + 0xffffffffffffffff
  2684: 95 bb 01                 a4 = a4 + 0x1
  2687: 52 0c ef                 jump @198 if a5 != 0
      :                          @199
  2690: c8 94 04                 t2 = t2 + a2
  2693: 33 09 00 00 11           a2 = 0x110000
  2698: 82 78                    a1 = u64 [a0]
  2700: db 62 09                 a2 = t0 if s1 != 0
  2703: 51 08 27                 jump @205 if a1 == 0
      :                          @200
  2706: 82 7a 08                 a3 = u64 [a0 + 0x8]
  2709: ae a4 21                 jump @205 if t2 >=u a3
      :                          @201
  2712: 84 38 08                 a1 = t1 & 0x8
  2715: 52 08 50                 jump @208 if a1 != 0
      :                          @202
  2718: 7c 76 38                 s1 = u8 [a0 + 0x38]
  2721: c9 4a 0a                 a3 = a3 - t2
  2724: 7b 19 18                 u64 [sp + 0x18] = a2
  2727: 5a 16 01 9d 00           jump @215 if s1 >s 1
      :                          @203
  2732: 52 06 aa 00              jump @217 if s1 != 0
      :                          @204
  2736: 7b 1a 10                 u64 [sp + 0x10] = a3
  2739: 28 a9 00                 jump @218
      :                          @205
  2742: 82 75 20                 s0 = u64 [a0 + 0x20]
  2745: 82 76 28                 s1 = u64 [a0 + 0x28]
  2748: 64 57                    a0 = s0
  2750: 64 68                    a1 = s1
  2752: 82 1a 38                 a3 = u64 [sp + 0x38]
  2755: 82 1b 30                 a4 = u64 [sp + 0x30]
  2758: 50 10 34 6c 01           ra = 52, jump @238
      :                          @206 [@dyn 26]
  2763: 33 08 01                 a1 = 0x1
  2766: 52 07 bb 00              jump @223 if a0 != 0
      :                          @207
  2770: 82 6c 18                 a5 = u64 [s1 + 0x18]
  2773: 64 57                    a0 = s0
  2775: 82 18 20                 a1 = u64 [sp + 0x20]
  2778: 82 19 28                 a2 = u64 [sp + 0x28]
  2781: 82 10 60                 ra = u64 [sp + 0x60]
  2784: 82 15 58                 s0 = u64 [sp + 0x58]
  2787: 82 16 50                 s1 = u64 [sp + 0x50]
  2790: 95 11 68                 sp = sp + 0x68
  2793: 32 0c                    jump [a5]
      :                          @208
  2795: 7b 1a 40                 u64 [sp + 0x40] = a3
  2798: 64 45                    s0 = t2
  2800: 81 78 30                 a1 = i32 [a0 + 0x30]
  2803: 7b 18 10                 u64 [sp + 0x10] = a1
  2806: 7c 7a 38                 a3 = u8 [a0 + 0x38]
  2809: 7b 1a 08                 u64 [sp + 0x8] = a3
  2812: 82 7a 20                 a3 = u64 [a0 + 0x20]
  2815: 82 78 28                 a1 = u64 [a0 + 0x28]
  2818: 48 17 30 30              u32 [a0 + 48] = 0x30
  2822: 7b 17                    u64 [sp] = a0
  2824: 46 17 38 01              u8 [a0 + 56] = 0x1
  2828: 7b 1a 48                 u64 [sp + 0x48] = a3
  2831: 64 a7                    a0 = a3
  2833: 64 86                    s1 = a1
  2835: 82 1a 38                 a3 = u64 [sp + 0x38]
  2838: 82 1b 30                 a4 = u64 [sp + 0x30]
  2841: 50 10 36 19 01           ra = 54, jump @238
      :                          @209 [@dyn 27]
  2846: 52 07 67                 jump @222 if a0 != 0
      :                          @210
  2849: 82 17 40                 a0 = u64 [sp + 0x40]
  2852: c9 57 05                 s0 = a0 - s0
  2855: 95 55 01                 s0 = s0 + 0x1
  2858: 01                       fallthrough
      :                          @211
  2859: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  2862: 51 05 c6 00              jump @233 if s0 == 0
      :                          @212
  2866: 82 69 20                 a2 = u64 [s1 + 0x20]
  2869: 33 08 30                 a1 = 0x30
  2872: 82 17 48                 a0 = u64 [sp + 0x48]
  2875: b4 90 01 38              ra = 56, jump [a2]
      :                          @213 [@dyn 28]
  2879: 51 07 ec                 jump @211 if a0 == 0
      :                          @214
  2882: 28 43                    jump @222
      :                          @215
  2884: 52 16 02 12              jump @217 if s1 != 2
      :                          @216
  2888: 98 a6 01                 s1 = a3 >> 0x1
  2891: 95 a8 01                 a1 = a3 + 0x1
  2894: 98 88 01                 a1 = a1 >> 0x1
  2897: 7b 18 10                 u64 [sp + 0x10] = a1
  2900: 28 08                    jump @218
      :                          @217
  2902: 64 a6                    s1 = a3
  2904: 49 11 10                 u64 [sp + 16] = 0
  2907: 01                       fallthrough
      :                          @218
  2908: 82 78 20                 a1 = u64 [a0 + 0x20]
  2911: 7b 18 48                 u64 [sp + 0x48] = a1
  2914: 82 75 28                 s0 = u64 [a0 + 0x28]
  2917: 81 77 30                 a0 = i32 [a0 + 0x30]
  2920: 7b 17 40                 u64 [sp + 0x40] = a0
  2923: 95 66 01                 s1 = s1 + 0x1
  2926: 01                       fallthrough
      :                          @219
  2927: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
  2930: 51 06 27                 jump @224 if s1 == 0
      :                          @220
  2933: 82 59 20                 a2 = u64 [s0 + 0x20]
  2936: 82 17 48                 a0 = u64 [sp + 0x48]
  2939: 82 18 40                 a1 = u64 [sp + 0x40]
  2942: b4 90 01 3a              ra = 58, jump [a2]
      :                          @221 [@dyn 29]
  2946: 51 07 ed                 jump @219 if a0 == 0
      :                          @222
  2949: 33 08 01                 a1 = 0x1
  2952: 01                       fallthrough
      :                          @223
  2953: 64 87                    a0 = a1
  2955: 82 10 60                 ra = u64 [sp + 0x60]
  2958: 82 15 58                 s0 = u64 [sp + 0x58]
  2961: 82 16 50                 s1 = u64 [sp + 0x50]
  2964: 95 11 68                 sp = sp + 0x68
  2967: 32 00                    ret
      :                          @224
  2969: 82 16 48                 s1 = u64 [sp + 0x48]
  2972: 64 67                    a0 = s1
  2974: 64 58                    a1 = s0
  2976: 82 19 18                 a2 = u64 [sp + 0x18]
  2979: 82 1a 38                 a3 = u64 [sp + 0x38]
  2982: 82 1b 30                 a4 = u64 [sp + 0x30]
  2985: 50 10 3c 89 00           ra = 60, jump @238
      :                          @225 [@dyn 30]
  2990: 33 08 01                 a1 = 0x1
  2993: 52 07 d8                 jump @223 if a0 != 0
      :                          @226
  2996: 82 5a 18                 a3 = u64 [s0 + 0x18]
  2999: 64 67                    a0 = s1
  3001: 82 18 20                 a1 = u64 [sp + 0x20]
  3004: 82 19 28                 a2 = u64 [sp + 0x28]
  3007: b4 a0 01 3e              ra = 62, jump [a3]
      :                          @227 [@dyn 31]
  3011: 33 08 01                 a1 = 0x1
  3014: 52 07 c3                 jump @223 if a0 != 0
      :                          @228
  3017: 82 17 10                 a0 = u64 [sp + 0x10]
  3020: 9a 77                    a0 = -a0
  3022: 7b 17 38                 u64 [sp + 0x38] = a0
  3025: 33 06 ff                 s1 = 0xffffffffffffffff
  3028: 01                       fallthrough
      :                          @229
  3029: 82 17 38                 a0 = u64 [sp + 0x38]
  3032: c8 67 07                 a0 = a0 + s1
  3035: 51 17 ff 42              jump @236 if a0 == 4294967295
      :                          @230
  3039: 82 59 20                 a2 = u64 [s0 + 0x20]
  3042: 82 17 48                 a0 = u64 [sp + 0x48]
  3045: 82 18 40                 a1 = u64 [sp + 0x40]
  3048: b4 90 01 40              ra = 64, jump [a2]
      :                          @231 [@dyn 32]
  3052: 95 66 01                 s1 = s1 + 0x1
  3055: 51 07 e6                 jump @229 if a0 == 0
      :                          @232
  3058: 28 37                    jump @237
      :                          @233
  3060: 82 6a 18                 a3 = u64 [s1 + 0x18]
  3063: 82 17 48                 a0 = u64 [sp + 0x48]
  3066: 82 18 20                 a1 = u64 [sp + 0x20]
  3069: 82 19 28                 a2 = u64 [sp + 0x28]
  3072: b4 a0 01 42              ra = 66, jump [a3]
      :                          @234 [@dyn 33]
  3076: 33 08 01                 a1 = 0x1
  3079: 52 07 82                 jump @223 if a0 != 0
      :                          @235
  3082: 33 08                    a1 = 0
  3084: 82 16                    s1 = u64 [sp]
  3086: 82 17 10                 a0 = u64 [sp + 0x10]
  3089: 7a 67 30                 u32 [s1 + 0x30] = a0
  3092: 82 17 08                 a0 = u64 [sp + 0x8]
  3095: 78 67 38                 u8 [s1 + 0x38] = a0
  3098: 28 6f ff                 jump @223
      :                          @236
  3101: 82 16 10                 s1 = u64 [sp + 0x10]
  3104: 82 17 10                 a0 = u64 [sp + 0x10]
  3107: d8 76 08                 a1 = s1 <u a0
  3110: 28 63 ff                 jump @223
      :                          @237
  3113: 82 17 10                 a0 = u64 [sp + 0x10]
  3116: d8 76 08                 a1 = s1 <u a0
  3119: 28 5a ff                 jump @223
      :                          @238
  3122: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  3125: 7b 10 20                 u64 [sp + 0x20] = ra
  3128: 7b 15 18                 u64 [sp + 0x18] = s0
  3131: 7b 16 10                 u64 [sp + 0x10] = s1
  3134: 83 9c                    i32 a5 = a2 + 0
  3136: 33 02 00 00 11           t0 = 0x110000
  3141: 64 a6                    s1 = a3
  3143: 64 85                    s0 = a1
  3145: 64 7a                    a3 = a0
  3147: aa 2c 20                 jump @241 if a5 == t0
      :                          @239
  3150: 82 5c 20                 a5 = u64 [s0 + 0x20]
  3153: 64 a7                    a0 = a3
  3155: 64 98                    a1 = a2
  3157: 7b 1b 08                 u64 [sp + 0x8] = a4
  3160: 7b 1a                    u64 [sp] = a3
  3162: b4 c0 01 44              ra = 68, jump [a5]
      :                          @240 [@dyn 34]
  3166: 82 1a                    a3 = u64 [sp]
  3168: 82 1b 08                 a4 = u64 [sp + 0x8]
  3171: 64 78                    a1 = a0
  3173: 33 07 01                 a0 = 0x1
  3176: 52 08 20                 jump @244 if a1 != 0
      :                          @241
  3179: 51 06 1a                 jump @243 if s1 == 0
      :                          @242
  3182: 82 5c 18                 a5 = u64 [s0 + 0x18]
  3185: 64 a7                    a0 = a3
  3187: 64 68                    a1 = s1
  3189: 64 b9                    a2 = a4
  3191: 82 10 20                 ra = u64 [sp + 0x20]
  3194: 82 15 18                 s0 = u64 [sp + 0x18]
  3197: 82 16 10                 s1 = u64 [sp + 0x10]
  3200: 95 11 28                 sp = sp + 0x28
  3203: 32 0c                    jump [a5]
      :                          @243
  3205: 33 07                    a0 = 0
  3207: 01                       fallthrough
      :                          @244
  3208: 82 10 20                 ra = u64 [sp + 0x20]
  3211: 82 15 18                 s0 = u64 [sp + 0x18]
  3214: 82 16 10                 s1 = u64 [sp + 0x10]
  3217: 95 11 28                 sp = sp + 0x28
  3220: 32 00                    ret
      :                          @245
  3222: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  3226: 7b 10 80 00              u64 [sp + 0x80] = ra
  3230: 7b 15 78                 u64 [sp + 0x78] = s0
  3233: 7b 16 70                 u64 [sp + 0x70] = s1
  3236: 49 11 60 20              u64 [sp + 96] = 0x20
  3240: 33 09 03                 a2 = 0x3
  3243: 78 19 68                 u8 [sp + 0x68] = a2
  3246: 49 11 30                 u64 [sp + 48] = 0
  3249: 49 11 40                 u64 [sp + 64] = 0
  3252: 82 86 20                 s1 = u64 [a1 + 0x20]
  3255: 7b 17 50                 u64 [sp + 0x50] = a0
  3258: 33 07 d8 01 01           a0 = 0x101d8
  3263: 7b 17 58                 u64 [sp + 0x58] = a0
  3266: 51 06 06 01              jump @267 if s1 == 0
      :                          @246
  3270: 82 87 28                 a0 = u64 [a1 + 0x28]
  3273: 51 07 73 01              jump @277 if a0 == 0
      :                          @247
  3277: 33 09                    a2 = 0
  3279: 82 85                    s0 = u64 [a1]
  3281: 7b 18 08                 u64 [sp + 0x8] = a1
  3284: 82 88 10                 a1 = u64 [a1 + 0x10]
  3287: 7b 18 18                 u64 [sp + 0x18] = a1
  3290: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  3293: 97 88 03                 a1 = a1 << 0x3
  3296: 98 88 03                 a1 = a1 >> 0x3
  3299: 95 88 01                 a1 = a1 + 0x1
  3302: 7b 18                    u64 [sp] = a1
  3304: 95 55 08                 s0 = s0 + 0x8
  3307: 96 78 38                 a1 = a0 * 0x38
  3310: 95 66 18                 s1 = s1 + 0x18
  3313: 33 07 30                 a0 = 0x30
  3316: 7b 17 10                 u64 [sp + 0x10] = a0
  3319: 01                       fallthrough
      :                          @248
  3320: 7b 18 20                 u64 [sp + 0x20] = a1
  3323: 7b 19 28                 u64 [sp + 0x28] = a2
  3326: 82 59                    a2 = u64 [s0]
  3328: 51 09 17                 jump @251 if a2 == 0
      :                          @249
  3331: 82 1a 58                 a3 = u64 [sp + 0x58]
  3334: 82 17 50                 a0 = u64 [sp + 0x50]
  3337: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  3340: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3343: b4 a0 01 46              ra = 70, jump [a3]
      :                          @250 [@dyn 35]
  3347: 52 07 4e 01              jump @280 if a0 != 0
      :                          @251
  3351: 81 67 10                 a0 = i32 [s1 + 0x10]
  3354: 7a 17 60                 u32 [sp + 0x60] = a0
  3357: 7c 67 18                 a0 = u8 [s1 + 0x18]
  3360: 78 17 68                 u8 [sp + 0x68] = a0
  3363: 81 67 14                 a0 = i32 [s1 + 0x14]
  3366: 7a 17 64                 u32 [sp + 0x64] = a0
  3369: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3372: 82 67                    a0 = u64 [s1]
  3374: 51 08 26                 jump @256 if a1 == 0
      :                          @252
  3377: 52 18 01 16              jump @254 if a1 != 1
      :                          @253
  3381: 97 77 04                 a0 = a0 << 0x4
  3384: 82 18 18                 a1 = u64 [sp + 0x18]
  3387: c8 87 07                 a0 = a0 + a1
  3390: 82 78 08                 a1 = u64 [a0 + 0x8]
  3393: 82 19 10                 a2 = u64 [sp + 0x10]
  3396: aa 98 07                 jump @255 if a1 == a2
      :                          @254
  3399: 33 08                    a1 = 0
  3401: 28 0f                    jump @257
      :                          @255
  3403: 82 77                    a0 = u64 [a0]
  3405: 82 77                    a0 = u64 [a0]
  3407: 33 08 01                 a1 = 0x1
  3410: 28 06                    jump @257
      :                          @256
  3412: 33 08 01                 a1 = 0x1
  3415: 01                       fallthrough
      :                          @257
  3416: 7b 18 30                 u64 [sp + 0x30] = a1
  3419: 7b 17 38                 u64 [sp + 0x38] = a0
  3422: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  3425: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  3428: 51 08 26                 jump @262 if a1 == 0
      :                          @258
  3431: 52 18 01 16              jump @260 if a1 != 1
      :                          @259
  3435: 97 77 04                 a0 = a0 << 0x4
  3438: 82 18 18                 a1 = u64 [sp + 0x18]
  3441: c8 87 07                 a0 = a0 + a1
  3444: 82 78 08                 a1 = u64 [a0 + 0x8]
  3447: 82 19 10                 a2 = u64 [sp + 0x10]
  3450: aa 98 07                 jump @261 if a1 == a2
      :                          @260
  3453: 33 08                    a1 = 0
  3455: 28 0f                    jump @263
      :                          @261
  3457: 82 77                    a0 = u64 [a0]
  3459: 82 77                    a0 = u64 [a0]
  3461: 33 08 01                 a1 = 0x1
  3464: 28 06                    jump @263
      :                          @262
  3466: 33 08 01                 a1 = 0x1
  3469: 01                       fallthrough
      :                          @263
  3470: 7b 18 40                 u64 [sp + 0x40] = a1
  3473: 7b 17 48                 u64 [sp + 0x48] = a0
  3476: 82 67 08                 a0 = u64 [s1 + 0x8]
  3479: 97 77 04                 a0 = a0 << 0x4
  3482: 82 18 18                 a1 = u64 [sp + 0x18]
  3485: c8 78 08                 a1 = a1 + a0
  3488: 82 87                    a0 = u64 [a1]
  3490: 82 89 08                 a2 = u64 [a1 + 0x8]
  3493: 95 18 30                 a1 = sp + 0x30
  3496: b4 90 01 48              ra = 72, jump [a2]
      :                          @264 [@dyn 36]
  3500: 52 07 b5 00              jump @280 if a0 != 0
      :                          @265
  3504: 95 55 10                 s0 = s0 + 0x10
  3507: 82 18 20                 a1 = u64 [sp + 0x20]
  3510: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  3513: 95 66 38                 s1 = s1 + 0x38
  3516: 82 19 28                 a2 = u64 [sp + 0x28]
  3519: 95 99 01                 a2 = a2 + 0x1
  3522: 52 08 36 ff              jump @248 if a1 != 0
      :                          @266
  3526: 28 69                    jump @275
      :                          @267
  3528: 82 87 18                 a0 = u64 [a1 + 0x18]
  3531: 51 07 71                 jump @277 if a0 == 0
      :                          @268
  3534: 82 85 10                 s0 = u64 [a1 + 0x10]
  3537: 33 0a                    a3 = 0
  3539: 97 79 04                 a2 = a0 << 0x4
  3542: c8 59 09                 a2 = a2 + s0
  3545: 7b 19 20                 u64 [sp + 0x20] = a2
  3548: 7b 18 08                 u64 [sp + 0x8] = a1
  3551: 82 86                    s1 = u64 [a1]
  3553: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  3556: 97 77 04                 a0 = a0 << 0x4
  3559: 98 77 04                 a0 = a0 >> 0x4
  3562: 95 77 01                 a0 = a0 + 0x1
  3565: 7b 17                    u64 [sp] = a0
  3567: 95 66 08                 s1 = s1 + 0x8
  3570: 01                       fallthrough
      :                          @269
  3571: 7b 1a 28                 u64 [sp + 0x28] = a3
  3574: 82 69                    a2 = u64 [s1]
  3576: 51 09 16                 jump @272 if a2 == 0
      :                          @270
  3579: 82 1a 58                 a3 = u64 [sp + 0x58]
  3582: 82 17 50                 a0 = u64 [sp + 0x50]
  3585: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3588: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3591: b4 a0 01 4a              ra = 74, jump [a3]
      :                          @271 [@dyn 37]
  3595: 52 07 56                 jump @280 if a0 != 0
      :                          @272
  3598: 82 57                    a0 = u64 [s0]
  3600: 82 59 08                 a2 = u64 [s0 + 0x8]
  3603: 95 18 30                 a1 = sp + 0x30
  3606: b4 90 01 4c              ra = 76, jump [a2]
      :                          @273 [@dyn 38]
  3610: 52 07 47                 jump @280 if a0 != 0
      :                          @274
  3613: 95 66 10                 s1 = s1 + 0x10
  3616: 95 55 10                 s0 = s0 + 0x10
  3619: 82 1a 28                 a3 = u64 [sp + 0x28]
  3622: 95 aa 01                 a3 = a3 + 0x1
  3625: 82 17 20                 a0 = u64 [sp + 0x20]
  3628: ab 75 c7                 jump @269 if s0 != a0
      :                          @275
  3631: 82 18 08                 a1 = u64 [sp + 0x8]
  3634: 82 1a                    a3 = u64 [sp]
  3636: 82 87 08                 a0 = u64 [a1 + 0x8]
  3639: ac 7a 0d                 jump @278 if a3 <u a0
      :                          @276
  3642: 28 2c                    jump @281
      :                          @277
  3644: 33 0a                    a3 = 0
  3646: 82 87 08                 a0 = u64 [a1 + 0x8]
  3649: 54 07 25                 jump @281 if a0 <=u 0
      :                          @278
  3652: 82 87                    a0 = u64 [a1]
  3654: 97 a8 04                 a1 = a3 << 0x4
  3657: c8 87 09                 a2 = a0 + a1
  3660: 82 1a 58                 a3 = u64 [sp + 0x58]
  3663: 82 17 50                 a0 = u64 [sp + 0x50]
  3666: 82 98                    a1 = u64 [a2]
  3668: 82 99 08                 a2 = u64 [a2 + 0x8]
  3671: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3674: b4 a0 01 4e              ra = 78, jump [a3]
      :                          @279 [@dyn 39]
  3678: 51 07 08                 jump @281 if a0 == 0
      :                          @280
  3681: 33 07 01                 a0 = 0x1
  3684: 28 05                    jump @282
      :                          @281
  3686: 33 07                    a0 = 0
  3688: 01                       fallthrough
      :                          @282
  3689: 82 10 80 00              ra = u64 [sp + 0x80]
  3693: 82 15 78                 s0 = u64 [sp + 0x78]
  3696: 82 16 70                 s1 = u64 [sp + 0x70]
  3699: 95 11 88 00              sp = sp + 0x88
  3703: 32 00                    ret
