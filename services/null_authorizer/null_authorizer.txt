// RO data = 322/324 bytes
// RW data = 8/16773152 bytes
// Stack size = 16773120 bytes
// RO data = [110, 117, 108, 108, 95, 97, 117, 116, 104, 111, 114, 105, 122, 101, 114, 32, 103, 97, 115, 32, 99, 97, 108, 108, 32, 32, 103, 97, 115, 95, 114, 101, 115, 117, 108, 116, 58, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 25, 0, 1, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57]
// RW data = [75, 89, 134, 56, 214, 197, 109, 52]
// Instructions = 1287
// Code size = 3729 bytes

      :                          @0
     0: 28 7e 01                 jump @25
      :                          @1 [@dyn 1]
     3: 95 11 78 ff              sp = sp + 0xffffffffffffff78
     7: 7b 10 80 00              u64 [sp + 0x80] = ra
    11: 64 82                    t0 = a1
    13: 80 88 34                 a1 = u32 [a1 + 0x34]
    16: 84 89 10                 a2 = a1 & 0x10
    19: 52 09 28                 jump @4 if a2 != 0
      :                          @2
    22: 84 88 20                 a1 = a1 & 0x20
    25: 52 08 52                 jump @7 if a1 != 0
      :                          @3
    28: 81 77                    a0 = i32 [a0]
    30: 89 79                    a2 = a0 <s 0
    32: 85 98 01                 a1 = a2 ^ 0x1
    35: 97 7a 20                 a3 = a0 << 0x20
    38: 98 aa 20                 a3 = a3 >> 0x20
    41: 9a 77                    a0 = -a0
    43: da 9a 07                 a0 = a3 if a2 == 0
    46: 64 29                    a2 = t0
    48: 82 10 80 00              ra = u64 [sp + 0x80]
    52: 95 11 88 00              sp = sp + 0x88
    56: 28 c8 08                 jump @176
      :                          @4
    59: 81 7a                    a3 = i32 [a0]
    61: 33 08 81 00              a1 = 0x81
    65: 95 17 7f                 a0 = sp + 0x7f
    68: 33 03 57                 t1 = 0x57
    71: 01                       fallthrough
      :                          @5
    72: 64 8b                    a4 = a1
    74: 8b ac 04                 i32 a5 = a3 >> 0x4
    77: 84 aa 0f                 a3 = a3 & 0xf
    80: 88 a8 0a                 a1 = a3 <u 0xa
    83: 33 09 30                 a2 = 0x30
    86: da 83 09                 a2 = t1 if a1 == 0
    89: be a9 09                 i32 a2 = a2 + a3
    92: 78 79                    u8 [a0] = a2
    94: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
    97: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   100: 64 ca                    a3 = a5
   102: 52 0c e2                 jump @5 if a5 != 0
      :                          @6
   105: 28 30                    jump @9
      :                          @7
   107: 81 7a                    a3 = i32 [a0]
   109: 33 08 81 00              a1 = 0x81
   113: 95 17 7f                 a0 = sp + 0x7f
   116: 33 03 37                 t1 = 0x37
   119: 01                       fallthrough
      :                          @8
   120: 64 8b                    a4 = a1
   122: 8b ac 04                 i32 a5 = a3 >> 0x4
   125: 84 aa 0f                 a3 = a3 & 0xf
   128: 88 a8 0a                 a1 = a3 <u 0xa
   131: 33 09 30                 a2 = 0x30
   134: da 83 09                 a2 = t1 if a1 == 0
   137: be a9 09                 i32 a2 = a2 + a3
   140: 78 79                    u8 [a0] = a2
   142: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   145: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   148: 64 ca                    a3 = a5
   150: 52 0c e2                 jump @8 if a5 != 0
      :                          @9
   153: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   156: 56 27 80 00 2a           jump @12 if a0 >u 128
      :                          @10
   161: 9a 8c 81 00              a5 = 0x81 - a1
   165: 64 1b                    a4 = sp
   167: c8 7b 0b                 a4 = a4 + a0
   170: 33 09 78 00 01           a2 = 0x10078
   175: 33 08 01                 a1 = 0x1
   178: 33 0a 02                 a3 = 0x2
   181: 64 27                    a0 = t0
   183: 50 10 04 76 09           ra = 4, jump @186
      :                          @11 [@dyn 2]
   188: 82 10 80 00              ra = u64 [sp + 0x80]
   192: 95 11 88 00              sp = sp + 0x88
   196: 32 00                    ret
      :                          @12
   198: 00                       trap
      :                          @13 [@dyn 3]
   199: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   203: 7b 10 80 00              u64 [sp + 0x80] = ra
   207: 64 82                    t0 = a1
   209: 80 88 34                 a1 = u32 [a1 + 0x34]
   212: 84 89 10                 a2 = a1 & 0x10
   215: 52 09 1b                 jump @16 if a2 != 0
      :                          @14
   218: 84 88 20                 a1 = a1 & 0x20
   221: 52 08 45                 jump @19 if a1 != 0
      :                          @15
   224: 82 77                    a0 = u64 [a0]
   226: 33 08 01                 a1 = 0x1
   229: 64 29                    a2 = t0
   231: 82 10 80 00              ra = u64 [sp + 0x80]
   235: 95 11 88 00              sp = sp + 0x88
   239: 28 11 08                 jump @176
      :                          @16
   242: 82 7a                    a3 = u64 [a0]
   244: 33 08 81 00              a1 = 0x81
   248: 95 17 7f                 a0 = sp + 0x7f
   251: 33 03 57                 t1 = 0x57
   254: 01                       fallthrough
      :                          @17
   255: 64 8b                    a4 = a1
   257: 98 ac 04                 a5 = a3 >> 0x4
   260: 84 aa 0f                 a3 = a3 & 0xf
   263: 88 a8 0a                 a1 = a3 <u 0xa
   266: 33 09 30                 a2 = 0x30
   269: da 83 09                 a2 = t1 if a1 == 0
   272: be a9 09                 i32 a2 = a2 + a3
   275: 78 79                    u8 [a0] = a2
   277: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   280: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   283: 64 ca                    a3 = a5
   285: 52 0c e2                 jump @17 if a5 != 0
      :                          @18
   288: 28 30                    jump @21
      :                          @19
   290: 82 7a                    a3 = u64 [a0]
   292: 33 08 81 00              a1 = 0x81
   296: 95 17 7f                 a0 = sp + 0x7f
   299: 33 03 37                 t1 = 0x37
   302: 01                       fallthrough
      :                          @20
   303: 64 8b                    a4 = a1
   305: 98 ac 04                 a5 = a3 >> 0x4
   308: 84 aa 0f                 a3 = a3 & 0xf
   311: 88 a8 0a                 a1 = a3 <u 0xa
   314: 33 09 30                 a2 = 0x30
   317: da 83 09                 a2 = t1 if a1 == 0
   320: be a9 09                 i32 a2 = a2 + a3
   323: 78 79                    u8 [a0] = a2
   325: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   328: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   331: 64 ca                    a3 = a5
   333: 52 0c e2                 jump @20 if a5 != 0
      :                          @21
   336: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   339: 56 27 80 00 2a           jump @24 if a0 >u 128
      :                          @22
   344: 9a 8c 81 00              a5 = 0x81 - a1
   348: 64 1b                    a4 = sp
   350: c8 7b 0b                 a4 = a4 + a0
   353: 33 09 78 00 01           a2 = 0x10078
   358: 33 08 01                 a1 = 0x1
   361: 33 0a 02                 a3 = 0x2
   364: 64 27                    a0 = t0
   366: 50 10 08 bf 08           ra = 8, jump @186
      :                          @23 [@dyn 4]
   371: 82 10 80 00              ra = u64 [sp + 0x80]
   375: 95 11 88 00              sp = sp + 0x88
   379: 32 00                    ret
      :                          @24
   381: 00                       trap
      :                          @25 [export #0: 'is_authorize']
   382: 95 11 50 ff              sp = sp + 0xffffffffffffff50
   386: 7b 10 a8 00              u64 [sp + 0xa8] = ra
   390: 7b 15 a0 00              u64 [sp + 0xa0] = s0
   394: 7b 16 98 00              u64 [sp + 0x98] = s1
   398: 48 11 24                 u32 [sp + 36] = 0
   401: 0a                       ecalli 0 // 'gas'
   402: 7b 17 28                 u64 [sp + 0x28] = a0
   405: 95 17 24                 a0 = sp + 0x24
   408: 7b 17 78                 u64 [sp + 0x78] = a0
   411: 33 07 02                 a0 = 0x2
   414: 7b 17 18                 u64 [sp + 0x18] = a0
   417: 7b 17 80 00              u64 [sp + 0x80] = a0
   421: 95 17 28                 a0 = sp + 0x28
   424: 7b 17 88 00              u64 [sp + 0x88] = a0
   428: 33 07 06                 a0 = 0x6
   431: 7b 17 10                 u64 [sp + 0x10] = a0
   434: 7b 17 90 00              u64 [sp + 0x90] = a0
   438: 33 07 28 00 01           a0 = 0x10028
   443: 7b 17 08                 u64 [sp + 0x8] = a0
   446: 7b 17 48                 u64 [sp + 0x48] = a0
   449: 49 11 50 02              u64 [sp + 80] = 0x2
   453: 49 11 68                 u64 [sp + 104] = 0
   456: 95 18 78                 a1 = sp + 0x78
   459: 7b 18 58                 u64 [sp + 0x58] = a1
   462: 49 11 60 02              u64 [sp + 96] = 0x2
   466: 95 17 30                 a0 = sp + 0x30
   469: 95 18 48                 a1 = sp + 0x48
   472: 50 10 0a fd 03           ra = 10, jump @106
      :                          @26 [@dyn 5]
   477: 82 16 38                 s1 = u64 [sp + 0x38]
   480: 82 1b 40                 a4 = u64 [sp + 0x40]
   483: 82 15 30                 s0 = u64 [sp + 0x30]
   486: 33 07 02                 a0 = 0x2
   489: 33 08                    a1 = 0
   491: 33 09                    a2 = 0
   493: 64 6a                    a3 = s1
   495: 33 00 0c                 ra = 0xc
   498: 0a 64                    ecalli 100 // 'log'
   500: 01                       fallthrough
      :                          @27 [@dyn 6]
   501: 95 57 00 10 00 ff        a0 = s0 + 0xffffffffff001000
   507: 49 01 01 10 00 ff        u64 [sp + 0] = 0xffffffffff001001
   513: 53 47 01 10 00 ff 34     jump @33 if a0 <u 4278194177
      :                          @28
   520: 64 62                    t0 = s1
   522: 33 07 10 00 03           a0 = 0x30010
   527: 95 78 00 f0 ff 00        a1 = a0 + 0xfff000
   533: 33 09 ff ef ff 00        a2 = 0xffefff
   539: 01                       fallthrough
      :                          @29
   540: 82 8a                    a3 = u64 [a1]
   542: c8 97 0b                 a4 = a0 + a2
   545: c9 ab 0b                 a4 = a4 - a3
   548: ab 2b 11                 jump @33 if a4 != t0
      :                          @30
   551: c9 5a 0b                 a4 = a3 - s0
   554: 01                       fallthrough
      :                          @31
   555: 82 8c                    a5 = u64 [a1]
   557: ab ac ef                 jump @29 if a5 != a3
      :                          @32
   560: 7b 8b                    u64 [a1] = a4
   562: 33 06                    s1 = 0
   564: 01                       fallthrough
      :                          @33
   565: 48 11 24 01              u32 [sp + 36] = 0x1
   569: 0a                       ecalli 0 // 'gas'
   570: 7b 17 28                 u64 [sp + 0x28] = a0
   573: 95 17 24                 a0 = sp + 0x24
   576: 7b 17 78                 u64 [sp + 0x78] = a0
   579: 82 17 18                 a0 = u64 [sp + 0x18]
   582: 7b 17 80 00              u64 [sp + 0x80] = a0
   586: 95 17 28                 a0 = sp + 0x28
   589: 7b 17 88 00              u64 [sp + 0x88] = a0
   593: 82 17 10                 a0 = u64 [sp + 0x10]
   596: 7b 17 90 00              u64 [sp + 0x90] = a0
   600: 82 17 08                 a0 = u64 [sp + 0x8]
   603: 7b 17 48                 u64 [sp + 0x48] = a0
   606: 49 11 50 02              u64 [sp + 80] = 0x2
   610: 49 11 68                 u64 [sp + 104] = 0
   613: 95 18 78                 a1 = sp + 0x78
   616: 7b 18 58                 u64 [sp + 0x58] = a1
   619: 49 11 60 02              u64 [sp + 96] = 0x2
   623: 95 17 30                 a0 = sp + 0x30
   626: 95 18 48                 a1 = sp + 0x48
   629: 50 10 0e 60 03           ra = 14, jump @106
      :                          @34 [@dyn 7]
   634: 82 16 38                 s1 = u64 [sp + 0x38]
   637: 82 1b 40                 a4 = u64 [sp + 0x40]
   640: 82 15 30                 s0 = u64 [sp + 0x30]
   643: 33 07 02                 a0 = 0x2
   646: 33 08                    a1 = 0
   648: 33 09                    a2 = 0
   650: 64 6a                    a3 = s1
   652: 33 00 10                 ra = 0x10
   655: 0a 64                    ecalli 100 // 'log'
   657: 01                       fallthrough
      :                          @35 [@dyn 8]
   658: 95 57 00 10 00 ff        a0 = s0 + 0xffffffffff001000
   664: 82 18                    a1 = u64 [sp]
   666: ac 87 30                 jump @41 if a0 <u a1
      :                          @36
   669: 64 62                    t0 = s1
   671: 33 07 10 00 03           a0 = 0x30010
   676: 95 78 00 f0 ff 00        a1 = a0 + 0xfff000
   682: 33 09 ff ef ff 00        a2 = 0xffefff
   688: 01                       fallthrough
      :                          @37
   689: 82 8a                    a3 = u64 [a1]
   691: c8 97 0b                 a4 = a0 + a2
   694: c9 ab 0b                 a4 = a4 - a3
   697: ab 2b 11                 jump @41 if a4 != t0
      :                          @38
   700: c9 5a 0b                 a4 = a3 - s0
   703: 01                       fallthrough
      :                          @39
   704: 82 8c                    a5 = u64 [a1]
   706: ab ac ef                 jump @37 if a5 != a3
      :                          @40
   709: 7b 8b                    u64 [a1] = a4
   711: 33 06                    s1 = 0
   713: 01                       fallthrough
      :                          @41
   714: 33 05 02                 s0 = 0x2
   717: 7a 15 24                 u32 [sp + 0x24] = s0
   720: 0a                       ecalli 0 // 'gas'
   721: 7b 17 28                 u64 [sp + 0x28] = a0
   724: 95 17 24                 a0 = sp + 0x24
   727: 7b 17 78                 u64 [sp + 0x78] = a0
   730: 33 07 02                 a0 = 0x2
   733: 7b 17 80 00              u64 [sp + 0x80] = a0
   737: 95 17 28                 a0 = sp + 0x28
   740: 7b 17 88 00              u64 [sp + 0x88] = a0
   744: 33 07 06                 a0 = 0x6
   747: 7b 17 90 00              u64 [sp + 0x90] = a0
   751: 33 07 28 00 01           a0 = 0x10028
   756: 7b 17 48                 u64 [sp + 0x48] = a0
   759: 7b 15 50                 u64 [sp + 0x50] = s0
   762: 49 11 68                 u64 [sp + 104] = 0
   765: 95 17 78                 a0 = sp + 0x78
   768: 7b 17 58                 u64 [sp + 0x58] = a0
   771: 7b 15 60                 u64 [sp + 0x60] = s0
   774: 95 17 30                 a0 = sp + 0x30
   777: 95 18 48                 a1 = sp + 0x48
   780: 50 10 12 c9 02           ra = 18, jump @106
      :                          @42 [@dyn 9]
   785: 82 16 38                 s1 = u64 [sp + 0x38]
   788: 82 1b 40                 a4 = u64 [sp + 0x40]
   791: 82 15 30                 s0 = u64 [sp + 0x30]
   794: 33 07 02                 a0 = 0x2
   797: 33 08                    a1 = 0
   799: 33 09                    a2 = 0
   801: 64 6a                    a3 = s1
   803: 33 00 14                 ra = 0x14
   806: 0a 64                    ecalli 100 // 'log'
   808: 01                       fallthrough
      :                          @43 [@dyn 10]
   809: 95 58 00 10 00 ff        a1 = s0 + 0xffffffffff001000
   815: 53 48 01 10 00 ff 32     jump @49 if a1 <u 4278194177
      :                          @44
   822: 64 62                    t0 = s1
   824: 33 07 10 00 03           a0 = 0x30010
   829: 95 78 00 f0 ff 00        a1 = a0 + 0xfff000
   835: 33 09 ff ef ff 00        a2 = 0xffefff
   841: 01                       fallthrough
      :                          @45
   842: 82 8a                    a3 = u64 [a1]
   844: c8 97 0b                 a4 = a0 + a2
   847: c9 ab 0b                 a4 = a4 - a3
   850: ab 2b 0f                 jump @49 if a4 != t0
      :                          @46
   853: c9 5a 0b                 a4 = a3 - s0
   856: 01                       fallthrough
      :                          @47
   857: 82 8c                    a5 = u64 [a1]
   859: ab ac ef                 jump @45 if a5 != a3
      :                          @48
   862: 7b 8b                    u64 [a1] = a4
   864: 01                       fallthrough
      :                          @49
   865: 33 07 00 00 01           a0 = 0x10000
   870: 33 08                    a1 = 0
   872: 82 10 a8 00              ra = u64 [sp + 0xa8]
   876: 82 15 a0 00              s0 = u64 [sp + 0xa0]
   880: 82 16 98 00              s1 = u64 [sp + 0x98]
   884: 95 11 b0 00              sp = sp + 0xb0
   888: 32 00                    ret
      :                          @50
   890: 95 11 b8                 sp = sp + 0xffffffffffffffb8
   893: 7b 10 40                 u64 [sp + 0x40] = ra
   896: 7b 15 38                 u64 [sp + 0x38] = s0
   899: 7b 16 30                 u64 [sp + 0x30] = s1
   902: c8 89 09                 a2 = a2 + a1
   905: ac 89 52                 jump @58 if a2 <u a1
      :                          @51
   908: 64 75                    s0 = a0
   910: 82 77                    a0 = u64 [a0]
   912: 97 78 01                 a1 = a0 << 0x1
   915: 33 0a 08                 a3 = 0x8
   918: e4 a9 09                 a2 = maxu(a2, a3)
   921: e4 98 06                 s1 = maxu(a1, a2)
   924: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
   927: 98 88 3f                 a1 = a1 >> 0x3f
   930: 51 07 12                 jump @53 if a0 == 0
      :                          @52
   933: 82 59 08                 a2 = u64 [s0 + 0x8]
   936: 7b 19 18                 u64 [sp + 0x18] = a2
   939: 49 11 20 01              u64 [sp + 32] = 0x1
   943: 7b 17 28                 u64 [sp + 0x28] = a0
   946: 28 06                    jump @54
      :                          @53
   948: 49 11 20                 u64 [sp + 32] = 0
   951: 01                       fallthrough
      :                          @54
   952: 64 17                    a0 = sp
   954: 95 1a 18                 a3 = sp + 0x18
   957: 64 69                    a2 = s1
   959: 50 10 16 32              ra = 22, jump @62
      :                          @55 [@dyn 11]
   963: 82 18                    a1 = u64 [sp]
   965: 82 17 08                 a0 = u64 [sp + 0x8]
   968: 51 08 14                 jump @59 if a1 == 0
      :                          @56
   971: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
   981: aa 87 0d                 jump @60 if a0 == a1
      :                          @57
   984: 52 07 18                 jump @61 if a0 != 0
      :                          @58
   987: 00                       trap
      :                          @59
   988: 7b 57 08                 u64 [s0 + 0x8] = a0
   991: 7b 56                    u64 [s0] = s1
   993: 01                       fallthrough
      :                          @60
   994: 82 10 40                 ra = u64 [sp + 0x40]
   997: 82 15 38                 s0 = u64 [sp + 0x38]
  1000: 82 16 30                 s1 = u64 [sp + 0x30]
  1003: 95 11 48                 sp = sp + 0x48
  1006: 32 00                    ret
      :                          @61
  1008: 00                       trap
      :                          @62
  1009: 64 93                    t1 = a2
  1011: 64 72                    t0 = a0
  1013: 51 08 8f 00              jump @72 if a1 == 0
      :                          @63
  1017: 95 11 c0                 sp = sp + 0xffffffffffffffc0
  1020: 7b 10 38                 u64 [sp + 0x38] = ra
  1023: 7b 15 30                 u64 [sp + 0x30] = s0
  1026: 7b 16 28                 u64 [sp + 0x28] = s1
  1029: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1032: 51 07 89 00              jump @73 if a0 == 0
      :                          @64
  1036: 82 a9 10                 a2 = u64 [a3 + 0x10]
  1039: 51 09 ba 00              jump @80 if a2 == 0
      :                          @65
  1043: 82 a8                    a1 = u64 [a3]
  1045: 33 06 10 00 03           s1 = 0x30010
  1050: 95 66 00 f0 ff 00        s1 = s1 + 0xfff000
  1056: 33 05 ff ef ff 00        s0 = 0xffefff
  1062: 01                       fallthrough
      :                          @66
  1063: 82 6a                    a3 = u64 [s1]
  1065: c8 3a 07                 a0 = a3 + t1
  1068: ac a7 e0 00              jump @86 if a0 <u a3
      :                          @67
  1072: 95 7b 01                 a4 = a0 + 0x1
  1075: 88 bc 01                 a5 = a4 <u 0x1
  1078: d8 b5 0b                 a4 = s0 <u a4
  1081: d4 cb 0b                 a4 = a4 | a5
  1084: 52 0b d0 00              jump @86 if a4 != 0
      :                          @68
  1088: 82 6b                    a4 = u64 [s1]
  1090: ab ab e5                 jump @66 if a4 != a3
      :                          @69
  1093: 7b 67                    u64 [s1] = a0
  1095: 33 0c                    a5 = 0
  1097: 7b 13 10                 u64 [sp + 0x10] = t1
  1100: 7b 12 20                 u64 [sp + 0x20] = t0
  1103: 33 05 ff ef ff 00        s0 = 0xffefff
  1109: 33 0a 10 00 03           a3 = 0x30010
  1114: 7b 1a                    u64 [sp] = a3
  1116: c8 5a 0a                 a3 = a3 + s0
  1119: c9 7a 07                 a0 = a3 - a0
  1122: 7b 17 18                 u64 [sp + 0x18] = a0
  1125: 7b 18 08                 u64 [sp + 0x8] = a1
  1128: 64 96                    s1 = a2
  1130: 50 10 18 e0 03           ra = 24, jump @156
      :                          @70 [@dyn 12]
  1135: ae 65 a5 00              jump @87 if s0 >=u s1
      :                          @71
  1139: 82 12 20                 t0 = u64 [sp + 0x20]
  1142: 82 13 10                 t1 = u64 [sp + 0x10]
  1145: 82 18 18                 a1 = u64 [sp + 0x18]
  1148: 33 07                    a0 = 0
  1150: 7b 28 08                 u64 [t0 + 0x8] = a1
  1153: 28 c9 00                 jump @93
      :                          @72
  1156: 49 12 08                 u64 [t0 + 8] = 0
  1159: 33 07 01                 a0 = 0x1
  1162: 7b 23 10                 u64 [t0 + 0x10] = t1
  1165: 7b 27                    u64 [t0] = a0
  1167: 32 00                    ret
      :                          @73
  1169: 33 07 10 00 03           a0 = 0x30010
  1174: 95 77 00 f0 ff 00        a0 = a0 + 0xfff000
  1180: 33 09 ff ef ff 00        a2 = 0xffefff
  1186: 01                       fallthrough
      :                          @74
  1187: 82 7a                    a3 = u64 [a0]
  1189: c8 3a 08                 a1 = a3 + t1
  1192: ac a8 64                 jump @86 if a1 <u a3
      :                          @75
  1195: 95 8b 01                 a4 = a1 + 0x1
  1198: 88 bc 01                 a5 = a4 <u 0x1
  1201: d8 b9 0b                 a4 = a2 <u a4
  1204: d4 cb 0b                 a4 = a4 | a5
  1207: 52 0b 55                 jump @86 if a4 != 0
      :                          @76
  1210: 82 7b                    a4 = u64 [a0]
  1212: ab ab e7                 jump @74 if a4 != a3
      :                          @77
  1215: 7b 78                    u64 [a0] = a1
  1217: 33 0c                    a5 = 0
  1219: 01                       fallthrough
      :                          @78
  1220: ab ab df                 jump @74 if a4 != a3
      :                          @79
  1223: 28 35                    jump @85
      :                          @80
  1225: 33 07 10 00 03           a0 = 0x30010
  1230: 95 77 00 f0 ff 00        a0 = a0 + 0xfff000
  1236: 33 09 ff ef ff 00        a2 = 0xffefff
  1242: 01                       fallthrough
      :                          @81
  1243: 82 7a                    a3 = u64 [a0]
  1245: c8 3a 08                 a1 = a3 + t1
  1248: ac a8 2c                 jump @86 if a1 <u a3
      :                          @82
  1251: 95 8b 01                 a4 = a1 + 0x1
  1254: 88 bc 01                 a5 = a4 <u 0x1
  1257: d8 b9 0b                 a4 = a2 <u a4
  1260: d4 cb 0b                 a4 = a4 | a5
  1263: 52 0b 1d                 jump @86 if a4 != 0
      :                          @83
  1266: 82 7b                    a4 = u64 [a0]
  1268: ab ab e7                 jump @81 if a4 != a3
      :                          @84
  1271: 7b 78                    u64 [a0] = a1
  1273: 33 0c                    a5 = 0
  1275: 01                       fallthrough
      :                          @85
  1276: 33 07 0f f0 02 01        a0 = 0x102f00f
  1282: c9 87 08                 a1 = a0 - a1
  1285: 33 07                    a0 = 0
  1287: 7b 28 08                 u64 [t0 + 0x8] = a1
  1290: 28 40                    jump @93
      :                          @86
  1292: 33 07 01                 a0 = 0x1
  1295: 7b 27 08                 u64 [t0 + 0x8] = a0
  1298: 28 38                    jump @93
      :                          @87
  1300: 64 6c                    a5 = s1
  1302: 82 16                    s1 = u64 [sp]
  1304: 95 67 00 f0 ff 00        a0 = s1 + 0xfff000
  1310: 82 12 20                 t0 = u64 [sp + 0x20]
  1313: 82 14 08                 t2 = u64 [sp + 0x8]
  1316: 82 13 10                 t1 = u64 [sp + 0x10]
  1319: 01                       fallthrough
      :                          @88
  1320: 82 78                    a1 = u64 [a0]
  1322: c8 56 09                 a2 = s1 + s0
  1325: c9 89 09                 a2 = a2 - a1
  1328: ab 49 11                 jump @92 if a2 != t2
      :                          @89
  1331: c9 c8 09                 a2 = a1 - a5
  1334: 01                       fallthrough
      :                          @90
  1335: 82 7a                    a3 = u64 [a0]
  1337: ab 8a ef                 jump @88 if a3 != a1
      :                          @91
  1340: 7b 79                    u64 [a0] = a2
  1342: 33 0b                    a4 = 0
  1344: 01                       fallthrough
      :                          @92
  1345: 82 18 18                 a1 = u64 [sp + 0x18]
  1348: 33 07                    a0 = 0
  1350: 7b 28 08                 u64 [t0 + 0x8] = a1
  1353: 01                       fallthrough
      :                          @93
  1354: 82 10 38                 ra = u64 [sp + 0x38]
  1357: 82 15 30                 s0 = u64 [sp + 0x30]
  1360: 82 16 28                 s1 = u64 [sp + 0x28]
  1363: 95 11 40                 sp = sp + 0x40
  1366: 7b 23 10                 u64 [t0 + 0x10] = t1
  1369: 7b 27                    u64 [t0] = a0
  1371: 32 00                    ret
      :                          @94
  1373: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1376: 7b 10 40                 u64 [sp + 0x40] = ra
  1379: 7b 15 38                 u64 [sp + 0x38] = s0
  1382: 7b 16 30                 u64 [sp + 0x30] = s1
  1385: 95 88 01                 a1 = a1 + 0x1
  1388: 51 08 53                 jump @102 if a1 == 0
      :                          @95
  1391: 64 75                    s0 = a0
  1393: 82 77                    a0 = u64 [a0]
  1395: 97 79 01                 a2 = a0 << 0x1
  1398: 33 0a 08                 a3 = 0x8
  1401: e4 a8 08                 a1 = maxu(a1, a3)
  1404: e4 89 06                 s1 = maxu(a2, a1)
  1407: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1410: 98 88 3f                 a1 = a1 >> 0x3f
  1413: 51 07 12                 jump @97 if a0 == 0
      :                          @96
  1416: 82 59 08                 a2 = u64 [s0 + 0x8]
  1419: 7b 19 18                 u64 [sp + 0x18] = a2
  1422: 49 11 20 01              u64 [sp + 32] = 0x1
  1426: 7b 17 28                 u64 [sp + 0x28] = a0
  1429: 28 06                    jump @98
      :                          @97
  1431: 49 11 20                 u64 [sp + 32] = 0
  1434: 01                       fallthrough
      :                          @98
  1435: 64 17                    a0 = sp
  1437: 95 1a 18                 a3 = sp + 0x18
  1440: 64 69                    a2 = s1
  1442: 50 10 1a 4f fe           ra = 26, jump @62
      :                          @99 [@dyn 13]
  1447: 82 18                    a1 = u64 [sp]
  1449: 82 17 08                 a0 = u64 [sp + 0x8]
  1452: 51 08 14                 jump @103 if a1 == 0
      :                          @100
  1455: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1465: aa 87 0d                 jump @104 if a0 == a1
      :                          @101
  1468: 52 07 18                 jump @105 if a0 != 0
      :                          @102
  1471: 00                       trap
      :                          @103
  1472: 7b 57 08                 u64 [s0 + 0x8] = a0
  1475: 7b 56                    u64 [s0] = s1
  1477: 01                       fallthrough
      :                          @104
  1478: 82 10 40                 ra = u64 [sp + 0x40]
  1481: 82 15 38                 s0 = u64 [sp + 0x38]
  1484: 82 16 30                 s1 = u64 [sp + 0x30]
  1487: 95 11 48                 sp = sp + 0x48
  1490: 32 00                    ret
      :                          @105
  1492: 00                       trap
      :                          @106
  1493: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  1496: 7b 10 30                 u64 [sp + 0x30] = ra
  1499: 7b 15 28                 u64 [sp + 0x28] = s0
  1502: 7b 16 20                 u64 [sp + 0x20] = s1
  1505: 82 8a 08                 a3 = u64 [a1 + 0x8]
  1508: 64 75                    s0 = a0
  1510: 51 0a 35                 jump @111 if a3 == 0
      :                          @107
  1513: 82 89                    a2 = u64 [a1]
  1515: 33 07                    a0 = 0
  1517: 95 9b 08                 a4 = a2 + 0x8
  1520: 01                       fallthrough
      :                          @108
  1521: 82 bc                    a5 = u64 [a4]
  1523: c8 c7 07                 a0 = a0 + a5
  1526: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  1529: 95 bb 10                 a4 = a4 + 0x10
  1532: 52 0a f5                 jump @108 if a3 != 0
      :                          @109
  1535: 82 8a 18                 a3 = u64 [a1 + 0x18]
  1538: 51 0a 24                 jump @113 if a3 == 0
      :                          @110
  1541: 82 99 08                 a2 = u64 [a2 + 0x8]
  1544: 8e 99                    a2 = a2 >u 0
  1546: 88 7a 10                 a3 = a0 <u 0x10
  1549: 85 aa 01                 a3 = a3 ^ 0x1
  1552: d4 a9 09                 a2 = a2 | a3
  1555: 89 7a                    a3 = a0 <s 0
  1557: e0 a9 09                 a2 = a2 & ~a3
  1560: 52 09 0a                 jump @112 if a2 != 0
      :                          @111
  1563: 33 07                    a0 = 0
  1565: 33 09 01                 a2 = 0x1
  1568: 28 4f                    jump @121
      :                          @112
  1570: 97 77 01                 a0 = a0 << 0x1
  1573: 01                       fallthrough
      :                          @113
  1574: 51 07 45                 jump @120 if a0 == 0
      :                          @114
  1577: 57 07 78                 jump @126 if a0 <s 0
      :                          @115
  1580: 64 52                    t0 = s0
  1582: 33 09 10 00 03           a2 = 0x30010
  1587: 95 99 00 f0 ff 00        a2 = a2 + 0xfff000
  1593: 33 0b ff ef ff 00        a4 = 0xffefff
  1599: 01                       fallthrough
      :                          @116
  1600: 82 9c                    a5 = u64 [a2]
  1602: c8 7c 0a                 a3 = a5 + a0
  1605: ac ca 5a                 jump @124 if a3 <u a5
      :                          @117
  1608: 95 a5 01                 s0 = a3 + 0x1
  1611: 88 56 01                 s1 = s0 <u 0x1
  1614: d8 5b 05                 s0 = a4 <u s0
  1617: d4 65 05                 s0 = s0 | s1
  1620: 52 05 4b                 jump @124 if s0 != 0
      :                          @118
  1623: 82 96                    s1 = u64 [a2]
  1625: ab c6 e7                 jump @116 if s1 != a5
      :                          @119
  1628: 7b 9a                    u64 [a2] = a3
  1630: 33 09 0f f0 02 01        a2 = 0x102f00f
  1636: c9 a9 09                 a2 = a2 - a3
  1639: 64 25                    s0 = t0
  1641: 28 06                    jump @121
      :                          @120
  1643: 33 09 01                 a2 = 0x1
  1646: 01                       fallthrough
      :                          @121
  1647: 7b 17                    u64 [sp] = a0
  1649: 7b 19 08                 u64 [sp + 0x8] = a2
  1652: 49 11 10                 u64 [sp + 16] = 0
  1655: 64 17                    a0 = sp
  1657: 50 10 1c 35 06           ra = 28, jump @240
      :                          @122 [@dyn 14]
  1662: 52 07 22                 jump @125 if a0 != 0
      :                          @123
  1665: 82 17 10                 a0 = u64 [sp + 0x10]
  1668: 82 18 08                 a1 = u64 [sp + 0x8]
  1671: 82 19                    a2 = u64 [sp]
  1673: 7b 57 10                 u64 [s0 + 0x10] = a0
  1676: 7b 58 08                 u64 [s0 + 0x8] = a1
  1679: 7b 59                    u64 [s0] = a2
  1681: 82 10 30                 ra = u64 [sp + 0x30]
  1684: 82 15 28                 s0 = u64 [sp + 0x28]
  1687: 82 16 20                 s1 = u64 [sp + 0x20]
  1690: 95 11 38                 sp = sp + 0x38
  1693: 32 00                    ret
      :                          @124
  1695: 00                       trap
      :                          @125
  1696: 00                       trap
      :                          @126
  1697: 00                       trap
      :                          @127 [@dyn 15]
  1698: 82 72                    t0 = u64 [a0]
  1700: 95 2a 00 10 00 ff        a3 = t0 + 0xffffffffff001000
  1706: 33 09 01 10 00 ff        a2 = 0xffffffffff001001
  1712: ac 9a 32                 jump @133 if a3 <u a2
      :                          @128
  1715: 82 73 08                 t1 = u64 [a0 + 0x8]
  1718: 33 04 10 00 03           t2 = 0x30010
  1723: 95 4a 00 f0 ff 00        a3 = t2 + 0xfff000
  1729: 33 0b ff ef ff 00        a4 = 0xffefff
  1735: 01                       fallthrough
      :                          @129
  1736: 82 ac                    a5 = u64 [a3]
  1738: c8 b4 09                 a2 = t2 + a4
  1741: c9 c9 09                 a2 = a2 - a5
  1744: ab 39 12                 jump @133 if a2 != t1
      :                          @130
  1747: c9 2c 09                 a2 = a5 - t0
  1750: 01                       fallthrough
      :                          @131
  1751: 82 a7                    a0 = u64 [a3]
  1753: ab c7 ef                 jump @129 if a0 != a5
      :                          @132
  1756: 7b a9                    u64 [a3] = a2
  1758: 33 08                    a1 = 0
  1760: 32 00                    ret
      :                          @133
  1762: 32 00                    ret
      :                          @134 [@dyn 16]
  1764: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  1767: 7b 10 18                 u64 [sp + 0x18] = ra
  1770: 7b 15 10                 u64 [sp + 0x10] = s0
  1773: 7b 16 08                 u64 [sp + 0x8] = s1
  1776: 64 75                    s0 = a0
  1778: 82 7a 10                 a3 = u64 [a0 + 0x10]
  1781: 82 77                    a0 = u64 [a0]
  1783: c9 a7 07                 a0 = a0 - a3
  1786: 64 96                    s1 = a2
  1788: ac 97 2a                 jump @137 if a0 <u a2
      :                          @135
  1791: 7b 1a                    u64 [sp] = a3
  1793: 82 57 08                 a0 = u64 [s0 + 0x8]
  1796: c8 a7 07                 a0 = a0 + a3
  1799: 64 69                    a2 = s1
  1801: 50 10 22 41 01           ra = 34, jump @156
      :                          @136 [@dyn 17]
  1806: 82 17                    a0 = u64 [sp]
  1808: c8 76 06                 s1 = s1 + a0
  1811: 7b 56 10                 u64 [s0 + 0x10] = s1
  1814: 33 07                    a0 = 0
  1816: 82 10 18                 ra = u64 [sp + 0x18]
  1819: 82 15 10                 s0 = u64 [sp + 0x10]
  1822: 82 16 08                 s1 = u64 [sp + 0x8]
  1825: 95 11 20                 sp = sp + 0x20
  1828: 32 00                    ret
      :                          @137
  1830: 64 57                    a0 = s0
  1832: 7b 18                    u64 [sp] = a1
  1834: 64 a8                    a1 = a3
  1836: 64 69                    a2 = s1
  1838: 50 10 24 4c fc           ra = 36, jump @50
      :                          @138 [@dyn 18]
  1843: 82 18                    a1 = u64 [sp]
  1845: 82 5a 10                 a3 = u64 [s0 + 0x10]
  1848: 28 c7                    jump @135
      :                          @139 [@dyn 19]
  1850: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  1853: 7b 10 20                 u64 [sp + 0x20] = ra
  1856: 7b 15 18                 u64 [sp + 0x18] = s0
  1859: 7b 16 10                 u64 [sp + 0x10] = s1
  1862: 64 86                    s1 = a1
  1864: 83 88                    i32 a1 = a1 + 0
  1866: 33 09 80 00              a2 = 0x80
  1870: 64 7a                    a3 = a0
  1872: ae 98 2b                 jump @144 if a1 >=u a2
      :                          @140
  1875: 82 a8 10                 a1 = u64 [a3 + 0x10]
  1878: 82 a7                    a0 = u64 [a3]
  1880: ab 78 12                 jump @143 if a1 != a0
      :                          @141
  1883: 64 a7                    a0 = a3
  1885: 64 a5                    s0 = a3
  1887: 50 10 28 fe fd           ra = 40, jump @94
      :                          @142 [@dyn 20]
  1892: 64 5a                    a3 = s0
  1894: 82 58 10                 a1 = u64 [s0 + 0x10]
  1897: 01                       fallthrough
      :                          @143
  1898: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1901: c8 87 07                 a0 = a0 + a1
  1904: 78 76                    u8 [a0] = s1
  1906: 95 88 01                 a1 = a1 + 0x1
  1909: 7b a8 10                 u64 [a3 + 0x10] = a1
  1912: 28 ab 00                 jump @152
      :                          @144
  1915: 8b 67 0b                 i32 a0 = s1 >> 0xb
  1918: 48 11 0c                 u32 [sp + 12] = 0
  1921: 52 07 1c                 jump @146 if a0 != 0
      :                          @145
  1924: 98 67 06                 a0 = s1 >> 0x6
  1927: 86 77 c0 00              a0 = a0 | 0xc0
  1931: 78 17 0c                 u8 [sp + 0xc] = a0
  1934: 84 67 3f                 a0 = s1 & 0x3f
  1937: 86 77 80 00              a0 = a0 | 0x80
  1941: 78 17 0d                 u8 [sp + 0xd] = a0
  1944: 33 06 02                 s1 = 0x2
  1947: 28 63                    jump @149
      :                          @146
  1949: 8b 67 10                 i32 a0 = s1 >> 0x10
  1952: 52 07 29                 jump @148 if a0 != 0
      :                          @147
  1955: 98 67 0c                 a0 = s1 >> 0xc
  1958: 86 77 e0 00              a0 = a0 | 0xe0
  1962: 78 17 0c                 u8 [sp + 0xc] = a0
  1965: 97 67 34                 a0 = s1 << 0x34
  1968: 98 77 3a                 a0 = a0 >> 0x3a
  1971: 95 77 80 00              a0 = a0 + 0x80
  1975: 78 17 0d                 u8 [sp + 0xd] = a0
  1978: 84 67 3f                 a0 = s1 & 0x3f
  1981: 86 77 80 00              a0 = a0 | 0x80
  1985: 78 17 0e                 u8 [sp + 0xe] = a0
  1988: 33 06 03                 s1 = 0x3
  1991: 28 37                    jump @149
      :                          @148
  1993: 97 67 2b                 a0 = s1 << 0x2b
  1996: 98 77 3d                 a0 = a0 >> 0x3d
  1999: 95 77 f0 00              a0 = a0 + 0xf0
  2003: 78 17 0c                 u8 [sp + 0xc] = a0
  2006: 97 67 2e                 a0 = s1 << 0x2e
  2009: 98 77 3a                 a0 = a0 >> 0x3a
  2012: 95 77 80 00              a0 = a0 + 0x80
  2016: 78 17 0d                 u8 [sp + 0xd] = a0
  2019: 97 67 34                 a0 = s1 << 0x34
  2022: 98 77 3a                 a0 = a0 >> 0x3a
  2025: 95 77 80 00              a0 = a0 + 0x80
  2029: 78 17 0e                 u8 [sp + 0xe] = a0
  2032: 84 67 3f                 a0 = s1 & 0x3f
  2035: 86 77 80 00              a0 = a0 | 0x80
  2039: 78 17 0f                 u8 [sp + 0xf] = a0
  2042: 33 06 04                 s1 = 0x4
  2045: 01                       fallthrough
      :                          @149
  2046: 82 a5 10                 s0 = u64 [a3 + 0x10]
  2049: 82 a7                    a0 = u64 [a3]
  2051: c9 57 07                 a0 = a0 - s0
  2054: ac 67 2d                 jump @153 if a0 <u s1
      :                          @150
  2057: 7b 1a                    u64 [sp] = a3
  2059: 82 a7 08                 a0 = u64 [a3 + 0x8]
  2062: c8 57 07                 a0 = a0 + s0
  2065: 95 18 0c                 a1 = sp + 0xc
  2068: 64 69                    a2 = s1
  2070: 50 10 2a 34              ra = 42, jump @156
      :                          @151 [@dyn 21]
  2074: c8 56 06                 s1 = s1 + s0
  2077: 82 17                    a0 = u64 [sp]
  2079: 7b 76 10                 u64 [a0 + 0x10] = s1
  2082: 01                       fallthrough
      :                          @152
  2083: 33 07                    a0 = 0
  2085: 82 10 20                 ra = u64 [sp + 0x20]
  2088: 82 15 18                 s0 = u64 [sp + 0x18]
  2091: 82 16 10                 s1 = u64 [sp + 0x10]
  2094: 95 11 28                 sp = sp + 0x28
  2097: 32 00                    ret
      :                          @153
  2099: 64 a7                    a0 = a3
  2101: 64 58                    a1 = s0
  2103: 64 69                    a2 = s1
  2105: 64 a5                    s0 = a3
  2107: 50 10 2c 3f fb           ra = 44, jump @50
      :                          @154 [@dyn 22]
  2112: 64 5a                    a3 = s0
  2114: 82 55 10                 s0 = u64 [s0 + 0x10]
  2117: 28 c4                    jump @150
      :                          @155 [@dyn 23]
  2119: 28 67 04                 jump @240
      :                          @156
  2122: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  2125: 7b 10 18                 u64 [sp + 0x18] = ra
  2128: 7b 15 10                 u64 [sp + 0x10] = s0
  2131: 7b 16 08                 u64 [sp + 0x8] = s1
  2134: 53 19 10 64              jump @165 if a2 <u 16
      :                          @157
  2138: 8d 7a                    i32 a3 = -a0
  2140: 84 a2 07                 t0 = a3 & 0x7
  2143: c8 27 0b                 a4 = a0 + t0
  2146: 51 02 15                 jump @160 if t0 == 0
      :                          @158
  2149: 64 8c                    a5 = a1
  2151: 64 75                    s0 = a0
  2153: 01                       fallthrough
      :                          @159
  2154: 7c ca                    a3 = u8 [a5]
  2156: 78 5a                    u8 [s0] = a3
  2158: 95 55 01                 s0 = s0 + 0x1
  2161: 95 cc 01                 a5 = a5 + 0x1
  2164: ac b5 f6                 jump @159 if s0 <u a4
      :                          @160
  2167: c8 28 03                 t1 = a1 + t0
  2170: c9 29 02                 t0 = a2 - t0
  2173: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  2176: 84 38 07                 a1 = t1 & 0x7
  2179: c8 4b 0a                 a3 = a4 + t2
  2182: 51 08 3b                 jump @167 if a1 == 0
      :                          @161
  2185: 58 04 4b                 jump @170 if t2 <=s 0
      :                          @162
  2188: 97 38 03                 a1 = t1 << 0x3
  2191: 84 80 38                 ra = a1 & 0x38
  2194: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  2197: 82 c5                    s0 = u64 [a5]
  2199: 8d 88                    i32 a1 = -a1
  2201: 84 88 38                 a1 = a1 & 0x38
  2204: 95 cc 08                 a5 = a5 + 0x8
  2207: 01                       fallthrough
      :                          @163
  2208: 82 c6                    s1 = u64 [a5]
  2210: d0 05 05                 s0 = s0 >> ra
  2213: cf 86 09                 a2 = s1 << a1
  2216: d4 59 09                 a2 = a2 | s0
  2219: 7b b9                    u64 [a4] = a2
  2221: 95 bb 08                 a4 = a4 + 0x8
  2224: 95 cc 08                 a5 = a5 + 0x8
  2227: 64 65                    s0 = s1
  2229: ac ab eb                 jump @163 if a4 <u a3
      :                          @164
  2232: 28 1c                    jump @170
      :                          @165
  2234: 64 7a                    a3 = a0
  2236: 52 09 21                 jump @171 if a2 != 0
      :                          @166
  2239: 28 2f                    jump @173
      :                          @167
  2241: 58 04 13                 jump @170 if t2 <=s 0
      :                          @168
  2244: 64 38                    a1 = t1
  2246: 01                       fallthrough
      :                          @169
  2247: 82 89                    a2 = u64 [a1]
  2249: 7b b9                    u64 [a4] = a2
  2251: 95 bb 08                 a4 = a4 + 0x8
  2254: 95 88 08                 a1 = a1 + 0x8
  2257: ac ab f6                 jump @169 if a4 <u a3
      :                          @170
  2260: c8 43 08                 a1 = t1 + t2
  2263: 84 29 07                 a2 = t0 & 0x7
  2266: 51 09 14                 jump @173 if a2 == 0
      :                          @171
  2269: c8 a9 09                 a2 = a2 + a3
  2272: 01                       fallthrough
      :                          @172
  2273: 7c 8b                    a4 = u8 [a1]
  2275: 78 ab                    u8 [a3] = a4
  2277: 95 aa 01                 a3 = a3 + 0x1
  2280: 95 88 01                 a1 = a1 + 0x1
  2283: ac 9a f6                 jump @172 if a3 <u a2
      :                          @173
  2286: 82 10 18                 ra = u64 [sp + 0x18]
  2289: 82 15 10                 s0 = u64 [sp + 0x10]
  2292: 82 16 08                 s1 = u64 [sp + 0x8]
  2295: 95 11 20                 sp = sp + 0x20
  2298: 32 00                    ret
      :                          @174 [@dyn 24]
  2300: 82 77                    a0 = u64 [a0]
  2302: 01                       fallthrough
      :                          @175
  2303: 28                       jump @175
      :                          @176
  2304: 95 11 a0                 sp = sp + 0xffffffffffffffa0
  2307: 7b 10 58                 u64 [sp + 0x58] = ra
  2310: 7b 15 50                 u64 [sp + 0x50] = s0
  2313: 7b 16 48                 u64 [sp + 0x48] = s1
  2316: 7b 19 08                 u64 [sp + 0x8] = a2
  2319: 7b 18                    u64 [sp] = a1
  2321: 98 7a 04                 a3 = a0 >> 0x4
  2324: 33 09 27                 a2 = 0x27
  2327: 53 2a 71 02 81 00        jump @179 if a3 <u 625
      :                          @177
  2333: 33 09 27                 a2 = 0x27
  2336: 95 1b 46                 a4 = sp + 0x46
  2339: 3a 08 00 00 03           a1 = u64 [0x30000]
  2344: 7b 18 18                 u64 [sp + 0x18] = a1
  2347: 49 11 10 f0 d8 00        u64 [sp + 16] = 0xd8f0
  2353: 33 03 7b 14              t1 = 0x147b
  2357: 33 05 7a 00 01           s0 = 0x1007a
  2362: 33 00 ff e0 f5 05        ra = 0x5f5e0ff
  2368: 01                       fallthrough
      :                          @178
  2369: 64 74                    t2 = a0
  2371: 82 17 18                 a0 = u64 [sp + 0x18]
  2374: d6 74 07                 a0 = t2 mulhu a0
  2377: 98 77 0b                 a0 = a0 >> 0xb
  2380: 82 18 10                 a1 = u64 [sp + 0x10]
  2383: c0 87 02                 i32 t0 = a0 * a1
  2386: c8 42 0a                 a3 = t0 + t2
  2389: 97 a2 30                 t0 = a3 << 0x30
  2392: 98 28 32                 a1 = t0 >> 0x32
  2395: ca 38 08                 a1 = a1 * t1
  2398: 98 8c 11                 a5 = a1 >> 0x11
  2401: 98 88 10                 a1 = a1 >> 0x10
  2404: 84 88 fe 07              a1 = a1 & 0x7fe
  2408: 96 cc 9c                 a5 = a5 * 0xffffffffffffff9c
  2411: c8 ca 0a                 a3 = a3 + a5
  2414: 97 aa 31                 a3 = a3 << 0x31
  2417: 98 aa 30                 a3 = a3 >> 0x30
  2420: c8 58 08                 a1 = a1 + s0
  2423: 7c 8c                    a5 = u8 [a1]
  2425: 7c 88 01                 a1 = u8 [a1 + 0x1]
  2428: c8 5a 0a                 a3 = a3 + s0
  2431: 7c a6 01                 s1 = u8 [a3 + 0x1]
  2434: 7c aa                    a3 = u8 [a3]
  2436: 78 b8 ff                 u8 [a4 + 0xffffffffffffffff] = a1
  2439: 78 bc fe                 u8 [a4 + 0xfffffffffffffffe] = a5
  2442: 78 b6 01                 u8 [a4 + 0x1] = s1
  2445: 78 ba                    u8 [a4] = a3
  2447: 95 99 fc                 a2 = a2 + 0xfffffffffffffffc
  2450: 95 bb fc                 a4 = a4 + 0xfffffffffffffffc
  2453: ac 40 ac                 jump @178 if ra <u t2
      :                          @179
  2456: 54 17 63 3b              jump @181 if a0 <=u 99
      :                          @180
  2460: 97 78 30                 a1 = a0 << 0x30
  2463: 98 88 32                 a1 = a1 >> 0x32
  2466: 96 88 7b 14              a1 = a1 * 0x147b
  2470: 98 88 11                 a1 = a1 >> 0x11
  2473: 96 8a 9c                 a3 = a1 * 0xffffffffffffff9c
  2476: c8 a7 07                 a0 = a0 + a3
  2479: 97 77 31                 a0 = a0 << 0x31
  2482: 98 77 30                 a0 = a0 >> 0x30
  2485: 95 99 fe                 a2 = a2 + 0xfffffffffffffffe
  2488: 33 0a 7a 00 01           a3 = 0x1007a
  2493: c8 a7 07                 a0 = a0 + a3
  2496: 7c 7a 01                 a3 = u8 [a0 + 0x1]
  2499: 7c 77                    a0 = u8 [a0]
  2501: 95 1b 21                 a4 = sp + 0x21
  2504: c8 9b 0b                 a4 = a4 + a2
  2507: 78 ba 01                 u8 [a4 + 0x1] = a3
  2510: 78 b7                    u8 [a4] = a0
  2512: 64 87                    a0 = a1
  2514: 01                       fallthrough
      :                          @181
  2515: 55 17 0a 14              jump @183 if a0 >=u 10
      :                          @182
  2519: 95 99 ff                 a2 = a2 + 0xffffffffffffffff
  2522: 95 18 21                 a1 = sp + 0x21
  2525: c8 98 08                 a1 = a1 + a2
  2528: 83 77 30                 i32 a0 = a0 + 0x30
  2531: 78 87                    u8 [a1] = a0
  2533: 28 21                    jump @184
      :                          @183
  2535: 97 77 01                 a0 = a0 << 0x1
  2538: 95 99 fe                 a2 = a2 + 0xfffffffffffffffe
  2541: 33 08 7a 00 01           a1 = 0x1007a
  2546: c8 87 07                 a0 = a0 + a1
  2549: 7c 78 01                 a1 = u8 [a0 + 0x1]
  2552: 7c 77                    a0 = u8 [a0]
  2554: 95 1a 21                 a3 = sp + 0x21
  2557: c8 9a 0a                 a3 = a3 + a2
  2560: 78 a8 01                 u8 [a3 + 0x1] = a1
  2563: 78 a7                    u8 [a3] = a0
  2565: 01                       fallthrough
      :                          @184
  2566: 95 1b 21                 a4 = sp + 0x21
  2569: c8 9b 0b                 a4 = a4 + a2
  2572: 9a 9c 27                 a5 = 0x27 - a2
  2575: 33 09 78 00 01           a2 = 0x10078
  2580: 82 17 08                 a0 = u64 [sp + 0x8]
  2583: 82 18                    a1 = u64 [sp]
  2585: 33 0a                    a3 = 0
  2587: 50 10 32 12              ra = 50, jump @186
      :                          @185 [@dyn 25]
  2591: 82 10 58                 ra = u64 [sp + 0x58]
  2594: 82 15 50                 s0 = u64 [sp + 0x50]
  2597: 82 16 48                 s1 = u64 [sp + 0x48]
  2600: 95 11 60                 sp = sp + 0x60
  2603: 32 00                    ret
      :                          @186
  2605: 95 11 98                 sp = sp + 0xffffffffffffff98
  2608: 7b 10 60                 u64 [sp + 0x60] = ra
  2611: 7b 15 58                 u64 [sp + 0x58] = s0
  2614: 7b 16 50                 u64 [sp + 0x50] = s1
  2617: 7b 1b 18                 u64 [sp + 0x18] = a4
  2620: 51 08 4f                 jump @193 if a1 == 0
      :                          @187
  2623: 80 76 34                 s1 = u32 [a0 + 0x34]
  2626: 84 68 01                 a1 = s1 & 0x1
  2629: 33 0b 2b                 a4 = 0x2b
  2632: 33 05 00 00 11           s0 = 0x110000
  2637: db 8b 05                 s0 = a4 if a1 != 0
  2640: 7b 15 28                 u64 [sp + 0x28] = s0
  2643: c8 c8 02                 t0 = a1 + a5
  2646: 84 68 04                 a1 = s1 & 0x4
  2649: 51 08 42                 jump @194 if a1 == 0
      :                          @188
  2652: 7b 19 30                 u64 [sp + 0x30] = a2
  2655: 33 08                    a1 = 0
  2657: 51 0a 1a                 jump @191 if a3 == 0
      :                          @189
  2660: 64 a5                    s0 = a3
  2662: 01                       fallthrough
      :                          @190
  2663: 7d 9b                    a4 = i8 [a2]
  2665: 89 bb c0                 a4 = a4 <s 0xffffffffffffffc0
  2668: 85 bb 01                 a4 = a4 ^ 0x1
  2671: c8 b8 08                 a1 = a1 + a4
  2674: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  2677: 95 99 01                 a2 = a2 + 0x1
  2680: 52 05 ef                 jump @190 if s0 != 0
      :                          @191
  2683: c8 82 02                 t0 = t0 + a1
  2686: 7b 1a 38                 u64 [sp + 0x38] = a3
  2689: 82 78                    a1 = u64 [a0]
  2691: 7b 1c 20                 u64 [sp + 0x20] = a5
  2694: 52 08 23                 jump @195 if a1 != 0
      :                          @192
  2697: 28 41                    jump @200
      :                          @193
  2699: 81 76 34                 s1 = i32 [a0 + 0x34]
  2702: 95 c2 01                 t0 = a5 + 0x1
  2705: 49 11 28 2d              u64 [sp + 40] = 0x2d
  2709: 84 68 04                 a1 = s1 & 0x4
  2712: 52 08 c4                 jump @188 if a1 != 0
      :                          @194
  2715: 49 11 30                 u64 [sp + 48] = 0
  2718: 7b 1a 38                 u64 [sp + 0x38] = a3
  2721: 82 78                    a1 = u64 [a0]
  2723: 7b 1c 20                 u64 [sp + 0x20] = a5
  2726: 51 08 24                 jump @200 if a1 == 0
      :                          @195
  2729: 82 75 08                 s0 = u64 [a0 + 0x8]
  2732: ae 52 1e                 jump @200 if t0 >=u s0
      :                          @196
  2735: 84 66 08                 s1 = s1 & 0x8
  2738: 52 06 50                 jump @203 if s1 != 0
      :                          @197
  2741: 7c 79 38                 a2 = u8 [a0 + 0x38]
  2744: c9 25 0a                 a3 = s0 - t0
  2747: 5a 19 01 a1 00           jump @210 if a2 >s 1
      :                          @198
  2752: 52 09 ae 00              jump @212 if a2 != 0
      :                          @199
  2756: 7b 1a 10                 u64 [sp + 0x10] = a3
  2759: 28 ad 00                 jump @213
      :                          @200
  2762: 82 75 20                 s0 = u64 [a0 + 0x20]
  2765: 82 76 28                 s1 = u64 [a0 + 0x28]
  2768: 64 57                    a0 = s0
  2770: 64 68                    a1 = s1
  2772: 82 19 28                 a2 = u64 [sp + 0x28]
  2775: 82 1a 30                 a3 = u64 [sp + 0x30]
  2778: 82 1b 38                 a4 = u64 [sp + 0x38]
  2781: 50 10 34 6d 01           ra = 52, jump @233
      :                          @201 [@dyn 26]
  2786: 33 08 01                 a1 = 0x1
  2789: 52 07 bc 00              jump @218 if a0 != 0
      :                          @202
  2793: 82 6c 18                 a5 = u64 [s1 + 0x18]
  2796: 64 57                    a0 = s0
  2798: 82 18 18                 a1 = u64 [sp + 0x18]
  2801: 82 19 20                 a2 = u64 [sp + 0x20]
  2804: 82 10 60                 ra = u64 [sp + 0x60]
  2807: 82 15 58                 s0 = u64 [sp + 0x58]
  2810: 82 16 50                 s1 = u64 [sp + 0x50]
  2813: 95 11 68                 sp = sp + 0x68
  2816: 32 0c                    jump [a5]
      :                          @203
  2818: 7b 12 40                 u64 [sp + 0x40] = t0
  2821: 81 78 30                 a1 = i32 [a0 + 0x30]
  2824: 7b 18 08                 u64 [sp + 0x8] = a1
  2827: 7c 79 38                 a2 = u8 [a0 + 0x38]
  2830: 7b 19                    u64 [sp] = a2
  2832: 82 79 20                 a2 = u64 [a0 + 0x20]
  2835: 82 76 28                 s1 = u64 [a0 + 0x28]
  2838: 48 17 30 30              u32 [a0 + 48] = 0x30
  2842: 7b 17 10                 u64 [sp + 0x10] = a0
  2845: 46 17 38 01              u8 [a0 + 56] = 0x1
  2849: 7b 19 48                 u64 [sp + 0x48] = a2
  2852: 64 97                    a0 = a2
  2854: 64 68                    a1 = s1
  2856: 82 19 28                 a2 = u64 [sp + 0x28]
  2859: 82 1a 30                 a3 = u64 [sp + 0x30]
  2862: 82 1b 38                 a4 = u64 [sp + 0x38]
  2865: 50 10 36 19 01           ra = 54, jump @233
      :                          @204 [@dyn 27]
  2870: 52 07 67                 jump @217 if a0 != 0
      :                          @205
  2873: 82 17 40                 a0 = u64 [sp + 0x40]
  2876: c9 75 05                 s0 = s0 - a0
  2879: 95 55 01                 s0 = s0 + 0x1
  2882: 01                       fallthrough
      :                          @206
  2883: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  2886: 51 05 c6 00              jump @228 if s0 == 0
      :                          @207
  2890: 82 69 20                 a2 = u64 [s1 + 0x20]
  2893: 33 08 30                 a1 = 0x30
  2896: 82 17 48                 a0 = u64 [sp + 0x48]
  2899: b4 90 01 38              ra = 56, jump [a2]
      :                          @208 [@dyn 28]
  2903: 51 07 ec                 jump @206 if a0 == 0
      :                          @209
  2906: 28 43                    jump @217
      :                          @210
  2908: 52 19 02 12              jump @212 if a2 != 2
      :                          @211
  2912: 98 a9 01                 a2 = a3 >> 0x1
  2915: 95 a8 01                 a1 = a3 + 0x1
  2918: 98 88 01                 a1 = a1 >> 0x1
  2921: 7b 18 10                 u64 [sp + 0x10] = a1
  2924: 28 08                    jump @213
      :                          @212
  2926: 64 a9                    a2 = a3
  2928: 49 11 10                 u64 [sp + 16] = 0
  2931: 01                       fallthrough
      :                          @213
  2932: 82 78 20                 a1 = u64 [a0 + 0x20]
  2935: 7b 18 48                 u64 [sp + 0x48] = a1
  2938: 82 76 28                 s1 = u64 [a0 + 0x28]
  2941: 81 77 30                 a0 = i32 [a0 + 0x30]
  2944: 7b 17 40                 u64 [sp + 0x40] = a0
  2947: 95 95 01                 s0 = a2 + 0x1
  2950: 01                       fallthrough
      :                          @214
  2951: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  2954: 51 05 27                 jump @219 if s0 == 0
      :                          @215
  2957: 82 69 20                 a2 = u64 [s1 + 0x20]
  2960: 82 17 48                 a0 = u64 [sp + 0x48]
  2963: 82 18 40                 a1 = u64 [sp + 0x40]
  2966: b4 90 01 3a              ra = 58, jump [a2]
      :                          @216 [@dyn 29]
  2970: 51 07 ed                 jump @214 if a0 == 0
      :                          @217
  2973: 33 08 01                 a1 = 0x1
  2976: 01                       fallthrough
      :                          @218
  2977: 64 87                    a0 = a1
  2979: 82 10 60                 ra = u64 [sp + 0x60]
  2982: 82 15 58                 s0 = u64 [sp + 0x58]
  2985: 82 16 50                 s1 = u64 [sp + 0x50]
  2988: 95 11 68                 sp = sp + 0x68
  2991: 32 00                    ret
      :                          @219
  2993: 82 15 48                 s0 = u64 [sp + 0x48]
  2996: 64 57                    a0 = s0
  2998: 64 68                    a1 = s1
  3000: 82 19 28                 a2 = u64 [sp + 0x28]
  3003: 82 1a 30                 a3 = u64 [sp + 0x30]
  3006: 82 1b 38                 a4 = u64 [sp + 0x38]
  3009: 50 10 3c 89 00           ra = 60, jump @233
      :                          @220 [@dyn 30]
  3014: 33 08 01                 a1 = 0x1
  3017: 52 07 d8                 jump @218 if a0 != 0
      :                          @221
  3020: 82 6a 18                 a3 = u64 [s1 + 0x18]
  3023: 64 57                    a0 = s0
  3025: 82 18 18                 a1 = u64 [sp + 0x18]
  3028: 82 19 20                 a2 = u64 [sp + 0x20]
  3031: b4 a0 01 3e              ra = 62, jump [a3]
      :                          @222 [@dyn 31]
  3035: 33 08 01                 a1 = 0x1
  3038: 52 07 c3                 jump @218 if a0 != 0
      :                          @223
  3041: 82 17 10                 a0 = u64 [sp + 0x10]
  3044: 9a 77                    a0 = -a0
  3046: 7b 17 38                 u64 [sp + 0x38] = a0
  3049: 33 05 ff                 s0 = 0xffffffffffffffff
  3052: 01                       fallthrough
      :                          @224
  3053: 82 17 38                 a0 = u64 [sp + 0x38]
  3056: c8 57 07                 a0 = a0 + s0
  3059: 51 17 ff 42              jump @231 if a0 == 4294967295
      :                          @225
  3063: 82 69 20                 a2 = u64 [s1 + 0x20]
  3066: 82 17 48                 a0 = u64 [sp + 0x48]
  3069: 82 18 40                 a1 = u64 [sp + 0x40]
  3072: b4 90 01 40              ra = 64, jump [a2]
      :                          @226 [@dyn 32]
  3076: 95 55 01                 s0 = s0 + 0x1
  3079: 51 07 e6                 jump @224 if a0 == 0
      :                          @227
  3082: 28 37                    jump @232
      :                          @228
  3084: 82 6a 18                 a3 = u64 [s1 + 0x18]
  3087: 82 17 48                 a0 = u64 [sp + 0x48]
  3090: 82 18 18                 a1 = u64 [sp + 0x18]
  3093: 82 19 20                 a2 = u64 [sp + 0x20]
  3096: b4 a0 01 42              ra = 66, jump [a3]
      :                          @229 [@dyn 33]
  3100: 33 08 01                 a1 = 0x1
  3103: 52 07 82                 jump @218 if a0 != 0
      :                          @230
  3106: 33 08                    a1 = 0
  3108: 82 17 10                 a0 = u64 [sp + 0x10]
  3111: 82 19 08                 a2 = u64 [sp + 0x8]
  3114: 7a 79 30                 u32 [a0 + 0x30] = a2
  3117: 82 19                    a2 = u64 [sp]
  3119: 78 79 38                 u8 [a0 + 0x38] = a2
  3122: 28 6f ff                 jump @218
      :                          @231
  3125: 82 15 10                 s0 = u64 [sp + 0x10]
  3128: 82 17 10                 a0 = u64 [sp + 0x10]
  3131: d8 75 08                 a1 = s0 <u a0
  3134: 28 63 ff                 jump @218
      :                          @232
  3137: 82 17 10                 a0 = u64 [sp + 0x10]
  3140: d8 75 08                 a1 = s0 <u a0
  3143: 28 5a ff                 jump @218
      :                          @233
  3146: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  3149: 7b 10 20                 u64 [sp + 0x20] = ra
  3152: 7b 15 18                 u64 [sp + 0x18] = s0
  3155: 7b 16 10                 u64 [sp + 0x10] = s1
  3158: 83 9c                    i32 a5 = a2 + 0
  3160: 33 02 00 00 11           t0 = 0x110000
  3165: 64 a6                    s1 = a3
  3167: 64 85                    s0 = a1
  3169: 64 7a                    a3 = a0
  3171: aa 2c 20                 jump @236 if a5 == t0
      :                          @234
  3174: 82 5c 20                 a5 = u64 [s0 + 0x20]
  3177: 64 a7                    a0 = a3
  3179: 64 98                    a1 = a2
  3181: 7b 1b 08                 u64 [sp + 0x8] = a4
  3184: 7b 1a                    u64 [sp] = a3
  3186: b4 c0 01 44              ra = 68, jump [a5]
      :                          @235 [@dyn 34]
  3190: 82 1a                    a3 = u64 [sp]
  3192: 82 1b 08                 a4 = u64 [sp + 0x8]
  3195: 64 78                    a1 = a0
  3197: 33 07 01                 a0 = 0x1
  3200: 52 08 20                 jump @239 if a1 != 0
      :                          @236
  3203: 51 06 1a                 jump @238 if s1 == 0
      :                          @237
  3206: 82 5c 18                 a5 = u64 [s0 + 0x18]
  3209: 64 a7                    a0 = a3
  3211: 64 68                    a1 = s1
  3213: 64 b9                    a2 = a4
  3215: 82 10 20                 ra = u64 [sp + 0x20]
  3218: 82 15 18                 s0 = u64 [sp + 0x18]
  3221: 82 16 10                 s1 = u64 [sp + 0x10]
  3224: 95 11 28                 sp = sp + 0x28
  3227: 32 0c                    jump [a5]
      :                          @238
  3229: 33 07                    a0 = 0
  3231: 01                       fallthrough
      :                          @239
  3232: 82 10 20                 ra = u64 [sp + 0x20]
  3235: 82 15 18                 s0 = u64 [sp + 0x18]
  3238: 82 16 10                 s1 = u64 [sp + 0x10]
  3241: 95 11 28                 sp = sp + 0x28
  3244: 32 00                    ret
      :                          @240
  3246: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  3250: 7b 10 80 00              u64 [sp + 0x80] = ra
  3254: 7b 15 78                 u64 [sp + 0x78] = s0
  3257: 7b 16 70                 u64 [sp + 0x70] = s1
  3260: 49 11 60 20              u64 [sp + 96] = 0x20
  3264: 33 09 03                 a2 = 0x3
  3267: 78 19 68                 u8 [sp + 0x68] = a2
  3270: 49 11 30                 u64 [sp + 48] = 0
  3273: 49 11 40                 u64 [sp + 64] = 0
  3276: 82 86 20                 s1 = u64 [a1 + 0x20]
  3279: 7b 17 50                 u64 [sp + 0x50] = a0
  3282: 33 07 48 00 01           a0 = 0x10048
  3287: 7b 17 58                 u64 [sp + 0x58] = a0
  3290: 51 06 06 01              jump @262 if s1 == 0
      :                          @241
  3294: 82 87 28                 a0 = u64 [a1 + 0x28]
  3297: 51 07 73 01              jump @272 if a0 == 0
      :                          @242
  3301: 33 09                    a2 = 0
  3303: 82 85                    s0 = u64 [a1]
  3305: 7b 18 08                 u64 [sp + 0x8] = a1
  3308: 82 88 10                 a1 = u64 [a1 + 0x10]
  3311: 7b 18 18                 u64 [sp + 0x18] = a1
  3314: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  3317: 97 88 03                 a1 = a1 << 0x3
  3320: 98 88 03                 a1 = a1 >> 0x3
  3323: 95 88 01                 a1 = a1 + 0x1
  3326: 7b 18                    u64 [sp] = a1
  3328: 95 55 08                 s0 = s0 + 0x8
  3331: 96 78 38                 a1 = a0 * 0x38
  3334: 95 66 18                 s1 = s1 + 0x18
  3337: 33 07 30                 a0 = 0x30
  3340: 7b 17 10                 u64 [sp + 0x10] = a0
  3343: 01                       fallthrough
      :                          @243
  3344: 7b 18 20                 u64 [sp + 0x20] = a1
  3347: 7b 19 28                 u64 [sp + 0x28] = a2
  3350: 82 59                    a2 = u64 [s0]
  3352: 51 09 17                 jump @246 if a2 == 0
      :                          @244
  3355: 82 1a 58                 a3 = u64 [sp + 0x58]
  3358: 82 17 50                 a0 = u64 [sp + 0x50]
  3361: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  3364: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3367: b4 a0 01 46              ra = 70, jump [a3]
      :                          @245 [@dyn 35]
  3371: 52 07 4e 01              jump @275 if a0 != 0
      :                          @246
  3375: 81 67 10                 a0 = i32 [s1 + 0x10]
  3378: 7a 17 60                 u32 [sp + 0x60] = a0
  3381: 7c 67 18                 a0 = u8 [s1 + 0x18]
  3384: 78 17 68                 u8 [sp + 0x68] = a0
  3387: 81 67 14                 a0 = i32 [s1 + 0x14]
  3390: 7a 17 64                 u32 [sp + 0x64] = a0
  3393: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3396: 82 67                    a0 = u64 [s1]
  3398: 51 08 26                 jump @251 if a1 == 0
      :                          @247
  3401: 52 18 01 16              jump @249 if a1 != 1
      :                          @248
  3405: 97 77 04                 a0 = a0 << 0x4
  3408: 82 18 18                 a1 = u64 [sp + 0x18]
  3411: c8 87 07                 a0 = a0 + a1
  3414: 82 78 08                 a1 = u64 [a0 + 0x8]
  3417: 82 19 10                 a2 = u64 [sp + 0x10]
  3420: aa 98 07                 jump @250 if a1 == a2
      :                          @249
  3423: 33 08                    a1 = 0
  3425: 28 0f                    jump @252
      :                          @250
  3427: 82 77                    a0 = u64 [a0]
  3429: 82 77                    a0 = u64 [a0]
  3431: 33 08 01                 a1 = 0x1
  3434: 28 06                    jump @252
      :                          @251
  3436: 33 08 01                 a1 = 0x1
  3439: 01                       fallthrough
      :                          @252
  3440: 7b 18 30                 u64 [sp + 0x30] = a1
  3443: 7b 17 38                 u64 [sp + 0x38] = a0
  3446: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  3449: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  3452: 51 08 26                 jump @257 if a1 == 0
      :                          @253
  3455: 52 18 01 16              jump @255 if a1 != 1
      :                          @254
  3459: 97 77 04                 a0 = a0 << 0x4
  3462: 82 18 18                 a1 = u64 [sp + 0x18]
  3465: c8 87 07                 a0 = a0 + a1
  3468: 82 78 08                 a1 = u64 [a0 + 0x8]
  3471: 82 19 10                 a2 = u64 [sp + 0x10]
  3474: aa 98 07                 jump @256 if a1 == a2
      :                          @255
  3477: 33 08                    a1 = 0
  3479: 28 0f                    jump @258
      :                          @256
  3481: 82 77                    a0 = u64 [a0]
  3483: 82 77                    a0 = u64 [a0]
  3485: 33 08 01                 a1 = 0x1
  3488: 28 06                    jump @258
      :                          @257
  3490: 33 08 01                 a1 = 0x1
  3493: 01                       fallthrough
      :                          @258
  3494: 7b 18 40                 u64 [sp + 0x40] = a1
  3497: 7b 17 48                 u64 [sp + 0x48] = a0
  3500: 82 67 08                 a0 = u64 [s1 + 0x8]
  3503: 97 77 04                 a0 = a0 << 0x4
  3506: 82 18 18                 a1 = u64 [sp + 0x18]
  3509: c8 78 08                 a1 = a1 + a0
  3512: 82 87                    a0 = u64 [a1]
  3514: 82 89 08                 a2 = u64 [a1 + 0x8]
  3517: 95 18 30                 a1 = sp + 0x30
  3520: b4 90 01 48              ra = 72, jump [a2]
      :                          @259 [@dyn 36]
  3524: 52 07 b5 00              jump @275 if a0 != 0
      :                          @260
  3528: 95 55 10                 s0 = s0 + 0x10
  3531: 82 18 20                 a1 = u64 [sp + 0x20]
  3534: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  3537: 95 66 38                 s1 = s1 + 0x38
  3540: 82 19 28                 a2 = u64 [sp + 0x28]
  3543: 95 99 01                 a2 = a2 + 0x1
  3546: 52 08 36 ff              jump @243 if a1 != 0
      :                          @261
  3550: 28 69                    jump @270
      :                          @262
  3552: 82 87 18                 a0 = u64 [a1 + 0x18]
  3555: 51 07 71                 jump @272 if a0 == 0
      :                          @263
  3558: 82 85 10                 s0 = u64 [a1 + 0x10]
  3561: 33 0a                    a3 = 0
  3563: 97 79 04                 a2 = a0 << 0x4
  3566: c8 59 09                 a2 = a2 + s0
  3569: 7b 19 20                 u64 [sp + 0x20] = a2
  3572: 7b 18 08                 u64 [sp + 0x8] = a1
  3575: 82 86                    s1 = u64 [a1]
  3577: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  3580: 97 77 04                 a0 = a0 << 0x4
  3583: 98 77 04                 a0 = a0 >> 0x4
  3586: 95 77 01                 a0 = a0 + 0x1
  3589: 7b 17                    u64 [sp] = a0
  3591: 95 66 08                 s1 = s1 + 0x8
  3594: 01                       fallthrough
      :                          @264
  3595: 7b 1a 28                 u64 [sp + 0x28] = a3
  3598: 82 69                    a2 = u64 [s1]
  3600: 51 09 16                 jump @267 if a2 == 0
      :                          @265
  3603: 82 1a 58                 a3 = u64 [sp + 0x58]
  3606: 82 17 50                 a0 = u64 [sp + 0x50]
  3609: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3612: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3615: b4 a0 01 4a              ra = 74, jump [a3]
      :                          @266 [@dyn 37]
  3619: 52 07 56                 jump @275 if a0 != 0
      :                          @267
  3622: 82 57                    a0 = u64 [s0]
  3624: 82 59 08                 a2 = u64 [s0 + 0x8]
  3627: 95 18 30                 a1 = sp + 0x30
  3630: b4 90 01 4c              ra = 76, jump [a2]
      :                          @268 [@dyn 38]
  3634: 52 07 47                 jump @275 if a0 != 0
      :                          @269
  3637: 95 66 10                 s1 = s1 + 0x10
  3640: 95 55 10                 s0 = s0 + 0x10
  3643: 82 1a 28                 a3 = u64 [sp + 0x28]
  3646: 95 aa 01                 a3 = a3 + 0x1
  3649: 82 17 20                 a0 = u64 [sp + 0x20]
  3652: ab 75 c7                 jump @264 if s0 != a0
      :                          @270
  3655: 82 18 08                 a1 = u64 [sp + 0x8]
  3658: 82 1a                    a3 = u64 [sp]
  3660: 82 87 08                 a0 = u64 [a1 + 0x8]
  3663: ac 7a 0d                 jump @273 if a3 <u a0
      :                          @271
  3666: 28 2c                    jump @276
      :                          @272
  3668: 33 0a                    a3 = 0
  3670: 82 87 08                 a0 = u64 [a1 + 0x8]
  3673: 54 07 25                 jump @276 if a0 <=u 0
      :                          @273
  3676: 82 87                    a0 = u64 [a1]
  3678: 97 a8 04                 a1 = a3 << 0x4
  3681: c8 87 09                 a2 = a0 + a1
  3684: 82 1a 58                 a3 = u64 [sp + 0x58]
  3687: 82 17 50                 a0 = u64 [sp + 0x50]
  3690: 82 98                    a1 = u64 [a2]
  3692: 82 99 08                 a2 = u64 [a2 + 0x8]
  3695: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3698: b4 a0 01 4e              ra = 78, jump [a3]
      :                          @274 [@dyn 39]
  3702: 51 07 08                 jump @276 if a0 == 0
      :                          @275
  3705: 33 07 01                 a0 = 0x1
  3708: 28 05                    jump @277
      :                          @276
  3710: 33 07                    a0 = 0
  3712: 01                       fallthrough
      :                          @277
  3713: 82 10 80 00              ra = u64 [sp + 0x80]
  3717: 82 15 78                 s0 = u64 [sp + 0x78]
  3720: 82 16 70                 s1 = u64 [sp + 0x70]
  3723: 95 11 88 00              sp = sp + 0x88
  3727: 32 00                    ret
