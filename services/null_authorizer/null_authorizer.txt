// RO data = 328/328 bytes
// RW data = 8/4128 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 2 bytes
// RO data = [110, 117, 108, 108, 95, 97, 117, 116, 104, 111, 114, 105, 122, 101, 114, 32, 103, 97, 115, 32, 99, 97, 108, 108, 32, 32, 103, 97, 115, 95, 114, 101, 115, 117, 108, 116, 58, 32, 0, 0, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 25, 0, 1, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0]
// RW data = [75, 89, 134, 56, 214, 197, 109, 52]
// Instructions = 1284
// Code size = 3656 bytes

      :                          @0
     0: 28 ac 01                 jump @29
      :                          @1 [@dyn 1]
     3: 95 11 78 ff              sp = sp + 0xffffffffffffff78
     7: 7b 10 80 00              u64 [sp + 0x80] = ra
    11: 64 82                    t0 = a1
    13: 80 88 34                 a1 = u32 [a1 + 0x34]
    16: 84 89 10                 a2 = a1 & 0x10
    19: 52 09 28                 jump @4 if a2 != 0
      :                          @2
    22: 84 88 20                 a1 = a1 & 0x20
    25: 52 08 68                 jump @8 if a1 != 0
      :                          @3
    28: 81 77                    a0 = i32 [a0]
    30: 89 79                    a2 = a0 <s 0
    32: 85 98 01                 a1 = a2 ^ 0x1
    35: 97 7a 20                 a3 = a0 << 0x20
    38: 98 aa 20                 a3 = a3 >> 0x20
    41: 9a 77                    a0 = -a0
    43: da 9a 07                 a0 = a3 if a2 == 0
    46: 64 29                    a2 = t0
    48: 82 10 80 00              ra = u64 [sp + 0x80]
    52: 95 11 88 00              sp = sp + 0x88
    56: 28 8a 08                 jump @180
      :                          @4
    59: 81 7a                    a3 = i32 [a0]
    61: 33 08 81 00              a1 = 0x81
    65: 95 17 7f                 a0 = sp + 0x7f
    68: 33 03 57                 t1 = 0x57
    71: 01                       fallthrough
      :                          @5
    72: 64 8b                    a4 = a1
    74: 8b ac 04                 i32 a5 = a3 >> 0x4
    77: 84 aa 0f                 a3 = a3 & 0xf
    80: 88 a8 0a                 a1 = a3 <u 0xa
    83: 33 09 30                 a2 = 0x30
    86: da 83 09                 a2 = t1 if a1 == 0
    89: be a9 09                 i32 a2 = a2 + a3
    92: 78 79                    u8 [a0] = a2
    94: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
    97: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   100: 64 ca                    a3 = a5
   102: 52 0c e2                 jump @5 if a5 != 0
      :                          @6
   105: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   108: 56 27 80 00 71           jump @14 if a0 >u 128
      :                          @7
   113: 9a 8c 81 00              a5 = 0x81 - a1
   117: 64 1b                    a4 = sp
   119: c8 7b 0b                 a4 = a4 + a0
   122: 33 09 28 00 01           a2 = 0x10028
   127: 28 47                    jump @12
      :                          @8
   129: 81 7a                    a3 = i32 [a0]
   131: 33 08 81 00              a1 = 0x81
   135: 95 17 7f                 a0 = sp + 0x7f
   138: 33 03 37                 t1 = 0x37
   141: 01                       fallthrough
      :                          @9
   142: 64 8b                    a4 = a1
   144: 8b ac 04                 i32 a5 = a3 >> 0x4
   147: 84 aa 0f                 a3 = a3 & 0xf
   150: 88 a8 0a                 a1 = a3 <u 0xa
   153: 33 09 30                 a2 = 0x30
   156: da 83 09                 a2 = t1 if a1 == 0
   159: be a9 09                 i32 a2 = a2 + a3
   162: 78 79                    u8 [a0] = a2
   164: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   167: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   170: 64 ca                    a3 = a5
   172: 52 0c e2                 jump @9 if a5 != 0
      :                          @10
   175: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   178: 56 27 80 00 2b           jump @14 if a0 >u 128
      :                          @11
   183: 9a 8c 81 00              a5 = 0x81 - a1
   187: 64 1b                    a4 = sp
   189: c8 7b 0b                 a4 = a4 + a0
   192: 33 09 28 00 01           a2 = 0x10028
   197: 01                       fallthrough
      :                          @12
   198: 33 08 01                 a1 = 0x1
   201: 33 0a 02                 a3 = 0x2
   204: 64 27                    a0 = t0
   206: 50 10 04 16 09           ra = 4, jump @190
      :                          @13 [@dyn 2]
   211: 82 10 80 00              ra = u64 [sp + 0x80]
   215: 95 11 88 00              sp = sp + 0x88
   219: 32 00                    ret
      :                          @14
   221: 00                       trap
      :                          @15 [@dyn 3]
   222: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   226: 7b 10 80 00              u64 [sp + 0x80] = ra
   230: 64 82                    t0 = a1
   232: 80 88 34                 a1 = u32 [a1 + 0x34]
   235: 84 89 10                 a2 = a1 & 0x10
   238: 52 09 1b                 jump @18 if a2 != 0
      :                          @16
   241: 84 88 20                 a1 = a1 & 0x20
   244: 52 08 5b                 jump @22 if a1 != 0
      :                          @17
   247: 82 77                    a0 = u64 [a0]
   249: 33 08 01                 a1 = 0x1
   252: 64 29                    a2 = t0
   254: 82 10 80 00              ra = u64 [sp + 0x80]
   258: 95 11 88 00              sp = sp + 0x88
   262: 28 bc 07                 jump @180
      :                          @18
   265: 82 7a                    a3 = u64 [a0]
   267: 33 08 81 00              a1 = 0x81
   271: 95 17 7f                 a0 = sp + 0x7f
   274: 33 03 57                 t1 = 0x57
   277: 01                       fallthrough
      :                          @19
   278: 64 8b                    a4 = a1
   280: 98 ac 04                 a5 = a3 >> 0x4
   283: 84 aa 0f                 a3 = a3 & 0xf
   286: 88 a8 0a                 a1 = a3 <u 0xa
   289: 33 09 30                 a2 = 0x30
   292: da 83 09                 a2 = t1 if a1 == 0
   295: be a9 09                 i32 a2 = a2 + a3
   298: 78 79                    u8 [a0] = a2
   300: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   303: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   306: 64 ca                    a3 = a5
   308: 52 0c e2                 jump @19 if a5 != 0
      :                          @20
   311: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   314: 56 27 80 00 71           jump @28 if a0 >u 128
      :                          @21
   319: 9a 8c 81 00              a5 = 0x81 - a1
   323: 64 1b                    a4 = sp
   325: c8 7b 0b                 a4 = a4 + a0
   328: 33 09 28 00 01           a2 = 0x10028
   333: 28 47                    jump @26
      :                          @22
   335: 82 7a                    a3 = u64 [a0]
   337: 33 08 81 00              a1 = 0x81
   341: 95 17 7f                 a0 = sp + 0x7f
   344: 33 03 37                 t1 = 0x37
   347: 01                       fallthrough
      :                          @23
   348: 64 8b                    a4 = a1
   350: 98 ac 04                 a5 = a3 >> 0x4
   353: 84 aa 0f                 a3 = a3 & 0xf
   356: 88 a8 0a                 a1 = a3 <u 0xa
   359: 33 09 30                 a2 = 0x30
   362: da 83 09                 a2 = t1 if a1 == 0
   365: be a9 09                 i32 a2 = a2 + a3
   368: 78 79                    u8 [a0] = a2
   370: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   373: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   376: 64 ca                    a3 = a5
   378: 52 0c e2                 jump @23 if a5 != 0
      :                          @24
   381: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   384: 56 27 80 00 2b           jump @28 if a0 >u 128
      :                          @25
   389: 9a 8c 81 00              a5 = 0x81 - a1
   393: 64 1b                    a4 = sp
   395: c8 7b 0b                 a4 = a4 + a0
   398: 33 09 28 00 01           a2 = 0x10028
   403: 01                       fallthrough
      :                          @26
   404: 33 08 01                 a1 = 0x1
   407: 33 0a 02                 a3 = 0x2
   410: 64 27                    a0 = t0
   412: 50 10 08 48 08           ra = 8, jump @190
      :                          @27 [@dyn 4]
   417: 82 10 80 00              ra = u64 [sp + 0x80]
   421: 95 11 88 00              sp = sp + 0x88
   425: 32 00                    ret
      :                          @28
   427: 00                       trap
      :                          @29 [export #0: 'is_authorize']
   428: 95 11 48 ff              sp = sp + 0xffffffffffffff48
   432: 7b 10 b0 00              u64 [sp + 0xb0] = ra
   436: 7b 15 a8 00              u64 [sp + 0xa8] = s0
   440: 7b 16 a0 00              u64 [sp + 0xa0] = s1
   444: 49 11 20 ff ef           u64 [sp + 32] = 0xffffffffffffefff
   449: 48 11 2c                 u32 [sp + 44] = 0
   452: 0a                       ecalli 0 // 'gas'
   453: 7b 17 30                 u64 [sp + 0x30] = a0
   456: 95 17 2c                 a0 = sp + 0x2c
   459: 7b 17 80 00              u64 [sp + 0x80] = a0
   463: 33 07 02                 a0 = 0x2
   466: 7b 17 18                 u64 [sp + 0x18] = a0
   469: 7b 17 88 00              u64 [sp + 0x88] = a0
   473: 95 17 30                 a0 = sp + 0x30
   476: 7b 17 90 00              u64 [sp + 0x90] = a0
   480: 33 07 06                 a0 = 0x6
   483: 7b 17 10                 u64 [sp + 0x10] = a0
   486: 7b 17 98 00              u64 [sp + 0x98] = a0
   490: 33 07 f8 00 01           a0 = 0x100f8
   495: 7b 17 08                 u64 [sp + 0x8] = a0
   498: 7b 17 50                 u64 [sp + 0x50] = a0
   501: 49 11 58 02              u64 [sp + 88] = 0x2
   505: 49 11 70                 u64 [sp + 112] = 0
   508: 95 18 80 00              a1 = sp + 0x80
   512: 7b 18 60                 u64 [sp + 0x60] = a1
   515: 49 11 68 02              u64 [sp + 104] = 0x2
   519: 95 17 38                 a0 = sp + 0x38
   522: 95 18 50                 a1 = sp + 0x50
   525: 50 10 0a 9d 03           ra = 10, jump @110
      :                          @30 [@dyn 5]
   530: 82 15 40                 s0 = u64 [sp + 0x40]
   533: 82 1b 48                 a4 = u64 [sp + 0x48]
   536: 82 16 38                 s1 = u64 [sp + 0x38]
   539: 33 07 02                 a0 = 0x2
   542: 33 08                    a1 = 0
   544: 33 09                    a2 = 0
   546: 64 5a                    a3 = s0
   548: 33 00 0c                 ra = 0xc
   551: 0a 64                    ecalli 100 // 'log'
   553: 01                       fallthrough
      :                          @31 [@dyn 6]
   554: 82 17 20                 a0 = u64 [sp + 0x20]
   557: c8 67 07                 a0 = a0 + s1
   560: 33 08 10 00 03           a1 = 0x30010
   565: 7b 18                    u64 [sp] = a1
   567: 53 27 00 f0 20           jump @37 if a0 <u 4294963200
      :                          @32
   572: 82 18                    a1 = u64 [sp]
   574: 95 87 00 10              a0 = a1 + 0x1000
   578: 01                       fallthrough
      :                          @33
   579: 82 78                    a1 = u64 [a0]
   581: c9 87 09                 a2 = a0 - a1
   584: ab 59 0f                 jump @37 if a2 != s0
      :                          @34
   587: c9 68 09                 a2 = a1 - s1
   590: 01                       fallthrough
      :                          @35
   591: 82 7a                    a3 = u64 [a0]
   593: ab 8a f2                 jump @33 if a3 != a1
      :                          @36
   596: 7b 79                    u64 [a0] = a2
   598: 01                       fallthrough
      :                          @37
   599: 48 11 2c 01              u32 [sp + 44] = 0x1
   603: 0a                       ecalli 0 // 'gas'
   604: 7b 17 30                 u64 [sp + 0x30] = a0
   607: 95 17 2c                 a0 = sp + 0x2c
   610: 7b 17 80 00              u64 [sp + 0x80] = a0
   614: 82 17 18                 a0 = u64 [sp + 0x18]
   617: 7b 17 88 00              u64 [sp + 0x88] = a0
   621: 95 17 30                 a0 = sp + 0x30
   624: 7b 17 90 00              u64 [sp + 0x90] = a0
   628: 82 17 08                 a0 = u64 [sp + 0x8]
   631: 7b 17 50                 u64 [sp + 0x50] = a0
   634: 49 11 58 02              u64 [sp + 88] = 0x2
   638: 49 11 70                 u64 [sp + 112] = 0
   641: 95 18 80 00              a1 = sp + 0x80
   645: 7b 18 60                 u64 [sp + 0x60] = a1
   648: 49 11 68 02              u64 [sp + 104] = 0x2
   652: 82 17 10                 a0 = u64 [sp + 0x10]
   655: 7b 17 98 00              u64 [sp + 0x98] = a0
   659: 95 17 38                 a0 = sp + 0x38
   662: 95 18 50                 a1 = sp + 0x50
   665: 50 10 0e 11 03           ra = 14, jump @110
      :                          @38 [@dyn 7]
   670: 82 15 40                 s0 = u64 [sp + 0x40]
   673: 82 1b 48                 a4 = u64 [sp + 0x48]
   676: 82 16 38                 s1 = u64 [sp + 0x38]
   679: 33 07 02                 a0 = 0x2
   682: 33 08                    a1 = 0
   684: 33 09                    a2 = 0
   686: 64 5a                    a3 = s0
   688: 33 00 10                 ra = 0x10
   691: 0a 64                    ecalli 100 // 'log'
   693: 01                       fallthrough
      :                          @39 [@dyn 8]
   694: 82 17 20                 a0 = u64 [sp + 0x20]
   697: c8 67 07                 a0 = a0 + s1
   700: 53 27 00 f0 20           jump @45 if a0 <u 4294963200
      :                          @40
   705: 82 18                    a1 = u64 [sp]
   707: 95 87 00 10              a0 = a1 + 0x1000
   711: 01                       fallthrough
      :                          @41
   712: 82 78                    a1 = u64 [a0]
   714: c9 87 09                 a2 = a0 - a1
   717: ab 59 0f                 jump @45 if a2 != s0
      :                          @42
   720: c9 68 09                 a2 = a1 - s1
   723: 01                       fallthrough
      :                          @43
   724: 82 7a                    a3 = u64 [a0]
   726: ab 8a f2                 jump @41 if a3 != a1
      :                          @44
   729: 7b 79                    u64 [a0] = a2
   731: 01                       fallthrough
      :                          @45
   732: 33 05 02                 s0 = 0x2
   735: 7a 15 2c                 u32 [sp + 0x2c] = s0
   738: 0a                       ecalli 0 // 'gas'
   739: 7b 17 30                 u64 [sp + 0x30] = a0
   742: 95 17 2c                 a0 = sp + 0x2c
   745: 7b 17 80 00              u64 [sp + 0x80] = a0
   749: 82 17 18                 a0 = u64 [sp + 0x18]
   752: 7b 17 88 00              u64 [sp + 0x88] = a0
   756: 95 17 30                 a0 = sp + 0x30
   759: 7b 17 90 00              u64 [sp + 0x90] = a0
   763: 82 17 10                 a0 = u64 [sp + 0x10]
   766: 7b 17 98 00              u64 [sp + 0x98] = a0
   770: 82 17 08                 a0 = u64 [sp + 0x8]
   773: 7b 17 50                 u64 [sp + 0x50] = a0
   776: 7b 15 58                 u64 [sp + 0x58] = s0
   779: 49 11 70                 u64 [sp + 112] = 0
   782: 95 17 80 00              a0 = sp + 0x80
   786: 7b 17 60                 u64 [sp + 0x60] = a0
   789: 7b 15 68                 u64 [sp + 0x68] = s0
   792: 95 17 38                 a0 = sp + 0x38
   795: 95 18 50                 a1 = sp + 0x50
   798: 50 10 12 8c 02           ra = 18, jump @110
      :                          @46 [@dyn 9]
   803: 82 15 40                 s0 = u64 [sp + 0x40]
   806: 82 1b 48                 a4 = u64 [sp + 0x48]
   809: 82 16 38                 s1 = u64 [sp + 0x38]
   812: 33 07 02                 a0 = 0x2
   815: 33 08                    a1 = 0
   817: 33 09                    a2 = 0
   819: 64 5a                    a3 = s0
   821: 33 00 14                 ra = 0x14
   824: 0a 64                    ecalli 100 // 'log'
   826: 01                       fallthrough
      :                          @47 [@dyn 10]
   827: 82 17 20                 a0 = u64 [sp + 0x20]
   830: c8 67 07                 a0 = a0 + s1
   833: 53 27 00 f0 22           jump @53 if a0 <u 4294963200
      :                          @48
   838: 82 18                    a1 = u64 [sp]
   840: 95 87 00 10              a0 = a1 + 0x1000
   844: 01                       fallthrough
      :                          @49
   845: 82 78                    a1 = u64 [a0]
   847: c9 87 09                 a2 = a0 - a1
   850: ab 59 11                 jump @53 if a2 != s0
      :                          @50
   853: c9 68 09                 a2 = a1 - s1
   856: 01                       fallthrough
      :                          @51
   857: 82 7a                    a3 = u64 [a0]
   859: ab 8a f2                 jump @49 if a3 != a1
      :                          @52
   862: 7b 79                    u64 [a0] = a2
   864: 33 0b                    a4 = 0
   866: 01                       fallthrough
      :                          @53
   867: 33 07 00 00 01           a0 = 0x10000
   872: 33 08                    a1 = 0
   874: 82 10 b0 00              ra = u64 [sp + 0xb0]
   878: 82 15 a8 00              s0 = u64 [sp + 0xa8]
   882: 82 16 a0 00              s1 = u64 [sp + 0xa0]
   886: 95 11 b8 00              sp = sp + 0xb8
   890: 32 00                    ret
      :                          @54
   892: 95 11 b8                 sp = sp + 0xffffffffffffffb8
   895: 7b 10 40                 u64 [sp + 0x40] = ra
   898: 7b 15 38                 u64 [sp + 0x38] = s0
   901: 7b 16 30                 u64 [sp + 0x30] = s1
   904: c8 89 09                 a2 = a2 + a1
   907: ac 89 52                 jump @62 if a2 <u a1
      :                          @55
   910: 64 75                    s0 = a0
   912: 82 77                    a0 = u64 [a0]
   914: 97 78 01                 a1 = a0 << 0x1
   917: 33 0a 08                 a3 = 0x8
   920: e4 a9 09                 a2 = maxu(a2, a3)
   923: e4 98 06                 s1 = maxu(a1, a2)
   926: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
   929: 98 88 3f                 a1 = a1 >> 0x3f
   932: 51 07 12                 jump @57 if a0 == 0
      :                          @56
   935: 82 59 08                 a2 = u64 [s0 + 0x8]
   938: 7b 19 18                 u64 [sp + 0x18] = a2
   941: 49 11 20 01              u64 [sp + 32] = 0x1
   945: 7b 17 28                 u64 [sp + 0x28] = a0
   948: 28 06                    jump @58
      :                          @57
   950: 49 11 20                 u64 [sp + 32] = 0
   953: 01                       fallthrough
      :                          @58
   954: 64 17                    a0 = sp
   956: 95 1a 18                 a3 = sp + 0x18
   959: 64 69                    a2 = s1
   961: 50 10 16 32              ra = 22, jump @66
      :                          @59 [@dyn 11]
   965: 82 18                    a1 = u64 [sp]
   967: 82 17 08                 a0 = u64 [sp + 0x8]
   970: 51 08 14                 jump @63 if a1 == 0
      :                          @60
   973: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
   983: aa 87 0d                 jump @64 if a0 == a1
      :                          @61
   986: 52 07 18                 jump @65 if a0 != 0
      :                          @62
   989: 00                       trap
      :                          @63
   990: 7b 57 08                 u64 [s0 + 0x8] = a0
   993: 7b 56                    u64 [s0] = s1
   995: 01                       fallthrough
      :                          @64
   996: 82 10 40                 ra = u64 [sp + 0x40]
   999: 82 15 38                 s0 = u64 [sp + 0x38]
  1002: 82 16 30                 s1 = u64 [sp + 0x30]
  1005: 95 11 48                 sp = sp + 0x48
  1008: 32 00                    ret
      :                          @65
  1010: 00                       trap
      :                          @66
  1011: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  1014: 7b 10 30                 u64 [sp + 0x30] = ra
  1017: 7b 15 28                 u64 [sp + 0x28] = s0
  1020: 7b 16 20                 u64 [sp + 0x20] = s1
  1023: 64 96                    s1 = a2
  1025: 64 73                    t1 = a0
  1027: 51 08 6e                 jump @76 if a1 == 0
      :                          @67
  1030: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1033: 51 07 71                 jump @77 if a0 == 0
      :                          @68
  1036: 82 a9 10                 a2 = u64 [a3 + 0x10]
  1039: 51 09 9e 00              jump @84 if a2 == 0
      :                          @69
  1043: 82 a8                    a1 = u64 [a3]
  1045: 33 02 00 10              t0 = 0x1000
  1049: 33 04 10 00 03           t2 = 0x30010
  1054: c8 24 07                 a0 = t2 + t0
  1057: 01                       fallthrough
      :                          @70
  1058: 82 7a                    a3 = u64 [a0]
  1060: c8 6a 05                 s0 = a3 + s1
  1063: ac a5 c2 00              jump @90 if s0 <u a3
      :                          @71
  1067: 95 5b 01                 a4 = s0 + 0x1
  1070: 88 bc 01                 a5 = a4 <u 0x1
  1073: d8 b2 0b                 a4 = t0 <u a4
  1076: d4 cb 0b                 a4 = a4 | a5
  1079: 52 0b b2 00              jump @90 if a4 != 0
      :                          @72
  1083: 82 7b                    a4 = u64 [a0]
  1085: ab ab e5                 jump @70 if a4 != a3
      :                          @73
  1088: 7b 75                    u64 [a0] = s0
  1090: 33 0c                    a5 = 0
  1092: 7b 13 18                 u64 [sp + 0x18] = t1
  1095: c9 54 07                 a0 = t2 - s0
  1098: 95 77 00 10              a0 = a0 + 0x1000
  1102: 7b 17 10                 u64 [sp + 0x10] = a0
  1105: 7b 18 08                 u64 [sp + 0x8] = a1
  1108: 64 95                    s0 = a2
  1110: 7b 14                    u64 [sp] = t2
  1112: 50 10 18 b4 03           ra = 24, jump @160
      :                          @74 [@dyn 12]
  1117: 54 25 00 10 94 00        jump @91 if s0 <=u 4096
      :                          @75
  1123: 82 13 18                 t1 = u64 [sp + 0x18]
  1126: 82 18 10                 a1 = u64 [sp + 0x10]
  1129: 33 07                    a0 = 0
  1131: 7b 38 08                 u64 [t1 + 0x8] = a1
  1134: 28 b1 00                 jump @97
      :                          @76
  1137: 49 13 08                 u64 [t1 + 8] = 0
  1140: 33 07 01                 a0 = 0x1
  1143: 28 a8 00                 jump @97
      :                          @77
  1146: 33 07 00 10              a0 = 0x1000
  1150: 33 02 10 00 03           t0 = 0x30010
  1155: c8 72 09                 a2 = t0 + a0
  1158: 01                       fallthrough
      :                          @78
  1159: 82 9b                    a4 = u64 [a2]
  1161: c8 6b 0a                 a3 = a4 + s1
  1164: ac ba 5d                 jump @90 if a3 <u a4
      :                          @79
  1167: 95 ac 01                 a5 = a3 + 0x1
  1170: 88 c8 01                 a1 = a5 <u 0x1
  1173: d8 c7 0c                 a5 = a0 <u a5
  1176: d4 c8 08                 a1 = a1 | a5
  1179: 52 08 4e                 jump @90 if a1 != 0
      :                          @80
  1182: 82 98                    a1 = u64 [a2]
  1184: ab b8 e7                 jump @78 if a1 != a4
      :                          @81
  1187: 7b 9a                    u64 [a2] = a3
  1189: 33 0c                    a5 = 0
  1191: 01                       fallthrough
      :                          @82
  1192: ab b8 df                 jump @78 if a1 != a4
      :                          @83
  1195: 28 30                    jump @89
      :                          @84
  1197: 33 07 00 10              a0 = 0x1000
  1201: 33 02 10 00 03           t0 = 0x30010
  1206: c8 72 09                 a2 = t0 + a0
  1209: 01                       fallthrough
      :                          @85
  1210: 82 9b                    a4 = u64 [a2]
  1212: c8 6b 0a                 a3 = a4 + s1
  1215: ac ba 2a                 jump @90 if a3 <u a4
      :                          @86
  1218: 95 ac 01                 a5 = a3 + 0x1
  1221: 88 c8 01                 a1 = a5 <u 0x1
  1224: d8 c7 0c                 a5 = a0 <u a5
  1227: d4 c8 08                 a1 = a1 | a5
  1230: 52 08 1b                 jump @90 if a1 != 0
      :                          @87
  1233: 82 98                    a1 = u64 [a2]
  1235: ab b8 e7                 jump @85 if a1 != a4
      :                          @88
  1238: 7b 9a                    u64 [a2] = a3
  1240: 33 0c                    a5 = 0
  1242: 01                       fallthrough
      :                          @89
  1243: c9 a2 07                 a0 = t0 - a3
  1246: 95 78 00 10              a1 = a0 + 0x1000
  1250: 33 07                    a0 = 0
  1252: 7b 38 08                 u64 [t1 + 0x8] = a1
  1255: 28 38                    jump @97
      :                          @90
  1257: 33 07 01                 a0 = 0x1
  1260: 7b 37 08                 u64 [t1 + 0x8] = a0
  1263: 28 30                    jump @97
      :                          @91
  1265: 64 5c                    a5 = s0
  1267: 82 18                    a1 = u64 [sp]
  1269: 95 87 00 10              a0 = a1 + 0x1000
  1273: 82 13 18                 t1 = u64 [sp + 0x18]
  1276: 82 15 08                 s0 = u64 [sp + 0x8]
  1279: 01                       fallthrough
      :                          @92
  1280: 82 78                    a1 = u64 [a0]
  1282: c9 87 09                 a2 = a0 - a1
  1285: ab 59 11                 jump @96 if a2 != s0
      :                          @93
  1288: c9 c8 09                 a2 = a1 - a5
  1291: 01                       fallthrough
      :                          @94
  1292: 82 7a                    a3 = u64 [a0]
  1294: ab 8a f2                 jump @92 if a3 != a1
      :                          @95
  1297: 7b 79                    u64 [a0] = a2
  1299: 33 0b                    a4 = 0
  1301: 01                       fallthrough
      :                          @96
  1302: 82 18 10                 a1 = u64 [sp + 0x10]
  1305: 33 07                    a0 = 0
  1307: 7b 38 08                 u64 [t1 + 0x8] = a1
  1310: 01                       fallthrough
      :                          @97
  1311: 7b 36 10                 u64 [t1 + 0x10] = s1
  1314: 7b 37                    u64 [t1] = a0
  1316: 82 10 30                 ra = u64 [sp + 0x30]
  1319: 82 15 28                 s0 = u64 [sp + 0x28]
  1322: 82 16 20                 s1 = u64 [sp + 0x20]
  1325: 95 11 38                 sp = sp + 0x38
  1328: 32 00                    ret
      :                          @98
  1330: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1333: 7b 10 40                 u64 [sp + 0x40] = ra
  1336: 7b 15 38                 u64 [sp + 0x38] = s0
  1339: 7b 16 30                 u64 [sp + 0x30] = s1
  1342: 95 88 01                 a1 = a1 + 0x1
  1345: 51 08 53                 jump @106 if a1 == 0
      :                          @99
  1348: 64 75                    s0 = a0
  1350: 82 77                    a0 = u64 [a0]
  1352: 97 79 01                 a2 = a0 << 0x1
  1355: 33 0a 08                 a3 = 0x8
  1358: e4 a8 08                 a1 = maxu(a1, a3)
  1361: e4 89 06                 s1 = maxu(a2, a1)
  1364: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1367: 98 88 3f                 a1 = a1 >> 0x3f
  1370: 51 07 12                 jump @101 if a0 == 0
      :                          @100
  1373: 82 59 08                 a2 = u64 [s0 + 0x8]
  1376: 7b 19 18                 u64 [sp + 0x18] = a2
  1379: 49 11 20 01              u64 [sp + 32] = 0x1
  1383: 7b 17 28                 u64 [sp + 0x28] = a0
  1386: 28 06                    jump @102
      :                          @101
  1388: 49 11 20                 u64 [sp + 32] = 0
  1391: 01                       fallthrough
      :                          @102
  1392: 64 17                    a0 = sp
  1394: 95 1a 18                 a3 = sp + 0x18
  1397: 64 69                    a2 = s1
  1399: 50 10 1a 7c fe           ra = 26, jump @66
      :                          @103 [@dyn 13]
  1404: 82 18                    a1 = u64 [sp]
  1406: 82 17 08                 a0 = u64 [sp + 0x8]
  1409: 51 08 14                 jump @107 if a1 == 0
      :                          @104
  1412: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1422: aa 87 0d                 jump @108 if a0 == a1
      :                          @105
  1425: 52 07 18                 jump @109 if a0 != 0
      :                          @106
  1428: 00                       trap
      :                          @107
  1429: 7b 57 08                 u64 [s0 + 0x8] = a0
  1432: 7b 56                    u64 [s0] = s1
  1434: 01                       fallthrough
      :                          @108
  1435: 82 10 40                 ra = u64 [sp + 0x40]
  1438: 82 15 38                 s0 = u64 [sp + 0x38]
  1441: 82 16 30                 s1 = u64 [sp + 0x30]
  1444: 95 11 48                 sp = sp + 0x48
  1447: 32 00                    ret
      :                          @109
  1449: 00                       trap
      :                          @110
  1450: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  1453: 7b 10 30                 u64 [sp + 0x30] = ra
  1456: 7b 15 28                 u64 [sp + 0x28] = s0
  1459: 7b 16 20                 u64 [sp + 0x20] = s1
  1462: 82 8a 08                 a3 = u64 [a1 + 0x8]
  1465: 64 75                    s0 = a0
  1467: 51 0a 35                 jump @115 if a3 == 0
      :                          @111
  1470: 82 89                    a2 = u64 [a1]
  1472: 33 07                    a0 = 0
  1474: 95 9b 08                 a4 = a2 + 0x8
  1477: 01                       fallthrough
      :                          @112
  1478: 82 bc                    a5 = u64 [a4]
  1480: c8 c7 07                 a0 = a0 + a5
  1483: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  1486: 95 bb 10                 a4 = a4 + 0x10
  1489: 52 0a f5                 jump @112 if a3 != 0
      :                          @113
  1492: 82 8a 18                 a3 = u64 [a1 + 0x18]
  1495: 51 0a 24                 jump @117 if a3 == 0
      :                          @114
  1498: 82 99 08                 a2 = u64 [a2 + 0x8]
  1501: 8e 99                    a2 = a2 >u 0
  1503: 88 7a 10                 a3 = a0 <u 0x10
  1506: 85 aa 01                 a3 = a3 ^ 0x1
  1509: d4 a9 09                 a2 = a2 | a3
  1512: 89 7a                    a3 = a0 <s 0
  1514: e0 a9 09                 a2 = a2 & ~a3
  1517: 52 09 0a                 jump @116 if a2 != 0
      :                          @115
  1520: 33 07                    a0 = 0
  1522: 33 09 01                 a2 = 0x1
  1525: 28 4b                    jump @125
      :                          @116
  1527: 97 77 01                 a0 = a0 << 0x1
  1530: 01                       fallthrough
      :                          @117
  1531: 51 07 41                 jump @124 if a0 == 0
      :                          @118
  1534: 57 07 74                 jump @130 if a0 <s 0
      :                          @119
  1537: 64 53                    t1 = s0
  1539: 33 09 00 10              a2 = 0x1000
  1543: 33 02 10 00 03           t0 = 0x30010
  1548: c8 92 0b                 a4 = t0 + a2
  1551: 01                       fallthrough
      :                          @120
  1552: 82 bc                    a5 = u64 [a4]
  1554: c8 7c 0a                 a3 = a5 + a0
  1557: ac ca 5b                 jump @128 if a3 <u a5
      :                          @121
  1560: 95 a5 01                 s0 = a3 + 0x1
  1563: 88 56 01                 s1 = s0 <u 0x1
  1566: d8 59 05                 s0 = a2 <u s0
  1569: d4 65 05                 s0 = s0 | s1
  1572: 52 05 4c                 jump @128 if s0 != 0
      :                          @122
  1575: 82 b6                    s1 = u64 [a4]
  1577: ab c6 e7                 jump @120 if s1 != a5
      :                          @123
  1580: 7b ba                    u64 [a4] = a3
  1582: c9 a2 09                 a2 = t0 - a3
  1585: 33 0a 00 10              a3 = 0x1000
  1589: c8 a9 09                 a2 = a2 + a3
  1592: 64 35                    s0 = t1
  1594: 28 06                    jump @125
      :                          @124
  1596: 33 09 01                 a2 = 0x1
  1599: 01                       fallthrough
      :                          @125
  1600: 7b 17                    u64 [sp] = a0
  1602: 7b 19 08                 u64 [sp + 0x8] = a2
  1605: 49 11 10                 u64 [sp + 16] = 0
  1608: 64 17                    a0 = sp
  1610: 50 10 1c 1b 06           ra = 28, jump @244
      :                          @126 [@dyn 14]
  1615: 52 07 22                 jump @129 if a0 != 0
      :                          @127
  1618: 82 17 10                 a0 = u64 [sp + 0x10]
  1621: 82 18 08                 a1 = u64 [sp + 0x8]
  1624: 82 19                    a2 = u64 [sp]
  1626: 7b 57 10                 u64 [s0 + 0x10] = a0
  1629: 7b 58 08                 u64 [s0 + 0x8] = a1
  1632: 7b 59                    u64 [s0] = a2
  1634: 82 10 30                 ra = u64 [sp + 0x30]
  1637: 82 15 28                 s0 = u64 [sp + 0x28]
  1640: 82 16 20                 s1 = u64 [sp + 0x20]
  1643: 95 11 38                 sp = sp + 0x38
  1646: 32 00                    ret
      :                          @128
  1648: 00                       trap
      :                          @129
  1649: 00                       trap
      :                          @130
  1650: 00                       trap
      :                          @131 [@dyn 15]
  1651: 82 72                    t0 = u64 [a0]
  1653: 33 09 00 f0              a2 = 0xfffffffffffff000
  1657: 95 2a ff ef              a3 = t0 + 0xffffffffffffefff
  1661: ac 9a 27                 jump @137 if a3 <u a2
      :                          @132
  1664: 82 77 08                 a0 = u64 [a0 + 0x8]
  1667: 33 09 10 00 03           a2 = 0x30010
  1672: 95 99 00 10              a2 = a2 + 0x1000
  1676: 01                       fallthrough
      :                          @133
  1677: 82 9a                    a3 = u64 [a2]
  1679: c9 a9 0b                 a4 = a2 - a3
  1682: ab 7b 12                 jump @137 if a4 != a0
      :                          @134
  1685: c9 2a 0b                 a4 = a3 - t0
  1688: 01                       fallthrough
      :                          @135
  1689: 82 9c                    a5 = u64 [a2]
  1691: ab ac f2                 jump @133 if a5 != a3
      :                          @136
  1694: 7b 9b                    u64 [a2] = a4
  1696: 33 08                    a1 = 0
  1698: 32 00                    ret
      :                          @137
  1700: 32 00                    ret
      :                          @138 [@dyn 16]
  1702: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  1705: 7b 10 18                 u64 [sp + 0x18] = ra
  1708: 7b 15 10                 u64 [sp + 0x10] = s0
  1711: 7b 16 08                 u64 [sp + 0x8] = s1
  1714: 64 75                    s0 = a0
  1716: 82 7a 10                 a3 = u64 [a0 + 0x10]
  1719: 82 77                    a0 = u64 [a0]
  1721: c9 a7 07                 a0 = a0 - a3
  1724: 64 96                    s1 = a2
  1726: ac 97 2a                 jump @141 if a0 <u a2
      :                          @139
  1729: 7b 1a                    u64 [sp] = a3
  1731: 82 57 08                 a0 = u64 [s0 + 0x8]
  1734: c8 a7 07                 a0 = a0 + a3
  1737: 64 69                    a2 = s1
  1739: 50 10 22 41 01           ra = 34, jump @160
      :                          @140 [@dyn 17]
  1744: 82 17                    a0 = u64 [sp]
  1746: c8 76 06                 s1 = s1 + a0
  1749: 7b 56 10                 u64 [s0 + 0x10] = s1
  1752: 33 07                    a0 = 0
  1754: 82 10 18                 ra = u64 [sp + 0x18]
  1757: 82 15 10                 s0 = u64 [sp + 0x10]
  1760: 82 16 08                 s1 = u64 [sp + 0x8]
  1763: 95 11 20                 sp = sp + 0x20
  1766: 32 00                    ret
      :                          @141
  1768: 64 57                    a0 = s0
  1770: 7b 18                    u64 [sp] = a1
  1772: 64 a8                    a1 = a3
  1774: 64 69                    a2 = s1
  1776: 50 10 24 8c fc           ra = 36, jump @54
      :                          @142 [@dyn 18]
  1781: 82 18                    a1 = u64 [sp]
  1783: 82 5a 10                 a3 = u64 [s0 + 0x10]
  1786: 28 c7                    jump @139
      :                          @143 [@dyn 19]
  1788: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  1791: 7b 10 20                 u64 [sp + 0x20] = ra
  1794: 7b 15 18                 u64 [sp + 0x18] = s0
  1797: 7b 16 10                 u64 [sp + 0x10] = s1
  1800: 64 86                    s1 = a1
  1802: 83 88                    i32 a1 = a1 + 0
  1804: 33 09 80 00              a2 = 0x80
  1808: 64 7a                    a3 = a0
  1810: ae 98 2b                 jump @148 if a1 >=u a2
      :                          @144
  1813: 82 a8 10                 a1 = u64 [a3 + 0x10]
  1816: 82 a7                    a0 = u64 [a3]
  1818: ab 78 12                 jump @147 if a1 != a0
      :                          @145
  1821: 64 a7                    a0 = a3
  1823: 64 a5                    s0 = a3
  1825: 50 10 28 11 fe           ra = 40, jump @98
      :                          @146 [@dyn 20]
  1830: 64 5a                    a3 = s0
  1832: 82 58 10                 a1 = u64 [s0 + 0x10]
  1835: 01                       fallthrough
      :                          @147
  1836: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1839: c8 87 07                 a0 = a0 + a1
  1842: 78 76                    u8 [a0] = s1
  1844: 95 88 01                 a1 = a1 + 0x1
  1847: 7b a8 10                 u64 [a3 + 0x10] = a1
  1850: 28 ab 00                 jump @156
      :                          @148
  1853: 8b 67 0b                 i32 a0 = s1 >> 0xb
  1856: 48 11 0c                 u32 [sp + 12] = 0
  1859: 52 07 1c                 jump @150 if a0 != 0
      :                          @149
  1862: 98 67 06                 a0 = s1 >> 0x6
  1865: 86 77 c0 00              a0 = a0 | 0xc0
  1869: 78 17 0c                 u8 [sp + 0xc] = a0
  1872: 84 67 3f                 a0 = s1 & 0x3f
  1875: 86 77 80 00              a0 = a0 | 0x80
  1879: 78 17 0d                 u8 [sp + 0xd] = a0
  1882: 33 06 02                 s1 = 0x2
  1885: 28 63                    jump @153
      :                          @150
  1887: 8b 67 10                 i32 a0 = s1 >> 0x10
  1890: 52 07 29                 jump @152 if a0 != 0
      :                          @151
  1893: 98 67 0c                 a0 = s1 >> 0xc
  1896: 86 77 e0 00              a0 = a0 | 0xe0
  1900: 78 17 0c                 u8 [sp + 0xc] = a0
  1903: 97 67 34                 a0 = s1 << 0x34
  1906: 98 77 3a                 a0 = a0 >> 0x3a
  1909: 95 77 80 00              a0 = a0 + 0x80
  1913: 78 17 0d                 u8 [sp + 0xd] = a0
  1916: 84 67 3f                 a0 = s1 & 0x3f
  1919: 86 77 80 00              a0 = a0 | 0x80
  1923: 78 17 0e                 u8 [sp + 0xe] = a0
  1926: 33 06 03                 s1 = 0x3
  1929: 28 37                    jump @153
      :                          @152
  1931: 97 67 2b                 a0 = s1 << 0x2b
  1934: 98 77 3d                 a0 = a0 >> 0x3d
  1937: 95 77 f0 00              a0 = a0 + 0xf0
  1941: 78 17 0c                 u8 [sp + 0xc] = a0
  1944: 97 67 2e                 a0 = s1 << 0x2e
  1947: 98 77 3a                 a0 = a0 >> 0x3a
  1950: 95 77 80 00              a0 = a0 + 0x80
  1954: 78 17 0d                 u8 [sp + 0xd] = a0
  1957: 97 67 34                 a0 = s1 << 0x34
  1960: 98 77 3a                 a0 = a0 >> 0x3a
  1963: 95 77 80 00              a0 = a0 + 0x80
  1967: 78 17 0e                 u8 [sp + 0xe] = a0
  1970: 84 67 3f                 a0 = s1 & 0x3f
  1973: 86 77 80 00              a0 = a0 | 0x80
  1977: 78 17 0f                 u8 [sp + 0xf] = a0
  1980: 33 06 04                 s1 = 0x4
  1983: 01                       fallthrough
      :                          @153
  1984: 82 a5 10                 s0 = u64 [a3 + 0x10]
  1987: 82 a7                    a0 = u64 [a3]
  1989: c9 57 07                 a0 = a0 - s0
  1992: ac 67 2d                 jump @157 if a0 <u s1
      :                          @154
  1995: 7b 1a                    u64 [sp] = a3
  1997: 82 a7 08                 a0 = u64 [a3 + 0x8]
  2000: c8 57 07                 a0 = a0 + s0
  2003: 95 18 0c                 a1 = sp + 0xc
  2006: 64 69                    a2 = s1
  2008: 50 10 2a 34              ra = 42, jump @160
      :                          @155 [@dyn 21]
  2012: c8 56 06                 s1 = s1 + s0
  2015: 82 17                    a0 = u64 [sp]
  2017: 7b 76 10                 u64 [a0 + 0x10] = s1
  2020: 01                       fallthrough
      :                          @156
  2021: 33 07                    a0 = 0
  2023: 82 10 20                 ra = u64 [sp + 0x20]
  2026: 82 15 18                 s0 = u64 [sp + 0x18]
  2029: 82 16 10                 s1 = u64 [sp + 0x10]
  2032: 95 11 28                 sp = sp + 0x28
  2035: 32 00                    ret
      :                          @157
  2037: 64 a7                    a0 = a3
  2039: 64 58                    a1 = s0
  2041: 64 69                    a2 = s1
  2043: 64 a5                    s0 = a3
  2045: 50 10 2c 7f fb           ra = 44, jump @54
      :                          @158 [@dyn 22]
  2050: 64 5a                    a3 = s0
  2052: 82 55 10                 s0 = u64 [s0 + 0x10]
  2055: 28 c4                    jump @154
      :                          @159 [@dyn 23]
  2057: 28 5c 04                 jump @244
      :                          @160
  2060: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  2063: 7b 10 18                 u64 [sp + 0x18] = ra
  2066: 7b 15 10                 u64 [sp + 0x10] = s0
  2069: 7b 16 08                 u64 [sp + 0x8] = s1
  2072: 53 19 10 64              jump @169 if a2 <u 16
      :                          @161
  2076: 8d 7a                    i32 a3 = -a0
  2078: 84 a2 07                 t0 = a3 & 0x7
  2081: c8 27 0b                 a4 = a0 + t0
  2084: 51 02 15                 jump @164 if t0 == 0
      :                          @162
  2087: 64 8c                    a5 = a1
  2089: 64 75                    s0 = a0
  2091: 01                       fallthrough
      :                          @163
  2092: 7c ca                    a3 = u8 [a5]
  2094: 78 5a                    u8 [s0] = a3
  2096: 95 55 01                 s0 = s0 + 0x1
  2099: 95 cc 01                 a5 = a5 + 0x1
  2102: ac b5 f6                 jump @163 if s0 <u a4
      :                          @164
  2105: c8 28 03                 t1 = a1 + t0
  2108: c9 29 02                 t0 = a2 - t0
  2111: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  2114: 84 38 07                 a1 = t1 & 0x7
  2117: c8 4b 0a                 a3 = a4 + t2
  2120: 51 08 3b                 jump @171 if a1 == 0
      :                          @165
  2123: 58 04 4b                 jump @174 if t2 <=s 0
      :                          @166
  2126: 97 38 03                 a1 = t1 << 0x3
  2129: 84 80 38                 ra = a1 & 0x38
  2132: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  2135: 82 c5                    s0 = u64 [a5]
  2137: 8d 88                    i32 a1 = -a1
  2139: 84 88 38                 a1 = a1 & 0x38
  2142: 95 cc 08                 a5 = a5 + 0x8
  2145: 01                       fallthrough
      :                          @167
  2146: 82 c6                    s1 = u64 [a5]
  2148: d0 05 05                 s0 = s0 >> ra
  2151: cf 86 09                 a2 = s1 << a1
  2154: d4 59 09                 a2 = a2 | s0
  2157: 7b b9                    u64 [a4] = a2
  2159: 95 bb 08                 a4 = a4 + 0x8
  2162: 95 cc 08                 a5 = a5 + 0x8
  2165: 64 65                    s0 = s1
  2167: ac ab eb                 jump @167 if a4 <u a3
      :                          @168
  2170: 28 1c                    jump @174
      :                          @169
  2172: 64 7a                    a3 = a0
  2174: 52 09 21                 jump @175 if a2 != 0
      :                          @170
  2177: 28 2f                    jump @177
      :                          @171
  2179: 58 04 13                 jump @174 if t2 <=s 0
      :                          @172
  2182: 64 38                    a1 = t1
  2184: 01                       fallthrough
      :                          @173
  2185: 82 89                    a2 = u64 [a1]
  2187: 7b b9                    u64 [a4] = a2
  2189: 95 bb 08                 a4 = a4 + 0x8
  2192: 95 88 08                 a1 = a1 + 0x8
  2195: ac ab f6                 jump @173 if a4 <u a3
      :                          @174
  2198: c8 43 08                 a1 = t1 + t2
  2201: 84 29 07                 a2 = t0 & 0x7
  2204: 51 09 14                 jump @177 if a2 == 0
      :                          @175
  2207: c8 a9 09                 a2 = a2 + a3
  2210: 01                       fallthrough
      :                          @176
  2211: 7c 8b                    a4 = u8 [a1]
  2213: 78 ab                    u8 [a3] = a4
  2215: 95 aa 01                 a3 = a3 + 0x1
  2218: 95 88 01                 a1 = a1 + 0x1
  2221: ac 9a f6                 jump @176 if a3 <u a2
      :                          @177
  2224: 82 10 18                 ra = u64 [sp + 0x18]
  2227: 82 15 10                 s0 = u64 [sp + 0x10]
  2230: 82 16 08                 s1 = u64 [sp + 0x8]
  2233: 95 11 20                 sp = sp + 0x20
  2236: 32 00                    ret
      :                          @178 [@dyn 24]
  2238: 82 77                    a0 = u64 [a0]
  2240: 01                       fallthrough
      :                          @179
  2241: 28                       jump @179
      :                          @180
  2242: 95 11 a0                 sp = sp + 0xffffffffffffffa0
  2245: 7b 10 58                 u64 [sp + 0x58] = ra
  2248: 7b 15 50                 u64 [sp + 0x50] = s0
  2251: 7b 16 48                 u64 [sp + 0x48] = s1
  2254: 7b 19 08                 u64 [sp + 0x8] = a2
  2257: 7b 18                    u64 [sp] = a1
  2259: 98 7a 04                 a3 = a0 >> 0x4
  2262: 33 09 27                 a2 = 0x27
  2265: 33 0b 2a 00 01           a4 = 0x1002a
  2270: 53 2a 71 02 7b           jump @183 if a3 <u 625
      :                          @181
  2275: 33 09 27                 a2 = 0x27
  2278: 95 1c 46                 a5 = sp + 0x46
  2281: 3a 08 00 00 03           a1 = u64 [0x30000]
  2286: 7b 18 18                 u64 [sp + 0x18] = a1
  2289: 49 11 10 f0 d8 00        u64 [sp + 16] = 0xd8f0
  2295: 33 03 7b 14              t1 = 0x147b
  2299: 33 04 ff e0 f5 05        t2 = 0x5f5e0ff
  2305: 01                       fallthrough
      :                          @182
  2306: 64 70                    ra = a0
  2308: 82 17 18                 a0 = u64 [sp + 0x18]
  2311: d6 70 07                 a0 = ra mulhu a0
  2314: 98 77 0b                 a0 = a0 >> 0xb
  2317: 82 18 10                 a1 = u64 [sp + 0x10]
  2320: c0 87 02                 i32 t0 = a0 * a1
  2323: c8 02 05                 s0 = t0 + ra
  2326: 97 52 30                 t0 = s0 << 0x30
  2329: 98 28 32                 a1 = t0 >> 0x32
  2332: ca 38 08                 a1 = a1 * t1
  2335: 98 8a 11                 a3 = a1 >> 0x11
  2338: 98 88 10                 a1 = a1 >> 0x10
  2341: 84 88 fe 07              a1 = a1 & 0x7fe
  2345: 96 aa 9c                 a3 = a3 * 0xffffffffffffff9c
  2348: c8 5a 0a                 a3 = a3 + s0
  2351: 97 aa 31                 a3 = a3 << 0x31
  2354: 98 aa 30                 a3 = a3 >> 0x30
  2357: c8 b8 08                 a1 = a1 + a4
  2360: 7c 85                    s0 = u8 [a1]
  2362: 7c 88 01                 a1 = u8 [a1 + 0x1]
  2365: c8 ba 0a                 a3 = a3 + a4
  2368: 7c a6 01                 s1 = u8 [a3 + 0x1]
  2371: 7c aa                    a3 = u8 [a3]
  2373: 78 c8 ff                 u8 [a5 + 0xffffffffffffffff] = a1
  2376: 78 c5 fe                 u8 [a5 + 0xfffffffffffffffe] = s0
  2379: 78 c6 01                 u8 [a5 + 0x1] = s1
  2382: 78 ca                    u8 [a5] = a3
  2384: 95 99 fc                 a2 = a2 + 0xfffffffffffffffc
  2387: 95 cc fc                 a5 = a5 + 0xfffffffffffffffc
  2390: ac 04 ac                 jump @182 if t2 <u ra
      :                          @183
  2393: 54 17 63 36              jump @185 if a0 <=u 99
      :                          @184
  2397: 97 78 30                 a1 = a0 << 0x30
  2400: 98 88 32                 a1 = a1 >> 0x32
  2403: 96 88 7b 14              a1 = a1 * 0x147b
  2407: 98 88 11                 a1 = a1 >> 0x11
  2410: 96 8a 9c                 a3 = a1 * 0xffffffffffffff9c
  2413: c8 a7 07                 a0 = a0 + a3
  2416: 97 77 31                 a0 = a0 << 0x31
  2419: 98 77 30                 a0 = a0 >> 0x30
  2422: 95 99 fe                 a2 = a2 + 0xfffffffffffffffe
  2425: c8 b7 07                 a0 = a0 + a4
  2428: 7c 7a 01                 a3 = u8 [a0 + 0x1]
  2431: 7c 77                    a0 = u8 [a0]
  2433: 95 1c 21                 a5 = sp + 0x21
  2436: c8 9c 0c                 a5 = a5 + a2
  2439: 78 ca 01                 u8 [a5 + 0x1] = a3
  2442: 78 c7                    u8 [a5] = a0
  2444: 64 87                    a0 = a1
  2446: 01                       fallthrough
      :                          @185
  2447: 55 17 0a 14              jump @187 if a0 >=u 10
      :                          @186
  2451: 95 99 ff                 a2 = a2 + 0xffffffffffffffff
  2454: 95 18 21                 a1 = sp + 0x21
  2457: c8 98 08                 a1 = a1 + a2
  2460: 83 77 30                 i32 a0 = a0 + 0x30
  2463: 78 87                    u8 [a1] = a0
  2465: 28 1c                    jump @188
      :                          @187
  2467: 97 77 01                 a0 = a0 << 0x1
  2470: 95 99 fe                 a2 = a2 + 0xfffffffffffffffe
  2473: c8 b7 07                 a0 = a0 + a4
  2476: 7c 78 01                 a1 = u8 [a0 + 0x1]
  2479: 7c 77                    a0 = u8 [a0]
  2481: 95 1a 21                 a3 = sp + 0x21
  2484: c8 9a 0a                 a3 = a3 + a2
  2487: 78 a8 01                 u8 [a3 + 0x1] = a1
  2490: 78 a7                    u8 [a3] = a0
  2492: 01                       fallthrough
      :                          @188
  2493: 95 1b 21                 a4 = sp + 0x21
  2496: c8 9b 0b                 a4 = a4 + a2
  2499: 9a 9c 27                 a5 = 0x27 - a2
  2502: 33 09 28 00 01           a2 = 0x10028
  2507: 82 17 08                 a0 = u64 [sp + 0x8]
  2510: 82 18                    a1 = u64 [sp]
  2512: 33 0a                    a3 = 0
  2514: 50 10 32 12              ra = 50, jump @190
      :                          @189 [@dyn 25]
  2518: 82 10 58                 ra = u64 [sp + 0x58]
  2521: 82 15 50                 s0 = u64 [sp + 0x50]
  2524: 82 16 48                 s1 = u64 [sp + 0x48]
  2527: 95 11 60                 sp = sp + 0x60
  2530: 32 00                    ret
      :                          @190
  2532: 95 11 98                 sp = sp + 0xffffffffffffff98
  2535: 7b 10 60                 u64 [sp + 0x60] = ra
  2538: 7b 15 58                 u64 [sp + 0x58] = s0
  2541: 7b 16 50                 u64 [sp + 0x50] = s1
  2544: 7b 1b 18                 u64 [sp + 0x18] = a4
  2547: 51 08 4f                 jump @197 if a1 == 0
      :                          @191
  2550: 80 76 34                 s1 = u32 [a0 + 0x34]
  2553: 84 68 01                 a1 = s1 & 0x1
  2556: 33 0b 2b                 a4 = 0x2b
  2559: 33 05 00 00 11           s0 = 0x110000
  2564: db 8b 05                 s0 = a4 if a1 != 0
  2567: 7b 15 28                 u64 [sp + 0x28] = s0
  2570: c8 c8 02                 t0 = a1 + a5
  2573: 84 68 04                 a1 = s1 & 0x4
  2576: 51 08 42                 jump @198 if a1 == 0
      :                          @192
  2579: 7b 19 30                 u64 [sp + 0x30] = a2
  2582: 33 08                    a1 = 0
  2584: 51 0a 1a                 jump @195 if a3 == 0
      :                          @193
  2587: 64 a5                    s0 = a3
  2589: 01                       fallthrough
      :                          @194
  2590: 7d 9b                    a4 = i8 [a2]
  2592: 89 bb c0                 a4 = a4 <s 0xffffffffffffffc0
  2595: 85 bb 01                 a4 = a4 ^ 0x1
  2598: c8 b8 08                 a1 = a1 + a4
  2601: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  2604: 95 99 01                 a2 = a2 + 0x1
  2607: 52 05 ef                 jump @194 if s0 != 0
      :                          @195
  2610: c8 82 02                 t0 = t0 + a1
  2613: 7b 1a 38                 u64 [sp + 0x38] = a3
  2616: 82 78                    a1 = u64 [a0]
  2618: 7b 1c 20                 u64 [sp + 0x20] = a5
  2621: 52 08 23                 jump @199 if a1 != 0
      :                          @196
  2624: 28 41                    jump @204
      :                          @197
  2626: 81 76 34                 s1 = i32 [a0 + 0x34]
  2629: 95 c2 01                 t0 = a5 + 0x1
  2632: 49 11 28 2d              u64 [sp + 40] = 0x2d
  2636: 84 68 04                 a1 = s1 & 0x4
  2639: 52 08 c4                 jump @192 if a1 != 0
      :                          @198
  2642: 49 11 30                 u64 [sp + 48] = 0
  2645: 7b 1a 38                 u64 [sp + 0x38] = a3
  2648: 82 78                    a1 = u64 [a0]
  2650: 7b 1c 20                 u64 [sp + 0x20] = a5
  2653: 51 08 24                 jump @204 if a1 == 0
      :                          @199
  2656: 82 75 08                 s0 = u64 [a0 + 0x8]
  2659: ae 52 1e                 jump @204 if t0 >=u s0
      :                          @200
  2662: 84 66 08                 s1 = s1 & 0x8
  2665: 52 06 50                 jump @207 if s1 != 0
      :                          @201
  2668: 7c 79 38                 a2 = u8 [a0 + 0x38]
  2671: c9 25 0a                 a3 = s0 - t0
  2674: 5a 19 01 a1 00           jump @214 if a2 >s 1
      :                          @202
  2679: 52 09 ae 00              jump @216 if a2 != 0
      :                          @203
  2683: 7b 1a 10                 u64 [sp + 0x10] = a3
  2686: 28 ad 00                 jump @217
      :                          @204
  2689: 82 75 20                 s0 = u64 [a0 + 0x20]
  2692: 82 76 28                 s1 = u64 [a0 + 0x28]
  2695: 64 57                    a0 = s0
  2697: 64 68                    a1 = s1
  2699: 82 19 28                 a2 = u64 [sp + 0x28]
  2702: 82 1a 30                 a3 = u64 [sp + 0x30]
  2705: 82 1b 38                 a4 = u64 [sp + 0x38]
  2708: 50 10 34 6d 01           ra = 52, jump @237
      :                          @205 [@dyn 26]
  2713: 33 08 01                 a1 = 0x1
  2716: 52 07 bc 00              jump @222 if a0 != 0
      :                          @206
  2720: 82 6c 18                 a5 = u64 [s1 + 0x18]
  2723: 64 57                    a0 = s0
  2725: 82 18 18                 a1 = u64 [sp + 0x18]
  2728: 82 19 20                 a2 = u64 [sp + 0x20]
  2731: 82 10 60                 ra = u64 [sp + 0x60]
  2734: 82 15 58                 s0 = u64 [sp + 0x58]
  2737: 82 16 50                 s1 = u64 [sp + 0x50]
  2740: 95 11 68                 sp = sp + 0x68
  2743: 32 0c                    jump [a5]
      :                          @207
  2745: 7b 12 40                 u64 [sp + 0x40] = t0
  2748: 81 78 30                 a1 = i32 [a0 + 0x30]
  2751: 7b 18 08                 u64 [sp + 0x8] = a1
  2754: 7c 79 38                 a2 = u8 [a0 + 0x38]
  2757: 7b 19                    u64 [sp] = a2
  2759: 82 79 20                 a2 = u64 [a0 + 0x20]
  2762: 82 76 28                 s1 = u64 [a0 + 0x28]
  2765: 48 17 30 30              u32 [a0 + 48] = 0x30
  2769: 7b 17 10                 u64 [sp + 0x10] = a0
  2772: 46 17 38 01              u8 [a0 + 56] = 0x1
  2776: 7b 19 48                 u64 [sp + 0x48] = a2
  2779: 64 97                    a0 = a2
  2781: 64 68                    a1 = s1
  2783: 82 19 28                 a2 = u64 [sp + 0x28]
  2786: 82 1a 30                 a3 = u64 [sp + 0x30]
  2789: 82 1b 38                 a4 = u64 [sp + 0x38]
  2792: 50 10 36 19 01           ra = 54, jump @237
      :                          @208 [@dyn 27]
  2797: 52 07 67                 jump @221 if a0 != 0
      :                          @209
  2800: 82 17 40                 a0 = u64 [sp + 0x40]
  2803: c9 75 05                 s0 = s0 - a0
  2806: 95 55 01                 s0 = s0 + 0x1
  2809: 01                       fallthrough
      :                          @210
  2810: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  2813: 51 05 c6 00              jump @232 if s0 == 0
      :                          @211
  2817: 82 69 20                 a2 = u64 [s1 + 0x20]
  2820: 33 08 30                 a1 = 0x30
  2823: 82 17 48                 a0 = u64 [sp + 0x48]
  2826: b4 90 01 38              ra = 56, jump [a2]
      :                          @212 [@dyn 28]
  2830: 51 07 ec                 jump @210 if a0 == 0
      :                          @213
  2833: 28 43                    jump @221
      :                          @214
  2835: 52 19 02 12              jump @216 if a2 != 2
      :                          @215
  2839: 98 a9 01                 a2 = a3 >> 0x1
  2842: 95 a8 01                 a1 = a3 + 0x1
  2845: 98 88 01                 a1 = a1 >> 0x1
  2848: 7b 18 10                 u64 [sp + 0x10] = a1
  2851: 28 08                    jump @217
      :                          @216
  2853: 64 a9                    a2 = a3
  2855: 49 11 10                 u64 [sp + 16] = 0
  2858: 01                       fallthrough
      :                          @217
  2859: 82 78 20                 a1 = u64 [a0 + 0x20]
  2862: 7b 18 48                 u64 [sp + 0x48] = a1
  2865: 82 76 28                 s1 = u64 [a0 + 0x28]
  2868: 81 77 30                 a0 = i32 [a0 + 0x30]
  2871: 7b 17 40                 u64 [sp + 0x40] = a0
  2874: 95 95 01                 s0 = a2 + 0x1
  2877: 01                       fallthrough
      :                          @218
  2878: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  2881: 51 05 27                 jump @223 if s0 == 0
      :                          @219
  2884: 82 69 20                 a2 = u64 [s1 + 0x20]
  2887: 82 17 48                 a0 = u64 [sp + 0x48]
  2890: 82 18 40                 a1 = u64 [sp + 0x40]
  2893: b4 90 01 3a              ra = 58, jump [a2]
      :                          @220 [@dyn 29]
  2897: 51 07 ed                 jump @218 if a0 == 0
      :                          @221
  2900: 33 08 01                 a1 = 0x1
  2903: 01                       fallthrough
      :                          @222
  2904: 64 87                    a0 = a1
  2906: 82 10 60                 ra = u64 [sp + 0x60]
  2909: 82 15 58                 s0 = u64 [sp + 0x58]
  2912: 82 16 50                 s1 = u64 [sp + 0x50]
  2915: 95 11 68                 sp = sp + 0x68
  2918: 32 00                    ret
      :                          @223
  2920: 82 15 48                 s0 = u64 [sp + 0x48]
  2923: 64 57                    a0 = s0
  2925: 64 68                    a1 = s1
  2927: 82 19 28                 a2 = u64 [sp + 0x28]
  2930: 82 1a 30                 a3 = u64 [sp + 0x30]
  2933: 82 1b 38                 a4 = u64 [sp + 0x38]
  2936: 50 10 3c 89 00           ra = 60, jump @237
      :                          @224 [@dyn 30]
  2941: 33 08 01                 a1 = 0x1
  2944: 52 07 d8                 jump @222 if a0 != 0
      :                          @225
  2947: 82 6a 18                 a3 = u64 [s1 + 0x18]
  2950: 64 57                    a0 = s0
  2952: 82 18 18                 a1 = u64 [sp + 0x18]
  2955: 82 19 20                 a2 = u64 [sp + 0x20]
  2958: b4 a0 01 3e              ra = 62, jump [a3]
      :                          @226 [@dyn 31]
  2962: 33 08 01                 a1 = 0x1
  2965: 52 07 c3                 jump @222 if a0 != 0
      :                          @227
  2968: 82 17 10                 a0 = u64 [sp + 0x10]
  2971: 9a 77                    a0 = -a0
  2973: 7b 17 38                 u64 [sp + 0x38] = a0
  2976: 33 05 ff                 s0 = 0xffffffffffffffff
  2979: 01                       fallthrough
      :                          @228
  2980: 82 17 38                 a0 = u64 [sp + 0x38]
  2983: c8 57 07                 a0 = a0 + s0
  2986: 51 17 ff 42              jump @235 if a0 == 4294967295
      :                          @229
  2990: 82 69 20                 a2 = u64 [s1 + 0x20]
  2993: 82 17 48                 a0 = u64 [sp + 0x48]
  2996: 82 18 40                 a1 = u64 [sp + 0x40]
  2999: b4 90 01 40              ra = 64, jump [a2]
      :                          @230 [@dyn 32]
  3003: 95 55 01                 s0 = s0 + 0x1
  3006: 51 07 e6                 jump @228 if a0 == 0
      :                          @231
  3009: 28 37                    jump @236
      :                          @232
  3011: 82 6a 18                 a3 = u64 [s1 + 0x18]
  3014: 82 17 48                 a0 = u64 [sp + 0x48]
  3017: 82 18 18                 a1 = u64 [sp + 0x18]
  3020: 82 19 20                 a2 = u64 [sp + 0x20]
  3023: b4 a0 01 42              ra = 66, jump [a3]
      :                          @233 [@dyn 33]
  3027: 33 08 01                 a1 = 0x1
  3030: 52 07 82                 jump @222 if a0 != 0
      :                          @234
  3033: 33 08                    a1 = 0
  3035: 82 17 10                 a0 = u64 [sp + 0x10]
  3038: 82 19 08                 a2 = u64 [sp + 0x8]
  3041: 7a 79 30                 u32 [a0 + 0x30] = a2
  3044: 82 19                    a2 = u64 [sp]
  3046: 78 79 38                 u8 [a0 + 0x38] = a2
  3049: 28 6f ff                 jump @222
      :                          @235
  3052: 82 15 10                 s0 = u64 [sp + 0x10]
  3055: 82 17 10                 a0 = u64 [sp + 0x10]
  3058: d8 75 08                 a1 = s0 <u a0
  3061: 28 63 ff                 jump @222
      :                          @236
  3064: 82 17 10                 a0 = u64 [sp + 0x10]
  3067: d8 75 08                 a1 = s0 <u a0
  3070: 28 5a ff                 jump @222
      :                          @237
  3073: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  3076: 7b 10 20                 u64 [sp + 0x20] = ra
  3079: 7b 15 18                 u64 [sp + 0x18] = s0
  3082: 7b 16 10                 u64 [sp + 0x10] = s1
  3085: 83 9c                    i32 a5 = a2 + 0
  3087: 33 02 00 00 11           t0 = 0x110000
  3092: 64 a6                    s1 = a3
  3094: 64 85                    s0 = a1
  3096: 64 7a                    a3 = a0
  3098: aa 2c 20                 jump @240 if a5 == t0
      :                          @238
  3101: 82 5c 20                 a5 = u64 [s0 + 0x20]
  3104: 64 a7                    a0 = a3
  3106: 64 98                    a1 = a2
  3108: 7b 1b 08                 u64 [sp + 0x8] = a4
  3111: 7b 1a                    u64 [sp] = a3
  3113: b4 c0 01 44              ra = 68, jump [a5]
      :                          @239 [@dyn 34]
  3117: 82 1a                    a3 = u64 [sp]
  3119: 82 1b 08                 a4 = u64 [sp + 0x8]
  3122: 64 78                    a1 = a0
  3124: 33 07 01                 a0 = 0x1
  3127: 52 08 20                 jump @243 if a1 != 0
      :                          @240
  3130: 51 06 1a                 jump @242 if s1 == 0
      :                          @241
  3133: 82 5c 18                 a5 = u64 [s0 + 0x18]
  3136: 64 a7                    a0 = a3
  3138: 64 68                    a1 = s1
  3140: 64 b9                    a2 = a4
  3142: 82 10 20                 ra = u64 [sp + 0x20]
  3145: 82 15 18                 s0 = u64 [sp + 0x18]
  3148: 82 16 10                 s1 = u64 [sp + 0x10]
  3151: 95 11 28                 sp = sp + 0x28
  3154: 32 0c                    jump [a5]
      :                          @242
  3156: 33 07                    a0 = 0
  3158: 01                       fallthrough
      :                          @243
  3159: 82 10 20                 ra = u64 [sp + 0x20]
  3162: 82 15 18                 s0 = u64 [sp + 0x18]
  3165: 82 16 10                 s1 = u64 [sp + 0x10]
  3168: 95 11 28                 sp = sp + 0x28
  3171: 32 00                    ret
      :                          @244
  3173: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  3177: 7b 10 80 00              u64 [sp + 0x80] = ra
  3181: 7b 15 78                 u64 [sp + 0x78] = s0
  3184: 7b 16 70                 u64 [sp + 0x70] = s1
  3187: 49 11 60 20              u64 [sp + 96] = 0x20
  3191: 33 09 03                 a2 = 0x3
  3194: 78 19 68                 u8 [sp + 0x68] = a2
  3197: 49 11 30                 u64 [sp + 48] = 0
  3200: 49 11 40                 u64 [sp + 64] = 0
  3203: 82 86 20                 s1 = u64 [a1 + 0x20]
  3206: 7b 17 50                 u64 [sp + 0x50] = a0
  3209: 33 07 18 01 01           a0 = 0x10118
  3214: 7b 17 58                 u64 [sp + 0x58] = a0
  3217: 51 06 06 01              jump @266 if s1 == 0
      :                          @245
  3221: 82 87 28                 a0 = u64 [a1 + 0x28]
  3224: 51 07 73 01              jump @276 if a0 == 0
      :                          @246
  3228: 33 09                    a2 = 0
  3230: 82 85                    s0 = u64 [a1]
  3232: 7b 18 08                 u64 [sp + 0x8] = a1
  3235: 82 88 10                 a1 = u64 [a1 + 0x10]
  3238: 7b 18 18                 u64 [sp + 0x18] = a1
  3241: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  3244: 97 88 03                 a1 = a1 << 0x3
  3247: 98 88 03                 a1 = a1 >> 0x3
  3250: 95 88 01                 a1 = a1 + 0x1
  3253: 7b 18                    u64 [sp] = a1
  3255: 95 55 08                 s0 = s0 + 0x8
  3258: 96 78 38                 a1 = a0 * 0x38
  3261: 95 66 18                 s1 = s1 + 0x18
  3264: 33 07 30                 a0 = 0x30
  3267: 7b 17 10                 u64 [sp + 0x10] = a0
  3270: 01                       fallthrough
      :                          @247
  3271: 7b 18 20                 u64 [sp + 0x20] = a1
  3274: 7b 19 28                 u64 [sp + 0x28] = a2
  3277: 82 59                    a2 = u64 [s0]
  3279: 51 09 17                 jump @250 if a2 == 0
      :                          @248
  3282: 82 1a 58                 a3 = u64 [sp + 0x58]
  3285: 82 17 50                 a0 = u64 [sp + 0x50]
  3288: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  3291: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3294: b4 a0 01 46              ra = 70, jump [a3]
      :                          @249 [@dyn 35]
  3298: 52 07 4e 01              jump @279 if a0 != 0
      :                          @250
  3302: 81 67 10                 a0 = i32 [s1 + 0x10]
  3305: 7a 17 60                 u32 [sp + 0x60] = a0
  3308: 7c 67 18                 a0 = u8 [s1 + 0x18]
  3311: 78 17 68                 u8 [sp + 0x68] = a0
  3314: 81 67 14                 a0 = i32 [s1 + 0x14]
  3317: 7a 17 64                 u32 [sp + 0x64] = a0
  3320: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3323: 82 67                    a0 = u64 [s1]
  3325: 51 08 26                 jump @255 if a1 == 0
      :                          @251
  3328: 52 18 01 16              jump @253 if a1 != 1
      :                          @252
  3332: 97 77 04                 a0 = a0 << 0x4
  3335: 82 18 18                 a1 = u64 [sp + 0x18]
  3338: c8 87 07                 a0 = a0 + a1
  3341: 82 78 08                 a1 = u64 [a0 + 0x8]
  3344: 82 19 10                 a2 = u64 [sp + 0x10]
  3347: aa 98 07                 jump @254 if a1 == a2
      :                          @253
  3350: 33 08                    a1 = 0
  3352: 28 0f                    jump @256
      :                          @254
  3354: 82 77                    a0 = u64 [a0]
  3356: 82 77                    a0 = u64 [a0]
  3358: 33 08 01                 a1 = 0x1
  3361: 28 06                    jump @256
      :                          @255
  3363: 33 08 01                 a1 = 0x1
  3366: 01                       fallthrough
      :                          @256
  3367: 7b 18 30                 u64 [sp + 0x30] = a1
  3370: 7b 17 38                 u64 [sp + 0x38] = a0
  3373: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  3376: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  3379: 51 08 26                 jump @261 if a1 == 0
      :                          @257
  3382: 52 18 01 16              jump @259 if a1 != 1
      :                          @258
  3386: 97 77 04                 a0 = a0 << 0x4
  3389: 82 18 18                 a1 = u64 [sp + 0x18]
  3392: c8 87 07                 a0 = a0 + a1
  3395: 82 78 08                 a1 = u64 [a0 + 0x8]
  3398: 82 19 10                 a2 = u64 [sp + 0x10]
  3401: aa 98 07                 jump @260 if a1 == a2
      :                          @259
  3404: 33 08                    a1 = 0
  3406: 28 0f                    jump @262
      :                          @260
  3408: 82 77                    a0 = u64 [a0]
  3410: 82 77                    a0 = u64 [a0]
  3412: 33 08 01                 a1 = 0x1
  3415: 28 06                    jump @262
      :                          @261
  3417: 33 08 01                 a1 = 0x1
  3420: 01                       fallthrough
      :                          @262
  3421: 7b 18 40                 u64 [sp + 0x40] = a1
  3424: 7b 17 48                 u64 [sp + 0x48] = a0
  3427: 82 67 08                 a0 = u64 [s1 + 0x8]
  3430: 97 77 04                 a0 = a0 << 0x4
  3433: 82 18 18                 a1 = u64 [sp + 0x18]
  3436: c8 78 08                 a1 = a1 + a0
  3439: 82 87                    a0 = u64 [a1]
  3441: 82 89 08                 a2 = u64 [a1 + 0x8]
  3444: 95 18 30                 a1 = sp + 0x30
  3447: b4 90 01 48              ra = 72, jump [a2]
      :                          @263 [@dyn 36]
  3451: 52 07 b5 00              jump @279 if a0 != 0
      :                          @264
  3455: 95 55 10                 s0 = s0 + 0x10
  3458: 82 18 20                 a1 = u64 [sp + 0x20]
  3461: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  3464: 95 66 38                 s1 = s1 + 0x38
  3467: 82 19 28                 a2 = u64 [sp + 0x28]
  3470: 95 99 01                 a2 = a2 + 0x1
  3473: 52 08 36 ff              jump @247 if a1 != 0
      :                          @265
  3477: 28 69                    jump @274
      :                          @266
  3479: 82 87 18                 a0 = u64 [a1 + 0x18]
  3482: 51 07 71                 jump @276 if a0 == 0
      :                          @267
  3485: 82 85 10                 s0 = u64 [a1 + 0x10]
  3488: 33 0a                    a3 = 0
  3490: 97 79 04                 a2 = a0 << 0x4
  3493: c8 59 09                 a2 = a2 + s0
  3496: 7b 19 20                 u64 [sp + 0x20] = a2
  3499: 7b 18 08                 u64 [sp + 0x8] = a1
  3502: 82 86                    s1 = u64 [a1]
  3504: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  3507: 97 77 04                 a0 = a0 << 0x4
  3510: 98 77 04                 a0 = a0 >> 0x4
  3513: 95 77 01                 a0 = a0 + 0x1
  3516: 7b 17                    u64 [sp] = a0
  3518: 95 66 08                 s1 = s1 + 0x8
  3521: 01                       fallthrough
      :                          @268
  3522: 7b 1a 28                 u64 [sp + 0x28] = a3
  3525: 82 69                    a2 = u64 [s1]
  3527: 51 09 16                 jump @271 if a2 == 0
      :                          @269
  3530: 82 1a 58                 a3 = u64 [sp + 0x58]
  3533: 82 17 50                 a0 = u64 [sp + 0x50]
  3536: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3539: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3542: b4 a0 01 4a              ra = 74, jump [a3]
      :                          @270 [@dyn 37]
  3546: 52 07 56                 jump @279 if a0 != 0
      :                          @271
  3549: 82 57                    a0 = u64 [s0]
  3551: 82 59 08                 a2 = u64 [s0 + 0x8]
  3554: 95 18 30                 a1 = sp + 0x30
  3557: b4 90 01 4c              ra = 76, jump [a2]
      :                          @272 [@dyn 38]
  3561: 52 07 47                 jump @279 if a0 != 0
      :                          @273
  3564: 95 66 10                 s1 = s1 + 0x10
  3567: 95 55 10                 s0 = s0 + 0x10
  3570: 82 1a 28                 a3 = u64 [sp + 0x28]
  3573: 95 aa 01                 a3 = a3 + 0x1
  3576: 82 17 20                 a0 = u64 [sp + 0x20]
  3579: ab 75 c7                 jump @268 if s0 != a0
      :                          @274
  3582: 82 18 08                 a1 = u64 [sp + 0x8]
  3585: 82 1a                    a3 = u64 [sp]
  3587: 82 87 08                 a0 = u64 [a1 + 0x8]
  3590: ac 7a 0d                 jump @277 if a3 <u a0
      :                          @275
  3593: 28 2c                    jump @280
      :                          @276
  3595: 33 0a                    a3 = 0
  3597: 82 87 08                 a0 = u64 [a1 + 0x8]
  3600: 54 07 25                 jump @280 if a0 <=u 0
      :                          @277
  3603: 82 87                    a0 = u64 [a1]
  3605: 97 a8 04                 a1 = a3 << 0x4
  3608: c8 87 09                 a2 = a0 + a1
  3611: 82 1a 58                 a3 = u64 [sp + 0x58]
  3614: 82 17 50                 a0 = u64 [sp + 0x50]
  3617: 82 98                    a1 = u64 [a2]
  3619: 82 99 08                 a2 = u64 [a2 + 0x8]
  3622: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3625: b4 a0 01 4e              ra = 78, jump [a3]
      :                          @278 [@dyn 39]
  3629: 51 07 08                 jump @280 if a0 == 0
      :                          @279
  3632: 33 07 01                 a0 = 0x1
  3635: 28 05                    jump @281
      :                          @280
  3637: 33 07                    a0 = 0
  3639: 01                       fallthrough
      :                          @281
  3640: 82 10 80 00              ra = u64 [sp + 0x80]
  3644: 82 15 78                 s0 = u64 [sp + 0x78]
  3647: 82 16 70                 s1 = u64 [sp + 0x70]
  3650: 95 11 88 00              sp = sp + 0x88
  3654: 32 00                    ret
