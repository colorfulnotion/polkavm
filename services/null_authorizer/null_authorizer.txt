// RO data = 322/324 bytes
// RW data = 8/65568 bytes
// Stack size = 65536 bytes
// RO data = [110, 117, 108, 108, 95, 97, 117, 116, 104, 111, 114, 105, 122, 101, 114, 32, 103, 97, 115, 32, 99, 97, 108, 108, 32, 32, 103, 97, 115, 95, 114, 101, 115, 117, 108, 116, 58, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 25, 0, 1, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57]
// RW data = [75, 89, 134, 56, 214, 197, 109, 52]
// Instructions = 1367
// Code size = 3934 bytes

      :                          @0
     0: 28 91 02                 jump @59
      :                          @1 [@dyn 1]
     3: 95 11 78 ff              sp = sp + 0xffffffffffffff78
     7: 7b 10 80 00              u64 [sp + 0x80] = ra
    11: 64 82                    t0 = a1
    13: 80 88 34                 a1 = u32 [a1 + 0x34]
    16: 84 89 10                 a2 = a1 & 0x10
    19: 52 09 28                 jump @4 if a2 != 0
      :                          @2
    22: 84 88 20                 a1 = a1 & 0x20
    25: 52 08 52                 jump @7 if a1 != 0
      :                          @3
    28: 81 77                    a0 = i32 [a0]
    30: 89 79                    a2 = a0 <s 0
    32: 85 98 01                 a1 = a2 ^ 0x1
    35: 97 7a 20                 a3 = a0 << 0x20
    38: 98 aa 20                 a3 = a3 >> 0x20
    41: 9a 77                    a0 = -a0
    43: da 9a 07                 a0 = a3 if a2 == 0
    46: 64 29                    a2 = t0
    48: 82 10 80 00              ra = u64 [sp + 0x80]
    52: 95 11 88 00              sp = sp + 0x88
    56: 28 95 09                 jump @212
      :                          @4
    59: 81 7a                    a3 = i32 [a0]
    61: 33 08 81 00              a1 = 0x81
    65: 95 17 7f                 a0 = sp + 0x7f
    68: 33 03 57                 t1 = 0x57
    71: 01                       fallthrough
      :                          @5
    72: 64 8b                    a4 = a1
    74: 8b ac 04                 i32 a5 = a3 >> 0x4
    77: 84 aa 0f                 a3 = a3 & 0xf
    80: 88 a8 0a                 a1 = a3 <u 0xa
    83: 33 09 30                 a2 = 0x30
    86: da 83 09                 a2 = t1 if a1 == 0
    89: be a9 09                 i32 a2 = a2 + a3
    92: 78 79                    u8 [a0] = a2
    94: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
    97: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   100: 64 ca                    a3 = a5
   102: 52 0c e2                 jump @5 if a5 != 0
      :                          @6
   105: 28 30                    jump @9
      :                          @7
   107: 81 7a                    a3 = i32 [a0]
   109: 33 08 81 00              a1 = 0x81
   113: 95 17 7f                 a0 = sp + 0x7f
   116: 33 03 37                 t1 = 0x37
   119: 01                       fallthrough
      :                          @8
   120: 64 8b                    a4 = a1
   122: 8b ac 04                 i32 a5 = a3 >> 0x4
   125: 84 aa 0f                 a3 = a3 & 0xf
   128: 88 a8 0a                 a1 = a3 <u 0xa
   131: 33 09 30                 a2 = 0x30
   134: da 83 09                 a2 = t1 if a1 == 0
   137: be a9 09                 i32 a2 = a2 + a3
   140: 78 79                    u8 [a0] = a2
   142: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   145: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   148: 64 ca                    a3 = a5
   150: 52 0c e2                 jump @8 if a5 != 0
      :                          @9
   153: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   156: 56 27 80 00 2a           jump @12 if a0 >u 128
      :                          @10
   161: 9a 8c 81 00              a5 = 0x81 - a1
   165: 64 1b                    a4 = sp
   167: c8 7b 0b                 a4 = a4 + a0
   170: 33 09 78 00 01           a2 = 0x10078
   175: 33 08 01                 a1 = 0x1
   178: 33 0a 02                 a3 = 0x2
   181: 64 27                    a0 = t0
   183: 50 10 04 43 0a           ra = 4, jump @222
      :                          @11 [@dyn 2]
   188: 82 10 80 00              ra = u64 [sp + 0x80]
   192: 95 11 88 00              sp = sp + 0x88
   196: 32 00                    ret
      :                          @12
   198: 00                       trap
      :                          @13 [@dyn 3]
   199: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   203: 7b 10 80 00              u64 [sp + 0x80] = ra
   207: 64 82                    t0 = a1
   209: 80 88 34                 a1 = u32 [a1 + 0x34]
   212: 84 89 10                 a2 = a1 & 0x10
   215: 52 09 1b                 jump @16 if a2 != 0
      :                          @14
   218: 84 88 20                 a1 = a1 & 0x20
   221: 52 08 45                 jump @19 if a1 != 0
      :                          @15
   224: 82 77                    a0 = u64 [a0]
   226: 33 08 01                 a1 = 0x1
   229: 64 29                    a2 = t0
   231: 82 10 80 00              ra = u64 [sp + 0x80]
   235: 95 11 88 00              sp = sp + 0x88
   239: 28 de 08                 jump @212
      :                          @16
   242: 82 7a                    a3 = u64 [a0]
   244: 33 08 81 00              a1 = 0x81
   248: 95 17 7f                 a0 = sp + 0x7f
   251: 33 03 57                 t1 = 0x57
   254: 01                       fallthrough
      :                          @17
   255: 64 8b                    a4 = a1
   257: 98 ac 04                 a5 = a3 >> 0x4
   260: 84 aa 0f                 a3 = a3 & 0xf
   263: 88 a8 0a                 a1 = a3 <u 0xa
   266: 33 09 30                 a2 = 0x30
   269: da 83 09                 a2 = t1 if a1 == 0
   272: be a9 09                 i32 a2 = a2 + a3
   275: 78 79                    u8 [a0] = a2
   277: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   280: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   283: 64 ca                    a3 = a5
   285: 52 0c e2                 jump @17 if a5 != 0
      :                          @18
   288: 28 30                    jump @21
      :                          @19
   290: 82 7a                    a3 = u64 [a0]
   292: 33 08 81 00              a1 = 0x81
   296: 95 17 7f                 a0 = sp + 0x7f
   299: 33 03 37                 t1 = 0x37
   302: 01                       fallthrough
      :                          @20
   303: 64 8b                    a4 = a1
   305: 98 ac 04                 a5 = a3 >> 0x4
   308: 84 aa 0f                 a3 = a3 & 0xf
   311: 88 a8 0a                 a1 = a3 <u 0xa
   314: 33 09 30                 a2 = 0x30
   317: da 83 09                 a2 = t1 if a1 == 0
   320: be a9 09                 i32 a2 = a2 + a3
   323: 78 79                    u8 [a0] = a2
   325: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   328: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   331: 64 ca                    a3 = a5
   333: 52 0c e2                 jump @20 if a5 != 0
      :                          @21
   336: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   339: 56 27 80 00 2a           jump @24 if a0 >u 128
      :                          @22
   344: 9a 8c 81 00              a5 = 0x81 - a1
   348: 64 1b                    a4 = sp
   350: c8 7b 0b                 a4 = a4 + a0
   353: 33 09 78 00 01           a2 = 0x10078
   358: 33 08 01                 a1 = 0x1
   361: 33 0a 02                 a3 = 0x2
   364: 64 27                    a0 = t0
   366: 50 10 08 8c 09           ra = 8, jump @222
      :                          @23 [@dyn 4]
   371: 82 10 80 00              ra = u64 [sp + 0x80]
   375: 95 11 88 00              sp = sp + 0x88
   379: 32 00                    ret
      :                          @24
   381: 00                       trap
      :                          @25 [export #0: 'refine']
   382: 64 89                    a2 = a1
   384: 64 78                    a1 = a0
   386: 33 0a 04                 a3 = 0x4
   389: 33 07 00 00 01           a0 = 0x10000
   394: ac a9 61                 jump @39 if a2 <u a3
      :                          @26
   397: 95 94 fc                 t2 = a2 + 0xfffffffffffffffc
   400: 51 04 5b                 jump @39 if t2 == 0
      :                          @27
   403: 95 89 04                 a2 = a1 + 0x4
   406: 7d 9b                    a4 = i8 [a2]
   408: 84 b8 ff 00              a1 = a4 & 0xff
   412: 33 0a 01                 a3 = 0x1
   415: 59 0b 37                 jump @35 if a4 >=s 0
      :                          @28
   418: 33 0a 02                 a3 = 0x2
   421: 53 28 c0 00 2d           jump @34 if a1 <u 192
      :                          @29
   426: 33 0a 03                 a3 = 0x3
   429: 53 28 e0 00 25           jump @34 if a1 <u 224
      :                          @30
   434: 33 0a 04                 a3 = 0x4
   437: 53 28 f0 00 1d           jump @34 if a1 <u 240
      :                          @31
   442: 33 0a 05                 a3 = 0x5
   445: 53 28 f8 00 15           jump @34 if a1 <u 248
      :                          @32
   450: 33 0a 06                 a3 = 0x6
   453: 53 28 fc 00 0d           jump @34 if a1 <u 252
      :                          @33
   458: 88 8a fe 00              a3 = a1 <u 0xfe
   462: 9a aa 08                 a3 = 0x8 - a3
   465: 01                       fallthrough
      :                          @34
   466: ac a4 bd 00              jump @57 if t2 <u a3
      :                          @35
   470: 51 08 94 00              jump @55 if a1 == 0
      :                          @36
   474: 51 28 ff 00 b4 00        jump @56 if a1 == 255
      :                          @37
   480: 6c 8b                    a4 = sext.b a1
   482: 57 0b 0d                 jump @40 if a4 <s 0
      :                          @38
   485: 33 03                    t1 = 0
   487: 33 0c                    a5 = 0
   489: 28 77                    jump @54
      :                          @39
   491: 33 08                    a1 = 0
   493: 32 00                    ret
      :                          @40
   495: 55 28 c0 00 0d           jump @42 if a1 >=u 192
      :                          @41
   500: 33 03 01                 t1 = 0x1
   503: 33 02 80                 t0 = 0xffffffffffffff80
   506: 28 4a                    jump @51
      :                          @42
   508: 55 28 e0 00 0e           jump @44 if a1 >=u 224
      :                          @43
   513: 33 03 02                 t1 = 0x2
   516: 33 02 40 ff              t0 = 0xffffffffffffff40
   520: 28 3c                    jump @51
      :                          @44
   522: 55 28 f0 00 0e           jump @46 if a1 >=u 240
      :                          @45
   527: 33 03 03                 t1 = 0x3
   530: 33 02 20 ff              t0 = 0xffffffffffffff20
   534: 28 2e                    jump @51
      :                          @46
   536: 55 28 f8 00 0e           jump @48 if a1 >=u 248
      :                          @47
   541: 33 03 04                 t1 = 0x4
   544: 33 02 10 ff              t0 = 0xffffffffffffff10
   548: 28 20                    jump @51
      :                          @48
   550: 55 28 fc 00 0e           jump @50 if a1 >=u 252
      :                          @49
   555: 33 03 05                 t1 = 0x5
   558: 33 02 08 ff              t0 = 0xffffffffffffff08
   562: 28 12                    jump @51
      :                          @50
   564: 88 8b fe 00              a4 = a1 <u 0xfe
   568: 33 02 04 ff              t0 = 0xffffffffffffff04
   572: 93 b2 02 ff              t0 = 0xffffffffffffff02 if a4 == 0
   576: 85 b3 07                 t1 = a4 ^ 0x7
   579: 01                       fallthrough
      :                          @51
   580: ae a3 4c                 jump @58 if t1 >=u a3
      :                          @52
   583: 33 0c                    a5 = 0
   585: c8 28 08                 a1 = a1 + t0
   588: 64 3b                    a4 = t1
   590: 01                       fallthrough
      :                          @53
   591: c8 b9 07                 a0 = a2 + a4
   594: 7c 77                    a0 = u8 [a0]
   596: 97 cc 08                 a5 = a5 << 0x8
   599: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
   602: d4 7c 0c                 a5 = a5 | a0
   605: 52 0b f2                 jump @53 if a4 != 0
      :                          @54
   608: 8a 37 03                 i32 a0 = t1 << 0x3
   611: cf 78 08                 a1 = a1 << a0
   614: c8 c8 08                 a1 = a1 + a5
   617: 01                       fallthrough
      :                          @55
   618: e4 a4 07                 a0 = maxu(t2, a3)
   621: c9 a7 07                 a0 = a0 - a3
   624: d8 87 0b                 a4 = a0 <u a1
   627: e4 87 07                 a0 = maxu(a0, a1)
   630: c9 87 07                 a0 = a0 - a1
   633: 88 77 20                 a0 = a0 <u 0x20
   636: d4 7b 0b                 a4 = a4 | a0
   639: c8 a9 09                 a2 = a2 + a3
   642: 94 b8                    a1 = 0 if a4 != 0
   644: 33 07 00 00 01           a0 = 0x10000
   649: da b9 07                 a0 = a2 if a4 == 0
   652: 32 00                    ret
      :                          @56
   654: 00                       trap
      :                          @57
   655: 00                       trap
      :                          @58
   656: 00                       trap
      :                          @59 [export #1: 'is_authorize']
   657: 95 11 50 ff              sp = sp + 0xffffffffffffff50
   661: 7b 10 a8 00              u64 [sp + 0xa8] = ra
   665: 7b 15 a0 00              u64 [sp + 0xa0] = s0
   669: 7b 16 98 00              u64 [sp + 0x98] = s1
   673: 49 11 18 ff ff fe        u64 [sp + 24] = 0xfffffffffffeffff
   679: 48 11 24                 u32 [sp + 36] = 0
   682: 0a                       ecalli 0 // 'gas'
   683: 7b 17 28                 u64 [sp + 0x28] = a0
   686: 95 17 24                 a0 = sp + 0x24
   689: 7b 17 78                 u64 [sp + 0x78] = a0
   692: 33 07 02                 a0 = 0x2
   695: 7b 17 10                 u64 [sp + 0x10] = a0
   698: 7b 17 80 00              u64 [sp + 0x80] = a0
   702: 95 17 28                 a0 = sp + 0x28
   705: 7b 17 88 00              u64 [sp + 0x88] = a0
   709: 33 07 06                 a0 = 0x6
   712: 7b 17 08                 u64 [sp + 0x8] = a0
   715: 7b 17 90 00              u64 [sp + 0x90] = a0
   719: 33 07 28 00 01           a0 = 0x10028
   724: 7b 17                    u64 [sp] = a0
   726: 7b 17 48                 u64 [sp + 0x48] = a0
   729: 49 11 50 02              u64 [sp + 80] = 0x2
   733: 49 11 68                 u64 [sp + 104] = 0
   736: 95 18 78                 a1 = sp + 0x78
   739: 7b 18 58                 u64 [sp + 0x58] = a1
   742: 49 11 60 02              u64 [sp + 96] = 0x2
   746: 95 17 30                 a0 = sp + 0x30
   749: 95 18 48                 a1 = sp + 0x48
   752: 50 10 0a c3 03           ra = 10, jump @142
      :                          @60 [@dyn 5]
   757: 82 15 38                 s0 = u64 [sp + 0x38]
   760: 82 1b 40                 a4 = u64 [sp + 0x40]
   763: 82 16 30                 s1 = u64 [sp + 0x30]
   766: 33 07 02                 a0 = 0x2
   769: 33 08                    a1 = 0
   771: 33 09                    a2 = 0
   773: 64 5a                    a3 = s0
   775: 33 00 0c                 ra = 0xc
   778: 0a 64                    ecalli 100 // 'log'
   780: 01                       fallthrough
      :                          @61 [@dyn 6]
   781: 82 17 18                 a0 = u64 [sp + 0x18]
   784: c8 67 07                 a0 = a0 + s1
   787: 53 37 00 00 ff 25        jump @67 if a0 <u 4294901760
      :                          @62
   793: 33 07 10 00 03           a0 = 0x30010
   798: 95 77 00 00 01           a0 = a0 + 0x10000
   803: 01                       fallthrough
      :                          @63
   804: 82 78                    a1 = u64 [a0]
   806: c9 87 09                 a2 = a0 - a1
   809: ab 59 0f                 jump @67 if a2 != s0
      :                          @64
   812: c9 68 09                 a2 = a1 - s1
   815: 01                       fallthrough
      :                          @65
   816: 82 7a                    a3 = u64 [a0]
   818: ab 8a f2                 jump @63 if a3 != a1
      :                          @66
   821: 7b 79                    u64 [a0] = a2
   823: 01                       fallthrough
      :                          @67
   824: 48 11 24 01              u32 [sp + 36] = 0x1
   828: 0a                       ecalli 0 // 'gas'
   829: 7b 17 28                 u64 [sp + 0x28] = a0
   832: 95 17 24                 a0 = sp + 0x24
   835: 7b 17 78                 u64 [sp + 0x78] = a0
   838: 82 17 10                 a0 = u64 [sp + 0x10]
   841: 7b 17 80 00              u64 [sp + 0x80] = a0
   845: 95 17 28                 a0 = sp + 0x28
   848: 7b 17 88 00              u64 [sp + 0x88] = a0
   852: 82 17 08                 a0 = u64 [sp + 0x8]
   855: 7b 17 90 00              u64 [sp + 0x90] = a0
   859: 82 17                    a0 = u64 [sp]
   861: 7b 17 48                 u64 [sp + 0x48] = a0
   864: 49 11 50 02              u64 [sp + 80] = 0x2
   868: 49 11 68                 u64 [sp + 104] = 0
   871: 95 18 78                 a1 = sp + 0x78
   874: 7b 18 58                 u64 [sp + 0x58] = a1
   877: 49 11 60 02              u64 [sp + 96] = 0x2
   881: 95 17 30                 a0 = sp + 0x30
   884: 95 18 48                 a1 = sp + 0x48
   887: 50 10 0e 3c 03           ra = 14, jump @142
      :                          @68 [@dyn 7]
   892: 82 15 38                 s0 = u64 [sp + 0x38]
   895: 82 1b 40                 a4 = u64 [sp + 0x40]
   898: 82 16 30                 s1 = u64 [sp + 0x30]
   901: 33 07 02                 a0 = 0x2
   904: 33 08                    a1 = 0
   906: 33 09                    a2 = 0
   908: 64 5a                    a3 = s0
   910: 33 00 10                 ra = 0x10
   913: 0a 64                    ecalli 100 // 'log'
   915: 01                       fallthrough
      :                          @69 [@dyn 8]
   916: 82 17 18                 a0 = u64 [sp + 0x18]
   919: c8 67 07                 a0 = a0 + s1
   922: 53 37 00 00 ff 25        jump @75 if a0 <u 4294901760
      :                          @70
   928: 33 07 10 00 03           a0 = 0x30010
   933: 95 77 00 00 01           a0 = a0 + 0x10000
   938: 01                       fallthrough
      :                          @71
   939: 82 78                    a1 = u64 [a0]
   941: c9 87 09                 a2 = a0 - a1
   944: ab 59 0f                 jump @75 if a2 != s0
      :                          @72
   947: c9 68 09                 a2 = a1 - s1
   950: 01                       fallthrough
      :                          @73
   951: 82 7a                    a3 = u64 [a0]
   953: ab 8a f2                 jump @71 if a3 != a1
      :                          @74
   956: 7b 79                    u64 [a0] = a2
   958: 01                       fallthrough
      :                          @75
   959: 33 05 02                 s0 = 0x2
   962: 7a 15 24                 u32 [sp + 0x24] = s0
   965: 0a                       ecalli 0 // 'gas'
   966: 7b 17 28                 u64 [sp + 0x28] = a0
   969: 95 17 24                 a0 = sp + 0x24
   972: 7b 17 78                 u64 [sp + 0x78] = a0
   975: 33 07 02                 a0 = 0x2
   978: 7b 17 80 00              u64 [sp + 0x80] = a0
   982: 95 17 28                 a0 = sp + 0x28
   985: 7b 17 88 00              u64 [sp + 0x88] = a0
   989: 33 07 06                 a0 = 0x6
   992: 7b 17 90 00              u64 [sp + 0x90] = a0
   996: 33 07 28 00 01           a0 = 0x10028
  1001: 7b 17 48                 u64 [sp + 0x48] = a0
  1004: 7b 15 50                 u64 [sp + 0x50] = s0
  1007: 49 11 68                 u64 [sp + 104] = 0
  1010: 95 17 78                 a0 = sp + 0x78
  1013: 7b 17 58                 u64 [sp + 0x58] = a0
  1016: 7b 15 60                 u64 [sp + 0x60] = s0
  1019: 95 17 30                 a0 = sp + 0x30
  1022: 95 18 48                 a1 = sp + 0x48
  1025: 50 10 12 b2 02           ra = 18, jump @142
      :                          @76 [@dyn 9]
  1030: 82 15 38                 s0 = u64 [sp + 0x38]
  1033: 82 1b 40                 a4 = u64 [sp + 0x40]
  1036: 82 16 30                 s1 = u64 [sp + 0x30]
  1039: 33 07 02                 a0 = 0x2
  1042: 33 08                    a1 = 0
  1044: 33 09                    a2 = 0
  1046: 64 5a                    a3 = s0
  1048: 33 00 14                 ra = 0x14
  1051: 0a 64                    ecalli 100 // 'log'
  1053: 01                       fallthrough
      :                          @77 [@dyn 10]
  1054: 82 17 18                 a0 = u64 [sp + 0x18]
  1057: c8 67 07                 a0 = a0 + s1
  1060: 53 37 00 00 ff 27        jump @83 if a0 <u 4294901760
      :                          @78
  1066: 33 07 10 00 03           a0 = 0x30010
  1071: 95 77 00 00 01           a0 = a0 + 0x10000
  1076: 01                       fallthrough
      :                          @79
  1077: 82 78                    a1 = u64 [a0]
  1079: c9 87 09                 a2 = a0 - a1
  1082: ab 59 11                 jump @83 if a2 != s0
      :                          @80
  1085: c9 68 09                 a2 = a1 - s1
  1088: 01                       fallthrough
      :                          @81
  1089: 82 7a                    a3 = u64 [a0]
  1091: ab 8a f2                 jump @79 if a3 != a1
      :                          @82
  1094: 7b 79                    u64 [a0] = a2
  1096: 33 0b                    a4 = 0
  1098: 01                       fallthrough
      :                          @83
  1099: 33 07 00 00 01           a0 = 0x10000
  1104: 33 08                    a1 = 0
  1106: 82 10 a8 00              ra = u64 [sp + 0xa8]
  1110: 82 15 a0 00              s0 = u64 [sp + 0xa0]
  1114: 82 16 98 00              s1 = u64 [sp + 0x98]
  1118: 95 11 b0 00              sp = sp + 0xb0
  1122: 32 00                    ret
      :                          @84 [export #2: 'accumulate']
  1124: 33 07 00 00 01           a0 = 0x10000
  1129: 33 08                    a1 = 0
  1131: 32 00                    ret
      :                          @85 [export #3: 'on_transfer']
  1133: 33 07 00 00 01           a0 = 0x10000
  1138: 33 08                    a1 = 0
  1140: 32 00                    ret
      :                          @86
  1142: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1145: 7b 10 40                 u64 [sp + 0x40] = ra
  1148: 7b 15 38                 u64 [sp + 0x38] = s0
  1151: 7b 16 30                 u64 [sp + 0x30] = s1
  1154: c8 89 09                 a2 = a2 + a1
  1157: ac 89 52                 jump @94 if a2 <u a1
      :                          @87
  1160: 64 75                    s0 = a0
  1162: 82 77                    a0 = u64 [a0]
  1164: 97 78 01                 a1 = a0 << 0x1
  1167: 33 0a 08                 a3 = 0x8
  1170: e4 a9 09                 a2 = maxu(a2, a3)
  1173: e4 98 06                 s1 = maxu(a1, a2)
  1176: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1179: 98 88 3f                 a1 = a1 >> 0x3f
  1182: 51 07 12                 jump @89 if a0 == 0
      :                          @88
  1185: 82 59 08                 a2 = u64 [s0 + 0x8]
  1188: 7b 19 18                 u64 [sp + 0x18] = a2
  1191: 49 11 20 01              u64 [sp + 32] = 0x1
  1195: 7b 17 28                 u64 [sp + 0x28] = a0
  1198: 28 06                    jump @90
      :                          @89
  1200: 49 11 20                 u64 [sp + 32] = 0
  1203: 01                       fallthrough
      :                          @90
  1204: 64 17                    a0 = sp
  1206: 95 1a 18                 a3 = sp + 0x18
  1209: 64 69                    a2 = s1
  1211: 50 10 16 32              ra = 22, jump @98
      :                          @91 [@dyn 11]
  1215: 82 18                    a1 = u64 [sp]
  1217: 82 17 08                 a0 = u64 [sp + 0x8]
  1220: 51 08 14                 jump @95 if a1 == 0
      :                          @92
  1223: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1233: aa 87 0d                 jump @96 if a0 == a1
      :                          @93
  1236: 52 07 18                 jump @97 if a0 != 0
      :                          @94
  1239: 00                       trap
      :                          @95
  1240: 7b 57 08                 u64 [s0 + 0x8] = a0
  1243: 7b 56                    u64 [s0] = s1
  1245: 01                       fallthrough
      :                          @96
  1246: 82 10 40                 ra = u64 [sp + 0x40]
  1249: 82 15 38                 s0 = u64 [sp + 0x38]
  1252: 82 16 30                 s1 = u64 [sp + 0x30]
  1255: 95 11 48                 sp = sp + 0x48
  1258: 32 00                    ret
      :                          @97
  1260: 00                       trap
      :                          @98
  1261: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  1264: 7b 10 30                 u64 [sp + 0x30] = ra
  1267: 7b 15 28                 u64 [sp + 0x28] = s0
  1270: 7b 16 20                 u64 [sp + 0x20] = s1
  1273: 64 95                    s0 = a2
  1275: 64 72                    t0 = a0
  1277: 51 08 79                 jump @108 if a1 == 0
      :                          @99
  1280: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1283: 51 07 7c                 jump @109 if a0 == 0
      :                          @100
  1286: 82 a9 10                 a2 = u64 [a3 + 0x10]
  1289: 51 09 aa 00              jump @116 if a2 == 0
      :                          @101
  1293: 82 a8                    a1 = u64 [a3]
  1295: 33 06 10 00 03           s1 = 0x30010
  1300: 33 03 00 00 01           t1 = 0x10000
  1305: c8 36 06                 s1 = s1 + t1
  1308: 01                       fallthrough
      :                          @102
  1309: 82 6a                    a3 = u64 [s1]
  1311: c8 5a 07                 a0 = a3 + s0
  1314: ac a7 cf 00              jump @122 if a0 <u a3
      :                          @103
  1318: 95 7b 01                 a4 = a0 + 0x1
  1321: 88 bc 01                 a5 = a4 <u 0x1
  1324: d8 b3 0b                 a4 = t1 <u a4
  1327: d4 cb 0b                 a4 = a4 | a5
  1330: 52 0b bf 00              jump @122 if a4 != 0
      :                          @104
  1334: 82 6b                    a4 = u64 [s1]
  1336: ab ab e5                 jump @102 if a4 != a3
      :                          @105
  1339: 7b 67                    u64 [s1] = a0
  1341: 33 0c                    a5 = 0
  1343: 7b 12 18                 u64 [sp + 0x18] = t0
  1346: 33 0a 10 00 03           a3 = 0x30010
  1351: 33 0b 00 00 01           a4 = 0x10000
  1356: 7b 1a                    u64 [sp] = a3
  1358: c8 ba 0a                 a3 = a3 + a4
  1361: c9 7a 07                 a0 = a3 - a0
  1364: 7b 17 10                 u64 [sp + 0x10] = a0
  1367: 7b 18 08                 u64 [sp + 0x8] = a1
  1370: 64 96                    s1 = a2
  1372: 50 10 18 bb 03           ra = 24, jump @192
      :                          @106 [@dyn 12]
  1377: 54 36 00 00 01 98 00     jump @123 if s1 <=u 65536
      :                          @107
  1384: 82 12 18                 t0 = u64 [sp + 0x18]
  1387: 82 18 10                 a1 = u64 [sp + 0x10]
  1390: 33 07                    a0 = 0
  1392: 7b 28 08                 u64 [t0 + 0x8] = a1
  1395: 28 b5 00                 jump @129
      :                          @108
  1398: 49 12 08                 u64 [t0 + 8] = 0
  1401: 33 07 01                 a0 = 0x1
  1404: 28 ac 00                 jump @129
      :                          @109
  1407: 33 09 10 00 03           a2 = 0x30010
  1412: 33 07 00 00 01           a0 = 0x10000
  1417: c8 79 09                 a2 = a2 + a0
  1420: 01                       fallthrough
      :                          @110
  1421: 82 9a                    a3 = u64 [a2]
  1423: c8 5a 08                 a1 = a3 + s0
  1426: ac a8 5f                 jump @122 if a1 <u a3
      :                          @111
  1429: 95 8b 01                 a4 = a1 + 0x1
  1432: 88 bc 01                 a5 = a4 <u 0x1
  1435: d8 b7 0b                 a4 = a0 <u a4
  1438: d4 cb 0b                 a4 = a4 | a5
  1441: 52 0b 50                 jump @122 if a4 != 0
      :                          @112
  1444: 82 9b                    a4 = u64 [a2]
  1446: ab ab e7                 jump @110 if a4 != a3
      :                          @113
  1449: 7b 98                    u64 [a2] = a1
  1451: 33 0c                    a5 = 0
  1453: 01                       fallthrough
      :                          @114
  1454: ab ab df                 jump @110 if a4 != a3
      :                          @115
  1457: 28 31                    jump @121
      :                          @116
  1459: 33 09 10 00 03           a2 = 0x30010
  1464: 33 07 00 00 01           a0 = 0x10000
  1469: c8 79 09                 a2 = a2 + a0
  1472: 01                       fallthrough
      :                          @117
  1473: 82 9a                    a3 = u64 [a2]
  1475: c8 5a 08                 a1 = a3 + s0
  1478: ac a8 2b                 jump @122 if a1 <u a3
      :                          @118
  1481: 95 8b 01                 a4 = a1 + 0x1
  1484: 88 bc 01                 a5 = a4 <u 0x1
  1487: d8 b7 0b                 a4 = a0 <u a4
  1490: d4 cb 0b                 a4 = a4 | a5
  1493: 52 0b 1c                 jump @122 if a4 != 0
      :                          @119
  1496: 82 9b                    a4 = u64 [a2]
  1498: ab ab e7                 jump @117 if a4 != a3
      :                          @120
  1501: 7b 98                    u64 [a2] = a1
  1503: 33 0c                    a5 = 0
  1505: 01                       fallthrough
      :                          @121
  1506: 33 07 10 00 04           a0 = 0x40010
  1511: c9 87 08                 a1 = a0 - a1
  1514: 33 07                    a0 = 0
  1516: 7b 28 08                 u64 [t0 + 0x8] = a1
  1519: 28 39                    jump @129
      :                          @122
  1521: 33 07 01                 a0 = 0x1
  1524: 7b 27 08                 u64 [t0 + 0x8] = a0
  1527: 28 31                    jump @129
      :                          @123
  1529: 64 6c                    a5 = s1
  1531: 82 17                    a0 = u64 [sp]
  1533: 95 77 00 00 01           a0 = a0 + 0x10000
  1538: 82 12 18                 t0 = u64 [sp + 0x18]
  1541: 82 16 08                 s1 = u64 [sp + 0x8]
  1544: 01                       fallthrough
      :                          @124
  1545: 82 78                    a1 = u64 [a0]
  1547: c9 87 09                 a2 = a0 - a1
  1550: ab 69 11                 jump @128 if a2 != s1
      :                          @125
  1553: c9 c8 09                 a2 = a1 - a5
  1556: 01                       fallthrough
      :                          @126
  1557: 82 7a                    a3 = u64 [a0]
  1559: ab 8a f2                 jump @124 if a3 != a1
      :                          @127
  1562: 7b 79                    u64 [a0] = a2
  1564: 33 0b                    a4 = 0
  1566: 01                       fallthrough
      :                          @128
  1567: 82 18 10                 a1 = u64 [sp + 0x10]
  1570: 33 07                    a0 = 0
  1572: 7b 28 08                 u64 [t0 + 0x8] = a1
  1575: 01                       fallthrough
      :                          @129
  1576: 7b 25 10                 u64 [t0 + 0x10] = s0
  1579: 7b 27                    u64 [t0] = a0
  1581: 82 10 30                 ra = u64 [sp + 0x30]
  1584: 82 15 28                 s0 = u64 [sp + 0x28]
  1587: 82 16 20                 s1 = u64 [sp + 0x20]
  1590: 95 11 38                 sp = sp + 0x38
  1593: 32 00                    ret
      :                          @130
  1595: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1598: 7b 10 40                 u64 [sp + 0x40] = ra
  1601: 7b 15 38                 u64 [sp + 0x38] = s0
  1604: 7b 16 30                 u64 [sp + 0x30] = s1
  1607: 95 88 01                 a1 = a1 + 0x1
  1610: 51 08 53                 jump @138 if a1 == 0
      :                          @131
  1613: 64 75                    s0 = a0
  1615: 82 77                    a0 = u64 [a0]
  1617: 97 79 01                 a2 = a0 << 0x1
  1620: 33 0a 08                 a3 = 0x8
  1623: e4 a8 08                 a1 = maxu(a1, a3)
  1626: e4 89 06                 s1 = maxu(a2, a1)
  1629: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1632: 98 88 3f                 a1 = a1 >> 0x3f
  1635: 51 07 12                 jump @133 if a0 == 0
      :                          @132
  1638: 82 59 08                 a2 = u64 [s0 + 0x8]
  1641: 7b 19 18                 u64 [sp + 0x18] = a2
  1644: 49 11 20 01              u64 [sp + 32] = 0x1
  1648: 7b 17 28                 u64 [sp + 0x28] = a0
  1651: 28 06                    jump @134
      :                          @133
  1653: 49 11 20                 u64 [sp + 32] = 0
  1656: 01                       fallthrough
      :                          @134
  1657: 64 17                    a0 = sp
  1659: 95 1a 18                 a3 = sp + 0x18
  1662: 64 69                    a2 = s1
  1664: 50 10 1a 6d fe           ra = 26, jump @98
      :                          @135 [@dyn 13]
  1669: 82 18                    a1 = u64 [sp]
  1671: 82 17 08                 a0 = u64 [sp + 0x8]
  1674: 51 08 14                 jump @139 if a1 == 0
      :                          @136
  1677: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1687: aa 87 0d                 jump @140 if a0 == a1
      :                          @137
  1690: 52 07 18                 jump @141 if a0 != 0
      :                          @138
  1693: 00                       trap
      :                          @139
  1694: 7b 57 08                 u64 [s0 + 0x8] = a0
  1697: 7b 56                    u64 [s0] = s1
  1699: 01                       fallthrough
      :                          @140
  1700: 82 10 40                 ra = u64 [sp + 0x40]
  1703: 82 15 38                 s0 = u64 [sp + 0x38]
  1706: 82 16 30                 s1 = u64 [sp + 0x30]
  1709: 95 11 48                 sp = sp + 0x48
  1712: 32 00                    ret
      :                          @141
  1714: 00                       trap
      :                          @142
  1715: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  1718: 7b 10 30                 u64 [sp + 0x30] = ra
  1721: 7b 15 28                 u64 [sp + 0x28] = s0
  1724: 7b 16 20                 u64 [sp + 0x20] = s1
  1727: 82 8a 08                 a3 = u64 [a1 + 0x8]
  1730: 64 75                    s0 = a0
  1732: 51 0a 35                 jump @147 if a3 == 0
      :                          @143
  1735: 82 89                    a2 = u64 [a1]
  1737: 33 07                    a0 = 0
  1739: 95 9b 08                 a4 = a2 + 0x8
  1742: 01                       fallthrough
      :                          @144
  1743: 82 bc                    a5 = u64 [a4]
  1745: c8 c7 07                 a0 = a0 + a5
  1748: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  1751: 95 bb 10                 a4 = a4 + 0x10
  1754: 52 0a f5                 jump @144 if a3 != 0
      :                          @145
  1757: 82 8a 18                 a3 = u64 [a1 + 0x18]
  1760: 51 0a 24                 jump @149 if a3 == 0
      :                          @146
  1763: 82 99 08                 a2 = u64 [a2 + 0x8]
  1766: 8e 99                    a2 = a2 >u 0
  1768: 88 7a 10                 a3 = a0 <u 0x10
  1771: 85 aa 01                 a3 = a3 ^ 0x1
  1774: d4 a9 09                 a2 = a2 | a3
  1777: 89 7a                    a3 = a0 <s 0
  1779: e0 a9 09                 a2 = a2 & ~a3
  1782: 52 09 0a                 jump @148 if a2 != 0
      :                          @147
  1785: 33 07                    a0 = 0
  1787: 33 09 01                 a2 = 0x1
  1790: 28 4a                    jump @157
      :                          @148
  1792: 97 77 01                 a0 = a0 << 0x1
  1795: 01                       fallthrough
      :                          @149
  1796: 51 07 40                 jump @156 if a0 == 0
      :                          @150
  1799: 57 07 73                 jump @162 if a0 <s 0
      :                          @151
  1802: 64 52                    t0 = s0
  1804: 33 0b 10 00 03           a4 = 0x30010
  1809: 33 09 00 00 01           a2 = 0x10000
  1814: c8 9b 0b                 a4 = a4 + a2
  1817: 01                       fallthrough
      :                          @152
  1818: 82 bc                    a5 = u64 [a4]
  1820: c8 7c 0a                 a3 = a5 + a0
  1823: ac ca 59                 jump @160 if a3 <u a5
      :                          @153
  1826: 95 a5 01                 s0 = a3 + 0x1
  1829: 88 56 01                 s1 = s0 <u 0x1
  1832: d8 59 05                 s0 = a2 <u s0
  1835: d4 65 05                 s0 = s0 | s1
  1838: 52 05 4a                 jump @160 if s0 != 0
      :                          @154
  1841: 82 b6                    s1 = u64 [a4]
  1843: ab c6 e7                 jump @152 if s1 != a5
      :                          @155
  1846: 7b ba                    u64 [a4] = a3
  1848: 33 09 10 00 04           a2 = 0x40010
  1853: c9 a9 09                 a2 = a2 - a3
  1856: 64 25                    s0 = t0
  1858: 28 06                    jump @157
      :                          @156
  1860: 33 09 01                 a2 = 0x1
  1863: 01                       fallthrough
      :                          @157
  1864: 7b 17                    u64 [sp] = a0
  1866: 7b 19 08                 u64 [sp + 0x8] = a2
  1869: 49 11 10                 u64 [sp + 16] = 0
  1872: 64 17                    a0 = sp
  1874: 50 10 1c 29 06           ra = 28, jump @276
      :                          @158 [@dyn 14]
  1879: 52 07 22                 jump @161 if a0 != 0
      :                          @159
  1882: 82 17 10                 a0 = u64 [sp + 0x10]
  1885: 82 18 08                 a1 = u64 [sp + 0x8]
  1888: 82 19                    a2 = u64 [sp]
  1890: 7b 57 10                 u64 [s0 + 0x10] = a0
  1893: 7b 58 08                 u64 [s0 + 0x8] = a1
  1896: 7b 59                    u64 [s0] = a2
  1898: 82 10 30                 ra = u64 [sp + 0x30]
  1901: 82 15 28                 s0 = u64 [sp + 0x28]
  1904: 82 16 20                 s1 = u64 [sp + 0x20]
  1907: 95 11 38                 sp = sp + 0x38
  1910: 32 00                    ret
      :                          @160
  1912: 00                       trap
      :                          @161
  1913: 00                       trap
      :                          @162
  1914: 00                       trap
      :                          @163 [@dyn 15]
  1915: 82 72                    t0 = u64 [a0]
  1917: 33 09 00 00 ff           a2 = 0xffffffffffff0000
  1922: 95 2a ff ff fe           a3 = t0 + 0xfffffffffffeffff
  1927: ac 9a 28                 jump @169 if a3 <u a2
      :                          @164
  1930: 82 77 08                 a0 = u64 [a0 + 0x8]
  1933: 33 09 10 00 03           a2 = 0x30010
  1938: 95 99 00 00 01           a2 = a2 + 0x10000
  1943: 01                       fallthrough
      :                          @165
  1944: 82 9a                    a3 = u64 [a2]
  1946: c9 a9 0b                 a4 = a2 - a3
  1949: ab 7b 12                 jump @169 if a4 != a0
      :                          @166
  1952: c9 2a 0b                 a4 = a3 - t0
  1955: 01                       fallthrough
      :                          @167
  1956: 82 9c                    a5 = u64 [a2]
  1958: ab ac f2                 jump @165 if a5 != a3
      :                          @168
  1961: 7b 9b                    u64 [a2] = a4
  1963: 33 08                    a1 = 0
  1965: 32 00                    ret
      :                          @169
  1967: 32 00                    ret
      :                          @170 [@dyn 16]
  1969: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  1972: 7b 10 18                 u64 [sp + 0x18] = ra
  1975: 7b 15 10                 u64 [sp + 0x10] = s0
  1978: 7b 16 08                 u64 [sp + 0x8] = s1
  1981: 64 75                    s0 = a0
  1983: 82 7a 10                 a3 = u64 [a0 + 0x10]
  1986: 82 77                    a0 = u64 [a0]
  1988: c9 a7 07                 a0 = a0 - a3
  1991: 64 96                    s1 = a2
  1993: ac 97 2a                 jump @173 if a0 <u a2
      :                          @171
  1996: 7b 1a                    u64 [sp] = a3
  1998: 82 57 08                 a0 = u64 [s0 + 0x8]
  2001: c8 a7 07                 a0 = a0 + a3
  2004: 64 69                    a2 = s1
  2006: 50 10 22 41 01           ra = 34, jump @192
      :                          @172 [@dyn 17]
  2011: 82 17                    a0 = u64 [sp]
  2013: c8 76 06                 s1 = s1 + a0
  2016: 7b 56 10                 u64 [s0 + 0x10] = s1
  2019: 33 07                    a0 = 0
  2021: 82 10 18                 ra = u64 [sp + 0x18]
  2024: 82 15 10                 s0 = u64 [sp + 0x10]
  2027: 82 16 08                 s1 = u64 [sp + 0x8]
  2030: 95 11 20                 sp = sp + 0x20
  2033: 32 00                    ret
      :                          @173
  2035: 64 57                    a0 = s0
  2037: 7b 18                    u64 [sp] = a1
  2039: 64 a8                    a1 = a3
  2041: 64 69                    a2 = s1
  2043: 50 10 24 7b fc           ra = 36, jump @86
      :                          @174 [@dyn 18]
  2048: 82 18                    a1 = u64 [sp]
  2050: 82 5a 10                 a3 = u64 [s0 + 0x10]
  2053: 28 c7                    jump @171
      :                          @175 [@dyn 19]
  2055: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  2058: 7b 10 20                 u64 [sp + 0x20] = ra
  2061: 7b 15 18                 u64 [sp + 0x18] = s0
  2064: 7b 16 10                 u64 [sp + 0x10] = s1
  2067: 64 86                    s1 = a1
  2069: 83 88                    i32 a1 = a1 + 0
  2071: 33 09 80 00              a2 = 0x80
  2075: 64 7a                    a3 = a0
  2077: ae 98 2b                 jump @180 if a1 >=u a2
      :                          @176
  2080: 82 a8 10                 a1 = u64 [a3 + 0x10]
  2083: 82 a7                    a0 = u64 [a3]
  2085: ab 78 12                 jump @179 if a1 != a0
      :                          @177
  2088: 64 a7                    a0 = a3
  2090: 64 a5                    s0 = a3
  2092: 50 10 28 0f fe           ra = 40, jump @130
      :                          @178 [@dyn 20]
  2097: 64 5a                    a3 = s0
  2099: 82 58 10                 a1 = u64 [s0 + 0x10]
  2102: 01                       fallthrough
      :                          @179
  2103: 82 a7 08                 a0 = u64 [a3 + 0x8]
  2106: c8 87 07                 a0 = a0 + a1
  2109: 78 76                    u8 [a0] = s1
  2111: 95 88 01                 a1 = a1 + 0x1
  2114: 7b a8 10                 u64 [a3 + 0x10] = a1
  2117: 28 ab 00                 jump @188
      :                          @180
  2120: 8b 67 0b                 i32 a0 = s1 >> 0xb
  2123: 48 11 0c                 u32 [sp + 12] = 0
  2126: 52 07 1c                 jump @182 if a0 != 0
      :                          @181
  2129: 98 67 06                 a0 = s1 >> 0x6
  2132: 86 77 c0 00              a0 = a0 | 0xc0
  2136: 78 17 0c                 u8 [sp + 0xc] = a0
  2139: 84 67 3f                 a0 = s1 & 0x3f
  2142: 86 77 80 00              a0 = a0 | 0x80
  2146: 78 17 0d                 u8 [sp + 0xd] = a0
  2149: 33 06 02                 s1 = 0x2
  2152: 28 63                    jump @185
      :                          @182
  2154: 8b 67 10                 i32 a0 = s1 >> 0x10
  2157: 52 07 29                 jump @184 if a0 != 0
      :                          @183
  2160: 98 67 0c                 a0 = s1 >> 0xc
  2163: 86 77 e0 00              a0 = a0 | 0xe0
  2167: 78 17 0c                 u8 [sp + 0xc] = a0
  2170: 97 67 34                 a0 = s1 << 0x34
  2173: 98 77 3a                 a0 = a0 >> 0x3a
  2176: 95 77 80 00              a0 = a0 + 0x80
  2180: 78 17 0d                 u8 [sp + 0xd] = a0
  2183: 84 67 3f                 a0 = s1 & 0x3f
  2186: 86 77 80 00              a0 = a0 | 0x80
  2190: 78 17 0e                 u8 [sp + 0xe] = a0
  2193: 33 06 03                 s1 = 0x3
  2196: 28 37                    jump @185
      :                          @184
  2198: 97 67 2b                 a0 = s1 << 0x2b
  2201: 98 77 3d                 a0 = a0 >> 0x3d
  2204: 95 77 f0 00              a0 = a0 + 0xf0
  2208: 78 17 0c                 u8 [sp + 0xc] = a0
  2211: 97 67 2e                 a0 = s1 << 0x2e
  2214: 98 77 3a                 a0 = a0 >> 0x3a
  2217: 95 77 80 00              a0 = a0 + 0x80
  2221: 78 17 0d                 u8 [sp + 0xd] = a0
  2224: 97 67 34                 a0 = s1 << 0x34
  2227: 98 77 3a                 a0 = a0 >> 0x3a
  2230: 95 77 80 00              a0 = a0 + 0x80
  2234: 78 17 0e                 u8 [sp + 0xe] = a0
  2237: 84 67 3f                 a0 = s1 & 0x3f
  2240: 86 77 80 00              a0 = a0 | 0x80
  2244: 78 17 0f                 u8 [sp + 0xf] = a0
  2247: 33 06 04                 s1 = 0x4
  2250: 01                       fallthrough
      :                          @185
  2251: 82 a5 10                 s0 = u64 [a3 + 0x10]
  2254: 82 a7                    a0 = u64 [a3]
  2256: c9 57 07                 a0 = a0 - s0
  2259: ac 67 2d                 jump @189 if a0 <u s1
      :                          @186
  2262: 7b 1a                    u64 [sp] = a3
  2264: 82 a7 08                 a0 = u64 [a3 + 0x8]
  2267: c8 57 07                 a0 = a0 + s0
  2270: 95 18 0c                 a1 = sp + 0xc
  2273: 64 69                    a2 = s1
  2275: 50 10 2a 34              ra = 42, jump @192
      :                          @187 [@dyn 21]
  2279: c8 56 06                 s1 = s1 + s0
  2282: 82 17                    a0 = u64 [sp]
  2284: 7b 76 10                 u64 [a0 + 0x10] = s1
  2287: 01                       fallthrough
      :                          @188
  2288: 33 07                    a0 = 0
  2290: 82 10 20                 ra = u64 [sp + 0x20]
  2293: 82 15 18                 s0 = u64 [sp + 0x18]
  2296: 82 16 10                 s1 = u64 [sp + 0x10]
  2299: 95 11 28                 sp = sp + 0x28
  2302: 32 00                    ret
      :                          @189
  2304: 64 a7                    a0 = a3
  2306: 64 58                    a1 = s0
  2308: 64 69                    a2 = s1
  2310: 64 a5                    s0 = a3
  2312: 50 10 2c 6e fb           ra = 44, jump @86
      :                          @190 [@dyn 22]
  2317: 64 5a                    a3 = s0
  2319: 82 55 10                 s0 = u64 [s0 + 0x10]
  2322: 28 c4                    jump @186
      :                          @191 [@dyn 23]
  2324: 28 67 04                 jump @276
      :                          @192
  2327: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  2330: 7b 10 18                 u64 [sp + 0x18] = ra
  2333: 7b 15 10                 u64 [sp + 0x10] = s0
  2336: 7b 16 08                 u64 [sp + 0x8] = s1
  2339: 53 19 10 64              jump @201 if a2 <u 16
      :                          @193
  2343: 8d 7a                    i32 a3 = -a0
  2345: 84 a2 07                 t0 = a3 & 0x7
  2348: c8 27 0b                 a4 = a0 + t0
  2351: 51 02 15                 jump @196 if t0 == 0
      :                          @194
  2354: 64 8c                    a5 = a1
  2356: 64 75                    s0 = a0
  2358: 01                       fallthrough
      :                          @195
  2359: 7c ca                    a3 = u8 [a5]
  2361: 78 5a                    u8 [s0] = a3
  2363: 95 55 01                 s0 = s0 + 0x1
  2366: 95 cc 01                 a5 = a5 + 0x1
  2369: ac b5 f6                 jump @195 if s0 <u a4
      :                          @196
  2372: c8 28 03                 t1 = a1 + t0
  2375: c9 29 02                 t0 = a2 - t0
  2378: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  2381: 84 38 07                 a1 = t1 & 0x7
  2384: c8 4b 0a                 a3 = a4 + t2
  2387: 51 08 3b                 jump @203 if a1 == 0
      :                          @197
  2390: 58 04 4b                 jump @206 if t2 <=s 0
      :                          @198
  2393: 97 38 03                 a1 = t1 << 0x3
  2396: 84 80 38                 ra = a1 & 0x38
  2399: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  2402: 82 c5                    s0 = u64 [a5]
  2404: 8d 88                    i32 a1 = -a1
  2406: 84 88 38                 a1 = a1 & 0x38
  2409: 95 cc 08                 a5 = a5 + 0x8
  2412: 01                       fallthrough
      :                          @199
  2413: 82 c6                    s1 = u64 [a5]
  2415: d0 05 05                 s0 = s0 >> ra
  2418: cf 86 09                 a2 = s1 << a1
  2421: d4 59 09                 a2 = a2 | s0
  2424: 7b b9                    u64 [a4] = a2
  2426: 95 bb 08                 a4 = a4 + 0x8
  2429: 95 cc 08                 a5 = a5 + 0x8
  2432: 64 65                    s0 = s1
  2434: ac ab eb                 jump @199 if a4 <u a3
      :                          @200
  2437: 28 1c                    jump @206
      :                          @201
  2439: 64 7a                    a3 = a0
  2441: 52 09 21                 jump @207 if a2 != 0
      :                          @202
  2444: 28 2f                    jump @209
      :                          @203
  2446: 58 04 13                 jump @206 if t2 <=s 0
      :                          @204
  2449: 64 38                    a1 = t1
  2451: 01                       fallthrough
      :                          @205
  2452: 82 89                    a2 = u64 [a1]
  2454: 7b b9                    u64 [a4] = a2
  2456: 95 bb 08                 a4 = a4 + 0x8
  2459: 95 88 08                 a1 = a1 + 0x8
  2462: ac ab f6                 jump @205 if a4 <u a3
      :                          @206
  2465: c8 43 08                 a1 = t1 + t2
  2468: 84 29 07                 a2 = t0 & 0x7
  2471: 51 09 14                 jump @209 if a2 == 0
      :                          @207
  2474: c8 a9 09                 a2 = a2 + a3
  2477: 01                       fallthrough
      :                          @208
  2478: 7c 8b                    a4 = u8 [a1]
  2480: 78 ab                    u8 [a3] = a4
  2482: 95 aa 01                 a3 = a3 + 0x1
  2485: 95 88 01                 a1 = a1 + 0x1
  2488: ac 9a f6                 jump @208 if a3 <u a2
      :                          @209
  2491: 82 10 18                 ra = u64 [sp + 0x18]
  2494: 82 15 10                 s0 = u64 [sp + 0x10]
  2497: 82 16 08                 s1 = u64 [sp + 0x8]
  2500: 95 11 20                 sp = sp + 0x20
  2503: 32 00                    ret
      :                          @210 [@dyn 24]
  2505: 82 77                    a0 = u64 [a0]
  2507: 01                       fallthrough
      :                          @211
  2508: 28                       jump @211
      :                          @212
  2509: 95 11 a0                 sp = sp + 0xffffffffffffffa0
  2512: 7b 10 58                 u64 [sp + 0x58] = ra
  2515: 7b 15 50                 u64 [sp + 0x50] = s0
  2518: 7b 16 48                 u64 [sp + 0x48] = s1
  2521: 7b 19 08                 u64 [sp + 0x8] = a2
  2524: 7b 18                    u64 [sp] = a1
  2526: 98 7a 04                 a3 = a0 >> 0x4
  2529: 33 09 27                 a2 = 0x27
  2532: 53 2a 71 02 81 00        jump @215 if a3 <u 625
      :                          @213
  2538: 33 09 27                 a2 = 0x27
  2541: 95 1b 46                 a4 = sp + 0x46
  2544: 3a 08 00 00 03           a1 = u64 [0x30000]
  2549: 7b 18 18                 u64 [sp + 0x18] = a1
  2552: 49 11 10 f0 d8 00        u64 [sp + 16] = 0xd8f0
  2558: 33 03 7b 14              t1 = 0x147b
  2562: 33 05 7a 00 01           s0 = 0x1007a
  2567: 33 00 ff e0 f5 05        ra = 0x5f5e0ff
  2573: 01                       fallthrough
      :                          @214
  2574: 64 74                    t2 = a0
  2576: 82 17 18                 a0 = u64 [sp + 0x18]
  2579: d6 74 07                 a0 = t2 mulhu a0
  2582: 98 77 0b                 a0 = a0 >> 0xb
  2585: 82 18 10                 a1 = u64 [sp + 0x10]
  2588: c0 87 02                 i32 t0 = a0 * a1
  2591: c8 42 0a                 a3 = t0 + t2
  2594: 97 a2 30                 t0 = a3 << 0x30
  2597: 98 28 32                 a1 = t0 >> 0x32
  2600: ca 38 08                 a1 = a1 * t1
  2603: 98 8c 11                 a5 = a1 >> 0x11
  2606: 98 88 10                 a1 = a1 >> 0x10
  2609: 84 88 fe 07              a1 = a1 & 0x7fe
  2613: 96 cc 9c                 a5 = a5 * 0xffffffffffffff9c
  2616: c8 ca 0a                 a3 = a3 + a5
  2619: 97 aa 31                 a3 = a3 << 0x31
  2622: 98 aa 30                 a3 = a3 >> 0x30
  2625: c8 58 08                 a1 = a1 + s0
  2628: 7c 8c                    a5 = u8 [a1]
  2630: 7c 88 01                 a1 = u8 [a1 + 0x1]
  2633: c8 5a 0a                 a3 = a3 + s0
  2636: 7c a6 01                 s1 = u8 [a3 + 0x1]
  2639: 7c aa                    a3 = u8 [a3]
  2641: 78 b8 ff                 u8 [a4 + 0xffffffffffffffff] = a1
  2644: 78 bc fe                 u8 [a4 + 0xfffffffffffffffe] = a5
  2647: 78 b6 01                 u8 [a4 + 0x1] = s1
  2650: 78 ba                    u8 [a4] = a3
  2652: 95 99 fc                 a2 = a2 + 0xfffffffffffffffc
  2655: 95 bb fc                 a4 = a4 + 0xfffffffffffffffc
  2658: ac 40 ac                 jump @214 if ra <u t2
      :                          @215
  2661: 54 17 63 3b              jump @217 if a0 <=u 99
      :                          @216
  2665: 97 78 30                 a1 = a0 << 0x30
  2668: 98 88 32                 a1 = a1 >> 0x32
  2671: 96 88 7b 14              a1 = a1 * 0x147b
  2675: 98 88 11                 a1 = a1 >> 0x11
  2678: 96 8a 9c                 a3 = a1 * 0xffffffffffffff9c
  2681: c8 a7 07                 a0 = a0 + a3
  2684: 97 77 31                 a0 = a0 << 0x31
  2687: 98 77 30                 a0 = a0 >> 0x30
  2690: 95 99 fe                 a2 = a2 + 0xfffffffffffffffe
  2693: 33 0a 7a 00 01           a3 = 0x1007a
  2698: c8 a7 07                 a0 = a0 + a3
  2701: 7c 7a 01                 a3 = u8 [a0 + 0x1]
  2704: 7c 77                    a0 = u8 [a0]
  2706: 95 1b 21                 a4 = sp + 0x21
  2709: c8 9b 0b                 a4 = a4 + a2
  2712: 78 ba 01                 u8 [a4 + 0x1] = a3
  2715: 78 b7                    u8 [a4] = a0
  2717: 64 87                    a0 = a1
  2719: 01                       fallthrough
      :                          @217
  2720: 55 17 0a 14              jump @219 if a0 >=u 10
      :                          @218
  2724: 95 99 ff                 a2 = a2 + 0xffffffffffffffff
  2727: 95 18 21                 a1 = sp + 0x21
  2730: c8 98 08                 a1 = a1 + a2
  2733: 83 77 30                 i32 a0 = a0 + 0x30
  2736: 78 87                    u8 [a1] = a0
  2738: 28 21                    jump @220
      :                          @219
  2740: 97 77 01                 a0 = a0 << 0x1
  2743: 95 99 fe                 a2 = a2 + 0xfffffffffffffffe
  2746: 33 08 7a 00 01           a1 = 0x1007a
  2751: c8 87 07                 a0 = a0 + a1
  2754: 7c 78 01                 a1 = u8 [a0 + 0x1]
  2757: 7c 77                    a0 = u8 [a0]
  2759: 95 1a 21                 a3 = sp + 0x21
  2762: c8 9a 0a                 a3 = a3 + a2
  2765: 78 a8 01                 u8 [a3 + 0x1] = a1
  2768: 78 a7                    u8 [a3] = a0
  2770: 01                       fallthrough
      :                          @220
  2771: 95 1b 21                 a4 = sp + 0x21
  2774: c8 9b 0b                 a4 = a4 + a2
  2777: 9a 9c 27                 a5 = 0x27 - a2
  2780: 33 09 78 00 01           a2 = 0x10078
  2785: 82 17 08                 a0 = u64 [sp + 0x8]
  2788: 82 18                    a1 = u64 [sp]
  2790: 33 0a                    a3 = 0
  2792: 50 10 32 12              ra = 50, jump @222
      :                          @221 [@dyn 25]
  2796: 82 10 58                 ra = u64 [sp + 0x58]
  2799: 82 15 50                 s0 = u64 [sp + 0x50]
  2802: 82 16 48                 s1 = u64 [sp + 0x48]
  2805: 95 11 60                 sp = sp + 0x60
  2808: 32 00                    ret
      :                          @222
  2810: 95 11 98                 sp = sp + 0xffffffffffffff98
  2813: 7b 10 60                 u64 [sp + 0x60] = ra
  2816: 7b 15 58                 u64 [sp + 0x58] = s0
  2819: 7b 16 50                 u64 [sp + 0x50] = s1
  2822: 7b 1b 18                 u64 [sp + 0x18] = a4
  2825: 51 08 4f                 jump @229 if a1 == 0
      :                          @223
  2828: 80 76 34                 s1 = u32 [a0 + 0x34]
  2831: 84 68 01                 a1 = s1 & 0x1
  2834: 33 0b 2b                 a4 = 0x2b
  2837: 33 05 00 00 11           s0 = 0x110000
  2842: db 8b 05                 s0 = a4 if a1 != 0
  2845: 7b 15 28                 u64 [sp + 0x28] = s0
  2848: c8 c8 02                 t0 = a1 + a5
  2851: 84 68 04                 a1 = s1 & 0x4
  2854: 51 08 42                 jump @230 if a1 == 0
      :                          @224
  2857: 7b 19 30                 u64 [sp + 0x30] = a2
  2860: 33 08                    a1 = 0
  2862: 51 0a 1a                 jump @227 if a3 == 0
      :                          @225
  2865: 64 a5                    s0 = a3
  2867: 01                       fallthrough
      :                          @226
  2868: 7d 9b                    a4 = i8 [a2]
  2870: 89 bb c0                 a4 = a4 <s 0xffffffffffffffc0
  2873: 85 bb 01                 a4 = a4 ^ 0x1
  2876: c8 b8 08                 a1 = a1 + a4
  2879: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  2882: 95 99 01                 a2 = a2 + 0x1
  2885: 52 05 ef                 jump @226 if s0 != 0
      :                          @227
  2888: c8 82 02                 t0 = t0 + a1
  2891: 7b 1a 38                 u64 [sp + 0x38] = a3
  2894: 82 78                    a1 = u64 [a0]
  2896: 7b 1c 20                 u64 [sp + 0x20] = a5
  2899: 52 08 23                 jump @231 if a1 != 0
      :                          @228
  2902: 28 41                    jump @236
      :                          @229
  2904: 81 76 34                 s1 = i32 [a0 + 0x34]
  2907: 95 c2 01                 t0 = a5 + 0x1
  2910: 49 11 28 2d              u64 [sp + 40] = 0x2d
  2914: 84 68 04                 a1 = s1 & 0x4
  2917: 52 08 c4                 jump @224 if a1 != 0
      :                          @230
  2920: 49 11 30                 u64 [sp + 48] = 0
  2923: 7b 1a 38                 u64 [sp + 0x38] = a3
  2926: 82 78                    a1 = u64 [a0]
  2928: 7b 1c 20                 u64 [sp + 0x20] = a5
  2931: 51 08 24                 jump @236 if a1 == 0
      :                          @231
  2934: 82 75 08                 s0 = u64 [a0 + 0x8]
  2937: ae 52 1e                 jump @236 if t0 >=u s0
      :                          @232
  2940: 84 66 08                 s1 = s1 & 0x8
  2943: 52 06 50                 jump @239 if s1 != 0
      :                          @233
  2946: 7c 79 38                 a2 = u8 [a0 + 0x38]
  2949: c9 25 0a                 a3 = s0 - t0
  2952: 5a 19 01 a1 00           jump @246 if a2 >s 1
      :                          @234
  2957: 52 09 ae 00              jump @248 if a2 != 0
      :                          @235
  2961: 7b 1a 10                 u64 [sp + 0x10] = a3
  2964: 28 ad 00                 jump @249
      :                          @236
  2967: 82 75 20                 s0 = u64 [a0 + 0x20]
  2970: 82 76 28                 s1 = u64 [a0 + 0x28]
  2973: 64 57                    a0 = s0
  2975: 64 68                    a1 = s1
  2977: 82 19 28                 a2 = u64 [sp + 0x28]
  2980: 82 1a 30                 a3 = u64 [sp + 0x30]
  2983: 82 1b 38                 a4 = u64 [sp + 0x38]
  2986: 50 10 34 6d 01           ra = 52, jump @269
      :                          @237 [@dyn 26]
  2991: 33 08 01                 a1 = 0x1
  2994: 52 07 bc 00              jump @254 if a0 != 0
      :                          @238
  2998: 82 6c 18                 a5 = u64 [s1 + 0x18]
  3001: 64 57                    a0 = s0
  3003: 82 18 18                 a1 = u64 [sp + 0x18]
  3006: 82 19 20                 a2 = u64 [sp + 0x20]
  3009: 82 10 60                 ra = u64 [sp + 0x60]
  3012: 82 15 58                 s0 = u64 [sp + 0x58]
  3015: 82 16 50                 s1 = u64 [sp + 0x50]
  3018: 95 11 68                 sp = sp + 0x68
  3021: 32 0c                    jump [a5]
      :                          @239
  3023: 7b 12 40                 u64 [sp + 0x40] = t0
  3026: 81 78 30                 a1 = i32 [a0 + 0x30]
  3029: 7b 18 08                 u64 [sp + 0x8] = a1
  3032: 7c 79 38                 a2 = u8 [a0 + 0x38]
  3035: 7b 19                    u64 [sp] = a2
  3037: 82 79 20                 a2 = u64 [a0 + 0x20]
  3040: 82 76 28                 s1 = u64 [a0 + 0x28]
  3043: 48 17 30 30              u32 [a0 + 48] = 0x30
  3047: 7b 17 10                 u64 [sp + 0x10] = a0
  3050: 46 17 38 01              u8 [a0 + 56] = 0x1
  3054: 7b 19 48                 u64 [sp + 0x48] = a2
  3057: 64 97                    a0 = a2
  3059: 64 68                    a1 = s1
  3061: 82 19 28                 a2 = u64 [sp + 0x28]
  3064: 82 1a 30                 a3 = u64 [sp + 0x30]
  3067: 82 1b 38                 a4 = u64 [sp + 0x38]
  3070: 50 10 36 19 01           ra = 54, jump @269
      :                          @240 [@dyn 27]
  3075: 52 07 67                 jump @253 if a0 != 0
      :                          @241
  3078: 82 17 40                 a0 = u64 [sp + 0x40]
  3081: c9 75 05                 s0 = s0 - a0
  3084: 95 55 01                 s0 = s0 + 0x1
  3087: 01                       fallthrough
      :                          @242
  3088: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  3091: 51 05 c6 00              jump @264 if s0 == 0
      :                          @243
  3095: 82 69 20                 a2 = u64 [s1 + 0x20]
  3098: 33 08 30                 a1 = 0x30
  3101: 82 17 48                 a0 = u64 [sp + 0x48]
  3104: b4 90 01 38              ra = 56, jump [a2]
      :                          @244 [@dyn 28]
  3108: 51 07 ec                 jump @242 if a0 == 0
      :                          @245
  3111: 28 43                    jump @253
      :                          @246
  3113: 52 19 02 12              jump @248 if a2 != 2
      :                          @247
  3117: 98 a9 01                 a2 = a3 >> 0x1
  3120: 95 a8 01                 a1 = a3 + 0x1
  3123: 98 88 01                 a1 = a1 >> 0x1
  3126: 7b 18 10                 u64 [sp + 0x10] = a1
  3129: 28 08                    jump @249
      :                          @248
  3131: 64 a9                    a2 = a3
  3133: 49 11 10                 u64 [sp + 16] = 0
  3136: 01                       fallthrough
      :                          @249
  3137: 82 78 20                 a1 = u64 [a0 + 0x20]
  3140: 7b 18 48                 u64 [sp + 0x48] = a1
  3143: 82 76 28                 s1 = u64 [a0 + 0x28]
  3146: 81 77 30                 a0 = i32 [a0 + 0x30]
  3149: 7b 17 40                 u64 [sp + 0x40] = a0
  3152: 95 95 01                 s0 = a2 + 0x1
  3155: 01                       fallthrough
      :                          @250
  3156: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  3159: 51 05 27                 jump @255 if s0 == 0
      :                          @251
  3162: 82 69 20                 a2 = u64 [s1 + 0x20]
  3165: 82 17 48                 a0 = u64 [sp + 0x48]
  3168: 82 18 40                 a1 = u64 [sp + 0x40]
  3171: b4 90 01 3a              ra = 58, jump [a2]
      :                          @252 [@dyn 29]
  3175: 51 07 ed                 jump @250 if a0 == 0
      :                          @253
  3178: 33 08 01                 a1 = 0x1
  3181: 01                       fallthrough
      :                          @254
  3182: 64 87                    a0 = a1
  3184: 82 10 60                 ra = u64 [sp + 0x60]
  3187: 82 15 58                 s0 = u64 [sp + 0x58]
  3190: 82 16 50                 s1 = u64 [sp + 0x50]
  3193: 95 11 68                 sp = sp + 0x68
  3196: 32 00                    ret
      :                          @255
  3198: 82 15 48                 s0 = u64 [sp + 0x48]
  3201: 64 57                    a0 = s0
  3203: 64 68                    a1 = s1
  3205: 82 19 28                 a2 = u64 [sp + 0x28]
  3208: 82 1a 30                 a3 = u64 [sp + 0x30]
  3211: 82 1b 38                 a4 = u64 [sp + 0x38]
  3214: 50 10 3c 89 00           ra = 60, jump @269
      :                          @256 [@dyn 30]
  3219: 33 08 01                 a1 = 0x1
  3222: 52 07 d8                 jump @254 if a0 != 0
      :                          @257
  3225: 82 6a 18                 a3 = u64 [s1 + 0x18]
  3228: 64 57                    a0 = s0
  3230: 82 18 18                 a1 = u64 [sp + 0x18]
  3233: 82 19 20                 a2 = u64 [sp + 0x20]
  3236: b4 a0 01 3e              ra = 62, jump [a3]
      :                          @258 [@dyn 31]
  3240: 33 08 01                 a1 = 0x1
  3243: 52 07 c3                 jump @254 if a0 != 0
      :                          @259
  3246: 82 17 10                 a0 = u64 [sp + 0x10]
  3249: 9a 77                    a0 = -a0
  3251: 7b 17 38                 u64 [sp + 0x38] = a0
  3254: 33 05 ff                 s0 = 0xffffffffffffffff
  3257: 01                       fallthrough
      :                          @260
  3258: 82 17 38                 a0 = u64 [sp + 0x38]
  3261: c8 57 07                 a0 = a0 + s0
  3264: 51 17 ff 42              jump @267 if a0 == 4294967295
      :                          @261
  3268: 82 69 20                 a2 = u64 [s1 + 0x20]
  3271: 82 17 48                 a0 = u64 [sp + 0x48]
  3274: 82 18 40                 a1 = u64 [sp + 0x40]
  3277: b4 90 01 40              ra = 64, jump [a2]
      :                          @262 [@dyn 32]
  3281: 95 55 01                 s0 = s0 + 0x1
  3284: 51 07 e6                 jump @260 if a0 == 0
      :                          @263
  3287: 28 37                    jump @268
      :                          @264
  3289: 82 6a 18                 a3 = u64 [s1 + 0x18]
  3292: 82 17 48                 a0 = u64 [sp + 0x48]
  3295: 82 18 18                 a1 = u64 [sp + 0x18]
  3298: 82 19 20                 a2 = u64 [sp + 0x20]
  3301: b4 a0 01 42              ra = 66, jump [a3]
      :                          @265 [@dyn 33]
  3305: 33 08 01                 a1 = 0x1
  3308: 52 07 82                 jump @254 if a0 != 0
      :                          @266
  3311: 33 08                    a1 = 0
  3313: 82 17 10                 a0 = u64 [sp + 0x10]
  3316: 82 19 08                 a2 = u64 [sp + 0x8]
  3319: 7a 79 30                 u32 [a0 + 0x30] = a2
  3322: 82 19                    a2 = u64 [sp]
  3324: 78 79 38                 u8 [a0 + 0x38] = a2
  3327: 28 6f ff                 jump @254
      :                          @267
  3330: 82 15 10                 s0 = u64 [sp + 0x10]
  3333: 82 17 10                 a0 = u64 [sp + 0x10]
  3336: d8 75 08                 a1 = s0 <u a0
  3339: 28 63 ff                 jump @254
      :                          @268
  3342: 82 17 10                 a0 = u64 [sp + 0x10]
  3345: d8 75 08                 a1 = s0 <u a0
  3348: 28 5a ff                 jump @254
      :                          @269
  3351: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  3354: 7b 10 20                 u64 [sp + 0x20] = ra
  3357: 7b 15 18                 u64 [sp + 0x18] = s0
  3360: 7b 16 10                 u64 [sp + 0x10] = s1
  3363: 83 9c                    i32 a5 = a2 + 0
  3365: 33 02 00 00 11           t0 = 0x110000
  3370: 64 a6                    s1 = a3
  3372: 64 85                    s0 = a1
  3374: 64 7a                    a3 = a0
  3376: aa 2c 20                 jump @272 if a5 == t0
      :                          @270
  3379: 82 5c 20                 a5 = u64 [s0 + 0x20]
  3382: 64 a7                    a0 = a3
  3384: 64 98                    a1 = a2
  3386: 7b 1b 08                 u64 [sp + 0x8] = a4
  3389: 7b 1a                    u64 [sp] = a3
  3391: b4 c0 01 44              ra = 68, jump [a5]
      :                          @271 [@dyn 34]
  3395: 82 1a                    a3 = u64 [sp]
  3397: 82 1b 08                 a4 = u64 [sp + 0x8]
  3400: 64 78                    a1 = a0
  3402: 33 07 01                 a0 = 0x1
  3405: 52 08 20                 jump @275 if a1 != 0
      :                          @272
  3408: 51 06 1a                 jump @274 if s1 == 0
      :                          @273
  3411: 82 5c 18                 a5 = u64 [s0 + 0x18]
  3414: 64 a7                    a0 = a3
  3416: 64 68                    a1 = s1
  3418: 64 b9                    a2 = a4
  3420: 82 10 20                 ra = u64 [sp + 0x20]
  3423: 82 15 18                 s0 = u64 [sp + 0x18]
  3426: 82 16 10                 s1 = u64 [sp + 0x10]
  3429: 95 11 28                 sp = sp + 0x28
  3432: 32 0c                    jump [a5]
      :                          @274
  3434: 33 07                    a0 = 0
  3436: 01                       fallthrough
      :                          @275
  3437: 82 10 20                 ra = u64 [sp + 0x20]
  3440: 82 15 18                 s0 = u64 [sp + 0x18]
  3443: 82 16 10                 s1 = u64 [sp + 0x10]
  3446: 95 11 28                 sp = sp + 0x28
  3449: 32 00                    ret
      :                          @276
  3451: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  3455: 7b 10 80 00              u64 [sp + 0x80] = ra
  3459: 7b 15 78                 u64 [sp + 0x78] = s0
  3462: 7b 16 70                 u64 [sp + 0x70] = s1
  3465: 49 11 60 20              u64 [sp + 96] = 0x20
  3469: 33 09 03                 a2 = 0x3
  3472: 78 19 68                 u8 [sp + 0x68] = a2
  3475: 49 11 30                 u64 [sp + 48] = 0
  3478: 49 11 40                 u64 [sp + 64] = 0
  3481: 82 86 20                 s1 = u64 [a1 + 0x20]
  3484: 7b 17 50                 u64 [sp + 0x50] = a0
  3487: 33 07 48 00 01           a0 = 0x10048
  3492: 7b 17 58                 u64 [sp + 0x58] = a0
  3495: 51 06 06 01              jump @298 if s1 == 0
      :                          @277
  3499: 82 87 28                 a0 = u64 [a1 + 0x28]
  3502: 51 07 73 01              jump @308 if a0 == 0
      :                          @278
  3506: 33 09                    a2 = 0
  3508: 82 85                    s0 = u64 [a1]
  3510: 7b 18 08                 u64 [sp + 0x8] = a1
  3513: 82 88 10                 a1 = u64 [a1 + 0x10]
  3516: 7b 18 18                 u64 [sp + 0x18] = a1
  3519: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  3522: 97 88 03                 a1 = a1 << 0x3
  3525: 98 88 03                 a1 = a1 >> 0x3
  3528: 95 88 01                 a1 = a1 + 0x1
  3531: 7b 18                    u64 [sp] = a1
  3533: 95 55 08                 s0 = s0 + 0x8
  3536: 96 78 38                 a1 = a0 * 0x38
  3539: 95 66 18                 s1 = s1 + 0x18
  3542: 33 07 30                 a0 = 0x30
  3545: 7b 17 10                 u64 [sp + 0x10] = a0
  3548: 01                       fallthrough
      :                          @279
  3549: 7b 18 20                 u64 [sp + 0x20] = a1
  3552: 7b 19 28                 u64 [sp + 0x28] = a2
  3555: 82 59                    a2 = u64 [s0]
  3557: 51 09 17                 jump @282 if a2 == 0
      :                          @280
  3560: 82 1a 58                 a3 = u64 [sp + 0x58]
  3563: 82 17 50                 a0 = u64 [sp + 0x50]
  3566: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  3569: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3572: b4 a0 01 46              ra = 70, jump [a3]
      :                          @281 [@dyn 35]
  3576: 52 07 4e 01              jump @311 if a0 != 0
      :                          @282
  3580: 81 67 10                 a0 = i32 [s1 + 0x10]
  3583: 7a 17 60                 u32 [sp + 0x60] = a0
  3586: 7c 67 18                 a0 = u8 [s1 + 0x18]
  3589: 78 17 68                 u8 [sp + 0x68] = a0
  3592: 81 67 14                 a0 = i32 [s1 + 0x14]
  3595: 7a 17 64                 u32 [sp + 0x64] = a0
  3598: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3601: 82 67                    a0 = u64 [s1]
  3603: 51 08 26                 jump @287 if a1 == 0
      :                          @283
  3606: 52 18 01 16              jump @285 if a1 != 1
      :                          @284
  3610: 97 77 04                 a0 = a0 << 0x4
  3613: 82 18 18                 a1 = u64 [sp + 0x18]
  3616: c8 87 07                 a0 = a0 + a1
  3619: 82 78 08                 a1 = u64 [a0 + 0x8]
  3622: 82 19 10                 a2 = u64 [sp + 0x10]
  3625: aa 98 07                 jump @286 if a1 == a2
      :                          @285
  3628: 33 08                    a1 = 0
  3630: 28 0f                    jump @288
      :                          @286
  3632: 82 77                    a0 = u64 [a0]
  3634: 82 77                    a0 = u64 [a0]
  3636: 33 08 01                 a1 = 0x1
  3639: 28 06                    jump @288
      :                          @287
  3641: 33 08 01                 a1 = 0x1
  3644: 01                       fallthrough
      :                          @288
  3645: 7b 18 30                 u64 [sp + 0x30] = a1
  3648: 7b 17 38                 u64 [sp + 0x38] = a0
  3651: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  3654: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  3657: 51 08 26                 jump @293 if a1 == 0
      :                          @289
  3660: 52 18 01 16              jump @291 if a1 != 1
      :                          @290
  3664: 97 77 04                 a0 = a0 << 0x4
  3667: 82 18 18                 a1 = u64 [sp + 0x18]
  3670: c8 87 07                 a0 = a0 + a1
  3673: 82 78 08                 a1 = u64 [a0 + 0x8]
  3676: 82 19 10                 a2 = u64 [sp + 0x10]
  3679: aa 98 07                 jump @292 if a1 == a2
      :                          @291
  3682: 33 08                    a1 = 0
  3684: 28 0f                    jump @294
      :                          @292
  3686: 82 77                    a0 = u64 [a0]
  3688: 82 77                    a0 = u64 [a0]
  3690: 33 08 01                 a1 = 0x1
  3693: 28 06                    jump @294
      :                          @293
  3695: 33 08 01                 a1 = 0x1
  3698: 01                       fallthrough
      :                          @294
  3699: 7b 18 40                 u64 [sp + 0x40] = a1
  3702: 7b 17 48                 u64 [sp + 0x48] = a0
  3705: 82 67 08                 a0 = u64 [s1 + 0x8]
  3708: 97 77 04                 a0 = a0 << 0x4
  3711: 82 18 18                 a1 = u64 [sp + 0x18]
  3714: c8 78 08                 a1 = a1 + a0
  3717: 82 87                    a0 = u64 [a1]
  3719: 82 89 08                 a2 = u64 [a1 + 0x8]
  3722: 95 18 30                 a1 = sp + 0x30
  3725: b4 90 01 48              ra = 72, jump [a2]
      :                          @295 [@dyn 36]
  3729: 52 07 b5 00              jump @311 if a0 != 0
      :                          @296
  3733: 95 55 10                 s0 = s0 + 0x10
  3736: 82 18 20                 a1 = u64 [sp + 0x20]
  3739: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  3742: 95 66 38                 s1 = s1 + 0x38
  3745: 82 19 28                 a2 = u64 [sp + 0x28]
  3748: 95 99 01                 a2 = a2 + 0x1
  3751: 52 08 36 ff              jump @279 if a1 != 0
      :                          @297
  3755: 28 69                    jump @306
      :                          @298
  3757: 82 87 18                 a0 = u64 [a1 + 0x18]
  3760: 51 07 71                 jump @308 if a0 == 0
      :                          @299
  3763: 82 85 10                 s0 = u64 [a1 + 0x10]
  3766: 33 0a                    a3 = 0
  3768: 97 79 04                 a2 = a0 << 0x4
  3771: c8 59 09                 a2 = a2 + s0
  3774: 7b 19 20                 u64 [sp + 0x20] = a2
  3777: 7b 18 08                 u64 [sp + 0x8] = a1
  3780: 82 86                    s1 = u64 [a1]
  3782: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  3785: 97 77 04                 a0 = a0 << 0x4
  3788: 98 77 04                 a0 = a0 >> 0x4
  3791: 95 77 01                 a0 = a0 + 0x1
  3794: 7b 17                    u64 [sp] = a0
  3796: 95 66 08                 s1 = s1 + 0x8
  3799: 01                       fallthrough
      :                          @300
  3800: 7b 1a 28                 u64 [sp + 0x28] = a3
  3803: 82 69                    a2 = u64 [s1]
  3805: 51 09 16                 jump @303 if a2 == 0
      :                          @301
  3808: 82 1a 58                 a3 = u64 [sp + 0x58]
  3811: 82 17 50                 a0 = u64 [sp + 0x50]
  3814: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3817: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3820: b4 a0 01 4a              ra = 74, jump [a3]
      :                          @302 [@dyn 37]
  3824: 52 07 56                 jump @311 if a0 != 0
      :                          @303
  3827: 82 57                    a0 = u64 [s0]
  3829: 82 59 08                 a2 = u64 [s0 + 0x8]
  3832: 95 18 30                 a1 = sp + 0x30
  3835: b4 90 01 4c              ra = 76, jump [a2]
      :                          @304 [@dyn 38]
  3839: 52 07 47                 jump @311 if a0 != 0
      :                          @305
  3842: 95 66 10                 s1 = s1 + 0x10
  3845: 95 55 10                 s0 = s0 + 0x10
  3848: 82 1a 28                 a3 = u64 [sp + 0x28]
  3851: 95 aa 01                 a3 = a3 + 0x1
  3854: 82 17 20                 a0 = u64 [sp + 0x20]
  3857: ab 75 c7                 jump @300 if s0 != a0
      :                          @306
  3860: 82 18 08                 a1 = u64 [sp + 0x8]
  3863: 82 1a                    a3 = u64 [sp]
  3865: 82 87 08                 a0 = u64 [a1 + 0x8]
  3868: ac 7a 0d                 jump @309 if a3 <u a0
      :                          @307
  3871: 28 2c                    jump @312
      :                          @308
  3873: 33 0a                    a3 = 0
  3875: 82 87 08                 a0 = u64 [a1 + 0x8]
  3878: 54 07 25                 jump @312 if a0 <=u 0
      :                          @309
  3881: 82 87                    a0 = u64 [a1]
  3883: 97 a8 04                 a1 = a3 << 0x4
  3886: c8 87 09                 a2 = a0 + a1
  3889: 82 1a 58                 a3 = u64 [sp + 0x58]
  3892: 82 17 50                 a0 = u64 [sp + 0x50]
  3895: 82 98                    a1 = u64 [a2]
  3897: 82 99 08                 a2 = u64 [a2 + 0x8]
  3900: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3903: b4 a0 01 4e              ra = 78, jump [a3]
      :                          @310 [@dyn 39]
  3907: 51 07 08                 jump @312 if a0 == 0
      :                          @311
  3910: 33 07 01                 a0 = 0x1
  3913: 28 05                    jump @313
      :                          @312
  3915: 33 07                    a0 = 0
  3917: 01                       fallthrough
      :                          @313
  3918: 82 10 80 00              ra = u64 [sp + 0x80]
  3922: 82 15 78                 s0 = u64 [sp + 0x78]
  3925: 82 16 70                 s1 = u64 [sp + 0x70]
  3928: 95 11 88 00              sp = sp + 0x88
  3932: 32 00                    ret
