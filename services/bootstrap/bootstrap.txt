// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 0 bytes
// RO data = []
// RW data = []
// Instructions = 36
// Code size = 132 bytes

      :                          @0
     0: 28 11 00 00 00           jump @4
      :                          @1
     5: 28 10 00 00 00           jump @5
      :                          @2
    10: 28 1c 00 00 00           jump @6
      :                          @3
    15: 28 71                    jump @7
      :                          @4 [export #0: 'is_authorized']
    17: 33 07                    a0 = 0x0
    19: 32 00                    ret
      :                          @5 [export #1: 'refine']
    21: 14 0a 04 00 ff fe 00 00 00 00 a3 = 0xfeff0004
    31: 33 0b 24                 a4 = 0x24
    34: 33 07                    a0 = 0x0
    36: 32 00                    ret
      :                          @6 [export #2: 'accumulate']
    38: 8b 11 f0                 i64 sp = i64 sp - i64 16
    41: 71 10 08                 u64 [sp + 8] = ra
    44: 71 15                    u64 [sp] = s0
    46: 14 05 00 00 ff fe 00 00 00 00 s0 = 0xfeff0000
    56: 76 58 20                 a1 = u32 [s0 + 32]
    59: 33 09 00 20              a2 = 0x2000
    63: 33 0a 00 10              a3 = 0x1000
    67: 33 0b 00 30              a4 = 0x3000
    71: 33 0c 00 40              a5 = 0x4000
    75: 14 07 00 00 ff fe 00 00 00 00 a0 = 0xfeff0000
    85: 0a 09                    ecalli 9 // 'new'
    87: 48 05                    u32 [s0 + 0] = 0
    89: 70 57 04                 u32 [s0 + 4] = a0
    92: 14 09 04 00 ff fe 00 00 00 00 a2 = 0xfeff0004
   102: 33 08 04                 a1 = 0x4
   105: 33 0a 04                 a3 = 0x4
   108: 64 57                    a0 = s0
   110: 0a 03                    ecalli 3 // 'write'
   112: 8d 77 20                 a0 = a0 <<64 32
   115: 8e 77 20                 a0 = a0 >>64 32
   118: 78 10 08                 ra = u64 [sp + 8]
   121: 78 15                    s0 = u64 [sp]
   123: 8b 11 10                 i64 sp = i64 sp + 0x10
   126: 32 00                    ret
      :                          @7 [export #3: 'on_transfer']
   128: 33 07                    a0 = 0x0
   130: 32 00                    ret