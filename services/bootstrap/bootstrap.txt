// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 65536 bytes
// RO data = []
// RW data = []
// Instructions = 262
// Code size = 824 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 5b 01 00 00           jump @41
      :                          @2
    10: 28 87 02                 jump @74
      :                          @3 [export #0: 'refine']
    13: 95 11 d8                 sp = sp + 0xffffffffffffffd8
    16: 7b 10 20                 u64 [sp + 0x20] = ra
    19: 7b 15 18                 u64 [sp + 0x18] = s0
    22: 7b 16 10                 u64 [sp + 0x10] = s1
    25: 64 86                    s1 = a1
    27: 64 7a                    a3 = a0
    29: 33 07 00 00 01           a0 = 0x10000
    34: 53 16 04 43              jump @12 if s1 <u 4
      :                          @4
    38: 7d a8                    a1 = i8 [a3]
    40: 33 05 01                 s0 = 0x1
    43: 59 08 37                 jump @11 if a1 >=s 0
      :                          @5
    46: 84 89 ff 00              a2 = a1 & 0xff
    50: 33 05 02                 s0 = 0x2
    53: 53 29 c0 00 2d           jump @11 if a2 <u 192
      :                          @6
    58: 33 05 03                 s0 = 0x3
    61: 53 29 e0 00 25           jump @11 if a2 <u 224
      :                          @7
    66: 33 05 04                 s0 = 0x4
    69: 53 29 f0 00 1d           jump @11 if a2 <u 240
      :                          @8
    74: 33 05 05                 s0 = 0x5
    77: 53 29 f8 00 15           jump @11 if a2 <u 248
      :                          @9
    82: 33 05 06                 s0 = 0x6
    85: 53 29 fc 00 0d           jump @11 if a2 <u 252
      :                          @10
    90: 88 98 fe 00              a1 = a2 <u 0xfe
    94: 9a 85 08                 s0 = 0x8 - a1
    97: 01                       fallthrough
      :                          @11
    98: ae 56 08                 jump @13 if s1 >=u s0
      :                          @12
   101: 33 08                    a1 = 0
   103: 28 e3 00                 jump @38
      :                          @13
   106: 64 a7                    a0 = a3
   108: 64 58                    a1 = s0
   110: 7b 1a 08                 u64 [sp + 0x8] = a3
   113: 50 10 02 29 02           ra = 2, jump @75
      :                          @14 [@dyn 1]
   118: aa 56 cc 00              jump @37 if s1 == s0
      :                          @15
   122: 82 17 08                 a0 = u64 [sp + 0x8]
   125: c8 57 07                 a0 = a0 + s0
   128: 7d 78                    a1 = i8 [a0]
   130: c9 56 06                 s1 = s1 - s0
   133: 33 05 01                 s0 = 0x1
   136: 59 08 37                 jump @22 if a1 >=s 0
      :                          @16
   139: 84 89 ff 00              a2 = a1 & 0xff
   143: 33 05 02                 s0 = 0x2
   146: 53 29 c0 00 2d           jump @22 if a2 <u 192
      :                          @17
   151: 33 05 03                 s0 = 0x3
   154: 53 29 e0 00 25           jump @22 if a2 <u 224
      :                          @18
   159: 33 05 04                 s0 = 0x4
   162: 53 29 f0 00 1d           jump @22 if a2 <u 240
      :                          @19
   167: 33 05 05                 s0 = 0x5
   170: 53 29 f8 00 15           jump @22 if a2 <u 248
      :                          @20
   175: 33 05 06                 s0 = 0x6
   178: 53 29 fc 00 0d           jump @22 if a2 <u 252
      :                          @21
   183: 88 98 fe 00              a1 = a2 <u 0xfe
   187: 9a 85 08                 s0 = 0x8 - a1
   190: 01                       fallthrough
      :                          @22
   191: ac 56 83 00              jump @37 if s1 <u s0
      :                          @23
   195: 64 58                    a1 = s0
   197: 7b 16 08                 u64 [sp + 0x8] = s1
   200: 64 76                    s1 = a0
   202: 50 10 04 d0 01           ra = 4, jump @75
      :                          @24 [@dyn 2]
   207: c8 65 07                 a0 = s0 + s1
   210: 82 16 08                 s1 = u64 [sp + 0x8]
   213: 7b 17                    u64 [sp] = a0
   215: ab 56 0b                 jump @26 if s1 != s0
      :                          @25
   218: 33 09                    a2 = 0
   220: 33 05                    s0 = 0
   222: 33 08                    a1 = 0
   224: 28 56                    jump @36
      :                          @26
   226: 7d 78                    a1 = i8 [a0]
   228: c9 56 06                 s1 = s1 - s0
   231: 33 05 01                 s0 = 0x1
   234: 59 08 37                 jump @33 if a1 >=s 0
      :                          @27
   237: 84 89 ff 00              a2 = a1 & 0xff
   241: 33 05 02                 s0 = 0x2
   244: 53 29 c0 00 2d           jump @33 if a2 <u 192
      :                          @28
   249: 33 05 03                 s0 = 0x3
   252: 53 29 e0 00 25           jump @33 if a2 <u 224
      :                          @29
   257: 33 05 04                 s0 = 0x4
   260: 53 29 f0 00 1d           jump @33 if a2 <u 240
      :                          @30
   265: 33 05 05                 s0 = 0x5
   268: 53 29 f8 00 15           jump @33 if a2 <u 248
      :                          @31
   273: 33 05 06                 s0 = 0x6
   276: 53 29 fc 00 0d           jump @33 if a2 <u 252
      :                          @32
   281: 88 98 fe 00              a1 = a2 <u 0xfe
   285: 9a 85 08                 s0 = 0x8 - a1
   288: 01                       fallthrough
      :                          @33
   289: ac 56 3e                 jump @40 if s1 <u s0
      :                          @34
   292: 64 58                    a1 = s0
   294: 50 10 06 74 01           ra = 6, jump @75
      :                          @35 [@dyn 3]
   299: e4 56 09                 a2 = maxu(s1, s0)
   302: c9 59 09                 a2 = a2 - s0
   305: 64 78                    a1 = a0
   307: ac 79 0f                 jump @37 if a2 <u a0
      :                          @36
   310: e4 89 07                 a0 = maxu(a2, a1)
   313: c9 87 07                 a0 = a0 - a1
   316: 33 09 20                 a2 = 0x20
   319: ae 97 19                 jump @39 if a0 >=u a2
      :                          @37
   322: 33 08                    a1 = 0
   324: 33 07 00 00 01           a0 = 0x10000
   329: 01                       fallthrough
      :                          @38
   330: 82 10 20                 ra = u64 [sp + 0x20]
   333: 82 15 18                 s0 = u64 [sp + 0x18]
   336: 82 16 10                 s1 = u64 [sp + 0x10]
   339: 95 11 28                 sp = sp + 0x28
   342: 32 00                    ret
      :                          @39
   344: 82 17                    a0 = u64 [sp]
   346: c8 57 07                 a0 = a0 + s0
   349: 28 ed                    jump @38
      :                          @40
   351: 00                       trap
      :                          @41 [export #1: 'accumulate']
   352: 51 08 28 01              jump @73 if a1 == 0
      :                          @42
   356: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   359: 7b 10 18                 u64 [sp + 0x18] = ra
   362: 7b 15 10                 u64 [sp + 0x10] = s0
   365: 7b 16 08                 u64 [sp + 0x8] = s1
   368: 64 85                    s0 = a1
   370: 7d 78                    a1 = i8 [a0]
   372: 33 06 01                 s1 = 0x1
   375: 59 08 37                 jump @49 if a1 >=s 0
      :                          @43
   378: 84 89 ff 00              a2 = a1 & 0xff
   382: 33 06 02                 s1 = 0x2
   385: 53 29 c0 00 2d           jump @49 if a2 <u 192
      :                          @44
   390: 33 06 03                 s1 = 0x3
   393: 53 29 e0 00 25           jump @49 if a2 <u 224
      :                          @45
   398: 33 06 04                 s1 = 0x4
   401: 53 29 f0 00 1d           jump @49 if a2 <u 240
      :                          @46
   406: 33 06 05                 s1 = 0x5
   409: 53 29 f8 00 15           jump @49 if a2 <u 248
      :                          @47
   414: 33 06 06                 s1 = 0x6
   417: 53 29 fc 00 0d           jump @49 if a2 <u 252
      :                          @48
   422: 88 98 fe 00              a1 = a2 <u 0xfe
   426: 9a 86 08                 s1 = 0x8 - a1
   429: 01                       fallthrough
      :                          @49
   430: ac 65 c5 00              jump @72 if s0 <u s1
      :                          @50
   434: 64 68                    a1 = s1
   436: 7b 17                    u64 [sp] = a0
   438: 50 10 08 e4 00           ra = 8, jump @75
      :                          @51 [@dyn 4]
   443: 82 17                    a0 = u64 [sp]
   445: aa 65 b6 00              jump @72 if s0 == s1
      :                          @52
   449: c8 67 07                 a0 = a0 + s1
   452: 7d 78                    a1 = i8 [a0]
   454: c9 65 0a                 a3 = s0 - s1
   457: 33 05 01                 s0 = 0x1
   460: 59 08 37                 jump @59 if a1 >=s 0
      :                          @53
   463: 84 89 ff 00              a2 = a1 & 0xff
   467: 33 05 02                 s0 = 0x2
   470: 53 29 c0 00 2d           jump @59 if a2 <u 192
      :                          @54
   475: 33 05 03                 s0 = 0x3
   478: 53 29 e0 00 25           jump @59 if a2 <u 224
      :                          @55
   483: 33 05 04                 s0 = 0x4
   486: 53 29 f0 00 1d           jump @59 if a2 <u 240
      :                          @56
   491: 33 05 05                 s0 = 0x5
   494: 53 29 f8 00 15           jump @59 if a2 <u 248
      :                          @57
   499: 33 05 06                 s0 = 0x6
   502: 53 29 fc 00 0d           jump @59 if a2 <u 252
      :                          @58
   507: 88 98 fe 00              a1 = a2 <u 0xfe
   511: 9a 85 08                 s0 = 0x8 - a1
   514: 01                       fallthrough
      :                          @59
   515: ac 5a 70                 jump @72 if a3 <u s0
      :                          @60
   518: 64 58                    a1 = s0
   520: 7b 1a                    u64 [sp] = a3
   522: 64 76                    s1 = a0
   524: 50 10 0a 8e 00           ra = 10, jump @75
      :                          @61 [@dyn 5]
   529: c8 65 07                 a0 = s0 + s1
   532: 82 16                    s1 = u64 [sp]
   534: ab 56 0a                 jump @63 if s1 != s0
      :                          @62
   537: 33 08                    a1 = 0
   539: 33 00 0c                 ra = 0xc
   542: 28 7c                    jump @75
      :                          @63
   544: 7d 79                    a2 = i8 [a0]
   546: c9 56 06                 s1 = s1 - s0
   549: 33 08 01                 a1 = 0x1
   552: 59 09 44                 jump @70 if a2 >=s 0
      :                          @64
   555: 84 99 ff 00              a2 = a2 & 0xff
   559: 33 0a c0 00              a3 = 0xc0
   563: 33 08 02                 a1 = 0x2
   566: ac a9 36                 jump @70 if a2 <u a3
      :                          @65
   569: 33 0a e0 00              a3 = 0xe0
   573: 33 08 03                 a1 = 0x3
   576: ac a9 2c                 jump @70 if a2 <u a3
      :                          @66
   579: 33 0a f0 00              a3 = 0xf0
   583: 33 08 04                 a1 = 0x4
   586: ac a9 22                 jump @70 if a2 <u a3
      :                          @67
   589: 33 0a f8 00              a3 = 0xf8
   593: 33 08 05                 a1 = 0x5
   596: ac a9 18                 jump @70 if a2 <u a3
      :                          @68
   599: 33 0a fc 00              a3 = 0xfc
   603: 33 08 06                 a1 = 0x6
   606: ac a9 0e                 jump @70 if a2 <u a3
      :                          @69
   609: 88 98 fe 00              a1 = a2 <u 0xfe
   613: 33 09 08                 a2 = 0x8
   616: c9 89 08                 a1 = a2 - a1
   619: 01                       fallthrough
      :                          @70
   620: ac 86 07                 jump @72 if s1 <u a1
      :                          @71
   623: 50 10 0c 2b              ra = 12, jump @75
      :                          @72 [@dyn 6]
   627: 82 10 18                 ra = u64 [sp + 0x18]
   630: 82 15 10                 s0 = u64 [sp + 0x10]
   633: 82 16 08                 s1 = u64 [sp + 0x8]
   636: 95 11 20                 sp = sp + 0x20
   639: 33 07 00 00 01           a0 = 0x10000
   644: 33 08                    a1 = 0
   646: 32 00                    ret
      :                          @73
   648: 33 07 00 00 01           a0 = 0x10000
   653: 33 08                    a1 = 0
   655: 32 00                    ret
      :                          @74 [export #2: 'on_transfer']
   657: 33 07 00 00 01           a0 = 0x10000
   662: 33 08                    a1 = 0
   664: 32 00                    ret
      :                          @75
   666: 51 08 9b 00              jump @96 if a1 == 0
      :                          @76
   670: 64 79                    a2 = a0
   672: 7c 77                    a0 = u8 [a0]
   674: 51 07 91 00              jump @95 if a0 == 0
      :                          @77
   678: 51 27 ff 00 90 00        jump @97 if a0 == 255
      :                          @78
   684: 6c 7a                    a3 = sext.b a0
   686: 57 0a 09                 jump @80 if a3 <s 0
      :                          @79
   689: 33 0a                    a3 = 0
   691: 33 08                    a1 = 0
   693: 28 73                    jump @94
      :                          @80
   695: 55 27 c0 00 0d           jump @82 if a0 >=u 192
      :                          @81
   700: 33 0a 01                 a3 = 0x1
   703: 33 0b 80                 a4 = 0xffffffffffffff80
   706: 28 4a                    jump @91
      :                          @82
   708: 55 27 e0 00 0e           jump @84 if a0 >=u 224
      :                          @83
   713: 33 0a 02                 a3 = 0x2
   716: 33 0b 40 ff              a4 = 0xffffffffffffff40
   720: 28 3c                    jump @91
      :                          @84
   722: 55 27 f0 00 0e           jump @86 if a0 >=u 240
      :                          @85
   727: 33 0a 03                 a3 = 0x3
   730: 33 0b 20 ff              a4 = 0xffffffffffffff20
   734: 28 2e                    jump @91
      :                          @86
   736: 55 27 f8 00 0e           jump @88 if a0 >=u 248
      :                          @87
   741: 33 0a 04                 a3 = 0x4
   744: 33 0b 10 ff              a4 = 0xffffffffffffff10
   748: 28 20                    jump @91
      :                          @88
   750: 55 27 fc 00 0e           jump @90 if a0 >=u 252
      :                          @89
   755: 33 0a 05                 a3 = 0x5
   758: 33 0b 08 ff              a4 = 0xffffffffffffff08
   762: 28 12                    jump @91
      :                          @90
   764: 88 7a fe 00              a3 = a0 <u 0xfe
   768: 33 0b 04 ff              a4 = 0xffffffffffffff04
   772: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
   776: 85 aa 07                 a3 = a3 ^ 0x7
   779: 01                       fallthrough
      :                          @91
   780: ae 8a 2b                 jump @98 if a3 >=u a1
      :                          @92
   783: 33 08                    a1 = 0
   785: c8 b7 07                 a0 = a0 + a4
   788: 64 ab                    a4 = a3
   790: 01                       fallthrough
      :                          @93
   791: c8 b9 0c                 a5 = a2 + a4
   794: 7c cc                    a5 = u8 [a5]
   796: 97 88 08                 a1 = a1 << 0x8
   799: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
   802: d4 c8 08                 a1 = a1 | a5
   805: 52 0b f2                 jump @93 if a4 != 0
      :                          @94
   808: 8a a9 03                 i32 a2 = a3 << 0x3
   811: cf 97 07                 a0 = a0 << a2
   814: c8 87 07                 a0 = a0 + a1
   817: 32 00                    ret
      :                          @95
   819: 32 00                    ret
      :                          @96
   821: 00                       trap
      :                          @97
   822: 00                       trap
      :                          @98
   823: 00                       trap
