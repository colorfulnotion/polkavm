// RO data = 464/464 bytes
// RW data = 8/65600 bytes
// Stack size = 65536 bytes
// RO data = [66, 79, 79, 84, 83, 84, 82, 65, 80, 32, 73, 78, 73, 84, 32, 116, 61, 32, 115, 61, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 17, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 82, 69, 84, 85, 82, 78, 32, 97, 99, 99, 32, 111, 117, 116, 112, 117, 116, 95, 98, 121, 116, 101, 115, 95, 97, 100, 100, 114, 101, 115, 115, 32, 32, 108, 101, 110, 32, 0, 0, 0, 56, 0, 1, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 88, 0, 1, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 112, 97, 114, 115, 101, 95, 97, 99, 99, 117, 109, 117, 108, 97, 116, 101, 95, 97, 114, 103, 115, 32, 115, 116, 97, 114, 116, 95, 97, 100, 100, 114, 101, 115, 115, 61, 32, 108, 101, 110, 103, 116, 104, 61, 116, 114, 97, 110, 115, 102, 101, 114, 0, 0, 0, 0, 120, 1, 1, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 156, 1, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0]
// RW data = [75, 89, 134, 56, 214, 197, 109, 52]
// Instructions = 1480
// Code size = 4374 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 ae 00 00 00           jump @18
      :                          @2
    10: 28 99 05                 jump @123
      :                          @3 [export #0: 'refine']
    13: 95 11 e0                 sp = sp + 0xffffffffffffffe0
    16: 7b 10 18                 u64 [sp + 0x18] = ra
    19: 7b 15 10                 u64 [sp + 0x10] = s0
    22: 7b 16 08                 u64 [sp + 0x8] = s1
    25: 64 86                    s1 = a1
    27: 64 78                    a1 = a0
    29: 33 09 04                 a2 = 0x4
    32: 33 07 00 00 01           a0 = 0x10000
    37: ac 96 7c                 jump @15 if s1 <u a2
      :                          @4
    40: 95 66 fc                 s1 = s1 + 0xfffffffffffffffc
    43: 51 06 76                 jump @15 if s1 == 0
      :                          @5
    46: 95 87 04                 a0 = a1 + 0x4
    49: 7d 78                    a1 = i8 [a0]
    51: 33 05 01                 s0 = 0x1
    54: 59 08 3a                 jump @13 if a1 >=s 0
      :                          @6
    57: 84 89 ff 00              a2 = a1 & 0xff
    61: 33 05 02                 s0 = 0x2
    64: 53 29 c0 00 2d           jump @12 if a2 <u 192
      :                          @7
    69: 33 05 03                 s0 = 0x3
    72: 53 29 e0 00 25           jump @12 if a2 <u 224
      :                          @8
    77: 33 05 04                 s0 = 0x4
    80: 53 29 f0 00 1d           jump @12 if a2 <u 240
      :                          @9
    85: 33 05 05                 s0 = 0x5
    88: 53 29 f8 00 15           jump @12 if a2 <u 248
      :                          @10
    93: 33 05 06                 s0 = 0x6
    96: 53 29 fc 00 0d           jump @12 if a2 <u 252
      :                          @11
   101: 88 98 fe 00              a1 = a2 <u 0xfe
   105: 9a 85 08                 s0 = 0x8 - a1
   108: 01                       fallthrough
      :                          @12
   109: ac 56 45                 jump @17 if s1 <u s0
      :                          @13
   112: 64 58                    a1 = s0
   114: 7b 17                    u64 [sp] = a0
   116: 50 10 02 04 10           ra = 2, jump @356
      :                          @14 [@dyn 1]
   121: 64 78                    a1 = a0
   123: e4 56 07                 a0 = maxu(s1, s0)
   126: c9 57 07                 a0 = a0 - s0
   129: d8 87 09                 a2 = a0 <u a1
   132: e4 87 07                 a0 = maxu(a0, a1)
   135: c9 87 07                 a0 = a0 - a1
   138: 88 77 20                 a0 = a0 <u 0x20
   141: d4 79 09                 a2 = a2 | a0
   144: 82 17                    a0 = u64 [sp]
   146: c8 75 05                 s0 = s0 + a0
   149: 94 98                    a1 = 0 if a2 != 0
   151: 33 07 00 00 01           a0 = 0x10000
   156: da 95 07                 a0 = s0 if a2 == 0
   159: 28 05                    jump @16
      :                          @15
   161: 33 08                    a1 = 0
   163: 01                       fallthrough
      :                          @16
   164: 82 10 18                 ra = u64 [sp + 0x18]
   167: 82 15 10                 s0 = u64 [sp + 0x10]
   170: 82 16 08                 s1 = u64 [sp + 0x8]
   173: 95 11 20                 sp = sp + 0x20
   176: 32 00                    ret
      :                          @17
   178: 00                       trap
      :                          @18 [export #1: 'accumulate']
   179: 95 11 b8 fe              sp = sp + 0xfffffffffffffeb8
   183: 7b 10 40 01              u64 [sp + 0x140] = ra
   187: 7b 15 38 01              u64 [sp + 0x138] = s0
   191: 7b 16 30 01              u64 [sp + 0x130] = s1
   195: 7b 17 28 01              u64 [sp + 0x128] = a0
   199: 7b 18 c0 00              u64 [sp + 0xc0] = a1
   203: 51 08 a7 02              jump @87 if a1 == 0
      :                          @19
   207: 7b 17 18                 u64 [sp + 0x18] = a0
   210: 7b 18 08                 u64 [sp + 0x8] = a1
   213: 49 11 10 ff ff fe        u64 [sp + 16] = 0xfffffffffffeffff
   219: 95 17 28 01              a0 = sp + 0x128
   223: 7b 17 d8 00              u64 [sp + 0xd8] = a0
   227: 33 07 3a                 a0 = 0x3a
   230: 7b 17 e0 00              u64 [sp + 0xe0] = a0
   234: 95 18 c0 00              a1 = sp + 0xc0
   238: 7b 18 e8 00              u64 [sp + 0xe8] = a1
   242: 7b 17 f0 00              u64 [sp + 0xf0] = a0
   246: 33 07 b0 01 01           a0 = 0x101b0
   251: 7b 17 38                 u64 [sp + 0x38] = a0
   254: 49 11 40 02              u64 [sp + 64] = 0x2
   258: 49 11 58                 u64 [sp + 88] = 0
   261: 95 18 d8 00              a1 = sp + 0xd8
   265: 7b 18 48                 u64 [sp + 0x48] = a1
   268: 49 11 50 02              u64 [sp + 80] = 0x2
   272: 95 17 08 01              a0 = sp + 0x108
   276: 95 18 38                 a1 = sp + 0x38
   279: 50 10 04 d2 06           ra = 4, jump @180
      :                          @20 [@dyn 2]
   284: 82 15 10 01              s0 = u64 [sp + 0x110]
   288: 82 1b 18 01              a4 = u64 [sp + 0x118]
   292: 82 16 08 01              s1 = u64 [sp + 0x108]
   296: 33 07 02                 a0 = 0x2
   299: 33 08                    a1 = 0
   301: 33 09                    a2 = 0
   303: 64 5a                    a3 = s0
   305: 33 00 06                 ra = 0x6
   308: 0a 64                    ecalli 100 // 'log'
   310: 01                       fallthrough
      :                          @21 [@dyn 3]
   311: 82 17 10                 a0 = u64 [sp + 0x10]
   314: c8 67 07                 a0 = a0 + s1
   317: 53 37 00 00 ff 27        jump @27 if a0 <u 4294901760
      :                          @22
   323: 33 07 30 00 03           a0 = 0x30030
   328: 95 77 00 00 01           a0 = a0 + 0x10000
   333: 01                       fallthrough
      :                          @23
   334: 82 78                    a1 = u64 [a0]
   336: c9 87 09                 a2 = a0 - a1
   339: ab 59 11                 jump @27 if a2 != s0
      :                          @24
   342: c9 68 09                 a2 = a1 - s1
   345: 01                       fallthrough
      :                          @25
   346: 82 7a                    a3 = u64 [a0]
   348: ab 8a f2                 jump @23 if a3 != a1
      :                          @26
   351: 7b 79                    u64 [a0] = a2
   353: 33 0b                    a4 = 0
   355: 01                       fallthrough
      :                          @27
   356: 82 17 18                 a0 = u64 [sp + 0x18]
   359: 7d 78                    a1 = i8 [a0]
   361: 33 05 01                 s0 = 0x1
   364: 59 08 37                 jump @34 if a1 >=s 0
      :                          @28
   367: 84 89 ff 00              a2 = a1 & 0xff
   371: 33 05 02                 s0 = 0x2
   374: 53 29 c0 00 2d           jump @34 if a2 <u 192
      :                          @29
   379: 33 05 03                 s0 = 0x3
   382: 53 29 e0 00 25           jump @34 if a2 <u 224
      :                          @30
   387: 33 05 04                 s0 = 0x4
   390: 53 29 f0 00 1d           jump @34 if a2 <u 240
      :                          @31
   395: 33 05 05                 s0 = 0x5
   398: 53 29 f8 00 15           jump @34 if a2 <u 248
      :                          @32
   403: 33 05 06                 s0 = 0x6
   406: 53 29 fc 00 0d           jump @34 if a2 <u 252
      :                          @33
   411: 88 98 fe 00              a1 = a2 <u 0xfe
   415: 9a 85 08                 s0 = 0x8 - a1
   418: 01                       fallthrough
      :                          @34
   419: 82 16 08                 s1 = u64 [sp + 0x8]
   422: ac 56 cc 01              jump @87 if s1 <u s0
      :                          @35
   426: 64 58                    a1 = s0
   428: 50 10 08 cc 0e           ra = 8, jump @356
      :                          @36 [@dyn 4]
   433: 82 18 18                 a1 = u64 [sp + 0x18]
   436: aa 56 be 01              jump @87 if s1 == s0
      :                          @37
   440: c8 85 0a                 a3 = s0 + a1
   443: 7d a8                    a1 = i8 [a3]
   445: c9 56 05                 s0 = s1 - s0
   448: 33 06 01                 s1 = 0x1
   451: 59 08 37                 jump @44 if a1 >=s 0
      :                          @38
   454: 84 89 ff 00              a2 = a1 & 0xff
   458: 33 06 02                 s1 = 0x2
   461: 53 29 c0 00 2d           jump @44 if a2 <u 192
      :                          @39
   466: 33 06 03                 s1 = 0x3
   469: 53 29 e0 00 25           jump @44 if a2 <u 224
      :                          @40
   474: 33 06 04                 s1 = 0x4
   477: 53 29 f0 00 1d           jump @44 if a2 <u 240
      :                          @41
   482: 33 06 05                 s1 = 0x5
   485: 53 29 f8 00 15           jump @44 if a2 <u 248
      :                          @42
   490: 33 06 06                 s1 = 0x6
   493: 53 29 fc 00 0d           jump @44 if a2 <u 252
      :                          @43
   498: 88 98 fe 00              a1 = a2 <u 0xfe
   502: 9a 86 08                 s1 = 0x8 - a1
   505: 01                       fallthrough
      :                          @44
   506: ac 65 78 01              jump @87 if s0 <u s1
      :                          @45
   510: 7b 17 08                 u64 [sp + 0x8] = a0
   513: 64 a7                    a0 = a3
   515: 64 68                    a1 = s1
   517: 7b 1a 18                 u64 [sp + 0x18] = a3
   520: 50 10 0a 70 0e           ra = 10, jump @356
      :                          @46 [@dyn 5]
   525: 82 19 18                 a2 = u64 [sp + 0x18]
   528: c8 69 09                 a2 = a2 + s1
   531: c9 65 0a                 a3 = s0 - s1
   534: 7b 17                    u64 [sp] = a0
   536: 7b 1a 18                 u64 [sp + 0x18] = a3
   539: ab 65 07                 jump @48 if s0 != s1
      :                          @47
   542: 33 06                    s1 = 0
   544: 28 42                    jump @56
      :                          @48
   546: 7d 97                    a0 = i8 [a2]
   548: 33 06 01                 s1 = 0x1
   551: 59 07 37                 jump @55 if a0 >=s 0
      :                          @49
   554: 84 77 ff 00              a0 = a0 & 0xff
   558: 33 06 02                 s1 = 0x2
   561: 53 27 c0 00 2d           jump @55 if a0 <u 192
      :                          @50
   566: 33 06 03                 s1 = 0x3
   569: 53 27 e0 00 25           jump @55 if a0 <u 224
      :                          @51
   574: 33 06 04                 s1 = 0x4
   577: 53 27 f0 00 1d           jump @55 if a0 <u 240
      :                          @52
   582: 33 06 05                 s1 = 0x5
   585: 53 27 f8 00 15           jump @55 if a0 <u 248
      :                          @53
   590: 33 06 06                 s1 = 0x6
   593: 53 27 fc 00 0d           jump @55 if a0 <u 252
      :                          @54
   598: 88 77 fe 00              a0 = a0 <u 0xfe
   602: 9a 76 08                 s1 = 0x8 - a0
   605: 01                       fallthrough
      :                          @55
   606: ac 6a 14 01              jump @87 if a3 <u s1
      :                          @56
   610: 64 97                    a0 = a2
   612: 64 68                    a1 = s1
   614: 64 95                    s0 = a2
   616: 50 10 0c 10 0e           ra = 12, jump @356
      :                          @57 [@dyn 6]
   621: 82 1a 08                 a3 = u64 [sp + 0x8]
   624: 51 07 02 01              jump @87 if a0 == 0
      :                          @58
   628: 82 17 18                 a0 = u64 [sp + 0x18]
   631: e4 67 07                 a0 = maxu(a0, s1)
   634: c9 67 07                 a0 = a0 - s1
   637: 53 17 60 f5 00           jump @87 if a0 <u 96
      :                          @59
   642: c8 56 08                 a1 = s1 + s0
   645: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   648: 95 87 60                 a0 = a1 + 0x60
   651: 7b 17 18                 u64 [sp + 0x18] = a0
   654: 51 06 4f                 jump @70 if s1 == 0
      :                          @60
   657: 7d 78                    a1 = i8 [a0]
   659: 33 05 01                 s0 = 0x1
   662: 59 08 37                 jump @67 if a1 >=s 0
      :                          @61
   665: 84 89 ff 00              a2 = a1 & 0xff
   669: 33 05 02                 s0 = 0x2
   672: 53 29 c0 00 2d           jump @67 if a2 <u 192
      :                          @62
   677: 33 05 03                 s0 = 0x3
   680: 53 29 e0 00 25           jump @67 if a2 <u 224
      :                          @63
   685: 33 05 04                 s0 = 0x4
   688: 53 29 f0 00 1d           jump @67 if a2 <u 240
      :                          @64
   693: 33 05 05                 s0 = 0x5
   696: 53 29 f8 00 15           jump @67 if a2 <u 248
      :                          @65
   701: 33 05 06                 s0 = 0x6
   704: 53 29 fc 00 0d           jump @67 if a2 <u 252
      :                          @66
   709: 88 98 fe 00              a1 = a2 <u 0xfe
   713: 9a 85 08                 s0 = 0x8 - a1
   716: 01                       fallthrough
      :                          @67
   717: ac 56 d3 02              jump @120 if s1 <u s0
      :                          @68
   721: 64 58                    a1 = s0
   723: 50 10 0e a5 0d           ra = 14, jump @356
      :                          @69 [@dyn 7]
   728: 82 1a 08                 a3 = u64 [sp + 0x8]
   731: 28 07                    jump @71
      :                          @70
   733: 33 05                    s0 = 0
   735: 33 07                    a0 = 0
   737: 01                       fallthrough
      :                          @71
   738: e4 56 08                 a1 = maxu(s1, s0)
   741: c9 58 08                 a1 = a1 - s0
   744: e4 78 08                 a1 = maxu(a1, a0)
   747: c9 78 08                 a1 = a1 - a0
   750: 33 09 20                 a2 = 0x20
   753: ac 98 81 00              jump @87 if a1 <u a2
      :                          @72
   757: 82 19 18                 a2 = u64 [sp + 0x18]
   760: c8 95 05                 s0 = s0 + a2
   763: c8 57 07                 a0 = a0 + s0
   766: 95 85 e0                 s0 = a1 + 0xffffffffffffffe0
   769: 95 77 20                 a0 = a0 + 0x20
   772: 7b 17 18                 u64 [sp + 0x18] = a0
   775: 51 05 4f                 jump @83 if s0 == 0
      :                          @73
   778: 7d 78                    a1 = i8 [a0]
   780: 33 06 01                 s1 = 0x1
   783: 59 08 37                 jump @80 if a1 >=s 0
      :                          @74
   786: 84 89 ff 00              a2 = a1 & 0xff
   790: 33 06 02                 s1 = 0x2
   793: 53 29 c0 00 2d           jump @80 if a2 <u 192
      :                          @75
   798: 33 06 03                 s1 = 0x3
   801: 53 29 e0 00 25           jump @80 if a2 <u 224
      :                          @76
   806: 33 06 04                 s1 = 0x4
   809: 53 29 f0 00 1d           jump @80 if a2 <u 240
      :                          @77
   814: 33 06 05                 s1 = 0x5
   817: 53 29 f8 00 15           jump @80 if a2 <u 248
      :                          @78
   822: 33 06 06                 s1 = 0x6
   825: 53 29 fc 00 0d           jump @80 if a2 <u 252
      :                          @79
   830: 88 98 fe 00              a1 = a2 <u 0xfe
   834: 9a 86 08                 s1 = 0x8 - a1
   837: 01                       fallthrough
      :                          @80
   838: ac 65 5b 02              jump @121 if s0 <u s1
      :                          @81
   842: 64 68                    a1 = s1
   844: 50 10 10 2c 0d           ra = 16, jump @356
      :                          @82 [@dyn 8]
   849: 82 1a 08                 a3 = u64 [sp + 0x8]
   852: 28 05                    jump @84
      :                          @83
   854: 33 06                    s1 = 0
   856: 01                       fallthrough
      :                          @84
   857: ae 56 19                 jump @87 if s1 >=u s0
      :                          @85
   860: 82 17 18                 a0 = u64 [sp + 0x18]
   863: c8 67 07                 a0 = a0 + s1
   866: 7c 78                    a1 = u8 [a0]
   868: 51 08 28                 jump @89 if a1 == 0
      :                          @86
   871: 49 11 08                 u64 [sp + 8] = 0
   874: 49 11 18                 u64 [sp + 24] = 0
   877: 82 19                    a2 = u64 [sp]
   879: 28 a5 00                 jump @102
      :                          @87
   882: 33 08                    a1 = 0
   884: 33 07 00 00 01           a0 = 0x10000
   889: 01                       fallthrough
      :                          @88
   890: 82 10 40 01              ra = u64 [sp + 0x140]
   894: 82 15 38 01              s0 = u64 [sp + 0x138]
   898: 82 16 30 01              s1 = u64 [sp + 0x130]
   902: 95 11 48 01              sp = sp + 0x148
   906: 32 00                    ret
      :                          @89
   908: e4 65 08                 a1 = maxu(s0, s1)
   911: c9 68 08                 a1 = a1 - s1
   914: 95 75 01                 s0 = a0 + 0x1
   917: 33 07 01                 a0 = 0x1
   920: e4 78 07                 a0 = maxu(a1, a0)
   923: 33 09 02                 a2 = 0x2
   926: 95 7b ff                 a4 = a0 + 0xffffffffffffffff
   929: ae 98 0b                 jump @91 if a1 >=u a2
      :                          @90
   932: 33 06                    s1 = 0
   934: 33 07                    a0 = 0
   936: 82 19                    a2 = u64 [sp]
   938: 28 57                    jump @101
      :                          @91
   940: 7d 57                    a0 = i8 [s0]
   942: 33 06 01                 s1 = 0x1
   945: 59 07 37                 jump @98 if a0 >=s 0
      :                          @92
   948: 84 77 ff 00              a0 = a0 & 0xff
   952: 33 06 02                 s1 = 0x2
   955: 53 27 c0 00 2d           jump @98 if a0 <u 192
      :                          @93
   960: 33 06 03                 s1 = 0x3
   963: 53 27 e0 00 25           jump @98 if a0 <u 224
      :                          @94
   968: 33 06 04                 s1 = 0x4
   971: 53 27 f0 00 1d           jump @98 if a0 <u 240
      :                          @95
   976: 33 06 05                 s1 = 0x5
   979: 53 27 f8 00 15           jump @98 if a0 <u 248
      :                          @96
   984: 33 06 06                 s1 = 0x6
   987: 53 27 fc 00 0d           jump @98 if a0 <u 252
      :                          @97
   992: 88 77 fe 00              a0 = a0 <u 0xfe
   996: 9a 76 08                 s1 = 0x8 - a0
   999: 01                       fallthrough
      :                          @98
  1000: 7b 1b 18                 u64 [sp + 0x18] = a4
  1003: ac 6b b7 01              jump @122 if a4 <u s1
      :                          @99
  1007: 64 57                    a0 = s0
  1009: 64 68                    a1 = s1
  1011: 50 10 12 85 0c           ra = 18, jump @356
      :                          @100 [@dyn 9]
  1016: 82 1a 08                 a3 = u64 [sp + 0x8]
  1019: 82 19                    a2 = u64 [sp]
  1021: 82 1b 18                 a4 = u64 [sp + 0x18]
  1024: 01                       fallthrough
      :                          @101
  1025: c8 65 05                 s0 = s0 + s1
  1028: 7b 15 18                 u64 [sp + 0x18] = s0
  1031: e4 6b 08                 a1 = maxu(a4, s1)
  1034: c9 68 08                 a1 = a1 - s1
  1037: e6 78 07                 a0 = minu(a1, a0)
  1040: 7b 17 08                 u64 [sp + 0x8] = a0
  1043: 01                       fallthrough
      :                          @102
  1044: 7a 1a 20                 u32 [sp + 0x20] = a3
  1047: 7a 19 24                 u32 [sp + 0x24] = a2
  1050: 95 17 20                 a0 = sp + 0x20
  1053: 7b 17 d8 00              u64 [sp + 0xd8] = a0
  1057: 33 07 5a                 a0 = 0x5a
  1060: 7b 17 e0 00              u64 [sp + 0xe0] = a0
  1064: 95 18 24                 a1 = sp + 0x24
  1067: 7b 18 e8 00              u64 [sp + 0xe8] = a1
  1071: 7b 17 f0 00              u64 [sp + 0xf0] = a0
  1075: 33 07 18 00 01           a0 = 0x10018
  1080: 7b 17 38                 u64 [sp + 0x38] = a0
  1083: 49 11 40 02              u64 [sp + 64] = 0x2
  1087: 49 11 58                 u64 [sp + 88] = 0
  1090: 95 17 d8 00              a0 = sp + 0xd8
  1094: 7b 17 48                 u64 [sp + 0x48] = a0
  1097: 49 11 50 02              u64 [sp + 80] = 0x2
  1101: 95 17 08 01              a0 = sp + 0x108
  1105: 95 18 38                 a1 = sp + 0x38
  1108: 50 10 14 95 03           ra = 20, jump @180
      :                          @103 [@dyn 10]
  1113: 82 16 10 01              s1 = u64 [sp + 0x110]
  1117: 82 1b 18 01              a4 = u64 [sp + 0x118]
  1121: 82 15 08 01              s0 = u64 [sp + 0x108]
  1125: 33 07 02                 a0 = 0x2
  1128: 33 08                    a1 = 0
  1130: 33 09                    a2 = 0
  1132: 64 6a                    a3 = s1
  1134: 33 00 16                 ra = 0x16
  1137: 0a 64                    ecalli 100 // 'log'
  1139: 01                       fallthrough
      :                          @104 [@dyn 11]
  1140: 82 17 10                 a0 = u64 [sp + 0x10]
  1143: c8 57 07                 a0 = a0 + s0
  1146: 53 37 00 00 ff 25        jump @110 if a0 <u 4294901760
      :                          @105
  1152: 33 07 30 00 03           a0 = 0x30030
  1157: 95 77 00 00 01           a0 = a0 + 0x10000
  1162: 01                       fallthrough
      :                          @106
  1163: 82 78                    a1 = u64 [a0]
  1165: c9 87 09                 a2 = a0 - a1
  1168: ab 69 0f                 jump @110 if a2 != s1
      :                          @107
  1171: c9 58 09                 a2 = a1 - s0
  1174: 01                       fallthrough
      :                          @108
  1175: 82 7a                    a3 = u64 [a0]
  1177: ab 8a f2                 jump @106 if a3 != a1
      :                          @109
  1180: 7b 79                    u64 [a0] = a2
  1182: 01                       fallthrough
      :                          @110
  1183: 82 17 18                 a0 = u64 [sp + 0x18]
  1186: 82 18 08                 a1 = u64 [sp + 0x8]
  1189: c8 78 08                 a1 = a1 + a0
  1192: 80 88 fc                 a1 = u32 [a1 + 0xfffffffffffffffc]
  1195: 33 09 64                 a2 = 0x64
  1198: 33 0a 64                 a3 = 0x64
  1201: 0a 09                    ecalli 9 // 'new'
  1203: 64 75                    s0 = a0
  1205: 7b 17 28                 u64 [sp + 0x28] = a0
  1208: 48 11 34                 u32 [sp + 52] = 0
  1211: 95 17 34                 a0 = sp + 0x34
  1214: 33 08 04                 a1 = 0x4
  1217: 95 19 28                 a2 = sp + 0x28
  1220: 33 0a 04                 a3 = 0x4
  1223: 0a 03                    ecalli 3 // 'write'
  1225: 95 17 38                 a0 = sp + 0x38
  1228: 33 09 80 00              a2 = 0x80
  1232: 33 08                    a1 = 0
  1234: 50 10 18 2d 06           ra = 24, jump @248
      :                          @111 [@dyn 12]
  1239: 33 08 20 a1 07           a1 = 0x7a120
  1244: 33 09 64                 a2 = 0x64
  1247: 95 1a 38                 a3 = sp + 0x38
  1250: 64 57                    a0 = s0
  1252: 0a 0b                    ecalli 11 // 'transfer'
  1254: 81 17 28                 a0 = i32 [sp + 0x28]
  1257: 3d 07 0c 00 03           u32 [0x3000c] = a0
  1262: 33 07 0c 00 03           a0 = 0x3000c
  1267: 7b 17 b8 00              u64 [sp + 0xb8] = a0
  1271: 49 21 28 01 20           u64 [sp + 296] = 0x20
  1276: 95 17 b8 00              a0 = sp + 0xb8
  1280: 7b 17 08 01              u64 [sp + 0x108] = a0
  1284: 33 07 3a                 a0 = 0x3a
  1287: 7b 17 10 01              u64 [sp + 0x110] = a0
  1291: 95 18 28 01              a1 = sp + 0x128
  1295: 7b 18 18 01              u64 [sp + 0x118] = a1
  1299: 7b 17 20 01              u64 [sp + 0x120] = a0
  1303: 33 07 60 00 01           a0 = 0x10060
  1308: 7b 17 d8 00              u64 [sp + 0xd8] = a0
  1312: 49 21 e0 00 02           u64 [sp + 224] = 0x2
  1317: 49 21 f8 00              u64 [sp + 248] = 0
  1321: 95 18 08 01              a1 = sp + 0x108
  1325: 7b 18 e8 00              u64 [sp + 0xe8] = a1
  1329: 49 21 f0 00 02           u64 [sp + 240] = 0x2
  1334: 95 17 c0 00              a0 = sp + 0xc0
  1338: 95 18 d8 00              a1 = sp + 0xd8
  1342: 50 10 1a ab 02           ra = 26, jump @180
      :                          @112 [@dyn 13]
  1347: 82 15 c8 00              s0 = u64 [sp + 0xc8]
  1351: 82 1b d0 00              a4 = u64 [sp + 0xd0]
  1355: 82 16 c0 00              s1 = u64 [sp + 0xc0]
  1359: 33 07 02                 a0 = 0x2
  1362: 33 08                    a1 = 0
  1364: 33 09                    a2 = 0
  1366: 64 5a                    a3 = s0
  1368: 33 00 1c                 ra = 0x1c
  1371: 0a 64                    ecalli 100 // 'log'
  1373: 01                       fallthrough
      :                          @113 [@dyn 14]
  1374: 82 17 10                 a0 = u64 [sp + 0x10]
  1377: c8 67 07                 a0 = a0 + s1
  1380: 53 37 00 00 ff 31        jump @119 if a0 <u 4294901760
      :                          @114
  1386: 33 07 30 00 03           a0 = 0x30030
  1391: 95 77 00 00 01           a0 = a0 + 0x10000
  1396: 01                       fallthrough
      :                          @115
  1397: 82 78                    a1 = u64 [a0]
  1399: c9 87 09                 a2 = a0 - a1
  1402: ab 59 1b                 jump @119 if a2 != s0
      :                          @116
  1405: c9 68 09                 a2 = a1 - s1
  1408: 01                       fallthrough
      :                          @117
  1409: 82 7a                    a3 = u64 [a0]
  1411: ab 8a f2                 jump @115 if a3 != a1
      :                          @118
  1414: 7b 79                    u64 [a0] = a2
  1416: 33 0b                    a4 = 0
  1418: 82 17 b8 00              a0 = u64 [sp + 0xb8]
  1422: 82 18 28 01              a1 = u64 [sp + 0x128]
  1426: 28 e8 fd                 jump @88
      :                          @119
  1429: 82 17 b8 00              a0 = u64 [sp + 0xb8]
  1433: 82 18 28 01              a1 = u64 [sp + 0x128]
  1437: 28 dd fd                 jump @88
      :                          @120
  1440: 00                       trap
      :                          @121
  1441: 00                       trap
      :                          @122
  1442: 00                       trap
      :                          @123 [export #2: 'on_transfer']
  1443: 33 07 00 00 01           a0 = 0x10000
  1448: 33 08                    a1 = 0
  1450: 32 00                    ret
      :                          @124
  1452: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1455: 7b 10 40                 u64 [sp + 0x40] = ra
  1458: 7b 15 38                 u64 [sp + 0x38] = s0
  1461: 7b 16 30                 u64 [sp + 0x30] = s1
  1464: c8 89 09                 a2 = a2 + a1
  1467: ac 89 52                 jump @132 if a2 <u a1
      :                          @125
  1470: 64 75                    s0 = a0
  1472: 82 77                    a0 = u64 [a0]
  1474: 97 78 01                 a1 = a0 << 0x1
  1477: 33 0a 08                 a3 = 0x8
  1480: e4 a9 09                 a2 = maxu(a2, a3)
  1483: e4 98 06                 s1 = maxu(a1, a2)
  1486: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1489: 98 88 3f                 a1 = a1 >> 0x3f
  1492: 51 07 12                 jump @127 if a0 == 0
      :                          @126
  1495: 82 59 08                 a2 = u64 [s0 + 0x8]
  1498: 7b 19 18                 u64 [sp + 0x18] = a2
  1501: 49 11 20 01              u64 [sp + 32] = 0x1
  1505: 7b 17 28                 u64 [sp + 0x28] = a0
  1508: 28 06                    jump @128
      :                          @127
  1510: 49 11 20                 u64 [sp + 32] = 0
  1513: 01                       fallthrough
      :                          @128
  1514: 64 17                    a0 = sp
  1516: 95 1a 18                 a3 = sp + 0x18
  1519: 64 69                    a2 = s1
  1521: 50 10 1e 32              ra = 30, jump @136
      :                          @129 [@dyn 15]
  1525: 82 18                    a1 = u64 [sp]
  1527: 82 17 08                 a0 = u64 [sp + 0x8]
  1530: 51 08 14                 jump @133 if a1 == 0
      :                          @130
  1533: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1543: aa 87 0d                 jump @134 if a0 == a1
      :                          @131
  1546: 52 07 18                 jump @135 if a0 != 0
      :                          @132
  1549: 00                       trap
      :                          @133
  1550: 7b 57 08                 u64 [s0 + 0x8] = a0
  1553: 7b 56                    u64 [s0] = s1
  1555: 01                       fallthrough
      :                          @134
  1556: 82 10 40                 ra = u64 [sp + 0x40]
  1559: 82 15 38                 s0 = u64 [sp + 0x38]
  1562: 82 16 30                 s1 = u64 [sp + 0x30]
  1565: 95 11 48                 sp = sp + 0x48
  1568: 32 00                    ret
      :                          @135
  1570: 00                       trap
      :                          @136
  1571: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  1574: 7b 10 30                 u64 [sp + 0x30] = ra
  1577: 7b 15 28                 u64 [sp + 0x28] = s0
  1580: 7b 16 20                 u64 [sp + 0x20] = s1
  1583: 64 95                    s0 = a2
  1585: 64 72                    t0 = a0
  1587: 51 08 79                 jump @146 if a1 == 0
      :                          @137
  1590: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1593: 51 07 7c                 jump @147 if a0 == 0
      :                          @138
  1596: 82 a9 10                 a2 = u64 [a3 + 0x10]
  1599: 51 09 aa 00              jump @154 if a2 == 0
      :                          @139
  1603: 82 a8                    a1 = u64 [a3]
  1605: 33 06 30 00 03           s1 = 0x30030
  1610: 33 03 00 00 01           t1 = 0x10000
  1615: c8 36 06                 s1 = s1 + t1
  1618: 01                       fallthrough
      :                          @140
  1619: 82 6a                    a3 = u64 [s1]
  1621: c8 5a 07                 a0 = a3 + s0
  1624: ac a7 cf 00              jump @160 if a0 <u a3
      :                          @141
  1628: 95 7b 01                 a4 = a0 + 0x1
  1631: 88 bc 01                 a5 = a4 <u 0x1
  1634: d8 b3 0b                 a4 = t1 <u a4
  1637: d4 cb 0b                 a4 = a4 | a5
  1640: 52 0b bf 00              jump @160 if a4 != 0
      :                          @142
  1644: 82 6b                    a4 = u64 [s1]
  1646: ab ab e5                 jump @140 if a4 != a3
      :                          @143
  1649: 7b 67                    u64 [s1] = a0
  1651: 33 0c                    a5 = 0
  1653: 7b 12 18                 u64 [sp + 0x18] = t0
  1656: 33 0a 30 00 03           a3 = 0x30030
  1661: 33 0b 00 00 01           a4 = 0x10000
  1666: 7b 1a                    u64 [sp] = a3
  1668: c8 ba 0a                 a3 = a3 + a4
  1671: c9 7a 07                 a0 = a3 - a0
  1674: 7b 17 10                 u64 [sp + 0x10] = a0
  1677: 7b 18 08                 u64 [sp + 0x8] = a1
  1680: 64 96                    s1 = a2
  1682: 50 10 20 bb 03           ra = 32, jump @230
      :                          @144 [@dyn 16]
  1687: 54 36 00 00 01 98 00     jump @161 if s1 <=u 65536
      :                          @145
  1694: 82 12 18                 t0 = u64 [sp + 0x18]
  1697: 82 18 10                 a1 = u64 [sp + 0x10]
  1700: 33 07                    a0 = 0
  1702: 7b 28 08                 u64 [t0 + 0x8] = a1
  1705: 28 b5 00                 jump @167
      :                          @146
  1708: 49 12 08                 u64 [t0 + 8] = 0
  1711: 33 07 01                 a0 = 0x1
  1714: 28 ac 00                 jump @167
      :                          @147
  1717: 33 09 30 00 03           a2 = 0x30030
  1722: 33 07 00 00 01           a0 = 0x10000
  1727: c8 79 09                 a2 = a2 + a0
  1730: 01                       fallthrough
      :                          @148
  1731: 82 9a                    a3 = u64 [a2]
  1733: c8 5a 08                 a1 = a3 + s0
  1736: ac a8 5f                 jump @160 if a1 <u a3
      :                          @149
  1739: 95 8b 01                 a4 = a1 + 0x1
  1742: 88 bc 01                 a5 = a4 <u 0x1
  1745: d8 b7 0b                 a4 = a0 <u a4
  1748: d4 cb 0b                 a4 = a4 | a5
  1751: 52 0b 50                 jump @160 if a4 != 0
      :                          @150
  1754: 82 9b                    a4 = u64 [a2]
  1756: ab ab e7                 jump @148 if a4 != a3
      :                          @151
  1759: 7b 98                    u64 [a2] = a1
  1761: 33 0c                    a5 = 0
  1763: 01                       fallthrough
      :                          @152
  1764: ab ab df                 jump @148 if a4 != a3
      :                          @153
  1767: 28 31                    jump @159
      :                          @154
  1769: 33 09 30 00 03           a2 = 0x30030
  1774: 33 07 00 00 01           a0 = 0x10000
  1779: c8 79 09                 a2 = a2 + a0
  1782: 01                       fallthrough
      :                          @155
  1783: 82 9a                    a3 = u64 [a2]
  1785: c8 5a 08                 a1 = a3 + s0
  1788: ac a8 2b                 jump @160 if a1 <u a3
      :                          @156
  1791: 95 8b 01                 a4 = a1 + 0x1
  1794: 88 bc 01                 a5 = a4 <u 0x1
  1797: d8 b7 0b                 a4 = a0 <u a4
  1800: d4 cb 0b                 a4 = a4 | a5
  1803: 52 0b 1c                 jump @160 if a4 != 0
      :                          @157
  1806: 82 9b                    a4 = u64 [a2]
  1808: ab ab e7                 jump @155 if a4 != a3
      :                          @158
  1811: 7b 98                    u64 [a2] = a1
  1813: 33 0c                    a5 = 0
  1815: 01                       fallthrough
      :                          @159
  1816: 33 07 30 00 04           a0 = 0x40030
  1821: c9 87 08                 a1 = a0 - a1
  1824: 33 07                    a0 = 0
  1826: 7b 28 08                 u64 [t0 + 0x8] = a1
  1829: 28 39                    jump @167
      :                          @160
  1831: 33 07 01                 a0 = 0x1
  1834: 7b 27 08                 u64 [t0 + 0x8] = a0
  1837: 28 31                    jump @167
      :                          @161
  1839: 64 6c                    a5 = s1
  1841: 82 17                    a0 = u64 [sp]
  1843: 95 77 00 00 01           a0 = a0 + 0x10000
  1848: 82 12 18                 t0 = u64 [sp + 0x18]
  1851: 82 16 08                 s1 = u64 [sp + 0x8]
  1854: 01                       fallthrough
      :                          @162
  1855: 82 78                    a1 = u64 [a0]
  1857: c9 87 09                 a2 = a0 - a1
  1860: ab 69 11                 jump @166 if a2 != s1
      :                          @163
  1863: c9 c8 09                 a2 = a1 - a5
  1866: 01                       fallthrough
      :                          @164
  1867: 82 7a                    a3 = u64 [a0]
  1869: ab 8a f2                 jump @162 if a3 != a1
      :                          @165
  1872: 7b 79                    u64 [a0] = a2
  1874: 33 0b                    a4 = 0
  1876: 01                       fallthrough
      :                          @166
  1877: 82 18 10                 a1 = u64 [sp + 0x10]
  1880: 33 07                    a0 = 0
  1882: 7b 28 08                 u64 [t0 + 0x8] = a1
  1885: 01                       fallthrough
      :                          @167
  1886: 7b 25 10                 u64 [t0 + 0x10] = s0
  1889: 7b 27                    u64 [t0] = a0
  1891: 82 10 30                 ra = u64 [sp + 0x30]
  1894: 82 15 28                 s0 = u64 [sp + 0x28]
  1897: 82 16 20                 s1 = u64 [sp + 0x20]
  1900: 95 11 38                 sp = sp + 0x38
  1903: 32 00                    ret
      :                          @168
  1905: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1908: 7b 10 40                 u64 [sp + 0x40] = ra
  1911: 7b 15 38                 u64 [sp + 0x38] = s0
  1914: 7b 16 30                 u64 [sp + 0x30] = s1
  1917: 95 88 01                 a1 = a1 + 0x1
  1920: 51 08 53                 jump @176 if a1 == 0
      :                          @169
  1923: 64 75                    s0 = a0
  1925: 82 77                    a0 = u64 [a0]
  1927: 97 79 01                 a2 = a0 << 0x1
  1930: 33 0a 08                 a3 = 0x8
  1933: e4 a8 08                 a1 = maxu(a1, a3)
  1936: e4 89 06                 s1 = maxu(a2, a1)
  1939: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1942: 98 88 3f                 a1 = a1 >> 0x3f
  1945: 51 07 12                 jump @171 if a0 == 0
      :                          @170
  1948: 82 59 08                 a2 = u64 [s0 + 0x8]
  1951: 7b 19 18                 u64 [sp + 0x18] = a2
  1954: 49 11 20 01              u64 [sp + 32] = 0x1
  1958: 7b 17 28                 u64 [sp + 0x28] = a0
  1961: 28 06                    jump @172
      :                          @171
  1963: 49 11 20                 u64 [sp + 32] = 0
  1966: 01                       fallthrough
      :                          @172
  1967: 64 17                    a0 = sp
  1969: 95 1a 18                 a3 = sp + 0x18
  1972: 64 69                    a2 = s1
  1974: 50 10 22 6d fe           ra = 34, jump @136
      :                          @173 [@dyn 17]
  1979: 82 18                    a1 = u64 [sp]
  1981: 82 17 08                 a0 = u64 [sp + 0x8]
  1984: 51 08 14                 jump @177 if a1 == 0
      :                          @174
  1987: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1997: aa 87 0d                 jump @178 if a0 == a1
      :                          @175
  2000: 52 07 18                 jump @179 if a0 != 0
      :                          @176
  2003: 00                       trap
      :                          @177
  2004: 7b 57 08                 u64 [s0 + 0x8] = a0
  2007: 7b 56                    u64 [s0] = s1
  2009: 01                       fallthrough
      :                          @178
  2010: 82 10 40                 ra = u64 [sp + 0x40]
  2013: 82 15 38                 s0 = u64 [sp + 0x38]
  2016: 82 16 30                 s1 = u64 [sp + 0x30]
  2019: 95 11 48                 sp = sp + 0x48
  2022: 32 00                    ret
      :                          @179
  2024: 00                       trap
      :                          @180
  2025: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  2028: 7b 10 30                 u64 [sp + 0x30] = ra
  2031: 7b 15 28                 u64 [sp + 0x28] = s0
  2034: 7b 16 20                 u64 [sp + 0x20] = s1
  2037: 82 8a 08                 a3 = u64 [a1 + 0x8]
  2040: 64 75                    s0 = a0
  2042: 51 0a 35                 jump @185 if a3 == 0
      :                          @181
  2045: 82 89                    a2 = u64 [a1]
  2047: 33 07                    a0 = 0
  2049: 95 9b 08                 a4 = a2 + 0x8
  2052: 01                       fallthrough
      :                          @182
  2053: 82 bc                    a5 = u64 [a4]
  2055: c8 c7 07                 a0 = a0 + a5
  2058: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  2061: 95 bb 10                 a4 = a4 + 0x10
  2064: 52 0a f5                 jump @182 if a3 != 0
      :                          @183
  2067: 82 8a 18                 a3 = u64 [a1 + 0x18]
  2070: 51 0a 24                 jump @187 if a3 == 0
      :                          @184
  2073: 82 99 08                 a2 = u64 [a2 + 0x8]
  2076: 8e 99                    a2 = a2 >u 0
  2078: 88 7a 10                 a3 = a0 <u 0x10
  2081: 85 aa 01                 a3 = a3 ^ 0x1
  2084: d4 a9 09                 a2 = a2 | a3
  2087: 89 7a                    a3 = a0 <s 0
  2089: e0 a9 09                 a2 = a2 & ~a3
  2092: 52 09 0a                 jump @186 if a2 != 0
      :                          @185
  2095: 33 07                    a0 = 0
  2097: 33 09 01                 a2 = 0x1
  2100: 28 4a                    jump @195
      :                          @186
  2102: 97 77 01                 a0 = a0 << 0x1
  2105: 01                       fallthrough
      :                          @187
  2106: 51 07 40                 jump @194 if a0 == 0
      :                          @188
  2109: 57 07 73                 jump @200 if a0 <s 0
      :                          @189
  2112: 64 52                    t0 = s0
  2114: 33 0b 30 00 03           a4 = 0x30030
  2119: 33 09 00 00 01           a2 = 0x10000
  2124: c8 9b 0b                 a4 = a4 + a2
  2127: 01                       fallthrough
      :                          @190
  2128: 82 bc                    a5 = u64 [a4]
  2130: c8 7c 0a                 a3 = a5 + a0
  2133: ac ca 59                 jump @198 if a3 <u a5
      :                          @191
  2136: 95 a5 01                 s0 = a3 + 0x1
  2139: 88 56 01                 s1 = s0 <u 0x1
  2142: d8 59 05                 s0 = a2 <u s0
  2145: d4 65 05                 s0 = s0 | s1
  2148: 52 05 4a                 jump @198 if s0 != 0
      :                          @192
  2151: 82 b6                    s1 = u64 [a4]
  2153: ab c6 e7                 jump @190 if s1 != a5
      :                          @193
  2156: 7b ba                    u64 [a4] = a3
  2158: 33 09 30 00 04           a2 = 0x40030
  2163: c9 a9 09                 a2 = a2 - a3
  2166: 64 25                    s0 = t0
  2168: 28 06                    jump @195
      :                          @194
  2170: 33 09 01                 a2 = 0x1
  2173: 01                       fallthrough
      :                          @195
  2174: 7b 17                    u64 [sp] = a0
  2176: 7b 19 08                 u64 [sp + 0x8] = a2
  2179: 49 11 10                 u64 [sp + 16] = 0
  2182: 64 17                    a0 = sp
  2184: 50 10 24 08 06           ra = 36, jump @317
      :                          @196 [@dyn 18]
  2189: 52 07 22                 jump @199 if a0 != 0
      :                          @197
  2192: 82 17 10                 a0 = u64 [sp + 0x10]
  2195: 82 18 08                 a1 = u64 [sp + 0x8]
  2198: 82 19                    a2 = u64 [sp]
  2200: 7b 57 10                 u64 [s0 + 0x10] = a0
  2203: 7b 58 08                 u64 [s0 + 0x8] = a1
  2206: 7b 59                    u64 [s0] = a2
  2208: 82 10 30                 ra = u64 [sp + 0x30]
  2211: 82 15 28                 s0 = u64 [sp + 0x28]
  2214: 82 16 20                 s1 = u64 [sp + 0x20]
  2217: 95 11 38                 sp = sp + 0x38
  2220: 32 00                    ret
      :                          @198
  2222: 00                       trap
      :                          @199
  2223: 00                       trap
      :                          @200
  2224: 00                       trap
      :                          @201 [@dyn 19]
  2225: 82 72                    t0 = u64 [a0]
  2227: 33 09 00 00 ff           a2 = 0xffffffffffff0000
  2232: 95 2a ff ff fe           a3 = t0 + 0xfffffffffffeffff
  2237: ac 9a 28                 jump @207 if a3 <u a2
      :                          @202
  2240: 82 77 08                 a0 = u64 [a0 + 0x8]
  2243: 33 09 30 00 03           a2 = 0x30030
  2248: 95 99 00 00 01           a2 = a2 + 0x10000
  2253: 01                       fallthrough
      :                          @203
  2254: 82 9a                    a3 = u64 [a2]
  2256: c9 a9 0b                 a4 = a2 - a3
  2259: ab 7b 12                 jump @207 if a4 != a0
      :                          @204
  2262: c9 2a 0b                 a4 = a3 - t0
  2265: 01                       fallthrough
      :                          @205
  2266: 82 9c                    a5 = u64 [a2]
  2268: ab ac f2                 jump @203 if a5 != a3
      :                          @206
  2271: 7b 9b                    u64 [a2] = a4
  2273: 33 08                    a1 = 0
  2275: 32 00                    ret
      :                          @207
  2277: 32 00                    ret
      :                          @208 [@dyn 20]
  2279: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  2282: 7b 10 18                 u64 [sp + 0x18] = ra
  2285: 7b 15 10                 u64 [sp + 0x10] = s0
  2288: 7b 16 08                 u64 [sp + 0x8] = s1
  2291: 64 75                    s0 = a0
  2293: 82 7a 10                 a3 = u64 [a0 + 0x10]
  2296: 82 77                    a0 = u64 [a0]
  2298: c9 a7 07                 a0 = a0 - a3
  2301: 64 96                    s1 = a2
  2303: ac 97 2a                 jump @211 if a0 <u a2
      :                          @209
  2306: 7b 1a                    u64 [sp] = a3
  2308: 82 57 08                 a0 = u64 [s0 + 0x8]
  2311: c8 a7 07                 a0 = a0 + a3
  2314: 64 69                    a2 = s1
  2316: 50 10 2a 41 01           ra = 42, jump @230
      :                          @210 [@dyn 21]
  2321: 82 17                    a0 = u64 [sp]
  2323: c8 76 06                 s1 = s1 + a0
  2326: 7b 56 10                 u64 [s0 + 0x10] = s1
  2329: 33 07                    a0 = 0
  2331: 82 10 18                 ra = u64 [sp + 0x18]
  2334: 82 15 10                 s0 = u64 [sp + 0x10]
  2337: 82 16 08                 s1 = u64 [sp + 0x8]
  2340: 95 11 20                 sp = sp + 0x20
  2343: 32 00                    ret
      :                          @211
  2345: 64 57                    a0 = s0
  2347: 7b 18                    u64 [sp] = a1
  2349: 64 a8                    a1 = a3
  2351: 64 69                    a2 = s1
  2353: 50 10 2c 7b fc           ra = 44, jump @124
      :                          @212 [@dyn 22]
  2358: 82 18                    a1 = u64 [sp]
  2360: 82 5a 10                 a3 = u64 [s0 + 0x10]
  2363: 28 c7                    jump @209
      :                          @213 [@dyn 23]
  2365: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  2368: 7b 10 20                 u64 [sp + 0x20] = ra
  2371: 7b 15 18                 u64 [sp + 0x18] = s0
  2374: 7b 16 10                 u64 [sp + 0x10] = s1
  2377: 64 86                    s1 = a1
  2379: 83 88                    i32 a1 = a1 + 0
  2381: 33 09 80 00              a2 = 0x80
  2385: 64 7a                    a3 = a0
  2387: ae 98 2b                 jump @218 if a1 >=u a2
      :                          @214
  2390: 82 a8 10                 a1 = u64 [a3 + 0x10]
  2393: 82 a7                    a0 = u64 [a3]
  2395: ab 78 12                 jump @217 if a1 != a0
      :                          @215
  2398: 64 a7                    a0 = a3
  2400: 64 a5                    s0 = a3
  2402: 50 10 30 0f fe           ra = 48, jump @168
      :                          @216 [@dyn 24]
  2407: 64 5a                    a3 = s0
  2409: 82 58 10                 a1 = u64 [s0 + 0x10]
  2412: 01                       fallthrough
      :                          @217
  2413: 82 a7 08                 a0 = u64 [a3 + 0x8]
  2416: c8 87 07                 a0 = a0 + a1
  2419: 78 76                    u8 [a0] = s1
  2421: 95 88 01                 a1 = a1 + 0x1
  2424: 7b a8 10                 u64 [a3 + 0x10] = a1
  2427: 28 ab 00                 jump @226
      :                          @218
  2430: 8b 67 0b                 i32 a0 = s1 >> 0xb
  2433: 48 11 0c                 u32 [sp + 12] = 0
  2436: 52 07 1c                 jump @220 if a0 != 0
      :                          @219
  2439: 98 67 06                 a0 = s1 >> 0x6
  2442: 86 77 c0 00              a0 = a0 | 0xc0
  2446: 78 17 0c                 u8 [sp + 0xc] = a0
  2449: 84 67 3f                 a0 = s1 & 0x3f
  2452: 86 77 80 00              a0 = a0 | 0x80
  2456: 78 17 0d                 u8 [sp + 0xd] = a0
  2459: 33 06 02                 s1 = 0x2
  2462: 28 63                    jump @223
      :                          @220
  2464: 8b 67 10                 i32 a0 = s1 >> 0x10
  2467: 52 07 29                 jump @222 if a0 != 0
      :                          @221
  2470: 98 67 0c                 a0 = s1 >> 0xc
  2473: 86 77 e0 00              a0 = a0 | 0xe0
  2477: 78 17 0c                 u8 [sp + 0xc] = a0
  2480: 97 67 34                 a0 = s1 << 0x34
  2483: 98 77 3a                 a0 = a0 >> 0x3a
  2486: 95 77 80 00              a0 = a0 + 0x80
  2490: 78 17 0d                 u8 [sp + 0xd] = a0
  2493: 84 67 3f                 a0 = s1 & 0x3f
  2496: 86 77 80 00              a0 = a0 | 0x80
  2500: 78 17 0e                 u8 [sp + 0xe] = a0
  2503: 33 06 03                 s1 = 0x3
  2506: 28 37                    jump @223
      :                          @222
  2508: 97 67 2b                 a0 = s1 << 0x2b
  2511: 98 77 3d                 a0 = a0 >> 0x3d
  2514: 95 77 f0 00              a0 = a0 + 0xf0
  2518: 78 17 0c                 u8 [sp + 0xc] = a0
  2521: 97 67 2e                 a0 = s1 << 0x2e
  2524: 98 77 3a                 a0 = a0 >> 0x3a
  2527: 95 77 80 00              a0 = a0 + 0x80
  2531: 78 17 0d                 u8 [sp + 0xd] = a0
  2534: 97 67 34                 a0 = s1 << 0x34
  2537: 98 77 3a                 a0 = a0 >> 0x3a
  2540: 95 77 80 00              a0 = a0 + 0x80
  2544: 78 17 0e                 u8 [sp + 0xe] = a0
  2547: 84 67 3f                 a0 = s1 & 0x3f
  2550: 86 77 80 00              a0 = a0 | 0x80
  2554: 78 17 0f                 u8 [sp + 0xf] = a0
  2557: 33 06 04                 s1 = 0x4
  2560: 01                       fallthrough
      :                          @223
  2561: 82 a5 10                 s0 = u64 [a3 + 0x10]
  2564: 82 a7                    a0 = u64 [a3]
  2566: c9 57 07                 a0 = a0 - s0
  2569: ac 67 2d                 jump @227 if a0 <u s1
      :                          @224
  2572: 7b 1a                    u64 [sp] = a3
  2574: 82 a7 08                 a0 = u64 [a3 + 0x8]
  2577: c8 57 07                 a0 = a0 + s0
  2580: 95 18 0c                 a1 = sp + 0xc
  2583: 64 69                    a2 = s1
  2585: 50 10 32 34              ra = 50, jump @230
      :                          @225 [@dyn 25]
  2589: c8 56 06                 s1 = s1 + s0
  2592: 82 17                    a0 = u64 [sp]
  2594: 7b 76 10                 u64 [a0 + 0x10] = s1
  2597: 01                       fallthrough
      :                          @226
  2598: 33 07                    a0 = 0
  2600: 82 10 20                 ra = u64 [sp + 0x20]
  2603: 82 15 18                 s0 = u64 [sp + 0x18]
  2606: 82 16 10                 s1 = u64 [sp + 0x10]
  2609: 95 11 28                 sp = sp + 0x28
  2612: 32 00                    ret
      :                          @227
  2614: 64 a7                    a0 = a3
  2616: 64 58                    a1 = s0
  2618: 64 69                    a2 = s1
  2620: 64 a5                    s0 = a3
  2622: 50 10 34 6e fb           ra = 52, jump @124
      :                          @228 [@dyn 26]
  2627: 64 5a                    a3 = s0
  2629: 82 55 10                 s0 = u64 [s0 + 0x10]
  2632: 28 c4                    jump @224
      :                          @229 [@dyn 27]
  2634: 28 46 04                 jump @317
      :                          @230
  2637: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  2640: 7b 10 18                 u64 [sp + 0x18] = ra
  2643: 7b 15 10                 u64 [sp + 0x10] = s0
  2646: 7b 16 08                 u64 [sp + 0x8] = s1
  2649: 53 19 10 64              jump @239 if a2 <u 16
      :                          @231
  2653: 8d 7a                    i32 a3 = -a0
  2655: 84 a2 07                 t0 = a3 & 0x7
  2658: c8 27 0b                 a4 = a0 + t0
  2661: 51 02 15                 jump @234 if t0 == 0
      :                          @232
  2664: 64 8c                    a5 = a1
  2666: 64 75                    s0 = a0
  2668: 01                       fallthrough
      :                          @233
  2669: 7c ca                    a3 = u8 [a5]
  2671: 78 5a                    u8 [s0] = a3
  2673: 95 55 01                 s0 = s0 + 0x1
  2676: 95 cc 01                 a5 = a5 + 0x1
  2679: ac b5 f6                 jump @233 if s0 <u a4
      :                          @234
  2682: c8 28 03                 t1 = a1 + t0
  2685: c9 29 02                 t0 = a2 - t0
  2688: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  2691: 84 38 07                 a1 = t1 & 0x7
  2694: c8 4b 0a                 a3 = a4 + t2
  2697: 51 08 3b                 jump @241 if a1 == 0
      :                          @235
  2700: 58 04 4b                 jump @244 if t2 <=s 0
      :                          @236
  2703: 97 38 03                 a1 = t1 << 0x3
  2706: 84 80 38                 ra = a1 & 0x38
  2709: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  2712: 82 c5                    s0 = u64 [a5]
  2714: 8d 88                    i32 a1 = -a1
  2716: 84 88 38                 a1 = a1 & 0x38
  2719: 95 cc 08                 a5 = a5 + 0x8
  2722: 01                       fallthrough
      :                          @237
  2723: 82 c6                    s1 = u64 [a5]
  2725: d0 05 05                 s0 = s0 >> ra
  2728: cf 86 09                 a2 = s1 << a1
  2731: d4 59 09                 a2 = a2 | s0
  2734: 7b b9                    u64 [a4] = a2
  2736: 95 bb 08                 a4 = a4 + 0x8
  2739: 95 cc 08                 a5 = a5 + 0x8
  2742: 64 65                    s0 = s1
  2744: ac ab eb                 jump @237 if a4 <u a3
      :                          @238
  2747: 28 1c                    jump @244
      :                          @239
  2749: 64 7a                    a3 = a0
  2751: 52 09 21                 jump @245 if a2 != 0
      :                          @240
  2754: 28 2f                    jump @247
      :                          @241
  2756: 58 04 13                 jump @244 if t2 <=s 0
      :                          @242
  2759: 64 38                    a1 = t1
  2761: 01                       fallthrough
      :                          @243
  2762: 82 89                    a2 = u64 [a1]
  2764: 7b b9                    u64 [a4] = a2
  2766: 95 bb 08                 a4 = a4 + 0x8
  2769: 95 88 08                 a1 = a1 + 0x8
  2772: ac ab f6                 jump @243 if a4 <u a3
      :                          @244
  2775: c8 43 08                 a1 = t1 + t2
  2778: 84 29 07                 a2 = t0 & 0x7
  2781: 51 09 14                 jump @247 if a2 == 0
      :                          @245
  2784: c8 a9 09                 a2 = a2 + a3
  2787: 01                       fallthrough
      :                          @246
  2788: 7c 8b                    a4 = u8 [a1]
  2790: 78 ab                    u8 [a3] = a4
  2792: 95 aa 01                 a3 = a3 + 0x1
  2795: 95 88 01                 a1 = a1 + 0x1
  2798: ac 9a f6                 jump @246 if a3 <u a2
      :                          @247
  2801: 82 10 18                 ra = u64 [sp + 0x18]
  2804: 82 15 10                 s0 = u64 [sp + 0x10]
  2807: 82 16 08                 s1 = u64 [sp + 0x8]
  2810: 95 11 20                 sp = sp + 0x20
  2813: 32 00                    ret
      :                          @248
  2815: 8d 7a                    i32 a3 = -a0
  2817: 84 aa 07                 a3 = a3 & 0x7
  2820: c8 a7 0b                 a4 = a0 + a3
  2823: 51 0a 0e                 jump @251 if a3 == 0
      :                          @249
  2826: 64 7c                    a5 = a0
  2828: 01                       fallthrough
      :                          @250
  2829: 78 c8                    u8 [a5] = a1
  2831: 95 cc 01                 a5 = a5 + 0x1
  2834: ac bc fb                 jump @250 if a5 <u a4
      :                          @251
  2837: c9 a9 03                 t1 = a2 - a3
  2840: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  2843: c8 cb 0a                 a3 = a4 + a5
  2846: 58 0c 1d                 jump @254 if a5 <=s 0
      :                          @252
  2849: 84 82 ff 00              t0 = a1 & 0xff
  2853: 14 09 01 01 01 01 01 01 01 01 a2 = 0x101010101010101
  2863: ca 92 0c                 a5 = t0 * a2
  2866: 01                       fallthrough
      :                          @253
  2867: 7b bc                    u64 [a4] = a5
  2869: 95 bb 08                 a4 = a4 + 0x8
  2872: ac ab fb                 jump @253 if a4 <u a3
      :                          @254
  2875: 84 39 07                 a2 = t1 & 0x7
  2878: 52 09 05                 jump @256 if a2 != 0
      :                          @255
  2881: 28 0e                    jump @258
      :                          @256
  2883: c8 a9 09                 a2 = a2 + a3
  2886: 01                       fallthrough
      :                          @257
  2887: 78 a8                    u8 [a3] = a1
  2889: 95 aa 01                 a3 = a3 + 0x1
  2892: ac 9a fb                 jump @257 if a3 <u a2
      :                          @258
  2895: 32 00                    ret
      :                          @259 [@dyn 28]
  2897: 82 77                    a0 = u64 [a0]
  2899: 01                       fallthrough
      :                          @260
  2900: 28                       jump @260
      :                          @261 [@dyn 29]
  2901: 82 77                    a0 = u64 [a0]
  2903: 01                       fallthrough
      :                          @262
  2904: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  2908: 7b 10 80 00              u64 [sp + 0x80] = ra
  2912: 7b 15 78                 u64 [sp + 0x78] = s0
  2915: 7b 16 70                 u64 [sp + 0x70] = s1
  2918: 98 79 04                 a2 = a0 >> 0x4
  2921: 33 00 27                 ra = 0x27
  2924: 7b 18 20                 u64 [sp + 0x20] = a1
  2927: 53 29 71 02 81 00        jump @265 if a2 <u 625
      :                          @263
  2933: 33 00 27                 ra = 0x27
  2936: 95 19 6e                 a2 = sp + 0x6e
  2939: 3a 08 00 00 03           a1 = u64 [0x30000]
  2944: 7b 18 40                 u64 [sp + 0x40] = a1
  2947: 49 11 38 f0 d8 00        u64 [sp + 56] = 0xd8f0
  2953: 33 08 7b 14              a1 = 0x147b
  2957: 33 04 b0 00 01           t2 = 0x100b0
  2962: 33 03 ff e0 f5 05        t1 = 0x5f5e0ff
  2968: 01                       fallthrough
      :                          @264
  2969: 64 7c                    a5 = a0
  2971: 82 17 40                 a0 = u64 [sp + 0x40]
  2974: d6 7c 07                 a0 = a5 mulhu a0
  2977: 98 77 0b                 a0 = a0 >> 0xb
  2980: 82 1a 38                 a3 = u64 [sp + 0x38]
  2983: c0 a7 0b                 i32 a4 = a0 * a3
  2986: c8 cb 0a                 a3 = a4 + a5
  2989: 97 ab 30                 a4 = a3 << 0x30
  2992: 98 bb 32                 a4 = a4 >> 0x32
  2995: ca 8b 0b                 a4 = a4 * a1
  2998: 98 b2 11                 t0 = a4 >> 0x11
  3001: 98 bb 10                 a4 = a4 >> 0x10
  3004: 84 bb fe 07              a4 = a4 & 0x7fe
  3008: 96 26 9c                 s1 = t0 * 0xffffffffffffff9c
  3011: c8 6a 0a                 a3 = a3 + s1
  3014: 97 aa 31                 a3 = a3 << 0x31
  3017: 98 aa 30                 a3 = a3 >> 0x30
  3020: c8 4b 0b                 a4 = a4 + t2
  3023: 7c b6                    s1 = u8 [a4]
  3025: 7c bb 01                 a4 = u8 [a4 + 0x1]
  3028: c8 4a 0a                 a3 = a3 + t2
  3031: 7c a5 01                 s0 = u8 [a3 + 0x1]
  3034: 7c aa                    a3 = u8 [a3]
  3036: 78 9b ff                 u8 [a2 + 0xffffffffffffffff] = a4
  3039: 78 96 fe                 u8 [a2 + 0xfffffffffffffffe] = s1
  3042: 78 95 01                 u8 [a2 + 0x1] = s0
  3045: 78 9a                    u8 [a2] = a3
  3047: 95 00 fc                 ra = ra + 0xfffffffffffffffc
  3050: 95 99 fc                 a2 = a2 + 0xfffffffffffffffc
  3053: ac c3 ac                 jump @264 if t1 <u a5
      :                          @265
  3056: 54 17 63 3b              jump @267 if a0 <=u 99
      :                          @266
  3060: 97 79 30                 a2 = a0 << 0x30
  3063: 98 99 32                 a2 = a2 >> 0x32
  3066: 96 99 7b 14              a2 = a2 * 0x147b
  3070: 98 99 11                 a2 = a2 >> 0x11
  3073: 96 9a 9c                 a3 = a2 * 0xffffffffffffff9c
  3076: c8 a7 07                 a0 = a0 + a3
  3079: 97 77 31                 a0 = a0 << 0x31
  3082: 98 77 30                 a0 = a0 >> 0x30
  3085: 95 00 fe                 ra = ra + 0xfffffffffffffffe
  3088: 33 0a b0 00 01           a3 = 0x100b0
  3093: c8 a7 07                 a0 = a0 + a3
  3096: 7c 7a 01                 a3 = u8 [a0 + 0x1]
  3099: 7c 77                    a0 = u8 [a0]
  3101: 95 1b 49                 a4 = sp + 0x49
  3104: c8 0b 0b                 a4 = a4 + ra
  3107: 78 ba 01                 u8 [a4 + 0x1] = a3
  3110: 78 b7                    u8 [a4] = a0
  3112: 64 97                    a0 = a2
  3114: 01                       fallthrough
      :                          @267
  3115: 82 1b 20                 a4 = u64 [sp + 0x20]
  3118: 55 17 0a 14              jump @269 if a0 >=u 10
      :                          @268
  3122: 95 05 ff                 s0 = ra + 0xffffffffffffffff
  3125: 95 18 49                 a1 = sp + 0x49
  3128: c8 58 08                 a1 = a1 + s0
  3131: 83 77 30                 i32 a0 = a0 + 0x30
  3134: 78 87                    u8 [a1] = a0
  3136: 28 21                    jump @270
      :                          @269
  3138: 97 77 01                 a0 = a0 << 0x1
  3141: 95 05 fe                 s0 = ra + 0xfffffffffffffffe
  3144: 33 08 b0 00 01           a1 = 0x100b0
  3149: c8 87 07                 a0 = a0 + a1
  3152: 7c 78 01                 a1 = u8 [a0 + 0x1]
  3155: 7c 77                    a0 = u8 [a0]
  3157: 95 19 49                 a2 = sp + 0x49
  3160: c8 59 09                 a2 = a2 + s0
  3163: 78 98 01                 u8 [a2 + 0x1] = a1
  3166: 78 97                    u8 [a2] = a0
  3168: 01                       fallthrough
      :                          @270
  3169: 80 b7 34                 a0 = u32 [a4 + 0x34]
  3172: 95 18 49                 a1 = sp + 0x49
  3175: c8 58 08                 a1 = a1 + s0
  3178: 7b 18 18                 u64 [sp + 0x18] = a1
  3181: 84 76 01                 s1 = a0 & 0x1
  3184: 33 09 00 00 11           a2 = 0x110000
  3189: 94 69 2b                 a2 = 0x2b if s1 != 0
  3192: 97 78 3d                 a1 = a0 << 0x3d
  3195: 99 88 3f                 a1 = a1 >>a 0x3f
  3198: 82 bc                    a5 = u64 [a4]
  3200: 33 0a b0 00 01           a3 = 0x100b0
  3205: d2 8a 0a                 a3 = a3 & a1
  3208: 9a 58 27                 a1 = 0x27 - s0
  3211: 7b 18 10                 u64 [sp + 0x10] = a1
  3214: 51 0c 27                 jump @276 if a5 == 0
      :                          @271
  3217: 82 bc 08                 a5 = u64 [a4 + 0x8]
  3220: c8 68 08                 a1 = a1 + s1
  3223: ae c8 1e                 jump @276 if a1 >=u a5
      :                          @272
  3226: 84 77 08                 a0 = a0 & 0x8
  3229: 52 07 42                 jump @280 if a0 != 0
      :                          @273
  3232: 7c b7 38                 a0 = u8 [a4 + 0x38]
  3235: c9 8c 0c                 a5 = a5 - a1
  3238: 5a 17 01 8e 00           jump @287 if a0 >s 1
      :                          @274
  3243: 52 07 9b 00              jump @289 if a0 != 0
      :                          @275
  3247: 7b 1c 08                 u64 [sp + 0x8] = a5
  3250: 28 9a 00                 jump @290
      :                          @276
  3253: 82 b5 20                 s0 = u64 [a4 + 0x20]
  3256: 82 b6 28                 s1 = u64 [a4 + 0x28]
  3259: 64 57                    a0 = s0
  3261: 64 68                    a1 = s1
  3263: 50 10 3c 73 01           ra = 60, jump @310
      :                          @277 [@dyn 30]
  3268: 33 08 01                 a1 = 0x1
  3271: 52 07 c2 00              jump @295 if a0 != 0
      :                          @278
  3275: 82 6a 18                 a3 = u64 [s1 + 0x18]
  3278: 64 57                    a0 = s0
  3280: 82 18 18                 a1 = u64 [sp + 0x18]
  3283: 82 19 10                 a2 = u64 [sp + 0x10]
  3286: b4 a0 01 3e              ra = 62, jump [a3]
      :                          @279 [@dyn 31]
  3290: 64 78                    a1 = a0
  3292: 28 ad 00                 jump @295
      :                          @280
  3295: 7b 1c 30                 u64 [sp + 0x30] = a5
  3298: 81 b7 30                 a0 = i32 [a4 + 0x30]
  3301: 7b 17 08                 u64 [sp + 0x8] = a0
  3304: 7c b8 38                 a1 = u8 [a4 + 0x38]
  3307: 7b 18                    u64 [sp] = a1
  3309: 82 b7 20                 a0 = u64 [a4 + 0x20]
  3312: 82 b8 28                 a1 = u64 [a4 + 0x28]
  3315: 48 1b 30 30              u32 [a4 + 48] = 0x30
  3319: 46 1b 38 01              u8 [a4 + 56] = 0x1
  3323: 7b 17 38                 u64 [sp + 0x38] = a0
  3326: 7b 18 40                 u64 [sp + 0x40] = a1
  3329: 50 10 40 31 01           ra = 64, jump @310
      :                          @281 [@dyn 32]
  3334: 52 07 7f                 jump @294 if a0 != 0
      :                          @282
  3337: 82 17 30                 a0 = u64 [sp + 0x30]
  3340: c8 75 05                 s0 = s0 + a0
  3343: c9 65 05                 s0 = s0 - s1
  3346: 95 55 da                 s0 = s0 + 0xffffffffffffffda
  3349: 82 16 38                 s1 = u64 [sp + 0x38]
  3352: 01                       fallthrough
      :                          @283
  3353: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  3356: 51 05 d6 00              jump @305 if s0 == 0
      :                          @284
  3360: 82 17 40                 a0 = u64 [sp + 0x40]
  3363: 82 79 20                 a2 = u64 [a0 + 0x20]
  3366: 33 08 30                 a1 = 0x30
  3369: 64 67                    a0 = s1
  3371: b4 90 01 42              ra = 66, jump [a2]
      :                          @285 [@dyn 33]
  3375: 51 07 ea                 jump @283 if a0 == 0
      :                          @286
  3378: 28 53                    jump @294
      :                          @287
  3380: 52 17 02 12              jump @289 if a0 != 2
      :                          @288
  3384: 98 c7 01                 a0 = a5 >> 0x1
  3387: 95 c8 01                 a1 = a5 + 0x1
  3390: 98 88 01                 a1 = a1 >> 0x1
  3393: 7b 18 08                 u64 [sp + 0x8] = a1
  3396: 28 08                    jump @290
      :                          @289
  3398: 64 c7                    a0 = a5
  3400: 49 11 08                 u64 [sp + 8] = 0
  3403: 01                       fallthrough
      :                          @290
  3404: 82 b8 20                 a1 = u64 [a4 + 0x20]
  3407: 7b 18 30                 u64 [sp + 0x30] = a1
  3410: 82 b8 28                 a1 = u64 [a4 + 0x28]
  3413: 7b 18 40                 u64 [sp + 0x40] = a1
  3416: 81 b8 30                 a1 = i32 [a4 + 0x30]
  3419: 7b 18 38                 u64 [sp + 0x38] = a1
  3422: 95 75 01                 s0 = a0 + 0x1
  3425: 7b 19 28                 u64 [sp + 0x28] = a2
  3428: 01                       fallthrough
      :                          @291
  3429: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  3432: 51 05 33                 jump @296 if s0 == 0
      :                          @292
  3435: 82 17 40                 a0 = u64 [sp + 0x40]
  3438: 82 7b 20                 a4 = u64 [a0 + 0x20]
  3441: 82 17 30                 a0 = u64 [sp + 0x30]
  3444: 82 18 38                 a1 = u64 [sp + 0x38]
  3447: 64 a6                    s1 = a3
  3449: b4 b0 01 44              ra = 68, jump [a4]
      :                          @293 [@dyn 34]
  3453: 64 6a                    a3 = s1
  3455: 82 19 28                 a2 = u64 [sp + 0x28]
  3458: 51 07 e3                 jump @291 if a0 == 0
      :                          @294
  3461: 33 08 01                 a1 = 0x1
  3464: 01                       fallthrough
      :                          @295
  3465: 64 87                    a0 = a1
  3467: 82 10 80 00              ra = u64 [sp + 0x80]
  3471: 82 15 78                 s0 = u64 [sp + 0x78]
  3474: 82 16 70                 s1 = u64 [sp + 0x70]
  3477: 95 11 88 00              sp = sp + 0x88
  3481: 32 00                    ret
      :                          @296
  3483: 82 16 30                 s1 = u64 [sp + 0x30]
  3486: 64 67                    a0 = s1
  3488: 82 15 40                 s0 = u64 [sp + 0x40]
  3491: 64 58                    a1 = s0
  3493: 50 10 46 8d 00           ra = 70, jump @310
      :                          @297 [@dyn 35]
  3498: 33 08 01                 a1 = 0x1
  3501: 52 07 dc                 jump @295 if a0 != 0
      :                          @298
  3504: 82 5a 18                 a3 = u64 [s0 + 0x18]
  3507: 64 67                    a0 = s1
  3509: 82 18 18                 a1 = u64 [sp + 0x18]
  3512: 82 19 10                 a2 = u64 [sp + 0x10]
  3515: b4 a0 01 48              ra = 72, jump [a3]
      :                          @299 [@dyn 36]
  3519: 33 08 01                 a1 = 0x1
  3522: 52 07 c7                 jump @295 if a0 != 0
      :                          @300
  3525: 82 17 08                 a0 = u64 [sp + 0x8]
  3528: 9a 77                    a0 = -a0
  3530: 7b 17 28                 u64 [sp + 0x28] = a0
  3533: 33 05 ff                 s0 = 0xffffffffffffffff
  3536: 01                       fallthrough
      :                          @301
  3537: 82 17 28                 a0 = u64 [sp + 0x28]
  3540: c8 57 07                 a0 = a0 + s0
  3543: 51 17 ff 46              jump @308 if a0 == 4294967295
      :                          @302
  3547: 82 17 40                 a0 = u64 [sp + 0x40]
  3550: 82 79 20                 a2 = u64 [a0 + 0x20]
  3553: 64 67                    a0 = s1
  3555: 82 18 38                 a1 = u64 [sp + 0x38]
  3558: b4 90 01 4a              ra = 74, jump [a2]
      :                          @303 [@dyn 37]
  3562: 95 55 01                 s0 = s0 + 0x1
  3565: 51 07 e4                 jump @301 if a0 == 0
      :                          @304
  3568: 28 39                    jump @309
      :                          @305
  3570: 82 17 40                 a0 = u64 [sp + 0x40]
  3573: 82 7a 18                 a3 = u64 [a0 + 0x18]
  3576: 64 67                    a0 = s1
  3578: 82 18 18                 a1 = u64 [sp + 0x18]
  3581: 82 19 10                 a2 = u64 [sp + 0x10]
  3584: b4 a0 01 4c              ra = 76, jump [a3]
      :                          @306 [@dyn 38]
  3588: 33 08 01                 a1 = 0x1
  3591: 52 07 82                 jump @295 if a0 != 0
      :                          @307
  3594: 33 08                    a1 = 0
  3596: 82 17 20                 a0 = u64 [sp + 0x20]
  3599: 82 19 08                 a2 = u64 [sp + 0x8]
  3602: 7a 79 30                 u32 [a0 + 0x30] = a2
  3605: 82 19                    a2 = u64 [sp]
  3607: 78 79 38                 u8 [a0 + 0x38] = a2
  3610: 28 6f ff                 jump @295
      :                          @308
  3613: 82 15 08                 s0 = u64 [sp + 0x8]
  3616: 82 17 08                 a0 = u64 [sp + 0x8]
  3619: d8 75 08                 a1 = s0 <u a0
  3622: 28 63 ff                 jump @295
      :                          @309
  3625: 82 17 08                 a0 = u64 [sp + 0x8]
  3628: d8 75 08                 a1 = s0 <u a0
  3631: 28 5a ff                 jump @295
      :                          @310
  3634: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  3637: 7b 10 18                 u64 [sp + 0x18] = ra
  3640: 7b 15 10                 u64 [sp + 0x10] = s0
  3643: 7b 16 08                 u64 [sp + 0x8] = s1
  3646: 83 9b                    i32 a4 = a2 + 0
  3648: 33 0c 00 00 11           a5 = 0x110000
  3653: 64 a5                    s0 = a3
  3655: 64 86                    s1 = a1
  3657: 64 7a                    a3 = a0
  3659: aa cb 1a                 jump @313 if a4 == a5
      :                          @311
  3662: 82 6b 20                 a4 = u64 [s1 + 0x20]
  3665: 64 a7                    a0 = a3
  3667: 64 98                    a1 = a2
  3669: 7b 1a                    u64 [sp] = a3
  3671: b4 b0 01 4e              ra = 78, jump [a4]
      :                          @312 [@dyn 39]
  3675: 82 1a                    a3 = u64 [sp]
  3677: 64 78                    a1 = a0
  3679: 33 07 01                 a0 = 0x1
  3682: 52 08 20                 jump @316 if a1 != 0
      :                          @313
  3685: 51 05 1a                 jump @315 if s0 == 0
      :                          @314
  3688: 82 6c 18                 a5 = u64 [s1 + 0x18]
  3691: 64 a7                    a0 = a3
  3693: 64 58                    a1 = s0
  3695: 33 09                    a2 = 0
  3697: 82 10 18                 ra = u64 [sp + 0x18]
  3700: 82 15 10                 s0 = u64 [sp + 0x10]
  3703: 82 16 08                 s1 = u64 [sp + 0x8]
  3706: 95 11 20                 sp = sp + 0x20
  3709: 32 0c                    jump [a5]
      :                          @315
  3711: 33 07                    a0 = 0
  3713: 01                       fallthrough
      :                          @316
  3714: 82 10 18                 ra = u64 [sp + 0x18]
  3717: 82 15 10                 s0 = u64 [sp + 0x10]
  3720: 82 16 08                 s1 = u64 [sp + 0x8]
  3723: 95 11 20                 sp = sp + 0x20
  3726: 32 00                    ret
      :                          @317
  3728: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  3732: 7b 10 80 00              u64 [sp + 0x80] = ra
  3736: 7b 15 78                 u64 [sp + 0x78] = s0
  3739: 7b 16 70                 u64 [sp + 0x70] = s1
  3742: 49 11 60 20              u64 [sp + 96] = 0x20
  3746: 33 09 03                 a2 = 0x3
  3749: 78 19 68                 u8 [sp + 0x68] = a2
  3752: 49 11 30                 u64 [sp + 48] = 0
  3755: 49 11 40                 u64 [sp + 64] = 0
  3758: 82 86 20                 s1 = u64 [a1 + 0x20]
  3761: 7b 17 50                 u64 [sp + 0x50] = a0
  3764: 33 07 80 00 01           a0 = 0x10080
  3769: 7b 17 58                 u64 [sp + 0x58] = a0
  3772: 51 06 06 01              jump @339 if s1 == 0
      :                          @318
  3776: 82 87 28                 a0 = u64 [a1 + 0x28]
  3779: 51 07 73 01              jump @349 if a0 == 0
      :                          @319
  3783: 33 09                    a2 = 0
  3785: 82 85                    s0 = u64 [a1]
  3787: 7b 18 08                 u64 [sp + 0x8] = a1
  3790: 82 88 10                 a1 = u64 [a1 + 0x10]
  3793: 7b 18 18                 u64 [sp + 0x18] = a1
  3796: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  3799: 97 88 03                 a1 = a1 << 0x3
  3802: 98 88 03                 a1 = a1 >> 0x3
  3805: 95 88 01                 a1 = a1 + 0x1
  3808: 7b 18                    u64 [sp] = a1
  3810: 95 55 08                 s0 = s0 + 0x8
  3813: 96 78 38                 a1 = a0 * 0x38
  3816: 95 66 18                 s1 = s1 + 0x18
  3819: 33 07 38                 a0 = 0x38
  3822: 7b 17 10                 u64 [sp + 0x10] = a0
  3825: 01                       fallthrough
      :                          @320
  3826: 7b 18 20                 u64 [sp + 0x20] = a1
  3829: 7b 19 28                 u64 [sp + 0x28] = a2
  3832: 82 59                    a2 = u64 [s0]
  3834: 51 09 17                 jump @323 if a2 == 0
      :                          @321
  3837: 82 1a 58                 a3 = u64 [sp + 0x58]
  3840: 82 17 50                 a0 = u64 [sp + 0x50]
  3843: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  3846: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3849: b4 a0 01 50              ra = 80, jump [a3]
      :                          @322 [@dyn 40]
  3853: 52 07 4e 01              jump @352 if a0 != 0
      :                          @323
  3857: 81 67 10                 a0 = i32 [s1 + 0x10]
  3860: 7a 17 60                 u32 [sp + 0x60] = a0
  3863: 7c 67 18                 a0 = u8 [s1 + 0x18]
  3866: 78 17 68                 u8 [sp + 0x68] = a0
  3869: 81 67 14                 a0 = i32 [s1 + 0x14]
  3872: 7a 17 64                 u32 [sp + 0x64] = a0
  3875: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3878: 82 67                    a0 = u64 [s1]
  3880: 51 08 26                 jump @328 if a1 == 0
      :                          @324
  3883: 52 18 01 16              jump @326 if a1 != 1
      :                          @325
  3887: 97 77 04                 a0 = a0 << 0x4
  3890: 82 18 18                 a1 = u64 [sp + 0x18]
  3893: c8 87 07                 a0 = a0 + a1
  3896: 82 78 08                 a1 = u64 [a0 + 0x8]
  3899: 82 19 10                 a2 = u64 [sp + 0x10]
  3902: aa 98 07                 jump @327 if a1 == a2
      :                          @326
  3905: 33 08                    a1 = 0
  3907: 28 0f                    jump @329
      :                          @327
  3909: 82 77                    a0 = u64 [a0]
  3911: 82 77                    a0 = u64 [a0]
  3913: 33 08 01                 a1 = 0x1
  3916: 28 06                    jump @329
      :                          @328
  3918: 33 08 01                 a1 = 0x1
  3921: 01                       fallthrough
      :                          @329
  3922: 7b 18 30                 u64 [sp + 0x30] = a1
  3925: 7b 17 38                 u64 [sp + 0x38] = a0
  3928: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  3931: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  3934: 51 08 26                 jump @334 if a1 == 0
      :                          @330
  3937: 52 18 01 16              jump @332 if a1 != 1
      :                          @331
  3941: 97 77 04                 a0 = a0 << 0x4
  3944: 82 18 18                 a1 = u64 [sp + 0x18]
  3947: c8 87 07                 a0 = a0 + a1
  3950: 82 78 08                 a1 = u64 [a0 + 0x8]
  3953: 82 19 10                 a2 = u64 [sp + 0x10]
  3956: aa 98 07                 jump @333 if a1 == a2
      :                          @332
  3959: 33 08                    a1 = 0
  3961: 28 0f                    jump @335
      :                          @333
  3963: 82 77                    a0 = u64 [a0]
  3965: 82 77                    a0 = u64 [a0]
  3967: 33 08 01                 a1 = 0x1
  3970: 28 06                    jump @335
      :                          @334
  3972: 33 08 01                 a1 = 0x1
  3975: 01                       fallthrough
      :                          @335
  3976: 7b 18 40                 u64 [sp + 0x40] = a1
  3979: 7b 17 48                 u64 [sp + 0x48] = a0
  3982: 82 67 08                 a0 = u64 [s1 + 0x8]
  3985: 97 77 04                 a0 = a0 << 0x4
  3988: 82 18 18                 a1 = u64 [sp + 0x18]
  3991: c8 78 08                 a1 = a1 + a0
  3994: 82 87                    a0 = u64 [a1]
  3996: 82 89 08                 a2 = u64 [a1 + 0x8]
  3999: 95 18 30                 a1 = sp + 0x30
  4002: b4 90 01 52              ra = 82, jump [a2]
      :                          @336 [@dyn 41]
  4006: 52 07 b5 00              jump @352 if a0 != 0
      :                          @337
  4010: 95 55 10                 s0 = s0 + 0x10
  4013: 82 18 20                 a1 = u64 [sp + 0x20]
  4016: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  4019: 95 66 38                 s1 = s1 + 0x38
  4022: 82 19 28                 a2 = u64 [sp + 0x28]
  4025: 95 99 01                 a2 = a2 + 0x1
  4028: 52 08 36 ff              jump @320 if a1 != 0
      :                          @338
  4032: 28 69                    jump @347
      :                          @339
  4034: 82 87 18                 a0 = u64 [a1 + 0x18]
  4037: 51 07 71                 jump @349 if a0 == 0
      :                          @340
  4040: 82 85 10                 s0 = u64 [a1 + 0x10]
  4043: 33 0a                    a3 = 0
  4045: 97 79 04                 a2 = a0 << 0x4
  4048: c8 59 09                 a2 = a2 + s0
  4051: 7b 19 20                 u64 [sp + 0x20] = a2
  4054: 7b 18 08                 u64 [sp + 0x8] = a1
  4057: 82 86                    s1 = u64 [a1]
  4059: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  4062: 97 77 04                 a0 = a0 << 0x4
  4065: 98 77 04                 a0 = a0 >> 0x4
  4068: 95 77 01                 a0 = a0 + 0x1
  4071: 7b 17                    u64 [sp] = a0
  4073: 95 66 08                 s1 = s1 + 0x8
  4076: 01                       fallthrough
      :                          @341
  4077: 7b 1a 28                 u64 [sp + 0x28] = a3
  4080: 82 69                    a2 = u64 [s1]
  4082: 51 09 16                 jump @344 if a2 == 0
      :                          @342
  4085: 82 1a 58                 a3 = u64 [sp + 0x58]
  4088: 82 17 50                 a0 = u64 [sp + 0x50]
  4091: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  4094: 82 aa 18                 a3 = u64 [a3 + 0x18]
  4097: b4 a0 01 54              ra = 84, jump [a3]
      :                          @343 [@dyn 42]
  4101: 52 07 56                 jump @352 if a0 != 0
      :                          @344
  4104: 82 57                    a0 = u64 [s0]
  4106: 82 59 08                 a2 = u64 [s0 + 0x8]
  4109: 95 18 30                 a1 = sp + 0x30
  4112: b4 90 01 56              ra = 86, jump [a2]
      :                          @345 [@dyn 43]
  4116: 52 07 47                 jump @352 if a0 != 0
      :                          @346
  4119: 95 66 10                 s1 = s1 + 0x10
  4122: 95 55 10                 s0 = s0 + 0x10
  4125: 82 1a 28                 a3 = u64 [sp + 0x28]
  4128: 95 aa 01                 a3 = a3 + 0x1
  4131: 82 17 20                 a0 = u64 [sp + 0x20]
  4134: ab 75 c7                 jump @341 if s0 != a0
      :                          @347
  4137: 82 18 08                 a1 = u64 [sp + 0x8]
  4140: 82 1a                    a3 = u64 [sp]
  4142: 82 87 08                 a0 = u64 [a1 + 0x8]
  4145: ac 7a 0d                 jump @350 if a3 <u a0
      :                          @348
  4148: 28 2c                    jump @353
      :                          @349
  4150: 33 0a                    a3 = 0
  4152: 82 87 08                 a0 = u64 [a1 + 0x8]
  4155: 54 07 25                 jump @353 if a0 <=u 0
      :                          @350
  4158: 82 87                    a0 = u64 [a1]
  4160: 97 a8 04                 a1 = a3 << 0x4
  4163: c8 87 09                 a2 = a0 + a1
  4166: 82 1a 58                 a3 = u64 [sp + 0x58]
  4169: 82 17 50                 a0 = u64 [sp + 0x50]
  4172: 82 98                    a1 = u64 [a2]
  4174: 82 99 08                 a2 = u64 [a2 + 0x8]
  4177: 82 aa 18                 a3 = u64 [a3 + 0x18]
  4180: b4 a0 01 58              ra = 88, jump [a3]
      :                          @351 [@dyn 44]
  4184: 51 07 08                 jump @353 if a0 == 0
      :                          @352
  4187: 33 07 01                 a0 = 0x1
  4190: 28 05                    jump @354
      :                          @353
  4192: 33 07                    a0 = 0
  4194: 01                       fallthrough
      :                          @354
  4195: 82 10 80 00              ra = u64 [sp + 0x80]
  4199: 82 15 78                 s0 = u64 [sp + 0x78]
  4202: 82 16 70                 s1 = u64 [sp + 0x70]
  4205: 95 11 88 00              sp = sp + 0x88
  4209: 32 00                    ret
      :                          @355 [@dyn 45]
  4211: 80 77                    a0 = u32 [a0]
  4213: 28 e3 fa                 jump @262
      :                          @356
  4216: 51 08 9b 00              jump @377 if a1 == 0
      :                          @357
  4220: 64 79                    a2 = a0
  4222: 7c 77                    a0 = u8 [a0]
  4224: 51 07 91 00              jump @376 if a0 == 0
      :                          @358
  4228: 51 27 ff 00 90 00        jump @378 if a0 == 255
      :                          @359
  4234: 6c 7a                    a3 = sext.b a0
  4236: 57 0a 09                 jump @361 if a3 <s 0
      :                          @360
  4239: 33 0a                    a3 = 0
  4241: 33 08                    a1 = 0
  4243: 28 73                    jump @375
      :                          @361
  4245: 55 27 c0 00 0d           jump @363 if a0 >=u 192
      :                          @362
  4250: 33 0a 01                 a3 = 0x1
  4253: 33 0b 80                 a4 = 0xffffffffffffff80
  4256: 28 4a                    jump @372
      :                          @363
  4258: 55 27 e0 00 0e           jump @365 if a0 >=u 224
      :                          @364
  4263: 33 0a 02                 a3 = 0x2
  4266: 33 0b 40 ff              a4 = 0xffffffffffffff40
  4270: 28 3c                    jump @372
      :                          @365
  4272: 55 27 f0 00 0e           jump @367 if a0 >=u 240
      :                          @366
  4277: 33 0a 03                 a3 = 0x3
  4280: 33 0b 20 ff              a4 = 0xffffffffffffff20
  4284: 28 2e                    jump @372
      :                          @367
  4286: 55 27 f8 00 0e           jump @369 if a0 >=u 248
      :                          @368
  4291: 33 0a 04                 a3 = 0x4
  4294: 33 0b 10 ff              a4 = 0xffffffffffffff10
  4298: 28 20                    jump @372
      :                          @369
  4300: 55 27 fc 00 0e           jump @371 if a0 >=u 252
      :                          @370
  4305: 33 0a 05                 a3 = 0x5
  4308: 33 0b 08 ff              a4 = 0xffffffffffffff08
  4312: 28 12                    jump @372
      :                          @371
  4314: 88 7a fe 00              a3 = a0 <u 0xfe
  4318: 33 0b 04 ff              a4 = 0xffffffffffffff04
  4322: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  4326: 85 aa 07                 a3 = a3 ^ 0x7
  4329: 01                       fallthrough
      :                          @372
  4330: ae 8a 2b                 jump @379 if a3 >=u a1
      :                          @373
  4333: 33 08                    a1 = 0
  4335: c8 b7 07                 a0 = a0 + a4
  4338: 64 ab                    a4 = a3
  4340: 01                       fallthrough
      :                          @374
  4341: c8 b9 0c                 a5 = a2 + a4
  4344: 7c cc                    a5 = u8 [a5]
  4346: 97 88 08                 a1 = a1 << 0x8
  4349: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  4352: d4 c8 08                 a1 = a1 | a5
  4355: 52 0b f2                 jump @374 if a4 != 0
      :                          @375
  4358: 8a a9 03                 i32 a2 = a3 << 0x3
  4361: cf 97 07                 a0 = a0 << a2
  4364: c8 87 07                 a0 = a0 + a1
  4367: 32 00                    ret
      :                          @376
  4369: 32 00                    ret
      :                          @377
  4371: 00                       trap
      :                          @378
  4372: 00                       trap
      :                          @379
  4373: 00                       trap
