// RO data = 336/336 bytes
// RW data = 8/65568 bytes
// Stack size = 65536 bytes
// RO data = [30, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 112, 97, 114, 115, 101, 95, 97, 99, 99, 117, 109, 117, 108, 97, 116, 101, 95, 97, 114, 103, 115, 32, 115, 116, 97, 114, 116, 95, 97, 100, 100, 114, 101, 115, 115, 61, 32, 108, 101, 110, 103, 116, 104, 61, 116, 114, 97, 110, 115, 102, 101, 114, 0, 0, 0, 0, 248, 0, 1, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 28, 1, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0]
// RW data = [75, 89, 134, 56, 214, 197, 109, 52]
// Instructions = 1377
// Code size = 4061 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 ae 00 00 00           jump @18
      :                          @2
    10: 28 2e 05                 jump @120
      :                          @3 [export #0: 'refine']
    13: 95 11 e0                 sp = sp + 0xffffffffffffffe0
    16: 7b 10 18                 u64 [sp + 0x18] = ra
    19: 7b 15 10                 u64 [sp + 0x10] = s0
    22: 7b 16 08                 u64 [sp + 0x8] = s1
    25: 64 86                    s1 = a1
    27: 64 78                    a1 = a0
    29: 33 09 04                 a2 = 0x4
    32: 33 07 00 00 01           a0 = 0x10000
    37: ac 96 7c                 jump @15 if s1 <u a2
      :                          @4
    40: 95 66 fc                 s1 = s1 + 0xfffffffffffffffc
    43: 51 06 76                 jump @15 if s1 == 0
      :                          @5
    46: 95 87 04                 a0 = a1 + 0x4
    49: 7d 78                    a1 = i8 [a0]
    51: 33 05 01                 s0 = 0x1
    54: 59 08 3a                 jump @13 if a1 >=s 0
      :                          @6
    57: 84 89 ff 00              a2 = a1 & 0xff
    61: 33 05 02                 s0 = 0x2
    64: 53 29 c0 00 2d           jump @12 if a2 <u 192
      :                          @7
    69: 33 05 03                 s0 = 0x3
    72: 53 29 e0 00 25           jump @12 if a2 <u 224
      :                          @8
    77: 33 05 04                 s0 = 0x4
    80: 53 29 f0 00 1d           jump @12 if a2 <u 240
      :                          @9
    85: 33 05 05                 s0 = 0x5
    88: 53 29 f8 00 15           jump @12 if a2 <u 248
      :                          @10
    93: 33 05 06                 s0 = 0x6
    96: 53 29 fc 00 0d           jump @12 if a2 <u 252
      :                          @11
   101: 88 98 fe 00              a1 = a2 <u 0xfe
   105: 9a 85 08                 s0 = 0x8 - a1
   108: 01                       fallthrough
      :                          @12
   109: ac 56 45                 jump @17 if s1 <u s0
      :                          @13
   112: 64 58                    a1 = s0
   114: 7b 17                    u64 [sp] = a0
   116: 50 10 02 cb 0e           ra = 2, jump @330
      :                          @14 [@dyn 1]
   121: 64 78                    a1 = a0
   123: e4 56 07                 a0 = maxu(s1, s0)
   126: c9 57 07                 a0 = a0 - s0
   129: d8 87 09                 a2 = a0 <u a1
   132: e4 87 07                 a0 = maxu(a0, a1)
   135: c9 87 07                 a0 = a0 - a1
   138: 88 77 20                 a0 = a0 <u 0x20
   141: d4 79 09                 a2 = a2 | a0
   144: 82 17                    a0 = u64 [sp]
   146: c8 75 05                 s0 = s0 + a0
   149: 94 98                    a1 = 0 if a2 != 0
   151: 33 07 00 00 01           a0 = 0x10000
   156: da 95 07                 a0 = s0 if a2 == 0
   159: 28 05                    jump @16
      :                          @15
   161: 33 08                    a1 = 0
   163: 01                       fallthrough
      :                          @16
   164: 82 10 18                 ra = u64 [sp + 0x18]
   167: 82 15 10                 s0 = u64 [sp + 0x10]
   170: 82 16 08                 s1 = u64 [sp + 0x8]
   173: 95 11 20                 sp = sp + 0x20
   176: 32 00                    ret
      :                          @17
   178: 00                       trap
      :                          @18 [export #1: 'accumulate']
   179: 95 11 08 ff              sp = sp + 0xffffffffffffff08
   183: 7b 10 f0 00              u64 [sp + 0xf0] = ra
   187: 7b 15 e8 00              u64 [sp + 0xe8] = s0
   191: 7b 16 e0 00              u64 [sp + 0xe0] = s1
   195: 7b 17 90 00              u64 [sp + 0x90] = a0
   199: 7b 18 98 00              u64 [sp + 0x98] = a1
   203: 51 08 d2 02              jump @92 if a1 == 0
      :                          @19
   207: 64 75                    s0 = a0
   209: 95 17 90 00              a0 = sp + 0x90
   213: 7b 17 a0 00              u64 [sp + 0xa0] = a0
   217: 33 07 32                 a0 = 0x32
   220: 7b 17 a8 00              u64 [sp + 0xa8] = a0
   224: 95 19 98 00              a2 = sp + 0x98
   228: 7b 19 b0 00              u64 [sp + 0xb0] = a2
   232: 7b 17 b8 00              u64 [sp + 0xb8] = a0
   236: 33 07 30 01 01           a0 = 0x10130
   241: 7b 17 10                 u64 [sp + 0x10] = a0
   244: 49 11 18 02              u64 [sp + 24] = 0x2
   248: 49 11 30                 u64 [sp + 48] = 0
   251: 95 19 a0 00              a2 = sp + 0xa0
   255: 7b 19 20                 u64 [sp + 0x20] = a2
   258: 49 11 28 02              u64 [sp + 40] = 0x2
   262: 33 09 10 00 03           a2 = 0x30010
   267: 33 07 00 00 01           a0 = 0x10000
   272: c8 79 09                 a2 = a2 + a0
   275: 01                       fallthrough
      :                          @20
   276: 82 9a                    a3 = u64 [a2]
   278: 95 a6 58                 s1 = a3 + 0x58
   281: ac a6 19 04              jump @114 if s1 <u a3
      :                          @21
   285: 95 6b 01                 a4 = s1 + 0x1
   288: 88 bc 01                 a5 = a4 <u 0x1
   291: d8 b7 0b                 a4 = a0 <u a4
   294: d4 cb 0b                 a4 = a4 | a5
   297: 52 0b 09 04              jump @114 if a4 != 0
      :                          @22
   301: 82 9b                    a4 = u64 [a2]
   303: ab ab e5                 jump @20 if a4 != a3
      :                          @23
   306: 7b 96                    u64 [a2] = s1
   308: 33 0c                    a5 = 0
   310: 7b 15 08                 u64 [sp + 0x8] = s0
   313: 7b 18                    u64 [sp] = a1
   315: 33 07 10 00 04           a0 = 0x40010
   320: c9 67 07                 a0 = a0 - s1
   323: 49 21 c0 00 58           u64 [sp + 192] = 0x58
   328: 7b 17 c8 00              u64 [sp + 0xc8] = a0
   332: 49 21 d0 00              u64 [sp + 208] = 0
   336: 95 17 c0 00              a0 = sp + 0xc0
   340: 95 18 10                 a1 = sp + 0x10
   343: 50 10 04 05 0c           ra = 4, jump @292
      :                          @24 [@dyn 2]
   348: 52 07 d7 03              jump @115 if a0 != 0
      :                          @25
   352: 82 16 c8 00              s1 = u64 [sp + 0xc8]
   356: 82 1b d0 00              a4 = u64 [sp + 0xd0]
   360: 82 15 c0 00              s0 = u64 [sp + 0xc0]
   364: 33 07 02                 a0 = 0x2
   367: 33 08                    a1 = 0
   369: 33 09                    a2 = 0
   371: 64 6a                    a3 = s1
   373: 33 00 06                 ra = 0x6
   376: 0a 64                    ecalli 100 // 'log'
   378: 01                       fallthrough
      :                          @26 [@dyn 3]
   379: 95 58 ff ff fe           a1 = s0 + 0xfffffffffffeffff
   384: 53 38 00 00 ff 27        jump @32 if a1 <u 4294901760
      :                          @27
   390: 33 07 10 00 03           a0 = 0x30010
   395: 95 77 00 00 01           a0 = a0 + 0x10000
   400: 01                       fallthrough
      :                          @28
   401: 82 78                    a1 = u64 [a0]
   403: c9 87 09                 a2 = a0 - a1
   406: ab 69 11                 jump @32 if a2 != s1
      :                          @29
   409: c9 58 09                 a2 = a1 - s0
   412: 01                       fallthrough
      :                          @30
   413: 82 7a                    a3 = u64 [a0]
   415: ab 8a f2                 jump @28 if a3 != a1
      :                          @31
   418: 7b 79                    u64 [a0] = a2
   420: 33 0b                    a4 = 0
   422: 01                       fallthrough
      :                          @32
   423: 82 17 08                 a0 = u64 [sp + 0x8]
   426: 7d 78                    a1 = i8 [a0]
   428: 33 06 01                 s1 = 0x1
   431: 59 08 37                 jump @39 if a1 >=s 0
      :                          @33
   434: 84 89 ff 00              a2 = a1 & 0xff
   438: 33 06 02                 s1 = 0x2
   441: 53 29 c0 00 2d           jump @39 if a2 <u 192
      :                          @34
   446: 33 06 03                 s1 = 0x3
   449: 53 29 e0 00 25           jump @39 if a2 <u 224
      :                          @35
   454: 33 06 04                 s1 = 0x4
   457: 53 29 f0 00 1d           jump @39 if a2 <u 240
      :                          @36
   462: 33 06 05                 s1 = 0x5
   465: 53 29 f8 00 15           jump @39 if a2 <u 248
      :                          @37
   470: 33 06 06                 s1 = 0x6
   473: 53 29 fc 00 0d           jump @39 if a2 <u 252
      :                          @38
   478: 88 98 fe 00              a1 = a2 <u 0xfe
   482: 9a 86 08                 s1 = 0x8 - a1
   485: 01                       fallthrough
      :                          @39
   486: 82 15                    s0 = u64 [sp]
   488: ac 65 b5 01              jump @92 if s0 <u s1
      :                          @40
   492: 64 68                    a1 = s1
   494: 50 10 08 51 0d           ra = 8, jump @330
      :                          @41 [@dyn 4]
   499: 82 17 08                 a0 = u64 [sp + 0x8]
   502: aa 65 a7 01              jump @92 if s0 == s1
      :                          @42
   506: c8 67 07                 a0 = a0 + s1
   509: 7d 78                    a1 = i8 [a0]
   511: c9 65 05                 s0 = s0 - s1
   514: 33 06 01                 s1 = 0x1
   517: 59 08 37                 jump @49 if a1 >=s 0
      :                          @43
   520: 84 89 ff 00              a2 = a1 & 0xff
   524: 33 06 02                 s1 = 0x2
   527: 53 29 c0 00 2d           jump @49 if a2 <u 192
      :                          @44
   532: 33 06 03                 s1 = 0x3
   535: 53 29 e0 00 25           jump @49 if a2 <u 224
      :                          @45
   540: 33 06 04                 s1 = 0x4
   543: 53 29 f0 00 1d           jump @49 if a2 <u 240
      :                          @46
   548: 33 06 05                 s1 = 0x5
   551: 53 29 f8 00 15           jump @49 if a2 <u 248
      :                          @47
   556: 33 06 06                 s1 = 0x6
   559: 53 29 fc 00 0d           jump @49 if a2 <u 252
      :                          @48
   564: 88 98 fe 00              a1 = a2 <u 0xfe
   568: 9a 86 08                 s1 = 0x8 - a1
   571: 01                       fallthrough
      :                          @49
   572: ac 65 61 01              jump @92 if s0 <u s1
      :                          @50
   576: 64 68                    a1 = s1
   578: 7b 17 08                 u64 [sp + 0x8] = a0
   581: 50 10 0a fa 0c           ra = 10, jump @330
      :                          @51 [@dyn 5]
   586: 82 17 08                 a0 = u64 [sp + 0x8]
   589: c8 67 07                 a0 = a0 + s1
   592: c9 65 0a                 a3 = s0 - s1
   595: 7b 1a 08                 u64 [sp + 0x8] = a3
   598: ab 65 07                 jump @53 if s0 != s1
      :                          @52
   601: 33 06                    s1 = 0
   603: 28 42                    jump @61
      :                          @53
   605: 7d 78                    a1 = i8 [a0]
   607: 33 06 01                 s1 = 0x1
   610: 59 08 37                 jump @60 if a1 >=s 0
      :                          @54
   613: 84 89 ff 00              a2 = a1 & 0xff
   617: 33 06 02                 s1 = 0x2
   620: 53 29 c0 00 2d           jump @60 if a2 <u 192
      :                          @55
   625: 33 06 03                 s1 = 0x3
   628: 53 29 e0 00 25           jump @60 if a2 <u 224
      :                          @56
   633: 33 06 04                 s1 = 0x4
   636: 53 29 f0 00 1d           jump @60 if a2 <u 240
      :                          @57
   641: 33 06 05                 s1 = 0x5
   644: 53 29 f8 00 15           jump @60 if a2 <u 248
      :                          @58
   649: 33 06 06                 s1 = 0x6
   652: 53 29 fc 00 0d           jump @60 if a2 <u 252
      :                          @59
   657: 88 98 fe 00              a1 = a2 <u 0xfe
   661: 9a 86 08                 s1 = 0x8 - a1
   664: 01                       fallthrough
      :                          @60
   665: ac 6a 04 01              jump @92 if a3 <u s1
      :                          @61
   669: 64 68                    a1 = s1
   671: 64 75                    s0 = a0
   673: 50 10 0c 9e 0c           ra = 12, jump @330
      :                          @62 [@dyn 6]
   678: 51 07 f7 00              jump @92 if a0 == 0
      :                          @63
   682: 82 17 08                 a0 = u64 [sp + 0x8]
   685: e4 67 07                 a0 = maxu(a0, s1)
   688: c9 67 07                 a0 = a0 - s1
   691: 53 17 60 ea 00           jump @92 if a0 <u 96
      :                          @64
   696: c8 56 08                 a1 = s1 + s0
   699: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   702: 95 87 60                 a0 = a1 + 0x60
   705: 7b 17 08                 u64 [sp + 0x8] = a0
   708: 51 06 4c                 jump @75 if s1 == 0
      :                          @65
   711: 7d 78                    a1 = i8 [a0]
   713: 33 05 01                 s0 = 0x1
   716: 59 08 37                 jump @72 if a1 >=s 0
      :                          @66
   719: 84 89 ff 00              a2 = a1 & 0xff
   723: 33 05 02                 s0 = 0x2
   726: 53 29 c0 00 2d           jump @72 if a2 <u 192
      :                          @67
   731: 33 05 03                 s0 = 0x3
   734: 53 29 e0 00 25           jump @72 if a2 <u 224
      :                          @68
   739: 33 05 04                 s0 = 0x4
   742: 53 29 f0 00 1d           jump @72 if a2 <u 240
      :                          @69
   747: 33 05 05                 s0 = 0x5
   750: 53 29 f8 00 15           jump @72 if a2 <u 248
      :                          @70
   755: 33 05 06                 s0 = 0x6
   758: 53 29 fc 00 0d           jump @72 if a2 <u 252
      :                          @71
   763: 88 98 fe 00              a1 = a2 <u 0xfe
   767: 9a 85 08                 s0 = 0x8 - a1
   770: 01                       fallthrough
      :                          @72
   771: ac 56 32 02              jump @117 if s1 <u s0
      :                          @73
   775: 64 58                    a1 = s0
   777: 50 10 0e 36 0c           ra = 14, jump @330
      :                          @74 [@dyn 7]
   782: 28 07                    jump @76
      :                          @75
   784: 33 05                    s0 = 0
   786: 33 07                    a0 = 0
   788: 01                       fallthrough
      :                          @76
   789: e4 56 08                 a1 = maxu(s1, s0)
   792: c9 58 08                 a1 = a1 - s0
   795: e4 78 08                 a1 = maxu(a1, a0)
   798: c9 78 08                 a1 = a1 - a0
   801: 33 09 20                 a2 = 0x20
   804: ac 98 79                 jump @92 if a1 <u a2
      :                          @77
   807: 82 19 08                 a2 = u64 [sp + 0x8]
   810: c8 95 05                 s0 = s0 + a2
   813: c8 57 07                 a0 = a0 + s0
   816: 95 85 e0                 s0 = a1 + 0xffffffffffffffe0
   819: 95 77 20                 a0 = a0 + 0x20
   822: 7b 17 08                 u64 [sp + 0x8] = a0
   825: 51 05 4c                 jump @88 if s0 == 0
      :                          @78
   828: 7d 78                    a1 = i8 [a0]
   830: 33 06 01                 s1 = 0x1
   833: 59 08 37                 jump @85 if a1 >=s 0
      :                          @79
   836: 84 89 ff 00              a2 = a1 & 0xff
   840: 33 06 02                 s1 = 0x2
   843: 53 29 c0 00 2d           jump @85 if a2 <u 192
      :                          @80
   848: 33 06 03                 s1 = 0x3
   851: 53 29 e0 00 25           jump @85 if a2 <u 224
      :                          @81
   856: 33 06 04                 s1 = 0x4
   859: 53 29 f0 00 1d           jump @85 if a2 <u 240
      :                          @82
   864: 33 06 05                 s1 = 0x5
   867: 53 29 f8 00 15           jump @85 if a2 <u 248
      :                          @83
   872: 33 06 06                 s1 = 0x6
   875: 53 29 fc 00 0d           jump @85 if a2 <u 252
      :                          @84
   880: 88 98 fe 00              a1 = a2 <u 0xfe
   884: 9a 86 08                 s1 = 0x8 - a1
   887: 01                       fallthrough
      :                          @85
   888: ac 65 be 01              jump @118 if s0 <u s1
      :                          @86
   892: 64 68                    a1 = s1
   894: 50 10 10 c1 0b           ra = 16, jump @330
      :                          @87 [@dyn 8]
   899: 28 05                    jump @89
      :                          @88
   901: 33 06                    s1 = 0
   903: 01                       fallthrough
      :                          @89
   904: ae 56 15                 jump @92 if s1 >=u s0
      :                          @90
   907: 82 17 08                 a0 = u64 [sp + 0x8]
   910: c8 67 07                 a0 = a0 + s1
   913: 7c 78                    a1 = u8 [a0]
   915: 51 08 24                 jump @94 if a1 == 0
      :                          @91
   918: 33 08                    a1 = 0
   920: 33 07                    a0 = 0
   922: 28 9a 00                 jump @107
      :                          @92
   925: 33 08                    a1 = 0
   927: 33 07 00 00 01           a0 = 0x10000
   932: 01                       fallthrough
      :                          @93
   933: 82 10 f0 00              ra = u64 [sp + 0xf0]
   937: 82 15 e8 00              s0 = u64 [sp + 0xe8]
   941: 82 16 e0 00              s1 = u64 [sp + 0xe0]
   945: 95 11 f8 00              sp = sp + 0xf8
   949: 32 00                    ret
      :                          @94
   951: e4 65 08                 a1 = maxu(s0, s1)
   954: c9 68 08                 a1 = a1 - s1
   957: 95 75 01                 s0 = a0 + 0x1
   960: 33 07 01                 a0 = 0x1
   963: e4 78 07                 a0 = maxu(a1, a0)
   966: 33 09 02                 a2 = 0x2
   969: 95 7a ff                 a3 = a0 + 0xffffffffffffffff
   972: ae 98 09                 jump @96 if a1 >=u a2
      :                          @95
   975: 33 06                    s1 = 0
   977: 33 08                    a1 = 0
   979: 28 54                    jump @106
      :                          @96
   981: 7d 57                    a0 = i8 [s0]
   983: 33 06 01                 s1 = 0x1
   986: 59 07 37                 jump @103 if a0 >=s 0
      :                          @97
   989: 84 77 ff 00              a0 = a0 & 0xff
   993: 33 06 02                 s1 = 0x2
   996: 53 27 c0 00 2d           jump @103 if a0 <u 192
      :                          @98
  1001: 33 06 03                 s1 = 0x3
  1004: 53 27 e0 00 25           jump @103 if a0 <u 224
      :                          @99
  1009: 33 06 04                 s1 = 0x4
  1012: 53 27 f0 00 1d           jump @103 if a0 <u 240
      :                          @100
  1017: 33 06 05                 s1 = 0x5
  1020: 53 27 f8 00 15           jump @103 if a0 <u 248
      :                          @101
  1025: 33 06 06                 s1 = 0x6
  1028: 53 27 fc 00 0d           jump @103 if a0 <u 252
      :                          @102
  1033: 88 77 fe 00              a0 = a0 <u 0xfe
  1037: 9a 76 08                 s1 = 0x8 - a0
  1040: 01                       fallthrough
      :                          @103
  1041: 7b 1a 08                 u64 [sp + 0x8] = a3
  1044: ac 6a 23 01              jump @119 if a3 <u s1
      :                          @104
  1048: 64 57                    a0 = s0
  1050: 64 68                    a1 = s1
  1052: 50 10 12 23 0b           ra = 18, jump @330
      :                          @105 [@dyn 9]
  1057: 64 78                    a1 = a0
  1059: 82 1a 08                 a3 = u64 [sp + 0x8]
  1062: 01                       fallthrough
      :                          @106
  1063: c8 65 07                 a0 = s0 + s1
  1066: e4 6a 09                 a2 = maxu(a3, s1)
  1069: c9 69 09                 a2 = a2 - s1
  1072: e6 89 08                 a1 = minu(a2, a1)
  1075: 01                       fallthrough
      :                          @107
  1076: c8 78 08                 a1 = a1 + a0
  1079: 80 88 fc                 a1 = u32 [a1 + 0xfffffffffffffffc]
  1082: 33 09 64                 a2 = 0x64
  1085: 33 0a 64                 a3 = 0x64
  1088: 0a 09                    ecalli 9 // 'new'
  1090: 64 75                    s0 = a0
  1092: 7b 17 a0 00              u64 [sp + 0xa0] = a0
  1096: 48 21 c0 00              u32 [sp + 192] = 0
  1100: 95 17 c0 00              a0 = sp + 0xc0
  1104: 33 08 04                 a1 = 0x4
  1107: 95 19 a0 00              a2 = sp + 0xa0
  1111: 33 0a 04                 a3 = 0x4
  1114: 0a 03                    ecalli 3 // 'write'
  1116: 95 17 10                 a0 = sp + 0x10
  1119: 33 09 80 00              a2 = 0x80
  1123: 33 08                    a1 = 0
  1125: 50 10 14 67 05           ra = 20, jump @224
      :                          @108 [@dyn 10]
  1130: 33 08 20 a1 07           a1 = 0x7a120
  1135: 33 09 64                 a2 = 0x64
  1138: 95 1a 10                 a3 = sp + 0x10
  1141: 64 57                    a0 = s0
  1143: 33 00 16                 ra = 0x16
  1146: 0a 0b                    ecalli 11 // 'transfer'
  1148: 01                       fallthrough
      :                          @109 [@dyn 11]
  1149: 33 09 10 00 03           a2 = 0x30010
  1154: 33 07 00 00 01           a0 = 0x10000
  1159: c8 79 09                 a2 = a2 + a0
  1162: 01                       fallthrough
      :                          @110
  1163: 82 9a                    a3 = u64 [a2]
  1165: 95 a8 20                 a1 = a3 + 0x20
  1168: ac a8 a4 00              jump @116 if a1 <u a3
      :                          @111
  1172: 95 8b 01                 a4 = a1 + 0x1
  1175: 88 bc 01                 a5 = a4 <u 0x1
  1178: d8 b7 0b                 a4 = a0 <u a4
  1181: d4 cb 0b                 a4 = a4 | a5
  1184: 52 0b 94 00              jump @116 if a4 != 0
      :                          @112
  1188: 82 9b                    a4 = u64 [a2]
  1190: ab ab e5                 jump @110 if a4 != a3
      :                          @113
  1193: 7b 98                    u64 [a2] = a1
  1195: 33 0c                    a5 = 0
  1197: 33 07 10 00 04           a0 = 0x40010
  1202: c9 87 07                 a0 = a0 - a1
  1205: 46 17 1f                 u8 [a0 + 31] = 0
  1208: 46 17 1e                 u8 [a0 + 30] = 0
  1211: 46 17 1d                 u8 [a0 + 29] = 0
  1214: 46 17 1c                 u8 [a0 + 28] = 0
  1217: 46 17 1b                 u8 [a0 + 27] = 0
  1220: 46 17 1a                 u8 [a0 + 26] = 0
  1223: 46 17 19                 u8 [a0 + 25] = 0
  1226: 46 17 18                 u8 [a0 + 24] = 0
  1229: 46 17 17                 u8 [a0 + 23] = 0
  1232: 46 17 16                 u8 [a0 + 22] = 0
  1235: 46 17 15                 u8 [a0 + 21] = 0
  1238: 46 17 14                 u8 [a0 + 20] = 0
  1241: 46 17 13                 u8 [a0 + 19] = 0
  1244: 46 17 12                 u8 [a0 + 18] = 0
  1247: 46 17 11                 u8 [a0 + 17] = 0
  1250: 46 17 10                 u8 [a0 + 16] = 0
  1253: 46 17 0f                 u8 [a0 + 15] = 0
  1256: 46 17 0e                 u8 [a0 + 14] = 0
  1259: 46 17 0d                 u8 [a0 + 13] = 0
  1262: 46 17 0c                 u8 [a0 + 12] = 0
  1265: 46 17 0b                 u8 [a0 + 11] = 0
  1268: 46 17 0a                 u8 [a0 + 10] = 0
  1271: 46 17 09                 u8 [a0 + 9] = 0
  1274: 46 17 08                 u8 [a0 + 8] = 0
  1277: 46 17 07                 u8 [a0 + 7] = 0
  1280: 46 17 06                 u8 [a0 + 6] = 0
  1283: 46 17 05                 u8 [a0 + 5] = 0
  1286: 46 17 04                 u8 [a0 + 4] = 0
  1289: 46 17 03                 u8 [a0 + 3] = 0
  1292: 81 18 a0 00              a1 = i32 [sp + 0xa0]
  1296: 46 17 02                 u8 [a0 + 2] = 0
  1299: 46 17 01                 u8 [a0 + 1] = 0
  1302: 46 07                    u8 [a0 + 0] = 0
  1304: 98 89 18                 a2 = a1 >> 0x18
  1307: 78 79 03                 u8 [a0 + 0x3] = a2
  1310: 98 89 10                 a2 = a1 >> 0x10
  1313: 78 79 02                 u8 [a0 + 0x2] = a2
  1316: 98 89 08                 a2 = a1 >> 0x8
  1319: 78 79 01                 u8 [a0 + 0x1] = a2
  1322: 78 78                    u8 [a0] = a1
  1324: 33 08 20                 a1 = 0x20
  1327: 28 76 fe                 jump @93
      :                          @114
  1330: 00                       trap
      :                          @115
  1331: 00                       trap
      :                          @116
  1332: 00                       trap
      :                          @117
  1333: 00                       trap
      :                          @118
  1334: 00                       trap
      :                          @119
  1335: 00                       trap
      :                          @120 [export #2: 'on_transfer']
  1336: 33 07 00 00 01           a0 = 0x10000
  1341: 33 08                    a1 = 0
  1343: 32 00                    ret
      :                          @121
  1345: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1348: 7b 10 40                 u64 [sp + 0x40] = ra
  1351: 7b 15 38                 u64 [sp + 0x38] = s0
  1354: 7b 16 30                 u64 [sp + 0x30] = s1
  1357: c8 89 09                 a2 = a2 + a1
  1360: ac 89 52                 jump @129 if a2 <u a1
      :                          @122
  1363: 64 75                    s0 = a0
  1365: 82 77                    a0 = u64 [a0]
  1367: 97 78 01                 a1 = a0 << 0x1
  1370: 33 0a 08                 a3 = 0x8
  1373: e4 a9 09                 a2 = maxu(a2, a3)
  1376: e4 98 06                 s1 = maxu(a1, a2)
  1379: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1382: 98 88 3f                 a1 = a1 >> 0x3f
  1385: 51 07 12                 jump @124 if a0 == 0
      :                          @123
  1388: 82 59 08                 a2 = u64 [s0 + 0x8]
  1391: 7b 19 18                 u64 [sp + 0x18] = a2
  1394: 49 11 20 01              u64 [sp + 32] = 0x1
  1398: 7b 17 28                 u64 [sp + 0x28] = a0
  1401: 28 06                    jump @125
      :                          @124
  1403: 49 11 20                 u64 [sp + 32] = 0
  1406: 01                       fallthrough
      :                          @125
  1407: 64 17                    a0 = sp
  1409: 95 1a 18                 a3 = sp + 0x18
  1412: 64 69                    a2 = s1
  1414: 50 10 18 32              ra = 24, jump @133
      :                          @126 [@dyn 12]
  1418: 82 18                    a1 = u64 [sp]
  1420: 82 17 08                 a0 = u64 [sp + 0x8]
  1423: 51 08 14                 jump @130 if a1 == 0
      :                          @127
  1426: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1436: aa 87 0d                 jump @131 if a0 == a1
      :                          @128
  1439: 52 07 18                 jump @132 if a0 != 0
      :                          @129
  1442: 00                       trap
      :                          @130
  1443: 7b 57 08                 u64 [s0 + 0x8] = a0
  1446: 7b 56                    u64 [s0] = s1
  1448: 01                       fallthrough
      :                          @131
  1449: 82 10 40                 ra = u64 [sp + 0x40]
  1452: 82 15 38                 s0 = u64 [sp + 0x38]
  1455: 82 16 30                 s1 = u64 [sp + 0x30]
  1458: 95 11 48                 sp = sp + 0x48
  1461: 32 00                    ret
      :                          @132
  1463: 00                       trap
      :                          @133
  1464: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  1467: 7b 10 30                 u64 [sp + 0x30] = ra
  1470: 7b 15 28                 u64 [sp + 0x28] = s0
  1473: 7b 16 20                 u64 [sp + 0x20] = s1
  1476: 64 95                    s0 = a2
  1478: 64 72                    t0 = a0
  1480: 51 08 79                 jump @143 if a1 == 0
      :                          @134
  1483: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1486: 51 07 7c                 jump @144 if a0 == 0
      :                          @135
  1489: 82 a9 10                 a2 = u64 [a3 + 0x10]
  1492: 51 09 aa 00              jump @151 if a2 == 0
      :                          @136
  1496: 82 a8                    a1 = u64 [a3]
  1498: 33 06 10 00 03           s1 = 0x30010
  1503: 33 03 00 00 01           t1 = 0x10000
  1508: c8 36 06                 s1 = s1 + t1
  1511: 01                       fallthrough
      :                          @137
  1512: 82 6a                    a3 = u64 [s1]
  1514: c8 5a 07                 a0 = a3 + s0
  1517: ac a7 cf 00              jump @157 if a0 <u a3
      :                          @138
  1521: 95 7b 01                 a4 = a0 + 0x1
  1524: 88 bc 01                 a5 = a4 <u 0x1
  1527: d8 b3 0b                 a4 = t1 <u a4
  1530: d4 cb 0b                 a4 = a4 | a5
  1533: 52 0b bf 00              jump @157 if a4 != 0
      :                          @139
  1537: 82 6b                    a4 = u64 [s1]
  1539: ab ab e5                 jump @137 if a4 != a3
      :                          @140
  1542: 7b 67                    u64 [s1] = a0
  1544: 33 0c                    a5 = 0
  1546: 7b 12 18                 u64 [sp + 0x18] = t0
  1549: 33 0a 10 00 03           a3 = 0x30010
  1554: 33 0b 00 00 01           a4 = 0x10000
  1559: 7b 1a                    u64 [sp] = a3
  1561: c8 ba 0a                 a3 = a3 + a4
  1564: c9 7a 07                 a0 = a3 - a0
  1567: 7b 17 10                 u64 [sp + 0x10] = a0
  1570: 7b 18 08                 u64 [sp + 0x8] = a1
  1573: 64 96                    s1 = a2
  1575: 50 10 1a f3 02           ra = 26, jump @206
      :                          @141 [@dyn 13]
  1580: 54 36 00 00 01 98 00     jump @158 if s1 <=u 65536
      :                          @142
  1587: 82 12 18                 t0 = u64 [sp + 0x18]
  1590: 82 18 10                 a1 = u64 [sp + 0x10]
  1593: 33 07                    a0 = 0
  1595: 7b 28 08                 u64 [t0 + 0x8] = a1
  1598: 28 b5 00                 jump @164
      :                          @143
  1601: 49 12 08                 u64 [t0 + 8] = 0
  1604: 33 07 01                 a0 = 0x1
  1607: 28 ac 00                 jump @164
      :                          @144
  1610: 33 09 10 00 03           a2 = 0x30010
  1615: 33 07 00 00 01           a0 = 0x10000
  1620: c8 79 09                 a2 = a2 + a0
  1623: 01                       fallthrough
      :                          @145
  1624: 82 9a                    a3 = u64 [a2]
  1626: c8 5a 08                 a1 = a3 + s0
  1629: ac a8 5f                 jump @157 if a1 <u a3
      :                          @146
  1632: 95 8b 01                 a4 = a1 + 0x1
  1635: 88 bc 01                 a5 = a4 <u 0x1
  1638: d8 b7 0b                 a4 = a0 <u a4
  1641: d4 cb 0b                 a4 = a4 | a5
  1644: 52 0b 50                 jump @157 if a4 != 0
      :                          @147
  1647: 82 9b                    a4 = u64 [a2]
  1649: ab ab e7                 jump @145 if a4 != a3
      :                          @148
  1652: 7b 98                    u64 [a2] = a1
  1654: 33 0c                    a5 = 0
  1656: 01                       fallthrough
      :                          @149
  1657: ab ab df                 jump @145 if a4 != a3
      :                          @150
  1660: 28 31                    jump @156
      :                          @151
  1662: 33 09 10 00 03           a2 = 0x30010
  1667: 33 07 00 00 01           a0 = 0x10000
  1672: c8 79 09                 a2 = a2 + a0
  1675: 01                       fallthrough
      :                          @152
  1676: 82 9a                    a3 = u64 [a2]
  1678: c8 5a 08                 a1 = a3 + s0
  1681: ac a8 2b                 jump @157 if a1 <u a3
      :                          @153
  1684: 95 8b 01                 a4 = a1 + 0x1
  1687: 88 bc 01                 a5 = a4 <u 0x1
  1690: d8 b7 0b                 a4 = a0 <u a4
  1693: d4 cb 0b                 a4 = a4 | a5
  1696: 52 0b 1c                 jump @157 if a4 != 0
      :                          @154
  1699: 82 9b                    a4 = u64 [a2]
  1701: ab ab e7                 jump @152 if a4 != a3
      :                          @155
  1704: 7b 98                    u64 [a2] = a1
  1706: 33 0c                    a5 = 0
  1708: 01                       fallthrough
      :                          @156
  1709: 33 07 10 00 04           a0 = 0x40010
  1714: c9 87 08                 a1 = a0 - a1
  1717: 33 07                    a0 = 0
  1719: 7b 28 08                 u64 [t0 + 0x8] = a1
  1722: 28 39                    jump @164
      :                          @157
  1724: 33 07 01                 a0 = 0x1
  1727: 7b 27 08                 u64 [t0 + 0x8] = a0
  1730: 28 31                    jump @164
      :                          @158
  1732: 64 6c                    a5 = s1
  1734: 82 17                    a0 = u64 [sp]
  1736: 95 77 00 00 01           a0 = a0 + 0x10000
  1741: 82 12 18                 t0 = u64 [sp + 0x18]
  1744: 82 16 08                 s1 = u64 [sp + 0x8]
  1747: 01                       fallthrough
      :                          @159
  1748: 82 78                    a1 = u64 [a0]
  1750: c9 87 09                 a2 = a0 - a1
  1753: ab 69 11                 jump @163 if a2 != s1
      :                          @160
  1756: c9 c8 09                 a2 = a1 - a5
  1759: 01                       fallthrough
      :                          @161
  1760: 82 7a                    a3 = u64 [a0]
  1762: ab 8a f2                 jump @159 if a3 != a1
      :                          @162
  1765: 7b 79                    u64 [a0] = a2
  1767: 33 0b                    a4 = 0
  1769: 01                       fallthrough
      :                          @163
  1770: 82 18 10                 a1 = u64 [sp + 0x10]
  1773: 33 07                    a0 = 0
  1775: 7b 28 08                 u64 [t0 + 0x8] = a1
  1778: 01                       fallthrough
      :                          @164
  1779: 7b 25 10                 u64 [t0 + 0x10] = s0
  1782: 7b 27                    u64 [t0] = a0
  1784: 82 10 30                 ra = u64 [sp + 0x30]
  1787: 82 15 28                 s0 = u64 [sp + 0x28]
  1790: 82 16 20                 s1 = u64 [sp + 0x20]
  1793: 95 11 38                 sp = sp + 0x38
  1796: 32 00                    ret
      :                          @165
  1798: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1801: 7b 10 40                 u64 [sp + 0x40] = ra
  1804: 7b 15 38                 u64 [sp + 0x38] = s0
  1807: 7b 16 30                 u64 [sp + 0x30] = s1
  1810: 95 88 01                 a1 = a1 + 0x1
  1813: 51 08 53                 jump @173 if a1 == 0
      :                          @166
  1816: 64 75                    s0 = a0
  1818: 82 77                    a0 = u64 [a0]
  1820: 97 79 01                 a2 = a0 << 0x1
  1823: 33 0a 08                 a3 = 0x8
  1826: e4 a8 08                 a1 = maxu(a1, a3)
  1829: e4 89 06                 s1 = maxu(a2, a1)
  1832: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1835: 98 88 3f                 a1 = a1 >> 0x3f
  1838: 51 07 12                 jump @168 if a0 == 0
      :                          @167
  1841: 82 59 08                 a2 = u64 [s0 + 0x8]
  1844: 7b 19 18                 u64 [sp + 0x18] = a2
  1847: 49 11 20 01              u64 [sp + 32] = 0x1
  1851: 7b 17 28                 u64 [sp + 0x28] = a0
  1854: 28 06                    jump @169
      :                          @168
  1856: 49 11 20                 u64 [sp + 32] = 0
  1859: 01                       fallthrough
      :                          @169
  1860: 64 17                    a0 = sp
  1862: 95 1a 18                 a3 = sp + 0x18
  1865: 64 69                    a2 = s1
  1867: 50 10 1c 6d fe           ra = 28, jump @133
      :                          @170 [@dyn 14]
  1872: 82 18                    a1 = u64 [sp]
  1874: 82 17 08                 a0 = u64 [sp + 0x8]
  1877: 51 08 14                 jump @174 if a1 == 0
      :                          @171
  1880: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1890: aa 87 0d                 jump @175 if a0 == a1
      :                          @172
  1893: 52 07 18                 jump @176 if a0 != 0
      :                          @173
  1896: 00                       trap
      :                          @174
  1897: 7b 57 08                 u64 [s0 + 0x8] = a0
  1900: 7b 56                    u64 [s0] = s1
  1902: 01                       fallthrough
      :                          @175
  1903: 82 10 40                 ra = u64 [sp + 0x40]
  1906: 82 15 38                 s0 = u64 [sp + 0x38]
  1909: 82 16 30                 s1 = u64 [sp + 0x30]
  1912: 95 11 48                 sp = sp + 0x48
  1915: 32 00                    ret
      :                          @176
  1917: 00                       trap
      :                          @177 [@dyn 15]
  1918: 82 72                    t0 = u64 [a0]
  1920: 33 09 00 00 ff           a2 = 0xffffffffffff0000
  1925: 95 2a ff ff fe           a3 = t0 + 0xfffffffffffeffff
  1930: ac 9a 28                 jump @183 if a3 <u a2
      :                          @178
  1933: 82 77 08                 a0 = u64 [a0 + 0x8]
  1936: 33 09 10 00 03           a2 = 0x30010
  1941: 95 99 00 00 01           a2 = a2 + 0x10000
  1946: 01                       fallthrough
      :                          @179
  1947: 82 9a                    a3 = u64 [a2]
  1949: c9 a9 0b                 a4 = a2 - a3
  1952: ab 7b 12                 jump @183 if a4 != a0
      :                          @180
  1955: c9 2a 0b                 a4 = a3 - t0
  1958: 01                       fallthrough
      :                          @181
  1959: 82 9c                    a5 = u64 [a2]
  1961: ab ac f2                 jump @179 if a5 != a3
      :                          @182
  1964: 7b 9b                    u64 [a2] = a4
  1966: 33 08                    a1 = 0
  1968: 32 00                    ret
      :                          @183
  1970: 32 00                    ret
      :                          @184 [@dyn 16]
  1972: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  1975: 7b 10 18                 u64 [sp + 0x18] = ra
  1978: 7b 15 10                 u64 [sp + 0x10] = s0
  1981: 7b 16 08                 u64 [sp + 0x8] = s1
  1984: 64 75                    s0 = a0
  1986: 82 7a 10                 a3 = u64 [a0 + 0x10]
  1989: 82 77                    a0 = u64 [a0]
  1991: c9 a7 07                 a0 = a0 - a3
  1994: 64 96                    s1 = a2
  1996: ac 97 2a                 jump @187 if a0 <u a2
      :                          @185
  1999: 7b 1a                    u64 [sp] = a3
  2001: 82 57 08                 a0 = u64 [s0 + 0x8]
  2004: c8 a7 07                 a0 = a0 + a3
  2007: 64 69                    a2 = s1
  2009: 50 10 22 41 01           ra = 34, jump @206
      :                          @186 [@dyn 17]
  2014: 82 17                    a0 = u64 [sp]
  2016: c8 76 06                 s1 = s1 + a0
  2019: 7b 56 10                 u64 [s0 + 0x10] = s1
  2022: 33 07                    a0 = 0
  2024: 82 10 18                 ra = u64 [sp + 0x18]
  2027: 82 15 10                 s0 = u64 [sp + 0x10]
  2030: 82 16 08                 s1 = u64 [sp + 0x8]
  2033: 95 11 20                 sp = sp + 0x20
  2036: 32 00                    ret
      :                          @187
  2038: 64 57                    a0 = s0
  2040: 7b 18                    u64 [sp] = a1
  2042: 64 a8                    a1 = a3
  2044: 64 69                    a2 = s1
  2046: 50 10 24 43 fd           ra = 36, jump @121
      :                          @188 [@dyn 18]
  2051: 82 18                    a1 = u64 [sp]
  2053: 82 5a 10                 a3 = u64 [s0 + 0x10]
  2056: 28 c7                    jump @185
      :                          @189 [@dyn 19]
  2058: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  2061: 7b 10 20                 u64 [sp + 0x20] = ra
  2064: 7b 15 18                 u64 [sp + 0x18] = s0
  2067: 7b 16 10                 u64 [sp + 0x10] = s1
  2070: 64 86                    s1 = a1
  2072: 83 88                    i32 a1 = a1 + 0
  2074: 33 09 80 00              a2 = 0x80
  2078: 64 7a                    a3 = a0
  2080: ae 98 2b                 jump @194 if a1 >=u a2
      :                          @190
  2083: 82 a8 10                 a1 = u64 [a3 + 0x10]
  2086: 82 a7                    a0 = u64 [a3]
  2088: ab 78 12                 jump @193 if a1 != a0
      :                          @191
  2091: 64 a7                    a0 = a3
  2093: 64 a5                    s0 = a3
  2095: 50 10 28 d7 fe           ra = 40, jump @165
      :                          @192 [@dyn 20]
  2100: 64 5a                    a3 = s0
  2102: 82 58 10                 a1 = u64 [s0 + 0x10]
  2105: 01                       fallthrough
      :                          @193
  2106: 82 a7 08                 a0 = u64 [a3 + 0x8]
  2109: c8 87 07                 a0 = a0 + a1
  2112: 78 76                    u8 [a0] = s1
  2114: 95 88 01                 a1 = a1 + 0x1
  2117: 7b a8 10                 u64 [a3 + 0x10] = a1
  2120: 28 ab 00                 jump @202
      :                          @194
  2123: 8b 67 0b                 i32 a0 = s1 >> 0xb
  2126: 48 11 0c                 u32 [sp + 12] = 0
  2129: 52 07 1c                 jump @196 if a0 != 0
      :                          @195
  2132: 98 67 06                 a0 = s1 >> 0x6
  2135: 86 77 c0 00              a0 = a0 | 0xc0
  2139: 78 17 0c                 u8 [sp + 0xc] = a0
  2142: 84 67 3f                 a0 = s1 & 0x3f
  2145: 86 77 80 00              a0 = a0 | 0x80
  2149: 78 17 0d                 u8 [sp + 0xd] = a0
  2152: 33 06 02                 s1 = 0x2
  2155: 28 63                    jump @199
      :                          @196
  2157: 8b 67 10                 i32 a0 = s1 >> 0x10
  2160: 52 07 29                 jump @198 if a0 != 0
      :                          @197
  2163: 98 67 0c                 a0 = s1 >> 0xc
  2166: 86 77 e0 00              a0 = a0 | 0xe0
  2170: 78 17 0c                 u8 [sp + 0xc] = a0
  2173: 97 67 34                 a0 = s1 << 0x34
  2176: 98 77 3a                 a0 = a0 >> 0x3a
  2179: 95 77 80 00              a0 = a0 + 0x80
  2183: 78 17 0d                 u8 [sp + 0xd] = a0
  2186: 84 67 3f                 a0 = s1 & 0x3f
  2189: 86 77 80 00              a0 = a0 | 0x80
  2193: 78 17 0e                 u8 [sp + 0xe] = a0
  2196: 33 06 03                 s1 = 0x3
  2199: 28 37                    jump @199
      :                          @198
  2201: 97 67 2b                 a0 = s1 << 0x2b
  2204: 98 77 3d                 a0 = a0 >> 0x3d
  2207: 95 77 f0 00              a0 = a0 + 0xf0
  2211: 78 17 0c                 u8 [sp + 0xc] = a0
  2214: 97 67 2e                 a0 = s1 << 0x2e
  2217: 98 77 3a                 a0 = a0 >> 0x3a
  2220: 95 77 80 00              a0 = a0 + 0x80
  2224: 78 17 0d                 u8 [sp + 0xd] = a0
  2227: 97 67 34                 a0 = s1 << 0x34
  2230: 98 77 3a                 a0 = a0 >> 0x3a
  2233: 95 77 80 00              a0 = a0 + 0x80
  2237: 78 17 0e                 u8 [sp + 0xe] = a0
  2240: 84 67 3f                 a0 = s1 & 0x3f
  2243: 86 77 80 00              a0 = a0 | 0x80
  2247: 78 17 0f                 u8 [sp + 0xf] = a0
  2250: 33 06 04                 s1 = 0x4
  2253: 01                       fallthrough
      :                          @199
  2254: 82 a5 10                 s0 = u64 [a3 + 0x10]
  2257: 82 a7                    a0 = u64 [a3]
  2259: c9 57 07                 a0 = a0 - s0
  2262: ac 67 2d                 jump @203 if a0 <u s1
      :                          @200
  2265: 7b 1a                    u64 [sp] = a3
  2267: 82 a7 08                 a0 = u64 [a3 + 0x8]
  2270: c8 57 07                 a0 = a0 + s0
  2273: 95 18 0c                 a1 = sp + 0xc
  2276: 64 69                    a2 = s1
  2278: 50 10 2a 34              ra = 42, jump @206
      :                          @201 [@dyn 21]
  2282: c8 56 06                 s1 = s1 + s0
  2285: 82 17                    a0 = u64 [sp]
  2287: 7b 76 10                 u64 [a0 + 0x10] = s1
  2290: 01                       fallthrough
      :                          @202
  2291: 33 07                    a0 = 0
  2293: 82 10 20                 ra = u64 [sp + 0x20]
  2296: 82 15 18                 s0 = u64 [sp + 0x18]
  2299: 82 16 10                 s1 = u64 [sp + 0x10]
  2302: 95 11 28                 sp = sp + 0x28
  2305: 32 00                    ret
      :                          @203
  2307: 64 a7                    a0 = a3
  2309: 64 58                    a1 = s0
  2311: 64 69                    a2 = s1
  2313: 64 a5                    s0 = a3
  2315: 50 10 2c 36 fc           ra = 44, jump @121
      :                          @204 [@dyn 22]
  2320: 64 5a                    a3 = s0
  2322: 82 55 10                 s0 = u64 [s0 + 0x10]
  2325: 28 c4                    jump @200
      :                          @205 [@dyn 23]
  2327: 28 45 04                 jump @292
      :                          @206
  2330: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  2333: 7b 10 18                 u64 [sp + 0x18] = ra
  2336: 7b 15 10                 u64 [sp + 0x10] = s0
  2339: 7b 16 08                 u64 [sp + 0x8] = s1
  2342: 53 19 10 64              jump @215 if a2 <u 16
      :                          @207
  2346: 8d 7a                    i32 a3 = -a0
  2348: 84 a2 07                 t0 = a3 & 0x7
  2351: c8 27 0b                 a4 = a0 + t0
  2354: 51 02 15                 jump @210 if t0 == 0
      :                          @208
  2357: 64 8c                    a5 = a1
  2359: 64 75                    s0 = a0
  2361: 01                       fallthrough
      :                          @209
  2362: 7c ca                    a3 = u8 [a5]
  2364: 78 5a                    u8 [s0] = a3
  2366: 95 55 01                 s0 = s0 + 0x1
  2369: 95 cc 01                 a5 = a5 + 0x1
  2372: ac b5 f6                 jump @209 if s0 <u a4
      :                          @210
  2375: c8 28 03                 t1 = a1 + t0
  2378: c9 29 02                 t0 = a2 - t0
  2381: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  2384: 84 38 07                 a1 = t1 & 0x7
  2387: c8 4b 0a                 a3 = a4 + t2
  2390: 51 08 3b                 jump @217 if a1 == 0
      :                          @211
  2393: 58 04 4b                 jump @220 if t2 <=s 0
      :                          @212
  2396: 97 38 03                 a1 = t1 << 0x3
  2399: 84 80 38                 ra = a1 & 0x38
  2402: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  2405: 82 c5                    s0 = u64 [a5]
  2407: 8d 88                    i32 a1 = -a1
  2409: 84 88 38                 a1 = a1 & 0x38
  2412: 95 cc 08                 a5 = a5 + 0x8
  2415: 01                       fallthrough
      :                          @213
  2416: 82 c6                    s1 = u64 [a5]
  2418: d0 05 05                 s0 = s0 >> ra
  2421: cf 86 09                 a2 = s1 << a1
  2424: d4 59 09                 a2 = a2 | s0
  2427: 7b b9                    u64 [a4] = a2
  2429: 95 bb 08                 a4 = a4 + 0x8
  2432: 95 cc 08                 a5 = a5 + 0x8
  2435: 64 65                    s0 = s1
  2437: ac ab eb                 jump @213 if a4 <u a3
      :                          @214
  2440: 28 1c                    jump @220
      :                          @215
  2442: 64 7a                    a3 = a0
  2444: 52 09 21                 jump @221 if a2 != 0
      :                          @216
  2447: 28 2f                    jump @223
      :                          @217
  2449: 58 04 13                 jump @220 if t2 <=s 0
      :                          @218
  2452: 64 38                    a1 = t1
  2454: 01                       fallthrough
      :                          @219
  2455: 82 89                    a2 = u64 [a1]
  2457: 7b b9                    u64 [a4] = a2
  2459: 95 bb 08                 a4 = a4 + 0x8
  2462: 95 88 08                 a1 = a1 + 0x8
  2465: ac ab f6                 jump @219 if a4 <u a3
      :                          @220
  2468: c8 43 08                 a1 = t1 + t2
  2471: 84 29 07                 a2 = t0 & 0x7
  2474: 51 09 14                 jump @223 if a2 == 0
      :                          @221
  2477: c8 a9 09                 a2 = a2 + a3
  2480: 01                       fallthrough
      :                          @222
  2481: 7c 8b                    a4 = u8 [a1]
  2483: 78 ab                    u8 [a3] = a4
  2485: 95 aa 01                 a3 = a3 + 0x1
  2488: 95 88 01                 a1 = a1 + 0x1
  2491: ac 9a f6                 jump @222 if a3 <u a2
      :                          @223
  2494: 82 10 18                 ra = u64 [sp + 0x18]
  2497: 82 15 10                 s0 = u64 [sp + 0x10]
  2500: 82 16 08                 s1 = u64 [sp + 0x8]
  2503: 95 11 20                 sp = sp + 0x20
  2506: 32 00                    ret
      :                          @224
  2508: 8d 7a                    i32 a3 = -a0
  2510: 84 aa 07                 a3 = a3 & 0x7
  2513: c8 a7 0b                 a4 = a0 + a3
  2516: 51 0a 0e                 jump @227 if a3 == 0
      :                          @225
  2519: 64 7c                    a5 = a0
  2521: 01                       fallthrough
      :                          @226
  2522: 78 c8                    u8 [a5] = a1
  2524: 95 cc 01                 a5 = a5 + 0x1
  2527: ac bc fb                 jump @226 if a5 <u a4
      :                          @227
  2530: c9 a9 03                 t1 = a2 - a3
  2533: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  2536: c8 cb 0a                 a3 = a4 + a5
  2539: 58 0c 1d                 jump @230 if a5 <=s 0
      :                          @228
  2542: 84 82 ff 00              t0 = a1 & 0xff
  2546: 14 09 01 01 01 01 01 01 01 01 a2 = 0x101010101010101
  2556: ca 92 0c                 a5 = t0 * a2
  2559: 01                       fallthrough
      :                          @229
  2560: 7b bc                    u64 [a4] = a5
  2562: 95 bb 08                 a4 = a4 + 0x8
  2565: ac ab fb                 jump @229 if a4 <u a3
      :                          @230
  2568: 84 39 07                 a2 = t1 & 0x7
  2571: 52 09 05                 jump @232 if a2 != 0
      :                          @231
  2574: 28 0e                    jump @234
      :                          @232
  2576: c8 a9 09                 a2 = a2 + a3
  2579: 01                       fallthrough
      :                          @233
  2580: 78 a8                    u8 [a3] = a1
  2582: 95 aa 01                 a3 = a3 + 0x1
  2585: ac 9a fb                 jump @233 if a3 <u a2
      :                          @234
  2588: 32 00                    ret
      :                          @235 [@dyn 24]
  2590: 82 77                    a0 = u64 [a0]
  2592: 01                       fallthrough
      :                          @236
  2593: 28                       jump @236
      :                          @237 [@dyn 25]
  2594: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  2598: 7b 10 80 00              u64 [sp + 0x80] = ra
  2602: 7b 15 78                 u64 [sp + 0x78] = s0
  2605: 7b 16 70                 u64 [sp + 0x70] = s1
  2608: 82 7a                    a3 = u64 [a0]
  2610: 98 ab 04                 a4 = a3 >> 0x4
  2613: 33 07 27                 a0 = 0x27
  2616: 7b 18 20                 u64 [sp + 0x20] = a1
  2619: 53 2b 71 02 81 00        jump @240 if a4 <u 625
      :                          @238
  2625: 33 07 27                 a0 = 0x27
  2628: 95 18 6e                 a1 = sp + 0x6e
  2631: 3a 09 00 00 03           a2 = u64 [0x30000]
  2636: 7b 19 40                 u64 [sp + 0x40] = a2
  2639: 49 11 38 f0 d8 00        u64 [sp + 56] = 0xd8f0
  2645: 33 00 7b 14              ra = 0x147b
  2649: 33 04 30 00 01           t2 = 0x10030
  2654: 33 03 ff e0 f5 05        t1 = 0x5f5e0ff
  2660: 01                       fallthrough
      :                          @239
  2661: 64 ac                    a5 = a3
  2663: 82 19 40                 a2 = u64 [sp + 0x40]
  2666: d6 9a 0a                 a3 = a3 mulhu a2
  2669: 98 aa 0b                 a3 = a3 >> 0xb
  2672: 82 19 38                 a2 = u64 [sp + 0x38]
  2675: c0 9a 0b                 i32 a4 = a3 * a2
  2678: c8 cb 09                 a2 = a4 + a5
  2681: 97 9b 30                 a4 = a2 << 0x30
  2684: 98 bb 32                 a4 = a4 >> 0x32
  2687: ca 0b 0b                 a4 = a4 * ra
  2690: 98 b2 11                 t0 = a4 >> 0x11
  2693: 98 bb 10                 a4 = a4 >> 0x10
  2696: 84 bb fe 07              a4 = a4 & 0x7fe
  2700: 96 26 9c                 s1 = t0 * 0xffffffffffffff9c
  2703: c8 69 09                 a2 = a2 + s1
  2706: 97 99 31                 a2 = a2 << 0x31
  2709: 98 99 30                 a2 = a2 >> 0x30
  2712: c8 4b 0b                 a4 = a4 + t2
  2715: 7c b6                    s1 = u8 [a4]
  2717: 7c bb 01                 a4 = u8 [a4 + 0x1]
  2720: c8 49 09                 a2 = a2 + t2
  2723: 7c 95 01                 s0 = u8 [a2 + 0x1]
  2726: 7c 99                    a2 = u8 [a2]
  2728: 78 8b ff                 u8 [a1 + 0xffffffffffffffff] = a4
  2731: 78 86 fe                 u8 [a1 + 0xfffffffffffffffe] = s1
  2734: 78 85 01                 u8 [a1 + 0x1] = s0
  2737: 78 89                    u8 [a1] = a2
  2739: 95 77 fc                 a0 = a0 + 0xfffffffffffffffc
  2742: 95 88 fc                 a1 = a1 + 0xfffffffffffffffc
  2745: ac c3 ac                 jump @239 if t1 <u a5
      :                          @240
  2748: 54 1a 63 3b              jump @242 if a3 <=u 99
      :                          @241
  2752: 97 a8 30                 a1 = a3 << 0x30
  2755: 98 88 32                 a1 = a1 >> 0x32
  2758: 96 88 7b 14              a1 = a1 * 0x147b
  2762: 98 88 11                 a1 = a1 >> 0x11
  2765: 96 89 9c                 a2 = a1 * 0xffffffffffffff9c
  2768: c8 a9 09                 a2 = a2 + a3
  2771: 97 99 31                 a2 = a2 << 0x31
  2774: 98 99 30                 a2 = a2 >> 0x30
  2777: 95 77 fe                 a0 = a0 + 0xfffffffffffffffe
  2780: 33 0a 30 00 01           a3 = 0x10030
  2785: c8 a9 09                 a2 = a2 + a3
  2788: 7c 9a 01                 a3 = u8 [a2 + 0x1]
  2791: 7c 99                    a2 = u8 [a2]
  2793: 95 1b 49                 a4 = sp + 0x49
  2796: c8 7b 0b                 a4 = a4 + a0
  2799: 78 ba 01                 u8 [a4 + 0x1] = a3
  2802: 78 b9                    u8 [a4] = a2
  2804: 64 8a                    a3 = a1
  2806: 01                       fallthrough
      :                          @242
  2807: 82 1b 20                 a4 = u64 [sp + 0x20]
  2810: 55 1a 0a 14              jump @244 if a3 >=u 10
      :                          @243
  2814: 95 75 ff                 s0 = a0 + 0xffffffffffffffff
  2817: 95 17 49                 a0 = sp + 0x49
  2820: c8 57 07                 a0 = a0 + s0
  2823: 83 a8 30                 i32 a1 = a3 + 0x30
  2826: 78 78                    u8 [a0] = a1
  2828: 28 21                    jump @245
      :                          @244
  2830: 97 aa 01                 a3 = a3 << 0x1
  2833: 95 75 fe                 s0 = a0 + 0xfffffffffffffffe
  2836: 33 07 30 00 01           a0 = 0x10030
  2841: c8 a7 07                 a0 = a0 + a3
  2844: 7c 78 01                 a1 = u8 [a0 + 0x1]
  2847: 7c 77                    a0 = u8 [a0]
  2849: 95 19 49                 a2 = sp + 0x49
  2852: c8 59 09                 a2 = a2 + s0
  2855: 78 98 01                 u8 [a2 + 0x1] = a1
  2858: 78 97                    u8 [a2] = a0
  2860: 01                       fallthrough
      :                          @245
  2861: 80 b7 34                 a0 = u32 [a4 + 0x34]
  2864: 95 18 49                 a1 = sp + 0x49
  2867: c8 58 08                 a1 = a1 + s0
  2870: 7b 18 18                 u64 [sp + 0x18] = a1
  2873: 84 76 01                 s1 = a0 & 0x1
  2876: 33 09 00 00 11           a2 = 0x110000
  2881: 94 69 2b                 a2 = 0x2b if s1 != 0
  2884: 97 78 3d                 a1 = a0 << 0x3d
  2887: 99 88 3f                 a1 = a1 >>a 0x3f
  2890: 82 bc                    a5 = u64 [a4]
  2892: 33 0a 30 00 01           a3 = 0x10030
  2897: d2 8a 0a                 a3 = a3 & a1
  2900: 9a 58 27                 a1 = 0x27 - s0
  2903: 7b 18 10                 u64 [sp + 0x10] = a1
  2906: 51 0c 27                 jump @251 if a5 == 0
      :                          @246
  2909: 82 bc 08                 a5 = u64 [a4 + 0x8]
  2912: c8 68 08                 a1 = a1 + s1
  2915: ae c8 1e                 jump @251 if a1 >=u a5
      :                          @247
  2918: 84 77 08                 a0 = a0 & 0x8
  2921: 52 07 42                 jump @255 if a0 != 0
      :                          @248
  2924: 7c b7 38                 a0 = u8 [a4 + 0x38]
  2927: c9 8c 0c                 a5 = a5 - a1
  2930: 5a 17 01 8e 00           jump @262 if a0 >s 1
      :                          @249
  2935: 52 07 9b 00              jump @264 if a0 != 0
      :                          @250
  2939: 7b 1c 08                 u64 [sp + 0x8] = a5
  2942: 28 9a 00                 jump @265
      :                          @251
  2945: 82 b5 20                 s0 = u64 [a4 + 0x20]
  2948: 82 b6 28                 s1 = u64 [a4 + 0x28]
  2951: 64 57                    a0 = s0
  2953: 64 68                    a1 = s1
  2955: 50 10 34 73 01           ra = 52, jump @285
      :                          @252 [@dyn 26]
  2960: 33 08 01                 a1 = 0x1
  2963: 52 07 c2 00              jump @270 if a0 != 0
      :                          @253
  2967: 82 6a 18                 a3 = u64 [s1 + 0x18]
  2970: 64 57                    a0 = s0
  2972: 82 18 18                 a1 = u64 [sp + 0x18]
  2975: 82 19 10                 a2 = u64 [sp + 0x10]
  2978: b4 a0 01 36              ra = 54, jump [a3]
      :                          @254 [@dyn 27]
  2982: 64 78                    a1 = a0
  2984: 28 ad 00                 jump @270
      :                          @255
  2987: 7b 1c 30                 u64 [sp + 0x30] = a5
  2990: 81 b7 30                 a0 = i32 [a4 + 0x30]
  2993: 7b 17 08                 u64 [sp + 0x8] = a0
  2996: 7c b8 38                 a1 = u8 [a4 + 0x38]
  2999: 7b 18                    u64 [sp] = a1
  3001: 82 b7 20                 a0 = u64 [a4 + 0x20]
  3004: 82 b8 28                 a1 = u64 [a4 + 0x28]
  3007: 48 1b 30 30              u32 [a4 + 48] = 0x30
  3011: 46 1b 38 01              u8 [a4 + 56] = 0x1
  3015: 7b 17 38                 u64 [sp + 0x38] = a0
  3018: 7b 18 40                 u64 [sp + 0x40] = a1
  3021: 50 10 38 31 01           ra = 56, jump @285
      :                          @256 [@dyn 28]
  3026: 52 07 7f                 jump @269 if a0 != 0
      :                          @257
  3029: 82 17 30                 a0 = u64 [sp + 0x30]
  3032: c8 75 05                 s0 = s0 + a0
  3035: c9 65 05                 s0 = s0 - s1
  3038: 95 55 da                 s0 = s0 + 0xffffffffffffffda
  3041: 82 16 38                 s1 = u64 [sp + 0x38]
  3044: 01                       fallthrough
      :                          @258
  3045: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  3048: 51 05 d6 00              jump @280 if s0 == 0
      :                          @259
  3052: 82 17 40                 a0 = u64 [sp + 0x40]
  3055: 82 79 20                 a2 = u64 [a0 + 0x20]
  3058: 33 08 30                 a1 = 0x30
  3061: 64 67                    a0 = s1
  3063: b4 90 01 3a              ra = 58, jump [a2]
      :                          @260 [@dyn 29]
  3067: 51 07 ea                 jump @258 if a0 == 0
      :                          @261
  3070: 28 53                    jump @269
      :                          @262
  3072: 52 17 02 12              jump @264 if a0 != 2
      :                          @263
  3076: 98 c7 01                 a0 = a5 >> 0x1
  3079: 95 c8 01                 a1 = a5 + 0x1
  3082: 98 88 01                 a1 = a1 >> 0x1
  3085: 7b 18 08                 u64 [sp + 0x8] = a1
  3088: 28 08                    jump @265
      :                          @264
  3090: 64 c7                    a0 = a5
  3092: 49 11 08                 u64 [sp + 8] = 0
  3095: 01                       fallthrough
      :                          @265
  3096: 82 b8 20                 a1 = u64 [a4 + 0x20]
  3099: 7b 18 30                 u64 [sp + 0x30] = a1
  3102: 82 b8 28                 a1 = u64 [a4 + 0x28]
  3105: 7b 18 40                 u64 [sp + 0x40] = a1
  3108: 81 b8 30                 a1 = i32 [a4 + 0x30]
  3111: 7b 18 38                 u64 [sp + 0x38] = a1
  3114: 95 75 01                 s0 = a0 + 0x1
  3117: 7b 19 28                 u64 [sp + 0x28] = a2
  3120: 01                       fallthrough
      :                          @266
  3121: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  3124: 51 05 33                 jump @271 if s0 == 0
      :                          @267
  3127: 82 17 40                 a0 = u64 [sp + 0x40]
  3130: 82 7b 20                 a4 = u64 [a0 + 0x20]
  3133: 82 17 30                 a0 = u64 [sp + 0x30]
  3136: 82 18 38                 a1 = u64 [sp + 0x38]
  3139: 64 a6                    s1 = a3
  3141: b4 b0 01 3c              ra = 60, jump [a4]
      :                          @268 [@dyn 30]
  3145: 64 6a                    a3 = s1
  3147: 82 19 28                 a2 = u64 [sp + 0x28]
  3150: 51 07 e3                 jump @266 if a0 == 0
      :                          @269
  3153: 33 08 01                 a1 = 0x1
  3156: 01                       fallthrough
      :                          @270
  3157: 64 87                    a0 = a1
  3159: 82 10 80 00              ra = u64 [sp + 0x80]
  3163: 82 15 78                 s0 = u64 [sp + 0x78]
  3166: 82 16 70                 s1 = u64 [sp + 0x70]
  3169: 95 11 88 00              sp = sp + 0x88
  3173: 32 00                    ret
      :                          @271
  3175: 82 16 30                 s1 = u64 [sp + 0x30]
  3178: 64 67                    a0 = s1
  3180: 82 15 40                 s0 = u64 [sp + 0x40]
  3183: 64 58                    a1 = s0
  3185: 50 10 3e 8d 00           ra = 62, jump @285
      :                          @272 [@dyn 31]
  3190: 33 08 01                 a1 = 0x1
  3193: 52 07 dc                 jump @270 if a0 != 0
      :                          @273
  3196: 82 5a 18                 a3 = u64 [s0 + 0x18]
  3199: 64 67                    a0 = s1
  3201: 82 18 18                 a1 = u64 [sp + 0x18]
  3204: 82 19 10                 a2 = u64 [sp + 0x10]
  3207: b4 a0 01 40              ra = 64, jump [a3]
      :                          @274 [@dyn 32]
  3211: 33 08 01                 a1 = 0x1
  3214: 52 07 c7                 jump @270 if a0 != 0
      :                          @275
  3217: 82 17 08                 a0 = u64 [sp + 0x8]
  3220: 9a 77                    a0 = -a0
  3222: 7b 17 28                 u64 [sp + 0x28] = a0
  3225: 33 05 ff                 s0 = 0xffffffffffffffff
  3228: 01                       fallthrough
      :                          @276
  3229: 82 17 28                 a0 = u64 [sp + 0x28]
  3232: c8 57 07                 a0 = a0 + s0
  3235: 51 17 ff 46              jump @283 if a0 == 4294967295
      :                          @277
  3239: 82 17 40                 a0 = u64 [sp + 0x40]
  3242: 82 79 20                 a2 = u64 [a0 + 0x20]
  3245: 64 67                    a0 = s1
  3247: 82 18 38                 a1 = u64 [sp + 0x38]
  3250: b4 90 01 42              ra = 66, jump [a2]
      :                          @278 [@dyn 33]
  3254: 95 55 01                 s0 = s0 + 0x1
  3257: 51 07 e4                 jump @276 if a0 == 0
      :                          @279
  3260: 28 39                    jump @284
      :                          @280
  3262: 82 17 40                 a0 = u64 [sp + 0x40]
  3265: 82 7a 18                 a3 = u64 [a0 + 0x18]
  3268: 64 67                    a0 = s1
  3270: 82 18 18                 a1 = u64 [sp + 0x18]
  3273: 82 19 10                 a2 = u64 [sp + 0x10]
  3276: b4 a0 01 44              ra = 68, jump [a3]
      :                          @281 [@dyn 34]
  3280: 33 08 01                 a1 = 0x1
  3283: 52 07 82                 jump @270 if a0 != 0
      :                          @282
  3286: 33 08                    a1 = 0
  3288: 82 17 20                 a0 = u64 [sp + 0x20]
  3291: 82 19 08                 a2 = u64 [sp + 0x8]
  3294: 7a 79 30                 u32 [a0 + 0x30] = a2
  3297: 82 19                    a2 = u64 [sp]
  3299: 78 79 38                 u8 [a0 + 0x38] = a2
  3302: 28 6f ff                 jump @270
      :                          @283
  3305: 82 15 08                 s0 = u64 [sp + 0x8]
  3308: 82 17 08                 a0 = u64 [sp + 0x8]
  3311: d8 75 08                 a1 = s0 <u a0
  3314: 28 63 ff                 jump @270
      :                          @284
  3317: 82 17 08                 a0 = u64 [sp + 0x8]
  3320: d8 75 08                 a1 = s0 <u a0
  3323: 28 5a ff                 jump @270
      :                          @285
  3326: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  3329: 7b 10 18                 u64 [sp + 0x18] = ra
  3332: 7b 15 10                 u64 [sp + 0x10] = s0
  3335: 7b 16 08                 u64 [sp + 0x8] = s1
  3338: 83 9b                    i32 a4 = a2 + 0
  3340: 33 0c 00 00 11           a5 = 0x110000
  3345: 64 a5                    s0 = a3
  3347: 64 86                    s1 = a1
  3349: 64 7a                    a3 = a0
  3351: aa cb 1a                 jump @288 if a4 == a5
      :                          @286
  3354: 82 6b 20                 a4 = u64 [s1 + 0x20]
  3357: 64 a7                    a0 = a3
  3359: 64 98                    a1 = a2
  3361: 7b 1a                    u64 [sp] = a3
  3363: b4 b0 01 46              ra = 70, jump [a4]
      :                          @287 [@dyn 35]
  3367: 82 1a                    a3 = u64 [sp]
  3369: 64 78                    a1 = a0
  3371: 33 07 01                 a0 = 0x1
  3374: 52 08 20                 jump @291 if a1 != 0
      :                          @288
  3377: 51 05 1a                 jump @290 if s0 == 0
      :                          @289
  3380: 82 6c 18                 a5 = u64 [s1 + 0x18]
  3383: 64 a7                    a0 = a3
  3385: 64 58                    a1 = s0
  3387: 33 09                    a2 = 0
  3389: 82 10 18                 ra = u64 [sp + 0x18]
  3392: 82 15 10                 s0 = u64 [sp + 0x10]
  3395: 82 16 08                 s1 = u64 [sp + 0x8]
  3398: 95 11 20                 sp = sp + 0x20
  3401: 32 0c                    jump [a5]
      :                          @290
  3403: 33 07                    a0 = 0
  3405: 01                       fallthrough
      :                          @291
  3406: 82 10 18                 ra = u64 [sp + 0x18]
  3409: 82 15 10                 s0 = u64 [sp + 0x10]
  3412: 82 16 08                 s1 = u64 [sp + 0x8]
  3415: 95 11 20                 sp = sp + 0x20
  3418: 32 00                    ret
      :                          @292
  3420: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  3424: 7b 10 80 00              u64 [sp + 0x80] = ra
  3428: 7b 15 78                 u64 [sp + 0x78] = s0
  3431: 7b 16 70                 u64 [sp + 0x70] = s1
  3434: 49 11 60 20              u64 [sp + 96] = 0x20
  3438: 33 09 03                 a2 = 0x3
  3441: 78 19 68                 u8 [sp + 0x68] = a2
  3444: 49 11 30                 u64 [sp + 48] = 0
  3447: 49 11 40                 u64 [sp + 64] = 0
  3450: 82 86 20                 s1 = u64 [a1 + 0x20]
  3453: 7b 17 50                 u64 [sp + 0x50] = a0
  3456: 33 07 00 00 01           a0 = 0x10000
  3461: 7b 17 58                 u64 [sp + 0x58] = a0
  3464: 51 06 06 01              jump @314 if s1 == 0
      :                          @293
  3468: 82 87 28                 a0 = u64 [a1 + 0x28]
  3471: 51 07 73 01              jump @324 if a0 == 0
      :                          @294
  3475: 33 09                    a2 = 0
  3477: 82 85                    s0 = u64 [a1]
  3479: 7b 18 08                 u64 [sp + 0x8] = a1
  3482: 82 88 10                 a1 = u64 [a1 + 0x10]
  3485: 7b 18 18                 u64 [sp + 0x18] = a1
  3488: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  3491: 97 88 03                 a1 = a1 << 0x3
  3494: 98 88 03                 a1 = a1 >> 0x3
  3497: 95 88 01                 a1 = a1 + 0x1
  3500: 7b 18                    u64 [sp] = a1
  3502: 95 55 08                 s0 = s0 + 0x8
  3505: 96 78 38                 a1 = a0 * 0x38
  3508: 95 66 18                 s1 = s1 + 0x18
  3511: 33 07 30                 a0 = 0x30
  3514: 7b 17 10                 u64 [sp + 0x10] = a0
  3517: 01                       fallthrough
      :                          @295
  3518: 7b 18 20                 u64 [sp + 0x20] = a1
  3521: 7b 19 28                 u64 [sp + 0x28] = a2
  3524: 82 59                    a2 = u64 [s0]
  3526: 51 09 17                 jump @298 if a2 == 0
      :                          @296
  3529: 82 1a 58                 a3 = u64 [sp + 0x58]
  3532: 82 17 50                 a0 = u64 [sp + 0x50]
  3535: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  3538: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3541: b4 a0 01 48              ra = 72, jump [a3]
      :                          @297 [@dyn 36]
  3545: 52 07 4e 01              jump @327 if a0 != 0
      :                          @298
  3549: 81 67 10                 a0 = i32 [s1 + 0x10]
  3552: 7a 17 60                 u32 [sp + 0x60] = a0
  3555: 7c 67 18                 a0 = u8 [s1 + 0x18]
  3558: 78 17 68                 u8 [sp + 0x68] = a0
  3561: 81 67 14                 a0 = i32 [s1 + 0x14]
  3564: 7a 17 64                 u32 [sp + 0x64] = a0
  3567: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3570: 82 67                    a0 = u64 [s1]
  3572: 51 08 26                 jump @303 if a1 == 0
      :                          @299
  3575: 52 18 01 16              jump @301 if a1 != 1
      :                          @300
  3579: 97 77 04                 a0 = a0 << 0x4
  3582: 82 18 18                 a1 = u64 [sp + 0x18]
  3585: c8 87 07                 a0 = a0 + a1
  3588: 82 78 08                 a1 = u64 [a0 + 0x8]
  3591: 82 19 10                 a2 = u64 [sp + 0x10]
  3594: aa 98 07                 jump @302 if a1 == a2
      :                          @301
  3597: 33 08                    a1 = 0
  3599: 28 0f                    jump @304
      :                          @302
  3601: 82 77                    a0 = u64 [a0]
  3603: 82 77                    a0 = u64 [a0]
  3605: 33 08 01                 a1 = 0x1
  3608: 28 06                    jump @304
      :                          @303
  3610: 33 08 01                 a1 = 0x1
  3613: 01                       fallthrough
      :                          @304
  3614: 7b 18 30                 u64 [sp + 0x30] = a1
  3617: 7b 17 38                 u64 [sp + 0x38] = a0
  3620: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  3623: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  3626: 51 08 26                 jump @309 if a1 == 0
      :                          @305
  3629: 52 18 01 16              jump @307 if a1 != 1
      :                          @306
  3633: 97 77 04                 a0 = a0 << 0x4
  3636: 82 18 18                 a1 = u64 [sp + 0x18]
  3639: c8 87 07                 a0 = a0 + a1
  3642: 82 78 08                 a1 = u64 [a0 + 0x8]
  3645: 82 19 10                 a2 = u64 [sp + 0x10]
  3648: aa 98 07                 jump @308 if a1 == a2
      :                          @307
  3651: 33 08                    a1 = 0
  3653: 28 0f                    jump @310
      :                          @308
  3655: 82 77                    a0 = u64 [a0]
  3657: 82 77                    a0 = u64 [a0]
  3659: 33 08 01                 a1 = 0x1
  3662: 28 06                    jump @310
      :                          @309
  3664: 33 08 01                 a1 = 0x1
  3667: 01                       fallthrough
      :                          @310
  3668: 7b 18 40                 u64 [sp + 0x40] = a1
  3671: 7b 17 48                 u64 [sp + 0x48] = a0
  3674: 82 67 08                 a0 = u64 [s1 + 0x8]
  3677: 97 77 04                 a0 = a0 << 0x4
  3680: 82 18 18                 a1 = u64 [sp + 0x18]
  3683: c8 78 08                 a1 = a1 + a0
  3686: 82 87                    a0 = u64 [a1]
  3688: 82 89 08                 a2 = u64 [a1 + 0x8]
  3691: 95 18 30                 a1 = sp + 0x30
  3694: b4 90 01 4a              ra = 74, jump [a2]
      :                          @311 [@dyn 37]
  3698: 52 07 b5 00              jump @327 if a0 != 0
      :                          @312
  3702: 95 55 10                 s0 = s0 + 0x10
  3705: 82 18 20                 a1 = u64 [sp + 0x20]
  3708: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  3711: 95 66 38                 s1 = s1 + 0x38
  3714: 82 19 28                 a2 = u64 [sp + 0x28]
  3717: 95 99 01                 a2 = a2 + 0x1
  3720: 52 08 36 ff              jump @295 if a1 != 0
      :                          @313
  3724: 28 69                    jump @322
      :                          @314
  3726: 82 87 18                 a0 = u64 [a1 + 0x18]
  3729: 51 07 71                 jump @324 if a0 == 0
      :                          @315
  3732: 82 85 10                 s0 = u64 [a1 + 0x10]
  3735: 33 0a                    a3 = 0
  3737: 97 79 04                 a2 = a0 << 0x4
  3740: c8 59 09                 a2 = a2 + s0
  3743: 7b 19 20                 u64 [sp + 0x20] = a2
  3746: 7b 18 08                 u64 [sp + 0x8] = a1
  3749: 82 86                    s1 = u64 [a1]
  3751: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  3754: 97 77 04                 a0 = a0 << 0x4
  3757: 98 77 04                 a0 = a0 >> 0x4
  3760: 95 77 01                 a0 = a0 + 0x1
  3763: 7b 17                    u64 [sp] = a0
  3765: 95 66 08                 s1 = s1 + 0x8
  3768: 01                       fallthrough
      :                          @316
  3769: 7b 1a 28                 u64 [sp + 0x28] = a3
  3772: 82 69                    a2 = u64 [s1]
  3774: 51 09 16                 jump @319 if a2 == 0
      :                          @317
  3777: 82 1a 58                 a3 = u64 [sp + 0x58]
  3780: 82 17 50                 a0 = u64 [sp + 0x50]
  3783: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3786: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3789: b4 a0 01 4c              ra = 76, jump [a3]
      :                          @318 [@dyn 38]
  3793: 52 07 56                 jump @327 if a0 != 0
      :                          @319
  3796: 82 57                    a0 = u64 [s0]
  3798: 82 59 08                 a2 = u64 [s0 + 0x8]
  3801: 95 18 30                 a1 = sp + 0x30
  3804: b4 90 01 4e              ra = 78, jump [a2]
      :                          @320 [@dyn 39]
  3808: 52 07 47                 jump @327 if a0 != 0
      :                          @321
  3811: 95 66 10                 s1 = s1 + 0x10
  3814: 95 55 10                 s0 = s0 + 0x10
  3817: 82 1a 28                 a3 = u64 [sp + 0x28]
  3820: 95 aa 01                 a3 = a3 + 0x1
  3823: 82 17 20                 a0 = u64 [sp + 0x20]
  3826: ab 75 c7                 jump @316 if s0 != a0
      :                          @322
  3829: 82 18 08                 a1 = u64 [sp + 0x8]
  3832: 82 1a                    a3 = u64 [sp]
  3834: 82 87 08                 a0 = u64 [a1 + 0x8]
  3837: ac 7a 0d                 jump @325 if a3 <u a0
      :                          @323
  3840: 28 2c                    jump @328
      :                          @324
  3842: 33 0a                    a3 = 0
  3844: 82 87 08                 a0 = u64 [a1 + 0x8]
  3847: 54 07 25                 jump @328 if a0 <=u 0
      :                          @325
  3850: 82 87                    a0 = u64 [a1]
  3852: 97 a8 04                 a1 = a3 << 0x4
  3855: c8 87 09                 a2 = a0 + a1
  3858: 82 1a 58                 a3 = u64 [sp + 0x58]
  3861: 82 17 50                 a0 = u64 [sp + 0x50]
  3864: 82 98                    a1 = u64 [a2]
  3866: 82 99 08                 a2 = u64 [a2 + 0x8]
  3869: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3872: b4 a0 01 50              ra = 80, jump [a3]
      :                          @326 [@dyn 40]
  3876: 51 07 08                 jump @328 if a0 == 0
      :                          @327
  3879: 33 07 01                 a0 = 0x1
  3882: 28 05                    jump @329
      :                          @328
  3884: 33 07                    a0 = 0
  3886: 01                       fallthrough
      :                          @329
  3887: 82 10 80 00              ra = u64 [sp + 0x80]
  3891: 82 15 78                 s0 = u64 [sp + 0x78]
  3894: 82 16 70                 s1 = u64 [sp + 0x70]
  3897: 95 11 88 00              sp = sp + 0x88
  3901: 32 00                    ret
      :                          @330
  3903: 51 08 9b 00              jump @351 if a1 == 0
      :                          @331
  3907: 64 79                    a2 = a0
  3909: 7c 77                    a0 = u8 [a0]
  3911: 51 07 91 00              jump @350 if a0 == 0
      :                          @332
  3915: 51 27 ff 00 90 00        jump @352 if a0 == 255
      :                          @333
  3921: 6c 7a                    a3 = sext.b a0
  3923: 57 0a 09                 jump @335 if a3 <s 0
      :                          @334
  3926: 33 0a                    a3 = 0
  3928: 33 08                    a1 = 0
  3930: 28 73                    jump @349
      :                          @335
  3932: 55 27 c0 00 0d           jump @337 if a0 >=u 192
      :                          @336
  3937: 33 0a 01                 a3 = 0x1
  3940: 33 0b 80                 a4 = 0xffffffffffffff80
  3943: 28 4a                    jump @346
      :                          @337
  3945: 55 27 e0 00 0e           jump @339 if a0 >=u 224
      :                          @338
  3950: 33 0a 02                 a3 = 0x2
  3953: 33 0b 40 ff              a4 = 0xffffffffffffff40
  3957: 28 3c                    jump @346
      :                          @339
  3959: 55 27 f0 00 0e           jump @341 if a0 >=u 240
      :                          @340
  3964: 33 0a 03                 a3 = 0x3
  3967: 33 0b 20 ff              a4 = 0xffffffffffffff20
  3971: 28 2e                    jump @346
      :                          @341
  3973: 55 27 f8 00 0e           jump @343 if a0 >=u 248
      :                          @342
  3978: 33 0a 04                 a3 = 0x4
  3981: 33 0b 10 ff              a4 = 0xffffffffffffff10
  3985: 28 20                    jump @346
      :                          @343
  3987: 55 27 fc 00 0e           jump @345 if a0 >=u 252
      :                          @344
  3992: 33 0a 05                 a3 = 0x5
  3995: 33 0b 08 ff              a4 = 0xffffffffffffff08
  3999: 28 12                    jump @346
      :                          @345
  4001: 88 7a fe 00              a3 = a0 <u 0xfe
  4005: 33 0b 04 ff              a4 = 0xffffffffffffff04
  4009: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  4013: 85 aa 07                 a3 = a3 ^ 0x7
  4016: 01                       fallthrough
      :                          @346
  4017: ae 8a 2b                 jump @353 if a3 >=u a1
      :                          @347
  4020: 33 08                    a1 = 0
  4022: c8 b7 07                 a0 = a0 + a4
  4025: 64 ab                    a4 = a3
  4027: 01                       fallthrough
      :                          @348
  4028: c8 b9 0c                 a5 = a2 + a4
  4031: 7c cc                    a5 = u8 [a5]
  4033: 97 88 08                 a1 = a1 << 0x8
  4036: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  4039: d4 c8 08                 a1 = a1 | a5
  4042: 52 0b f2                 jump @348 if a4 != 0
      :                          @349
  4045: 8a a9 03                 i32 a2 = a3 << 0x3
  4048: cf 97 07                 a0 = a0 << a2
  4051: c8 87 07                 a0 = a0 + a1
  4054: 32 00                    ret
      :                          @350
  4056: 32 00                    ret
      :                          @351
  4058: 00                       trap
      :                          @352
  4059: 00                       trap
      :                          @353
  4060: 00                       trap
