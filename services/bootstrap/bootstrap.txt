// RO data = 49/52 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 2 bytes
// RO data = [112, 97, 114, 115, 101, 32, 114, 101, 102, 105, 110, 101, 32, 97, 114, 103, 115, 32, 115, 117, 99, 99, 101, 115, 115, 112, 97, 114, 115, 101, 32, 114, 101, 102, 105, 110, 101, 32, 97, 114, 103, 115, 32, 102, 97, 105, 108, 101, 100]
// RW data = []
// Instructions = 354
// Code size = 1107 bytes

      :                          @0
     0: 28 ab 00 00 00           jump @27
      :                          @1
     5: 28 8c 01 00 00           jump @43
      :                          @2
    10: 28 f3 03                 jump @89
      :                          @3
    13: 51 08 9b 00              jump @24 if a1 == 0
      :                          @4
    17: 64 79                    a2 = a0
    19: 7c 77                    a0 = u8 [a0]
    21: 51 07 91 00              jump @23 if a0 == 0
      :                          @5
    25: 51 27 ff 00 90 00        jump @25 if a0 == 255
      :                          @6
    31: 6c 7a                    a3 = sext.b a0
    33: 57 0a 09                 jump @8 if a3 <s 0
      :                          @7
    36: 33 0a                    a3 = 0
    38: 33 08                    a1 = 0
    40: 28 73                    jump @22
      :                          @8
    42: 55 27 c0 00 0d           jump @10 if a0 >=u 192
      :                          @9
    47: 33 0a 01                 a3 = 0x1
    50: 33 0b 80                 a4 = 0xffffffffffffff80
    53: 28 4a                    jump @19
      :                          @10
    55: 55 27 e0 00 0e           jump @12 if a0 >=u 224
      :                          @11
    60: 33 0a 02                 a3 = 0x2
    63: 33 0b 40 ff              a4 = 0xffffffffffffff40
    67: 28 3c                    jump @19
      :                          @12
    69: 55 27 f0 00 0e           jump @14 if a0 >=u 240
      :                          @13
    74: 33 0a 03                 a3 = 0x3
    77: 33 0b 20 ff              a4 = 0xffffffffffffff20
    81: 28 2e                    jump @19
      :                          @14
    83: 55 27 f8 00 0e           jump @16 if a0 >=u 248
      :                          @15
    88: 33 0a 04                 a3 = 0x4
    91: 33 0b 10 ff              a4 = 0xffffffffffffff10
    95: 28 20                    jump @19
      :                          @16
    97: 55 27 fc 00 0e           jump @18 if a0 >=u 252
      :                          @17
   102: 33 0a 05                 a3 = 0x5
   105: 33 0b 08 ff              a4 = 0xffffffffffffff08
   109: 28 12                    jump @19
      :                          @18
   111: 88 7a fe 00              a3 = a0 <u 0xfe
   115: 33 0b 04 ff              a4 = 0xffffffffffffff04
   119: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
   123: 85 aa 07                 a3 = a3 ^ 0x7
   126: 01                       fallthrough
      :                          @19
   127: ae 8a 2b                 jump @26 if a3 >=u a1
      :                          @20
   130: 33 08                    a1 = 0
   132: c8 b7 07                 a0 = a0 + a4
   135: 64 ab                    a4 = a3
   137: 01                       fallthrough
      :                          @21
   138: c8 b9 0c                 a5 = a2 + a4
   141: 7c cc                    a5 = u8 [a5]
   143: 97 88 08                 a1 = a1 << 0x8
   146: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
   149: d4 c8 08                 a1 = a1 | a5
   152: 52 0b f2                 jump @21 if a4 != 0
      :                          @22
   155: 8a a9 03                 i32 a2 = a3 << 0x3
   158: cf 97 07                 a0 = a0 << a2
   161: c8 87 07                 a0 = a0 + a1
   164: 32 00                    ret
      :                          @23
   166: 32 00                    ret
      :                          @24
   168: 00                       trap
      :                          @25
   169: 00                       trap
      :                          @26
   170: 00                       trap
      :                          @27 [export #0: 'refine']
   171: 95 11 d8                 sp = sp + 0xffffffffffffffd8
   174: 7b 10 20                 u64 [sp + 0x20] = ra
   177: 7b 15 18                 u64 [sp + 0x18] = s0
   180: 7b 16 10                 u64 [sp + 0x10] = s1
   183: 53 18 04 9c 00           jump @40 if a1 <u 4
      :                          @28
   188: 95 8a fc                 a3 = a1 + 0xfffffffffffffffc
   191: 51 0a 94 00              jump @40 if a3 == 0
      :                          @29
   195: 95 77 04                 a0 = a0 + 0x4
   198: 7b 17 08                 u64 [sp + 0x8] = a0
   201: 7d 77                    a0 = i8 [a0]
   203: 33 06 01                 s1 = 0x1
   206: 5a 07 5d                 jump @38 if a0 >s 0
      :                          @30
   209: 84 77 ff 00              a0 = a0 & 0xff
   213: 83 78 ff                 i32 a1 = a0 + 0xffffffffffffffff
   216: 84 8b ff 00              a4 = a1 & 0xff
   220: 33 06 02                 s1 = 0x2
   223: 53 2b bf 00 49           jump @37 if a4 <u 191
      :                          @31
   228: 84 7b e0 00              a4 = a0 & 0xe0
   232: 33 06 03                 s1 = 0x3
   235: 51 2b c0 00 3d           jump @37 if a4 == 192
      :                          @32
   240: 84 7b f0 00              a4 = a0 & 0xf0
   244: 33 06 04                 s1 = 0x4
   247: 51 2b e0 00 31           jump @37 if a4 == 224
      :                          @33
   252: 84 7b f8 00              a4 = a0 & 0xf8
   256: 33 06 05                 s1 = 0x5
   259: 51 2b f0 00 25           jump @37 if a4 == 240
      :                          @34
   264: 84 7b fc 00              a4 = a0 & 0xfc
   268: 33 06 06                 s1 = 0x6
   271: 51 2b f8 00 19           jump @37 if a4 == 248
      :                          @35
   276: 84 7b fe 00              a4 = a0 & 0xfe
   280: 33 06 07                 s1 = 0x7
   283: 51 2b fc 00 0d           jump @37 if a4 == 252
      :                          @36
   288: 33 06 08                 s1 = 0x8
   291: 53 27 fe 00 30           jump @40 if a0 <u 254
      :                          @37
   296: ac 6a 2b                 jump @40 if a3 <u s1
      :                          @38
   299: 82 17 08                 a0 = u64 [sp + 0x8]
   302: 64 68                    a1 = s1
   304: 7b 1a                    u64 [sp] = a3
   306: 50 10 02 db fe           ra = 2, jump @3
      :                          @39 [@dyn 1]
   311: 64 75                    s0 = a0
   313: 82 17                    a0 = u64 [sp]
   315: e4 67 07                 a0 = maxu(a0, s1)
   318: c9 67 07                 a0 = a0 - s1
   321: d8 57 08                 a1 = a0 <u s0
   324: e4 57 07                 a0 = maxu(a0, s0)
   327: c9 57 07                 a0 = a0 - s0
   330: 88 77 20                 a0 = a0 <u 0x20
   333: d4 87 07                 a0 = a0 | a1
   336: 51 07 26                 jump @42 if a0 == 0
      :                          @40
   339: 33 0a 19 00 01           a3 = 0x10019
   344: 33 07 02                 a0 = 0x2
   347: 33 0b 18                 a4 = 0x18
   350: 33 08                    a1 = 0
   352: 33 09                    a2 = 0
   354: 0a 64                    ecalli 100 // 'log'
   356: 33 07 ff                 a0 = 0xffffffffffffffff
   359: 01                       fallthrough
      :                          @41
   360: 82 10 20                 ra = u64 [sp + 0x20]
   363: 82 15 18                 s0 = u64 [sp + 0x18]
   366: 82 16 10                 s1 = u64 [sp + 0x10]
   369: 95 11 28                 sp = sp + 0x28
   372: 32 00                    ret
      :                          @42
   374: 33 0a 00 00 01           a3 = 0x10000
   379: 33 07 02                 a0 = 0x2
   382: 33 0b 19                 a4 = 0x19
   385: 33 08                    a1 = 0
   387: 33 09                    a2 = 0
   389: 0a 64                    ecalli 100 // 'log'
   391: 64 58                    a1 = s0
   393: 82 17 08                 a0 = u64 [sp + 0x8]
   396: c8 67 07                 a0 = a0 + s1
   399: 28 d9                    jump @41
      :                          @43 [export #1: 'accumulate']
   401: 95 11 30 ff              sp = sp + 0xffffffffffffff30
   405: 7b 10 c8 00              u64 [sp + 0xc8] = ra
   409: 7b 15 c0 00              u64 [sp + 0xc0] = s0
   413: 7b 16 b8 00              u64 [sp + 0xb8] = s1
   417: 64 86                    s1 = a1
   419: 95 66 f8                 s1 = s1 + 0xfffffffffffffff8
   422: 33 0a ff                 a3 = 0xffffffffffffffff
   425: 51 06 3e 02              jump @86 if s1 == 0
      :                          @44
   429: 95 77 08                 a0 = a0 + 0x8
   432: 7d 78                    a1 = i8 [a0]
   434: 33 05 01                 s0 = 0x1
   437: 5a 08 69                 jump @52 if a1 >s 0
      :                          @45
   440: 84 8b ff 00              a4 = a1 & 0xff
   444: 83 b8 ff                 i32 a1 = a4 + 0xffffffffffffffff
   447: 84 88 ff 00              a1 = a1 & 0xff
   451: 33 09 bf 00              a2 = 0xbf
   455: 33 05 02                 s0 = 0x2
   458: ac 98 54                 jump @52 if a1 <u a2
      :                          @46
   461: 84 b8 e0 00              a1 = a4 & 0xe0
   465: 33 09 c0 00              a2 = 0xc0
   469: 33 05 03                 s0 = 0x3
   472: aa 98 46                 jump @52 if a1 == a2
      :                          @47
   475: 84 b8 f0 00              a1 = a4 & 0xf0
   479: 33 09 e0 00              a2 = 0xe0
   483: 33 05 04                 s0 = 0x4
   486: aa 98 38                 jump @52 if a1 == a2
      :                          @48
   489: 84 b8 f8 00              a1 = a4 & 0xf8
   493: 33 09 f0 00              a2 = 0xf0
   497: 33 05 05                 s0 = 0x5
   500: aa 98 2a                 jump @52 if a1 == a2
      :                          @49
   503: 84 b8 fc 00              a1 = a4 & 0xfc
   507: 33 09 f8 00              a2 = 0xf8
   511: 33 05 06                 s0 = 0x6
   514: aa 98 1c                 jump @52 if a1 == a2
      :                          @50
   517: 84 b8 fe 00              a1 = a4 & 0xfe
   521: 33 09 fc 00              a2 = 0xfc
   525: 33 05 07                 s0 = 0x7
   528: aa 98 0e                 jump @52 if a1 == a2
      :                          @51
   531: 88 b8 fe 00              a1 = a4 <u 0xfe
   535: 85 85 01                 s0 = a1 ^ 0x1
   538: 97 55 03                 s0 = s0 << 0x3
   541: 01                       fallthrough
      :                          @52
   542: ac 56 c9 01              jump @86 if s1 <u s0
      :                          @53
   546: 64 58                    a1 = s0
   548: 7b 17                    u64 [sp] = a0
   550: 50 10 04 e7 fd           ra = 4, jump @3
      :                          @54 [@dyn 2]
   555: 8e 77                    a0 = a0 >u 0
   557: d8 65 08                 a1 = s0 <u s1
   560: d2 87 07                 a0 = a0 & a1
   563: 51 07 2f                 jump @58 if a0 == 0
      :                          @55
   566: e4 56 07                 a0 = maxu(s1, s0)
   569: c9 57 07                 a0 = a0 - s0
   572: 82 18                    a1 = u64 [sp]
   574: c8 85 05                 s0 = s0 + a1
   577: 7c 58                    a1 = u8 [s0]
   579: 95 5b 01                 a4 = s0 + 0x1
   582: 33 09 01                 a2 = 0x1
   585: e4 97 09                 a2 = maxu(a0, a2)
   588: 95 9c ff                 a5 = a2 + 0xffffffffffffffff
   591: 33 0a ff                 a3 = 0xffffffffffffffff
   594: 51 08 16                 jump @59 if a1 == 0
      :                          @56
   597: 33 06                    s1 = 0
   599: 33 05 fc                 s0 = 0xfffffffffffffffc
   602: 55 1c 40 b1 00           jump @73 if a5 >=u 64
      :                          @57
   607: 28 88 01                 jump @86
      :                          @58
   610: 33 0a ff                 a3 = 0xffffffffffffffff
   613: 28 82 01                 jump @86
      :                          @59
   616: 55 17 02 0a              jump @61 if a0 >=u 2
      :                          @60
   620: 33 06                    s1 = 0
   622: 33 07                    a0 = 0
   624: 28 7c                    jump @72
      :                          @61
   626: 7d b7                    a0 = i8 [a4]
   628: 33 06 01                 s1 = 0x1
   631: 5a 07 5c                 jump @69 if a0 >s 0
      :                          @62
   634: 84 77 ff 00              a0 = a0 & 0xff
   638: 83 78 ff                 i32 a1 = a0 + 0xffffffffffffffff
   641: 84 88 ff 00              a1 = a1 & 0xff
   645: 33 06 02                 s1 = 0x2
   648: 53 28 bf 00 4b           jump @69 if a1 <u 191
      :                          @63
   653: 84 78 e0 00              a1 = a0 & 0xe0
   657: 33 06 03                 s1 = 0x3
   660: 51 28 c0 00 3f           jump @69 if a1 == 192
      :                          @64
   665: 84 78 f0 00              a1 = a0 & 0xf0
   669: 33 06 04                 s1 = 0x4
   672: 51 28 e0 00 33           jump @69 if a1 == 224
      :                          @65
   677: 84 78 f8 00              a1 = a0 & 0xf8
   681: 33 06 05                 s1 = 0x5
   684: 51 28 f0 00 27           jump @69 if a1 == 240
      :                          @66
   689: 84 78 fc 00              a1 = a0 & 0xfc
   693: 33 06 06                 s1 = 0x6
   696: 51 28 f8 00 1b           jump @69 if a1 == 248
      :                          @67
   701: 84 78 fe 00              a1 = a0 & 0xfe
   705: 33 09 fc 00              a2 = 0xfc
   709: 33 06 07                 s1 = 0x7
   712: aa 98 0b                 jump @69 if a1 == a2
      :                          @68
   715: 33 06 08                 s1 = 0x8
   718: 54 27 fd 00 9e           jump @60 if a0 <=u 253
      :                          @69
   723: 7b 1c                    u64 [sp] = a5
   725: ac 6c 26 01              jump @87 if a5 <u s1
      :                          @70
   729: 64 b7                    a0 = a4
   731: 64 68                    a1 = s1
   733: 64 b5                    s0 = a4
   735: 50 10 06 2e fd           ra = 6, jump @3
      :                          @71 [@dyn 3]
   740: 64 5b                    a4 = s0
   742: 33 0a ff                 a3 = 0xffffffffffffffff
   745: 82 1c                    a5 = u64 [sp]
   747: 01                       fallthrough
      :                          @72
   748: c8 6b 0b                 a4 = a4 + s1
   751: e4 6c 08                 a1 = maxu(a5, s1)
   754: c9 68 08                 a1 = a1 - s1
   757: 64 b6                    s1 = a4
   759: e6 78 05                 s0 = minu(a1, a0)
   762: c8 7b 0b                 a4 = a4 + a0
   765: e4 78 08                 a1 = maxu(a1, a0)
   768: c9 78 0c                 a5 = a1 - a0
   771: 95 55 fc                 s0 = s0 + 0xfffffffffffffffc
   774: 53 1c 40 e1 00           jump @86 if a5 <u 64
      :                          @73
   779: 95 c8 c0                 a1 = a5 + 0xffffffffffffffc0
   782: 51 08 7d                 jump @84 if a1 == 0
      :                          @74
   785: 95 b7 40                 a0 = a4 + 0x40
   788: 7d 7a                    a3 = i8 [a0]
   790: 33 09 01                 a2 = 0x1
   793: 5a 0a 6b                 jump @83 if a3 >s 0
      :                          @75
   796: 84 aa ff 00              a3 = a3 & 0xff
   800: 83 a9 ff                 i32 a2 = a3 + 0xffffffffffffffff
   803: 84 9b ff 00              a4 = a2 & 0xff
   807: 33 0c bf 00              a5 = 0xbf
   811: 33 09 02                 a2 = 0x2
   814: ac cb 53                 jump @82 if a4 <u a5
      :                          @76
   817: 84 ab e0 00              a4 = a3 & 0xe0
   821: 33 0c c0 00              a5 = 0xc0
   825: 33 09 03                 a2 = 0x3
   828: aa cb 45                 jump @82 if a4 == a5
      :                          @77
   831: 84 ab f0 00              a4 = a3 & 0xf0
   835: 33 0c e0 00              a5 = 0xe0
   839: 33 09 04                 a2 = 0x4
   842: aa cb 37                 jump @82 if a4 == a5
      :                          @78
   845: 84 ab f8 00              a4 = a3 & 0xf8
   849: 33 0c f0 00              a5 = 0xf0
   853: 33 09 05                 a2 = 0x5
   856: aa cb 29                 jump @82 if a4 == a5
      :                          @79
   859: 84 ab fc 00              a4 = a3 & 0xfc
   863: 33 0c f8 00              a5 = 0xf8
   867: 33 09 06                 a2 = 0x6
   870: aa cb 1b                 jump @82 if a4 == a5
      :                          @80
   873: 84 ab fe 00              a4 = a3 & 0xfe
   877: 33 0c fc 00              a5 = 0xfc
   881: 33 09 07                 a2 = 0x7
   884: aa cb 0d                 jump @82 if a4 == a5
      :                          @81
   887: 33 0b fe 00              a4 = 0xfe
   891: 33 09 08                 a2 = 0x8
   894: ac ba 0d                 jump @84 if a3 <u a4
      :                          @82
   897: ac 98 7b                 jump @88 if a1 <u a2
      :                          @83
   900: 64 98                    a1 = a2
   902: 50 10 08 87 fc           ra = 8, jump @3
      :                          @84 [@dyn 4]
   907: c8 65 05                 s0 = s0 + s1
   910: 80 58                    a1 = u32 [s0]
   912: 33 09 64                 a2 = 0x64
   915: 33 0a 64                 a3 = 0x64
   918: 64 67                    a0 = s1
   920: 0a 09                    ecalli 9 // 'new'
   922: 64 75                    s0 = a0
   924: 7b 17 08                 u64 [sp + 0x8] = a0
   927: 48 11 14                 u32 [sp + 20] = 0
   930: 95 17 14                 a0 = sp + 0x14
   933: 33 08 04                 a1 = 0x4
   936: 95 19 08                 a2 = sp + 0x8
   939: 33 0a 04                 a3 = 0x4
   942: 0a 03                    ecalli 3 // 'write'
   944: 95 17 18                 a0 = sp + 0x18
   947: 33 09 80 00              a2 = 0x80
   951: 33 08                    a1 = 0
   953: 50 10 0a 48              ra = 10, jump @90
      :                          @85 [@dyn 5]
   957: 33 08 20 a1 07           a1 = 0x7a120
   962: 33 09 64                 a2 = 0x64
   965: 95 1a 18                 a3 = sp + 0x18
   968: 64 57                    a0 = s0
   970: 0a 0b                    ecalli 11 // 'transfer'
   972: 82 17 08                 a0 = u64 [sp + 0x8]
   975: 49 21 b0 00              u64 [sp + 176] = 0
   979: 49 21 a8 00              u64 [sp + 168] = 0
   983: 49 21 a0 00              u64 [sp + 160] = 0
   987: 7b 17 98 00              u64 [sp + 0x98] = a0
   991: 33 08 20                 a1 = 0x20
   994: 95 1a 98 00              a3 = sp + 0x98
   998: 01                       fallthrough
      :                          @86
   999: 64 a7                    a0 = a3
  1001: 82 10 c8 00              ra = u64 [sp + 0xc8]
  1005: 82 15 c0 00              s0 = u64 [sp + 0xc0]
  1009: 82 16 b8 00              s1 = u64 [sp + 0xb8]
  1013: 95 11 d0 00              sp = sp + 0xd0
  1017: 32 00                    ret
      :                          @87
  1019: 00                       trap
      :                          @88
  1020: 00                       trap
      :                          @89 [export #2: 'on_transfer']
  1021: 33 07                    a0 = 0
  1023: 32 00                    ret
      :                          @90
  1025: 8d 7a                    i32 a3 = -a0
  1027: 84 aa 07                 a3 = a3 & 0x7
  1030: c8 a7 0b                 a4 = a0 + a3
  1033: 51 0a 0e                 jump @93 if a3 == 0
      :                          @91
  1036: 64 7c                    a5 = a0
  1038: 01                       fallthrough
      :                          @92
  1039: 78 c8                    u8 [a5] = a1
  1041: 95 cc 01                 a5 = a5 + 0x1
  1044: ac bc fb                 jump @92 if a5 <u a4
      :                          @93
  1047: c9 a9 03                 t1 = a2 - a3
  1050: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  1053: c8 cb 0a                 a3 = a4 + a5
  1056: 58 0c 1d                 jump @96 if a5 <=s 0
      :                          @94
  1059: 84 82 ff 00              t0 = a1 & 0xff
  1063: 14 09 01 01 01 01 01 01 01 01 a2 = 0x101010101010101
  1073: ca 92 0c                 a5 = t0 * a2
  1076: 01                       fallthrough
      :                          @95
  1077: 7b bc                    u64 [a4] = a5
  1079: 95 bb 08                 a4 = a4 + 0x8
  1082: ac ab fb                 jump @95 if a4 <u a3
      :                          @96
  1085: 84 39 07                 a2 = t1 & 0x7
  1088: 52 09 05                 jump @98 if a2 != 0
      :                          @97
  1091: 28 0e                    jump @100
      :                          @98
  1093: c8 a9 09                 a2 = a2 + a3
  1096: 01                       fallthrough
      :                          @99
  1097: 78 a8                    u8 [a3] = a1
  1099: 95 aa 01                 a3 = a3 + 0x1
  1102: ac 9a fb                 jump @99 if a3 <u a2
      :                          @100
  1105: 32 00                    ret
