// RO data = 0/0 bytes
// RW data = 0/32 bytes
// Stack size = 65536 bytes
// RO data = []
// RW data = []
// Instructions = 339
// Code size = 1030 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 ae 00 00 00           jump @18
      :                          @2
    10: 28 03 03                 jump @83
      :                          @3 [export #0: 'refine']
    13: 95 11 e0                 sp = sp + 0xffffffffffffffe0
    16: 7b 10 18                 u64 [sp + 0x18] = ra
    19: 7b 15 10                 u64 [sp + 0x10] = s0
    22: 7b 16 08                 u64 [sp + 0x8] = s1
    25: 64 86                    s1 = a1
    27: 64 78                    a1 = a0
    29: 33 09 04                 a2 = 0x4
    32: 33 07 00 00 01           a0 = 0x10000
    37: ac 96 7c                 jump @15 if s1 <u a2
      :                          @4
    40: 95 66 fc                 s1 = s1 + 0xfffffffffffffffc
    43: 51 06 76                 jump @15 if s1 == 0
      :                          @5
    46: 95 87 04                 a0 = a1 + 0x4
    49: 7d 78                    a1 = i8 [a0]
    51: 33 05 01                 s0 = 0x1
    54: 59 08 3a                 jump @13 if a1 >=s 0
      :                          @6
    57: 84 89 ff 00              a2 = a1 & 0xff
    61: 33 05 02                 s0 = 0x2
    64: 53 29 c0 00 2d           jump @12 if a2 <u 192
      :                          @7
    69: 33 05 03                 s0 = 0x3
    72: 53 29 e0 00 25           jump @12 if a2 <u 224
      :                          @8
    77: 33 05 04                 s0 = 0x4
    80: 53 29 f0 00 1d           jump @12 if a2 <u 240
      :                          @9
    85: 33 05 05                 s0 = 0x5
    88: 53 29 f8 00 15           jump @12 if a2 <u 248
      :                          @10
    93: 33 05 06                 s0 = 0x6
    96: 53 29 fc 00 0d           jump @12 if a2 <u 252
      :                          @11
   101: 88 98 fe 00              a1 = a2 <u 0xfe
   105: 9a 85 08                 s0 = 0x8 - a1
   108: 01                       fallthrough
      :                          @12
   109: ac 56 45                 jump @17 if s1 <u s0
      :                          @13
   112: 64 58                    a1 = s0
   114: 7b 17                    u64 [sp] = a0
   116: 50 10 02 f4 02           ra = 2, jump @95
      :                          @14 [@dyn 1]
   121: 64 78                    a1 = a0
   123: e4 56 07                 a0 = maxu(s1, s0)
   126: c9 57 07                 a0 = a0 - s0
   129: d8 87 09                 a2 = a0 <u a1
   132: e4 87 07                 a0 = maxu(a0, a1)
   135: c9 87 07                 a0 = a0 - a1
   138: 88 77 20                 a0 = a0 <u 0x20
   141: d4 79 09                 a2 = a2 | a0
   144: 82 17                    a0 = u64 [sp]
   146: c8 75 05                 s0 = s0 + a0
   149: 94 98                    a1 = 0 if a2 != 0
   151: 33 07 00 00 01           a0 = 0x10000
   156: da 95 07                 a0 = s0 if a2 == 0
   159: 28 05                    jump @16
      :                          @15
   161: 33 08                    a1 = 0
   163: 01                       fallthrough
      :                          @16
   164: 82 10 18                 ra = u64 [sp + 0x18]
   167: 82 15 10                 s0 = u64 [sp + 0x10]
   170: 82 16 08                 s1 = u64 [sp + 0x8]
   173: 95 11 20                 sp = sp + 0x20
   176: 32 00                    ret
      :                          @17
   178: 00                       trap
      :                          @18 [export #1: 'accumulate']
   179: 95 11 50 ff              sp = sp + 0xffffffffffffff50
   183: 7b 10 a8 00              u64 [sp + 0xa8] = ra
   187: 7b 15 a0 00              u64 [sp + 0xa0] = s0
   191: 7b 16 98 00              u64 [sp + 0x98] = s1
   195: 33 09 08                 a2 = 0x8
   198: ac 98 5c 01              jump @62 if a1 <u a2
      :                          @19
   202: 33 09 fc                 a2 = 0xfffffffffffffffc
   205: aa 97 3c 02              jump @79 if a0 == a2
      :                          @20
   209: 51 07 38 02              jump @79 if a0 == 0
      :                          @21
   213: 95 8a f8                 a3 = a1 + 0xfffffffffffffff8
   216: 95 75 08                 s0 = a0 + 0x8
   219: 51 0a 45                 jump @31 if a3 == 0
      :                          @22
   222: 7d 58                    a1 = i8 [s0]
   224: 33 06 01                 s1 = 0x1
   227: 59 08 40                 jump @32 if a1 >=s 0
      :                          @23
   230: 84 89 ff 00              a2 = a1 & 0xff
   234: 33 06 02                 s1 = 0x2
   237: 53 29 c0 00 2d           jump @29 if a2 <u 192
      :                          @24
   242: 33 06 03                 s1 = 0x3
   245: 53 29 e0 00 25           jump @29 if a2 <u 224
      :                          @25
   250: 33 06 04                 s1 = 0x4
   253: 53 29 f0 00 1d           jump @29 if a2 <u 240
      :                          @26
   258: 33 06 05                 s1 = 0x5
   261: 53 29 f8 00 15           jump @29 if a2 <u 248
      :                          @27
   266: 33 06 06                 s1 = 0x6
   269: 53 29 fc 00 0d           jump @29 if a2 <u 252
      :                          @28
   274: 88 98 fe 00              a1 = a2 <u 0xfe
   278: 9a 86 08                 s1 = 0x8 - a1
   281: 01                       fallthrough
      :                          @29
   282: ae 6a 09                 jump @32 if a3 >=u s1
      :                          @30
   285: 28 05 01                 jump @62
      :                          @31
   288: 33 06                    s1 = 0
   290: 01                       fallthrough
      :                          @32
   291: 7b 16                    u64 [sp] = s1
   293: 64 57                    a0 = s0
   295: 64 68                    a1 = s1
   297: 64 a6                    s1 = a3
   299: 50 10 04 3d 02           ra = 4, jump @95
      :                          @33 [@dyn 2]
   304: 82 1a                    a3 = u64 [sp]
   306: 51 07 f0 00              jump @62 if a0 == 0
      :                          @34
   310: e4 a6 07                 a0 = maxu(s1, a3)
   313: c9 a7 07                 a0 = a0 - a3
   316: 53 17 60 e6 00           jump @62 if a0 <u 96
      :                          @35
   321: c8 5a 08                 a1 = a3 + s0
   324: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   327: 95 87 60                 a0 = a1 + 0x60
   330: 7b 17                    u64 [sp] = a0
   332: 51 06 4c                 jump @46 if s1 == 0
      :                          @36
   335: 7d 78                    a1 = i8 [a0]
   337: 33 05 01                 s0 = 0x1
   340: 59 08 37                 jump @43 if a1 >=s 0
      :                          @37
   343: 84 89 ff 00              a2 = a1 & 0xff
   347: 33 05 02                 s0 = 0x2
   350: 53 29 c0 00 2d           jump @43 if a2 <u 192
      :                          @38
   355: 33 05 03                 s0 = 0x3
   358: 53 29 e0 00 25           jump @43 if a2 <u 224
      :                          @39
   363: 33 05 04                 s0 = 0x4
   366: 53 29 f0 00 1d           jump @43 if a2 <u 240
      :                          @40
   371: 33 05 05                 s0 = 0x5
   374: 53 29 f8 00 15           jump @43 if a2 <u 248
      :                          @41
   379: 33 05 06                 s0 = 0x6
   382: 53 29 fc 00 0d           jump @43 if a2 <u 252
      :                          @42
   387: 88 98 fe 00              a1 = a2 <u 0xfe
   391: 9a 85 08                 s0 = 0x8 - a1
   394: 01                       fallthrough
      :                          @43
   395: ac 56 7f 01              jump @80 if s1 <u s0
      :                          @44
   399: 64 58                    a1 = s0
   401: 50 10 06 d7 01           ra = 6, jump @95
      :                          @45 [@dyn 3]
   406: 28 07                    jump @47
      :                          @46
   408: 33 05                    s0 = 0
   410: 33 07                    a0 = 0
   412: 01                       fallthrough
      :                          @47
   413: e4 56 08                 a1 = maxu(s1, s0)
   416: c9 58 08                 a1 = a1 - s0
   419: e4 78 08                 a1 = maxu(a1, a0)
   422: c9 78 08                 a1 = a1 - a0
   425: 33 09 20                 a2 = 0x20
   428: ac 98 76                 jump @62 if a1 <u a2
      :                          @48
   431: 82 19                    a2 = u64 [sp]
   433: c8 95 05                 s0 = s0 + a2
   436: c8 57 07                 a0 = a0 + s0
   439: 95 85 e0                 s0 = a1 + 0xffffffffffffffe0
   442: 95 77 20                 a0 = a0 + 0x20
   445: 7b 17                    u64 [sp] = a0
   447: 51 05 5e                 jump @61 if s0 == 0
      :                          @49
   450: 7d 78                    a1 = i8 [a0]
   452: 33 06 01                 s1 = 0x1
   455: 59 08 37                 jump @56 if a1 >=s 0
      :                          @50
   458: 84 89 ff 00              a2 = a1 & 0xff
   462: 33 06 02                 s1 = 0x2
   465: 53 29 c0 00 2d           jump @56 if a2 <u 192
      :                          @51
   470: 33 06 03                 s1 = 0x3
   473: 53 29 e0 00 25           jump @56 if a2 <u 224
      :                          @52
   478: 33 06 04                 s1 = 0x4
   481: 53 29 f0 00 1d           jump @56 if a2 <u 240
      :                          @53
   486: 33 06 05                 s1 = 0x5
   489: 53 29 f8 00 15           jump @56 if a2 <u 248
      :                          @54
   494: 33 06 06                 s1 = 0x6
   497: 53 29 fc 00 0d           jump @56 if a2 <u 252
      :                          @55
   502: 88 98 fe 00              a1 = a2 <u 0xfe
   506: 9a 86 08                 s1 = 0x8 - a1
   509: 01                       fallthrough
      :                          @56
   510: ac 65 0d 01              jump @81 if s0 <u s1
      :                          @57
   514: 64 68                    a1 = s1
   516: 50 10 08 64 01           ra = 8, jump @95
      :                          @58 [@dyn 4]
   521: ae 56 19                 jump @62 if s1 >=u s0
      :                          @59
   524: 82 17                    a0 = u64 [sp]
   526: c8 67 07                 a0 = a0 + s1
   529: 7c 78                    a1 = u8 [a0]
   531: 51 08 29                 jump @64 if a1 == 0
      :                          @60
   534: 33 08                    a1 = 0
   536: 33 07                    a0 = 0
   538: 28 9c 00                 jump @77
      :                          @61
   541: 33 06                    s1 = 0
   543: 56 05 ed                 jump @59 if s0 >u 0
      :                          @62
   546: 33 08                    a1 = 0
   548: 33 07 00 00 01           a0 = 0x10000
   553: 01                       fallthrough
      :                          @63
   554: 82 10 a8 00              ra = u64 [sp + 0xa8]
   558: 82 15 a0 00              s0 = u64 [sp + 0xa0]
   562: 82 16 98 00              s1 = u64 [sp + 0x98]
   566: 95 11 b0 00              sp = sp + 0xb0
   570: 32 00                    ret
      :                          @64
   572: e4 65 08                 a1 = maxu(s0, s1)
   575: c9 68 08                 a1 = a1 - s1
   578: 95 75 01                 s0 = a0 + 0x1
   581: 33 07 01                 a0 = 0x1
   584: e4 78 07                 a0 = maxu(a1, a0)
   587: 33 09 02                 a2 = 0x2
   590: 95 7a ff                 a3 = a0 + 0xffffffffffffffff
   593: ae 98 09                 jump @66 if a1 >=u a2
      :                          @65
   596: 33 06                    s1 = 0
   598: 33 08                    a1 = 0
   600: 28 51                    jump @76
      :                          @66
   602: 7d 57                    a0 = i8 [s0]
   604: 33 06 01                 s1 = 0x1
   607: 59 07 37                 jump @73 if a0 >=s 0
      :                          @67
   610: 84 77 ff 00              a0 = a0 & 0xff
   614: 33 06 02                 s1 = 0x2
   617: 53 27 c0 00 2d           jump @73 if a0 <u 192
      :                          @68
   622: 33 06 03                 s1 = 0x3
   625: 53 27 e0 00 25           jump @73 if a0 <u 224
      :                          @69
   630: 33 06 04                 s1 = 0x4
   633: 53 27 f0 00 1d           jump @73 if a0 <u 240
      :                          @70
   638: 33 06 05                 s1 = 0x5
   641: 53 27 f8 00 15           jump @73 if a0 <u 248
      :                          @71
   646: 33 06 06                 s1 = 0x6
   649: 53 27 fc 00 0d           jump @73 if a0 <u 252
      :                          @72
   654: 88 77 fe 00              a0 = a0 <u 0xfe
   658: 9a 76 08                 s1 = 0x8 - a0
   661: 01                       fallthrough
      :                          @73
   662: 7b 1a                    u64 [sp] = a3
   664: ac 6a 74                 jump @82 if a3 <u s1
      :                          @74
   667: 64 57                    a0 = s0
   669: 64 68                    a1 = s1
   671: 50 10 0a c9 00           ra = 10, jump @95
      :                          @75 [@dyn 5]
   676: 64 78                    a1 = a0
   678: 82 1a                    a3 = u64 [sp]
   680: 01                       fallthrough
      :                          @76
   681: c8 65 07                 a0 = s0 + s1
   684: e4 6a 09                 a2 = maxu(a3, s1)
   687: c9 69 09                 a2 = a2 - s1
   690: e6 89 08                 a1 = minu(a2, a1)
   693: 01                       fallthrough
      :                          @77
   694: c8 78 08                 a1 = a1 + a0
   697: 80 88 fc                 a1 = u32 [a1 + 0xfffffffffffffffc]
   700: 33 09 64                 a2 = 0x64
   703: 33 0a 64                 a3 = 0x64
   706: 0a 09                    ecalli 9 // 'new'
   708: 64 75                    s0 = a0
   710: 7b 17 08                 u64 [sp + 0x8] = a0
   713: 48 11 14                 u32 [sp + 20] = 0
   716: 95 17 14                 a0 = sp + 0x14
   719: 33 08 04                 a1 = 0x4
   722: 95 19 08                 a2 = sp + 0x8
   725: 33 0a 04                 a3 = 0x4
   728: 0a 03                    ecalli 3 // 'write'
   730: 95 17 18                 a0 = sp + 0x18
   733: 33 09 80 00              a2 = 0x80
   737: 33 08                    a1 = 0
   739: 50 10 0c 33              ra = 12, jump @84
      :                          @78 [@dyn 6]
   743: 33 08 20 a1 07           a1 = 0x7a120
   748: 33 09 64                 a2 = 0x64
   751: 95 1a 18                 a3 = sp + 0x18
   754: 64 57                    a0 = s0
   756: 0a 0b                    ecalli 11 // 'transfer'
   758: 81 17 08                 a0 = i32 [sp + 0x8]
   761: 3d 07 00 00 02           u32 [0x20000] = a0
   766: 33 07 00 00 02           a0 = 0x20000
   771: 33 08 20                 a1 = 0x20
   774: 28 24 ff                 jump @63
      :                          @79
   777: 00                       trap
      :                          @80
   778: 00                       trap
      :                          @81
   779: 00                       trap
      :                          @82
   780: 00                       trap
      :                          @83 [export #2: 'on_transfer']
   781: 33 07 00 00 01           a0 = 0x10000
   786: 33 08                    a1 = 0
   788: 32 00                    ret
      :                          @84
   790: 8d 7a                    i32 a3 = -a0
   792: 84 aa 07                 a3 = a3 & 0x7
   795: c8 a7 0b                 a4 = a0 + a3
   798: 51 0a 0e                 jump @87 if a3 == 0
      :                          @85
   801: 64 7c                    a5 = a0
   803: 01                       fallthrough
      :                          @86
   804: 78 c8                    u8 [a5] = a1
   806: 95 cc 01                 a5 = a5 + 0x1
   809: ac bc fb                 jump @86 if a5 <u a4
      :                          @87
   812: c9 a9 03                 t1 = a2 - a3
   815: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
   818: c8 cb 0a                 a3 = a4 + a5
   821: 58 0c 1d                 jump @90 if a5 <=s 0
      :                          @88
   824: 84 82 ff 00              t0 = a1 & 0xff
   828: 14 09 01 01 01 01 01 01 01 01 a2 = 0x101010101010101
   838: ca 92 0c                 a5 = t0 * a2
   841: 01                       fallthrough
      :                          @89
   842: 7b bc                    u64 [a4] = a5
   844: 95 bb 08                 a4 = a4 + 0x8
   847: ac ab fb                 jump @89 if a4 <u a3
      :                          @90
   850: 84 39 07                 a2 = t1 & 0x7
   853: 52 09 05                 jump @92 if a2 != 0
      :                          @91
   856: 28 0e                    jump @94
      :                          @92
   858: c8 a9 09                 a2 = a2 + a3
   861: 01                       fallthrough
      :                          @93
   862: 78 a8                    u8 [a3] = a1
   864: 95 aa 01                 a3 = a3 + 0x1
   867: ac 9a fb                 jump @93 if a3 <u a2
      :                          @94
   870: 32 00                    ret
      :                          @95
   872: 51 08 9b 00              jump @116 if a1 == 0
      :                          @96
   876: 64 79                    a2 = a0
   878: 7c 77                    a0 = u8 [a0]
   880: 51 07 91 00              jump @115 if a0 == 0
      :                          @97
   884: 51 27 ff 00 90 00        jump @117 if a0 == 255
      :                          @98
   890: 6c 7a                    a3 = sext.b a0
   892: 57 0a 09                 jump @100 if a3 <s 0
      :                          @99
   895: 33 0a                    a3 = 0
   897: 33 08                    a1 = 0
   899: 28 73                    jump @114
      :                          @100
   901: 55 27 c0 00 0d           jump @102 if a0 >=u 192
      :                          @101
   906: 33 0a 01                 a3 = 0x1
   909: 33 0b 80                 a4 = 0xffffffffffffff80
   912: 28 4a                    jump @111
      :                          @102
   914: 55 27 e0 00 0e           jump @104 if a0 >=u 224
      :                          @103
   919: 33 0a 02                 a3 = 0x2
   922: 33 0b 40 ff              a4 = 0xffffffffffffff40
   926: 28 3c                    jump @111
      :                          @104
   928: 55 27 f0 00 0e           jump @106 if a0 >=u 240
      :                          @105
   933: 33 0a 03                 a3 = 0x3
   936: 33 0b 20 ff              a4 = 0xffffffffffffff20
   940: 28 2e                    jump @111
      :                          @106
   942: 55 27 f8 00 0e           jump @108 if a0 >=u 248
      :                          @107
   947: 33 0a 04                 a3 = 0x4
   950: 33 0b 10 ff              a4 = 0xffffffffffffff10
   954: 28 20                    jump @111
      :                          @108
   956: 55 27 fc 00 0e           jump @110 if a0 >=u 252
      :                          @109
   961: 33 0a 05                 a3 = 0x5
   964: 33 0b 08 ff              a4 = 0xffffffffffffff08
   968: 28 12                    jump @111
      :                          @110
   970: 88 7a fe 00              a3 = a0 <u 0xfe
   974: 33 0b 04 ff              a4 = 0xffffffffffffff04
   978: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
   982: 85 aa 07                 a3 = a3 ^ 0x7
   985: 01                       fallthrough
      :                          @111
   986: ae 8a 2b                 jump @118 if a3 >=u a1
      :                          @112
   989: 33 08                    a1 = 0
   991: c8 b7 07                 a0 = a0 + a4
   994: 64 ab                    a4 = a3
   996: 01                       fallthrough
      :                          @113
   997: c8 b9 0c                 a5 = a2 + a4
  1000: 7c cc                    a5 = u8 [a5]
  1002: 97 88 08                 a1 = a1 << 0x8
  1005: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  1008: d4 c8 08                 a1 = a1 | a5
  1011: 52 0b f2                 jump @113 if a4 != 0
      :                          @114
  1014: 8a a9 03                 i32 a2 = a3 << 0x3
  1017: cf 97 07                 a0 = a0 << a2
  1020: c8 87 07                 a0 = a0 + a1
  1023: 32 00                    ret
      :                          @115
  1025: 32 00                    ret
      :                          @116
  1027: 00                       trap
      :                          @117
  1028: 00                       trap
      :                          @118
  1029: 00                       trap
