// RO data = 0/0 bytes
// RW data = 0/65568 bytes
// Stack size = 65536 bytes
// RO data = []
// RW data = []
// Instructions = 444
// Code size = 1364 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 ae 00 00 00           jump @18
      :                          @2
    10: 28 50 04                 jump @104
      :                          @3 [export #0: 'refine']
    13: 95 11 e0                 sp = sp + 0xffffffffffffffe0
    16: 7b 10 18                 u64 [sp + 0x18] = ra
    19: 7b 15 10                 u64 [sp + 0x10] = s0
    22: 7b 16 08                 u64 [sp + 0x8] = s1
    25: 64 86                    s1 = a1
    27: 64 78                    a1 = a0
    29: 33 09 04                 a2 = 0x4
    32: 33 07 00 00 01           a0 = 0x10000
    37: ac 96 7c                 jump @15 if s1 <u a2
      :                          @4
    40: 95 66 fc                 s1 = s1 + 0xfffffffffffffffc
    43: 51 06 76                 jump @15 if s1 == 0
      :                          @5
    46: 95 87 04                 a0 = a1 + 0x4
    49: 7d 78                    a1 = i8 [a0]
    51: 33 05 01                 s0 = 0x1
    54: 59 08 3a                 jump @13 if a1 >=s 0
      :                          @6
    57: 84 89 ff 00              a2 = a1 & 0xff
    61: 33 05 02                 s0 = 0x2
    64: 53 29 c0 00 2d           jump @12 if a2 <u 192
      :                          @7
    69: 33 05 03                 s0 = 0x3
    72: 53 29 e0 00 25           jump @12 if a2 <u 224
      :                          @8
    77: 33 05 04                 s0 = 0x4
    80: 53 29 f0 00 1d           jump @12 if a2 <u 240
      :                          @9
    85: 33 05 05                 s0 = 0x5
    88: 53 29 f8 00 15           jump @12 if a2 <u 248
      :                          @10
    93: 33 05 06                 s0 = 0x6
    96: 53 29 fc 00 0d           jump @12 if a2 <u 252
      :                          @11
   101: 88 98 fe 00              a1 = a2 <u 0xfe
   105: 9a 85 08                 s0 = 0x8 - a1
   108: 01                       fallthrough
      :                          @12
   109: ac 56 45                 jump @17 if s1 <u s0
      :                          @13
   112: 64 58                    a1 = s0
   114: 7b 17                    u64 [sp] = a0
   116: 50 10 02 42 04           ra = 2, jump @117
      :                          @14 [@dyn 1]
   121: 64 78                    a1 = a0
   123: e4 56 07                 a0 = maxu(s1, s0)
   126: c9 57 07                 a0 = a0 - s0
   129: d8 87 09                 a2 = a0 <u a1
   132: e4 87 07                 a0 = maxu(a0, a1)
   135: c9 87 07                 a0 = a0 - a1
   138: 88 77 20                 a0 = a0 <u 0x20
   141: d4 79 09                 a2 = a2 | a0
   144: 82 17                    a0 = u64 [sp]
   146: c8 75 05                 s0 = s0 + a0
   149: 94 98                    a1 = 0 if a2 != 0
   151: 33 07 00 00 01           a0 = 0x10000
   156: da 95 07                 a0 = s0 if a2 == 0
   159: 28 05                    jump @16
      :                          @15
   161: 33 08                    a1 = 0
   163: 01                       fallthrough
      :                          @16
   164: 82 10 18                 ra = u64 [sp + 0x18]
   167: 82 15 10                 s0 = u64 [sp + 0x10]
   170: 82 16 08                 s1 = u64 [sp + 0x8]
   173: 95 11 20                 sp = sp + 0x20
   176: 32 00                    ret
      :                          @17
   178: 00                       trap
      :                          @18 [export #1: 'accumulate']
   179: 95 11 50 ff              sp = sp + 0xffffffffffffff50
   183: 7b 10 a8 00              u64 [sp + 0xa8] = ra
   187: 7b 15 a0 00              u64 [sp + 0xa0] = s0
   191: 7b 16 98 00              u64 [sp + 0x98] = s1
   195: 33 09 00 00 01           a2 = 0x10000
   200: 51 08 7a 01              jump @64 if a1 == 0
      :                          @19
   204: 64 86                    s1 = a1
   206: 7d 78                    a1 = i8 [a0]
   208: 33 05 01                 s0 = 0x1
   211: 59 08 37                 jump @26 if a1 >=s 0
      :                          @20
   214: 84 8a ff 00              a3 = a1 & 0xff
   218: 33 05 02                 s0 = 0x2
   221: 53 2a c0 00 2d           jump @26 if a3 <u 192
      :                          @21
   226: 33 05 03                 s0 = 0x3
   229: 53 2a e0 00 25           jump @26 if a3 <u 224
      :                          @22
   234: 33 05 04                 s0 = 0x4
   237: 53 2a f0 00 1d           jump @26 if a3 <u 240
      :                          @23
   242: 33 05 05                 s0 = 0x5
   245: 53 2a f8 00 15           jump @26 if a3 <u 248
      :                          @24
   250: 33 05 06                 s0 = 0x6
   253: 53 2a fc 00 0d           jump @26 if a3 <u 252
      :                          @25
   258: 88 a8 fe 00              a1 = a3 <u 0xfe
   262: 9a 85 08                 s0 = 0x8 - a1
   265: 01                       fallthrough
      :                          @26
   266: ae 56 08                 jump @28 if s1 >=u s0
      :                          @27
   269: 33 08                    a1 = 0
   271: 28 33 01                 jump @64
      :                          @28
   274: 64 58                    a1 = s0
   276: 7b 17                    u64 [sp] = a0
   278: 50 10 04 a0 03           ra = 4, jump @117
      :                          @29 [@dyn 2]
   283: aa 56 1f 01              jump @63 if s1 == s0
      :                          @30
   287: 82 17                    a0 = u64 [sp]
   289: c8 57 07                 a0 = a0 + s0
   292: 7d 78                    a1 = i8 [a0]
   294: c9 56 06                 s1 = s1 - s0
   297: 33 05 01                 s0 = 0x1
   300: 59 08 37                 jump @37 if a1 >=s 0
      :                          @31
   303: 84 89 ff 00              a2 = a1 & 0xff
   307: 33 05 02                 s0 = 0x2
   310: 53 29 c0 00 2d           jump @37 if a2 <u 192
      :                          @32
   315: 33 05 03                 s0 = 0x3
   318: 53 29 e0 00 25           jump @37 if a2 <u 224
      :                          @33
   323: 33 05 04                 s0 = 0x4
   326: 53 29 f0 00 1d           jump @37 if a2 <u 240
      :                          @34
   331: 33 05 05                 s0 = 0x5
   334: 53 29 f8 00 15           jump @37 if a2 <u 248
      :                          @35
   339: 33 05 06                 s0 = 0x6
   342: 53 29 fc 00 0d           jump @37 if a2 <u 252
      :                          @36
   347: 88 98 fe 00              a1 = a2 <u 0xfe
   351: 9a 85 08                 s0 = 0x8 - a1
   354: 01                       fallthrough
      :                          @37
   355: ac 56 d7 00              jump @63 if s1 <u s0
      :                          @38
   359: 64 58                    a1 = s0
   361: 7b 17                    u64 [sp] = a0
   363: 50 10 06 4b 03           ra = 6, jump @117
      :                          @39 [@dyn 3]
   368: 82 17                    a0 = u64 [sp]
   370: c8 57 07                 a0 = a0 + s0
   373: c9 56 0a                 a3 = s1 - s0
   376: ab 56 07                 jump @41 if s1 != s0
      :                          @40
   379: 33 05                    s0 = 0
   381: 28 41                    jump @49
      :                          @41
   383: 7d 78                    a1 = i8 [a0]
   385: 33 05 01                 s0 = 0x1
   388: 59 08 37                 jump @48 if a1 >=s 0
      :                          @42
   391: 84 89 ff 00              a2 = a1 & 0xff
   395: 33 05 02                 s0 = 0x2
   398: 53 29 c0 00 2d           jump @48 if a2 <u 192
      :                          @43
   403: 33 05 03                 s0 = 0x3
   406: 53 29 e0 00 25           jump @48 if a2 <u 224
      :                          @44
   411: 33 05 04                 s0 = 0x4
   414: 53 29 f0 00 1d           jump @48 if a2 <u 240
      :                          @45
   419: 33 05 05                 s0 = 0x5
   422: 53 29 f8 00 15           jump @48 if a2 <u 248
      :                          @46
   427: 33 05 06                 s0 = 0x6
   430: 53 29 fc 00 0d           jump @48 if a2 <u 252
      :                          @47
   435: 88 98 fe 00              a1 = a2 <u 0xfe
   439: 9a 85 08                 s0 = 0x8 - a1
   442: 01                       fallthrough
      :                          @48
   443: ac 5a 7f                 jump @63 if a3 <u s0
      :                          @49
   446: 64 a6                    s1 = a3
   448: 7b 17                    u64 [sp] = a0
   450: 64 58                    a1 = s0
   452: 50 10 08 f2 02           ra = 8, jump @117
      :                          @50 [@dyn 4]
   457: 51 07 71                 jump @63 if a0 == 0
      :                          @51
   460: e4 56 07                 a0 = maxu(s1, s0)
   463: c9 57 07                 a0 = a0 - s0
   466: 33 09 00 00 01           a2 = 0x10000
   471: 53 17 60 36 ff           jump @27 if a0 <u 96
      :                          @52
   476: 82 18                    a1 = u64 [sp]
   478: c8 85 05                 s0 = s0 + a1
   481: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   484: 95 57 60                 a0 = s0 + 0x60
   487: 7b 17                    u64 [sp] = a0
   489: 51 06 6d                 jump @65 if s1 == 0
      :                          @53
   492: 7d 78                    a1 = i8 [a0]
   494: 33 05 01                 s0 = 0x1
   497: 59 08 37                 jump @60 if a1 >=s 0
      :                          @54
   500: 84 89 ff 00              a2 = a1 & 0xff
   504: 33 05 02                 s0 = 0x2
   507: 53 29 c0 00 2d           jump @60 if a2 <u 192
      :                          @55
   512: 33 05 03                 s0 = 0x3
   515: 53 29 e0 00 25           jump @60 if a2 <u 224
      :                          @56
   520: 33 05 04                 s0 = 0x4
   523: 53 29 f0 00 1d           jump @60 if a2 <u 240
      :                          @57
   528: 33 05 05                 s0 = 0x5
   531: 53 29 f8 00 15           jump @60 if a2 <u 248
      :                          @58
   536: 33 05 06                 s0 = 0x6
   539: 53 29 fc 00 0d           jump @60 if a2 <u 252
      :                          @59
   544: 88 98 fe 00              a1 = a2 <u 0xfe
   548: 9a 85 08                 s0 = 0x8 - a1
   551: 01                       fallthrough
      :                          @60
   552: ac 56 30 02              jump @102 if s1 <u s0
      :                          @61
   556: 64 58                    a1 = s0
   558: 50 10 0a 88 02           ra = 10, jump @117
      :                          @62 [@dyn 5]
   563: 33 09 00 00 01           a2 = 0x10000
   568: 28 23                    jump @66
      :                          @63
   570: 33 08                    a1 = 0
   572: 33 09 00 00 01           a2 = 0x10000
   577: 01                       fallthrough
      :                          @64
   578: 64 97                    a0 = a2
   580: 82 10 a8 00              ra = u64 [sp + 0xa8]
   584: 82 15 a0 00              s0 = u64 [sp + 0xa0]
   588: 82 16 98 00              s1 = u64 [sp + 0x98]
   592: 95 11 b0 00              sp = sp + 0xb0
   596: 32 00                    ret
      :                          @65
   598: 33 05                    s0 = 0
   600: 33 07                    a0 = 0
   602: 01                       fallthrough
      :                          @66
   603: e4 56 08                 a1 = maxu(s1, s0)
   606: c9 58 08                 a1 = a1 - s0
   609: e4 78 06                 s1 = maxu(a1, a0)
   612: c9 76 06                 s1 = s1 - a0
   615: 53 16 20 a6 fe           jump @27 if s1 <u 32
      :                          @67
   620: 82 18                    a1 = u64 [sp]
   622: c8 85 05                 s0 = s0 + a1
   625: c8 57 07                 a0 = a0 + s0
   628: 95 66 e0                 s1 = s1 + 0xffffffffffffffe0
   631: 95 77 20                 a0 = a0 + 0x20
   634: 7b 17                    u64 [sp] = a0
   636: 51 06 51                 jump @78 if s1 == 0
      :                          @68
   639: 7d 78                    a1 = i8 [a0]
   641: 33 05 01                 s0 = 0x1
   644: 59 08 37                 jump @75 if a1 >=s 0
      :                          @69
   647: 84 89 ff 00              a2 = a1 & 0xff
   651: 33 05 02                 s0 = 0x2
   654: 53 29 c0 00 2d           jump @75 if a2 <u 192
      :                          @70
   659: 33 05 03                 s0 = 0x3
   662: 53 29 e0 00 25           jump @75 if a2 <u 224
      :                          @71
   667: 33 05 04                 s0 = 0x4
   670: 53 29 f0 00 1d           jump @75 if a2 <u 240
      :                          @72
   675: 33 05 05                 s0 = 0x5
   678: 53 29 f8 00 15           jump @75 if a2 <u 248
      :                          @73
   683: 33 05 06                 s0 = 0x6
   686: 53 29 fc 00 0d           jump @75 if a2 <u 252
      :                          @74
   691: 88 98 fe 00              a1 = a2 <u 0xfe
   695: 9a 85 08                 s0 = 0x8 - a1
   698: 01                       fallthrough
      :                          @75
   699: ac 56 9d 01              jump @102 if s1 <u s0
      :                          @76
   703: 64 58                    a1 = s0
   705: 50 10 0c f5 01           ra = 12, jump @117
      :                          @77 [@dyn 6]
   710: 33 09 00 00 01           a2 = 0x10000
   715: 28 05                    jump @79
      :                          @78
   717: 33 05                    s0 = 0
   719: 01                       fallthrough
      :                          @79
   720: ae 65 3d fe              jump @27 if s0 >=u s1
      :                          @80
   724: 82 17                    a0 = u64 [sp]
   726: c8 57 07                 a0 = a0 + s0
   729: 7c 78                    a1 = u8 [a0]
   731: 51 08 09                 jump @82 if a1 == 0
      :                          @81
   734: 33 08                    a1 = 0
   736: 33 07                    a0 = 0
   738: 28 7d                    jump @95
      :                          @82
   740: e4 56 08                 a1 = maxu(s1, s0)
   743: c9 58 08                 a1 = a1 - s0
   746: 95 75 01                 s0 = a0 + 0x1
   749: 33 07 01                 a0 = 0x1
   752: e4 78 07                 a0 = maxu(a1, a0)
   755: 33 09 02                 a2 = 0x2
   758: 95 7a ff                 a3 = a0 + 0xffffffffffffffff
   761: ae 98 09                 jump @84 if a1 >=u a2
      :                          @83
   764: 33 06                    s1 = 0
   766: 33 08                    a1 = 0
   768: 28 52                    jump @94
      :                          @84
   770: 7d 57                    a0 = i8 [s0]
   772: 33 06 01                 s1 = 0x1
   775: 59 07 37                 jump @91 if a0 >=s 0
      :                          @85
   778: 84 77 ff 00              a0 = a0 & 0xff
   782: 33 06 02                 s1 = 0x2
   785: 53 27 c0 00 2d           jump @91 if a0 <u 192
      :                          @86
   790: 33 06 03                 s1 = 0x3
   793: 53 27 e0 00 25           jump @91 if a0 <u 224
      :                          @87
   798: 33 06 04                 s1 = 0x4
   801: 53 27 f0 00 1d           jump @91 if a0 <u 240
      :                          @88
   806: 33 06 05                 s1 = 0x5
   809: 53 27 f8 00 15           jump @91 if a0 <u 248
      :                          @89
   814: 33 06 06                 s1 = 0x6
   817: 53 27 fc 00 0d           jump @91 if a0 <u 252
      :                          @90
   822: 88 77 fe 00              a0 = a0 <u 0xfe
   826: 9a 76 08                 s1 = 0x8 - a0
   829: 01                       fallthrough
      :                          @91
   830: 7b 1a                    u64 [sp] = a3
   832: ac 6a 19 01              jump @103 if a3 <u s1
      :                          @92
   836: 64 57                    a0 = s0
   838: 64 68                    a1 = s1
   840: 50 10 0e 6e 01           ra = 14, jump @117
      :                          @93 [@dyn 7]
   845: 64 78                    a1 = a0
   847: 82 1a                    a3 = u64 [sp]
   849: 01                       fallthrough
      :                          @94
   850: c8 65 07                 a0 = s0 + s1
   853: e4 6a 09                 a2 = maxu(a3, s1)
   856: c9 69 09                 a2 = a2 - s1
   859: e6 89 08                 a1 = minu(a2, a1)
   862: 01                       fallthrough
      :                          @95
   863: c8 78 08                 a1 = a1 + a0
   866: 80 88 fc                 a1 = u32 [a1 + 0xfffffffffffffffc]
   869: 33 09 64                 a2 = 0x64
   872: 33 0a 64                 a3 = 0x64
   875: 0a 09                    ecalli 9 // 'new'
   877: 64 75                    s0 = a0
   879: 7b 17 08                 u64 [sp + 0x8] = a0
   882: 48 11 14                 u32 [sp + 20] = 0
   885: 95 17 14                 a0 = sp + 0x14
   888: 33 08 04                 a1 = 0x4
   891: 95 19 08                 a2 = sp + 0x8
   894: 33 0a 04                 a3 = 0x4
   897: 0a 03                    ecalli 3 // 'write'
   899: 95 17 18                 a0 = sp + 0x18
   902: 33 09 80 00              a2 = 0x80
   906: 33 08                    a1 = 0
   908: 50 10 10 d7 00           ra = 16, jump @105
      :                          @96 [@dyn 8]
   913: 33 08 20 a1 07           a1 = 0x7a120
   918: 33 09 64                 a2 = 0x64
   921: 95 1a 18                 a3 = sp + 0x18
   924: 64 57                    a0 = s0
   926: 33 00 12                 ra = 0x12
   929: 0a 0b                    ecalli 11 // 'transfer'
   931: 01                       fallthrough
      :                          @97 [@dyn 9]
   932: 33 09 10 00 02           a2 = 0x20010
   937: 33 07 00 00 01           a0 = 0x10000
   942: c8 79 09                 a2 = a2 + a0
   945: 01                       fallthrough
      :                          @98
   946: 82 9a                    a3 = u64 [a2]
   948: 95 a8 20                 a1 = a3 + 0x20
   951: ac a8 fe 00              jump @116 if a1 <u a3
      :                          @99
   955: 95 8b 01                 a4 = a1 + 0x1
   958: 88 bc 01                 a5 = a4 <u 0x1
   961: d8 b7 0b                 a4 = a0 <u a4
   964: d4 cb 0b                 a4 = a4 | a5
   967: 52 0b ee 00              jump @116 if a4 != 0
      :                          @100
   971: 82 9b                    a4 = u64 [a2]
   973: ab ab e5                 jump @98 if a4 != a3
      :                          @101
   976: 7b 98                    u64 [a2] = a1
   978: 33 0c                    a5 = 0
   980: 33 07 10 00 03           a0 = 0x30010
   985: c9 87 09                 a2 = a0 - a1
   988: 46 19 1f                 u8 [a2 + 31] = 0
   991: 46 19 1e                 u8 [a2 + 30] = 0
   994: 46 19 1d                 u8 [a2 + 29] = 0
   997: 46 19 1c                 u8 [a2 + 28] = 0
  1000: 46 19 1b                 u8 [a2 + 27] = 0
  1003: 46 19 1a                 u8 [a2 + 26] = 0
  1006: 46 19 19                 u8 [a2 + 25] = 0
  1009: 46 19 18                 u8 [a2 + 24] = 0
  1012: 46 19 17                 u8 [a2 + 23] = 0
  1015: 46 19 16                 u8 [a2 + 22] = 0
  1018: 46 19 15                 u8 [a2 + 21] = 0
  1021: 46 19 14                 u8 [a2 + 20] = 0
  1024: 46 19 13                 u8 [a2 + 19] = 0
  1027: 46 19 12                 u8 [a2 + 18] = 0
  1030: 46 19 11                 u8 [a2 + 17] = 0
  1033: 46 19 10                 u8 [a2 + 16] = 0
  1036: 46 19 0f                 u8 [a2 + 15] = 0
  1039: 46 19 0e                 u8 [a2 + 14] = 0
  1042: 46 19 0d                 u8 [a2 + 13] = 0
  1045: 46 19 0c                 u8 [a2 + 12] = 0
  1048: 46 19 0b                 u8 [a2 + 11] = 0
  1051: 46 19 0a                 u8 [a2 + 10] = 0
  1054: 46 19 09                 u8 [a2 + 9] = 0
  1057: 46 19 08                 u8 [a2 + 8] = 0
  1060: 46 19 07                 u8 [a2 + 7] = 0
  1063: 46 19 06                 u8 [a2 + 6] = 0
  1066: 46 19 05                 u8 [a2 + 5] = 0
  1069: 46 19 04                 u8 [a2 + 4] = 0
  1072: 46 19 03                 u8 [a2 + 3] = 0
  1075: 81 17 08                 a0 = i32 [sp + 0x8]
  1078: 46 19 02                 u8 [a2 + 2] = 0
  1081: 46 19 01                 u8 [a2 + 1] = 0
  1084: 46 09                    u8 [a2 + 0] = 0
  1086: 98 78 18                 a1 = a0 >> 0x18
  1089: 78 98 03                 u8 [a2 + 0x3] = a1
  1092: 98 78 10                 a1 = a0 >> 0x10
  1095: 78 98 02                 u8 [a2 + 0x2] = a1
  1098: 98 78 08                 a1 = a0 >> 0x8
  1101: 78 98 01                 u8 [a2 + 0x1] = a1
  1104: 78 97                    u8 [a2] = a0
  1106: 33 08 20                 a1 = 0x20
  1109: 28 ed fd                 jump @64
      :                          @102
  1112: 00                       trap
      :                          @103
  1113: 00                       trap
      :                          @104 [export #2: 'on_transfer']
  1114: 33 07 00 00 01           a0 = 0x10000
  1119: 33 08                    a1 = 0
  1121: 32 00                    ret
      :                          @105
  1123: 8d 7a                    i32 a3 = -a0
  1125: 84 aa 07                 a3 = a3 & 0x7
  1128: c8 a7 0b                 a4 = a0 + a3
  1131: 51 0a 0e                 jump @108 if a3 == 0
      :                          @106
  1134: 64 7c                    a5 = a0
  1136: 01                       fallthrough
      :                          @107
  1137: 78 c8                    u8 [a5] = a1
  1139: 95 cc 01                 a5 = a5 + 0x1
  1142: ac bc fb                 jump @107 if a5 <u a4
      :                          @108
  1145: c9 a9 03                 t1 = a2 - a3
  1148: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  1151: c8 cb 0a                 a3 = a4 + a5
  1154: 58 0c 1d                 jump @111 if a5 <=s 0
      :                          @109
  1157: 84 82 ff 00              t0 = a1 & 0xff
  1161: 14 09 01 01 01 01 01 01 01 01 a2 = 0x101010101010101
  1171: ca 92 0c                 a5 = t0 * a2
  1174: 01                       fallthrough
      :                          @110
  1175: 7b bc                    u64 [a4] = a5
  1177: 95 bb 08                 a4 = a4 + 0x8
  1180: ac ab fb                 jump @110 if a4 <u a3
      :                          @111
  1183: 84 39 07                 a2 = t1 & 0x7
  1186: 52 09 05                 jump @113 if a2 != 0
      :                          @112
  1189: 28 0e                    jump @115
      :                          @113
  1191: c8 a9 09                 a2 = a2 + a3
  1194: 01                       fallthrough
      :                          @114
  1195: 78 a8                    u8 [a3] = a1
  1197: 95 aa 01                 a3 = a3 + 0x1
  1200: ac 9a fb                 jump @114 if a3 <u a2
      :                          @115
  1203: 32 00                    ret
      :                          @116
  1205: 00                       trap
      :                          @117
  1206: 51 08 9b 00              jump @138 if a1 == 0
      :                          @118
  1210: 64 79                    a2 = a0
  1212: 7c 77                    a0 = u8 [a0]
  1214: 51 07 91 00              jump @137 if a0 == 0
      :                          @119
  1218: 51 27 ff 00 90 00        jump @139 if a0 == 255
      :                          @120
  1224: 6c 7a                    a3 = sext.b a0
  1226: 57 0a 09                 jump @122 if a3 <s 0
      :                          @121
  1229: 33 0a                    a3 = 0
  1231: 33 08                    a1 = 0
  1233: 28 73                    jump @136
      :                          @122
  1235: 55 27 c0 00 0d           jump @124 if a0 >=u 192
      :                          @123
  1240: 33 0a 01                 a3 = 0x1
  1243: 33 0b 80                 a4 = 0xffffffffffffff80
  1246: 28 4a                    jump @133
      :                          @124
  1248: 55 27 e0 00 0e           jump @126 if a0 >=u 224
      :                          @125
  1253: 33 0a 02                 a3 = 0x2
  1256: 33 0b 40 ff              a4 = 0xffffffffffffff40
  1260: 28 3c                    jump @133
      :                          @126
  1262: 55 27 f0 00 0e           jump @128 if a0 >=u 240
      :                          @127
  1267: 33 0a 03                 a3 = 0x3
  1270: 33 0b 20 ff              a4 = 0xffffffffffffff20
  1274: 28 2e                    jump @133
      :                          @128
  1276: 55 27 f8 00 0e           jump @130 if a0 >=u 248
      :                          @129
  1281: 33 0a 04                 a3 = 0x4
  1284: 33 0b 10 ff              a4 = 0xffffffffffffff10
  1288: 28 20                    jump @133
      :                          @130
  1290: 55 27 fc 00 0e           jump @132 if a0 >=u 252
      :                          @131
  1295: 33 0a 05                 a3 = 0x5
  1298: 33 0b 08 ff              a4 = 0xffffffffffffff08
  1302: 28 12                    jump @133
      :                          @132
  1304: 88 7a fe 00              a3 = a0 <u 0xfe
  1308: 33 0b 04 ff              a4 = 0xffffffffffffff04
  1312: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  1316: 85 aa 07                 a3 = a3 ^ 0x7
  1319: 01                       fallthrough
      :                          @133
  1320: ae 8a 2b                 jump @140 if a3 >=u a1
      :                          @134
  1323: 33 08                    a1 = 0
  1325: c8 b7 07                 a0 = a0 + a4
  1328: 64 ab                    a4 = a3
  1330: 01                       fallthrough
      :                          @135
  1331: c8 b9 0c                 a5 = a2 + a4
  1334: 7c cc                    a5 = u8 [a5]
  1336: 97 88 08                 a1 = a1 << 0x8
  1339: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  1342: d4 c8 08                 a1 = a1 | a5
  1345: 52 0b f2                 jump @135 if a4 != 0
      :                          @136
  1348: 8a a9 03                 i32 a2 = a3 << 0x3
  1351: cf 97 07                 a0 = a0 << a2
  1354: c8 87 07                 a0 = a0 + a1
  1357: 32 00                    ret
      :                          @137
  1359: 32 00                    ret
      :                          @138
  1361: 00                       trap
      :                          @139
  1362: 00                       trap
      :                          @140
  1363: 00                       trap
