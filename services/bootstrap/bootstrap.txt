// RO data = 0/0 bytes
// RW data = 0/65568 bytes
// Stack size = 65536 bytes
// RO data = []
// RW data = []
// Instructions = 470
// Code size = 1447 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 01 01 00 00           jump @31
      :                          @2
    10: 28 a3 04                 jump @117
      :                          @3 [export #0: 'refine']
    13: 95 11 e0                 sp = sp + 0xffffffffffffffe0
    16: 7b 10 18                 u64 [sp + 0x18] = ra
    19: 7b 15 10                 u64 [sp + 0x10] = s0
    22: 7b 16 08                 u64 [sp + 0x8] = s1
    25: 64 86                    s1 = a1
    27: 64 7a                    a3 = a0
    29: 33 07 00 00 01           a0 = 0x10000
    34: 53 16 04 43              jump @12 if s1 <u 4
      :                          @4
    38: 7d a8                    a1 = i8 [a3]
    40: 33 05 01                 s0 = 0x1
    43: 59 08 37                 jump @11 if a1 >=s 0
      :                          @5
    46: 84 89 ff 00              a2 = a1 & 0xff
    50: 33 05 02                 s0 = 0x2
    53: 53 29 c0 00 2d           jump @11 if a2 <u 192
      :                          @6
    58: 33 05 03                 s0 = 0x3
    61: 53 29 e0 00 25           jump @11 if a2 <u 224
      :                          @7
    66: 33 05 04                 s0 = 0x4
    69: 53 29 f0 00 1d           jump @11 if a2 <u 240
      :                          @8
    74: 33 05 05                 s0 = 0x5
    77: 53 29 f8 00 15           jump @11 if a2 <u 248
      :                          @9
    82: 33 05 06                 s0 = 0x6
    85: 53 29 fc 00 0d           jump @11 if a2 <u 252
      :                          @10
    90: 88 98 fe 00              a1 = a2 <u 0xfe
    94: 9a 85 08                 s0 = 0x8 - a1
    97: 01                       fallthrough
      :                          @11
    98: ae 56 14                 jump @14 if s1 >=u s0
      :                          @12
   101: 33 08                    a1 = 0
   103: 01                       fallthrough
      :                          @13
   104: 82 10 18                 ra = u64 [sp + 0x18]
   107: 82 15 10                 s0 = u64 [sp + 0x10]
   110: 82 16 08                 s1 = u64 [sp + 0x8]
   113: 95 11 20                 sp = sp + 0x20
   116: 32 00                    ret
      :                          @14
   118: 64 a7                    a0 = a3
   120: 64 58                    a1 = s0
   122: 7b 1a                    u64 [sp] = a3
   124: 50 10 02 8d 04           ra = 2, jump @130
      :                          @15 [@dyn 1]
   129: 82 17                    a0 = u64 [sp]
   131: c8 57 07                 a0 = a0 + s0
   134: 7b 17                    u64 [sp] = a0
   136: ab 56 0b                 jump @17 if s1 != s0
      :                          @16
   139: 33 09                    a2 = 0
   141: 33 05                    s0 = 0
   143: 33 08                    a1 = 0
   145: 28 56                    jump @27
      :                          @17
   147: 7d 78                    a1 = i8 [a0]
   149: c9 56 06                 s1 = s1 - s0
   152: 33 05 01                 s0 = 0x1
   155: 59 08 37                 jump @24 if a1 >=s 0
      :                          @18
   158: 84 89 ff 00              a2 = a1 & 0xff
   162: 33 05 02                 s0 = 0x2
   165: 53 29 c0 00 2d           jump @24 if a2 <u 192
      :                          @19
   170: 33 05 03                 s0 = 0x3
   173: 53 29 e0 00 25           jump @24 if a2 <u 224
      :                          @20
   178: 33 05 04                 s0 = 0x4
   181: 53 29 f0 00 1d           jump @24 if a2 <u 240
      :                          @21
   186: 33 05 05                 s0 = 0x5
   189: 53 29 f8 00 15           jump @24 if a2 <u 248
      :                          @22
   194: 33 05 06                 s0 = 0x6
   197: 53 29 fc 00 0d           jump @24 if a2 <u 252
      :                          @23
   202: 88 98 fe 00              a1 = a2 <u 0xfe
   206: 9a 85 08                 s0 = 0x8 - a1
   209: 01                       fallthrough
      :                          @24
   210: ac 56 33                 jump @30 if s1 <u s0
      :                          @25
   213: 64 58                    a1 = s0
   215: 50 10 04 32 04           ra = 4, jump @130
      :                          @26 [@dyn 2]
   220: e4 56 09                 a2 = maxu(s1, s0)
   223: c9 59 09                 a2 = a2 - s0
   226: 64 78                    a1 = a0
   228: ac 79 0f                 jump @28 if a2 <u a0
      :                          @27
   231: e4 89 07                 a0 = maxu(a2, a1)
   234: c9 87 07                 a0 = a0 - a1
   237: 33 09 20                 a2 = 0x20
   240: ae 97 0d                 jump @29 if a0 >=u a2
      :                          @28
   243: 33 08                    a1 = 0
   245: 33 07 00 00 01           a0 = 0x10000
   250: 28 6e ff                 jump @13
      :                          @29
   253: 82 17                    a0 = u64 [sp]
   255: c8 57 07                 a0 = a0 + s0
   258: 28 66 ff                 jump @13
      :                          @30
   261: 00                       trap
      :                          @31 [export #1: 'accumulate']
   262: 95 11 50 ff              sp = sp + 0xffffffffffffff50
   266: 7b 10 a8 00              u64 [sp + 0xa8] = ra
   270: 7b 15 a0 00              u64 [sp + 0xa0] = s0
   274: 7b 16 98 00              u64 [sp + 0x98] = s1
   278: 33 09 00 00 01           a2 = 0x10000
   283: 51 08 7a 01              jump @77 if a1 == 0
      :                          @32
   287: 64 86                    s1 = a1
   289: 7d 78                    a1 = i8 [a0]
   291: 33 05 01                 s0 = 0x1
   294: 59 08 37                 jump @39 if a1 >=s 0
      :                          @33
   297: 84 8a ff 00              a3 = a1 & 0xff
   301: 33 05 02                 s0 = 0x2
   304: 53 2a c0 00 2d           jump @39 if a3 <u 192
      :                          @34
   309: 33 05 03                 s0 = 0x3
   312: 53 2a e0 00 25           jump @39 if a3 <u 224
      :                          @35
   317: 33 05 04                 s0 = 0x4
   320: 53 2a f0 00 1d           jump @39 if a3 <u 240
      :                          @36
   325: 33 05 05                 s0 = 0x5
   328: 53 2a f8 00 15           jump @39 if a3 <u 248
      :                          @37
   333: 33 05 06                 s0 = 0x6
   336: 53 2a fc 00 0d           jump @39 if a3 <u 252
      :                          @38
   341: 88 a8 fe 00              a1 = a3 <u 0xfe
   345: 9a 85 08                 s0 = 0x8 - a1
   348: 01                       fallthrough
      :                          @39
   349: ae 56 08                 jump @41 if s1 >=u s0
      :                          @40
   352: 33 08                    a1 = 0
   354: 28 33 01                 jump @77
      :                          @41
   357: 64 58                    a1 = s0
   359: 7b 17                    u64 [sp] = a0
   361: 50 10 06 a0 03           ra = 6, jump @130
      :                          @42 [@dyn 3]
   366: aa 56 1f 01              jump @76 if s1 == s0
      :                          @43
   370: 82 17                    a0 = u64 [sp]
   372: c8 57 07                 a0 = a0 + s0
   375: 7d 78                    a1 = i8 [a0]
   377: c9 56 06                 s1 = s1 - s0
   380: 33 05 01                 s0 = 0x1
   383: 59 08 37                 jump @50 if a1 >=s 0
      :                          @44
   386: 84 89 ff 00              a2 = a1 & 0xff
   390: 33 05 02                 s0 = 0x2
   393: 53 29 c0 00 2d           jump @50 if a2 <u 192
      :                          @45
   398: 33 05 03                 s0 = 0x3
   401: 53 29 e0 00 25           jump @50 if a2 <u 224
      :                          @46
   406: 33 05 04                 s0 = 0x4
   409: 53 29 f0 00 1d           jump @50 if a2 <u 240
      :                          @47
   414: 33 05 05                 s0 = 0x5
   417: 53 29 f8 00 15           jump @50 if a2 <u 248
      :                          @48
   422: 33 05 06                 s0 = 0x6
   425: 53 29 fc 00 0d           jump @50 if a2 <u 252
      :                          @49
   430: 88 98 fe 00              a1 = a2 <u 0xfe
   434: 9a 85 08                 s0 = 0x8 - a1
   437: 01                       fallthrough
      :                          @50
   438: ac 56 d7 00              jump @76 if s1 <u s0
      :                          @51
   442: 64 58                    a1 = s0
   444: 7b 17                    u64 [sp] = a0
   446: 50 10 08 4b 03           ra = 8, jump @130
      :                          @52 [@dyn 4]
   451: 82 17                    a0 = u64 [sp]
   453: c8 57 07                 a0 = a0 + s0
   456: c9 56 0a                 a3 = s1 - s0
   459: ab 56 07                 jump @54 if s1 != s0
      :                          @53
   462: 33 05                    s0 = 0
   464: 28 41                    jump @62
      :                          @54
   466: 7d 78                    a1 = i8 [a0]
   468: 33 05 01                 s0 = 0x1
   471: 59 08 37                 jump @61 if a1 >=s 0
      :                          @55
   474: 84 89 ff 00              a2 = a1 & 0xff
   478: 33 05 02                 s0 = 0x2
   481: 53 29 c0 00 2d           jump @61 if a2 <u 192
      :                          @56
   486: 33 05 03                 s0 = 0x3
   489: 53 29 e0 00 25           jump @61 if a2 <u 224
      :                          @57
   494: 33 05 04                 s0 = 0x4
   497: 53 29 f0 00 1d           jump @61 if a2 <u 240
      :                          @58
   502: 33 05 05                 s0 = 0x5
   505: 53 29 f8 00 15           jump @61 if a2 <u 248
      :                          @59
   510: 33 05 06                 s0 = 0x6
   513: 53 29 fc 00 0d           jump @61 if a2 <u 252
      :                          @60
   518: 88 98 fe 00              a1 = a2 <u 0xfe
   522: 9a 85 08                 s0 = 0x8 - a1
   525: 01                       fallthrough
      :                          @61
   526: ac 5a 7f                 jump @76 if a3 <u s0
      :                          @62
   529: 64 a6                    s1 = a3
   531: 7b 17                    u64 [sp] = a0
   533: 64 58                    a1 = s0
   535: 50 10 0a f2 02           ra = 10, jump @130
      :                          @63 [@dyn 5]
   540: 51 07 71                 jump @76 if a0 == 0
      :                          @64
   543: e4 56 07                 a0 = maxu(s1, s0)
   546: c9 57 07                 a0 = a0 - s0
   549: 33 09 00 00 01           a2 = 0x10000
   554: 53 17 60 36 ff           jump @40 if a0 <u 96
      :                          @65
   559: 82 18                    a1 = u64 [sp]
   561: c8 85 05                 s0 = s0 + a1
   564: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   567: 95 57 60                 a0 = s0 + 0x60
   570: 7b 17                    u64 [sp] = a0
   572: 51 06 6d                 jump @78 if s1 == 0
      :                          @66
   575: 7d 78                    a1 = i8 [a0]
   577: 33 05 01                 s0 = 0x1
   580: 59 08 37                 jump @73 if a1 >=s 0
      :                          @67
   583: 84 89 ff 00              a2 = a1 & 0xff
   587: 33 05 02                 s0 = 0x2
   590: 53 29 c0 00 2d           jump @73 if a2 <u 192
      :                          @68
   595: 33 05 03                 s0 = 0x3
   598: 53 29 e0 00 25           jump @73 if a2 <u 224
      :                          @69
   603: 33 05 04                 s0 = 0x4
   606: 53 29 f0 00 1d           jump @73 if a2 <u 240
      :                          @70
   611: 33 05 05                 s0 = 0x5
   614: 53 29 f8 00 15           jump @73 if a2 <u 248
      :                          @71
   619: 33 05 06                 s0 = 0x6
   622: 53 29 fc 00 0d           jump @73 if a2 <u 252
      :                          @72
   627: 88 98 fe 00              a1 = a2 <u 0xfe
   631: 9a 85 08                 s0 = 0x8 - a1
   634: 01                       fallthrough
      :                          @73
   635: ac 56 30 02              jump @115 if s1 <u s0
      :                          @74
   639: 64 58                    a1 = s0
   641: 50 10 0c 88 02           ra = 12, jump @130
      :                          @75 [@dyn 6]
   646: 33 09 00 00 01           a2 = 0x10000
   651: 28 23                    jump @79
      :                          @76
   653: 33 08                    a1 = 0
   655: 33 09 00 00 01           a2 = 0x10000
   660: 01                       fallthrough
      :                          @77
   661: 64 97                    a0 = a2
   663: 82 10 a8 00              ra = u64 [sp + 0xa8]
   667: 82 15 a0 00              s0 = u64 [sp + 0xa0]
   671: 82 16 98 00              s1 = u64 [sp + 0x98]
   675: 95 11 b0 00              sp = sp + 0xb0
   679: 32 00                    ret
      :                          @78
   681: 33 05                    s0 = 0
   683: 33 07                    a0 = 0
   685: 01                       fallthrough
      :                          @79
   686: e4 56 08                 a1 = maxu(s1, s0)
   689: c9 58 08                 a1 = a1 - s0
   692: e4 78 06                 s1 = maxu(a1, a0)
   695: c9 76 06                 s1 = s1 - a0
   698: 53 16 20 a6 fe           jump @40 if s1 <u 32
      :                          @80
   703: 82 18                    a1 = u64 [sp]
   705: c8 85 05                 s0 = s0 + a1
   708: c8 57 07                 a0 = a0 + s0
   711: 95 66 e0                 s1 = s1 + 0xffffffffffffffe0
   714: 95 77 20                 a0 = a0 + 0x20
   717: 7b 17                    u64 [sp] = a0
   719: 51 06 51                 jump @91 if s1 == 0
      :                          @81
   722: 7d 78                    a1 = i8 [a0]
   724: 33 05 01                 s0 = 0x1
   727: 59 08 37                 jump @88 if a1 >=s 0
      :                          @82
   730: 84 89 ff 00              a2 = a1 & 0xff
   734: 33 05 02                 s0 = 0x2
   737: 53 29 c0 00 2d           jump @88 if a2 <u 192
      :                          @83
   742: 33 05 03                 s0 = 0x3
   745: 53 29 e0 00 25           jump @88 if a2 <u 224
      :                          @84
   750: 33 05 04                 s0 = 0x4
   753: 53 29 f0 00 1d           jump @88 if a2 <u 240
      :                          @85
   758: 33 05 05                 s0 = 0x5
   761: 53 29 f8 00 15           jump @88 if a2 <u 248
      :                          @86
   766: 33 05 06                 s0 = 0x6
   769: 53 29 fc 00 0d           jump @88 if a2 <u 252
      :                          @87
   774: 88 98 fe 00              a1 = a2 <u 0xfe
   778: 9a 85 08                 s0 = 0x8 - a1
   781: 01                       fallthrough
      :                          @88
   782: ac 56 9d 01              jump @115 if s1 <u s0
      :                          @89
   786: 64 58                    a1 = s0
   788: 50 10 0e f5 01           ra = 14, jump @130
      :                          @90 [@dyn 7]
   793: 33 09 00 00 01           a2 = 0x10000
   798: 28 05                    jump @92
      :                          @91
   800: 33 05                    s0 = 0
   802: 01                       fallthrough
      :                          @92
   803: ae 65 3d fe              jump @40 if s0 >=u s1
      :                          @93
   807: 82 17                    a0 = u64 [sp]
   809: c8 57 07                 a0 = a0 + s0
   812: 7c 78                    a1 = u8 [a0]
   814: 51 08 09                 jump @95 if a1 == 0
      :                          @94
   817: 33 08                    a1 = 0
   819: 33 07                    a0 = 0
   821: 28 7d                    jump @108
      :                          @95
   823: e4 56 08                 a1 = maxu(s1, s0)
   826: c9 58 08                 a1 = a1 - s0
   829: 95 75 01                 s0 = a0 + 0x1
   832: 33 07 01                 a0 = 0x1
   835: e4 78 07                 a0 = maxu(a1, a0)
   838: 33 09 02                 a2 = 0x2
   841: 95 7a ff                 a3 = a0 + 0xffffffffffffffff
   844: ae 98 09                 jump @97 if a1 >=u a2
      :                          @96
   847: 33 06                    s1 = 0
   849: 33 08                    a1 = 0
   851: 28 52                    jump @107
      :                          @97
   853: 7d 57                    a0 = i8 [s0]
   855: 33 06 01                 s1 = 0x1
   858: 59 07 37                 jump @104 if a0 >=s 0
      :                          @98
   861: 84 77 ff 00              a0 = a0 & 0xff
   865: 33 06 02                 s1 = 0x2
   868: 53 27 c0 00 2d           jump @104 if a0 <u 192
      :                          @99
   873: 33 06 03                 s1 = 0x3
   876: 53 27 e0 00 25           jump @104 if a0 <u 224
      :                          @100
   881: 33 06 04                 s1 = 0x4
   884: 53 27 f0 00 1d           jump @104 if a0 <u 240
      :                          @101
   889: 33 06 05                 s1 = 0x5
   892: 53 27 f8 00 15           jump @104 if a0 <u 248
      :                          @102
   897: 33 06 06                 s1 = 0x6
   900: 53 27 fc 00 0d           jump @104 if a0 <u 252
      :                          @103
   905: 88 77 fe 00              a0 = a0 <u 0xfe
   909: 9a 76 08                 s1 = 0x8 - a0
   912: 01                       fallthrough
      :                          @104
   913: 7b 1a                    u64 [sp] = a3
   915: ac 6a 19 01              jump @116 if a3 <u s1
      :                          @105
   919: 64 57                    a0 = s0
   921: 64 68                    a1 = s1
   923: 50 10 10 6e 01           ra = 16, jump @130
      :                          @106 [@dyn 8]
   928: 64 78                    a1 = a0
   930: 82 1a                    a3 = u64 [sp]
   932: 01                       fallthrough
      :                          @107
   933: c8 65 07                 a0 = s0 + s1
   936: e4 6a 09                 a2 = maxu(a3, s1)
   939: c9 69 09                 a2 = a2 - s1
   942: e6 89 08                 a1 = minu(a2, a1)
   945: 01                       fallthrough
      :                          @108
   946: c8 78 08                 a1 = a1 + a0
   949: 80 88 fc                 a1 = u32 [a1 + 0xfffffffffffffffc]
   952: 33 09 64                 a2 = 0x64
   955: 33 0a 64                 a3 = 0x64
   958: 0a 12                    ecalli 18 // 'new'
   960: 64 75                    s0 = a0
   962: 7b 17 08                 u64 [sp + 0x8] = a0
   965: 48 11 14                 u32 [sp + 20] = 0
   968: 95 17 14                 a0 = sp + 0x14
   971: 33 08 04                 a1 = 0x4
   974: 95 19 08                 a2 = sp + 0x8
   977: 33 0a 04                 a3 = 0x4
   980: 0a 04                    ecalli 4 // 'write'
   982: 95 17 18                 a0 = sp + 0x18
   985: 33 09 80 00              a2 = 0x80
   989: 33 08                    a1 = 0
   991: 50 10 12 d7 00           ra = 18, jump @118
      :                          @109 [@dyn 9]
   996: 33 08 20 a1 07           a1 = 0x7a120
  1001: 33 09 64                 a2 = 0x64
  1004: 95 1a 18                 a3 = sp + 0x18
  1007: 64 57                    a0 = s0
  1009: 33 00 14                 ra = 0x14
  1012: 0a 14                    ecalli 20 // 'transfer'
  1014: 01                       fallthrough
      :                          @110 [@dyn 10]
  1015: 33 09 10 00 02           a2 = 0x20010
  1020: 33 07 00 00 01           a0 = 0x10000
  1025: c8 79 09                 a2 = a2 + a0
  1028: 01                       fallthrough
      :                          @111
  1029: 82 9a                    a3 = u64 [a2]
  1031: 95 a8 20                 a1 = a3 + 0x20
  1034: ac a8 fe 00              jump @129 if a1 <u a3
      :                          @112
  1038: 95 8b 01                 a4 = a1 + 0x1
  1041: 88 bc 01                 a5 = a4 <u 0x1
  1044: d8 b7 0b                 a4 = a0 <u a4
  1047: d4 cb 0b                 a4 = a4 | a5
  1050: 52 0b ee 00              jump @129 if a4 != 0
      :                          @113
  1054: 82 9b                    a4 = u64 [a2]
  1056: ab ab e5                 jump @111 if a4 != a3
      :                          @114
  1059: 7b 98                    u64 [a2] = a1
  1061: 33 0c                    a5 = 0
  1063: 33 07 10 00 03           a0 = 0x30010
  1068: c9 87 09                 a2 = a0 - a1
  1071: 46 19 1f                 u8 [a2 + 31] = 0
  1074: 46 19 1e                 u8 [a2 + 30] = 0
  1077: 46 19 1d                 u8 [a2 + 29] = 0
  1080: 46 19 1c                 u8 [a2 + 28] = 0
  1083: 46 19 1b                 u8 [a2 + 27] = 0
  1086: 46 19 1a                 u8 [a2 + 26] = 0
  1089: 46 19 19                 u8 [a2 + 25] = 0
  1092: 46 19 18                 u8 [a2 + 24] = 0
  1095: 46 19 17                 u8 [a2 + 23] = 0
  1098: 46 19 16                 u8 [a2 + 22] = 0
  1101: 46 19 15                 u8 [a2 + 21] = 0
  1104: 46 19 14                 u8 [a2 + 20] = 0
  1107: 46 19 13                 u8 [a2 + 19] = 0
  1110: 46 19 12                 u8 [a2 + 18] = 0
  1113: 46 19 11                 u8 [a2 + 17] = 0
  1116: 46 19 10                 u8 [a2 + 16] = 0
  1119: 46 19 0f                 u8 [a2 + 15] = 0
  1122: 46 19 0e                 u8 [a2 + 14] = 0
  1125: 46 19 0d                 u8 [a2 + 13] = 0
  1128: 46 19 0c                 u8 [a2 + 12] = 0
  1131: 46 19 0b                 u8 [a2 + 11] = 0
  1134: 46 19 0a                 u8 [a2 + 10] = 0
  1137: 46 19 09                 u8 [a2 + 9] = 0
  1140: 46 19 08                 u8 [a2 + 8] = 0
  1143: 46 19 07                 u8 [a2 + 7] = 0
  1146: 46 19 06                 u8 [a2 + 6] = 0
  1149: 46 19 05                 u8 [a2 + 5] = 0
  1152: 46 19 04                 u8 [a2 + 4] = 0
  1155: 46 19 03                 u8 [a2 + 3] = 0
  1158: 81 17 08                 a0 = i32 [sp + 0x8]
  1161: 46 19 02                 u8 [a2 + 2] = 0
  1164: 46 19 01                 u8 [a2 + 1] = 0
  1167: 46 09                    u8 [a2 + 0] = 0
  1169: 98 78 18                 a1 = a0 >> 0x18
  1172: 78 98 03                 u8 [a2 + 0x3] = a1
  1175: 98 78 10                 a1 = a0 >> 0x10
  1178: 78 98 02                 u8 [a2 + 0x2] = a1
  1181: 98 78 08                 a1 = a0 >> 0x8
  1184: 78 98 01                 u8 [a2 + 0x1] = a1
  1187: 78 97                    u8 [a2] = a0
  1189: 33 08 20                 a1 = 0x20
  1192: 28 ed fd                 jump @77
      :                          @115
  1195: 00                       trap
      :                          @116
  1196: 00                       trap
      :                          @117 [export #2: 'on_transfer']
  1197: 33 07 00 00 01           a0 = 0x10000
  1202: 33 08                    a1 = 0
  1204: 32 00                    ret
      :                          @118
  1206: 8d 7a                    i32 a3 = -a0
  1208: 84 aa 07                 a3 = a3 & 0x7
  1211: c8 a7 0b                 a4 = a0 + a3
  1214: 51 0a 0e                 jump @121 if a3 == 0
      :                          @119
  1217: 64 7c                    a5 = a0
  1219: 01                       fallthrough
      :                          @120
  1220: 78 c8                    u8 [a5] = a1
  1222: 95 cc 01                 a5 = a5 + 0x1
  1225: ac bc fb                 jump @120 if a5 <u a4
      :                          @121
  1228: c9 a9 03                 t1 = a2 - a3
  1231: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  1234: c8 cb 0a                 a3 = a4 + a5
  1237: 58 0c 1d                 jump @124 if a5 <=s 0
      :                          @122
  1240: 84 82 ff 00              t0 = a1 & 0xff
  1244: 14 09 01 01 01 01 01 01 01 01 a2 = 0x101010101010101
  1254: ca 92 0c                 a5 = t0 * a2
  1257: 01                       fallthrough
      :                          @123
  1258: 7b bc                    u64 [a4] = a5
  1260: 95 bb 08                 a4 = a4 + 0x8
  1263: ac ab fb                 jump @123 if a4 <u a3
      :                          @124
  1266: 84 39 07                 a2 = t1 & 0x7
  1269: 52 09 05                 jump @126 if a2 != 0
      :                          @125
  1272: 28 0e                    jump @128
      :                          @126
  1274: c8 a9 09                 a2 = a2 + a3
  1277: 01                       fallthrough
      :                          @127
  1278: 78 a8                    u8 [a3] = a1
  1280: 95 aa 01                 a3 = a3 + 0x1
  1283: ac 9a fb                 jump @127 if a3 <u a2
      :                          @128
  1286: 32 00                    ret
      :                          @129
  1288: 00                       trap
      :                          @130
  1289: 51 08 9b 00              jump @151 if a1 == 0
      :                          @131
  1293: 64 79                    a2 = a0
  1295: 7c 77                    a0 = u8 [a0]
  1297: 51 07 91 00              jump @150 if a0 == 0
      :                          @132
  1301: 51 27 ff 00 90 00        jump @152 if a0 == 255
      :                          @133
  1307: 6c 7a                    a3 = sext.b a0
  1309: 57 0a 09                 jump @135 if a3 <s 0
      :                          @134
  1312: 33 0a                    a3 = 0
  1314: 33 08                    a1 = 0
  1316: 28 73                    jump @149
      :                          @135
  1318: 55 27 c0 00 0d           jump @137 if a0 >=u 192
      :                          @136
  1323: 33 0a 01                 a3 = 0x1
  1326: 33 0b 80                 a4 = 0xffffffffffffff80
  1329: 28 4a                    jump @146
      :                          @137
  1331: 55 27 e0 00 0e           jump @139 if a0 >=u 224
      :                          @138
  1336: 33 0a 02                 a3 = 0x2
  1339: 33 0b 40 ff              a4 = 0xffffffffffffff40
  1343: 28 3c                    jump @146
      :                          @139
  1345: 55 27 f0 00 0e           jump @141 if a0 >=u 240
      :                          @140
  1350: 33 0a 03                 a3 = 0x3
  1353: 33 0b 20 ff              a4 = 0xffffffffffffff20
  1357: 28 2e                    jump @146
      :                          @141
  1359: 55 27 f8 00 0e           jump @143 if a0 >=u 248
      :                          @142
  1364: 33 0a 04                 a3 = 0x4
  1367: 33 0b 10 ff              a4 = 0xffffffffffffff10
  1371: 28 20                    jump @146
      :                          @143
  1373: 55 27 fc 00 0e           jump @145 if a0 >=u 252
      :                          @144
  1378: 33 0a 05                 a3 = 0x5
  1381: 33 0b 08 ff              a4 = 0xffffffffffffff08
  1385: 28 12                    jump @146
      :                          @145
  1387: 88 7a fe 00              a3 = a0 <u 0xfe
  1391: 33 0b 04 ff              a4 = 0xffffffffffffff04
  1395: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  1399: 85 aa 07                 a3 = a3 ^ 0x7
  1402: 01                       fallthrough
      :                          @146
  1403: ae 8a 2b                 jump @153 if a3 >=u a1
      :                          @147
  1406: 33 08                    a1 = 0
  1408: c8 b7 07                 a0 = a0 + a4
  1411: 64 ab                    a4 = a3
  1413: 01                       fallthrough
      :                          @148
  1414: c8 b9 0c                 a5 = a2 + a4
  1417: 7c cc                    a5 = u8 [a5]
  1419: 97 88 08                 a1 = a1 << 0x8
  1422: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  1425: d4 c8 08                 a1 = a1 | a5
  1428: 52 0b f2                 jump @148 if a4 != 0
      :                          @149
  1431: 8a a9 03                 i32 a2 = a3 << 0x3
  1434: cf 97 07                 a0 = a0 << a2
  1437: c8 87 07                 a0 = a0 + a1
  1440: 32 00                    ret
      :                          @150
  1442: 32 00                    ret
      :                          @151
  1444: 00                       trap
      :                          @152
  1445: 00                       trap
      :                          @153
  1446: 00                       trap
