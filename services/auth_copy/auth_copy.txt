// RO data = 192/192 bytes
// RW data = 0/2560 bytes
// Stack size = 65536 bytes
// RO data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3]
// RW data = []
// Instructions = 404
// Code size = 1215 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 8d 00 00 00           jump @23
      :                          @2
    10: 28 73 03                 jump @106
      :                          @3 [export #0: 'refine']
    13: 95 11 e0                 sp = sp + 0xffffffffffffffe0
    16: 33 08 07 00 01           a1 = 0x10007
    21: 33 09 0c                 a2 = 0xc
    24: 33 0a 0f                 a3 = 0xf
    27: 33 0b 10                 a4 = 0x10
    30: 01                       fallthrough
      :                          @4
    31: 7c 87 f9                 a0 = u8 [a1 + 0xfffffffffffffff9]
    34: ac 7a 6f                 jump @22 if a3 <u a0
      :                          @5
    37: 7c 87 fa                 a0 = u8 [a1 + 0xfffffffffffffffa]
    40: ae b7 69                 jump @22 if a0 >=u a4
      :                          @6
    43: 7c 87 fb                 a0 = u8 [a1 + 0xfffffffffffffffb]
    46: ae b7 63                 jump @22 if a0 >=u a4
      :                          @7
    49: 7c 87 fc                 a0 = u8 [a1 + 0xfffffffffffffffc]
    52: ae b7 5d                 jump @22 if a0 >=u a4
      :                          @8
    55: 7c 87 fd                 a0 = u8 [a1 + 0xfffffffffffffffd]
    58: ae b7 57                 jump @22 if a0 >=u a4
      :                          @9
    61: 7c 87 fe                 a0 = u8 [a1 + 0xfffffffffffffffe]
    64: ae b7 51                 jump @22 if a0 >=u a4
      :                          @10
    67: 7c 87 ff                 a0 = u8 [a1 + 0xffffffffffffffff]
    70: ae b7 4b                 jump @22 if a0 >=u a4
      :                          @11
    73: 7c 87                    a0 = u8 [a1]
    75: ae b7 46                 jump @22 if a0 >=u a4
      :                          @12
    78: 7c 87 01                 a0 = u8 [a1 + 0x1]
    81: ae b7 40                 jump @22 if a0 >=u a4
      :                          @13
    84: 7c 87 02                 a0 = u8 [a1 + 0x2]
    87: ae b7 3a                 jump @22 if a0 >=u a4
      :                          @14
    90: 7c 87 03                 a0 = u8 [a1 + 0x3]
    93: ae b7 34                 jump @22 if a0 >=u a4
      :                          @15
    96: 7c 87 04                 a0 = u8 [a1 + 0x4]
    99: ae b7 2e                 jump @22 if a0 >=u a4
      :                          @16
   102: 7c 87 05                 a0 = u8 [a1 + 0x5]
   105: ae b7 28                 jump @22 if a0 >=u a4
      :                          @17
   108: 7c 87 06                 a0 = u8 [a1 + 0x6]
   111: ae b7 22                 jump @22 if a0 >=u a4
      :                          @18
   114: 7c 87 07                 a0 = u8 [a1 + 0x7]
   117: ae b7 1c                 jump @22 if a0 >=u a4
      :                          @19
   120: 7c 87 08                 a0 = u8 [a1 + 0x8]
   123: ae b7 16                 jump @22 if a0 >=u a4
      :                          @20
   126: 95 99 ff                 a2 = a2 + 0xffffffffffffffff
   129: 95 88 10                 a1 = a1 + 0x10
   132: 52 09 9b                 jump @4 if a2 != 0
      :                          @21
   135: 64 17                    a0 = sp
   137: 33 08 20                 a1 = 0x20
   140: c8 81 01                 sp = sp + a1
   143: 32 00                    ret
      :                          @22
   145: 00                       trap
      :                          @23 [export #1: 'accumulate']
   146: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   149: 7b 10 18                 u64 [sp + 0x18] = ra
   152: 7b 15 10                 u64 [sp + 0x10] = s0
   155: 7b 16 08                 u64 [sp + 0x8] = s1
   158: 33 09 00 00 01           a2 = 0x10000
   163: 51 08 7a 01              jump @69 if a1 == 0
      :                          @24
   167: 64 86                    s1 = a1
   169: 7d 78                    a1 = i8 [a0]
   171: 33 05 01                 s0 = 0x1
   174: 59 08 37                 jump @31 if a1 >=s 0
      :                          @25
   177: 84 8a ff 00              a3 = a1 & 0xff
   181: 33 05 02                 s0 = 0x2
   184: 53 2a c0 00 2d           jump @31 if a3 <u 192
      :                          @26
   189: 33 05 03                 s0 = 0x3
   192: 53 2a e0 00 25           jump @31 if a3 <u 224
      :                          @27
   197: 33 05 04                 s0 = 0x4
   200: 53 2a f0 00 1d           jump @31 if a3 <u 240
      :                          @28
   205: 33 05 05                 s0 = 0x5
   208: 53 2a f8 00 15           jump @31 if a3 <u 248
      :                          @29
   213: 33 05 06                 s0 = 0x6
   216: 53 2a fc 00 0d           jump @31 if a3 <u 252
      :                          @30
   221: 88 a8 fe 00              a1 = a3 <u 0xfe
   225: 9a 85 08                 s0 = 0x8 - a1
   228: 01                       fallthrough
      :                          @31
   229: ae 56 08                 jump @33 if s1 >=u s0
      :                          @32
   232: 33 08                    a1 = 0
   234: 28 33 01                 jump @69
      :                          @33
   237: 64 58                    a1 = s0
   239: 7b 17                    u64 [sp] = a0
   241: 50 10 02 30 03           ra = 2, jump @122
      :                          @34 [@dyn 1]
   246: aa 56 1f 01              jump @68 if s1 == s0
      :                          @35
   250: 82 17                    a0 = u64 [sp]
   252: c8 57 07                 a0 = a0 + s0
   255: 7d 78                    a1 = i8 [a0]
   257: c9 56 06                 s1 = s1 - s0
   260: 33 05 01                 s0 = 0x1
   263: 59 08 37                 jump @42 if a1 >=s 0
      :                          @36
   266: 84 89 ff 00              a2 = a1 & 0xff
   270: 33 05 02                 s0 = 0x2
   273: 53 29 c0 00 2d           jump @42 if a2 <u 192
      :                          @37
   278: 33 05 03                 s0 = 0x3
   281: 53 29 e0 00 25           jump @42 if a2 <u 224
      :                          @38
   286: 33 05 04                 s0 = 0x4
   289: 53 29 f0 00 1d           jump @42 if a2 <u 240
      :                          @39
   294: 33 05 05                 s0 = 0x5
   297: 53 29 f8 00 15           jump @42 if a2 <u 248
      :                          @40
   302: 33 05 06                 s0 = 0x6
   305: 53 29 fc 00 0d           jump @42 if a2 <u 252
      :                          @41
   310: 88 98 fe 00              a1 = a2 <u 0xfe
   314: 9a 85 08                 s0 = 0x8 - a1
   317: 01                       fallthrough
      :                          @42
   318: ac 56 d7 00              jump @68 if s1 <u s0
      :                          @43
   322: 64 58                    a1 = s0
   324: 7b 17                    u64 [sp] = a0
   326: 50 10 04 db 02           ra = 4, jump @122
      :                          @44 [@dyn 2]
   331: 82 17                    a0 = u64 [sp]
   333: c8 57 07                 a0 = a0 + s0
   336: c9 56 0a                 a3 = s1 - s0
   339: ab 56 07                 jump @46 if s1 != s0
      :                          @45
   342: 33 05                    s0 = 0
   344: 28 41                    jump @54
      :                          @46
   346: 7d 78                    a1 = i8 [a0]
   348: 33 05 01                 s0 = 0x1
   351: 59 08 37                 jump @53 if a1 >=s 0
      :                          @47
   354: 84 89 ff 00              a2 = a1 & 0xff
   358: 33 05 02                 s0 = 0x2
   361: 53 29 c0 00 2d           jump @53 if a2 <u 192
      :                          @48
   366: 33 05 03                 s0 = 0x3
   369: 53 29 e0 00 25           jump @53 if a2 <u 224
      :                          @49
   374: 33 05 04                 s0 = 0x4
   377: 53 29 f0 00 1d           jump @53 if a2 <u 240
      :                          @50
   382: 33 05 05                 s0 = 0x5
   385: 53 29 f8 00 15           jump @53 if a2 <u 248
      :                          @51
   390: 33 05 06                 s0 = 0x6
   393: 53 29 fc 00 0d           jump @53 if a2 <u 252
      :                          @52
   398: 88 98 fe 00              a1 = a2 <u 0xfe
   402: 9a 85 08                 s0 = 0x8 - a1
   405: 01                       fallthrough
      :                          @53
   406: ac 5a 7f                 jump @68 if a3 <u s0
      :                          @54
   409: 64 a6                    s1 = a3
   411: 7b 17                    u64 [sp] = a0
   413: 64 58                    a1 = s0
   415: 50 10 06 82 02           ra = 6, jump @122
      :                          @55 [@dyn 3]
   420: 51 07 71                 jump @68 if a0 == 0
      :                          @56
   423: e4 56 07                 a0 = maxu(s1, s0)
   426: c9 57 07                 a0 = a0 - s0
   429: 33 09 00 00 01           a2 = 0x10000
   434: 53 17 60 36 ff           jump @32 if a0 <u 96
      :                          @57
   439: 82 18                    a1 = u64 [sp]
   441: c8 85 05                 s0 = s0 + a1
   444: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   447: 95 57 60                 a0 = s0 + 0x60
   450: 7b 17                    u64 [sp] = a0
   452: 51 06 69                 jump @70 if s1 == 0
      :                          @58
   455: 7d 78                    a1 = i8 [a0]
   457: 33 05 01                 s0 = 0x1
   460: 59 08 37                 jump @65 if a1 >=s 0
      :                          @59
   463: 84 89 ff 00              a2 = a1 & 0xff
   467: 33 05 02                 s0 = 0x2
   470: 53 29 c0 00 2d           jump @65 if a2 <u 192
      :                          @60
   475: 33 05 03                 s0 = 0x3
   478: 53 29 e0 00 25           jump @65 if a2 <u 224
      :                          @61
   483: 33 05 04                 s0 = 0x4
   486: 53 29 f0 00 1d           jump @65 if a2 <u 240
      :                          @62
   491: 33 05 05                 s0 = 0x5
   494: 53 29 f8 00 15           jump @65 if a2 <u 248
      :                          @63
   499: 33 05 06                 s0 = 0x6
   502: 53 29 fc 00 0d           jump @65 if a2 <u 252
      :                          @64
   507: 88 98 fe 00              a1 = a2 <u 0xfe
   511: 9a 85 08                 s0 = 0x8 - a1
   514: 01                       fallthrough
      :                          @65
   515: ac 56 77 01              jump @103 if s1 <u s0
      :                          @66
   519: 64 58                    a1 = s0
   521: 50 10 08 18 02           ra = 8, jump @122
      :                          @67 [@dyn 4]
   526: 33 09 00 00 01           a2 = 0x10000
   531: 28 1f                    jump @71
      :                          @68
   533: 33 08                    a1 = 0
   535: 33 09 00 00 01           a2 = 0x10000
   540: 01                       fallthrough
      :                          @69
   541: 64 97                    a0 = a2
   543: 82 10 18                 ra = u64 [sp + 0x18]
   546: 82 15 10                 s0 = u64 [sp + 0x10]
   549: 82 16 08                 s1 = u64 [sp + 0x8]
   552: 95 11 20                 sp = sp + 0x20
   555: 32 00                    ret
      :                          @70
   557: 33 05                    s0 = 0
   559: 33 07                    a0 = 0
   561: 01                       fallthrough
      :                          @71
   562: e4 56 08                 a1 = maxu(s1, s0)
   565: c9 58 08                 a1 = a1 - s0
   568: e4 78 06                 s1 = maxu(a1, a0)
   571: c9 76 06                 s1 = s1 - a0
   574: 53 16 20 aa fe           jump @32 if s1 <u 32
      :                          @72
   579: 82 18                    a1 = u64 [sp]
   581: c8 85 05                 s0 = s0 + a1
   584: c8 57 07                 a0 = a0 + s0
   587: 95 66 e0                 s1 = s1 + 0xffffffffffffffe0
   590: 95 77 20                 a0 = a0 + 0x20
   593: 7b 17                    u64 [sp] = a0
   595: 51 06 51                 jump @83 if s1 == 0
      :                          @73
   598: 7d 78                    a1 = i8 [a0]
   600: 33 05 01                 s0 = 0x1
   603: 59 08 37                 jump @80 if a1 >=s 0
      :                          @74
   606: 84 89 ff 00              a2 = a1 & 0xff
   610: 33 05 02                 s0 = 0x2
   613: 53 29 c0 00 2d           jump @80 if a2 <u 192
      :                          @75
   618: 33 05 03                 s0 = 0x3
   621: 53 29 e0 00 25           jump @80 if a2 <u 224
      :                          @76
   626: 33 05 04                 s0 = 0x4
   629: 53 29 f0 00 1d           jump @80 if a2 <u 240
      :                          @77
   634: 33 05 05                 s0 = 0x5
   637: 53 29 f8 00 15           jump @80 if a2 <u 248
      :                          @78
   642: 33 05 06                 s0 = 0x6
   645: 53 29 fc 00 0d           jump @80 if a2 <u 252
      :                          @79
   650: 88 98 fe 00              a1 = a2 <u 0xfe
   654: 9a 85 08                 s0 = 0x8 - a1
   657: 01                       fallthrough
      :                          @80
   658: ac 56 e8 00              jump @103 if s1 <u s0
      :                          @81
   662: 64 58                    a1 = s0
   664: 50 10 0a 89 01           ra = 10, jump @122
      :                          @82 [@dyn 5]
   669: 33 09 00 00 01           a2 = 0x10000
   674: 28 05                    jump @84
      :                          @83
   676: 33 05                    s0 = 0
   678: 01                       fallthrough
      :                          @84
   679: ae 65 41 fe              jump @32 if s0 >=u s1
      :                          @85
   683: 82 17                    a0 = u64 [sp]
   685: c8 57 07                 a0 = a0 + s0
   688: 7c 78                    a1 = u8 [a0]
   690: 52 08 c9 00              jump @104 if a1 != 0
      :                          @86
   694: e4 56 08                 a1 = maxu(s1, s0)
   697: c9 58 08                 a1 = a1 - s0
   700: 95 75 01                 s0 = a0 + 0x1
   703: 33 07 01                 a0 = 0x1
   706: e4 78 07                 a0 = maxu(a1, a0)
   709: 33 09 02                 a2 = 0x2
   712: 95 7a ff                 a3 = a0 + 0xffffffffffffffff
   715: ae 98 09                 jump @88 if a1 >=u a2
      :                          @87
   718: 33 06                    s1 = 0
   720: 33 07                    a0 = 0
   722: 28 4f                    jump @98
      :                          @88
   724: 7d 57                    a0 = i8 [s0]
   726: 33 06 01                 s1 = 0x1
   729: 59 07 37                 jump @95 if a0 >=s 0
      :                          @89
   732: 84 77 ff 00              a0 = a0 & 0xff
   736: 33 06 02                 s1 = 0x2
   739: 53 27 c0 00 2d           jump @95 if a0 <u 192
      :                          @90
   744: 33 06 03                 s1 = 0x3
   747: 53 27 e0 00 25           jump @95 if a0 <u 224
      :                          @91
   752: 33 06 04                 s1 = 0x4
   755: 53 27 f0 00 1d           jump @95 if a0 <u 240
      :                          @92
   760: 33 06 05                 s1 = 0x5
   763: 53 27 f8 00 15           jump @95 if a0 <u 248
      :                          @93
   768: 33 06 06                 s1 = 0x6
   771: 53 27 fc 00 0d           jump @95 if a0 <u 252
      :                          @94
   776: 88 77 fe 00              a0 = a0 <u 0xfe
   780: 9a 76 08                 s1 = 0x8 - a0
   783: 01                       fallthrough
      :                          @95
   784: 7b 1a                    u64 [sp] = a3
   786: ac 6a 6a                 jump @105 if a3 <u s1
      :                          @96
   789: 64 57                    a0 = s0
   791: 64 68                    a1 = s1
   793: 50 10 0c 08 01           ra = 12, jump @122
      :                          @97 [@dyn 6]
   798: 82 1a                    a3 = u64 [sp]
   800: 01                       fallthrough
      :                          @98
   801: e4 6a 08                 a1 = maxu(a3, s1)
   804: c9 68 08                 a1 = a1 - s1
   807: e6 78 07                 a0 = minu(a1, a0)
   810: 52 17 20 51              jump @104 if a0 != 32
      :                          @99
   814: c8 65 05                 s0 = s0 + s1
   817: 7b 15                    u64 [sp] = s0
   819: 33 05 00 00 03           s0 = 0x30000
   824: 33 06 50                 s1 = 0x50
   827: 01                       fallthrough
      :                          @100
   828: 33 09 20                 a2 = 0x20
   831: 64 57                    a0 = s0
   833: 82 18                    a1 = u64 [sp]
   835: 33 00 0e                 ra = 0xe
   838: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   841: 7b 10 18                 u64 [sp + 0x18] = ra
   844: 7b 15 10                 u64 [sp + 0x10] = s0
   847: 7b 16 08                 u64 [sp + 0x8] = s1
   850: 28 34                    jump @107
      :                          @101 [@dyn 7]
   852: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
   855: 95 55 20                 s0 = s0 + 0x20
   858: 52 06 e2                 jump @100 if s1 != 0
      :                          @102
   861: 33 05 00 00 03           s0 = 0x30000
   866: 33 07                    a0 = 0
   868: 33 08 00 00 03           a1 = 0x30000
   873: 0a 06                    ecalli 6 // 'assign'
   875: 33 07 01                 a0 = 0x1
   878: 64 58                    a1 = s0
   880: 0a 06                    ecalli 6 // 'assign'
   882: 33 08 20                 a1 = 0x20
   885: 82 19                    a2 = u64 [sp]
   887: 28 a6 fe                 jump @69
      :                          @103
   890: 00                       trap
      :                          @104
   891: 00                       trap
      :                          @105
   892: 00                       trap
      :                          @106 [export #2: 'on_transfer']
   893: 33 07 00 00 01           a0 = 0x10000
   898: 33 08                    a1 = 0
   900: 32 00                    ret
      :                          @107
   902: 8d 7a                    i32 a3 = -a0
   904: 84 a2 07                 t0 = a3 & 0x7
   907: c8 27 0b                 a4 = a0 + t0
   910: 51 02 15                 jump @110 if t0 == 0
      :                          @108
   913: 64 8c                    a5 = a1
   915: 64 75                    s0 = a0
   917: 01                       fallthrough
      :                          @109
   918: 7c ca                    a3 = u8 [a5]
   920: 78 5a                    u8 [s0] = a3
   922: 95 55 01                 s0 = s0 + 0x1
   925: 95 cc 01                 a5 = a5 + 0x1
   928: ac b5 f6                 jump @109 if s0 <u a4
      :                          @110
   931: c8 28 03                 t1 = a1 + t0
   934: c9 29 02                 t0 = a2 - t0
   937: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
   940: 84 38 07                 a1 = t1 & 0x7
   943: c8 4b 0a                 a3 = a4 + t2
   946: 51 08 34                 jump @115 if a1 == 0
      :                          @111
   949: 58 04 44                 jump @118 if t2 <=s 0
      :                          @112
   952: 97 38 03                 a1 = t1 << 0x3
   955: 84 80 38                 ra = a1 & 0x38
   958: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
   961: 82 c5                    s0 = u64 [a5]
   963: 8d 88                    i32 a1 = -a1
   965: 84 88 38                 a1 = a1 & 0x38
   968: 95 cc 08                 a5 = a5 + 0x8
   971: 01                       fallthrough
      :                          @113
   972: 82 c6                    s1 = u64 [a5]
   974: d0 05 05                 s0 = s0 >> ra
   977: cf 86 09                 a2 = s1 << a1
   980: d4 59 09                 a2 = a2 | s0
   983: 7b b9                    u64 [a4] = a2
   985: 95 bb 08                 a4 = a4 + 0x8
   988: 95 cc 08                 a5 = a5 + 0x8
   991: 64 65                    s0 = s1
   993: ac ab eb                 jump @113 if a4 <u a3
      :                          @114
   996: 28 15                    jump @118
      :                          @115
   998: 58 04 13                 jump @118 if t2 <=s 0
      :                          @116
  1001: 64 38                    a1 = t1
  1003: 01                       fallthrough
      :                          @117
  1004: 82 89                    a2 = u64 [a1]
  1006: 7b b9                    u64 [a4] = a2
  1008: 95 bb 08                 a4 = a4 + 0x8
  1011: 95 88 08                 a1 = a1 + 0x8
  1014: ac ab f6                 jump @117 if a4 <u a3
      :                          @118
  1017: c8 43 08                 a1 = t1 + t2
  1020: 84 29 07                 a2 = t0 & 0x7
  1023: 51 09 14                 jump @121 if a2 == 0
      :                          @119
  1026: c8 a9 09                 a2 = a2 + a3
  1029: 01                       fallthrough
      :                          @120
  1030: 7c 8b                    a4 = u8 [a1]
  1032: 78 ab                    u8 [a3] = a4
  1034: 95 aa 01                 a3 = a3 + 0x1
  1037: 95 88 01                 a1 = a1 + 0x1
  1040: ac 9a f6                 jump @120 if a3 <u a2
      :                          @121
  1043: 82 10 18                 ra = u64 [sp + 0x18]
  1046: 82 15 10                 s0 = u64 [sp + 0x10]
  1049: 82 16 08                 s1 = u64 [sp + 0x8]
  1052: 95 11 20                 sp = sp + 0x20
  1055: 32 00                    ret
      :                          @122
  1057: 51 08 9b 00              jump @143 if a1 == 0
      :                          @123
  1061: 64 79                    a2 = a0
  1063: 7c 77                    a0 = u8 [a0]
  1065: 51 07 91 00              jump @142 if a0 == 0
      :                          @124
  1069: 51 27 ff 00 90 00        jump @144 if a0 == 255
      :                          @125
  1075: 6c 7a                    a3 = sext.b a0
  1077: 57 0a 09                 jump @127 if a3 <s 0
      :                          @126
  1080: 33 0a                    a3 = 0
  1082: 33 08                    a1 = 0
  1084: 28 73                    jump @141
      :                          @127
  1086: 55 27 c0 00 0d           jump @129 if a0 >=u 192
      :                          @128
  1091: 33 0a 01                 a3 = 0x1
  1094: 33 0b 80                 a4 = 0xffffffffffffff80
  1097: 28 4a                    jump @138
      :                          @129
  1099: 55 27 e0 00 0e           jump @131 if a0 >=u 224
      :                          @130
  1104: 33 0a 02                 a3 = 0x2
  1107: 33 0b 40 ff              a4 = 0xffffffffffffff40
  1111: 28 3c                    jump @138
      :                          @131
  1113: 55 27 f0 00 0e           jump @133 if a0 >=u 240
      :                          @132
  1118: 33 0a 03                 a3 = 0x3
  1121: 33 0b 20 ff              a4 = 0xffffffffffffff20
  1125: 28 2e                    jump @138
      :                          @133
  1127: 55 27 f8 00 0e           jump @135 if a0 >=u 248
      :                          @134
  1132: 33 0a 04                 a3 = 0x4
  1135: 33 0b 10 ff              a4 = 0xffffffffffffff10
  1139: 28 20                    jump @138
      :                          @135
  1141: 55 27 fc 00 0e           jump @137 if a0 >=u 252
      :                          @136
  1146: 33 0a 05                 a3 = 0x5
  1149: 33 0b 08 ff              a4 = 0xffffffffffffff08
  1153: 28 12                    jump @138
      :                          @137
  1155: 88 7a fe 00              a3 = a0 <u 0xfe
  1159: 33 0b 04 ff              a4 = 0xffffffffffffff04
  1163: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  1167: 85 aa 07                 a3 = a3 ^ 0x7
  1170: 01                       fallthrough
      :                          @138
  1171: ae 8a 2b                 jump @145 if a3 >=u a1
      :                          @139
  1174: 33 08                    a1 = 0
  1176: c8 b7 07                 a0 = a0 + a4
  1179: 64 ab                    a4 = a3
  1181: 01                       fallthrough
      :                          @140
  1182: c8 b9 0c                 a5 = a2 + a4
  1185: 7c cc                    a5 = u8 [a5]
  1187: 97 88 08                 a1 = a1 << 0x8
  1190: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  1193: d4 c8 08                 a1 = a1 | a5
  1196: 52 0b f2                 jump @140 if a4 != 0
      :                          @141
  1199: 8a a9 03                 i32 a2 = a3 << 0x3
  1202: cf 97 07                 a0 = a0 << a2
  1205: c8 87 07                 a0 = a0 + a1
  1208: 32 00                    ret
      :                          @142
  1210: 32 00                    ret
      :                          @143
  1212: 00                       trap
      :                          @144
  1213: 00                       trap
      :                          @145
  1214: 00                       trap
