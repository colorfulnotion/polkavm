// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 2 bytes
// RO data = []
// RW data = []
// Instructions = 451
// Code size = 1328 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 13 00 00 00           jump @4
      :                          @2
    10: 28 eb 03                 jump @88
      :                          @3 [export #0: 'refine']
    13: c8 87 07                 a0 = a0 + a1
    16: 95 77 e0                 a0 = a0 + 0xffffffffffffffe0
    19: 33 08 20                 a1 = 0x20
    22: 32 00                    ret
      :                          @4 [export #1: 'accumulate']
    24: 95 11 a0                 sp = sp + 0xffffffffffffffa0
    27: 7b 10 58                 u64 [sp + 0x58] = ra
    30: 7b 15 50                 u64 [sp + 0x50] = s0
    33: 7b 16 48                 u64 [sp + 0x48] = s1
    36: 95 89 f8                 a2 = a1 + 0xfffffffffffffff8
    39: 33 02 00 00 01           t0 = 0x10000
    44: 51 09 52                 jump @13 if a2 == 0
      :                          @5
    47: 95 75 08                 s0 = a0 + 0x8
    50: 7d 5a                    a3 = i8 [s0]
    52: 84 a6 ff 00              s1 = a3 & 0xff
    56: 33 08 01                 a1 = 0x1
    59: 59 0a 40                 jump @12 if a3 >=s 0
      :                          @6
    62: 33 0a c0 00              a3 = 0xc0
    66: 33 08 02                 a1 = 0x2
    69: ac a6 36                 jump @12 if s1 <u a3
      :                          @7
    72: 33 0a e0 00              a3 = 0xe0
    76: 33 08 03                 a1 = 0x3
    79: ac a6 2c                 jump @12 if s1 <u a3
      :                          @8
    82: 33 0a f0 00              a3 = 0xf0
    86: 33 08 04                 a1 = 0x4
    89: ac a6 22                 jump @12 if s1 <u a3
      :                          @9
    92: 33 0a f8 00              a3 = 0xf8
    96: 33 08 05                 a1 = 0x5
    99: ac a6 18                 jump @12 if s1 <u a3
      :                          @10
   102: 33 0a fc 00              a3 = 0xfc
   106: 33 08 06                 a1 = 0x6
   109: ac a6 0e                 jump @12 if s1 <u a3
      :                          @11
   112: 88 68 fe 00              a1 = s1 <u 0xfe
   116: 33 0a 08                 a3 = 0x8
   119: c9 8a 08                 a1 = a3 - a1
   122: 01                       fallthrough
      :                          @12
   123: ae 89 18                 jump @15 if a2 >=u a1
      :                          @13
   126: 33 06                    s1 = 0
   128: 01                       fallthrough
      :                          @14
   129: 64 27                    a0 = t0
   131: 64 68                    a1 = s1
   133: 82 10 58                 ra = u64 [sp + 0x58]
   136: 82 15 50                 s0 = u64 [sp + 0x50]
   139: 82 16 48                 s1 = u64 [sp + 0x48]
   142: 95 11 60                 sp = sp + 0x60
   145: 32 00                    ret
      :                          @15
   147: 51 06 ee                 jump @14 if s1 == 0
      :                          @16
   150: 51 26 ff 00 58 03        jump @81 if s1 == 255
      :                          @17
   156: 6c 6a                    a3 = sext.b s1
   158: 57 0a 09                 jump @19 if a3 <s 0
      :                          @18
   161: 33 0a                    a3 = 0
   163: 33 0c                    a5 = 0
   165: 28 74                    jump @33
      :                          @19
   167: 55 26 c0 00 0d           jump @21 if s1 >=u 192
      :                          @20
   172: 33 0a 01                 a3 = 0x1
   175: 33 0b 80                 a4 = 0xffffffffffffff80
   178: 28 4a                    jump @30
      :                          @21
   180: 55 26 e0 00 0e           jump @23 if s1 >=u 224
      :                          @22
   185: 33 0a 02                 a3 = 0x2
   188: 33 0b 40 ff              a4 = 0xffffffffffffff40
   192: 28 3c                    jump @30
      :                          @23
   194: 55 26 f0 00 0e           jump @25 if s1 >=u 240
      :                          @24
   199: 33 0a 03                 a3 = 0x3
   202: 33 0b 20 ff              a4 = 0xffffffffffffff20
   206: 28 2e                    jump @30
      :                          @25
   208: 55 26 f8 00 0e           jump @27 if s1 >=u 248
      :                          @26
   213: 33 0a 04                 a3 = 0x4
   216: 33 0b 10 ff              a4 = 0xffffffffffffff10
   220: 28 20                    jump @30
      :                          @27
   222: 55 26 fc 00 0e           jump @29 if s1 >=u 252
      :                          @28
   227: 33 0a 05                 a3 = 0x5
   230: 33 0b 08 ff              a4 = 0xffffffffffffff08
   234: 28 12                    jump @30
      :                          @29
   236: 88 6a fe 00              a3 = s1 <u 0xfe
   240: 33 0b 04 ff              a4 = 0xffffffffffffff04
   244: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
   248: 85 aa 07                 a3 = a3 ^ 0x7
   251: 01                       fallthrough
      :                          @30
   252: ae 8a f3 02              jump @82 if a3 >=u a1
      :                          @31
   256: 33 0c                    a5 = 0
   258: c8 b6 06                 s1 = s1 + a4
   261: 64 ab                    a4 = a3
   263: 01                       fallthrough
      :                          @32
   264: c8 b5 07                 a0 = s0 + a4
   267: 7c 77                    a0 = u8 [a0]
   269: 97 cc 08                 a5 = a5 << 0x8
   272: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
   275: d4 7c 0c                 a5 = a5 | a0
   278: 52 0b f2                 jump @32 if a4 != 0
      :                          @33
   281: 8a a7 03                 i32 a0 = a3 << 0x3
   284: cf 76 07                 a0 = s1 << a0
   287: 9a 77                    a0 = -a0
   289: aa 7c 5d ff              jump @13 if a5 == a0
      :                          @34
   293: e4 89 09                 a2 = maxu(a2, a1)
   296: c9 89 09                 a2 = a2 - a1
   299: 33 07 60                 a0 = 0x60
   302: ac 79 50 ff              jump @13 if a2 <u a0
      :                          @35
   306: c8 85 05                 s0 = s0 + a1
   309: 95 98 a0                 a1 = a2 + 0xffffffffffffffa0
   312: 95 55 60                 s0 = s0 + 0x60
   315: 51 08 65                 jump @48 if a1 == 0
      :                          @36
   318: 7d 5a                    a3 = i8 [s0]
   320: 84 ac ff 00              a5 = a3 & 0xff
   324: 33 09 01                 a2 = 0x1
   327: 59 0a 40                 jump @43 if a3 >=s 0
      :                          @37
   330: 33 0a c0 00              a3 = 0xc0
   334: 33 09 02                 a2 = 0x2
   337: ac ac 36                 jump @43 if a5 <u a3
      :                          @38
   340: 33 0a e0 00              a3 = 0xe0
   344: 33 09 03                 a2 = 0x3
   347: ac ac 2c                 jump @43 if a5 <u a3
      :                          @39
   350: 33 0a f0 00              a3 = 0xf0
   354: 33 09 04                 a2 = 0x4
   357: ac ac 22                 jump @43 if a5 <u a3
      :                          @40
   360: 33 0a f8 00              a3 = 0xf8
   364: 33 09 05                 a2 = 0x5
   367: ac ac 18                 jump @43 if a5 <u a3
      :                          @41
   370: 33 0a fc 00              a3 = 0xfc
   374: 33 09 06                 a2 = 0x6
   377: ac ac 0e                 jump @43 if a5 <u a3
      :                          @42
   380: 88 c9 fe 00              a2 = a5 <u 0xfe
   384: 33 0a 08                 a3 = 0x8
   387: c9 9a 09                 a2 = a3 - a2
   390: 01                       fallthrough
      :                          @43
   391: ac 98 6a 02              jump @84 if a1 <u a2
      :                          @44
   395: 51 0c 97 00              jump @64 if a5 == 0
      :                          @45
   399: 51 2c ff 00 63 02        jump @85 if a5 == 255
      :                          @46
   405: 6c ca                    a3 = sext.b a5
   407: 57 0a 0f                 jump @49 if a3 <s 0
      :                          @47
   410: 33 06                    s1 = 0
   412: 33 0a                    a3 = 0
   414: 28 7a                    jump @63
      :                          @48
   416: 33 09                    a2 = 0
   418: 33 0c                    a5 = 0
   420: 28 7e                    jump @64
      :                          @49
   422: 55 2c c0 00 0d           jump @51 if a5 >=u 192
      :                          @50
   427: 33 06 01                 s1 = 0x1
   430: 33 0b 80                 a4 = 0xffffffffffffff80
   433: 28 4a                    jump @60
      :                          @51
   435: 55 2c e0 00 0e           jump @53 if a5 >=u 224
      :                          @52
   440: 33 06 02                 s1 = 0x2
   443: 33 0b 40 ff              a4 = 0xffffffffffffff40
   447: 28 3c                    jump @60
      :                          @53
   449: 55 2c f0 00 0e           jump @55 if a5 >=u 240
      :                          @54
   454: 33 06 03                 s1 = 0x3
   457: 33 0b 20 ff              a4 = 0xffffffffffffff20
   461: 28 2e                    jump @60
      :                          @55
   463: 55 2c f8 00 0e           jump @57 if a5 >=u 248
      :                          @56
   468: 33 06 04                 s1 = 0x4
   471: 33 0b 10 ff              a4 = 0xffffffffffffff10
   475: 28 20                    jump @60
      :                          @57
   477: 55 2c fc 00 0e           jump @59 if a5 >=u 252
      :                          @58
   482: 33 06 05                 s1 = 0x5
   485: 33 0b 08 ff              a4 = 0xffffffffffffff08
   489: 28 12                    jump @60
      :                          @59
   491: 88 ca fe 00              a3 = a5 <u 0xfe
   495: 33 0b 04 ff              a4 = 0xffffffffffffff04
   499: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
   503: 85 a6 07                 s1 = a3 ^ 0x7
   506: 01                       fallthrough
      :                          @60
   507: ae 96 f9 01              jump @87 if s1 >=u a2
      :                          @61
   511: 33 0a                    a3 = 0
   513: c8 bc 0c                 a5 = a5 + a4
   516: 64 6b                    a4 = s1
   518: 01                       fallthrough
      :                          @62
   519: c8 b5 07                 a0 = s0 + a4
   522: 7c 77                    a0 = u8 [a0]
   524: 97 aa 08                 a3 = a3 << 0x8
   527: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
   530: d4 7a 0a                 a3 = a3 | a0
   533: 52 0b f2                 jump @62 if a4 != 0
      :                          @63
   536: 8a 67 03                 i32 a0 = s1 << 0x3
   539: cf 7c 0c                 a5 = a5 << a0
   542: c8 ac 0c                 a5 = a5 + a3
   545: 01                       fallthrough
      :                          @64
   546: e4 98 07                 a0 = maxu(a1, a2)
   549: c9 97 07                 a0 = a0 - a2
   552: e4 c7 08                 a1 = maxu(a0, a5)
   555: c9 c8 08                 a1 = a1 - a5
   558: 53 18 21 50 fe           jump @13 if a1 <u 33
      :                          @65
   563: c8 59 09                 a2 = a2 + s0
   566: c8 9c 0c                 a5 = a5 + a2
   569: 7c c7 20                 a0 = u8 [a5 + 0x20]
   572: 52 07 b4 01              jump @83 if a0 != 0
      :                          @66
   576: 95 86 df                 s1 = a1 + 0xffffffffffffffdf
   579: 95 c7 21                 a0 = a5 + 0x21
   582: 7b 17                    u64 [sp] = a0
   584: 51 06 4c                 jump @77 if s1 == 0
      :                          @67
   587: 7d 78                    a1 = i8 [a0]
   589: 33 05 01                 s0 = 0x1
   592: 59 08 37                 jump @74 if a1 >=s 0
      :                          @68
   595: 84 89 ff 00              a2 = a1 & 0xff
   599: 33 05 02                 s0 = 0x2
   602: 53 29 c0 00 2d           jump @74 if a2 <u 192
      :                          @69
   607: 33 05 03                 s0 = 0x3
   610: 53 29 e0 00 25           jump @74 if a2 <u 224
      :                          @70
   615: 33 05 04                 s0 = 0x4
   618: 53 29 f0 00 1d           jump @74 if a2 <u 240
      :                          @71
   623: 33 05 05                 s0 = 0x5
   626: 53 29 f8 00 15           jump @74 if a2 <u 248
      :                          @72
   631: 33 05 06                 s0 = 0x6
   634: 53 29 fc 00 0d           jump @74 if a2 <u 252
      :                          @73
   639: 88 98 fe 00              a1 = a2 <u 0xfe
   643: 9a 85 08                 s0 = 0x8 - a1
   646: 01                       fallthrough
      :                          @74
   647: ac 56 6c 01              jump @86 if s1 <u s0
      :                          @75
   651: 64 58                    a1 = s0
   653: 50 10 02 0c 02           ra = 2, jump @104
      :                          @76 [@dyn 1]
   658: 28 07                    jump @78
      :                          @77
   660: 33 05                    s0 = 0
   662: 33 07                    a0 = 0
   664: 01                       fallthrough
      :                          @78
   665: e4 56 08                 a1 = maxu(s1, s0)
   668: c9 58 08                 a1 = a1 - s0
   671: e6 78 07                 a0 = minu(a1, a0)
   674: 33 06 20                 s1 = 0x20
   677: ab 67 4b 01              jump @83 if a0 != s1
      :                          @79
   681: 82 17                    a0 = u64 [sp]
   683: c8 75 05                 s0 = s0 + a0
   686: 7c 57 19                 a0 = u8 [s0 + 0x19]
   689: 7c 58 18                 a1 = u8 [s0 + 0x18]
   692: 7c 59 1a                 a2 = u8 [s0 + 0x1a]
   695: 7c 5a 1b                 a3 = u8 [s0 + 0x1b]
   698: 97 77 08                 a0 = a0 << 0x8
   701: d4 87 07                 a0 = a0 | a1
   704: 97 99 10                 a2 = a2 << 0x10
   707: 97 aa 18                 a3 = a3 << 0x18
   710: d4 a9 09                 a2 = a2 | a3
   713: d4 97 07                 a0 = a0 | a2
   716: 7c 58 1d                 a1 = u8 [s0 + 0x1d]
   719: 7c 59 1c                 a2 = u8 [s0 + 0x1c]
   722: 7c 5a 1e                 a3 = u8 [s0 + 0x1e]
   725: 7c 5b 1f                 a4 = u8 [s0 + 0x1f]
   728: 97 88 08                 a1 = a1 << 0x8
   731: d4 98 08                 a1 = a1 | a2
   734: 97 aa 10                 a3 = a3 << 0x10
   737: 97 bb 18                 a4 = a4 << 0x18
   740: d4 ba 0a                 a3 = a3 | a4
   743: d4 a8 08                 a1 = a1 | a3
   746: 97 88 20                 a1 = a1 << 0x20
   749: d4 87 07                 a0 = a0 | a1
   752: 7b 17 20                 u64 [sp + 0x20] = a0
   755: 7c 57 11                 a0 = u8 [s0 + 0x11]
   758: 7c 58 10                 a1 = u8 [s0 + 0x10]
   761: 7c 59 12                 a2 = u8 [s0 + 0x12]
   764: 7c 5a 13                 a3 = u8 [s0 + 0x13]
   767: 97 77 08                 a0 = a0 << 0x8
   770: d4 87 07                 a0 = a0 | a1
   773: 97 99 10                 a2 = a2 << 0x10
   776: 97 aa 18                 a3 = a3 << 0x18
   779: d4 a9 09                 a2 = a2 | a3
   782: d4 97 07                 a0 = a0 | a2
   785: 7c 58 15                 a1 = u8 [s0 + 0x15]
   788: 7c 59 14                 a2 = u8 [s0 + 0x14]
   791: 7c 5a 16                 a3 = u8 [s0 + 0x16]
   794: 7c 5b 17                 a4 = u8 [s0 + 0x17]
   797: 97 88 08                 a1 = a1 << 0x8
   800: d4 98 08                 a1 = a1 | a2
   803: 97 aa 10                 a3 = a3 << 0x10
   806: 97 bb 18                 a4 = a4 << 0x18
   809: d4 ba 0a                 a3 = a3 | a4
   812: d4 a8 08                 a1 = a1 | a3
   815: 97 88 20                 a1 = a1 << 0x20
   818: d4 87 07                 a0 = a0 | a1
   821: 7b 17 18                 u64 [sp + 0x18] = a0
   824: 7c 57 09                 a0 = u8 [s0 + 0x9]
   827: 7c 58 08                 a1 = u8 [s0 + 0x8]
   830: 7c 59 0a                 a2 = u8 [s0 + 0xa]
   833: 7c 5a 0b                 a3 = u8 [s0 + 0xb]
   836: 97 77 08                 a0 = a0 << 0x8
   839: d4 87 07                 a0 = a0 | a1
   842: 97 99 10                 a2 = a2 << 0x10
   845: 97 aa 18                 a3 = a3 << 0x18
   848: d4 a9 09                 a2 = a2 | a3
   851: d4 97 07                 a0 = a0 | a2
   854: 7c 58 0d                 a1 = u8 [s0 + 0xd]
   857: 7c 59 0c                 a2 = u8 [s0 + 0xc]
   860: 7c 5a 0e                 a3 = u8 [s0 + 0xe]
   863: 7c 5b 0f                 a4 = u8 [s0 + 0xf]
   866: 97 88 08                 a1 = a1 << 0x8
   869: d4 98 08                 a1 = a1 | a2
   872: 97 aa 10                 a3 = a3 << 0x10
   875: 97 bb 18                 a4 = a4 << 0x18
   878: d4 ba 0a                 a3 = a3 | a4
   881: d4 a8 08                 a1 = a1 | a3
   884: 97 88 20                 a1 = a1 << 0x20
   887: d4 87 07                 a0 = a0 | a1
   890: 7b 17 10                 u64 [sp + 0x10] = a0
   893: 7c 57 01                 a0 = u8 [s0 + 0x1]
   896: 7c 58                    a1 = u8 [s0]
   898: 7c 59 02                 a2 = u8 [s0 + 0x2]
   901: 7c 5a 03                 a3 = u8 [s0 + 0x3]
   904: 97 77 08                 a0 = a0 << 0x8
   907: d4 87 07                 a0 = a0 | a1
   910: 97 99 10                 a2 = a2 << 0x10
   913: 97 aa 18                 a3 = a3 << 0x18
   916: d4 a9 09                 a2 = a2 | a3
   919: d4 97 07                 a0 = a0 | a2
   922: 7c 58 05                 a1 = u8 [s0 + 0x5]
   925: 7c 59 04                 a2 = u8 [s0 + 0x4]
   928: 7c 5a 06                 a3 = u8 [s0 + 0x6]
   931: 7c 5b 07                 a4 = u8 [s0 + 0x7]
   934: 97 88 08                 a1 = a1 << 0x8
   937: d4 98 08                 a1 = a1 | a2
   940: 97 aa 10                 a3 = a3 << 0x10
   943: 97 bb 18                 a4 = a4 << 0x18
   946: d4 ba 0a                 a3 = a3 | a4
   949: d4 a8 08                 a1 = a1 | a3
   952: 97 88 20                 a1 = a1 << 0x20
   955: d4 87 07                 a0 = a0 | a1
   958: 7b 17 08                 u64 [sp + 0x8] = a0
   961: 95 17 28                 a0 = sp + 0x28
   964: 33 09 20                 a2 = 0x20
   967: 64 58                    a1 = s0
   969: 33 00 04                 ra = 0x4
   972: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   975: 7b 10 18                 u64 [sp + 0x18] = ra
   978: 7b 15 10                 u64 [sp + 0x10] = s0
   981: 7b 19 08                 u64 [sp + 0x8] = a2
   984: 28 26                    jump @89
      :                          @80 [@dyn 2]
   986: 95 18 08                 a1 = sp + 0x8
   989: 33 07                    a0 = 0
   991: 0a 06                    ecalli 6 // 'assign'
   993: 33 07 01                 a0 = 0x1
   996: 95 18 08                 a1 = sp + 0x8
   999: 0a 06                    ecalli 6 // 'assign'
  1001: 64 52                    t0 = s0
  1003: 28 96 fc                 jump @14
      :                          @81
  1006: 00                       trap
      :                          @82
  1007: 00                       trap
      :                          @83
  1008: 00                       trap
      :                          @84
  1009: 00                       trap
      :                          @85
  1010: 00                       trap
      :                          @86
  1011: 00                       trap
      :                          @87
  1012: 00                       trap
      :                          @88 [export #2: 'on_transfer']
  1013: 33 07 00 00 01           a0 = 0x10000
  1018: 33 08                    a1 = 0
  1020: 32 00                    ret
      :                          @89
  1022: 8d 7a                    i32 a3 = -a0
  1024: 84 a2 07                 t0 = a3 & 0x7
  1027: c8 27 0b                 a4 = a0 + t0
  1030: 51 02 15                 jump @92 if t0 == 0
      :                          @90
  1033: 64 8c                    a5 = a1
  1035: 64 75                    s0 = a0
  1037: 01                       fallthrough
      :                          @91
  1038: 7c ca                    a3 = u8 [a5]
  1040: 78 5a                    u8 [s0] = a3
  1042: 95 55 01                 s0 = s0 + 0x1
  1045: 95 cc 01                 a5 = a5 + 0x1
  1048: ac b5 f6                 jump @91 if s0 <u a4
      :                          @92
  1051: c8 28 03                 t1 = a1 + t0
  1054: c9 29 02                 t0 = a2 - t0
  1057: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  1060: 84 38 07                 a1 = t1 & 0x7
  1063: c8 4b 0a                 a3 = a4 + t2
  1066: 51 08 34                 jump @97 if a1 == 0
      :                          @93
  1069: 58 04 44                 jump @100 if t2 <=s 0
      :                          @94
  1072: 97 38 03                 a1 = t1 << 0x3
  1075: 84 80 38                 ra = a1 & 0x38
  1078: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  1081: 82 c5                    s0 = u64 [a5]
  1083: 8d 88                    i32 a1 = -a1
  1085: 84 88 38                 a1 = a1 & 0x38
  1088: 95 cc 08                 a5 = a5 + 0x8
  1091: 01                       fallthrough
      :                          @95
  1092: 82 c6                    s1 = u64 [a5]
  1094: d0 05 05                 s0 = s0 >> ra
  1097: cf 86 09                 a2 = s1 << a1
  1100: d4 59 09                 a2 = a2 | s0
  1103: 7b b9                    u64 [a4] = a2
  1105: 95 bb 08                 a4 = a4 + 0x8
  1108: 95 cc 08                 a5 = a5 + 0x8
  1111: 64 65                    s0 = s1
  1113: ac ab eb                 jump @95 if a4 <u a3
      :                          @96
  1116: 28 15                    jump @100
      :                          @97
  1118: 58 04 13                 jump @100 if t2 <=s 0
      :                          @98
  1121: 64 38                    a1 = t1
  1123: 01                       fallthrough
      :                          @99
  1124: 82 89                    a2 = u64 [a1]
  1126: 7b b9                    u64 [a4] = a2
  1128: 95 bb 08                 a4 = a4 + 0x8
  1131: 95 88 08                 a1 = a1 + 0x8
  1134: ac ab f6                 jump @99 if a4 <u a3
      :                          @100
  1137: c8 43 08                 a1 = t1 + t2
  1140: 84 29 07                 a2 = t0 & 0x7
  1143: 51 09 14                 jump @103 if a2 == 0
      :                          @101
  1146: c8 a9 09                 a2 = a2 + a3
  1149: 01                       fallthrough
      :                          @102
  1150: 7c 8b                    a4 = u8 [a1]
  1152: 78 ab                    u8 [a3] = a4
  1154: 95 aa 01                 a3 = a3 + 0x1
  1157: 95 88 01                 a1 = a1 + 0x1
  1160: ac 9a f6                 jump @102 if a3 <u a2
      :                          @103
  1163: 82 10 18                 ra = u64 [sp + 0x18]
  1166: 82 15 10                 s0 = u64 [sp + 0x10]
  1169: 82 16 08                 s1 = u64 [sp + 0x8]
  1172: 95 11 20                 sp = sp + 0x20
  1175: 32 00                    ret
      :                          @104
  1177: 64 79                    a2 = a0
  1179: 7c 77                    a0 = u8 [a0]
  1181: 51 07 fc fd              jump @78 if a0 == 0
      :                          @105
  1185: 51 27 ff 00 8d 00        jump @123 if a0 == 255
      :                          @106
  1191: 6c 7a                    a3 = sext.b a0
  1193: 57 0a 09                 jump @108 if a3 <s 0
      :                          @107
  1196: 33 0a                    a3 = 0
  1198: 33 08                    a1 = 0
  1200: 28 73                    jump @122
      :                          @108
  1202: 55 27 c0 00 0d           jump @110 if a0 >=u 192
      :                          @109
  1207: 33 0a 01                 a3 = 0x1
  1210: 33 0b 80                 a4 = 0xffffffffffffff80
  1213: 28 4a                    jump @119
      :                          @110
  1215: 55 27 e0 00 0e           jump @112 if a0 >=u 224
      :                          @111
  1220: 33 0a 02                 a3 = 0x2
  1223: 33 0b 40 ff              a4 = 0xffffffffffffff40
  1227: 28 3c                    jump @119
      :                          @112
  1229: 55 27 f0 00 0e           jump @114 if a0 >=u 240
      :                          @113
  1234: 33 0a 03                 a3 = 0x3
  1237: 33 0b 20 ff              a4 = 0xffffffffffffff20
  1241: 28 2e                    jump @119
      :                          @114
  1243: 55 27 f8 00 0e           jump @116 if a0 >=u 248
      :                          @115
  1248: 33 0a 04                 a3 = 0x4
  1251: 33 0b 10 ff              a4 = 0xffffffffffffff10
  1255: 28 20                    jump @119
      :                          @116
  1257: 55 27 fc 00 0e           jump @118 if a0 >=u 252
      :                          @117
  1262: 33 0a 05                 a3 = 0x5
  1265: 33 0b 08 ff              a4 = 0xffffffffffffff08
  1269: 28 12                    jump @119
      :                          @118
  1271: 88 7a fe 00              a3 = a0 <u 0xfe
  1275: 33 0b 04 ff              a4 = 0xffffffffffffff04
  1279: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  1283: 85 aa 07                 a3 = a3 ^ 0x7
  1286: 01                       fallthrough
      :                          @119
  1287: ae 8a 28                 jump @124 if a3 >=u a1
      :                          @120
  1290: 33 08                    a1 = 0
  1292: c8 b7 07                 a0 = a0 + a4
  1295: 64 ab                    a4 = a3
  1297: 01                       fallthrough
      :                          @121
  1298: c8 b9 0c                 a5 = a2 + a4
  1301: 7c cc                    a5 = u8 [a5]
  1303: 97 88 08                 a1 = a1 << 0x8
  1306: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  1309: d4 c8 08                 a1 = a1 | a5
  1312: 52 0b f2                 jump @121 if a4 != 0
      :                          @122
  1315: 8a a9 03                 i32 a2 = a3 << 0x3
  1318: cf 97 07                 a0 = a0 << a2
  1321: c8 87 07                 a0 = a0 + a1
  1324: 32 00                    ret
      :                          @123
  1326: 00                       trap
      :                          @124
  1327: 00                       trap
