// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// RO data = []
// RW data = []
// Instructions = 315
// Code size = 929 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 13 00 00 00           jump @4
      :                          @2
    10: 28 03 02                 jump @59
      :                          @3 [export #0: 'refine']
    13: c8 87 07                 a0 = a0 + a1
    16: 95 77 e0                 a0 = a0 + 0xffffffffffffffe0
    19: 33 08 20                 a1 = 0x20
    22: 32 00                    ret
      :                          @4 [export #1: 'accumulate']
    24: 95 11 08 f8              sp = sp + 0xfffffffffffff808
    28: 7b 10 f0 07              u64 [sp + 0x7f0] = ra
    32: 7b 15 e8 07              u64 [sp + 0x7e8] = s0
    36: 7b 16 e0 07              u64 [sp + 0x7e0] = s1
    40: 95 11 d0 fd              sp = sp + 0xfffffffffffffdd0
    44: 33 09 08                 a2 = 0x8
    47: ac 98 ea 00              jump @34 if a1 <u a2
      :                          @5
    51: 33 09 fc                 a2 = 0xfffffffffffffffc
    54: aa 97 d3 01              jump @55 if a0 == a2
      :                          @6
    58: 51 07 cf 01              jump @55 if a0 == 0
      :                          @7
    62: 95 8a f8                 a3 = a1 + 0xfffffffffffffff8
    65: 95 75 08                 s0 = a0 + 0x8
    68: 51 0a 45                 jump @17 if a3 == 0
      :                          @8
    71: 7d 58                    a1 = i8 [s0]
    73: 33 06 01                 s1 = 0x1
    76: 59 08 40                 jump @18 if a1 >=s 0
      :                          @9
    79: 84 89 ff 00              a2 = a1 & 0xff
    83: 33 06 02                 s1 = 0x2
    86: 53 29 c0 00 2d           jump @15 if a2 <u 192
      :                          @10
    91: 33 06 03                 s1 = 0x3
    94: 53 29 e0 00 25           jump @15 if a2 <u 224
      :                          @11
    99: 33 06 04                 s1 = 0x4
   102: 53 29 f0 00 1d           jump @15 if a2 <u 240
      :                          @12
   107: 33 06 05                 s1 = 0x5
   110: 53 29 f8 00 15           jump @15 if a2 <u 248
      :                          @13
   115: 33 06 06                 s1 = 0x6
   118: 53 29 fc 00 0d           jump @15 if a2 <u 252
      :                          @14
   123: 88 98 fe 00              a1 = a2 <u 0xfe
   127: 9a 86 08                 s1 = 0x8 - a1
   130: 01                       fallthrough
      :                          @15
   131: ae 6a 09                 jump @18 if a3 >=u s1
      :                          @16
   134: 28 93 00                 jump @34
      :                          @17
   137: 33 06                    s1 = 0
   139: 01                       fallthrough
      :                          @18
   140: 7b 16 08                 u64 [sp + 0x8] = s1
   143: 64 57                    a0 = s0
   145: 64 68                    a1 = s1
   147: 64 a6                    s1 = a3
   149: 50 10 02 6e 02           ra = 2, jump @86
      :                          @19 [@dyn 1]
   154: 82 1a 08                 a3 = u64 [sp + 0x8]
   157: 51 07 7c                 jump @34 if a0 == 0
      :                          @20
   160: e4 a6 07                 a0 = maxu(s1, a3)
   163: c9 a7 07                 a0 = a0 - a3
   166: 53 17 60 73              jump @34 if a0 <u 96
      :                          @21
   170: c8 5a 08                 a1 = a3 + s0
   173: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   176: 95 87 60                 a0 = a1 + 0x60
   179: 7b 17 08                 u64 [sp + 0x8] = a0
   182: 51 06 4c                 jump @32 if s1 == 0
      :                          @22
   185: 7d 78                    a1 = i8 [a0]
   187: 33 05 01                 s0 = 0x1
   190: 59 08 37                 jump @29 if a1 >=s 0
      :                          @23
   193: 84 89 ff 00              a2 = a1 & 0xff
   197: 33 05 02                 s0 = 0x2
   200: 53 29 c0 00 2d           jump @29 if a2 <u 192
      :                          @24
   205: 33 05 03                 s0 = 0x3
   208: 53 29 e0 00 25           jump @29 if a2 <u 224
      :                          @25
   213: 33 05 04                 s0 = 0x4
   216: 53 29 f0 00 1d           jump @29 if a2 <u 240
      :                          @26
   221: 33 05 05                 s0 = 0x5
   224: 53 29 f8 00 15           jump @29 if a2 <u 248
      :                          @27
   229: 33 05 06                 s0 = 0x6
   232: 53 29 fc 00 0d           jump @29 if a2 <u 252
      :                          @28
   237: 88 98 fe 00              a1 = a2 <u 0xfe
   241: 9a 85 08                 s0 = 0x8 - a1
   244: 01                       fallthrough
      :                          @29
   245: ac 56 16 01              jump @57 if s1 <u s0
      :                          @30
   249: 64 58                    a1 = s0
   251: 50 10 04 08 02           ra = 4, jump @86
      :                          @31 [@dyn 2]
   256: 28 07                    jump @33
      :                          @32
   258: 33 05                    s0 = 0
   260: 33 07                    a0 = 0
   262: 01                       fallthrough
      :                          @33
   263: e4 56 08                 a1 = maxu(s1, s0)
   266: c9 58 08                 a1 = a1 - s0
   269: e4 78 08                 a1 = maxu(a1, a0)
   272: c9 78 08                 a1 = a1 - a0
   275: 33 09 21                 a2 = 0x21
   278: ae 98 21                 jump @36 if a1 >=u a2
      :                          @34
   281: 33 08                    a1 = 0
   283: 33 07 00 00 01           a0 = 0x10000
   288: 01                       fallthrough
      :                          @35
   289: 95 11 30 02              sp = sp + 0x230
   293: 82 10 f0 07              ra = u64 [sp + 0x7f0]
   297: 82 15 e8 07              s0 = u64 [sp + 0x7e8]
   301: 82 16 e0 07              s1 = u64 [sp + 0x7e0]
   305: 95 11 f8 07              sp = sp + 0x7f8
   309: 32 00                    ret
      :                          @36
   311: 82 19 08                 a2 = u64 [sp + 0x8]
   314: c8 95 05                 s0 = s0 + a2
   317: c8 57 07                 a0 = a0 + s0
   320: 7c 79 20                 a2 = u8 [a0 + 0x20]
   323: 52 09 c7 00              jump @56 if a2 != 0
      :                          @37
   327: 95 8a df                 a3 = a1 + 0xffffffffffffffdf
   330: 95 77 21                 a0 = a0 + 0x21
   333: 51 0a 53                 jump @48 if a3 == 0
      :                          @38
   336: 7d 78                    a1 = i8 [a0]
   338: 33 05 01                 s0 = 0x1
   341: 59 08 37                 jump @45 if a1 >=s 0
      :                          @39
   344: 84 89 ff 00              a2 = a1 & 0xff
   348: 33 05 02                 s0 = 0x2
   351: 53 29 c0 00 2d           jump @45 if a2 <u 192
      :                          @40
   356: 33 05 03                 s0 = 0x3
   359: 53 29 e0 00 25           jump @45 if a2 <u 224
      :                          @41
   364: 33 05 04                 s0 = 0x4
   367: 53 29 f0 00 1d           jump @45 if a2 <u 240
      :                          @42
   372: 33 05 05                 s0 = 0x5
   375: 53 29 f8 00 15           jump @45 if a2 <u 248
      :                          @43
   380: 33 05 06                 s0 = 0x6
   383: 53 29 fc 00 0d           jump @45 if a2 <u 252
      :                          @44
   388: 88 98 fe 00              a1 = a2 <u 0xfe
   392: 9a 85 08                 s0 = 0x8 - a1
   395: 01                       fallthrough
      :                          @45
   396: 7b 1a 08                 u64 [sp + 0x8] = a3
   399: ac 5a 7d                 jump @58 if a3 <u s0
      :                          @46
   402: 64 76                    s1 = a0
   404: 64 58                    a1 = s0
   406: 50 10 06 6d 01           ra = 6, jump @86
      :                          @47 [@dyn 3]
   411: 82 1a 08                 a3 = u64 [sp + 0x8]
   414: 28 09                    jump @49
      :                          @48
   416: 64 76                    s1 = a0
   418: 33 05                    s0 = 0
   420: 33 07                    a0 = 0
   422: 01                       fallthrough
      :                          @49
   423: e4 5a 08                 a1 = maxu(a3, s0)
   426: c9 58 08                 a1 = a1 - s0
   429: e6 78 07                 a0 = minu(a1, a0)
   432: 52 17 20 5a              jump @56 if a0 != 32
      :                          @50
   436: c8 65 05                 s0 = s0 + s1
   439: 7b 15 08                 u64 [sp + 0x8] = s0
   442: 33 09 00 0a              a2 = 0xa00
   446: 95 17 10                 a0 = sp + 0x10
   449: 95 16 10                 s1 = sp + 0x10
   452: 33 08                    a1 = 0
   454: 50 10 08 eb 00           ra = 8, jump @75
      :                          @51 [@dyn 4]
   459: 33 05 50                 s0 = 0x50
   462: 01                       fallthrough
      :                          @52
   463: 33 09 20                 a2 = 0x20
   466: 64 67                    a0 = s1
   468: 82 18 08                 a1 = u64 [sp + 0x8]
   471: 33 00 0a                 ra = 0xa
   474: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   477: 7b 10 18                 u64 [sp + 0x18] = ra
   480: 7b 15 10                 u64 [sp + 0x10] = s0
   483: 7b 16 08                 u64 [sp + 0x8] = s1
   486: 28 30                    jump @60
      :                          @53 [@dyn 5]
   488: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
   491: 95 66 20                 s1 = s1 + 0x20
   494: 52 05 e1                 jump @52 if s0 != 0
      :                          @54
   497: 95 18 10                 a1 = sp + 0x10
   500: 33 07                    a0 = 0
   502: 0a 06                    ecalli 6 // 'assign'
   504: 33 07 01                 a0 = 0x1
   507: 95 18 10                 a1 = sp + 0x10
   510: 0a 06                    ecalli 6 // 'assign'
   512: 33 08 20                 a1 = 0x20
   515: 82 17 08                 a0 = u64 [sp + 0x8]
   518: 28 1b ff                 jump @35
      :                          @55
   521: 00                       trap
      :                          @56
   522: 00                       trap
      :                          @57
   523: 00                       trap
      :                          @58
   524: 00                       trap
      :                          @59 [export #2: 'on_transfer']
   525: 33 07 00 00 01           a0 = 0x10000
   530: 33 08                    a1 = 0
   532: 32 00                    ret
      :                          @60
   534: 8d 7a                    i32 a3 = -a0
   536: 84 a2 07                 t0 = a3 & 0x7
   539: c8 27 0b                 a4 = a0 + t0
   542: 51 02 15                 jump @63 if t0 == 0
      :                          @61
   545: 64 8c                    a5 = a1
   547: 64 75                    s0 = a0
   549: 01                       fallthrough
      :                          @62
   550: 7c ca                    a3 = u8 [a5]
   552: 78 5a                    u8 [s0] = a3
   554: 95 55 01                 s0 = s0 + 0x1
   557: 95 cc 01                 a5 = a5 + 0x1
   560: ac b5 f6                 jump @62 if s0 <u a4
      :                          @63
   563: c8 28 03                 t1 = a1 + t0
   566: c9 29 02                 t0 = a2 - t0
   569: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
   572: 84 38 07                 a1 = t1 & 0x7
   575: c8 4b 0a                 a3 = a4 + t2
   578: 51 08 34                 jump @68 if a1 == 0
      :                          @64
   581: 58 04 44                 jump @71 if t2 <=s 0
      :                          @65
   584: 97 38 03                 a1 = t1 << 0x3
   587: 84 80 38                 ra = a1 & 0x38
   590: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
   593: 82 c5                    s0 = u64 [a5]
   595: 8d 88                    i32 a1 = -a1
   597: 84 88 38                 a1 = a1 & 0x38
   600: 95 cc 08                 a5 = a5 + 0x8
   603: 01                       fallthrough
      :                          @66
   604: 82 c6                    s1 = u64 [a5]
   606: d0 05 05                 s0 = s0 >> ra
   609: cf 86 09                 a2 = s1 << a1
   612: d4 59 09                 a2 = a2 | s0
   615: 7b b9                    u64 [a4] = a2
   617: 95 bb 08                 a4 = a4 + 0x8
   620: 95 cc 08                 a5 = a5 + 0x8
   623: 64 65                    s0 = s1
   625: ac ab eb                 jump @66 if a4 <u a3
      :                          @67
   628: 28 15                    jump @71
      :                          @68
   630: 58 04 13                 jump @71 if t2 <=s 0
      :                          @69
   633: 64 38                    a1 = t1
   635: 01                       fallthrough
      :                          @70
   636: 82 89                    a2 = u64 [a1]
   638: 7b b9                    u64 [a4] = a2
   640: 95 bb 08                 a4 = a4 + 0x8
   643: 95 88 08                 a1 = a1 + 0x8
   646: ac ab f6                 jump @70 if a4 <u a3
      :                          @71
   649: c8 43 08                 a1 = t1 + t2
   652: 84 29 07                 a2 = t0 & 0x7
   655: 51 09 14                 jump @74 if a2 == 0
      :                          @72
   658: c8 a9 09                 a2 = a2 + a3
   661: 01                       fallthrough
      :                          @73
   662: 7c 8b                    a4 = u8 [a1]
   664: 78 ab                    u8 [a3] = a4
   666: 95 aa 01                 a3 = a3 + 0x1
   669: 95 88 01                 a1 = a1 + 0x1
   672: ac 9a f6                 jump @73 if a3 <u a2
      :                          @74
   675: 82 10 18                 ra = u64 [sp + 0x18]
   678: 82 15 10                 s0 = u64 [sp + 0x10]
   681: 82 16 08                 s1 = u64 [sp + 0x8]
   684: 95 11 20                 sp = sp + 0x20
   687: 32 00                    ret
      :                          @75
   689: 8d 7a                    i32 a3 = -a0
   691: 84 aa 07                 a3 = a3 & 0x7
   694: c8 a7 0b                 a4 = a0 + a3
   697: 51 0a 0e                 jump @78 if a3 == 0
      :                          @76
   700: 64 7c                    a5 = a0
   702: 01                       fallthrough
      :                          @77
   703: 78 c8                    u8 [a5] = a1
   705: 95 cc 01                 a5 = a5 + 0x1
   708: ac bc fb                 jump @77 if a5 <u a4
      :                          @78
   711: c9 a9 03                 t1 = a2 - a3
   714: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
   717: c8 cb 0a                 a3 = a4 + a5
   720: 58 0c 1d                 jump @81 if a5 <=s 0
      :                          @79
   723: 84 82 ff 00              t0 = a1 & 0xff
   727: 14 09 01 01 01 01 01 01 01 01 a2 = 0x101010101010101
   737: ca 92 0c                 a5 = t0 * a2
   740: 01                       fallthrough
      :                          @80
   741: 7b bc                    u64 [a4] = a5
   743: 95 bb 08                 a4 = a4 + 0x8
   746: ac ab fb                 jump @80 if a4 <u a3
      :                          @81
   749: 84 39 07                 a2 = t1 & 0x7
   752: 52 09 05                 jump @83 if a2 != 0
      :                          @82
   755: 28 0e                    jump @85
      :                          @83
   757: c8 a9 09                 a2 = a2 + a3
   760: 01                       fallthrough
      :                          @84
   761: 78 a8                    u8 [a3] = a1
   763: 95 aa 01                 a3 = a3 + 0x1
   766: ac 9a fb                 jump @84 if a3 <u a2
      :                          @85
   769: 32 00                    ret
      :                          @86
   771: 51 08 9b 00              jump @107 if a1 == 0
      :                          @87
   775: 64 79                    a2 = a0
   777: 7c 77                    a0 = u8 [a0]
   779: 51 07 91 00              jump @106 if a0 == 0
      :                          @88
   783: 51 27 ff 00 90 00        jump @108 if a0 == 255
      :                          @89
   789: 6c 7a                    a3 = sext.b a0
   791: 57 0a 09                 jump @91 if a3 <s 0
      :                          @90
   794: 33 0a                    a3 = 0
   796: 33 08                    a1 = 0
   798: 28 73                    jump @105
      :                          @91
   800: 55 27 c0 00 0d           jump @93 if a0 >=u 192
      :                          @92
   805: 33 0a 01                 a3 = 0x1
   808: 33 0b 80                 a4 = 0xffffffffffffff80
   811: 28 4a                    jump @102
      :                          @93
   813: 55 27 e0 00 0e           jump @95 if a0 >=u 224
      :                          @94
   818: 33 0a 02                 a3 = 0x2
   821: 33 0b 40 ff              a4 = 0xffffffffffffff40
   825: 28 3c                    jump @102
      :                          @95
   827: 55 27 f0 00 0e           jump @97 if a0 >=u 240
      :                          @96
   832: 33 0a 03                 a3 = 0x3
   835: 33 0b 20 ff              a4 = 0xffffffffffffff20
   839: 28 2e                    jump @102
      :                          @97
   841: 55 27 f8 00 0e           jump @99 if a0 >=u 248
      :                          @98
   846: 33 0a 04                 a3 = 0x4
   849: 33 0b 10 ff              a4 = 0xffffffffffffff10
   853: 28 20                    jump @102
      :                          @99
   855: 55 27 fc 00 0e           jump @101 if a0 >=u 252
      :                          @100
   860: 33 0a 05                 a3 = 0x5
   863: 33 0b 08 ff              a4 = 0xffffffffffffff08
   867: 28 12                    jump @102
      :                          @101
   869: 88 7a fe 00              a3 = a0 <u 0xfe
   873: 33 0b 04 ff              a4 = 0xffffffffffffff04
   877: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
   881: 85 aa 07                 a3 = a3 ^ 0x7
   884: 01                       fallthrough
      :                          @102
   885: ae 8a 2b                 jump @109 if a3 >=u a1
      :                          @103
   888: 33 08                    a1 = 0
   890: c8 b7 07                 a0 = a0 + a4
   893: 64 ab                    a4 = a3
   895: 01                       fallthrough
      :                          @104
   896: c8 b9 0c                 a5 = a2 + a4
   899: 7c cc                    a5 = u8 [a5]
   901: 97 88 08                 a1 = a1 << 0x8
   904: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
   907: d4 c8 08                 a1 = a1 | a5
   910: 52 0b f2                 jump @104 if a4 != 0
      :                          @105
   913: 8a a9 03                 i32 a2 = a3 << 0x3
   916: cf 97 07                 a0 = a0 << a2
   919: c8 87 07                 a0 = a0 + a1
   922: 32 00                    ret
      :                          @106
   924: 32 00                    ret
      :                          @107
   926: 00                       trap
      :                          @108
   927: 00                       trap
      :                          @109
   928: 00                       trap
