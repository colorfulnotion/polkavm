// RO data = 0/0 bytes
// RW data = 0/2560 bytes
// Stack size = 65536 bytes
// RO data = []
// RW data = []
// Instructions = 362
// Code size = 1093 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 13 00 00 00           jump @4
      :                          @2
    10: 28 f9 02                 jump @87
      :                          @3 [export #0: 'refine']
    13: c8 87 07                 a0 = a0 + a1
    16: 95 77 e0                 a0 = a0 + 0xffffffffffffffe0
    19: 33 08 20                 a1 = 0x20
    22: 32 00                    ret
      :                          @4 [export #1: 'accumulate']
    24: 95 11 e0                 sp = sp + 0xffffffffffffffe0
    27: 7b 10 18                 u64 [sp + 0x18] = ra
    30: 7b 15 10                 u64 [sp + 0x10] = s0
    33: 7b 16 08                 u64 [sp + 0x8] = s1
    36: 33 09 00 00 01           a2 = 0x10000
    41: 51 08 7a 01              jump @50 if a1 == 0
      :                          @5
    45: 64 86                    s1 = a1
    47: 7d 78                    a1 = i8 [a0]
    49: 33 05 01                 s0 = 0x1
    52: 59 08 37                 jump @12 if a1 >=s 0
      :                          @6
    55: 84 8a ff 00              a3 = a1 & 0xff
    59: 33 05 02                 s0 = 0x2
    62: 53 2a c0 00 2d           jump @12 if a3 <u 192
      :                          @7
    67: 33 05 03                 s0 = 0x3
    70: 53 2a e0 00 25           jump @12 if a3 <u 224
      :                          @8
    75: 33 05 04                 s0 = 0x4
    78: 53 2a f0 00 1d           jump @12 if a3 <u 240
      :                          @9
    83: 33 05 05                 s0 = 0x5
    86: 53 2a f8 00 15           jump @12 if a3 <u 248
      :                          @10
    91: 33 05 06                 s0 = 0x6
    94: 53 2a fc 00 0d           jump @12 if a3 <u 252
      :                          @11
    99: 88 a8 fe 00              a1 = a3 <u 0xfe
   103: 9a 85 08                 s0 = 0x8 - a1
   106: 01                       fallthrough
      :                          @12
   107: ae 56 08                 jump @14 if s1 >=u s0
      :                          @13
   110: 33 08                    a1 = 0
   112: 28 33 01                 jump @50
      :                          @14
   115: 64 58                    a1 = s0
   117: 7b 17                    u64 [sp] = a0
   119: 50 10 02 30 03           ra = 2, jump @103
      :                          @15 [@dyn 1]
   124: aa 56 1f 01              jump @49 if s1 == s0
      :                          @16
   128: 82 17                    a0 = u64 [sp]
   130: c8 57 07                 a0 = a0 + s0
   133: 7d 78                    a1 = i8 [a0]
   135: c9 56 06                 s1 = s1 - s0
   138: 33 05 01                 s0 = 0x1
   141: 59 08 37                 jump @23 if a1 >=s 0
      :                          @17
   144: 84 89 ff 00              a2 = a1 & 0xff
   148: 33 05 02                 s0 = 0x2
   151: 53 29 c0 00 2d           jump @23 if a2 <u 192
      :                          @18
   156: 33 05 03                 s0 = 0x3
   159: 53 29 e0 00 25           jump @23 if a2 <u 224
      :                          @19
   164: 33 05 04                 s0 = 0x4
   167: 53 29 f0 00 1d           jump @23 if a2 <u 240
      :                          @20
   172: 33 05 05                 s0 = 0x5
   175: 53 29 f8 00 15           jump @23 if a2 <u 248
      :                          @21
   180: 33 05 06                 s0 = 0x6
   183: 53 29 fc 00 0d           jump @23 if a2 <u 252
      :                          @22
   188: 88 98 fe 00              a1 = a2 <u 0xfe
   192: 9a 85 08                 s0 = 0x8 - a1
   195: 01                       fallthrough
      :                          @23
   196: ac 56 d7 00              jump @49 if s1 <u s0
      :                          @24
   200: 64 58                    a1 = s0
   202: 7b 17                    u64 [sp] = a0
   204: 50 10 04 db 02           ra = 4, jump @103
      :                          @25 [@dyn 2]
   209: 82 17                    a0 = u64 [sp]
   211: c8 57 07                 a0 = a0 + s0
   214: c9 56 0a                 a3 = s1 - s0
   217: ab 56 07                 jump @27 if s1 != s0
      :                          @26
   220: 33 05                    s0 = 0
   222: 28 41                    jump @35
      :                          @27
   224: 7d 78                    a1 = i8 [a0]
   226: 33 05 01                 s0 = 0x1
   229: 59 08 37                 jump @34 if a1 >=s 0
      :                          @28
   232: 84 89 ff 00              a2 = a1 & 0xff
   236: 33 05 02                 s0 = 0x2
   239: 53 29 c0 00 2d           jump @34 if a2 <u 192
      :                          @29
   244: 33 05 03                 s0 = 0x3
   247: 53 29 e0 00 25           jump @34 if a2 <u 224
      :                          @30
   252: 33 05 04                 s0 = 0x4
   255: 53 29 f0 00 1d           jump @34 if a2 <u 240
      :                          @31
   260: 33 05 05                 s0 = 0x5
   263: 53 29 f8 00 15           jump @34 if a2 <u 248
      :                          @32
   268: 33 05 06                 s0 = 0x6
   271: 53 29 fc 00 0d           jump @34 if a2 <u 252
      :                          @33
   276: 88 98 fe 00              a1 = a2 <u 0xfe
   280: 9a 85 08                 s0 = 0x8 - a1
   283: 01                       fallthrough
      :                          @34
   284: ac 5a 7f                 jump @49 if a3 <u s0
      :                          @35
   287: 64 a6                    s1 = a3
   289: 7b 17                    u64 [sp] = a0
   291: 64 58                    a1 = s0
   293: 50 10 06 82 02           ra = 6, jump @103
      :                          @36 [@dyn 3]
   298: 51 07 71                 jump @49 if a0 == 0
      :                          @37
   301: e4 56 07                 a0 = maxu(s1, s0)
   304: c9 57 07                 a0 = a0 - s0
   307: 33 09 00 00 01           a2 = 0x10000
   312: 53 17 60 36 ff           jump @13 if a0 <u 96
      :                          @38
   317: 82 18                    a1 = u64 [sp]
   319: c8 85 05                 s0 = s0 + a1
   322: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   325: 95 57 60                 a0 = s0 + 0x60
   328: 7b 17                    u64 [sp] = a0
   330: 51 06 69                 jump @51 if s1 == 0
      :                          @39
   333: 7d 78                    a1 = i8 [a0]
   335: 33 05 01                 s0 = 0x1
   338: 59 08 37                 jump @46 if a1 >=s 0
      :                          @40
   341: 84 89 ff 00              a2 = a1 & 0xff
   345: 33 05 02                 s0 = 0x2
   348: 53 29 c0 00 2d           jump @46 if a2 <u 192
      :                          @41
   353: 33 05 03                 s0 = 0x3
   356: 53 29 e0 00 25           jump @46 if a2 <u 224
      :                          @42
   361: 33 05 04                 s0 = 0x4
   364: 53 29 f0 00 1d           jump @46 if a2 <u 240
      :                          @43
   369: 33 05 05                 s0 = 0x5
   372: 53 29 f8 00 15           jump @46 if a2 <u 248
      :                          @44
   377: 33 05 06                 s0 = 0x6
   380: 53 29 fc 00 0d           jump @46 if a2 <u 252
      :                          @45
   385: 88 98 fe 00              a1 = a2 <u 0xfe
   389: 9a 85 08                 s0 = 0x8 - a1
   392: 01                       fallthrough
      :                          @46
   393: ac 56 77 01              jump @84 if s1 <u s0
      :                          @47
   397: 64 58                    a1 = s0
   399: 50 10 08 18 02           ra = 8, jump @103
      :                          @48 [@dyn 4]
   404: 33 09 00 00 01           a2 = 0x10000
   409: 28 1f                    jump @52
      :                          @49
   411: 33 08                    a1 = 0
   413: 33 09 00 00 01           a2 = 0x10000
   418: 01                       fallthrough
      :                          @50
   419: 64 97                    a0 = a2
   421: 82 10 18                 ra = u64 [sp + 0x18]
   424: 82 15 10                 s0 = u64 [sp + 0x10]
   427: 82 16 08                 s1 = u64 [sp + 0x8]
   430: 95 11 20                 sp = sp + 0x20
   433: 32 00                    ret
      :                          @51
   435: 33 05                    s0 = 0
   437: 33 07                    a0 = 0
   439: 01                       fallthrough
      :                          @52
   440: e4 56 08                 a1 = maxu(s1, s0)
   443: c9 58 08                 a1 = a1 - s0
   446: e4 78 06                 s1 = maxu(a1, a0)
   449: c9 76 06                 s1 = s1 - a0
   452: 53 16 20 aa fe           jump @13 if s1 <u 32
      :                          @53
   457: 82 18                    a1 = u64 [sp]
   459: c8 85 05                 s0 = s0 + a1
   462: c8 57 07                 a0 = a0 + s0
   465: 95 66 e0                 s1 = s1 + 0xffffffffffffffe0
   468: 95 77 20                 a0 = a0 + 0x20
   471: 7b 17                    u64 [sp] = a0
   473: 51 06 51                 jump @64 if s1 == 0
      :                          @54
   476: 7d 78                    a1 = i8 [a0]
   478: 33 05 01                 s0 = 0x1
   481: 59 08 37                 jump @61 if a1 >=s 0
      :                          @55
   484: 84 89 ff 00              a2 = a1 & 0xff
   488: 33 05 02                 s0 = 0x2
   491: 53 29 c0 00 2d           jump @61 if a2 <u 192
      :                          @56
   496: 33 05 03                 s0 = 0x3
   499: 53 29 e0 00 25           jump @61 if a2 <u 224
      :                          @57
   504: 33 05 04                 s0 = 0x4
   507: 53 29 f0 00 1d           jump @61 if a2 <u 240
      :                          @58
   512: 33 05 05                 s0 = 0x5
   515: 53 29 f8 00 15           jump @61 if a2 <u 248
      :                          @59
   520: 33 05 06                 s0 = 0x6
   523: 53 29 fc 00 0d           jump @61 if a2 <u 252
      :                          @60
   528: 88 98 fe 00              a1 = a2 <u 0xfe
   532: 9a 85 08                 s0 = 0x8 - a1
   535: 01                       fallthrough
      :                          @61
   536: ac 56 e8 00              jump @84 if s1 <u s0
      :                          @62
   540: 64 58                    a1 = s0
   542: 50 10 0a 89 01           ra = 10, jump @103
      :                          @63 [@dyn 5]
   547: 33 09 00 00 01           a2 = 0x10000
   552: 28 05                    jump @65
      :                          @64
   554: 33 05                    s0 = 0
   556: 01                       fallthrough
      :                          @65
   557: ae 65 41 fe              jump @13 if s0 >=u s1
      :                          @66
   561: 82 17                    a0 = u64 [sp]
   563: c8 57 07                 a0 = a0 + s0
   566: 7c 78                    a1 = u8 [a0]
   568: 52 08 c9 00              jump @85 if a1 != 0
      :                          @67
   572: e4 56 08                 a1 = maxu(s1, s0)
   575: c9 58 08                 a1 = a1 - s0
   578: 95 75 01                 s0 = a0 + 0x1
   581: 33 07 01                 a0 = 0x1
   584: e4 78 07                 a0 = maxu(a1, a0)
   587: 33 09 02                 a2 = 0x2
   590: 95 7a ff                 a3 = a0 + 0xffffffffffffffff
   593: ae 98 09                 jump @69 if a1 >=u a2
      :                          @68
   596: 33 06                    s1 = 0
   598: 33 07                    a0 = 0
   600: 28 4f                    jump @79
      :                          @69
   602: 7d 57                    a0 = i8 [s0]
   604: 33 06 01                 s1 = 0x1
   607: 59 07 37                 jump @76 if a0 >=s 0
      :                          @70
   610: 84 77 ff 00              a0 = a0 & 0xff
   614: 33 06 02                 s1 = 0x2
   617: 53 27 c0 00 2d           jump @76 if a0 <u 192
      :                          @71
   622: 33 06 03                 s1 = 0x3
   625: 53 27 e0 00 25           jump @76 if a0 <u 224
      :                          @72
   630: 33 06 04                 s1 = 0x4
   633: 53 27 f0 00 1d           jump @76 if a0 <u 240
      :                          @73
   638: 33 06 05                 s1 = 0x5
   641: 53 27 f8 00 15           jump @76 if a0 <u 248
      :                          @74
   646: 33 06 06                 s1 = 0x6
   649: 53 27 fc 00 0d           jump @76 if a0 <u 252
      :                          @75
   654: 88 77 fe 00              a0 = a0 <u 0xfe
   658: 9a 76 08                 s1 = 0x8 - a0
   661: 01                       fallthrough
      :                          @76
   662: 7b 1a                    u64 [sp] = a3
   664: ac 6a 6a                 jump @86 if a3 <u s1
      :                          @77
   667: 64 57                    a0 = s0
   669: 64 68                    a1 = s1
   671: 50 10 0c 08 01           ra = 12, jump @103
      :                          @78 [@dyn 6]
   676: 82 1a                    a3 = u64 [sp]
   678: 01                       fallthrough
      :                          @79
   679: e4 6a 08                 a1 = maxu(a3, s1)
   682: c9 68 08                 a1 = a1 - s1
   685: e6 78 07                 a0 = minu(a1, a0)
   688: 52 17 20 51              jump @85 if a0 != 32
      :                          @80
   692: c8 65 05                 s0 = s0 + s1
   695: 7b 15                    u64 [sp] = s0
   697: 33 05 00 00 02           s0 = 0x20000
   702: 33 06 50                 s1 = 0x50
   705: 01                       fallthrough
      :                          @81
   706: 33 09 20                 a2 = 0x20
   709: 64 57                    a0 = s0
   711: 82 18                    a1 = u64 [sp]
   713: 33 00 0e                 ra = 0xe
   716: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   719: 7b 10 18                 u64 [sp + 0x18] = ra
   722: 7b 15 10                 u64 [sp + 0x10] = s0
   725: 7b 16 08                 u64 [sp + 0x8] = s1
   728: 28 34                    jump @88
      :                          @82 [@dyn 7]
   730: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
   733: 95 55 20                 s0 = s0 + 0x20
   736: 52 06 e2                 jump @81 if s1 != 0
      :                          @83
   739: 33 05 00 00 02           s0 = 0x20000
   744: 33 07                    a0 = 0
   746: 33 08 00 00 02           a1 = 0x20000
   751: 0a 06                    ecalli 6 // 'assign'
   753: 33 07 01                 a0 = 0x1
   756: 64 58                    a1 = s0
   758: 0a 06                    ecalli 6 // 'assign'
   760: 33 08 20                 a1 = 0x20
   763: 82 19                    a2 = u64 [sp]
   765: 28 a6 fe                 jump @50
      :                          @84
   768: 00                       trap
      :                          @85
   769: 00                       trap
      :                          @86
   770: 00                       trap
      :                          @87 [export #2: 'on_transfer']
   771: 33 07 00 00 01           a0 = 0x10000
   776: 33 08                    a1 = 0
   778: 32 00                    ret
      :                          @88
   780: 8d 7a                    i32 a3 = -a0
   782: 84 a2 07                 t0 = a3 & 0x7
   785: c8 27 0b                 a4 = a0 + t0
   788: 51 02 15                 jump @91 if t0 == 0
      :                          @89
   791: 64 8c                    a5 = a1
   793: 64 75                    s0 = a0
   795: 01                       fallthrough
      :                          @90
   796: 7c ca                    a3 = u8 [a5]
   798: 78 5a                    u8 [s0] = a3
   800: 95 55 01                 s0 = s0 + 0x1
   803: 95 cc 01                 a5 = a5 + 0x1
   806: ac b5 f6                 jump @90 if s0 <u a4
      :                          @91
   809: c8 28 03                 t1 = a1 + t0
   812: c9 29 02                 t0 = a2 - t0
   815: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
   818: 84 38 07                 a1 = t1 & 0x7
   821: c8 4b 0a                 a3 = a4 + t2
   824: 51 08 34                 jump @96 if a1 == 0
      :                          @92
   827: 58 04 44                 jump @99 if t2 <=s 0
      :                          @93
   830: 97 38 03                 a1 = t1 << 0x3
   833: 84 80 38                 ra = a1 & 0x38
   836: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
   839: 82 c5                    s0 = u64 [a5]
   841: 8d 88                    i32 a1 = -a1
   843: 84 88 38                 a1 = a1 & 0x38
   846: 95 cc 08                 a5 = a5 + 0x8
   849: 01                       fallthrough
      :                          @94
   850: 82 c6                    s1 = u64 [a5]
   852: d0 05 05                 s0 = s0 >> ra
   855: cf 86 09                 a2 = s1 << a1
   858: d4 59 09                 a2 = a2 | s0
   861: 7b b9                    u64 [a4] = a2
   863: 95 bb 08                 a4 = a4 + 0x8
   866: 95 cc 08                 a5 = a5 + 0x8
   869: 64 65                    s0 = s1
   871: ac ab eb                 jump @94 if a4 <u a3
      :                          @95
   874: 28 15                    jump @99
      :                          @96
   876: 58 04 13                 jump @99 if t2 <=s 0
      :                          @97
   879: 64 38                    a1 = t1
   881: 01                       fallthrough
      :                          @98
   882: 82 89                    a2 = u64 [a1]
   884: 7b b9                    u64 [a4] = a2
   886: 95 bb 08                 a4 = a4 + 0x8
   889: 95 88 08                 a1 = a1 + 0x8
   892: ac ab f6                 jump @98 if a4 <u a3
      :                          @99
   895: c8 43 08                 a1 = t1 + t2
   898: 84 29 07                 a2 = t0 & 0x7
   901: 51 09 14                 jump @102 if a2 == 0
      :                          @100
   904: c8 a9 09                 a2 = a2 + a3
   907: 01                       fallthrough
      :                          @101
   908: 7c 8b                    a4 = u8 [a1]
   910: 78 ab                    u8 [a3] = a4
   912: 95 aa 01                 a3 = a3 + 0x1
   915: 95 88 01                 a1 = a1 + 0x1
   918: ac 9a f6                 jump @101 if a3 <u a2
      :                          @102
   921: 82 10 18                 ra = u64 [sp + 0x18]
   924: 82 15 10                 s0 = u64 [sp + 0x10]
   927: 82 16 08                 s1 = u64 [sp + 0x8]
   930: 95 11 20                 sp = sp + 0x20
   933: 32 00                    ret
      :                          @103
   935: 51 08 9b 00              jump @124 if a1 == 0
      :                          @104
   939: 64 79                    a2 = a0
   941: 7c 77                    a0 = u8 [a0]
   943: 51 07 91 00              jump @123 if a0 == 0
      :                          @105
   947: 51 27 ff 00 90 00        jump @125 if a0 == 255
      :                          @106
   953: 6c 7a                    a3 = sext.b a0
   955: 57 0a 09                 jump @108 if a3 <s 0
      :                          @107
   958: 33 0a                    a3 = 0
   960: 33 08                    a1 = 0
   962: 28 73                    jump @122
      :                          @108
   964: 55 27 c0 00 0d           jump @110 if a0 >=u 192
      :                          @109
   969: 33 0a 01                 a3 = 0x1
   972: 33 0b 80                 a4 = 0xffffffffffffff80
   975: 28 4a                    jump @119
      :                          @110
   977: 55 27 e0 00 0e           jump @112 if a0 >=u 224
      :                          @111
   982: 33 0a 02                 a3 = 0x2
   985: 33 0b 40 ff              a4 = 0xffffffffffffff40
   989: 28 3c                    jump @119
      :                          @112
   991: 55 27 f0 00 0e           jump @114 if a0 >=u 240
      :                          @113
   996: 33 0a 03                 a3 = 0x3
   999: 33 0b 20 ff              a4 = 0xffffffffffffff20
  1003: 28 2e                    jump @119
      :                          @114
  1005: 55 27 f8 00 0e           jump @116 if a0 >=u 248
      :                          @115
  1010: 33 0a 04                 a3 = 0x4
  1013: 33 0b 10 ff              a4 = 0xffffffffffffff10
  1017: 28 20                    jump @119
      :                          @116
  1019: 55 27 fc 00 0e           jump @118 if a0 >=u 252
      :                          @117
  1024: 33 0a 05                 a3 = 0x5
  1027: 33 0b 08 ff              a4 = 0xffffffffffffff08
  1031: 28 12                    jump @119
      :                          @118
  1033: 88 7a fe 00              a3 = a0 <u 0xfe
  1037: 33 0b 04 ff              a4 = 0xffffffffffffff04
  1041: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  1045: 85 aa 07                 a3 = a3 ^ 0x7
  1048: 01                       fallthrough
      :                          @119
  1049: ae 8a 2b                 jump @126 if a3 >=u a1
      :                          @120
  1052: 33 08                    a1 = 0
  1054: c8 b7 07                 a0 = a0 + a4
  1057: 64 ab                    a4 = a3
  1059: 01                       fallthrough
      :                          @121
  1060: c8 b9 0c                 a5 = a2 + a4
  1063: 7c cc                    a5 = u8 [a5]
  1065: 97 88 08                 a1 = a1 << 0x8
  1068: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  1071: d4 c8 08                 a1 = a1 | a5
  1074: 52 0b f2                 jump @121 if a4 != 0
      :                          @122
  1077: 8a a9 03                 i32 a2 = a3 << 0x3
  1080: cf 97 07                 a0 = a0 << a2
  1083: c8 87 07                 a0 = a0 + a1
  1086: 32 00                    ret
      :                          @123
  1088: 32 00                    ret
      :                          @124
  1090: 00                       trap
      :                          @125
  1091: 00                       trap
      :                          @126
  1092: 00                       trap
