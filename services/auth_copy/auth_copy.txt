// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 65536 bytes
// RO data = []
// RW data = []
// Instructions = 349
// Code size = 1042 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 13 00 00 00           jump @4
      :                          @2
    10: 28 74 02                 jump @72
      :                          @3 [export #0: 'refine']
    13: c8 87 07                 a0 = a0 + a1
    16: 95 77 e0                 a0 = a0 + 0xffffffffffffffe0
    19: 33 08 20                 a1 = 0x20
    22: 32 00                    ret
      :                          @4 [export #1: 'accumulate']
    24: 95 11 08 f8              sp = sp + 0xfffffffffffff808
    28: 7b 10 f0 07              u64 [sp + 0x7f0] = ra
    32: 7b 15 e8 07              u64 [sp + 0x7e8] = s0
    36: 7b 16 e0 07              u64 [sp + 0x7e0] = s1
    40: 95 11 d0 fd              sp = sp + 0xfffffffffffffdd0
    44: 33 09 08                 a2 = 0x8
    47: ac 98 7b 01              jump @49 if a1 <u a2
      :                          @5
    51: 33 09 fc                 a2 = 0xfffffffffffffffc
    54: aa 97 43 02              jump @67 if a0 == a2
      :                          @6
    58: 51 07 3f 02              jump @67 if a0 == 0
      :                          @7
    62: 95 8a f8                 a3 = a1 + 0xfffffffffffffff8
    65: 95 75 08                 s0 = a0 + 0x8
    68: 51 0a 45                 jump @17 if a3 == 0
      :                          @8
    71: 7d 58                    a1 = i8 [s0]
    73: 33 06 01                 s1 = 0x1
    76: 59 08 40                 jump @18 if a1 >=s 0
      :                          @9
    79: 84 89 ff 00              a2 = a1 & 0xff
    83: 33 06 02                 s1 = 0x2
    86: 53 29 c0 00 2d           jump @15 if a2 <u 192
      :                          @10
    91: 33 06 03                 s1 = 0x3
    94: 53 29 e0 00 25           jump @15 if a2 <u 224
      :                          @11
    99: 33 06 04                 s1 = 0x4
   102: 53 29 f0 00 1d           jump @15 if a2 <u 240
      :                          @12
   107: 33 06 05                 s1 = 0x5
   110: 53 29 f8 00 15           jump @15 if a2 <u 248
      :                          @13
   115: 33 06 06                 s1 = 0x6
   118: 53 29 fc 00 0d           jump @15 if a2 <u 252
      :                          @14
   123: 88 98 fe 00              a1 = a2 <u 0xfe
   127: 9a 86 08                 s1 = 0x8 - a1
   130: 01                       fallthrough
      :                          @15
   131: ae 6a 09                 jump @18 if a3 >=u s1
      :                          @16
   134: 28 24 01                 jump @49
      :                          @17
   137: 33 06                    s1 = 0
   139: 01                       fallthrough
      :                          @18
   140: 7b 16 08                 u64 [sp + 0x8] = s1
   143: 64 57                    a0 = s0
   145: 64 68                    a1 = s1
   147: 64 a6                    s1 = a3
   149: 50 10 02 df 02           ra = 2, jump @99
      :                          @19 [@dyn 1]
   154: 82 1a 08                 a3 = u64 [sp + 0x8]
   157: 51 07 0d 01              jump @49 if a0 == 0
      :                          @20
   161: e4 a6 07                 a0 = maxu(s1, a3)
   164: c9 a7 07                 a0 = a0 - a3
   167: 53 17 60 03 01           jump @49 if a0 <u 96
      :                          @21
   172: c8 5a 08                 a1 = a3 + s0
   175: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   178: 95 87 60                 a0 = a1 + 0x60
   181: 7b 17 08                 u64 [sp + 0x8] = a0
   184: 51 06 4c                 jump @32 if s1 == 0
      :                          @22
   187: 7d 78                    a1 = i8 [a0]
   189: 33 05 01                 s0 = 0x1
   192: 59 08 37                 jump @29 if a1 >=s 0
      :                          @23
   195: 84 89 ff 00              a2 = a1 & 0xff
   199: 33 05 02                 s0 = 0x2
   202: 53 29 c0 00 2d           jump @29 if a2 <u 192
      :                          @24
   207: 33 05 03                 s0 = 0x3
   210: 53 29 e0 00 25           jump @29 if a2 <u 224
      :                          @25
   215: 33 05 04                 s0 = 0x4
   218: 53 29 f0 00 1d           jump @29 if a2 <u 240
      :                          @26
   223: 33 05 05                 s0 = 0x5
   226: 53 29 f8 00 15           jump @29 if a2 <u 248
      :                          @27
   231: 33 05 06                 s0 = 0x6
   234: 53 29 fc 00 0d           jump @29 if a2 <u 252
      :                          @28
   239: 88 98 fe 00              a1 = a2 <u 0xfe
   243: 9a 85 08                 s0 = 0x8 - a1
   246: 01                       fallthrough
      :                          @29
   247: ac 56 83 01              jump @68 if s1 <u s0
      :                          @30
   251: 64 58                    a1 = s0
   253: 50 10 04 77 02           ra = 4, jump @99
      :                          @31 [@dyn 2]
   258: 28 07                    jump @33
      :                          @32
   260: 33 05                    s0 = 0
   262: 33 07                    a0 = 0
   264: 01                       fallthrough
      :                          @33
   265: e4 56 08                 a1 = maxu(s1, s0)
   268: c9 58 08                 a1 = a1 - s0
   271: e4 78 08                 a1 = maxu(a1, a0)
   274: c9 78 08                 a1 = a1 - a0
   277: 33 09 20                 a2 = 0x20
   280: ac 98 92 00              jump @49 if a1 <u a2
      :                          @34
   284: 82 19 08                 a2 = u64 [sp + 0x8]
   287: c8 95 05                 s0 = s0 + a2
   290: c8 57 07                 a0 = a0 + s0
   293: 95 85 e0                 s0 = a1 + 0xffffffffffffffe0
   296: 95 77 20                 a0 = a0 + 0x20
   299: 7b 17 08                 u64 [sp + 0x8] = a0
   302: 51 05 77                 jump @48 if s0 == 0
      :                          @35
   305: 7d 78                    a1 = i8 [a0]
   307: 33 06 01                 s1 = 0x1
   310: 59 08 37                 jump @42 if a1 >=s 0
      :                          @36
   313: 84 89 ff 00              a2 = a1 & 0xff
   317: 33 06 02                 s1 = 0x2
   320: 53 29 c0 00 2d           jump @42 if a2 <u 192
      :                          @37
   325: 33 06 03                 s1 = 0x3
   328: 53 29 e0 00 25           jump @42 if a2 <u 224
      :                          @38
   333: 33 06 04                 s1 = 0x4
   336: 53 29 f0 00 1d           jump @42 if a2 <u 240
      :                          @39
   341: 33 06 05                 s1 = 0x5
   344: 53 29 f8 00 15           jump @42 if a2 <u 248
      :                          @40
   349: 33 06 06                 s1 = 0x6
   352: 53 29 fc 00 0d           jump @42 if a2 <u 252
      :                          @41
   357: 88 98 fe 00              a1 = a2 <u 0xfe
   361: 9a 86 08                 s1 = 0x8 - a1
   364: 01                       fallthrough
      :                          @42
   365: ac 65 0f 01              jump @70 if s0 <u s1
      :                          @43
   369: 64 68                    a1 = s1
   371: 50 10 06 01 02           ra = 6, jump @99
      :                          @44 [@dyn 3]
   376: ae 56 32                 jump @49 if s1 >=u s0
      :                          @45
   379: 82 17 08                 a0 = u64 [sp + 0x8]
   382: c8 67 07                 a0 = a0 + s1
   385: 7c 78                    a1 = u8 [a0]
   387: 52 08 f8 00              jump @69 if a1 != 0
      :                          @46
   391: e4 65 08                 a1 = maxu(s0, s1)
   394: c9 68 08                 a1 = a1 - s1
   397: 95 75 01                 s0 = a0 + 0x1
   400: 33 07 01                 a0 = 0x1
   403: e4 78 07                 a0 = maxu(a1, a0)
   406: 33 09 02                 a2 = 0x2
   409: 95 7a ff                 a3 = a0 + 0xffffffffffffffff
   412: ae 98 2c                 jump @51 if a1 >=u a2
      :                          @47
   415: 33 06                    s1 = 0
   417: 33 07                    a0 = 0
   419: 28 74                    jump @61
      :                          @48
   421: 33 06                    s1 = 0
   423: 56 05 d4                 jump @45 if s0 >u 0
      :                          @49
   426: 33 08                    a1 = 0
   428: 33 07 00 00 01           a0 = 0x10000
   433: 01                       fallthrough
      :                          @50
   434: 95 11 30 02              sp = sp + 0x230
   438: 82 10 f0 07              ra = u64 [sp + 0x7f0]
   442: 82 15 e8 07              s0 = u64 [sp + 0x7e8]
   446: 82 16 e0 07              s1 = u64 [sp + 0x7e0]
   450: 95 11 f8 07              sp = sp + 0x7f8
   454: 32 00                    ret
      :                          @51
   456: 7d 57                    a0 = i8 [s0]
   458: 33 06 01                 s1 = 0x1
   461: 59 07 37                 jump @58 if a0 >=s 0
      :                          @52
   464: 84 77 ff 00              a0 = a0 & 0xff
   468: 33 06 02                 s1 = 0x2
   471: 53 27 c0 00 2d           jump @58 if a0 <u 192
      :                          @53
   476: 33 06 03                 s1 = 0x3
   479: 53 27 e0 00 25           jump @58 if a0 <u 224
      :                          @54
   484: 33 06 04                 s1 = 0x4
   487: 53 27 f0 00 1d           jump @58 if a0 <u 240
      :                          @55
   492: 33 06 05                 s1 = 0x5
   495: 53 27 f8 00 15           jump @58 if a0 <u 248
      :                          @56
   500: 33 06 06                 s1 = 0x6
   503: 53 27 fc 00 0d           jump @58 if a0 <u 252
      :                          @57
   508: 88 77 fe 00              a0 = a0 <u 0xfe
   512: 9a 76 08                 s1 = 0x8 - a0
   515: 01                       fallthrough
      :                          @58
   516: 7b 1a 08                 u64 [sp + 0x8] = a3
   519: ac 6a 76                 jump @71 if a3 <u s1
      :                          @59
   522: 64 57                    a0 = s0
   524: 64 68                    a1 = s1
   526: 50 10 08 66 01           ra = 8, jump @99
      :                          @60 [@dyn 4]
   531: 82 1a 08                 a3 = u64 [sp + 0x8]
   534: 01                       fallthrough
      :                          @61
   535: e4 6a 08                 a1 = maxu(a3, s1)
   538: c9 68 08                 a1 = a1 - s1
   541: e6 78 07                 a0 = minu(a1, a0)
   544: 52 17 20 5b              jump @69 if a0 != 32
      :                          @62
   548: c8 65 05                 s0 = s0 + s1
   551: 7b 15 08                 u64 [sp + 0x8] = s0
   554: 33 09 00 0a              a2 = 0xa00
   558: 95 17 10                 a0 = sp + 0x10
   561: 95 16 10                 s1 = sp + 0x10
   564: 33 08                    a1 = 0
   566: 50 10 0a ec 00           ra = 10, jump @88
      :                          @63 [@dyn 5]
   571: 33 05 50                 s0 = 0x50
   574: 01                       fallthrough
      :                          @64
   575: 33 09 20                 a2 = 0x20
   578: 64 67                    a0 = s1
   580: 82 18 08                 a1 = u64 [sp + 0x8]
   583: 33 00 0c                 ra = 0xc
   586: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   589: 7b 10 18                 u64 [sp + 0x18] = ra
   592: 7b 15 10                 u64 [sp + 0x10] = s0
   595: 7b 16 08                 u64 [sp + 0x8] = s1
   598: 28 31                    jump @73
      :                          @65 [@dyn 6]
   600: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
   603: 95 66 20                 s1 = s1 + 0x20
   606: 52 05 e1                 jump @64 if s0 != 0
      :                          @66
   609: 95 18 10                 a1 = sp + 0x10
   612: 33 07                    a0 = 0
   614: 0a 06                    ecalli 6 // 'assign'
   616: 33 07 01                 a0 = 0x1
   619: 95 18 10                 a1 = sp + 0x10
   622: 0a 06                    ecalli 6 // 'assign'
   624: 33 08 20                 a1 = 0x20
   627: 82 17 08                 a0 = u64 [sp + 0x8]
   630: 28 3c ff                 jump @50
      :                          @67
   633: 00                       trap
      :                          @68
   634: 00                       trap
      :                          @69
   635: 00                       trap
      :                          @70
   636: 00                       trap
      :                          @71
   637: 00                       trap
      :                          @72 [export #2: 'on_transfer']
   638: 33 07 00 00 01           a0 = 0x10000
   643: 33 08                    a1 = 0
   645: 32 00                    ret
      :                          @73
   647: 8d 7a                    i32 a3 = -a0
   649: 84 a2 07                 t0 = a3 & 0x7
   652: c8 27 0b                 a4 = a0 + t0
   655: 51 02 15                 jump @76 if t0 == 0
      :                          @74
   658: 64 8c                    a5 = a1
   660: 64 75                    s0 = a0
   662: 01                       fallthrough
      :                          @75
   663: 7c ca                    a3 = u8 [a5]
   665: 78 5a                    u8 [s0] = a3
   667: 95 55 01                 s0 = s0 + 0x1
   670: 95 cc 01                 a5 = a5 + 0x1
   673: ac b5 f6                 jump @75 if s0 <u a4
      :                          @76
   676: c8 28 03                 t1 = a1 + t0
   679: c9 29 02                 t0 = a2 - t0
   682: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
   685: 84 38 07                 a1 = t1 & 0x7
   688: c8 4b 0a                 a3 = a4 + t2
   691: 51 08 34                 jump @81 if a1 == 0
      :                          @77
   694: 58 04 44                 jump @84 if t2 <=s 0
      :                          @78
   697: 97 38 03                 a1 = t1 << 0x3
   700: 84 80 38                 ra = a1 & 0x38
   703: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
   706: 82 c5                    s0 = u64 [a5]
   708: 8d 88                    i32 a1 = -a1
   710: 84 88 38                 a1 = a1 & 0x38
   713: 95 cc 08                 a5 = a5 + 0x8
   716: 01                       fallthrough
      :                          @79
   717: 82 c6                    s1 = u64 [a5]
   719: d0 05 05                 s0 = s0 >> ra
   722: cf 86 09                 a2 = s1 << a1
   725: d4 59 09                 a2 = a2 | s0
   728: 7b b9                    u64 [a4] = a2
   730: 95 bb 08                 a4 = a4 + 0x8
   733: 95 cc 08                 a5 = a5 + 0x8
   736: 64 65                    s0 = s1
   738: ac ab eb                 jump @79 if a4 <u a3
      :                          @80
   741: 28 15                    jump @84
      :                          @81
   743: 58 04 13                 jump @84 if t2 <=s 0
      :                          @82
   746: 64 38                    a1 = t1
   748: 01                       fallthrough
      :                          @83
   749: 82 89                    a2 = u64 [a1]
   751: 7b b9                    u64 [a4] = a2
   753: 95 bb 08                 a4 = a4 + 0x8
   756: 95 88 08                 a1 = a1 + 0x8
   759: ac ab f6                 jump @83 if a4 <u a3
      :                          @84
   762: c8 43 08                 a1 = t1 + t2
   765: 84 29 07                 a2 = t0 & 0x7
   768: 51 09 14                 jump @87 if a2 == 0
      :                          @85
   771: c8 a9 09                 a2 = a2 + a3
   774: 01                       fallthrough
      :                          @86
   775: 7c 8b                    a4 = u8 [a1]
   777: 78 ab                    u8 [a3] = a4
   779: 95 aa 01                 a3 = a3 + 0x1
   782: 95 88 01                 a1 = a1 + 0x1
   785: ac 9a f6                 jump @86 if a3 <u a2
      :                          @87
   788: 82 10 18                 ra = u64 [sp + 0x18]
   791: 82 15 10                 s0 = u64 [sp + 0x10]
   794: 82 16 08                 s1 = u64 [sp + 0x8]
   797: 95 11 20                 sp = sp + 0x20
   800: 32 00                    ret
      :                          @88
   802: 8d 7a                    i32 a3 = -a0
   804: 84 aa 07                 a3 = a3 & 0x7
   807: c8 a7 0b                 a4 = a0 + a3
   810: 51 0a 0e                 jump @91 if a3 == 0
      :                          @89
   813: 64 7c                    a5 = a0
   815: 01                       fallthrough
      :                          @90
   816: 78 c8                    u8 [a5] = a1
   818: 95 cc 01                 a5 = a5 + 0x1
   821: ac bc fb                 jump @90 if a5 <u a4
      :                          @91
   824: c9 a9 03                 t1 = a2 - a3
   827: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
   830: c8 cb 0a                 a3 = a4 + a5
   833: 58 0c 1d                 jump @94 if a5 <=s 0
      :                          @92
   836: 84 82 ff 00              t0 = a1 & 0xff
   840: 14 09 01 01 01 01 01 01 01 01 a2 = 0x101010101010101
   850: ca 92 0c                 a5 = t0 * a2
   853: 01                       fallthrough
      :                          @93
   854: 7b bc                    u64 [a4] = a5
   856: 95 bb 08                 a4 = a4 + 0x8
   859: ac ab fb                 jump @93 if a4 <u a3
      :                          @94
   862: 84 39 07                 a2 = t1 & 0x7
   865: 52 09 05                 jump @96 if a2 != 0
      :                          @95
   868: 28 0e                    jump @98
      :                          @96
   870: c8 a9 09                 a2 = a2 + a3
   873: 01                       fallthrough
      :                          @97
   874: 78 a8                    u8 [a3] = a1
   876: 95 aa 01                 a3 = a3 + 0x1
   879: ac 9a fb                 jump @97 if a3 <u a2
      :                          @98
   882: 32 00                    ret
      :                          @99
   884: 51 08 9b 00              jump @120 if a1 == 0
      :                          @100
   888: 64 79                    a2 = a0
   890: 7c 77                    a0 = u8 [a0]
   892: 51 07 91 00              jump @119 if a0 == 0
      :                          @101
   896: 51 27 ff 00 90 00        jump @121 if a0 == 255
      :                          @102
   902: 6c 7a                    a3 = sext.b a0
   904: 57 0a 09                 jump @104 if a3 <s 0
      :                          @103
   907: 33 0a                    a3 = 0
   909: 33 08                    a1 = 0
   911: 28 73                    jump @118
      :                          @104
   913: 55 27 c0 00 0d           jump @106 if a0 >=u 192
      :                          @105
   918: 33 0a 01                 a3 = 0x1
   921: 33 0b 80                 a4 = 0xffffffffffffff80
   924: 28 4a                    jump @115
      :                          @106
   926: 55 27 e0 00 0e           jump @108 if a0 >=u 224
      :                          @107
   931: 33 0a 02                 a3 = 0x2
   934: 33 0b 40 ff              a4 = 0xffffffffffffff40
   938: 28 3c                    jump @115
      :                          @108
   940: 55 27 f0 00 0e           jump @110 if a0 >=u 240
      :                          @109
   945: 33 0a 03                 a3 = 0x3
   948: 33 0b 20 ff              a4 = 0xffffffffffffff20
   952: 28 2e                    jump @115
      :                          @110
   954: 55 27 f8 00 0e           jump @112 if a0 >=u 248
      :                          @111
   959: 33 0a 04                 a3 = 0x4
   962: 33 0b 10 ff              a4 = 0xffffffffffffff10
   966: 28 20                    jump @115
      :                          @112
   968: 55 27 fc 00 0e           jump @114 if a0 >=u 252
      :                          @113
   973: 33 0a 05                 a3 = 0x5
   976: 33 0b 08 ff              a4 = 0xffffffffffffff08
   980: 28 12                    jump @115
      :                          @114
   982: 88 7a fe 00              a3 = a0 <u 0xfe
   986: 33 0b 04 ff              a4 = 0xffffffffffffff04
   990: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
   994: 85 aa 07                 a3 = a3 ^ 0x7
   997: 01                       fallthrough
      :                          @115
   998: ae 8a 2b                 jump @122 if a3 >=u a1
      :                          @116
  1001: 33 08                    a1 = 0
  1003: c8 b7 07                 a0 = a0 + a4
  1006: 64 ab                    a4 = a3
  1008: 01                       fallthrough
      :                          @117
  1009: c8 b9 0c                 a5 = a2 + a4
  1012: 7c cc                    a5 = u8 [a5]
  1014: 97 88 08                 a1 = a1 << 0x8
  1017: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  1020: d4 c8 08                 a1 = a1 | a5
  1023: 52 0b f2                 jump @117 if a4 != 0
      :                          @118
  1026: 8a a9 03                 i32 a2 = a3 << 0x3
  1029: cf 97 07                 a0 = a0 << a2
  1032: c8 87 07                 a0 = a0 + a1
  1035: 32 00                    ret
      :                          @119
  1037: 32 00                    ret
      :                          @120
  1039: 00                       trap
      :                          @121
  1040: 00                       trap
      :                          @122
  1041: 00                       trap
