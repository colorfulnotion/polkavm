// RO data = 328/328 bytes
// RW data = 8/65568 bytes
// Stack size = 65536 bytes
// RO data = [28, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 112, 97, 114, 115, 101, 95, 97, 99, 99, 117, 109, 117, 108, 97, 116, 101, 95, 97, 114, 103, 115, 32, 115, 116, 97, 114, 116, 95, 97, 100, 100, 114, 101, 115, 115, 61, 32, 108, 101, 110, 103, 116, 104, 61, 0, 0, 0, 0, 248, 0, 1, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 28, 1, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0]
// RW data = [75, 89, 134, 56, 214, 197, 109, 52]
// Instructions = 1270
// Code size = 3738 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 13 00 00 00           jump @4
      :                          @2
    10: 28 eb 03                 jump @103
      :                          @3 [export #0: 'refine']
    13: c8 87 07                 a0 = a0 + a1
    16: 95 77 e0                 a0 = a0 + 0xffffffffffffffe0
    19: 33 08 20                 a1 = 0x20
    22: 32 00                    ret
      :                          @4 [export #1: 'accumulate']
    24: 95 11 08 f8              sp = sp + 0xfffffffffffff808
    28: 7b 10 f0 07              u64 [sp + 0x7f0] = ra
    32: 7b 15 e8 07              u64 [sp + 0x7e8] = s0
    36: 7b 16 e0 07              u64 [sp + 0x7e0] = s1
    40: 95 11 78 fd              sp = sp + 0xfffffffffffffd78
    44: 95 12 ff 07              t0 = sp + 0x7ff
    48: 95 22 19 02              t0 = t0 + 0x219
    52: 7b 27                    u64 [t0] = a0
    54: 7b 28 08                 u64 [t0 + 0x8] = a1
    57: 51 08 f4 02              jump @79 if a1 == 0
      :                          @5
    61: 7b 22 10                 u64 [t0 + 0x10] = t0
    64: 33 0a 30                 a3 = 0x30
    67: 7b 2a 18                 u64 [t0 + 0x18] = a3
    70: 95 19 ff 07              a2 = sp + 0x7ff
    74: 95 99 21 02              a2 = a2 + 0x221
    78: 7b 29 20                 u64 [t0 + 0x20] = a2
    81: 7b 2a 28                 u64 [t0 + 0x28] = a3
    84: 33 09 28 01 01           a2 = 0x10128
    89: 7b 19 18                 u64 [sp + 0x18] = a2
    92: 49 11 20 02              u64 [sp + 32] = 0x2
    96: 49 11 38                 u64 [sp + 56] = 0
    99: 95 19 ff 07              a2 = sp + 0x7ff
   103: 95 99 29 02              a2 = a2 + 0x229
   107: 7b 19 28                 u64 [sp + 0x28] = a2
   110: 49 11 30 02              u64 [sp + 48] = 0x2
   114: 33 09 10 00 03           a2 = 0x30010
   119: 33 05 00 00 01           s0 = 0x10000
   124: c8 59 09                 a2 = a2 + s0
   127: 01                       fallthrough
      :                          @6
   128: 82 9a                    a3 = u64 [a2]
   130: 95 a6 58                 s1 = a3 + 0x58
   133: ac a6 6a 03              jump @97 if s1 <u a3
      :                          @7
   137: 95 6b 01                 a4 = s1 + 0x1
   140: 88 bc 01                 a5 = a4 <u 0x1
   143: d8 b5 0b                 a4 = s0 <u a4
   146: d4 cb 0b                 a4 = a4 | a5
   149: 52 0b 5a 03              jump @97 if a4 != 0
      :                          @8
   153: 82 9b                    a4 = u64 [a2]
   155: ab ab e5                 jump @6 if a4 != a3
      :                          @9
   158: 7b 96                    u64 [a2] = s1
   160: 33 0c                    a5 = 0
   162: 7b 17 08                 u64 [sp + 0x8] = a0
   165: 7b 18 10                 u64 [sp + 0x10] = a1
   168: 33 07 10 00 04           a0 = 0x40010
   173: c9 67 07                 a0 = a0 - s1
   176: 49 12 30 58              u64 [t0 + 48] = 0x58
   180: 7b 27 38                 u64 [t0 + 0x38] = a0
   183: 49 12 40                 u64 [t0 + 64] = 0
   186: 95 17 ff 07              a0 = sp + 0x7ff
   190: 95 77 49 02              a0 = a0 + 0x249
   194: 95 18 18                 a1 = sp + 0x18
   197: 95 15 ff 07              s0 = sp + 0x7ff
   201: 95 55 19 02              s0 = s0 + 0x219
   205: 50 10 02 4c 0b           ra = 2, jump @275
      :                          @10 [@dyn 1]
   210: 52 07 1e 03              jump @98 if a0 != 0
      :                          @11
   214: 82 56 38                 s1 = u64 [s0 + 0x38]
   217: 82 5b 40                 a4 = u64 [s0 + 0x40]
   220: 82 55 30                 s0 = u64 [s0 + 0x30]
   223: 33 07 02                 a0 = 0x2
   226: 33 08                    a1 = 0
   228: 33 09                    a2 = 0
   230: 64 6a                    a3 = s1
   232: 33 00 04                 ra = 0x4
   235: 0a 64                    ecalli 100 // 'log'
   237: 01                       fallthrough
      :                          @12 [@dyn 2]
   238: 95 58 ff ff fe           a1 = s0 + 0xfffffffffffeffff
   243: 53 38 00 00 ff 27        jump @18 if a1 <u 4294901760
      :                          @13
   249: 33 07 10 00 03           a0 = 0x30010
   254: 95 77 00 00 01           a0 = a0 + 0x10000
   259: 01                       fallthrough
      :                          @14
   260: 82 78                    a1 = u64 [a0]
   262: c9 87 09                 a2 = a0 - a1
   265: ab 69 11                 jump @18 if a2 != s1
      :                          @15
   268: c9 58 09                 a2 = a1 - s0
   271: 01                       fallthrough
      :                          @16
   272: 82 7a                    a3 = u64 [a0]
   274: ab 8a f2                 jump @14 if a3 != a1
      :                          @17
   277: 7b 79                    u64 [a0] = a2
   279: 33 0b                    a4 = 0
   281: 01                       fallthrough
      :                          @18
   282: 82 17 08                 a0 = u64 [sp + 0x8]
   285: 7d 78                    a1 = i8 [a0]
   287: 33 06 01                 s1 = 0x1
   290: 82 19 10                 a2 = u64 [sp + 0x10]
   293: 59 08 37                 jump @25 if a1 >=s 0
      :                          @19
   296: 84 8a ff 00              a3 = a1 & 0xff
   300: 33 06 02                 s1 = 0x2
   303: 53 2a c0 00 2d           jump @25 if a3 <u 192
      :                          @20
   308: 33 06 03                 s1 = 0x3
   311: 53 2a e0 00 25           jump @25 if a3 <u 224
      :                          @21
   316: 33 06 04                 s1 = 0x4
   319: 53 2a f0 00 1d           jump @25 if a3 <u 240
      :                          @22
   324: 33 06 05                 s1 = 0x5
   327: 53 2a f8 00 15           jump @25 if a3 <u 248
      :                          @23
   332: 33 06 06                 s1 = 0x6
   335: 53 2a fc 00 0d           jump @25 if a3 <u 252
      :                          @24
   340: 88 a8 fe 00              a1 = a3 <u 0xfe
   344: 9a 86 08                 s1 = 0x8 - a1
   347: 01                       fallthrough
      :                          @25
   348: ac 69 d1 01              jump @79 if a2 <u s1
      :                          @26
   352: 64 68                    a1 = s1
   354: 50 10 06 9a 0c           ra = 6, jump @313
      :                          @27 [@dyn 3]
   359: 82 17 08                 a0 = u64 [sp + 0x8]
   362: 82 15 10                 s0 = u64 [sp + 0x10]
   365: aa 65 c0 01              jump @79 if s0 == s1
      :                          @28
   369: c8 67 07                 a0 = a0 + s1
   372: 7d 78                    a1 = i8 [a0]
   374: c9 65 05                 s0 = s0 - s1
   377: 33 06 01                 s1 = 0x1
   380: 59 08 37                 jump @35 if a1 >=s 0
      :                          @29
   383: 84 89 ff 00              a2 = a1 & 0xff
   387: 33 06 02                 s1 = 0x2
   390: 53 29 c0 00 2d           jump @35 if a2 <u 192
      :                          @30
   395: 33 06 03                 s1 = 0x3
   398: 53 29 e0 00 25           jump @35 if a2 <u 224
      :                          @31
   403: 33 06 04                 s1 = 0x4
   406: 53 29 f0 00 1d           jump @35 if a2 <u 240
      :                          @32
   411: 33 06 05                 s1 = 0x5
   414: 53 29 f8 00 15           jump @35 if a2 <u 248
      :                          @33
   419: 33 06 06                 s1 = 0x6
   422: 53 29 fc 00 0d           jump @35 if a2 <u 252
      :                          @34
   427: 88 98 fe 00              a1 = a2 <u 0xfe
   431: 9a 86 08                 s1 = 0x8 - a1
   434: 01                       fallthrough
      :                          @35
   435: ac 65 7a 01              jump @79 if s0 <u s1
      :                          @36
   439: 64 68                    a1 = s1
   441: 7b 17 10                 u64 [sp + 0x10] = a0
   444: 50 10 08 40 0c           ra = 8, jump @313
      :                          @37 [@dyn 4]
   449: 82 17 10                 a0 = u64 [sp + 0x10]
   452: c8 67 07                 a0 = a0 + s1
   455: c9 65 0a                 a3 = s0 - s1
   458: 7b 1a 10                 u64 [sp + 0x10] = a3
   461: ab 65 07                 jump @39 if s0 != s1
      :                          @38
   464: 33 06                    s1 = 0
   466: 28 42                    jump @47
      :                          @39
   468: 7d 78                    a1 = i8 [a0]
   470: 33 06 01                 s1 = 0x1
   473: 59 08 37                 jump @46 if a1 >=s 0
      :                          @40
   476: 84 89 ff 00              a2 = a1 & 0xff
   480: 33 06 02                 s1 = 0x2
   483: 53 29 c0 00 2d           jump @46 if a2 <u 192
      :                          @41
   488: 33 06 03                 s1 = 0x3
   491: 53 29 e0 00 25           jump @46 if a2 <u 224
      :                          @42
   496: 33 06 04                 s1 = 0x4
   499: 53 29 f0 00 1d           jump @46 if a2 <u 240
      :                          @43
   504: 33 06 05                 s1 = 0x5
   507: 53 29 f8 00 15           jump @46 if a2 <u 248
      :                          @44
   512: 33 06 06                 s1 = 0x6
   515: 53 29 fc 00 0d           jump @46 if a2 <u 252
      :                          @45
   520: 88 98 fe 00              a1 = a2 <u 0xfe
   524: 9a 86 08                 s1 = 0x8 - a1
   527: 01                       fallthrough
      :                          @46
   528: ac 6a 1d 01              jump @79 if a3 <u s1
      :                          @47
   532: 64 68                    a1 = s1
   534: 64 75                    s0 = a0
   536: 50 10 0a e4 0b           ra = 10, jump @313
      :                          @48 [@dyn 5]
   541: 51 07 10 01              jump @79 if a0 == 0
      :                          @49
   545: 82 17 10                 a0 = u64 [sp + 0x10]
   548: e4 67 07                 a0 = maxu(a0, s1)
   551: c9 67 07                 a0 = a0 - s1
   554: 53 17 60 03 01           jump @79 if a0 <u 96
      :                          @50
   559: c8 56 08                 a1 = s1 + s0
   562: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   565: 95 87 60                 a0 = a1 + 0x60
   568: 7b 17 10                 u64 [sp + 0x10] = a0
   571: 51 06 4c                 jump @61 if s1 == 0
      :                          @51
   574: 7d 78                    a1 = i8 [a0]
   576: 33 05 01                 s0 = 0x1
   579: 59 08 37                 jump @58 if a1 >=s 0
      :                          @52
   582: 84 89 ff 00              a2 = a1 & 0xff
   586: 33 05 02                 s0 = 0x2
   589: 53 29 c0 00 2d           jump @58 if a2 <u 192
      :                          @53
   594: 33 05 03                 s0 = 0x3
   597: 53 29 e0 00 25           jump @58 if a2 <u 224
      :                          @54
   602: 33 05 04                 s0 = 0x4
   605: 53 29 f0 00 1d           jump @58 if a2 <u 240
      :                          @55
   610: 33 05 05                 s0 = 0x5
   613: 53 29 f8 00 15           jump @58 if a2 <u 248
      :                          @56
   618: 33 05 06                 s0 = 0x6
   621: 53 29 fc 00 0d           jump @58 if a2 <u 252
      :                          @57
   626: 88 98 fe 00              a1 = a2 <u 0xfe
   630: 9a 85 08                 s0 = 0x8 - a1
   633: 01                       fallthrough
      :                          @58
   634: ac 56 77 01              jump @99 if s1 <u s0
      :                          @59
   638: 64 58                    a1 = s0
   640: 50 10 0c 7c 0b           ra = 12, jump @313
      :                          @60 [@dyn 6]
   645: 28 07                    jump @62
      :                          @61
   647: 33 05                    s0 = 0
   649: 33 07                    a0 = 0
   651: 01                       fallthrough
      :                          @62
   652: e4 56 08                 a1 = maxu(s1, s0)
   655: c9 58 08                 a1 = a1 - s0
   658: e4 78 08                 a1 = maxu(a1, a0)
   661: c9 78 08                 a1 = a1 - a0
   664: 33 09 20                 a2 = 0x20
   667: ac 98 92 00              jump @79 if a1 <u a2
      :                          @63
   671: 82 19 10                 a2 = u64 [sp + 0x10]
   674: c8 95 05                 s0 = s0 + a2
   677: c8 57 07                 a0 = a0 + s0
   680: 95 85 e0                 s0 = a1 + 0xffffffffffffffe0
   683: 95 77 20                 a0 = a0 + 0x20
   686: 7b 17 10                 u64 [sp + 0x10] = a0
   689: 51 05 4c                 jump @74 if s0 == 0
      :                          @64
   692: 7d 78                    a1 = i8 [a0]
   694: 33 06 01                 s1 = 0x1
   697: 59 08 37                 jump @71 if a1 >=s 0
      :                          @65
   700: 84 89 ff 00              a2 = a1 & 0xff
   704: 33 06 02                 s1 = 0x2
   707: 53 29 c0 00 2d           jump @71 if a2 <u 192
      :                          @66
   712: 33 06 03                 s1 = 0x3
   715: 53 29 e0 00 25           jump @71 if a2 <u 224
      :                          @67
   720: 33 06 04                 s1 = 0x4
   723: 53 29 f0 00 1d           jump @71 if a2 <u 240
      :                          @68
   728: 33 06 05                 s1 = 0x5
   731: 53 29 f8 00 15           jump @71 if a2 <u 248
      :                          @69
   736: 33 06 06                 s1 = 0x6
   739: 53 29 fc 00 0d           jump @71 if a2 <u 252
      :                          @70
   744: 88 98 fe 00              a1 = a2 <u 0xfe
   748: 9a 86 08                 s1 = 0x8 - a1
   751: 01                       fallthrough
      :                          @71
   752: ac 65 03 01              jump @101 if s0 <u s1
      :                          @72
   756: 64 68                    a1 = s1
   758: 50 10 0e 06 0b           ra = 14, jump @313
      :                          @73 [@dyn 7]
   763: 28 05                    jump @75
      :                          @74
   765: 33 06                    s1 = 0
   767: 01                       fallthrough
      :                          @75
   768: ae 56 2d                 jump @79 if s1 >=u s0
      :                          @76
   771: 82 17 10                 a0 = u64 [sp + 0x10]
   774: c8 67 07                 a0 = a0 + s1
   777: 7c 78                    a1 = u8 [a0]
   779: 52 08 e7 00              jump @100 if a1 != 0
      :                          @77
   783: e4 65 08                 a1 = maxu(s0, s1)
   786: c9 68 08                 a1 = a1 - s1
   789: 95 75 01                 s0 = a0 + 0x1
   792: 33 07 01                 a0 = 0x1
   795: e4 78 07                 a0 = maxu(a1, a0)
   798: 33 09 02                 a2 = 0x2
   801: 95 7a ff                 a3 = a0 + 0xffffffffffffffff
   804: ae 98 29                 jump @81 if a1 >=u a2
      :                          @78
   807: 33 06                    s1 = 0
   809: 33 07                    a0 = 0
   811: 28 71                    jump @91
      :                          @79
   813: 33 08                    a1 = 0
   815: 33 05 00 00 01           s0 = 0x10000
   820: 01                       fallthrough
      :                          @80
   821: 64 57                    a0 = s0
   823: 95 11 88 02              sp = sp + 0x288
   827: 82 10 f0 07              ra = u64 [sp + 0x7f0]
   831: 82 15 e8 07              s0 = u64 [sp + 0x7e8]
   835: 82 16 e0 07              s1 = u64 [sp + 0x7e0]
   839: 95 11 f8 07              sp = sp + 0x7f8
   843: 32 00                    ret
      :                          @81
   845: 7d 57                    a0 = i8 [s0]
   847: 33 06 01                 s1 = 0x1
   850: 59 07 37                 jump @88 if a0 >=s 0
      :                          @82
   853: 84 77 ff 00              a0 = a0 & 0xff
   857: 33 06 02                 s1 = 0x2
   860: 53 27 c0 00 2d           jump @88 if a0 <u 192
      :                          @83
   865: 33 06 03                 s1 = 0x3
   868: 53 27 e0 00 25           jump @88 if a0 <u 224
      :                          @84
   873: 33 06 04                 s1 = 0x4
   876: 53 27 f0 00 1d           jump @88 if a0 <u 240
      :                          @85
   881: 33 06 05                 s1 = 0x5
   884: 53 27 f8 00 15           jump @88 if a0 <u 248
      :                          @86
   889: 33 06 06                 s1 = 0x6
   892: 53 27 fc 00 0d           jump @88 if a0 <u 252
      :                          @87
   897: 88 77 fe 00              a0 = a0 <u 0xfe
   901: 9a 76 08                 s1 = 0x8 - a0
   904: 01                       fallthrough
      :                          @88
   905: 7b 1a 10                 u64 [sp + 0x10] = a3
   908: ac 6a 68                 jump @102 if a3 <u s1
      :                          @89
   911: 64 57                    a0 = s0
   913: 64 68                    a1 = s1
   915: 50 10 10 69 0a           ra = 16, jump @313
      :                          @90 [@dyn 8]
   920: 82 1a 10                 a3 = u64 [sp + 0x10]
   923: 01                       fallthrough
      :                          @91
   924: e4 6a 08                 a1 = maxu(a3, s1)
   927: c9 68 08                 a1 = a1 - s1
   930: e6 78 07                 a0 = minu(a1, a0)
   933: 52 17 20 4d              jump @100 if a0 != 32
      :                          @92
   937: c8 65 05                 s0 = s0 + s1
   940: 33 09 00 0a              a2 = 0xa00
   944: 95 17 18                 a0 = sp + 0x18
   947: 95 16 18                 s1 = sp + 0x18
   950: 33 08                    a1 = 0
   952: 50 10 12 d1 04           ra = 18, jump @207
      :                          @93 [@dyn 9]
   957: 33 07 50                 a0 = 0x50
   960: 01                       fallthrough
      :                          @94
   961: 7b 17 10                 u64 [sp + 0x10] = a0
   964: 33 09 20                 a2 = 0x20
   967: 64 67                    a0 = s1
   969: 64 58                    a1 = s0
   971: 50 10 14 0c 04           ra = 20, jump @189
      :                          @95 [@dyn 10]
   976: 82 17 10                 a0 = u64 [sp + 0x10]
   979: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   982: 95 66 20                 s1 = s1 + 0x20
   985: 52 07 e8                 jump @94 if a0 != 0
      :                          @96
   988: 95 18 18                 a1 = sp + 0x18
   991: 0a 06                    ecalli 6 // 'assign'
   993: 33 07 01                 a0 = 0x1
   996: 95 18 18                 a1 = sp + 0x18
   999: 0a 06                    ecalli 6 // 'assign'
  1001: 33 08 20                 a1 = 0x20
  1004: 28 49 ff                 jump @80
      :                          @97
  1007: 00                       trap
      :                          @98
  1008: 00                       trap
      :                          @99
  1009: 00                       trap
      :                          @100
  1010: 00                       trap
      :                          @101
  1011: 00                       trap
      :                          @102
  1012: 00                       trap
      :                          @103 [export #2: 'on_transfer']
  1013: 33 07 00 00 01           a0 = 0x10000
  1018: 33 08                    a1 = 0
  1020: 32 00                    ret
      :                          @104
  1022: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1025: 7b 10 40                 u64 [sp + 0x40] = ra
  1028: 7b 15 38                 u64 [sp + 0x38] = s0
  1031: 7b 16 30                 u64 [sp + 0x30] = s1
  1034: c8 89 09                 a2 = a2 + a1
  1037: ac 89 52                 jump @112 if a2 <u a1
      :                          @105
  1040: 64 75                    s0 = a0
  1042: 82 77                    a0 = u64 [a0]
  1044: 97 78 01                 a1 = a0 << 0x1
  1047: 33 0a 08                 a3 = 0x8
  1050: e4 a9 09                 a2 = maxu(a2, a3)
  1053: e4 98 06                 s1 = maxu(a1, a2)
  1056: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1059: 98 88 3f                 a1 = a1 >> 0x3f
  1062: 51 07 12                 jump @107 if a0 == 0
      :                          @106
  1065: 82 59 08                 a2 = u64 [s0 + 0x8]
  1068: 7b 19 18                 u64 [sp + 0x18] = a2
  1071: 49 11 20 01              u64 [sp + 32] = 0x1
  1075: 7b 17 28                 u64 [sp + 0x28] = a0
  1078: 28 06                    jump @108
      :                          @107
  1080: 49 11 20                 u64 [sp + 32] = 0
  1083: 01                       fallthrough
      :                          @108
  1084: 64 17                    a0 = sp
  1086: 95 1a 18                 a3 = sp + 0x18
  1089: 64 69                    a2 = s1
  1091: 50 10 16 32              ra = 22, jump @116
      :                          @109 [@dyn 11]
  1095: 82 18                    a1 = u64 [sp]
  1097: 82 17 08                 a0 = u64 [sp + 0x8]
  1100: 51 08 14                 jump @113 if a1 == 0
      :                          @110
  1103: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1113: aa 87 0d                 jump @114 if a0 == a1
      :                          @111
  1116: 52 07 18                 jump @115 if a0 != 0
      :                          @112
  1119: 00                       trap
      :                          @113
  1120: 7b 57 08                 u64 [s0 + 0x8] = a0
  1123: 7b 56                    u64 [s0] = s1
  1125: 01                       fallthrough
      :                          @114
  1126: 82 10 40                 ra = u64 [sp + 0x40]
  1129: 82 15 38                 s0 = u64 [sp + 0x38]
  1132: 82 16 30                 s1 = u64 [sp + 0x30]
  1135: 95 11 48                 sp = sp + 0x48
  1138: 32 00                    ret
      :                          @115
  1140: 00                       trap
      :                          @116
  1141: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  1144: 7b 10 30                 u64 [sp + 0x30] = ra
  1147: 7b 15 28                 u64 [sp + 0x28] = s0
  1150: 7b 16 20                 u64 [sp + 0x20] = s1
  1153: 64 95                    s0 = a2
  1155: 64 72                    t0 = a0
  1157: 51 08 79                 jump @126 if a1 == 0
      :                          @117
  1160: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1163: 51 07 7c                 jump @127 if a0 == 0
      :                          @118
  1166: 82 a9 10                 a2 = u64 [a3 + 0x10]
  1169: 51 09 aa 00              jump @134 if a2 == 0
      :                          @119
  1173: 82 a8                    a1 = u64 [a3]
  1175: 33 06 10 00 03           s1 = 0x30010
  1180: 33 03 00 00 01           t1 = 0x10000
  1185: c8 36 06                 s1 = s1 + t1
  1188: 01                       fallthrough
      :                          @120
  1189: 82 6a                    a3 = u64 [s1]
  1191: c8 5a 07                 a0 = a3 + s0
  1194: ac a7 cf 00              jump @140 if a0 <u a3
      :                          @121
  1198: 95 7b 01                 a4 = a0 + 0x1
  1201: 88 bc 01                 a5 = a4 <u 0x1
  1204: d8 b3 0b                 a4 = t1 <u a4
  1207: d4 cb 0b                 a4 = a4 | a5
  1210: 52 0b bf 00              jump @140 if a4 != 0
      :                          @122
  1214: 82 6b                    a4 = u64 [s1]
  1216: ab ab e5                 jump @120 if a4 != a3
      :                          @123
  1219: 7b 67                    u64 [s1] = a0
  1221: 33 0c                    a5 = 0
  1223: 7b 12 18                 u64 [sp + 0x18] = t0
  1226: 33 0a 10 00 03           a3 = 0x30010
  1231: 33 0b 00 00 01           a4 = 0x10000
  1236: 7b 1a                    u64 [sp] = a3
  1238: c8 ba 0a                 a3 = a3 + a4
  1241: c9 7a 07                 a0 = a3 - a0
  1244: 7b 17 10                 u64 [sp + 0x10] = a0
  1247: 7b 18 08                 u64 [sp + 0x8] = a1
  1250: 64 96                    s1 = a2
  1252: 50 10 18 f3 02           ra = 24, jump @189
      :                          @124 [@dyn 12]
  1257: 54 36 00 00 01 98 00     jump @141 if s1 <=u 65536
      :                          @125
  1264: 82 12 18                 t0 = u64 [sp + 0x18]
  1267: 82 18 10                 a1 = u64 [sp + 0x10]
  1270: 33 07                    a0 = 0
  1272: 7b 28 08                 u64 [t0 + 0x8] = a1
  1275: 28 b5 00                 jump @147
      :                          @126
  1278: 49 12 08                 u64 [t0 + 8] = 0
  1281: 33 07 01                 a0 = 0x1
  1284: 28 ac 00                 jump @147
      :                          @127
  1287: 33 09 10 00 03           a2 = 0x30010
  1292: 33 07 00 00 01           a0 = 0x10000
  1297: c8 79 09                 a2 = a2 + a0
  1300: 01                       fallthrough
      :                          @128
  1301: 82 9a                    a3 = u64 [a2]
  1303: c8 5a 08                 a1 = a3 + s0
  1306: ac a8 5f                 jump @140 if a1 <u a3
      :                          @129
  1309: 95 8b 01                 a4 = a1 + 0x1
  1312: 88 bc 01                 a5 = a4 <u 0x1
  1315: d8 b7 0b                 a4 = a0 <u a4
  1318: d4 cb 0b                 a4 = a4 | a5
  1321: 52 0b 50                 jump @140 if a4 != 0
      :                          @130
  1324: 82 9b                    a4 = u64 [a2]
  1326: ab ab e7                 jump @128 if a4 != a3
      :                          @131
  1329: 7b 98                    u64 [a2] = a1
  1331: 33 0c                    a5 = 0
  1333: 01                       fallthrough
      :                          @132
  1334: ab ab df                 jump @128 if a4 != a3
      :                          @133
  1337: 28 31                    jump @139
      :                          @134
  1339: 33 09 10 00 03           a2 = 0x30010
  1344: 33 07 00 00 01           a0 = 0x10000
  1349: c8 79 09                 a2 = a2 + a0
  1352: 01                       fallthrough
      :                          @135
  1353: 82 9a                    a3 = u64 [a2]
  1355: c8 5a 08                 a1 = a3 + s0
  1358: ac a8 2b                 jump @140 if a1 <u a3
      :                          @136
  1361: 95 8b 01                 a4 = a1 + 0x1
  1364: 88 bc 01                 a5 = a4 <u 0x1
  1367: d8 b7 0b                 a4 = a0 <u a4
  1370: d4 cb 0b                 a4 = a4 | a5
  1373: 52 0b 1c                 jump @140 if a4 != 0
      :                          @137
  1376: 82 9b                    a4 = u64 [a2]
  1378: ab ab e7                 jump @135 if a4 != a3
      :                          @138
  1381: 7b 98                    u64 [a2] = a1
  1383: 33 0c                    a5 = 0
  1385: 01                       fallthrough
      :                          @139
  1386: 33 07 10 00 04           a0 = 0x40010
  1391: c9 87 08                 a1 = a0 - a1
  1394: 33 07                    a0 = 0
  1396: 7b 28 08                 u64 [t0 + 0x8] = a1
  1399: 28 39                    jump @147
      :                          @140
  1401: 33 07 01                 a0 = 0x1
  1404: 7b 27 08                 u64 [t0 + 0x8] = a0
  1407: 28 31                    jump @147
      :                          @141
  1409: 64 6c                    a5 = s1
  1411: 82 17                    a0 = u64 [sp]
  1413: 95 77 00 00 01           a0 = a0 + 0x10000
  1418: 82 12 18                 t0 = u64 [sp + 0x18]
  1421: 82 16 08                 s1 = u64 [sp + 0x8]
  1424: 01                       fallthrough
      :                          @142
  1425: 82 78                    a1 = u64 [a0]
  1427: c9 87 09                 a2 = a0 - a1
  1430: ab 69 11                 jump @146 if a2 != s1
      :                          @143
  1433: c9 c8 09                 a2 = a1 - a5
  1436: 01                       fallthrough
      :                          @144
  1437: 82 7a                    a3 = u64 [a0]
  1439: ab 8a f2                 jump @142 if a3 != a1
      :                          @145
  1442: 7b 79                    u64 [a0] = a2
  1444: 33 0b                    a4 = 0
  1446: 01                       fallthrough
      :                          @146
  1447: 82 18 10                 a1 = u64 [sp + 0x10]
  1450: 33 07                    a0 = 0
  1452: 7b 28 08                 u64 [t0 + 0x8] = a1
  1455: 01                       fallthrough
      :                          @147
  1456: 7b 25 10                 u64 [t0 + 0x10] = s0
  1459: 7b 27                    u64 [t0] = a0
  1461: 82 10 30                 ra = u64 [sp + 0x30]
  1464: 82 15 28                 s0 = u64 [sp + 0x28]
  1467: 82 16 20                 s1 = u64 [sp + 0x20]
  1470: 95 11 38                 sp = sp + 0x38
  1473: 32 00                    ret
      :                          @148
  1475: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1478: 7b 10 40                 u64 [sp + 0x40] = ra
  1481: 7b 15 38                 u64 [sp + 0x38] = s0
  1484: 7b 16 30                 u64 [sp + 0x30] = s1
  1487: 95 88 01                 a1 = a1 + 0x1
  1490: 51 08 53                 jump @156 if a1 == 0
      :                          @149
  1493: 64 75                    s0 = a0
  1495: 82 77                    a0 = u64 [a0]
  1497: 97 79 01                 a2 = a0 << 0x1
  1500: 33 0a 08                 a3 = 0x8
  1503: e4 a8 08                 a1 = maxu(a1, a3)
  1506: e4 89 06                 s1 = maxu(a2, a1)
  1509: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1512: 98 88 3f                 a1 = a1 >> 0x3f
  1515: 51 07 12                 jump @151 if a0 == 0
      :                          @150
  1518: 82 59 08                 a2 = u64 [s0 + 0x8]
  1521: 7b 19 18                 u64 [sp + 0x18] = a2
  1524: 49 11 20 01              u64 [sp + 32] = 0x1
  1528: 7b 17 28                 u64 [sp + 0x28] = a0
  1531: 28 06                    jump @152
      :                          @151
  1533: 49 11 20                 u64 [sp + 32] = 0
  1536: 01                       fallthrough
      :                          @152
  1537: 64 17                    a0 = sp
  1539: 95 1a 18                 a3 = sp + 0x18
  1542: 64 69                    a2 = s1
  1544: 50 10 1a 6d fe           ra = 26, jump @116
      :                          @153 [@dyn 13]
  1549: 82 18                    a1 = u64 [sp]
  1551: 82 17 08                 a0 = u64 [sp + 0x8]
  1554: 51 08 14                 jump @157 if a1 == 0
      :                          @154
  1557: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1567: aa 87 0d                 jump @158 if a0 == a1
      :                          @155
  1570: 52 07 18                 jump @159 if a0 != 0
      :                          @156
  1573: 00                       trap
      :                          @157
  1574: 7b 57 08                 u64 [s0 + 0x8] = a0
  1577: 7b 56                    u64 [s0] = s1
  1579: 01                       fallthrough
      :                          @158
  1580: 82 10 40                 ra = u64 [sp + 0x40]
  1583: 82 15 38                 s0 = u64 [sp + 0x38]
  1586: 82 16 30                 s1 = u64 [sp + 0x30]
  1589: 95 11 48                 sp = sp + 0x48
  1592: 32 00                    ret
      :                          @159
  1594: 00                       trap
      :                          @160 [@dyn 14]
  1595: 82 72                    t0 = u64 [a0]
  1597: 33 09 00 00 ff           a2 = 0xffffffffffff0000
  1602: 95 2a ff ff fe           a3 = t0 + 0xfffffffffffeffff
  1607: ac 9a 28                 jump @166 if a3 <u a2
      :                          @161
  1610: 82 77 08                 a0 = u64 [a0 + 0x8]
  1613: 33 09 10 00 03           a2 = 0x30010
  1618: 95 99 00 00 01           a2 = a2 + 0x10000
  1623: 01                       fallthrough
      :                          @162
  1624: 82 9a                    a3 = u64 [a2]
  1626: c9 a9 0b                 a4 = a2 - a3
  1629: ab 7b 12                 jump @166 if a4 != a0
      :                          @163
  1632: c9 2a 0b                 a4 = a3 - t0
  1635: 01                       fallthrough
      :                          @164
  1636: 82 9c                    a5 = u64 [a2]
  1638: ab ac f2                 jump @162 if a5 != a3
      :                          @165
  1641: 7b 9b                    u64 [a2] = a4
  1643: 33 08                    a1 = 0
  1645: 32 00                    ret
      :                          @166
  1647: 32 00                    ret
      :                          @167 [@dyn 15]
  1649: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  1652: 7b 10 18                 u64 [sp + 0x18] = ra
  1655: 7b 15 10                 u64 [sp + 0x10] = s0
  1658: 7b 16 08                 u64 [sp + 0x8] = s1
  1661: 64 75                    s0 = a0
  1663: 82 7a 10                 a3 = u64 [a0 + 0x10]
  1666: 82 77                    a0 = u64 [a0]
  1668: c9 a7 07                 a0 = a0 - a3
  1671: 64 96                    s1 = a2
  1673: ac 97 2a                 jump @170 if a0 <u a2
      :                          @168
  1676: 7b 1a                    u64 [sp] = a3
  1678: 82 57 08                 a0 = u64 [s0 + 0x8]
  1681: c8 a7 07                 a0 = a0 + a3
  1684: 64 69                    a2 = s1
  1686: 50 10 20 41 01           ra = 32, jump @189
      :                          @169 [@dyn 16]
  1691: 82 17                    a0 = u64 [sp]
  1693: c8 76 06                 s1 = s1 + a0
  1696: 7b 56 10                 u64 [s0 + 0x10] = s1
  1699: 33 07                    a0 = 0
  1701: 82 10 18                 ra = u64 [sp + 0x18]
  1704: 82 15 10                 s0 = u64 [sp + 0x10]
  1707: 82 16 08                 s1 = u64 [sp + 0x8]
  1710: 95 11 20                 sp = sp + 0x20
  1713: 32 00                    ret
      :                          @170
  1715: 64 57                    a0 = s0
  1717: 7b 18                    u64 [sp] = a1
  1719: 64 a8                    a1 = a3
  1721: 64 69                    a2 = s1
  1723: 50 10 22 43 fd           ra = 34, jump @104
      :                          @171 [@dyn 17]
  1728: 82 18                    a1 = u64 [sp]
  1730: 82 5a 10                 a3 = u64 [s0 + 0x10]
  1733: 28 c7                    jump @168
      :                          @172 [@dyn 18]
  1735: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  1738: 7b 10 20                 u64 [sp + 0x20] = ra
  1741: 7b 15 18                 u64 [sp + 0x18] = s0
  1744: 7b 16 10                 u64 [sp + 0x10] = s1
  1747: 64 86                    s1 = a1
  1749: 83 88                    i32 a1 = a1 + 0
  1751: 33 09 80 00              a2 = 0x80
  1755: 64 7a                    a3 = a0
  1757: ae 98 2b                 jump @177 if a1 >=u a2
      :                          @173
  1760: 82 a8 10                 a1 = u64 [a3 + 0x10]
  1763: 82 a7                    a0 = u64 [a3]
  1765: ab 78 12                 jump @176 if a1 != a0
      :                          @174
  1768: 64 a7                    a0 = a3
  1770: 64 a5                    s0 = a3
  1772: 50 10 26 d7 fe           ra = 38, jump @148
      :                          @175 [@dyn 19]
  1777: 64 5a                    a3 = s0
  1779: 82 58 10                 a1 = u64 [s0 + 0x10]
  1782: 01                       fallthrough
      :                          @176
  1783: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1786: c8 87 07                 a0 = a0 + a1
  1789: 78 76                    u8 [a0] = s1
  1791: 95 88 01                 a1 = a1 + 0x1
  1794: 7b a8 10                 u64 [a3 + 0x10] = a1
  1797: 28 ab 00                 jump @185
      :                          @177
  1800: 8b 67 0b                 i32 a0 = s1 >> 0xb
  1803: 48 11 0c                 u32 [sp + 12] = 0
  1806: 52 07 1c                 jump @179 if a0 != 0
      :                          @178
  1809: 98 67 06                 a0 = s1 >> 0x6
  1812: 86 77 c0 00              a0 = a0 | 0xc0
  1816: 78 17 0c                 u8 [sp + 0xc] = a0
  1819: 84 67 3f                 a0 = s1 & 0x3f
  1822: 86 77 80 00              a0 = a0 | 0x80
  1826: 78 17 0d                 u8 [sp + 0xd] = a0
  1829: 33 06 02                 s1 = 0x2
  1832: 28 63                    jump @182
      :                          @179
  1834: 8b 67 10                 i32 a0 = s1 >> 0x10
  1837: 52 07 29                 jump @181 if a0 != 0
      :                          @180
  1840: 98 67 0c                 a0 = s1 >> 0xc
  1843: 86 77 e0 00              a0 = a0 | 0xe0
  1847: 78 17 0c                 u8 [sp + 0xc] = a0
  1850: 97 67 34                 a0 = s1 << 0x34
  1853: 98 77 3a                 a0 = a0 >> 0x3a
  1856: 95 77 80 00              a0 = a0 + 0x80
  1860: 78 17 0d                 u8 [sp + 0xd] = a0
  1863: 84 67 3f                 a0 = s1 & 0x3f
  1866: 86 77 80 00              a0 = a0 | 0x80
  1870: 78 17 0e                 u8 [sp + 0xe] = a0
  1873: 33 06 03                 s1 = 0x3
  1876: 28 37                    jump @182
      :                          @181
  1878: 97 67 2b                 a0 = s1 << 0x2b
  1881: 98 77 3d                 a0 = a0 >> 0x3d
  1884: 95 77 f0 00              a0 = a0 + 0xf0
  1888: 78 17 0c                 u8 [sp + 0xc] = a0
  1891: 97 67 2e                 a0 = s1 << 0x2e
  1894: 98 77 3a                 a0 = a0 >> 0x3a
  1897: 95 77 80 00              a0 = a0 + 0x80
  1901: 78 17 0d                 u8 [sp + 0xd] = a0
  1904: 97 67 34                 a0 = s1 << 0x34
  1907: 98 77 3a                 a0 = a0 >> 0x3a
  1910: 95 77 80 00              a0 = a0 + 0x80
  1914: 78 17 0e                 u8 [sp + 0xe] = a0
  1917: 84 67 3f                 a0 = s1 & 0x3f
  1920: 86 77 80 00              a0 = a0 | 0x80
  1924: 78 17 0f                 u8 [sp + 0xf] = a0
  1927: 33 06 04                 s1 = 0x4
  1930: 01                       fallthrough
      :                          @182
  1931: 82 a5 10                 s0 = u64 [a3 + 0x10]
  1934: 82 a7                    a0 = u64 [a3]
  1936: c9 57 07                 a0 = a0 - s0
  1939: ac 67 2d                 jump @186 if a0 <u s1
      :                          @183
  1942: 7b 1a                    u64 [sp] = a3
  1944: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1947: c8 57 07                 a0 = a0 + s0
  1950: 95 18 0c                 a1 = sp + 0xc
  1953: 64 69                    a2 = s1
  1955: 50 10 28 34              ra = 40, jump @189
      :                          @184 [@dyn 20]
  1959: c8 56 06                 s1 = s1 + s0
  1962: 82 17                    a0 = u64 [sp]
  1964: 7b 76 10                 u64 [a0 + 0x10] = s1
  1967: 01                       fallthrough
      :                          @185
  1968: 33 07                    a0 = 0
  1970: 82 10 20                 ra = u64 [sp + 0x20]
  1973: 82 15 18                 s0 = u64 [sp + 0x18]
  1976: 82 16 10                 s1 = u64 [sp + 0x10]
  1979: 95 11 28                 sp = sp + 0x28
  1982: 32 00                    ret
      :                          @186
  1984: 64 a7                    a0 = a3
  1986: 64 58                    a1 = s0
  1988: 64 69                    a2 = s1
  1990: 64 a5                    s0 = a3
  1992: 50 10 2a 36 fc           ra = 42, jump @104
      :                          @187 [@dyn 21]
  1997: 64 5a                    a3 = s0
  1999: 82 55 10                 s0 = u64 [s0 + 0x10]
  2002: 28 c4                    jump @183
      :                          @188 [@dyn 22]
  2004: 28 45 04                 jump @275
      :                          @189
  2007: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  2010: 7b 10 18                 u64 [sp + 0x18] = ra
  2013: 7b 15 10                 u64 [sp + 0x10] = s0
  2016: 7b 16 08                 u64 [sp + 0x8] = s1
  2019: 53 19 10 64              jump @198 if a2 <u 16
      :                          @190
  2023: 8d 7a                    i32 a3 = -a0
  2025: 84 a2 07                 t0 = a3 & 0x7
  2028: c8 27 0b                 a4 = a0 + t0
  2031: 51 02 15                 jump @193 if t0 == 0
      :                          @191
  2034: 64 8c                    a5 = a1
  2036: 64 75                    s0 = a0
  2038: 01                       fallthrough
      :                          @192
  2039: 7c ca                    a3 = u8 [a5]
  2041: 78 5a                    u8 [s0] = a3
  2043: 95 55 01                 s0 = s0 + 0x1
  2046: 95 cc 01                 a5 = a5 + 0x1
  2049: ac b5 f6                 jump @192 if s0 <u a4
      :                          @193
  2052: c8 28 03                 t1 = a1 + t0
  2055: c9 29 02                 t0 = a2 - t0
  2058: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  2061: 84 38 07                 a1 = t1 & 0x7
  2064: c8 4b 0a                 a3 = a4 + t2
  2067: 51 08 3b                 jump @200 if a1 == 0
      :                          @194
  2070: 58 04 4b                 jump @203 if t2 <=s 0
      :                          @195
  2073: 97 38 03                 a1 = t1 << 0x3
  2076: 84 80 38                 ra = a1 & 0x38
  2079: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  2082: 82 c5                    s0 = u64 [a5]
  2084: 8d 88                    i32 a1 = -a1
  2086: 84 88 38                 a1 = a1 & 0x38
  2089: 95 cc 08                 a5 = a5 + 0x8
  2092: 01                       fallthrough
      :                          @196
  2093: 82 c6                    s1 = u64 [a5]
  2095: d0 05 05                 s0 = s0 >> ra
  2098: cf 86 09                 a2 = s1 << a1
  2101: d4 59 09                 a2 = a2 | s0
  2104: 7b b9                    u64 [a4] = a2
  2106: 95 bb 08                 a4 = a4 + 0x8
  2109: 95 cc 08                 a5 = a5 + 0x8
  2112: 64 65                    s0 = s1
  2114: ac ab eb                 jump @196 if a4 <u a3
      :                          @197
  2117: 28 1c                    jump @203
      :                          @198
  2119: 64 7a                    a3 = a0
  2121: 52 09 21                 jump @204 if a2 != 0
      :                          @199
  2124: 28 2f                    jump @206
      :                          @200
  2126: 58 04 13                 jump @203 if t2 <=s 0
      :                          @201
  2129: 64 38                    a1 = t1
  2131: 01                       fallthrough
      :                          @202
  2132: 82 89                    a2 = u64 [a1]
  2134: 7b b9                    u64 [a4] = a2
  2136: 95 bb 08                 a4 = a4 + 0x8
  2139: 95 88 08                 a1 = a1 + 0x8
  2142: ac ab f6                 jump @202 if a4 <u a3
      :                          @203
  2145: c8 43 08                 a1 = t1 + t2
  2148: 84 29 07                 a2 = t0 & 0x7
  2151: 51 09 14                 jump @206 if a2 == 0
      :                          @204
  2154: c8 a9 09                 a2 = a2 + a3
  2157: 01                       fallthrough
      :                          @205
  2158: 7c 8b                    a4 = u8 [a1]
  2160: 78 ab                    u8 [a3] = a4
  2162: 95 aa 01                 a3 = a3 + 0x1
  2165: 95 88 01                 a1 = a1 + 0x1
  2168: ac 9a f6                 jump @205 if a3 <u a2
      :                          @206
  2171: 82 10 18                 ra = u64 [sp + 0x18]
  2174: 82 15 10                 s0 = u64 [sp + 0x10]
  2177: 82 16 08                 s1 = u64 [sp + 0x8]
  2180: 95 11 20                 sp = sp + 0x20
  2183: 32 00                    ret
      :                          @207
  2185: 8d 7a                    i32 a3 = -a0
  2187: 84 aa 07                 a3 = a3 & 0x7
  2190: c8 a7 0b                 a4 = a0 + a3
  2193: 51 0a 0e                 jump @210 if a3 == 0
      :                          @208
  2196: 64 7c                    a5 = a0
  2198: 01                       fallthrough
      :                          @209
  2199: 78 c8                    u8 [a5] = a1
  2201: 95 cc 01                 a5 = a5 + 0x1
  2204: ac bc fb                 jump @209 if a5 <u a4
      :                          @210
  2207: c9 a9 03                 t1 = a2 - a3
  2210: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  2213: c8 cb 0a                 a3 = a4 + a5
  2216: 58 0c 1d                 jump @213 if a5 <=s 0
      :                          @211
  2219: 84 82 ff 00              t0 = a1 & 0xff
  2223: 14 09 01 01 01 01 01 01 01 01 a2 = 0x101010101010101
  2233: ca 92 0c                 a5 = t0 * a2
  2236: 01                       fallthrough
      :                          @212
  2237: 7b bc                    u64 [a4] = a5
  2239: 95 bb 08                 a4 = a4 + 0x8
  2242: ac ab fb                 jump @212 if a4 <u a3
      :                          @213
  2245: 84 39 07                 a2 = t1 & 0x7
  2248: 52 09 05                 jump @215 if a2 != 0
      :                          @214
  2251: 28 0e                    jump @217
      :                          @215
  2253: c8 a9 09                 a2 = a2 + a3
  2256: 01                       fallthrough
      :                          @216
  2257: 78 a8                    u8 [a3] = a1
  2259: 95 aa 01                 a3 = a3 + 0x1
  2262: ac 9a fb                 jump @216 if a3 <u a2
      :                          @217
  2265: 32 00                    ret
      :                          @218 [@dyn 23]
  2267: 82 77                    a0 = u64 [a0]
  2269: 01                       fallthrough
      :                          @219
  2270: 28                       jump @219
      :                          @220 [@dyn 24]
  2271: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  2275: 7b 10 80 00              u64 [sp + 0x80] = ra
  2279: 7b 15 78                 u64 [sp + 0x78] = s0
  2282: 7b 16 70                 u64 [sp + 0x70] = s1
  2285: 82 7a                    a3 = u64 [a0]
  2287: 98 ab 04                 a4 = a3 >> 0x4
  2290: 33 07 27                 a0 = 0x27
  2293: 7b 18 20                 u64 [sp + 0x20] = a1
  2296: 53 2b 71 02 81 00        jump @223 if a4 <u 625
      :                          @221
  2302: 33 07 27                 a0 = 0x27
  2305: 95 18 6e                 a1 = sp + 0x6e
  2308: 3a 09 00 00 03           a2 = u64 [0x30000]
  2313: 7b 19 40                 u64 [sp + 0x40] = a2
  2316: 49 11 38 f0 d8 00        u64 [sp + 56] = 0xd8f0
  2322: 33 00 7b 14              ra = 0x147b
  2326: 33 04 30 00 01           t2 = 0x10030
  2331: 33 03 ff e0 f5 05        t1 = 0x5f5e0ff
  2337: 01                       fallthrough
      :                          @222
  2338: 64 ac                    a5 = a3
  2340: 82 19 40                 a2 = u64 [sp + 0x40]
  2343: d6 9a 0a                 a3 = a3 mulhu a2
  2346: 98 aa 0b                 a3 = a3 >> 0xb
  2349: 82 19 38                 a2 = u64 [sp + 0x38]
  2352: c0 9a 0b                 i32 a4 = a3 * a2
  2355: c8 cb 09                 a2 = a4 + a5
  2358: 97 9b 30                 a4 = a2 << 0x30
  2361: 98 bb 32                 a4 = a4 >> 0x32
  2364: ca 0b 0b                 a4 = a4 * ra
  2367: 98 b2 11                 t0 = a4 >> 0x11
  2370: 98 bb 10                 a4 = a4 >> 0x10
  2373: 84 bb fe 07              a4 = a4 & 0x7fe
  2377: 96 26 9c                 s1 = t0 * 0xffffffffffffff9c
  2380: c8 69 09                 a2 = a2 + s1
  2383: 97 99 31                 a2 = a2 << 0x31
  2386: 98 99 30                 a2 = a2 >> 0x30
  2389: c8 4b 0b                 a4 = a4 + t2
  2392: 7c b6                    s1 = u8 [a4]
  2394: 7c bb 01                 a4 = u8 [a4 + 0x1]
  2397: c8 49 09                 a2 = a2 + t2
  2400: 7c 95 01                 s0 = u8 [a2 + 0x1]
  2403: 7c 99                    a2 = u8 [a2]
  2405: 78 8b ff                 u8 [a1 + 0xffffffffffffffff] = a4
  2408: 78 86 fe                 u8 [a1 + 0xfffffffffffffffe] = s1
  2411: 78 85 01                 u8 [a1 + 0x1] = s0
  2414: 78 89                    u8 [a1] = a2
  2416: 95 77 fc                 a0 = a0 + 0xfffffffffffffffc
  2419: 95 88 fc                 a1 = a1 + 0xfffffffffffffffc
  2422: ac c3 ac                 jump @222 if t1 <u a5
      :                          @223
  2425: 54 1a 63 3b              jump @225 if a3 <=u 99
      :                          @224
  2429: 97 a8 30                 a1 = a3 << 0x30
  2432: 98 88 32                 a1 = a1 >> 0x32
  2435: 96 88 7b 14              a1 = a1 * 0x147b
  2439: 98 88 11                 a1 = a1 >> 0x11
  2442: 96 89 9c                 a2 = a1 * 0xffffffffffffff9c
  2445: c8 a9 09                 a2 = a2 + a3
  2448: 97 99 31                 a2 = a2 << 0x31
  2451: 98 99 30                 a2 = a2 >> 0x30
  2454: 95 77 fe                 a0 = a0 + 0xfffffffffffffffe
  2457: 33 0a 30 00 01           a3 = 0x10030
  2462: c8 a9 09                 a2 = a2 + a3
  2465: 7c 9a 01                 a3 = u8 [a2 + 0x1]
  2468: 7c 99                    a2 = u8 [a2]
  2470: 95 1b 49                 a4 = sp + 0x49
  2473: c8 7b 0b                 a4 = a4 + a0
  2476: 78 ba 01                 u8 [a4 + 0x1] = a3
  2479: 78 b9                    u8 [a4] = a2
  2481: 64 8a                    a3 = a1
  2483: 01                       fallthrough
      :                          @225
  2484: 82 1b 20                 a4 = u64 [sp + 0x20]
  2487: 55 1a 0a 14              jump @227 if a3 >=u 10
      :                          @226
  2491: 95 75 ff                 s0 = a0 + 0xffffffffffffffff
  2494: 95 17 49                 a0 = sp + 0x49
  2497: c8 57 07                 a0 = a0 + s0
  2500: 83 a8 30                 i32 a1 = a3 + 0x30
  2503: 78 78                    u8 [a0] = a1
  2505: 28 21                    jump @228
      :                          @227
  2507: 97 aa 01                 a3 = a3 << 0x1
  2510: 95 75 fe                 s0 = a0 + 0xfffffffffffffffe
  2513: 33 07 30 00 01           a0 = 0x10030
  2518: c8 a7 07                 a0 = a0 + a3
  2521: 7c 78 01                 a1 = u8 [a0 + 0x1]
  2524: 7c 77                    a0 = u8 [a0]
  2526: 95 19 49                 a2 = sp + 0x49
  2529: c8 59 09                 a2 = a2 + s0
  2532: 78 98 01                 u8 [a2 + 0x1] = a1
  2535: 78 97                    u8 [a2] = a0
  2537: 01                       fallthrough
      :                          @228
  2538: 80 b7 34                 a0 = u32 [a4 + 0x34]
  2541: 95 18 49                 a1 = sp + 0x49
  2544: c8 58 08                 a1 = a1 + s0
  2547: 7b 18 18                 u64 [sp + 0x18] = a1
  2550: 84 76 01                 s1 = a0 & 0x1
  2553: 33 09 00 00 11           a2 = 0x110000
  2558: 94 69 2b                 a2 = 0x2b if s1 != 0
  2561: 97 78 3d                 a1 = a0 << 0x3d
  2564: 99 88 3f                 a1 = a1 >>a 0x3f
  2567: 82 bc                    a5 = u64 [a4]
  2569: 33 0a 30 00 01           a3 = 0x10030
  2574: d2 8a 0a                 a3 = a3 & a1
  2577: 9a 58 27                 a1 = 0x27 - s0
  2580: 7b 18 10                 u64 [sp + 0x10] = a1
  2583: 51 0c 27                 jump @234 if a5 == 0
      :                          @229
  2586: 82 bc 08                 a5 = u64 [a4 + 0x8]
  2589: c8 68 08                 a1 = a1 + s1
  2592: ae c8 1e                 jump @234 if a1 >=u a5
      :                          @230
  2595: 84 77 08                 a0 = a0 & 0x8
  2598: 52 07 42                 jump @238 if a0 != 0
      :                          @231
  2601: 7c b7 38                 a0 = u8 [a4 + 0x38]
  2604: c9 8c 0c                 a5 = a5 - a1
  2607: 5a 17 01 8e 00           jump @245 if a0 >s 1
      :                          @232
  2612: 52 07 9b 00              jump @247 if a0 != 0
      :                          @233
  2616: 7b 1c 08                 u64 [sp + 0x8] = a5
  2619: 28 9a 00                 jump @248
      :                          @234
  2622: 82 b5 20                 s0 = u64 [a4 + 0x20]
  2625: 82 b6 28                 s1 = u64 [a4 + 0x28]
  2628: 64 57                    a0 = s0
  2630: 64 68                    a1 = s1
  2632: 50 10 32 73 01           ra = 50, jump @268
      :                          @235 [@dyn 25]
  2637: 33 08 01                 a1 = 0x1
  2640: 52 07 c2 00              jump @253 if a0 != 0
      :                          @236
  2644: 82 6a 18                 a3 = u64 [s1 + 0x18]
  2647: 64 57                    a0 = s0
  2649: 82 18 18                 a1 = u64 [sp + 0x18]
  2652: 82 19 10                 a2 = u64 [sp + 0x10]
  2655: b4 a0 01 34              ra = 52, jump [a3]
      :                          @237 [@dyn 26]
  2659: 64 78                    a1 = a0
  2661: 28 ad 00                 jump @253
      :                          @238
  2664: 7b 1c 30                 u64 [sp + 0x30] = a5
  2667: 81 b7 30                 a0 = i32 [a4 + 0x30]
  2670: 7b 17 08                 u64 [sp + 0x8] = a0
  2673: 7c b8 38                 a1 = u8 [a4 + 0x38]
  2676: 7b 18                    u64 [sp] = a1
  2678: 82 b7 20                 a0 = u64 [a4 + 0x20]
  2681: 82 b8 28                 a1 = u64 [a4 + 0x28]
  2684: 48 1b 30 30              u32 [a4 + 48] = 0x30
  2688: 46 1b 38 01              u8 [a4 + 56] = 0x1
  2692: 7b 17 38                 u64 [sp + 0x38] = a0
  2695: 7b 18 40                 u64 [sp + 0x40] = a1
  2698: 50 10 36 31 01           ra = 54, jump @268
      :                          @239 [@dyn 27]
  2703: 52 07 7f                 jump @252 if a0 != 0
      :                          @240
  2706: 82 17 30                 a0 = u64 [sp + 0x30]
  2709: c8 75 05                 s0 = s0 + a0
  2712: c9 65 05                 s0 = s0 - s1
  2715: 95 55 da                 s0 = s0 + 0xffffffffffffffda
  2718: 82 16 38                 s1 = u64 [sp + 0x38]
  2721: 01                       fallthrough
      :                          @241
  2722: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  2725: 51 05 d6 00              jump @263 if s0 == 0
      :                          @242
  2729: 82 17 40                 a0 = u64 [sp + 0x40]
  2732: 82 79 20                 a2 = u64 [a0 + 0x20]
  2735: 33 08 30                 a1 = 0x30
  2738: 64 67                    a0 = s1
  2740: b4 90 01 38              ra = 56, jump [a2]
      :                          @243 [@dyn 28]
  2744: 51 07 ea                 jump @241 if a0 == 0
      :                          @244
  2747: 28 53                    jump @252
      :                          @245
  2749: 52 17 02 12              jump @247 if a0 != 2
      :                          @246
  2753: 98 c7 01                 a0 = a5 >> 0x1
  2756: 95 c8 01                 a1 = a5 + 0x1
  2759: 98 88 01                 a1 = a1 >> 0x1
  2762: 7b 18 08                 u64 [sp + 0x8] = a1
  2765: 28 08                    jump @248
      :                          @247
  2767: 64 c7                    a0 = a5
  2769: 49 11 08                 u64 [sp + 8] = 0
  2772: 01                       fallthrough
      :                          @248
  2773: 82 b8 20                 a1 = u64 [a4 + 0x20]
  2776: 7b 18 30                 u64 [sp + 0x30] = a1
  2779: 82 b8 28                 a1 = u64 [a4 + 0x28]
  2782: 7b 18 40                 u64 [sp + 0x40] = a1
  2785: 81 b8 30                 a1 = i32 [a4 + 0x30]
  2788: 7b 18 38                 u64 [sp + 0x38] = a1
  2791: 95 75 01                 s0 = a0 + 0x1
  2794: 7b 19 28                 u64 [sp + 0x28] = a2
  2797: 01                       fallthrough
      :                          @249
  2798: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  2801: 51 05 33                 jump @254 if s0 == 0
      :                          @250
  2804: 82 17 40                 a0 = u64 [sp + 0x40]
  2807: 82 7b 20                 a4 = u64 [a0 + 0x20]
  2810: 82 17 30                 a0 = u64 [sp + 0x30]
  2813: 82 18 38                 a1 = u64 [sp + 0x38]
  2816: 64 a6                    s1 = a3
  2818: b4 b0 01 3a              ra = 58, jump [a4]
      :                          @251 [@dyn 29]
  2822: 64 6a                    a3 = s1
  2824: 82 19 28                 a2 = u64 [sp + 0x28]
  2827: 51 07 e3                 jump @249 if a0 == 0
      :                          @252
  2830: 33 08 01                 a1 = 0x1
  2833: 01                       fallthrough
      :                          @253
  2834: 64 87                    a0 = a1
  2836: 82 10 80 00              ra = u64 [sp + 0x80]
  2840: 82 15 78                 s0 = u64 [sp + 0x78]
  2843: 82 16 70                 s1 = u64 [sp + 0x70]
  2846: 95 11 88 00              sp = sp + 0x88
  2850: 32 00                    ret
      :                          @254
  2852: 82 16 30                 s1 = u64 [sp + 0x30]
  2855: 64 67                    a0 = s1
  2857: 82 15 40                 s0 = u64 [sp + 0x40]
  2860: 64 58                    a1 = s0
  2862: 50 10 3c 8d 00           ra = 60, jump @268
      :                          @255 [@dyn 30]
  2867: 33 08 01                 a1 = 0x1
  2870: 52 07 dc                 jump @253 if a0 != 0
      :                          @256
  2873: 82 5a 18                 a3 = u64 [s0 + 0x18]
  2876: 64 67                    a0 = s1
  2878: 82 18 18                 a1 = u64 [sp + 0x18]
  2881: 82 19 10                 a2 = u64 [sp + 0x10]
  2884: b4 a0 01 3e              ra = 62, jump [a3]
      :                          @257 [@dyn 31]
  2888: 33 08 01                 a1 = 0x1
  2891: 52 07 c7                 jump @253 if a0 != 0
      :                          @258
  2894: 82 17 08                 a0 = u64 [sp + 0x8]
  2897: 9a 77                    a0 = -a0
  2899: 7b 17 28                 u64 [sp + 0x28] = a0
  2902: 33 05 ff                 s0 = 0xffffffffffffffff
  2905: 01                       fallthrough
      :                          @259
  2906: 82 17 28                 a0 = u64 [sp + 0x28]
  2909: c8 57 07                 a0 = a0 + s0
  2912: 51 17 ff 46              jump @266 if a0 == 4294967295
      :                          @260
  2916: 82 17 40                 a0 = u64 [sp + 0x40]
  2919: 82 79 20                 a2 = u64 [a0 + 0x20]
  2922: 64 67                    a0 = s1
  2924: 82 18 38                 a1 = u64 [sp + 0x38]
  2927: b4 90 01 40              ra = 64, jump [a2]
      :                          @261 [@dyn 32]
  2931: 95 55 01                 s0 = s0 + 0x1
  2934: 51 07 e4                 jump @259 if a0 == 0
      :                          @262
  2937: 28 39                    jump @267
      :                          @263
  2939: 82 17 40                 a0 = u64 [sp + 0x40]
  2942: 82 7a 18                 a3 = u64 [a0 + 0x18]
  2945: 64 67                    a0 = s1
  2947: 82 18 18                 a1 = u64 [sp + 0x18]
  2950: 82 19 10                 a2 = u64 [sp + 0x10]
  2953: b4 a0 01 42              ra = 66, jump [a3]
      :                          @264 [@dyn 33]
  2957: 33 08 01                 a1 = 0x1
  2960: 52 07 82                 jump @253 if a0 != 0
      :                          @265
  2963: 33 08                    a1 = 0
  2965: 82 17 20                 a0 = u64 [sp + 0x20]
  2968: 82 19 08                 a2 = u64 [sp + 0x8]
  2971: 7a 79 30                 u32 [a0 + 0x30] = a2
  2974: 82 19                    a2 = u64 [sp]
  2976: 78 79 38                 u8 [a0 + 0x38] = a2
  2979: 28 6f ff                 jump @253
      :                          @266
  2982: 82 15 08                 s0 = u64 [sp + 0x8]
  2985: 82 17 08                 a0 = u64 [sp + 0x8]
  2988: d8 75 08                 a1 = s0 <u a0
  2991: 28 63 ff                 jump @253
      :                          @267
  2994: 82 17 08                 a0 = u64 [sp + 0x8]
  2997: d8 75 08                 a1 = s0 <u a0
  3000: 28 5a ff                 jump @253
      :                          @268
  3003: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  3006: 7b 10 18                 u64 [sp + 0x18] = ra
  3009: 7b 15 10                 u64 [sp + 0x10] = s0
  3012: 7b 16 08                 u64 [sp + 0x8] = s1
  3015: 83 9b                    i32 a4 = a2 + 0
  3017: 33 0c 00 00 11           a5 = 0x110000
  3022: 64 a5                    s0 = a3
  3024: 64 86                    s1 = a1
  3026: 64 7a                    a3 = a0
  3028: aa cb 1a                 jump @271 if a4 == a5
      :                          @269
  3031: 82 6b 20                 a4 = u64 [s1 + 0x20]
  3034: 64 a7                    a0 = a3
  3036: 64 98                    a1 = a2
  3038: 7b 1a                    u64 [sp] = a3
  3040: b4 b0 01 44              ra = 68, jump [a4]
      :                          @270 [@dyn 34]
  3044: 82 1a                    a3 = u64 [sp]
  3046: 64 78                    a1 = a0
  3048: 33 07 01                 a0 = 0x1
  3051: 52 08 20                 jump @274 if a1 != 0
      :                          @271
  3054: 51 05 1a                 jump @273 if s0 == 0
      :                          @272
  3057: 82 6c 18                 a5 = u64 [s1 + 0x18]
  3060: 64 a7                    a0 = a3
  3062: 64 58                    a1 = s0
  3064: 33 09                    a2 = 0
  3066: 82 10 18                 ra = u64 [sp + 0x18]
  3069: 82 15 10                 s0 = u64 [sp + 0x10]
  3072: 82 16 08                 s1 = u64 [sp + 0x8]
  3075: 95 11 20                 sp = sp + 0x20
  3078: 32 0c                    jump [a5]
      :                          @273
  3080: 33 07                    a0 = 0
  3082: 01                       fallthrough
      :                          @274
  3083: 82 10 18                 ra = u64 [sp + 0x18]
  3086: 82 15 10                 s0 = u64 [sp + 0x10]
  3089: 82 16 08                 s1 = u64 [sp + 0x8]
  3092: 95 11 20                 sp = sp + 0x20
  3095: 32 00                    ret
      :                          @275
  3097: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  3101: 7b 10 80 00              u64 [sp + 0x80] = ra
  3105: 7b 15 78                 u64 [sp + 0x78] = s0
  3108: 7b 16 70                 u64 [sp + 0x70] = s1
  3111: 49 11 60 20              u64 [sp + 96] = 0x20
  3115: 33 09 03                 a2 = 0x3
  3118: 78 19 68                 u8 [sp + 0x68] = a2
  3121: 49 11 30                 u64 [sp + 48] = 0
  3124: 49 11 40                 u64 [sp + 64] = 0
  3127: 82 86 20                 s1 = u64 [a1 + 0x20]
  3130: 7b 17 50                 u64 [sp + 0x50] = a0
  3133: 33 07 00 00 01           a0 = 0x10000
  3138: 7b 17 58                 u64 [sp + 0x58] = a0
  3141: 51 06 06 01              jump @297 if s1 == 0
      :                          @276
  3145: 82 87 28                 a0 = u64 [a1 + 0x28]
  3148: 51 07 73 01              jump @307 if a0 == 0
      :                          @277
  3152: 33 09                    a2 = 0
  3154: 82 85                    s0 = u64 [a1]
  3156: 7b 18 08                 u64 [sp + 0x8] = a1
  3159: 82 88 10                 a1 = u64 [a1 + 0x10]
  3162: 7b 18 18                 u64 [sp + 0x18] = a1
  3165: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  3168: 97 88 03                 a1 = a1 << 0x3
  3171: 98 88 03                 a1 = a1 >> 0x3
  3174: 95 88 01                 a1 = a1 + 0x1
  3177: 7b 18                    u64 [sp] = a1
  3179: 95 55 08                 s0 = s0 + 0x8
  3182: 96 78 38                 a1 = a0 * 0x38
  3185: 95 66 18                 s1 = s1 + 0x18
  3188: 33 07 2e                 a0 = 0x2e
  3191: 7b 17 10                 u64 [sp + 0x10] = a0
  3194: 01                       fallthrough
      :                          @278
  3195: 7b 18 20                 u64 [sp + 0x20] = a1
  3198: 7b 19 28                 u64 [sp + 0x28] = a2
  3201: 82 59                    a2 = u64 [s0]
  3203: 51 09 17                 jump @281 if a2 == 0
      :                          @279
  3206: 82 1a 58                 a3 = u64 [sp + 0x58]
  3209: 82 17 50                 a0 = u64 [sp + 0x50]
  3212: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  3215: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3218: b4 a0 01 46              ra = 70, jump [a3]
      :                          @280 [@dyn 35]
  3222: 52 07 4e 01              jump @310 if a0 != 0
      :                          @281
  3226: 81 67 10                 a0 = i32 [s1 + 0x10]
  3229: 7a 17 60                 u32 [sp + 0x60] = a0
  3232: 7c 67 18                 a0 = u8 [s1 + 0x18]
  3235: 78 17 68                 u8 [sp + 0x68] = a0
  3238: 81 67 14                 a0 = i32 [s1 + 0x14]
  3241: 7a 17 64                 u32 [sp + 0x64] = a0
  3244: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3247: 82 67                    a0 = u64 [s1]
  3249: 51 08 26                 jump @286 if a1 == 0
      :                          @282
  3252: 52 18 01 16              jump @284 if a1 != 1
      :                          @283
  3256: 97 77 04                 a0 = a0 << 0x4
  3259: 82 18 18                 a1 = u64 [sp + 0x18]
  3262: c8 87 07                 a0 = a0 + a1
  3265: 82 78 08                 a1 = u64 [a0 + 0x8]
  3268: 82 19 10                 a2 = u64 [sp + 0x10]
  3271: aa 98 07                 jump @285 if a1 == a2
      :                          @284
  3274: 33 08                    a1 = 0
  3276: 28 0f                    jump @287
      :                          @285
  3278: 82 77                    a0 = u64 [a0]
  3280: 82 77                    a0 = u64 [a0]
  3282: 33 08 01                 a1 = 0x1
  3285: 28 06                    jump @287
      :                          @286
  3287: 33 08 01                 a1 = 0x1
  3290: 01                       fallthrough
      :                          @287
  3291: 7b 18 30                 u64 [sp + 0x30] = a1
  3294: 7b 17 38                 u64 [sp + 0x38] = a0
  3297: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  3300: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  3303: 51 08 26                 jump @292 if a1 == 0
      :                          @288
  3306: 52 18 01 16              jump @290 if a1 != 1
      :                          @289
  3310: 97 77 04                 a0 = a0 << 0x4
  3313: 82 18 18                 a1 = u64 [sp + 0x18]
  3316: c8 87 07                 a0 = a0 + a1
  3319: 82 78 08                 a1 = u64 [a0 + 0x8]
  3322: 82 19 10                 a2 = u64 [sp + 0x10]
  3325: aa 98 07                 jump @291 if a1 == a2
      :                          @290
  3328: 33 08                    a1 = 0
  3330: 28 0f                    jump @293
      :                          @291
  3332: 82 77                    a0 = u64 [a0]
  3334: 82 77                    a0 = u64 [a0]
  3336: 33 08 01                 a1 = 0x1
  3339: 28 06                    jump @293
      :                          @292
  3341: 33 08 01                 a1 = 0x1
  3344: 01                       fallthrough
      :                          @293
  3345: 7b 18 40                 u64 [sp + 0x40] = a1
  3348: 7b 17 48                 u64 [sp + 0x48] = a0
  3351: 82 67 08                 a0 = u64 [s1 + 0x8]
  3354: 97 77 04                 a0 = a0 << 0x4
  3357: 82 18 18                 a1 = u64 [sp + 0x18]
  3360: c8 78 08                 a1 = a1 + a0
  3363: 82 87                    a0 = u64 [a1]
  3365: 82 89 08                 a2 = u64 [a1 + 0x8]
  3368: 95 18 30                 a1 = sp + 0x30
  3371: b4 90 01 48              ra = 72, jump [a2]
      :                          @294 [@dyn 36]
  3375: 52 07 b5 00              jump @310 if a0 != 0
      :                          @295
  3379: 95 55 10                 s0 = s0 + 0x10
  3382: 82 18 20                 a1 = u64 [sp + 0x20]
  3385: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  3388: 95 66 38                 s1 = s1 + 0x38
  3391: 82 19 28                 a2 = u64 [sp + 0x28]
  3394: 95 99 01                 a2 = a2 + 0x1
  3397: 52 08 36 ff              jump @278 if a1 != 0
      :                          @296
  3401: 28 69                    jump @305
      :                          @297
  3403: 82 87 18                 a0 = u64 [a1 + 0x18]
  3406: 51 07 71                 jump @307 if a0 == 0
      :                          @298
  3409: 82 85 10                 s0 = u64 [a1 + 0x10]
  3412: 33 0a                    a3 = 0
  3414: 97 79 04                 a2 = a0 << 0x4
  3417: c8 59 09                 a2 = a2 + s0
  3420: 7b 19 20                 u64 [sp + 0x20] = a2
  3423: 7b 18 08                 u64 [sp + 0x8] = a1
  3426: 82 86                    s1 = u64 [a1]
  3428: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  3431: 97 77 04                 a0 = a0 << 0x4
  3434: 98 77 04                 a0 = a0 >> 0x4
  3437: 95 77 01                 a0 = a0 + 0x1
  3440: 7b 17                    u64 [sp] = a0
  3442: 95 66 08                 s1 = s1 + 0x8
  3445: 01                       fallthrough
      :                          @299
  3446: 7b 1a 28                 u64 [sp + 0x28] = a3
  3449: 82 69                    a2 = u64 [s1]
  3451: 51 09 16                 jump @302 if a2 == 0
      :                          @300
  3454: 82 1a 58                 a3 = u64 [sp + 0x58]
  3457: 82 17 50                 a0 = u64 [sp + 0x50]
  3460: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3463: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3466: b4 a0 01 4a              ra = 74, jump [a3]
      :                          @301 [@dyn 37]
  3470: 52 07 56                 jump @310 if a0 != 0
      :                          @302
  3473: 82 57                    a0 = u64 [s0]
  3475: 82 59 08                 a2 = u64 [s0 + 0x8]
  3478: 95 18 30                 a1 = sp + 0x30
  3481: b4 90 01 4c              ra = 76, jump [a2]
      :                          @303 [@dyn 38]
  3485: 52 07 47                 jump @310 if a0 != 0
      :                          @304
  3488: 95 66 10                 s1 = s1 + 0x10
  3491: 95 55 10                 s0 = s0 + 0x10
  3494: 82 1a 28                 a3 = u64 [sp + 0x28]
  3497: 95 aa 01                 a3 = a3 + 0x1
  3500: 82 17 20                 a0 = u64 [sp + 0x20]
  3503: ab 75 c7                 jump @299 if s0 != a0
      :                          @305
  3506: 82 18 08                 a1 = u64 [sp + 0x8]
  3509: 82 1a                    a3 = u64 [sp]
  3511: 82 87 08                 a0 = u64 [a1 + 0x8]
  3514: ac 7a 0d                 jump @308 if a3 <u a0
      :                          @306
  3517: 28 2c                    jump @311
      :                          @307
  3519: 33 0a                    a3 = 0
  3521: 82 87 08                 a0 = u64 [a1 + 0x8]
  3524: 54 07 25                 jump @311 if a0 <=u 0
      :                          @308
  3527: 82 87                    a0 = u64 [a1]
  3529: 97 a8 04                 a1 = a3 << 0x4
  3532: c8 87 09                 a2 = a0 + a1
  3535: 82 1a 58                 a3 = u64 [sp + 0x58]
  3538: 82 17 50                 a0 = u64 [sp + 0x50]
  3541: 82 98                    a1 = u64 [a2]
  3543: 82 99 08                 a2 = u64 [a2 + 0x8]
  3546: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3549: b4 a0 01 4e              ra = 78, jump [a3]
      :                          @309 [@dyn 39]
  3553: 51 07 08                 jump @311 if a0 == 0
      :                          @310
  3556: 33 07 01                 a0 = 0x1
  3559: 28 05                    jump @312
      :                          @311
  3561: 33 07                    a0 = 0
  3563: 01                       fallthrough
      :                          @312
  3564: 82 10 80 00              ra = u64 [sp + 0x80]
  3568: 82 15 78                 s0 = u64 [sp + 0x78]
  3571: 82 16 70                 s1 = u64 [sp + 0x70]
  3574: 95 11 88 00              sp = sp + 0x88
  3578: 32 00                    ret
      :                          @313
  3580: 51 08 9b 00              jump @334 if a1 == 0
      :                          @314
  3584: 64 79                    a2 = a0
  3586: 7c 77                    a0 = u8 [a0]
  3588: 51 07 91 00              jump @333 if a0 == 0
      :                          @315
  3592: 51 27 ff 00 90 00        jump @335 if a0 == 255
      :                          @316
  3598: 6c 7a                    a3 = sext.b a0
  3600: 57 0a 09                 jump @318 if a3 <s 0
      :                          @317
  3603: 33 0a                    a3 = 0
  3605: 33 08                    a1 = 0
  3607: 28 73                    jump @332
      :                          @318
  3609: 55 27 c0 00 0d           jump @320 if a0 >=u 192
      :                          @319
  3614: 33 0a 01                 a3 = 0x1
  3617: 33 0b 80                 a4 = 0xffffffffffffff80
  3620: 28 4a                    jump @329
      :                          @320
  3622: 55 27 e0 00 0e           jump @322 if a0 >=u 224
      :                          @321
  3627: 33 0a 02                 a3 = 0x2
  3630: 33 0b 40 ff              a4 = 0xffffffffffffff40
  3634: 28 3c                    jump @329
      :                          @322
  3636: 55 27 f0 00 0e           jump @324 if a0 >=u 240
      :                          @323
  3641: 33 0a 03                 a3 = 0x3
  3644: 33 0b 20 ff              a4 = 0xffffffffffffff20
  3648: 28 2e                    jump @329
      :                          @324
  3650: 55 27 f8 00 0e           jump @326 if a0 >=u 248
      :                          @325
  3655: 33 0a 04                 a3 = 0x4
  3658: 33 0b 10 ff              a4 = 0xffffffffffffff10
  3662: 28 20                    jump @329
      :                          @326
  3664: 55 27 fc 00 0e           jump @328 if a0 >=u 252
      :                          @327
  3669: 33 0a 05                 a3 = 0x5
  3672: 33 0b 08 ff              a4 = 0xffffffffffffff08
  3676: 28 12                    jump @329
      :                          @328
  3678: 88 7a fe 00              a3 = a0 <u 0xfe
  3682: 33 0b 04 ff              a4 = 0xffffffffffffff04
  3686: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  3690: 85 aa 07                 a3 = a3 ^ 0x7
  3693: 01                       fallthrough
      :                          @329
  3694: ae 8a 2b                 jump @336 if a3 >=u a1
      :                          @330
  3697: 33 08                    a1 = 0
  3699: c8 b7 07                 a0 = a0 + a4
  3702: 64 ab                    a4 = a3
  3704: 01                       fallthrough
      :                          @331
  3705: c8 b9 0c                 a5 = a2 + a4
  3708: 7c cc                    a5 = u8 [a5]
  3710: 97 88 08                 a1 = a1 << 0x8
  3713: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  3716: d4 c8 08                 a1 = a1 | a5
  3719: 52 0b f2                 jump @331 if a4 != 0
      :                          @332
  3722: 8a a9 03                 i32 a2 = a3 << 0x3
  3725: cf 97 07                 a0 = a0 << a2
  3728: c8 87 07                 a0 = a0 + a1
  3731: 32 00                    ret
      :                          @333
  3733: 32 00                    ret
      :                          @334
  3735: 00                       trap
      :                          @335
  3736: 00                       trap
      :                          @336
  3737: 00                       trap
