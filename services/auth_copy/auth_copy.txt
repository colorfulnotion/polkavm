// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 2 bytes
// RO data = []
// RW data = []
// Instructions = 363
// Code size = 1063 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 13 00 00 00           jump @4
      :                          @2
    10: 28 db 02                 jump @56
      :                          @3 [export #0: 'refine']
    13: c8 87 07                 a0 = a0 + a1
    16: 95 77 e0                 a0 = a0 + 0xffffffffffffffe0
    19: 33 08 20                 a1 = 0x20
    22: 32 00                    ret
      :                          @4 [export #1: 'accumulate']
    24: 95 11 a0                 sp = sp + 0xffffffffffffffa0
    27: 7b 10 58                 u64 [sp + 0x58] = ra
    30: 7b 15 50                 u64 [sp + 0x50] = s0
    33: 7b 16 48                 u64 [sp + 0x48] = s1
    36: 33 09 08                 a2 = 0x8
    39: ac 98 e5 00              jump @34 if a1 <u a2
      :                          @5
    43: 51 17 fc b6 02           jump @52 if a0 == 4294967292
      :                          @6
    48: 51 07 b1 02              jump @52 if a0 == 0
      :                          @7
    52: 95 8a f8                 a3 = a1 + 0xfffffffffffffff8
    55: 95 75 08                 s0 = a0 + 0x8
    58: 51 0a 45                 jump @17 if a3 == 0
      :                          @8
    61: 7d 58                    a1 = i8 [s0]
    63: 33 06 01                 s1 = 0x1
    66: 59 08 40                 jump @18 if a1 >=s 0
      :                          @9
    69: 84 89 ff 00              a2 = a1 & 0xff
    73: 33 06 02                 s1 = 0x2
    76: 53 29 c0 00 2d           jump @15 if a2 <u 192
      :                          @10
    81: 33 06 03                 s1 = 0x3
    84: 53 29 e0 00 25           jump @15 if a2 <u 224
      :                          @11
    89: 33 06 04                 s1 = 0x4
    92: 53 29 f0 00 1d           jump @15 if a2 <u 240
      :                          @12
    97: 33 06 05                 s1 = 0x5
   100: 53 29 f8 00 15           jump @15 if a2 <u 248
      :                          @13
   105: 33 06 06                 s1 = 0x6
   108: 53 29 fc 00 0d           jump @15 if a2 <u 252
      :                          @14
   113: 88 98 fe 00              a1 = a2 <u 0xfe
   117: 9a 86 08                 s1 = 0x8 - a1
   120: 01                       fallthrough
      :                          @15
   121: ae 6a 09                 jump @18 if a3 >=u s1
      :                          @16
   124: 28 90 00                 jump @34
      :                          @17
   127: 33 06                    s1 = 0
   129: 01                       fallthrough
      :                          @18
   130: 7b 16                    u64 [sp] = s1
   132: 64 57                    a0 = s0
   134: 64 68                    a1 = s1
   136: 64 a6                    s1 = a3
   138: 50 10 02 ff 02           ra = 2, jump @72
      :                          @19 [@dyn 1]
   143: 82 1a                    a3 = u64 [sp]
   145: 51 07 7b                 jump @34 if a0 == 0
      :                          @20
   148: e4 a6 07                 a0 = maxu(s1, a3)
   151: c9 a7 07                 a0 = a0 - a3
   154: 53 17 60 72              jump @34 if a0 <u 96
      :                          @21
   158: c8 5a 08                 a1 = a3 + s0
   161: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   164: 95 87 60                 a0 = a1 + 0x60
   167: 7b 17                    u64 [sp] = a0
   169: 51 06 4c                 jump @32 if s1 == 0
      :                          @22
   172: 7d 78                    a1 = i8 [a0]
   174: 33 05 01                 s0 = 0x1
   177: 59 08 37                 jump @29 if a1 >=s 0
      :                          @23
   180: 84 89 ff 00              a2 = a1 & 0xff
   184: 33 05 02                 s0 = 0x2
   187: 53 29 c0 00 2d           jump @29 if a2 <u 192
      :                          @24
   192: 33 05 03                 s0 = 0x3
   195: 53 29 e0 00 25           jump @29 if a2 <u 224
      :                          @25
   200: 33 05 04                 s0 = 0x4
   203: 53 29 f0 00 1d           jump @29 if a2 <u 240
      :                          @26
   208: 33 05 05                 s0 = 0x5
   211: 53 29 f8 00 15           jump @29 if a2 <u 248
      :                          @27
   216: 33 05 06                 s0 = 0x6
   219: 53 29 fc 00 0d           jump @29 if a2 <u 252
      :                          @28
   224: 88 98 fe 00              a1 = a2 <u 0xfe
   228: 9a 85 08                 s0 = 0x8 - a1
   231: 01                       fallthrough
      :                          @29
   232: ac 56 fb 01              jump @54 if s1 <u s0
      :                          @30
   236: 64 58                    a1 = s0
   238: 50 10 04 9b 02           ra = 4, jump @72
      :                          @31 [@dyn 2]
   243: 28 07                    jump @33
      :                          @32
   245: 33 05                    s0 = 0
   247: 33 07                    a0 = 0
   249: 01                       fallthrough
      :                          @33
   250: e4 56 08                 a1 = maxu(s1, s0)
   253: c9 58 08                 a1 = a1 - s0
   256: e4 78 08                 a1 = maxu(a1, a0)
   259: c9 78 08                 a1 = a1 - a0
   262: 33 09 21                 a2 = 0x21
   265: ae 98 1d                 jump @36 if a1 >=u a2
      :                          @34
   268: 33 05                    s0 = 0
   270: 33 06 00 00 01           s1 = 0x10000
   275: 01                       fallthrough
      :                          @35
   276: 64 67                    a0 = s1
   278: 64 58                    a1 = s0
   280: 82 10 58                 ra = u64 [sp + 0x58]
   283: 82 15 50                 s0 = u64 [sp + 0x50]
   286: 82 16 48                 s1 = u64 [sp + 0x48]
   289: 95 11 60                 sp = sp + 0x60
   292: 32 00                    ret
      :                          @36
   294: 82 19                    a2 = u64 [sp]
   296: c8 95 05                 s0 = s0 + a2
   299: c8 57 07                 a0 = a0 + s0
   302: 7c 79 20                 a2 = u8 [a0 + 0x20]
   305: 52 09 b1 01              jump @53 if a2 != 0
      :                          @37
   309: 95 85 df                 s0 = a1 + 0xffffffffffffffdf
   312: 95 77 21                 a0 = a0 + 0x21
   315: 7b 17                    u64 [sp] = a0
   317: 51 05 4c                 jump @48 if s0 == 0
      :                          @38
   320: 7d 78                    a1 = i8 [a0]
   322: 33 06 01                 s1 = 0x1
   325: 59 08 37                 jump @45 if a1 >=s 0
      :                          @39
   328: 84 89 ff 00              a2 = a1 & 0xff
   332: 33 06 02                 s1 = 0x2
   335: 53 29 c0 00 2d           jump @45 if a2 <u 192
      :                          @40
   340: 33 06 03                 s1 = 0x3
   343: 53 29 e0 00 25           jump @45 if a2 <u 224
      :                          @41
   348: 33 06 04                 s1 = 0x4
   351: 53 29 f0 00 1d           jump @45 if a2 <u 240
      :                          @42
   356: 33 06 05                 s1 = 0x5
   359: 53 29 f8 00 15           jump @45 if a2 <u 248
      :                          @43
   364: 33 06 06                 s1 = 0x6
   367: 53 29 fc 00 0d           jump @45 if a2 <u 252
      :                          @44
   372: 88 98 fe 00              a1 = a2 <u 0xfe
   376: 9a 86 08                 s1 = 0x8 - a1
   379: 01                       fallthrough
      :                          @45
   380: ac 65 68 01              jump @55 if s0 <u s1
      :                          @46
   384: 64 68                    a1 = s1
   386: 50 10 06 07 02           ra = 6, jump @72
      :                          @47 [@dyn 3]
   391: 28 07                    jump @49
      :                          @48
   393: 33 06                    s1 = 0
   395: 33 07                    a0 = 0
   397: 01                       fallthrough
      :                          @49
   398: e4 65 08                 a1 = maxu(s0, s1)
   401: c9 68 08                 a1 = a1 - s1
   404: e6 78 07                 a0 = minu(a1, a0)
   407: 33 05 20                 s0 = 0x20
   410: ab 57 48 01              jump @53 if a0 != s0
      :                          @50
   414: 82 17                    a0 = u64 [sp]
   416: c8 76 06                 s1 = s1 + a0
   419: 7c 67 19                 a0 = u8 [s1 + 0x19]
   422: 7c 68 18                 a1 = u8 [s1 + 0x18]
   425: 7c 69 1a                 a2 = u8 [s1 + 0x1a]
   428: 7c 6a 1b                 a3 = u8 [s1 + 0x1b]
   431: 97 77 08                 a0 = a0 << 0x8
   434: d4 87 07                 a0 = a0 | a1
   437: 97 99 10                 a2 = a2 << 0x10
   440: 97 aa 18                 a3 = a3 << 0x18
   443: d4 a9 09                 a2 = a2 | a3
   446: d4 97 07                 a0 = a0 | a2
   449: 7c 68 1d                 a1 = u8 [s1 + 0x1d]
   452: 7c 69 1c                 a2 = u8 [s1 + 0x1c]
   455: 7c 6a 1e                 a3 = u8 [s1 + 0x1e]
   458: 7c 6b 1f                 a4 = u8 [s1 + 0x1f]
   461: 97 88 08                 a1 = a1 << 0x8
   464: d4 98 08                 a1 = a1 | a2
   467: 97 aa 10                 a3 = a3 << 0x10
   470: 97 bb 18                 a4 = a4 << 0x18
   473: d4 ba 0a                 a3 = a3 | a4
   476: d4 a8 08                 a1 = a1 | a3
   479: 97 88 20                 a1 = a1 << 0x20
   482: d4 87 07                 a0 = a0 | a1
   485: 7b 17 20                 u64 [sp + 0x20] = a0
   488: 7c 67 11                 a0 = u8 [s1 + 0x11]
   491: 7c 68 10                 a1 = u8 [s1 + 0x10]
   494: 7c 69 12                 a2 = u8 [s1 + 0x12]
   497: 7c 6a 13                 a3 = u8 [s1 + 0x13]
   500: 97 77 08                 a0 = a0 << 0x8
   503: d4 87 07                 a0 = a0 | a1
   506: 97 99 10                 a2 = a2 << 0x10
   509: 97 aa 18                 a3 = a3 << 0x18
   512: d4 a9 09                 a2 = a2 | a3
   515: d4 97 07                 a0 = a0 | a2
   518: 7c 68 15                 a1 = u8 [s1 + 0x15]
   521: 7c 69 14                 a2 = u8 [s1 + 0x14]
   524: 7c 6a 16                 a3 = u8 [s1 + 0x16]
   527: 7c 6b 17                 a4 = u8 [s1 + 0x17]
   530: 97 88 08                 a1 = a1 << 0x8
   533: d4 98 08                 a1 = a1 | a2
   536: 97 aa 10                 a3 = a3 << 0x10
   539: 97 bb 18                 a4 = a4 << 0x18
   542: d4 ba 0a                 a3 = a3 | a4
   545: d4 a8 08                 a1 = a1 | a3
   548: 97 88 20                 a1 = a1 << 0x20
   551: d4 87 07                 a0 = a0 | a1
   554: 7b 17 18                 u64 [sp + 0x18] = a0
   557: 7c 67 09                 a0 = u8 [s1 + 0x9]
   560: 7c 68 08                 a1 = u8 [s1 + 0x8]
   563: 7c 69 0a                 a2 = u8 [s1 + 0xa]
   566: 7c 6a 0b                 a3 = u8 [s1 + 0xb]
   569: 97 77 08                 a0 = a0 << 0x8
   572: d4 87 07                 a0 = a0 | a1
   575: 97 99 10                 a2 = a2 << 0x10
   578: 97 aa 18                 a3 = a3 << 0x18
   581: d4 a9 09                 a2 = a2 | a3
   584: d4 97 07                 a0 = a0 | a2
   587: 7c 68 0d                 a1 = u8 [s1 + 0xd]
   590: 7c 69 0c                 a2 = u8 [s1 + 0xc]
   593: 7c 6a 0e                 a3 = u8 [s1 + 0xe]
   596: 7c 6b 0f                 a4 = u8 [s1 + 0xf]
   599: 97 88 08                 a1 = a1 << 0x8
   602: d4 98 08                 a1 = a1 | a2
   605: 97 aa 10                 a3 = a3 << 0x10
   608: 97 bb 18                 a4 = a4 << 0x18
   611: d4 ba 0a                 a3 = a3 | a4
   614: d4 a8 08                 a1 = a1 | a3
   617: 97 88 20                 a1 = a1 << 0x20
   620: d4 87 07                 a0 = a0 | a1
   623: 7b 17 10                 u64 [sp + 0x10] = a0
   626: 7c 67 01                 a0 = u8 [s1 + 0x1]
   629: 7c 68                    a1 = u8 [s1]
   631: 7c 69 02                 a2 = u8 [s1 + 0x2]
   634: 7c 6a 03                 a3 = u8 [s1 + 0x3]
   637: 97 77 08                 a0 = a0 << 0x8
   640: d4 87 07                 a0 = a0 | a1
   643: 97 99 10                 a2 = a2 << 0x10
   646: 97 aa 18                 a3 = a3 << 0x18
   649: d4 a9 09                 a2 = a2 | a3
   652: d4 97 07                 a0 = a0 | a2
   655: 7c 68 05                 a1 = u8 [s1 + 0x5]
   658: 7c 69 04                 a2 = u8 [s1 + 0x4]
   661: 7c 6a 06                 a3 = u8 [s1 + 0x6]
   664: 7c 6b 07                 a4 = u8 [s1 + 0x7]
   667: 97 88 08                 a1 = a1 << 0x8
   670: d4 98 08                 a1 = a1 | a2
   673: 97 aa 10                 a3 = a3 << 0x10
   676: 97 bb 18                 a4 = a4 << 0x18
   679: d4 ba 0a                 a3 = a3 | a4
   682: d4 a8 08                 a1 = a1 | a3
   685: 97 88 20                 a1 = a1 << 0x20
   688: d4 87 07                 a0 = a0 | a1
   691: 7b 17 08                 u64 [sp + 0x8] = a0
   694: 95 17 28                 a0 = sp + 0x28
   697: 33 09 20                 a2 = 0x20
   700: 64 68                    a1 = s1
   702: 33 00 08                 ra = 0x8
   705: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   708: 7b 10 18                 u64 [sp + 0x18] = ra
   711: 7b 19 10                 u64 [sp + 0x10] = a2
   714: 7b 16 08                 u64 [sp + 0x8] = s1
   717: 28 21                    jump @57
      :                          @51 [@dyn 4]
   719: 95 18 08                 a1 = sp + 0x8
   722: 33 07                    a0 = 0
   724: 0a 06                    ecalli 6 // 'assign'
   726: 33 07 01                 a0 = 0x1
   729: 95 18 08                 a1 = sp + 0x8
   732: 0a 06                    ecalli 6 // 'assign'
   734: 28 36 fe                 jump @35
      :                          @52
   737: 00                       trap
      :                          @53
   738: 00                       trap
      :                          @54
   739: 00                       trap
      :                          @55
   740: 00                       trap
      :                          @56 [export #2: 'on_transfer']
   741: 33 07 00 00 01           a0 = 0x10000
   746: 33 08                    a1 = 0
   748: 32 00                    ret
      :                          @57
   750: 8d 7a                    i32 a3 = -a0
   752: 84 a2 07                 t0 = a3 & 0x7
   755: c8 27 0b                 a4 = a0 + t0
   758: 51 02 15                 jump @60 if t0 == 0
      :                          @58
   761: 64 8c                    a5 = a1
   763: 64 75                    s0 = a0
   765: 01                       fallthrough
      :                          @59
   766: 7c ca                    a3 = u8 [a5]
   768: 78 5a                    u8 [s0] = a3
   770: 95 55 01                 s0 = s0 + 0x1
   773: 95 cc 01                 a5 = a5 + 0x1
   776: ac b5 f6                 jump @59 if s0 <u a4
      :                          @60
   779: c8 28 03                 t1 = a1 + t0
   782: c9 29 02                 t0 = a2 - t0
   785: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
   788: 84 38 07                 a1 = t1 & 0x7
   791: c8 4b 0a                 a3 = a4 + t2
   794: 51 08 34                 jump @65 if a1 == 0
      :                          @61
   797: 58 04 44                 jump @68 if t2 <=s 0
      :                          @62
   800: 97 38 03                 a1 = t1 << 0x3
   803: 84 80 38                 ra = a1 & 0x38
   806: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
   809: 82 c5                    s0 = u64 [a5]
   811: 8d 88                    i32 a1 = -a1
   813: 84 88 38                 a1 = a1 & 0x38
   816: 95 cc 08                 a5 = a5 + 0x8
   819: 01                       fallthrough
      :                          @63
   820: 82 c6                    s1 = u64 [a5]
   822: d0 05 05                 s0 = s0 >> ra
   825: cf 86 09                 a2 = s1 << a1
   828: d4 59 09                 a2 = a2 | s0
   831: 7b b9                    u64 [a4] = a2
   833: 95 bb 08                 a4 = a4 + 0x8
   836: 95 cc 08                 a5 = a5 + 0x8
   839: 64 65                    s0 = s1
   841: ac ab eb                 jump @63 if a4 <u a3
      :                          @64
   844: 28 15                    jump @68
      :                          @65
   846: 58 04 13                 jump @68 if t2 <=s 0
      :                          @66
   849: 64 38                    a1 = t1
   851: 01                       fallthrough
      :                          @67
   852: 82 89                    a2 = u64 [a1]
   854: 7b b9                    u64 [a4] = a2
   856: 95 bb 08                 a4 = a4 + 0x8
   859: 95 88 08                 a1 = a1 + 0x8
   862: ac ab f6                 jump @67 if a4 <u a3
      :                          @68
   865: c8 43 08                 a1 = t1 + t2
   868: 84 29 07                 a2 = t0 & 0x7
   871: 51 09 14                 jump @71 if a2 == 0
      :                          @69
   874: c8 a9 09                 a2 = a2 + a3
   877: 01                       fallthrough
      :                          @70
   878: 7c 8b                    a4 = u8 [a1]
   880: 78 ab                    u8 [a3] = a4
   882: 95 aa 01                 a3 = a3 + 0x1
   885: 95 88 01                 a1 = a1 + 0x1
   888: ac 9a f6                 jump @70 if a3 <u a2
      :                          @71
   891: 82 10 18                 ra = u64 [sp + 0x18]
   894: 82 15 10                 s0 = u64 [sp + 0x10]
   897: 82 16 08                 s1 = u64 [sp + 0x8]
   900: 95 11 20                 sp = sp + 0x20
   903: 32 00                    ret
      :                          @72
   905: 51 08 9b 00              jump @93 if a1 == 0
      :                          @73
   909: 64 79                    a2 = a0
   911: 7c 77                    a0 = u8 [a0]
   913: 51 07 91 00              jump @92 if a0 == 0
      :                          @74
   917: 51 27 ff 00 90 00        jump @94 if a0 == 255
      :                          @75
   923: 6c 7a                    a3 = sext.b a0
   925: 57 0a 09                 jump @77 if a3 <s 0
      :                          @76
   928: 33 0a                    a3 = 0
   930: 33 08                    a1 = 0
   932: 28 73                    jump @91
      :                          @77
   934: 55 27 c0 00 0d           jump @79 if a0 >=u 192
      :                          @78
   939: 33 0a 01                 a3 = 0x1
   942: 33 0b 80                 a4 = 0xffffffffffffff80
   945: 28 4a                    jump @88
      :                          @79
   947: 55 27 e0 00 0e           jump @81 if a0 >=u 224
      :                          @80
   952: 33 0a 02                 a3 = 0x2
   955: 33 0b 40 ff              a4 = 0xffffffffffffff40
   959: 28 3c                    jump @88
      :                          @81
   961: 55 27 f0 00 0e           jump @83 if a0 >=u 240
      :                          @82
   966: 33 0a 03                 a3 = 0x3
   969: 33 0b 20 ff              a4 = 0xffffffffffffff20
   973: 28 2e                    jump @88
      :                          @83
   975: 55 27 f8 00 0e           jump @85 if a0 >=u 248
      :                          @84
   980: 33 0a 04                 a3 = 0x4
   983: 33 0b 10 ff              a4 = 0xffffffffffffff10
   987: 28 20                    jump @88
      :                          @85
   989: 55 27 fc 00 0e           jump @87 if a0 >=u 252
      :                          @86
   994: 33 0a 05                 a3 = 0x5
   997: 33 0b 08 ff              a4 = 0xffffffffffffff08
  1001: 28 12                    jump @88
      :                          @87
  1003: 88 7a fe 00              a3 = a0 <u 0xfe
  1007: 33 0b 04 ff              a4 = 0xffffffffffffff04
  1011: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  1015: 85 aa 07                 a3 = a3 ^ 0x7
  1018: 01                       fallthrough
      :                          @88
  1019: ae 8a 2b                 jump @95 if a3 >=u a1
      :                          @89
  1022: 33 08                    a1 = 0
  1024: c8 b7 07                 a0 = a0 + a4
  1027: 64 ab                    a4 = a3
  1029: 01                       fallthrough
      :                          @90
  1030: c8 b9 0c                 a5 = a2 + a4
  1033: 7c cc                    a5 = u8 [a5]
  1035: 97 88 08                 a1 = a1 << 0x8
  1038: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  1041: d4 c8 08                 a1 = a1 | a5
  1044: 52 0b f2                 jump @90 if a4 != 0
      :                          @91
  1047: 8a a9 03                 i32 a2 = a3 << 0x3
  1050: cf 97 07                 a0 = a0 << a2
  1053: c8 87 07                 a0 = a0 + a1
  1056: 32 00                    ret
      :                          @92
  1058: 32 00                    ret
      :                          @93
  1060: 00                       trap
      :                          @94
  1061: 00                       trap
      :                          @95
  1062: 00                       trap
