// RO data = 336/336 bytes
// RW data = 8/65568 bytes
// Stack size = 65536 bytes
// RO data = [28, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 112, 97, 114, 115, 101, 95, 97, 99, 99, 117, 109, 117, 108, 97, 116, 101, 95, 97, 114, 103, 115, 32, 115, 116, 97, 114, 116, 95, 97, 100, 100, 114, 101, 115, 115, 61, 32, 108, 101, 110, 103, 116, 104, 61, 116, 114, 97, 110, 115, 102, 101, 114, 0, 0, 0, 0, 248, 0, 1, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 28, 1, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0]
// RW data = [75, 89, 134, 56, 214, 197, 109, 52]
// Instructions = 1304
// Code size = 3843 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 ae 00 00 00           jump @18
      :                          @2
    10: 28 54 04                 jump @114
      :                          @3 [export #0: 'refine']
    13: 95 11 e0                 sp = sp + 0xffffffffffffffe0
    16: 7b 10 18                 u64 [sp + 0x18] = ra
    19: 7b 15 10                 u64 [sp + 0x10] = s0
    22: 7b 16 08                 u64 [sp + 0x8] = s1
    25: 64 86                    s1 = a1
    27: 64 78                    a1 = a0
    29: 33 09 04                 a2 = 0x4
    32: 33 07 00 00 01           a0 = 0x10000
    37: ac 96 7c                 jump @15 if s1 <u a2
      :                          @4
    40: 95 66 fc                 s1 = s1 + 0xfffffffffffffffc
    43: 51 06 76                 jump @15 if s1 == 0
      :                          @5
    46: 95 87 04                 a0 = a1 + 0x4
    49: 7d 78                    a1 = i8 [a0]
    51: 33 05 01                 s0 = 0x1
    54: 59 08 3a                 jump @13 if a1 >=s 0
      :                          @6
    57: 84 89 ff 00              a2 = a1 & 0xff
    61: 33 05 02                 s0 = 0x2
    64: 53 29 c0 00 2d           jump @12 if a2 <u 192
      :                          @7
    69: 33 05 03                 s0 = 0x3
    72: 53 29 e0 00 25           jump @12 if a2 <u 224
      :                          @8
    77: 33 05 04                 s0 = 0x4
    80: 53 29 f0 00 1d           jump @12 if a2 <u 240
      :                          @9
    85: 33 05 05                 s0 = 0x5
    88: 53 29 f8 00 15           jump @12 if a2 <u 248
      :                          @10
    93: 33 05 06                 s0 = 0x6
    96: 53 29 fc 00 0d           jump @12 if a2 <u 252
      :                          @11
   101: 88 98 fe 00              a1 = a2 <u 0xfe
   105: 9a 85 08                 s0 = 0x8 - a1
   108: 01                       fallthrough
      :                          @12
   109: ac 56 45                 jump @17 if s1 <u s0
      :                          @13
   112: 64 58                    a1 = s0
   114: 7b 17                    u64 [sp] = a0
   116: 50 10 02 f1 0d           ra = 2, jump @324
      :                          @14 [@dyn 1]
   121: 64 78                    a1 = a0
   123: e4 56 07                 a0 = maxu(s1, s0)
   126: c9 57 07                 a0 = a0 - s0
   129: d8 87 09                 a2 = a0 <u a1
   132: e4 87 07                 a0 = maxu(a0, a1)
   135: c9 87 07                 a0 = a0 - a1
   138: 88 77 20                 a0 = a0 <u 0x20
   141: d4 79 09                 a2 = a2 | a0
   144: 82 17                    a0 = u64 [sp]
   146: c8 75 05                 s0 = s0 + a0
   149: 94 98                    a1 = 0 if a2 != 0
   151: 33 07 00 00 01           a0 = 0x10000
   156: da 95 07                 a0 = s0 if a2 == 0
   159: 28 05                    jump @16
      :                          @15
   161: 33 08                    a1 = 0
   163: 01                       fallthrough
      :                          @16
   164: 82 10 18                 ra = u64 [sp + 0x18]
   167: 82 15 10                 s0 = u64 [sp + 0x10]
   170: 82 16 08                 s1 = u64 [sp + 0x8]
   173: 95 11 20                 sp = sp + 0x20
   176: 32 00                    ret
      :                          @17
   178: 00                       trap
      :                          @18 [export #1: 'accumulate']
   179: 95 11 08 ff              sp = sp + 0xffffffffffffff08
   183: 7b 10 f0 00              u64 [sp + 0xf0] = ra
   187: 7b 15 e8 00              u64 [sp + 0xe8] = s0
   191: 7b 16 e0 00              u64 [sp + 0xe0] = s1
   195: 7b 17 90 00              u64 [sp + 0x90] = a0
   199: 7b 18 98 00              u64 [sp + 0x98] = a1
   203: 51 08 d2 02              jump @92 if a1 == 0
      :                          @19
   207: 64 75                    s0 = a0
   209: 95 17 90 00              a0 = sp + 0x90
   213: 7b 17 a0 00              u64 [sp + 0xa0] = a0
   217: 33 07 30                 a0 = 0x30
   220: 7b 17 a8 00              u64 [sp + 0xa8] = a0
   224: 95 19 98 00              a2 = sp + 0x98
   228: 7b 19 b0 00              u64 [sp + 0xb0] = a2
   232: 7b 17 b8 00              u64 [sp + 0xb8] = a0
   236: 33 07 30 01 01           a0 = 0x10130
   241: 7b 17 10                 u64 [sp + 0x10] = a0
   244: 49 11 18 02              u64 [sp + 24] = 0x2
   248: 49 11 30                 u64 [sp + 48] = 0
   251: 95 19 a0 00              a2 = sp + 0xa0
   255: 7b 19 20                 u64 [sp + 0x20] = a2
   258: 49 11 28 02              u64 [sp + 40] = 0x2
   262: 33 09 10 00 03           a2 = 0x30010
   267: 33 07 00 00 01           a0 = 0x10000
   272: c8 79 09                 a2 = a2 + a0
   275: 01                       fallthrough
      :                          @20
   276: 82 9a                    a3 = u64 [a2]
   278: 95 a6 58                 s1 = a3 + 0x58
   281: ac a6 40 03              jump @109 if s1 <u a3
      :                          @21
   285: 95 6b 01                 a4 = s1 + 0x1
   288: 88 bc 01                 a5 = a4 <u 0x1
   291: d8 b7 0b                 a4 = a0 <u a4
   294: d4 cb 0b                 a4 = a4 | a5
   297: 52 0b 30 03              jump @109 if a4 != 0
      :                          @22
   301: 82 9b                    a4 = u64 [a2]
   303: ab ab e5                 jump @20 if a4 != a3
      :                          @23
   306: 7b 96                    u64 [a2] = s1
   308: 33 0c                    a5 = 0
   310: 7b 15 08                 u64 [sp + 0x8] = s0
   313: 7b 18                    u64 [sp] = a1
   315: 33 07 10 00 04           a0 = 0x40010
   320: c9 67 07                 a0 = a0 - s1
   323: 49 21 c0 00 58           u64 [sp + 192] = 0x58
   328: 7b 17 c8 00              u64 [sp + 0xc8] = a0
   332: 49 21 d0 00              u64 [sp + 208] = 0
   336: 95 17 c0 00              a0 = sp + 0xc0
   340: 95 18 10                 a1 = sp + 0x10
   343: 50 10 04 2b 0b           ra = 4, jump @286
      :                          @24 [@dyn 2]
   348: 52 07 fe 02              jump @110 if a0 != 0
      :                          @25
   352: 82 16 c8 00              s1 = u64 [sp + 0xc8]
   356: 82 1b d0 00              a4 = u64 [sp + 0xd0]
   360: 82 15 c0 00              s0 = u64 [sp + 0xc0]
   364: 33 07 02                 a0 = 0x2
   367: 33 08                    a1 = 0
   369: 33 09                    a2 = 0
   371: 64 6a                    a3 = s1
   373: 33 00 06                 ra = 0x6
   376: 0a 64                    ecalli 100 // 'log'
   378: 01                       fallthrough
      :                          @26 [@dyn 3]
   379: 95 58 ff ff fe           a1 = s0 + 0xfffffffffffeffff
   384: 53 38 00 00 ff 27        jump @32 if a1 <u 4294901760
      :                          @27
   390: 33 07 10 00 03           a0 = 0x30010
   395: 95 77 00 00 01           a0 = a0 + 0x10000
   400: 01                       fallthrough
      :                          @28
   401: 82 78                    a1 = u64 [a0]
   403: c9 87 09                 a2 = a0 - a1
   406: ab 69 11                 jump @32 if a2 != s1
      :                          @29
   409: c9 58 09                 a2 = a1 - s0
   412: 01                       fallthrough
      :                          @30
   413: 82 7a                    a3 = u64 [a0]
   415: ab 8a f2                 jump @28 if a3 != a1
      :                          @31
   418: 7b 79                    u64 [a0] = a2
   420: 33 0b                    a4 = 0
   422: 01                       fallthrough
      :                          @32
   423: 82 17 08                 a0 = u64 [sp + 0x8]
   426: 7d 78                    a1 = i8 [a0]
   428: 33 06 01                 s1 = 0x1
   431: 59 08 37                 jump @39 if a1 >=s 0
      :                          @33
   434: 84 89 ff 00              a2 = a1 & 0xff
   438: 33 06 02                 s1 = 0x2
   441: 53 29 c0 00 2d           jump @39 if a2 <u 192
      :                          @34
   446: 33 06 03                 s1 = 0x3
   449: 53 29 e0 00 25           jump @39 if a2 <u 224
      :                          @35
   454: 33 06 04                 s1 = 0x4
   457: 53 29 f0 00 1d           jump @39 if a2 <u 240
      :                          @36
   462: 33 06 05                 s1 = 0x5
   465: 53 29 f8 00 15           jump @39 if a2 <u 248
      :                          @37
   470: 33 06 06                 s1 = 0x6
   473: 53 29 fc 00 0d           jump @39 if a2 <u 252
      :                          @38
   478: 88 98 fe 00              a1 = a2 <u 0xfe
   482: 9a 86 08                 s1 = 0x8 - a1
   485: 01                       fallthrough
      :                          @39
   486: 82 15                    s0 = u64 [sp]
   488: ac 65 b5 01              jump @92 if s0 <u s1
      :                          @40
   492: 64 68                    a1 = s1
   494: 50 10 08 77 0c           ra = 8, jump @324
      :                          @41 [@dyn 4]
   499: 82 17 08                 a0 = u64 [sp + 0x8]
   502: aa 65 a7 01              jump @92 if s0 == s1
      :                          @42
   506: c8 67 07                 a0 = a0 + s1
   509: 7d 78                    a1 = i8 [a0]
   511: c9 65 05                 s0 = s0 - s1
   514: 33 06 01                 s1 = 0x1
   517: 59 08 37                 jump @49 if a1 >=s 0
      :                          @43
   520: 84 89 ff 00              a2 = a1 & 0xff
   524: 33 06 02                 s1 = 0x2
   527: 53 29 c0 00 2d           jump @49 if a2 <u 192
      :                          @44
   532: 33 06 03                 s1 = 0x3
   535: 53 29 e0 00 25           jump @49 if a2 <u 224
      :                          @45
   540: 33 06 04                 s1 = 0x4
   543: 53 29 f0 00 1d           jump @49 if a2 <u 240
      :                          @46
   548: 33 06 05                 s1 = 0x5
   551: 53 29 f8 00 15           jump @49 if a2 <u 248
      :                          @47
   556: 33 06 06                 s1 = 0x6
   559: 53 29 fc 00 0d           jump @49 if a2 <u 252
      :                          @48
   564: 88 98 fe 00              a1 = a2 <u 0xfe
   568: 9a 86 08                 s1 = 0x8 - a1
   571: 01                       fallthrough
      :                          @49
   572: ac 65 61 01              jump @92 if s0 <u s1
      :                          @50
   576: 64 68                    a1 = s1
   578: 7b 17 08                 u64 [sp + 0x8] = a0
   581: 50 10 0a 20 0c           ra = 10, jump @324
      :                          @51 [@dyn 5]
   586: 82 17 08                 a0 = u64 [sp + 0x8]
   589: c8 67 07                 a0 = a0 + s1
   592: c9 65 0a                 a3 = s0 - s1
   595: 7b 1a 08                 u64 [sp + 0x8] = a3
   598: ab 65 07                 jump @53 if s0 != s1
      :                          @52
   601: 33 06                    s1 = 0
   603: 28 42                    jump @61
      :                          @53
   605: 7d 78                    a1 = i8 [a0]
   607: 33 06 01                 s1 = 0x1
   610: 59 08 37                 jump @60 if a1 >=s 0
      :                          @54
   613: 84 89 ff 00              a2 = a1 & 0xff
   617: 33 06 02                 s1 = 0x2
   620: 53 29 c0 00 2d           jump @60 if a2 <u 192
      :                          @55
   625: 33 06 03                 s1 = 0x3
   628: 53 29 e0 00 25           jump @60 if a2 <u 224
      :                          @56
   633: 33 06 04                 s1 = 0x4
   636: 53 29 f0 00 1d           jump @60 if a2 <u 240
      :                          @57
   641: 33 06 05                 s1 = 0x5
   644: 53 29 f8 00 15           jump @60 if a2 <u 248
      :                          @58
   649: 33 06 06                 s1 = 0x6
   652: 53 29 fc 00 0d           jump @60 if a2 <u 252
      :                          @59
   657: 88 98 fe 00              a1 = a2 <u 0xfe
   661: 9a 86 08                 s1 = 0x8 - a1
   664: 01                       fallthrough
      :                          @60
   665: ac 6a 04 01              jump @92 if a3 <u s1
      :                          @61
   669: 64 68                    a1 = s1
   671: 64 75                    s0 = a0
   673: 50 10 0c c4 0b           ra = 12, jump @324
      :                          @62 [@dyn 6]
   678: 51 07 f7 00              jump @92 if a0 == 0
      :                          @63
   682: 82 17 08                 a0 = u64 [sp + 0x8]
   685: e4 67 07                 a0 = maxu(a0, s1)
   688: c9 67 07                 a0 = a0 - s1
   691: 53 17 60 ea 00           jump @92 if a0 <u 96
      :                          @64
   696: c8 56 08                 a1 = s1 + s0
   699: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   702: 95 87 60                 a0 = a1 + 0x60
   705: 7b 17 08                 u64 [sp + 0x8] = a0
   708: 51 06 4c                 jump @75 if s1 == 0
      :                          @65
   711: 7d 78                    a1 = i8 [a0]
   713: 33 05 01                 s0 = 0x1
   716: 59 08 37                 jump @72 if a1 >=s 0
      :                          @66
   719: 84 89 ff 00              a2 = a1 & 0xff
   723: 33 05 02                 s0 = 0x2
   726: 53 29 c0 00 2d           jump @72 if a2 <u 192
      :                          @67
   731: 33 05 03                 s0 = 0x3
   734: 53 29 e0 00 25           jump @72 if a2 <u 224
      :                          @68
   739: 33 05 04                 s0 = 0x4
   742: 53 29 f0 00 1d           jump @72 if a2 <u 240
      :                          @69
   747: 33 05 05                 s0 = 0x5
   750: 53 29 f8 00 15           jump @72 if a2 <u 248
      :                          @70
   755: 33 05 06                 s0 = 0x6
   758: 53 29 fc 00 0d           jump @72 if a2 <u 252
      :                          @71
   763: 88 98 fe 00              a1 = a2 <u 0xfe
   767: 9a 85 08                 s0 = 0x8 - a1
   770: 01                       fallthrough
      :                          @72
   771: ac 56 58 01              jump @111 if s1 <u s0
      :                          @73
   775: 64 58                    a1 = s0
   777: 50 10 0e 5c 0b           ra = 14, jump @324
      :                          @74 [@dyn 7]
   782: 28 07                    jump @76
      :                          @75
   784: 33 05                    s0 = 0
   786: 33 07                    a0 = 0
   788: 01                       fallthrough
      :                          @76
   789: e4 56 08                 a1 = maxu(s1, s0)
   792: c9 58 08                 a1 = a1 - s0
   795: e4 78 08                 a1 = maxu(a1, a0)
   798: c9 78 08                 a1 = a1 - a0
   801: 33 09 20                 a2 = 0x20
   804: ac 98 79                 jump @92 if a1 <u a2
      :                          @77
   807: 82 19 08                 a2 = u64 [sp + 0x8]
   810: c8 95 05                 s0 = s0 + a2
   813: c8 57 07                 a0 = a0 + s0
   816: 95 85 e0                 s0 = a1 + 0xffffffffffffffe0
   819: 95 77 20                 a0 = a0 + 0x20
   822: 7b 17 08                 u64 [sp + 0x8] = a0
   825: 51 05 4c                 jump @88 if s0 == 0
      :                          @78
   828: 7d 78                    a1 = i8 [a0]
   830: 33 06 01                 s1 = 0x1
   833: 59 08 37                 jump @85 if a1 >=s 0
      :                          @79
   836: 84 89 ff 00              a2 = a1 & 0xff
   840: 33 06 02                 s1 = 0x2
   843: 53 29 c0 00 2d           jump @85 if a2 <u 192
      :                          @80
   848: 33 06 03                 s1 = 0x3
   851: 53 29 e0 00 25           jump @85 if a2 <u 224
      :                          @81
   856: 33 06 04                 s1 = 0x4
   859: 53 29 f0 00 1d           jump @85 if a2 <u 240
      :                          @82
   864: 33 06 05                 s1 = 0x5
   867: 53 29 f8 00 15           jump @85 if a2 <u 248
      :                          @83
   872: 33 06 06                 s1 = 0x6
   875: 53 29 fc 00 0d           jump @85 if a2 <u 252
      :                          @84
   880: 88 98 fe 00              a1 = a2 <u 0xfe
   884: 9a 86 08                 s1 = 0x8 - a1
   887: 01                       fallthrough
      :                          @85
   888: ac 65 e4 00              jump @112 if s0 <u s1
      :                          @86
   892: 64 68                    a1 = s1
   894: 50 10 10 e7 0a           ra = 16, jump @324
      :                          @87 [@dyn 8]
   899: 28 05                    jump @89
      :                          @88
   901: 33 06                    s1 = 0
   903: 01                       fallthrough
      :                          @89
   904: ae 56 15                 jump @92 if s1 >=u s0
      :                          @90
   907: 82 17 08                 a0 = u64 [sp + 0x8]
   910: c8 67 07                 a0 = a0 + s1
   913: 7c 78                    a1 = u8 [a0]
   915: 51 08 24                 jump @94 if a1 == 0
      :                          @91
   918: 33 07                    a0 = 0
   920: 33 05                    s0 = 0
   922: 28 97 00                 jump @107
      :                          @92
   925: 33 08                    a1 = 0
   927: 33 07 00 00 01           a0 = 0x10000
   932: 01                       fallthrough
      :                          @93
   933: 82 10 f0 00              ra = u64 [sp + 0xf0]
   937: 82 15 e8 00              s0 = u64 [sp + 0xe8]
   941: 82 16 e0 00              s1 = u64 [sp + 0xe0]
   945: 95 11 f8 00              sp = sp + 0xf8
   949: 32 00                    ret
      :                          @94
   951: e4 65 08                 a1 = maxu(s0, s1)
   954: c9 68 08                 a1 = a1 - s1
   957: 95 75 01                 s0 = a0 + 0x1
   960: 33 07 01                 a0 = 0x1
   963: e4 78 07                 a0 = maxu(a1, a0)
   966: 33 09 02                 a2 = 0x2
   969: 95 7a ff                 a3 = a0 + 0xffffffffffffffff
   972: ae 98 09                 jump @96 if a1 >=u a2
      :                          @95
   975: 33 06                    s1 = 0
   977: 33 07                    a0 = 0
   979: 28 51                    jump @106
      :                          @96
   981: 7d 57                    a0 = i8 [s0]
   983: 33 06 01                 s1 = 0x1
   986: 59 07 37                 jump @103 if a0 >=s 0
      :                          @97
   989: 84 77 ff 00              a0 = a0 & 0xff
   993: 33 06 02                 s1 = 0x2
   996: 53 27 c0 00 2d           jump @103 if a0 <u 192
      :                          @98
  1001: 33 06 03                 s1 = 0x3
  1004: 53 27 e0 00 25           jump @103 if a0 <u 224
      :                          @99
  1009: 33 06 04                 s1 = 0x4
  1012: 53 27 f0 00 1d           jump @103 if a0 <u 240
      :                          @100
  1017: 33 06 05                 s1 = 0x5
  1020: 53 27 f8 00 15           jump @103 if a0 <u 248
      :                          @101
  1025: 33 06 06                 s1 = 0x6
  1028: 53 27 fc 00 0d           jump @103 if a0 <u 252
      :                          @102
  1033: 88 77 fe 00              a0 = a0 <u 0xfe
  1037: 9a 76 08                 s1 = 0x8 - a0
  1040: 01                       fallthrough
      :                          @103
  1041: 7b 1a 08                 u64 [sp + 0x8] = a3
  1044: ac 6a 49                 jump @113 if a3 <u s1
      :                          @104
  1047: 64 57                    a0 = s0
  1049: 64 68                    a1 = s1
  1051: 50 10 12 4a 0a           ra = 18, jump @324
      :                          @105 [@dyn 9]
  1056: 82 1a 08                 a3 = u64 [sp + 0x8]
  1059: 01                       fallthrough
      :                          @106
  1060: c8 65 05                 s0 = s0 + s1
  1063: e4 6a 08                 a1 = maxu(a3, s1)
  1066: c9 68 08                 a1 = a1 - s1
  1069: e6 78 07                 a0 = minu(a1, a0)
  1072: 01                       fallthrough
      :                          @107
  1073: c8 75 06                 s1 = s0 + a0
  1076: 95 17 10                 a0 = sp + 0x10
  1079: 33 09 80 00              a2 = 0x80
  1083: 33 08                    a1 = 0
  1085: 50 10 14 b5 04           ra = 20, jump @218
      :                          @108 [@dyn 10]
  1090: 80 57                    a0 = u32 [s0]
  1092: 80 68 fc                 a1 = u32 [s1 + 0xfffffffffffffffc]
  1095: 33 09 64                 a2 = 0x64
  1098: 95 1a 10                 a3 = sp + 0x10
  1101: 0a 0b                    ecalli 11 // 'transfer'
  1103: 95 17 a0 00              a0 = sp + 0xa0
  1107: 33 08 08                 a1 = 0x8
  1110: 28 4f ff                 jump @93
      :                          @109
  1113: 00                       trap
      :                          @110
  1114: 00                       trap
      :                          @111
  1115: 00                       trap
      :                          @112
  1116: 00                       trap
      :                          @113
  1117: 00                       trap
      :                          @114 [export #2: 'on_transfer']
  1118: 33 07 00 00 01           a0 = 0x10000
  1123: 33 08                    a1 = 0
  1125: 32 00                    ret
      :                          @115
  1127: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1130: 7b 10 40                 u64 [sp + 0x40] = ra
  1133: 7b 15 38                 u64 [sp + 0x38] = s0
  1136: 7b 16 30                 u64 [sp + 0x30] = s1
  1139: c8 89 09                 a2 = a2 + a1
  1142: ac 89 52                 jump @123 if a2 <u a1
      :                          @116
  1145: 64 75                    s0 = a0
  1147: 82 77                    a0 = u64 [a0]
  1149: 97 78 01                 a1 = a0 << 0x1
  1152: 33 0a 08                 a3 = 0x8
  1155: e4 a9 09                 a2 = maxu(a2, a3)
  1158: e4 98 06                 s1 = maxu(a1, a2)
  1161: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1164: 98 88 3f                 a1 = a1 >> 0x3f
  1167: 51 07 12                 jump @118 if a0 == 0
      :                          @117
  1170: 82 59 08                 a2 = u64 [s0 + 0x8]
  1173: 7b 19 18                 u64 [sp + 0x18] = a2
  1176: 49 11 20 01              u64 [sp + 32] = 0x1
  1180: 7b 17 28                 u64 [sp + 0x28] = a0
  1183: 28 06                    jump @119
      :                          @118
  1185: 49 11 20                 u64 [sp + 32] = 0
  1188: 01                       fallthrough
      :                          @119
  1189: 64 17                    a0 = sp
  1191: 95 1a 18                 a3 = sp + 0x18
  1194: 64 69                    a2 = s1
  1196: 50 10 16 32              ra = 22, jump @127
      :                          @120 [@dyn 11]
  1200: 82 18                    a1 = u64 [sp]
  1202: 82 17 08                 a0 = u64 [sp + 0x8]
  1205: 51 08 14                 jump @124 if a1 == 0
      :                          @121
  1208: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1218: aa 87 0d                 jump @125 if a0 == a1
      :                          @122
  1221: 52 07 18                 jump @126 if a0 != 0
      :                          @123
  1224: 00                       trap
      :                          @124
  1225: 7b 57 08                 u64 [s0 + 0x8] = a0
  1228: 7b 56                    u64 [s0] = s1
  1230: 01                       fallthrough
      :                          @125
  1231: 82 10 40                 ra = u64 [sp + 0x40]
  1234: 82 15 38                 s0 = u64 [sp + 0x38]
  1237: 82 16 30                 s1 = u64 [sp + 0x30]
  1240: 95 11 48                 sp = sp + 0x48
  1243: 32 00                    ret
      :                          @126
  1245: 00                       trap
      :                          @127
  1246: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  1249: 7b 10 30                 u64 [sp + 0x30] = ra
  1252: 7b 15 28                 u64 [sp + 0x28] = s0
  1255: 7b 16 20                 u64 [sp + 0x20] = s1
  1258: 64 95                    s0 = a2
  1260: 64 72                    t0 = a0
  1262: 51 08 79                 jump @137 if a1 == 0
      :                          @128
  1265: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1268: 51 07 7c                 jump @138 if a0 == 0
      :                          @129
  1271: 82 a9 10                 a2 = u64 [a3 + 0x10]
  1274: 51 09 aa 00              jump @145 if a2 == 0
      :                          @130
  1278: 82 a8                    a1 = u64 [a3]
  1280: 33 06 10 00 03           s1 = 0x30010
  1285: 33 03 00 00 01           t1 = 0x10000
  1290: c8 36 06                 s1 = s1 + t1
  1293: 01                       fallthrough
      :                          @131
  1294: 82 6a                    a3 = u64 [s1]
  1296: c8 5a 07                 a0 = a3 + s0
  1299: ac a7 cf 00              jump @151 if a0 <u a3
      :                          @132
  1303: 95 7b 01                 a4 = a0 + 0x1
  1306: 88 bc 01                 a5 = a4 <u 0x1
  1309: d8 b3 0b                 a4 = t1 <u a4
  1312: d4 cb 0b                 a4 = a4 | a5
  1315: 52 0b bf 00              jump @151 if a4 != 0
      :                          @133
  1319: 82 6b                    a4 = u64 [s1]
  1321: ab ab e5                 jump @131 if a4 != a3
      :                          @134
  1324: 7b 67                    u64 [s1] = a0
  1326: 33 0c                    a5 = 0
  1328: 7b 12 18                 u64 [sp + 0x18] = t0
  1331: 33 0a 10 00 03           a3 = 0x30010
  1336: 33 0b 00 00 01           a4 = 0x10000
  1341: 7b 1a                    u64 [sp] = a3
  1343: c8 ba 0a                 a3 = a3 + a4
  1346: c9 7a 07                 a0 = a3 - a0
  1349: 7b 17 10                 u64 [sp + 0x10] = a0
  1352: 7b 18 08                 u64 [sp + 0x8] = a1
  1355: 64 96                    s1 = a2
  1357: 50 10 18 f3 02           ra = 24, jump @200
      :                          @135 [@dyn 12]
  1362: 54 36 00 00 01 98 00     jump @152 if s1 <=u 65536
      :                          @136
  1369: 82 12 18                 t0 = u64 [sp + 0x18]
  1372: 82 18 10                 a1 = u64 [sp + 0x10]
  1375: 33 07                    a0 = 0
  1377: 7b 28 08                 u64 [t0 + 0x8] = a1
  1380: 28 b5 00                 jump @158
      :                          @137
  1383: 49 12 08                 u64 [t0 + 8] = 0
  1386: 33 07 01                 a0 = 0x1
  1389: 28 ac 00                 jump @158
      :                          @138
  1392: 33 09 10 00 03           a2 = 0x30010
  1397: 33 07 00 00 01           a0 = 0x10000
  1402: c8 79 09                 a2 = a2 + a0
  1405: 01                       fallthrough
      :                          @139
  1406: 82 9a                    a3 = u64 [a2]
  1408: c8 5a 08                 a1 = a3 + s0
  1411: ac a8 5f                 jump @151 if a1 <u a3
      :                          @140
  1414: 95 8b 01                 a4 = a1 + 0x1
  1417: 88 bc 01                 a5 = a4 <u 0x1
  1420: d8 b7 0b                 a4 = a0 <u a4
  1423: d4 cb 0b                 a4 = a4 | a5
  1426: 52 0b 50                 jump @151 if a4 != 0
      :                          @141
  1429: 82 9b                    a4 = u64 [a2]
  1431: ab ab e7                 jump @139 if a4 != a3
      :                          @142
  1434: 7b 98                    u64 [a2] = a1
  1436: 33 0c                    a5 = 0
  1438: 01                       fallthrough
      :                          @143
  1439: ab ab df                 jump @139 if a4 != a3
      :                          @144
  1442: 28 31                    jump @150
      :                          @145
  1444: 33 09 10 00 03           a2 = 0x30010
  1449: 33 07 00 00 01           a0 = 0x10000
  1454: c8 79 09                 a2 = a2 + a0
  1457: 01                       fallthrough
      :                          @146
  1458: 82 9a                    a3 = u64 [a2]
  1460: c8 5a 08                 a1 = a3 + s0
  1463: ac a8 2b                 jump @151 if a1 <u a3
      :                          @147
  1466: 95 8b 01                 a4 = a1 + 0x1
  1469: 88 bc 01                 a5 = a4 <u 0x1
  1472: d8 b7 0b                 a4 = a0 <u a4
  1475: d4 cb 0b                 a4 = a4 | a5
  1478: 52 0b 1c                 jump @151 if a4 != 0
      :                          @148
  1481: 82 9b                    a4 = u64 [a2]
  1483: ab ab e7                 jump @146 if a4 != a3
      :                          @149
  1486: 7b 98                    u64 [a2] = a1
  1488: 33 0c                    a5 = 0
  1490: 01                       fallthrough
      :                          @150
  1491: 33 07 10 00 04           a0 = 0x40010
  1496: c9 87 08                 a1 = a0 - a1
  1499: 33 07                    a0 = 0
  1501: 7b 28 08                 u64 [t0 + 0x8] = a1
  1504: 28 39                    jump @158
      :                          @151
  1506: 33 07 01                 a0 = 0x1
  1509: 7b 27 08                 u64 [t0 + 0x8] = a0
  1512: 28 31                    jump @158
      :                          @152
  1514: 64 6c                    a5 = s1
  1516: 82 17                    a0 = u64 [sp]
  1518: 95 77 00 00 01           a0 = a0 + 0x10000
  1523: 82 12 18                 t0 = u64 [sp + 0x18]
  1526: 82 16 08                 s1 = u64 [sp + 0x8]
  1529: 01                       fallthrough
      :                          @153
  1530: 82 78                    a1 = u64 [a0]
  1532: c9 87 09                 a2 = a0 - a1
  1535: ab 69 11                 jump @157 if a2 != s1
      :                          @154
  1538: c9 c8 09                 a2 = a1 - a5
  1541: 01                       fallthrough
      :                          @155
  1542: 82 7a                    a3 = u64 [a0]
  1544: ab 8a f2                 jump @153 if a3 != a1
      :                          @156
  1547: 7b 79                    u64 [a0] = a2
  1549: 33 0b                    a4 = 0
  1551: 01                       fallthrough
      :                          @157
  1552: 82 18 10                 a1 = u64 [sp + 0x10]
  1555: 33 07                    a0 = 0
  1557: 7b 28 08                 u64 [t0 + 0x8] = a1
  1560: 01                       fallthrough
      :                          @158
  1561: 7b 25 10                 u64 [t0 + 0x10] = s0
  1564: 7b 27                    u64 [t0] = a0
  1566: 82 10 30                 ra = u64 [sp + 0x30]
  1569: 82 15 28                 s0 = u64 [sp + 0x28]
  1572: 82 16 20                 s1 = u64 [sp + 0x20]
  1575: 95 11 38                 sp = sp + 0x38
  1578: 32 00                    ret
      :                          @159
  1580: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1583: 7b 10 40                 u64 [sp + 0x40] = ra
  1586: 7b 15 38                 u64 [sp + 0x38] = s0
  1589: 7b 16 30                 u64 [sp + 0x30] = s1
  1592: 95 88 01                 a1 = a1 + 0x1
  1595: 51 08 53                 jump @167 if a1 == 0
      :                          @160
  1598: 64 75                    s0 = a0
  1600: 82 77                    a0 = u64 [a0]
  1602: 97 79 01                 a2 = a0 << 0x1
  1605: 33 0a 08                 a3 = 0x8
  1608: e4 a8 08                 a1 = maxu(a1, a3)
  1611: e4 89 06                 s1 = maxu(a2, a1)
  1614: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1617: 98 88 3f                 a1 = a1 >> 0x3f
  1620: 51 07 12                 jump @162 if a0 == 0
      :                          @161
  1623: 82 59 08                 a2 = u64 [s0 + 0x8]
  1626: 7b 19 18                 u64 [sp + 0x18] = a2
  1629: 49 11 20 01              u64 [sp + 32] = 0x1
  1633: 7b 17 28                 u64 [sp + 0x28] = a0
  1636: 28 06                    jump @163
      :                          @162
  1638: 49 11 20                 u64 [sp + 32] = 0
  1641: 01                       fallthrough
      :                          @163
  1642: 64 17                    a0 = sp
  1644: 95 1a 18                 a3 = sp + 0x18
  1647: 64 69                    a2 = s1
  1649: 50 10 1a 6d fe           ra = 26, jump @127
      :                          @164 [@dyn 13]
  1654: 82 18                    a1 = u64 [sp]
  1656: 82 17 08                 a0 = u64 [sp + 0x8]
  1659: 51 08 14                 jump @168 if a1 == 0
      :                          @165
  1662: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1672: aa 87 0d                 jump @169 if a0 == a1
      :                          @166
  1675: 52 07 18                 jump @170 if a0 != 0
      :                          @167
  1678: 00                       trap
      :                          @168
  1679: 7b 57 08                 u64 [s0 + 0x8] = a0
  1682: 7b 56                    u64 [s0] = s1
  1684: 01                       fallthrough
      :                          @169
  1685: 82 10 40                 ra = u64 [sp + 0x40]
  1688: 82 15 38                 s0 = u64 [sp + 0x38]
  1691: 82 16 30                 s1 = u64 [sp + 0x30]
  1694: 95 11 48                 sp = sp + 0x48
  1697: 32 00                    ret
      :                          @170
  1699: 00                       trap
      :                          @171 [@dyn 14]
  1700: 82 72                    t0 = u64 [a0]
  1702: 33 09 00 00 ff           a2 = 0xffffffffffff0000
  1707: 95 2a ff ff fe           a3 = t0 + 0xfffffffffffeffff
  1712: ac 9a 28                 jump @177 if a3 <u a2
      :                          @172
  1715: 82 77 08                 a0 = u64 [a0 + 0x8]
  1718: 33 09 10 00 03           a2 = 0x30010
  1723: 95 99 00 00 01           a2 = a2 + 0x10000
  1728: 01                       fallthrough
      :                          @173
  1729: 82 9a                    a3 = u64 [a2]
  1731: c9 a9 0b                 a4 = a2 - a3
  1734: ab 7b 12                 jump @177 if a4 != a0
      :                          @174
  1737: c9 2a 0b                 a4 = a3 - t0
  1740: 01                       fallthrough
      :                          @175
  1741: 82 9c                    a5 = u64 [a2]
  1743: ab ac f2                 jump @173 if a5 != a3
      :                          @176
  1746: 7b 9b                    u64 [a2] = a4
  1748: 33 08                    a1 = 0
  1750: 32 00                    ret
      :                          @177
  1752: 32 00                    ret
      :                          @178 [@dyn 15]
  1754: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  1757: 7b 10 18                 u64 [sp + 0x18] = ra
  1760: 7b 15 10                 u64 [sp + 0x10] = s0
  1763: 7b 16 08                 u64 [sp + 0x8] = s1
  1766: 64 75                    s0 = a0
  1768: 82 7a 10                 a3 = u64 [a0 + 0x10]
  1771: 82 77                    a0 = u64 [a0]
  1773: c9 a7 07                 a0 = a0 - a3
  1776: 64 96                    s1 = a2
  1778: ac 97 2a                 jump @181 if a0 <u a2
      :                          @179
  1781: 7b 1a                    u64 [sp] = a3
  1783: 82 57 08                 a0 = u64 [s0 + 0x8]
  1786: c8 a7 07                 a0 = a0 + a3
  1789: 64 69                    a2 = s1
  1791: 50 10 20 41 01           ra = 32, jump @200
      :                          @180 [@dyn 16]
  1796: 82 17                    a0 = u64 [sp]
  1798: c8 76 06                 s1 = s1 + a0
  1801: 7b 56 10                 u64 [s0 + 0x10] = s1
  1804: 33 07                    a0 = 0
  1806: 82 10 18                 ra = u64 [sp + 0x18]
  1809: 82 15 10                 s0 = u64 [sp + 0x10]
  1812: 82 16 08                 s1 = u64 [sp + 0x8]
  1815: 95 11 20                 sp = sp + 0x20
  1818: 32 00                    ret
      :                          @181
  1820: 64 57                    a0 = s0
  1822: 7b 18                    u64 [sp] = a1
  1824: 64 a8                    a1 = a3
  1826: 64 69                    a2 = s1
  1828: 50 10 22 43 fd           ra = 34, jump @115
      :                          @182 [@dyn 17]
  1833: 82 18                    a1 = u64 [sp]
  1835: 82 5a 10                 a3 = u64 [s0 + 0x10]
  1838: 28 c7                    jump @179
      :                          @183 [@dyn 18]
  1840: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  1843: 7b 10 20                 u64 [sp + 0x20] = ra
  1846: 7b 15 18                 u64 [sp + 0x18] = s0
  1849: 7b 16 10                 u64 [sp + 0x10] = s1
  1852: 64 86                    s1 = a1
  1854: 83 88                    i32 a1 = a1 + 0
  1856: 33 09 80 00              a2 = 0x80
  1860: 64 7a                    a3 = a0
  1862: ae 98 2b                 jump @188 if a1 >=u a2
      :                          @184
  1865: 82 a8 10                 a1 = u64 [a3 + 0x10]
  1868: 82 a7                    a0 = u64 [a3]
  1870: ab 78 12                 jump @187 if a1 != a0
      :                          @185
  1873: 64 a7                    a0 = a3
  1875: 64 a5                    s0 = a3
  1877: 50 10 26 d7 fe           ra = 38, jump @159
      :                          @186 [@dyn 19]
  1882: 64 5a                    a3 = s0
  1884: 82 58 10                 a1 = u64 [s0 + 0x10]
  1887: 01                       fallthrough
      :                          @187
  1888: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1891: c8 87 07                 a0 = a0 + a1
  1894: 78 76                    u8 [a0] = s1
  1896: 95 88 01                 a1 = a1 + 0x1
  1899: 7b a8 10                 u64 [a3 + 0x10] = a1
  1902: 28 ab 00                 jump @196
      :                          @188
  1905: 8b 67 0b                 i32 a0 = s1 >> 0xb
  1908: 48 11 0c                 u32 [sp + 12] = 0
  1911: 52 07 1c                 jump @190 if a0 != 0
      :                          @189
  1914: 98 67 06                 a0 = s1 >> 0x6
  1917: 86 77 c0 00              a0 = a0 | 0xc0
  1921: 78 17 0c                 u8 [sp + 0xc] = a0
  1924: 84 67 3f                 a0 = s1 & 0x3f
  1927: 86 77 80 00              a0 = a0 | 0x80
  1931: 78 17 0d                 u8 [sp + 0xd] = a0
  1934: 33 06 02                 s1 = 0x2
  1937: 28 63                    jump @193
      :                          @190
  1939: 8b 67 10                 i32 a0 = s1 >> 0x10
  1942: 52 07 29                 jump @192 if a0 != 0
      :                          @191
  1945: 98 67 0c                 a0 = s1 >> 0xc
  1948: 86 77 e0 00              a0 = a0 | 0xe0
  1952: 78 17 0c                 u8 [sp + 0xc] = a0
  1955: 97 67 34                 a0 = s1 << 0x34
  1958: 98 77 3a                 a0 = a0 >> 0x3a
  1961: 95 77 80 00              a0 = a0 + 0x80
  1965: 78 17 0d                 u8 [sp + 0xd] = a0
  1968: 84 67 3f                 a0 = s1 & 0x3f
  1971: 86 77 80 00              a0 = a0 | 0x80
  1975: 78 17 0e                 u8 [sp + 0xe] = a0
  1978: 33 06 03                 s1 = 0x3
  1981: 28 37                    jump @193
      :                          @192
  1983: 97 67 2b                 a0 = s1 << 0x2b
  1986: 98 77 3d                 a0 = a0 >> 0x3d
  1989: 95 77 f0 00              a0 = a0 + 0xf0
  1993: 78 17 0c                 u8 [sp + 0xc] = a0
  1996: 97 67 2e                 a0 = s1 << 0x2e
  1999: 98 77 3a                 a0 = a0 >> 0x3a
  2002: 95 77 80 00              a0 = a0 + 0x80
  2006: 78 17 0d                 u8 [sp + 0xd] = a0
  2009: 97 67 34                 a0 = s1 << 0x34
  2012: 98 77 3a                 a0 = a0 >> 0x3a
  2015: 95 77 80 00              a0 = a0 + 0x80
  2019: 78 17 0e                 u8 [sp + 0xe] = a0
  2022: 84 67 3f                 a0 = s1 & 0x3f
  2025: 86 77 80 00              a0 = a0 | 0x80
  2029: 78 17 0f                 u8 [sp + 0xf] = a0
  2032: 33 06 04                 s1 = 0x4
  2035: 01                       fallthrough
      :                          @193
  2036: 82 a5 10                 s0 = u64 [a3 + 0x10]
  2039: 82 a7                    a0 = u64 [a3]
  2041: c9 57 07                 a0 = a0 - s0
  2044: ac 67 2d                 jump @197 if a0 <u s1
      :                          @194
  2047: 7b 1a                    u64 [sp] = a3
  2049: 82 a7 08                 a0 = u64 [a3 + 0x8]
  2052: c8 57 07                 a0 = a0 + s0
  2055: 95 18 0c                 a1 = sp + 0xc
  2058: 64 69                    a2 = s1
  2060: 50 10 28 34              ra = 40, jump @200
      :                          @195 [@dyn 20]
  2064: c8 56 06                 s1 = s1 + s0
  2067: 82 17                    a0 = u64 [sp]
  2069: 7b 76 10                 u64 [a0 + 0x10] = s1
  2072: 01                       fallthrough
      :                          @196
  2073: 33 07                    a0 = 0
  2075: 82 10 20                 ra = u64 [sp + 0x20]
  2078: 82 15 18                 s0 = u64 [sp + 0x18]
  2081: 82 16 10                 s1 = u64 [sp + 0x10]
  2084: 95 11 28                 sp = sp + 0x28
  2087: 32 00                    ret
      :                          @197
  2089: 64 a7                    a0 = a3
  2091: 64 58                    a1 = s0
  2093: 64 69                    a2 = s1
  2095: 64 a5                    s0 = a3
  2097: 50 10 2a 36 fc           ra = 42, jump @115
      :                          @198 [@dyn 21]
  2102: 64 5a                    a3 = s0
  2104: 82 55 10                 s0 = u64 [s0 + 0x10]
  2107: 28 c4                    jump @194
      :                          @199 [@dyn 22]
  2109: 28 45 04                 jump @286
      :                          @200
  2112: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  2115: 7b 10 18                 u64 [sp + 0x18] = ra
  2118: 7b 15 10                 u64 [sp + 0x10] = s0
  2121: 7b 16 08                 u64 [sp + 0x8] = s1
  2124: 53 19 10 64              jump @209 if a2 <u 16
      :                          @201
  2128: 8d 7a                    i32 a3 = -a0
  2130: 84 a2 07                 t0 = a3 & 0x7
  2133: c8 27 0b                 a4 = a0 + t0
  2136: 51 02 15                 jump @204 if t0 == 0
      :                          @202
  2139: 64 8c                    a5 = a1
  2141: 64 75                    s0 = a0
  2143: 01                       fallthrough
      :                          @203
  2144: 7c ca                    a3 = u8 [a5]
  2146: 78 5a                    u8 [s0] = a3
  2148: 95 55 01                 s0 = s0 + 0x1
  2151: 95 cc 01                 a5 = a5 + 0x1
  2154: ac b5 f6                 jump @203 if s0 <u a4
      :                          @204
  2157: c8 28 03                 t1 = a1 + t0
  2160: c9 29 02                 t0 = a2 - t0
  2163: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  2166: 84 38 07                 a1 = t1 & 0x7
  2169: c8 4b 0a                 a3 = a4 + t2
  2172: 51 08 3b                 jump @211 if a1 == 0
      :                          @205
  2175: 58 04 4b                 jump @214 if t2 <=s 0
      :                          @206
  2178: 97 38 03                 a1 = t1 << 0x3
  2181: 84 80 38                 ra = a1 & 0x38
  2184: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  2187: 82 c5                    s0 = u64 [a5]
  2189: 8d 88                    i32 a1 = -a1
  2191: 84 88 38                 a1 = a1 & 0x38
  2194: 95 cc 08                 a5 = a5 + 0x8
  2197: 01                       fallthrough
      :                          @207
  2198: 82 c6                    s1 = u64 [a5]
  2200: d0 05 05                 s0 = s0 >> ra
  2203: cf 86 09                 a2 = s1 << a1
  2206: d4 59 09                 a2 = a2 | s0
  2209: 7b b9                    u64 [a4] = a2
  2211: 95 bb 08                 a4 = a4 + 0x8
  2214: 95 cc 08                 a5 = a5 + 0x8
  2217: 64 65                    s0 = s1
  2219: ac ab eb                 jump @207 if a4 <u a3
      :                          @208
  2222: 28 1c                    jump @214
      :                          @209
  2224: 64 7a                    a3 = a0
  2226: 52 09 21                 jump @215 if a2 != 0
      :                          @210
  2229: 28 2f                    jump @217
      :                          @211
  2231: 58 04 13                 jump @214 if t2 <=s 0
      :                          @212
  2234: 64 38                    a1 = t1
  2236: 01                       fallthrough
      :                          @213
  2237: 82 89                    a2 = u64 [a1]
  2239: 7b b9                    u64 [a4] = a2
  2241: 95 bb 08                 a4 = a4 + 0x8
  2244: 95 88 08                 a1 = a1 + 0x8
  2247: ac ab f6                 jump @213 if a4 <u a3
      :                          @214
  2250: c8 43 08                 a1 = t1 + t2
  2253: 84 29 07                 a2 = t0 & 0x7
  2256: 51 09 14                 jump @217 if a2 == 0
      :                          @215
  2259: c8 a9 09                 a2 = a2 + a3
  2262: 01                       fallthrough
      :                          @216
  2263: 7c 8b                    a4 = u8 [a1]
  2265: 78 ab                    u8 [a3] = a4
  2267: 95 aa 01                 a3 = a3 + 0x1
  2270: 95 88 01                 a1 = a1 + 0x1
  2273: ac 9a f6                 jump @216 if a3 <u a2
      :                          @217
  2276: 82 10 18                 ra = u64 [sp + 0x18]
  2279: 82 15 10                 s0 = u64 [sp + 0x10]
  2282: 82 16 08                 s1 = u64 [sp + 0x8]
  2285: 95 11 20                 sp = sp + 0x20
  2288: 32 00                    ret
      :                          @218
  2290: 8d 7a                    i32 a3 = -a0
  2292: 84 aa 07                 a3 = a3 & 0x7
  2295: c8 a7 0b                 a4 = a0 + a3
  2298: 51 0a 0e                 jump @221 if a3 == 0
      :                          @219
  2301: 64 7c                    a5 = a0
  2303: 01                       fallthrough
      :                          @220
  2304: 78 c8                    u8 [a5] = a1
  2306: 95 cc 01                 a5 = a5 + 0x1
  2309: ac bc fb                 jump @220 if a5 <u a4
      :                          @221
  2312: c9 a9 03                 t1 = a2 - a3
  2315: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  2318: c8 cb 0a                 a3 = a4 + a5
  2321: 58 0c 1d                 jump @224 if a5 <=s 0
      :                          @222
  2324: 84 82 ff 00              t0 = a1 & 0xff
  2328: 14 09 01 01 01 01 01 01 01 01 a2 = 0x101010101010101
  2338: ca 92 0c                 a5 = t0 * a2
  2341: 01                       fallthrough
      :                          @223
  2342: 7b bc                    u64 [a4] = a5
  2344: 95 bb 08                 a4 = a4 + 0x8
  2347: ac ab fb                 jump @223 if a4 <u a3
      :                          @224
  2350: 84 39 07                 a2 = t1 & 0x7
  2353: 52 09 05                 jump @226 if a2 != 0
      :                          @225
  2356: 28 0e                    jump @228
      :                          @226
  2358: c8 a9 09                 a2 = a2 + a3
  2361: 01                       fallthrough
      :                          @227
  2362: 78 a8                    u8 [a3] = a1
  2364: 95 aa 01                 a3 = a3 + 0x1
  2367: ac 9a fb                 jump @227 if a3 <u a2
      :                          @228
  2370: 32 00                    ret
      :                          @229 [@dyn 23]
  2372: 82 77                    a0 = u64 [a0]
  2374: 01                       fallthrough
      :                          @230
  2375: 28                       jump @230
      :                          @231 [@dyn 24]
  2376: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  2380: 7b 10 80 00              u64 [sp + 0x80] = ra
  2384: 7b 15 78                 u64 [sp + 0x78] = s0
  2387: 7b 16 70                 u64 [sp + 0x70] = s1
  2390: 82 7a                    a3 = u64 [a0]
  2392: 98 ab 04                 a4 = a3 >> 0x4
  2395: 33 07 27                 a0 = 0x27
  2398: 7b 18 20                 u64 [sp + 0x20] = a1
  2401: 53 2b 71 02 81 00        jump @234 if a4 <u 625
      :                          @232
  2407: 33 07 27                 a0 = 0x27
  2410: 95 18 6e                 a1 = sp + 0x6e
  2413: 3a 09 00 00 03           a2 = u64 [0x30000]
  2418: 7b 19 40                 u64 [sp + 0x40] = a2
  2421: 49 11 38 f0 d8 00        u64 [sp + 56] = 0xd8f0
  2427: 33 00 7b 14              ra = 0x147b
  2431: 33 04 30 00 01           t2 = 0x10030
  2436: 33 03 ff e0 f5 05        t1 = 0x5f5e0ff
  2442: 01                       fallthrough
      :                          @233
  2443: 64 ac                    a5 = a3
  2445: 82 19 40                 a2 = u64 [sp + 0x40]
  2448: d6 9a 0a                 a3 = a3 mulhu a2
  2451: 98 aa 0b                 a3 = a3 >> 0xb
  2454: 82 19 38                 a2 = u64 [sp + 0x38]
  2457: c0 9a 0b                 i32 a4 = a3 * a2
  2460: c8 cb 09                 a2 = a4 + a5
  2463: 97 9b 30                 a4 = a2 << 0x30
  2466: 98 bb 32                 a4 = a4 >> 0x32
  2469: ca 0b 0b                 a4 = a4 * ra
  2472: 98 b2 11                 t0 = a4 >> 0x11
  2475: 98 bb 10                 a4 = a4 >> 0x10
  2478: 84 bb fe 07              a4 = a4 & 0x7fe
  2482: 96 26 9c                 s1 = t0 * 0xffffffffffffff9c
  2485: c8 69 09                 a2 = a2 + s1
  2488: 97 99 31                 a2 = a2 << 0x31
  2491: 98 99 30                 a2 = a2 >> 0x30
  2494: c8 4b 0b                 a4 = a4 + t2
  2497: 7c b6                    s1 = u8 [a4]
  2499: 7c bb 01                 a4 = u8 [a4 + 0x1]
  2502: c8 49 09                 a2 = a2 + t2
  2505: 7c 95 01                 s0 = u8 [a2 + 0x1]
  2508: 7c 99                    a2 = u8 [a2]
  2510: 78 8b ff                 u8 [a1 + 0xffffffffffffffff] = a4
  2513: 78 86 fe                 u8 [a1 + 0xfffffffffffffffe] = s1
  2516: 78 85 01                 u8 [a1 + 0x1] = s0
  2519: 78 89                    u8 [a1] = a2
  2521: 95 77 fc                 a0 = a0 + 0xfffffffffffffffc
  2524: 95 88 fc                 a1 = a1 + 0xfffffffffffffffc
  2527: ac c3 ac                 jump @233 if t1 <u a5
      :                          @234
  2530: 54 1a 63 3b              jump @236 if a3 <=u 99
      :                          @235
  2534: 97 a8 30                 a1 = a3 << 0x30
  2537: 98 88 32                 a1 = a1 >> 0x32
  2540: 96 88 7b 14              a1 = a1 * 0x147b
  2544: 98 88 11                 a1 = a1 >> 0x11
  2547: 96 89 9c                 a2 = a1 * 0xffffffffffffff9c
  2550: c8 a9 09                 a2 = a2 + a3
  2553: 97 99 31                 a2 = a2 << 0x31
  2556: 98 99 30                 a2 = a2 >> 0x30
  2559: 95 77 fe                 a0 = a0 + 0xfffffffffffffffe
  2562: 33 0a 30 00 01           a3 = 0x10030
  2567: c8 a9 09                 a2 = a2 + a3
  2570: 7c 9a 01                 a3 = u8 [a2 + 0x1]
  2573: 7c 99                    a2 = u8 [a2]
  2575: 95 1b 49                 a4 = sp + 0x49
  2578: c8 7b 0b                 a4 = a4 + a0
  2581: 78 ba 01                 u8 [a4 + 0x1] = a3
  2584: 78 b9                    u8 [a4] = a2
  2586: 64 8a                    a3 = a1
  2588: 01                       fallthrough
      :                          @236
  2589: 82 1b 20                 a4 = u64 [sp + 0x20]
  2592: 55 1a 0a 14              jump @238 if a3 >=u 10
      :                          @237
  2596: 95 75 ff                 s0 = a0 + 0xffffffffffffffff
  2599: 95 17 49                 a0 = sp + 0x49
  2602: c8 57 07                 a0 = a0 + s0
  2605: 83 a8 30                 i32 a1 = a3 + 0x30
  2608: 78 78                    u8 [a0] = a1
  2610: 28 21                    jump @239
      :                          @238
  2612: 97 aa 01                 a3 = a3 << 0x1
  2615: 95 75 fe                 s0 = a0 + 0xfffffffffffffffe
  2618: 33 07 30 00 01           a0 = 0x10030
  2623: c8 a7 07                 a0 = a0 + a3
  2626: 7c 78 01                 a1 = u8 [a0 + 0x1]
  2629: 7c 77                    a0 = u8 [a0]
  2631: 95 19 49                 a2 = sp + 0x49
  2634: c8 59 09                 a2 = a2 + s0
  2637: 78 98 01                 u8 [a2 + 0x1] = a1
  2640: 78 97                    u8 [a2] = a0
  2642: 01                       fallthrough
      :                          @239
  2643: 80 b7 34                 a0 = u32 [a4 + 0x34]
  2646: 95 18 49                 a1 = sp + 0x49
  2649: c8 58 08                 a1 = a1 + s0
  2652: 7b 18 18                 u64 [sp + 0x18] = a1
  2655: 84 76 01                 s1 = a0 & 0x1
  2658: 33 09 00 00 11           a2 = 0x110000
  2663: 94 69 2b                 a2 = 0x2b if s1 != 0
  2666: 97 78 3d                 a1 = a0 << 0x3d
  2669: 99 88 3f                 a1 = a1 >>a 0x3f
  2672: 82 bc                    a5 = u64 [a4]
  2674: 33 0a 30 00 01           a3 = 0x10030
  2679: d2 8a 0a                 a3 = a3 & a1
  2682: 9a 58 27                 a1 = 0x27 - s0
  2685: 7b 18 10                 u64 [sp + 0x10] = a1
  2688: 51 0c 27                 jump @245 if a5 == 0
      :                          @240
  2691: 82 bc 08                 a5 = u64 [a4 + 0x8]
  2694: c8 68 08                 a1 = a1 + s1
  2697: ae c8 1e                 jump @245 if a1 >=u a5
      :                          @241
  2700: 84 77 08                 a0 = a0 & 0x8
  2703: 52 07 42                 jump @249 if a0 != 0
      :                          @242
  2706: 7c b7 38                 a0 = u8 [a4 + 0x38]
  2709: c9 8c 0c                 a5 = a5 - a1
  2712: 5a 17 01 8e 00           jump @256 if a0 >s 1
      :                          @243
  2717: 52 07 9b 00              jump @258 if a0 != 0
      :                          @244
  2721: 7b 1c 08                 u64 [sp + 0x8] = a5
  2724: 28 9a 00                 jump @259
      :                          @245
  2727: 82 b5 20                 s0 = u64 [a4 + 0x20]
  2730: 82 b6 28                 s1 = u64 [a4 + 0x28]
  2733: 64 57                    a0 = s0
  2735: 64 68                    a1 = s1
  2737: 50 10 32 73 01           ra = 50, jump @279
      :                          @246 [@dyn 25]
  2742: 33 08 01                 a1 = 0x1
  2745: 52 07 c2 00              jump @264 if a0 != 0
      :                          @247
  2749: 82 6a 18                 a3 = u64 [s1 + 0x18]
  2752: 64 57                    a0 = s0
  2754: 82 18 18                 a1 = u64 [sp + 0x18]
  2757: 82 19 10                 a2 = u64 [sp + 0x10]
  2760: b4 a0 01 34              ra = 52, jump [a3]
      :                          @248 [@dyn 26]
  2764: 64 78                    a1 = a0
  2766: 28 ad 00                 jump @264
      :                          @249
  2769: 7b 1c 30                 u64 [sp + 0x30] = a5
  2772: 81 b7 30                 a0 = i32 [a4 + 0x30]
  2775: 7b 17 08                 u64 [sp + 0x8] = a0
  2778: 7c b8 38                 a1 = u8 [a4 + 0x38]
  2781: 7b 18                    u64 [sp] = a1
  2783: 82 b7 20                 a0 = u64 [a4 + 0x20]
  2786: 82 b8 28                 a1 = u64 [a4 + 0x28]
  2789: 48 1b 30 30              u32 [a4 + 48] = 0x30
  2793: 46 1b 38 01              u8 [a4 + 56] = 0x1
  2797: 7b 17 38                 u64 [sp + 0x38] = a0
  2800: 7b 18 40                 u64 [sp + 0x40] = a1
  2803: 50 10 36 31 01           ra = 54, jump @279
      :                          @250 [@dyn 27]
  2808: 52 07 7f                 jump @263 if a0 != 0
      :                          @251
  2811: 82 17 30                 a0 = u64 [sp + 0x30]
  2814: c8 75 05                 s0 = s0 + a0
  2817: c9 65 05                 s0 = s0 - s1
  2820: 95 55 da                 s0 = s0 + 0xffffffffffffffda
  2823: 82 16 38                 s1 = u64 [sp + 0x38]
  2826: 01                       fallthrough
      :                          @252
  2827: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  2830: 51 05 d6 00              jump @274 if s0 == 0
      :                          @253
  2834: 82 17 40                 a0 = u64 [sp + 0x40]
  2837: 82 79 20                 a2 = u64 [a0 + 0x20]
  2840: 33 08 30                 a1 = 0x30
  2843: 64 67                    a0 = s1
  2845: b4 90 01 38              ra = 56, jump [a2]
      :                          @254 [@dyn 28]
  2849: 51 07 ea                 jump @252 if a0 == 0
      :                          @255
  2852: 28 53                    jump @263
      :                          @256
  2854: 52 17 02 12              jump @258 if a0 != 2
      :                          @257
  2858: 98 c7 01                 a0 = a5 >> 0x1
  2861: 95 c8 01                 a1 = a5 + 0x1
  2864: 98 88 01                 a1 = a1 >> 0x1
  2867: 7b 18 08                 u64 [sp + 0x8] = a1
  2870: 28 08                    jump @259
      :                          @258
  2872: 64 c7                    a0 = a5
  2874: 49 11 08                 u64 [sp + 8] = 0
  2877: 01                       fallthrough
      :                          @259
  2878: 82 b8 20                 a1 = u64 [a4 + 0x20]
  2881: 7b 18 30                 u64 [sp + 0x30] = a1
  2884: 82 b8 28                 a1 = u64 [a4 + 0x28]
  2887: 7b 18 40                 u64 [sp + 0x40] = a1
  2890: 81 b8 30                 a1 = i32 [a4 + 0x30]
  2893: 7b 18 38                 u64 [sp + 0x38] = a1
  2896: 95 75 01                 s0 = a0 + 0x1
  2899: 7b 19 28                 u64 [sp + 0x28] = a2
  2902: 01                       fallthrough
      :                          @260
  2903: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  2906: 51 05 33                 jump @265 if s0 == 0
      :                          @261
  2909: 82 17 40                 a0 = u64 [sp + 0x40]
  2912: 82 7b 20                 a4 = u64 [a0 + 0x20]
  2915: 82 17 30                 a0 = u64 [sp + 0x30]
  2918: 82 18 38                 a1 = u64 [sp + 0x38]
  2921: 64 a6                    s1 = a3
  2923: b4 b0 01 3a              ra = 58, jump [a4]
      :                          @262 [@dyn 29]
  2927: 64 6a                    a3 = s1
  2929: 82 19 28                 a2 = u64 [sp + 0x28]
  2932: 51 07 e3                 jump @260 if a0 == 0
      :                          @263
  2935: 33 08 01                 a1 = 0x1
  2938: 01                       fallthrough
      :                          @264
  2939: 64 87                    a0 = a1
  2941: 82 10 80 00              ra = u64 [sp + 0x80]
  2945: 82 15 78                 s0 = u64 [sp + 0x78]
  2948: 82 16 70                 s1 = u64 [sp + 0x70]
  2951: 95 11 88 00              sp = sp + 0x88
  2955: 32 00                    ret
      :                          @265
  2957: 82 16 30                 s1 = u64 [sp + 0x30]
  2960: 64 67                    a0 = s1
  2962: 82 15 40                 s0 = u64 [sp + 0x40]
  2965: 64 58                    a1 = s0
  2967: 50 10 3c 8d 00           ra = 60, jump @279
      :                          @266 [@dyn 30]
  2972: 33 08 01                 a1 = 0x1
  2975: 52 07 dc                 jump @264 if a0 != 0
      :                          @267
  2978: 82 5a 18                 a3 = u64 [s0 + 0x18]
  2981: 64 67                    a0 = s1
  2983: 82 18 18                 a1 = u64 [sp + 0x18]
  2986: 82 19 10                 a2 = u64 [sp + 0x10]
  2989: b4 a0 01 3e              ra = 62, jump [a3]
      :                          @268 [@dyn 31]
  2993: 33 08 01                 a1 = 0x1
  2996: 52 07 c7                 jump @264 if a0 != 0
      :                          @269
  2999: 82 17 08                 a0 = u64 [sp + 0x8]
  3002: 9a 77                    a0 = -a0
  3004: 7b 17 28                 u64 [sp + 0x28] = a0
  3007: 33 05 ff                 s0 = 0xffffffffffffffff
  3010: 01                       fallthrough
      :                          @270
  3011: 82 17 28                 a0 = u64 [sp + 0x28]
  3014: c8 57 07                 a0 = a0 + s0
  3017: 51 17 ff 46              jump @277 if a0 == 4294967295
      :                          @271
  3021: 82 17 40                 a0 = u64 [sp + 0x40]
  3024: 82 79 20                 a2 = u64 [a0 + 0x20]
  3027: 64 67                    a0 = s1
  3029: 82 18 38                 a1 = u64 [sp + 0x38]
  3032: b4 90 01 40              ra = 64, jump [a2]
      :                          @272 [@dyn 32]
  3036: 95 55 01                 s0 = s0 + 0x1
  3039: 51 07 e4                 jump @270 if a0 == 0
      :                          @273
  3042: 28 39                    jump @278
      :                          @274
  3044: 82 17 40                 a0 = u64 [sp + 0x40]
  3047: 82 7a 18                 a3 = u64 [a0 + 0x18]
  3050: 64 67                    a0 = s1
  3052: 82 18 18                 a1 = u64 [sp + 0x18]
  3055: 82 19 10                 a2 = u64 [sp + 0x10]
  3058: b4 a0 01 42              ra = 66, jump [a3]
      :                          @275 [@dyn 33]
  3062: 33 08 01                 a1 = 0x1
  3065: 52 07 82                 jump @264 if a0 != 0
      :                          @276
  3068: 33 08                    a1 = 0
  3070: 82 17 20                 a0 = u64 [sp + 0x20]
  3073: 82 19 08                 a2 = u64 [sp + 0x8]
  3076: 7a 79 30                 u32 [a0 + 0x30] = a2
  3079: 82 19                    a2 = u64 [sp]
  3081: 78 79 38                 u8 [a0 + 0x38] = a2
  3084: 28 6f ff                 jump @264
      :                          @277
  3087: 82 15 08                 s0 = u64 [sp + 0x8]
  3090: 82 17 08                 a0 = u64 [sp + 0x8]
  3093: d8 75 08                 a1 = s0 <u a0
  3096: 28 63 ff                 jump @264
      :                          @278
  3099: 82 17 08                 a0 = u64 [sp + 0x8]
  3102: d8 75 08                 a1 = s0 <u a0
  3105: 28 5a ff                 jump @264
      :                          @279
  3108: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  3111: 7b 10 18                 u64 [sp + 0x18] = ra
  3114: 7b 15 10                 u64 [sp + 0x10] = s0
  3117: 7b 16 08                 u64 [sp + 0x8] = s1
  3120: 83 9b                    i32 a4 = a2 + 0
  3122: 33 0c 00 00 11           a5 = 0x110000
  3127: 64 a5                    s0 = a3
  3129: 64 86                    s1 = a1
  3131: 64 7a                    a3 = a0
  3133: aa cb 1a                 jump @282 if a4 == a5
      :                          @280
  3136: 82 6b 20                 a4 = u64 [s1 + 0x20]
  3139: 64 a7                    a0 = a3
  3141: 64 98                    a1 = a2
  3143: 7b 1a                    u64 [sp] = a3
  3145: b4 b0 01 44              ra = 68, jump [a4]
      :                          @281 [@dyn 34]
  3149: 82 1a                    a3 = u64 [sp]
  3151: 64 78                    a1 = a0
  3153: 33 07 01                 a0 = 0x1
  3156: 52 08 20                 jump @285 if a1 != 0
      :                          @282
  3159: 51 05 1a                 jump @284 if s0 == 0
      :                          @283
  3162: 82 6c 18                 a5 = u64 [s1 + 0x18]
  3165: 64 a7                    a0 = a3
  3167: 64 58                    a1 = s0
  3169: 33 09                    a2 = 0
  3171: 82 10 18                 ra = u64 [sp + 0x18]
  3174: 82 15 10                 s0 = u64 [sp + 0x10]
  3177: 82 16 08                 s1 = u64 [sp + 0x8]
  3180: 95 11 20                 sp = sp + 0x20
  3183: 32 0c                    jump [a5]
      :                          @284
  3185: 33 07                    a0 = 0
  3187: 01                       fallthrough
      :                          @285
  3188: 82 10 18                 ra = u64 [sp + 0x18]
  3191: 82 15 10                 s0 = u64 [sp + 0x10]
  3194: 82 16 08                 s1 = u64 [sp + 0x8]
  3197: 95 11 20                 sp = sp + 0x20
  3200: 32 00                    ret
      :                          @286
  3202: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  3206: 7b 10 80 00              u64 [sp + 0x80] = ra
  3210: 7b 15 78                 u64 [sp + 0x78] = s0
  3213: 7b 16 70                 u64 [sp + 0x70] = s1
  3216: 49 11 60 20              u64 [sp + 96] = 0x20
  3220: 33 09 03                 a2 = 0x3
  3223: 78 19 68                 u8 [sp + 0x68] = a2
  3226: 49 11 30                 u64 [sp + 48] = 0
  3229: 49 11 40                 u64 [sp + 64] = 0
  3232: 82 86 20                 s1 = u64 [a1 + 0x20]
  3235: 7b 17 50                 u64 [sp + 0x50] = a0
  3238: 33 07 00 00 01           a0 = 0x10000
  3243: 7b 17 58                 u64 [sp + 0x58] = a0
  3246: 51 06 06 01              jump @308 if s1 == 0
      :                          @287
  3250: 82 87 28                 a0 = u64 [a1 + 0x28]
  3253: 51 07 73 01              jump @318 if a0 == 0
      :                          @288
  3257: 33 09                    a2 = 0
  3259: 82 85                    s0 = u64 [a1]
  3261: 7b 18 08                 u64 [sp + 0x8] = a1
  3264: 82 88 10                 a1 = u64 [a1 + 0x10]
  3267: 7b 18 18                 u64 [sp + 0x18] = a1
  3270: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  3273: 97 88 03                 a1 = a1 << 0x3
  3276: 98 88 03                 a1 = a1 >> 0x3
  3279: 95 88 01                 a1 = a1 + 0x1
  3282: 7b 18                    u64 [sp] = a1
  3284: 95 55 08                 s0 = s0 + 0x8
  3287: 96 78 38                 a1 = a0 * 0x38
  3290: 95 66 18                 s1 = s1 + 0x18
  3293: 33 07 2e                 a0 = 0x2e
  3296: 7b 17 10                 u64 [sp + 0x10] = a0
  3299: 01                       fallthrough
      :                          @289
  3300: 7b 18 20                 u64 [sp + 0x20] = a1
  3303: 7b 19 28                 u64 [sp + 0x28] = a2
  3306: 82 59                    a2 = u64 [s0]
  3308: 51 09 17                 jump @292 if a2 == 0
      :                          @290
  3311: 82 1a 58                 a3 = u64 [sp + 0x58]
  3314: 82 17 50                 a0 = u64 [sp + 0x50]
  3317: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  3320: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3323: b4 a0 01 46              ra = 70, jump [a3]
      :                          @291 [@dyn 35]
  3327: 52 07 4e 01              jump @321 if a0 != 0
      :                          @292
  3331: 81 67 10                 a0 = i32 [s1 + 0x10]
  3334: 7a 17 60                 u32 [sp + 0x60] = a0
  3337: 7c 67 18                 a0 = u8 [s1 + 0x18]
  3340: 78 17 68                 u8 [sp + 0x68] = a0
  3343: 81 67 14                 a0 = i32 [s1 + 0x14]
  3346: 7a 17 64                 u32 [sp + 0x64] = a0
  3349: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3352: 82 67                    a0 = u64 [s1]
  3354: 51 08 26                 jump @297 if a1 == 0
      :                          @293
  3357: 52 18 01 16              jump @295 if a1 != 1
      :                          @294
  3361: 97 77 04                 a0 = a0 << 0x4
  3364: 82 18 18                 a1 = u64 [sp + 0x18]
  3367: c8 87 07                 a0 = a0 + a1
  3370: 82 78 08                 a1 = u64 [a0 + 0x8]
  3373: 82 19 10                 a2 = u64 [sp + 0x10]
  3376: aa 98 07                 jump @296 if a1 == a2
      :                          @295
  3379: 33 08                    a1 = 0
  3381: 28 0f                    jump @298
      :                          @296
  3383: 82 77                    a0 = u64 [a0]
  3385: 82 77                    a0 = u64 [a0]
  3387: 33 08 01                 a1 = 0x1
  3390: 28 06                    jump @298
      :                          @297
  3392: 33 08 01                 a1 = 0x1
  3395: 01                       fallthrough
      :                          @298
  3396: 7b 18 30                 u64 [sp + 0x30] = a1
  3399: 7b 17 38                 u64 [sp + 0x38] = a0
  3402: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  3405: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  3408: 51 08 26                 jump @303 if a1 == 0
      :                          @299
  3411: 52 18 01 16              jump @301 if a1 != 1
      :                          @300
  3415: 97 77 04                 a0 = a0 << 0x4
  3418: 82 18 18                 a1 = u64 [sp + 0x18]
  3421: c8 87 07                 a0 = a0 + a1
  3424: 82 78 08                 a1 = u64 [a0 + 0x8]
  3427: 82 19 10                 a2 = u64 [sp + 0x10]
  3430: aa 98 07                 jump @302 if a1 == a2
      :                          @301
  3433: 33 08                    a1 = 0
  3435: 28 0f                    jump @304
      :                          @302
  3437: 82 77                    a0 = u64 [a0]
  3439: 82 77                    a0 = u64 [a0]
  3441: 33 08 01                 a1 = 0x1
  3444: 28 06                    jump @304
      :                          @303
  3446: 33 08 01                 a1 = 0x1
  3449: 01                       fallthrough
      :                          @304
  3450: 7b 18 40                 u64 [sp + 0x40] = a1
  3453: 7b 17 48                 u64 [sp + 0x48] = a0
  3456: 82 67 08                 a0 = u64 [s1 + 0x8]
  3459: 97 77 04                 a0 = a0 << 0x4
  3462: 82 18 18                 a1 = u64 [sp + 0x18]
  3465: c8 78 08                 a1 = a1 + a0
  3468: 82 87                    a0 = u64 [a1]
  3470: 82 89 08                 a2 = u64 [a1 + 0x8]
  3473: 95 18 30                 a1 = sp + 0x30
  3476: b4 90 01 48              ra = 72, jump [a2]
      :                          @305 [@dyn 36]
  3480: 52 07 b5 00              jump @321 if a0 != 0
      :                          @306
  3484: 95 55 10                 s0 = s0 + 0x10
  3487: 82 18 20                 a1 = u64 [sp + 0x20]
  3490: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  3493: 95 66 38                 s1 = s1 + 0x38
  3496: 82 19 28                 a2 = u64 [sp + 0x28]
  3499: 95 99 01                 a2 = a2 + 0x1
  3502: 52 08 36 ff              jump @289 if a1 != 0
      :                          @307
  3506: 28 69                    jump @316
      :                          @308
  3508: 82 87 18                 a0 = u64 [a1 + 0x18]
  3511: 51 07 71                 jump @318 if a0 == 0
      :                          @309
  3514: 82 85 10                 s0 = u64 [a1 + 0x10]
  3517: 33 0a                    a3 = 0
  3519: 97 79 04                 a2 = a0 << 0x4
  3522: c8 59 09                 a2 = a2 + s0
  3525: 7b 19 20                 u64 [sp + 0x20] = a2
  3528: 7b 18 08                 u64 [sp + 0x8] = a1
  3531: 82 86                    s1 = u64 [a1]
  3533: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  3536: 97 77 04                 a0 = a0 << 0x4
  3539: 98 77 04                 a0 = a0 >> 0x4
  3542: 95 77 01                 a0 = a0 + 0x1
  3545: 7b 17                    u64 [sp] = a0
  3547: 95 66 08                 s1 = s1 + 0x8
  3550: 01                       fallthrough
      :                          @310
  3551: 7b 1a 28                 u64 [sp + 0x28] = a3
  3554: 82 69                    a2 = u64 [s1]
  3556: 51 09 16                 jump @313 if a2 == 0
      :                          @311
  3559: 82 1a 58                 a3 = u64 [sp + 0x58]
  3562: 82 17 50                 a0 = u64 [sp + 0x50]
  3565: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3568: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3571: b4 a0 01 4a              ra = 74, jump [a3]
      :                          @312 [@dyn 37]
  3575: 52 07 56                 jump @321 if a0 != 0
      :                          @313
  3578: 82 57                    a0 = u64 [s0]
  3580: 82 59 08                 a2 = u64 [s0 + 0x8]
  3583: 95 18 30                 a1 = sp + 0x30
  3586: b4 90 01 4c              ra = 76, jump [a2]
      :                          @314 [@dyn 38]
  3590: 52 07 47                 jump @321 if a0 != 0
      :                          @315
  3593: 95 66 10                 s1 = s1 + 0x10
  3596: 95 55 10                 s0 = s0 + 0x10
  3599: 82 1a 28                 a3 = u64 [sp + 0x28]
  3602: 95 aa 01                 a3 = a3 + 0x1
  3605: 82 17 20                 a0 = u64 [sp + 0x20]
  3608: ab 75 c7                 jump @310 if s0 != a0
      :                          @316
  3611: 82 18 08                 a1 = u64 [sp + 0x8]
  3614: 82 1a                    a3 = u64 [sp]
  3616: 82 87 08                 a0 = u64 [a1 + 0x8]
  3619: ac 7a 0d                 jump @319 if a3 <u a0
      :                          @317
  3622: 28 2c                    jump @322
      :                          @318
  3624: 33 0a                    a3 = 0
  3626: 82 87 08                 a0 = u64 [a1 + 0x8]
  3629: 54 07 25                 jump @322 if a0 <=u 0
      :                          @319
  3632: 82 87                    a0 = u64 [a1]
  3634: 97 a8 04                 a1 = a3 << 0x4
  3637: c8 87 09                 a2 = a0 + a1
  3640: 82 1a 58                 a3 = u64 [sp + 0x58]
  3643: 82 17 50                 a0 = u64 [sp + 0x50]
  3646: 82 98                    a1 = u64 [a2]
  3648: 82 99 08                 a2 = u64 [a2 + 0x8]
  3651: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3654: b4 a0 01 4e              ra = 78, jump [a3]
      :                          @320 [@dyn 39]
  3658: 51 07 08                 jump @322 if a0 == 0
      :                          @321
  3661: 33 07 01                 a0 = 0x1
  3664: 28 05                    jump @323
      :                          @322
  3666: 33 07                    a0 = 0
  3668: 01                       fallthrough
      :                          @323
  3669: 82 10 80 00              ra = u64 [sp + 0x80]
  3673: 82 15 78                 s0 = u64 [sp + 0x78]
  3676: 82 16 70                 s1 = u64 [sp + 0x70]
  3679: 95 11 88 00              sp = sp + 0x88
  3683: 32 00                    ret
      :                          @324
  3685: 51 08 9b 00              jump @345 if a1 == 0
      :                          @325
  3689: 64 79                    a2 = a0
  3691: 7c 77                    a0 = u8 [a0]
  3693: 51 07 91 00              jump @344 if a0 == 0
      :                          @326
  3697: 51 27 ff 00 90 00        jump @346 if a0 == 255
      :                          @327
  3703: 6c 7a                    a3 = sext.b a0
  3705: 57 0a 09                 jump @329 if a3 <s 0
      :                          @328
  3708: 33 0a                    a3 = 0
  3710: 33 08                    a1 = 0
  3712: 28 73                    jump @343
      :                          @329
  3714: 55 27 c0 00 0d           jump @331 if a0 >=u 192
      :                          @330
  3719: 33 0a 01                 a3 = 0x1
  3722: 33 0b 80                 a4 = 0xffffffffffffff80
  3725: 28 4a                    jump @340
      :                          @331
  3727: 55 27 e0 00 0e           jump @333 if a0 >=u 224
      :                          @332
  3732: 33 0a 02                 a3 = 0x2
  3735: 33 0b 40 ff              a4 = 0xffffffffffffff40
  3739: 28 3c                    jump @340
      :                          @333
  3741: 55 27 f0 00 0e           jump @335 if a0 >=u 240
      :                          @334
  3746: 33 0a 03                 a3 = 0x3
  3749: 33 0b 20 ff              a4 = 0xffffffffffffff20
  3753: 28 2e                    jump @340
      :                          @335
  3755: 55 27 f8 00 0e           jump @337 if a0 >=u 248
      :                          @336
  3760: 33 0a 04                 a3 = 0x4
  3763: 33 0b 10 ff              a4 = 0xffffffffffffff10
  3767: 28 20                    jump @340
      :                          @337
  3769: 55 27 fc 00 0e           jump @339 if a0 >=u 252
      :                          @338
  3774: 33 0a 05                 a3 = 0x5
  3777: 33 0b 08 ff              a4 = 0xffffffffffffff08
  3781: 28 12                    jump @340
      :                          @339
  3783: 88 7a fe 00              a3 = a0 <u 0xfe
  3787: 33 0b 04 ff              a4 = 0xffffffffffffff04
  3791: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  3795: 85 aa 07                 a3 = a3 ^ 0x7
  3798: 01                       fallthrough
      :                          @340
  3799: ae 8a 2b                 jump @347 if a3 >=u a1
      :                          @341
  3802: 33 08                    a1 = 0
  3804: c8 b7 07                 a0 = a0 + a4
  3807: 64 ab                    a4 = a3
  3809: 01                       fallthrough
      :                          @342
  3810: c8 b9 0c                 a5 = a2 + a4
  3813: 7c cc                    a5 = u8 [a5]
  3815: 97 88 08                 a1 = a1 << 0x8
  3818: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  3821: d4 c8 08                 a1 = a1 | a5
  3824: 52 0b f2                 jump @342 if a4 != 0
      :                          @343
  3827: 8a a9 03                 i32 a2 = a3 << 0x3
  3830: cf 97 07                 a0 = a0 << a2
  3833: c8 87 07                 a0 = a0 + a1
  3836: 32 00                    ret
      :                          @344
  3838: 32 00                    ret
      :                          @345
  3840: 00                       trap
      :                          @346
  3841: 00                       trap
      :                          @347
  3842: 00                       trap
