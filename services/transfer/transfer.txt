// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 2 bytes
// RO data = []
// RW data = []
// Instructions = 289
// Code size = 871 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 ae 00 00 00           jump @18
      :                          @2
    10: 28 64 02                 jump @70
      :                          @3 [export #0: 'refine']
    13: 95 11 e0                 sp = sp + 0xffffffffffffffe0
    16: 7b 10 18                 u64 [sp + 0x18] = ra
    19: 7b 15 10                 u64 [sp + 0x10] = s0
    22: 7b 16 08                 u64 [sp + 0x8] = s1
    25: 64 86                    s1 = a1
    27: 64 78                    a1 = a0
    29: 33 09 04                 a2 = 0x4
    32: 33 07 00 00 01           a0 = 0x10000
    37: ac 96 7c                 jump @15 if s1 <u a2
      :                          @4
    40: 95 66 fc                 s1 = s1 + 0xfffffffffffffffc
    43: 51 06 76                 jump @15 if s1 == 0
      :                          @5
    46: 95 87 04                 a0 = a1 + 0x4
    49: 7d 78                    a1 = i8 [a0]
    51: 33 05 01                 s0 = 0x1
    54: 59 08 3a                 jump @13 if a1 >=s 0
      :                          @6
    57: 84 89 ff 00              a2 = a1 & 0xff
    61: 33 05 02                 s0 = 0x2
    64: 53 29 c0 00 2d           jump @12 if a2 <u 192
      :                          @7
    69: 33 05 03                 s0 = 0x3
    72: 53 29 e0 00 25           jump @12 if a2 <u 224
      :                          @8
    77: 33 05 04                 s0 = 0x4
    80: 53 29 f0 00 1d           jump @12 if a2 <u 240
      :                          @9
    85: 33 05 05                 s0 = 0x5
    88: 53 29 f8 00 15           jump @12 if a2 <u 248
      :                          @10
    93: 33 05 06                 s0 = 0x6
    96: 53 29 fc 00 0d           jump @12 if a2 <u 252
      :                          @11
   101: 88 98 fe 00              a1 = a2 <u 0xfe
   105: 9a 85 08                 s0 = 0x8 - a1
   108: 01                       fallthrough
      :                          @12
   109: ac 56 45                 jump @17 if s1 <u s0
      :                          @13
   112: 64 58                    a1 = s0
   114: 7b 17                    u64 [sp] = a0
   116: 50 10 02 55 02           ra = 2, jump @82
      :                          @14 [@dyn 1]
   121: 64 78                    a1 = a0
   123: e4 56 07                 a0 = maxu(s1, s0)
   126: c9 57 07                 a0 = a0 - s0
   129: d8 87 09                 a2 = a0 <u a1
   132: e4 87 07                 a0 = maxu(a0, a1)
   135: c9 87 07                 a0 = a0 - a1
   138: 88 77 20                 a0 = a0 <u 0x20
   141: d4 79 09                 a2 = a2 | a0
   144: 82 17                    a0 = u64 [sp]
   146: c8 75 05                 s0 = s0 + a0
   149: 94 98                    a1 = 0 if a2 != 0
   151: 33 07 00 00 01           a0 = 0x10000
   156: da 95 07                 a0 = s0 if a2 == 0
   159: 28 05                    jump @16
      :                          @15
   161: 33 08                    a1 = 0
   163: 01                       fallthrough
      :                          @16
   164: 82 10 18                 ra = u64 [sp + 0x18]
   167: 82 15 10                 s0 = u64 [sp + 0x10]
   170: 82 16 08                 s1 = u64 [sp + 0x8]
   173: 95 11 20                 sp = sp + 0x20
   176: 32 00                    ret
      :                          @17
   178: 00                       trap
      :                          @18 [export #1: 'accumulate']
   179: 95 11 58 ff              sp = sp + 0xffffffffffffff58
   183: 7b 10 a0 00              u64 [sp + 0xa0] = ra
   187: 7b 15 98 00              u64 [sp + 0x98] = s0
   191: 7b 16 90 00              u64 [sp + 0x90] = s1
   195: 33 09 08                 a2 = 0x8
   198: ac 98 e7 00              jump @48 if a1 <u a2
      :                          @19
   202: 33 09 fc                 a2 = 0xfffffffffffffffc
   205: aa 97 9e 01              jump @67 if a0 == a2
      :                          @20
   209: 51 07 9a 01              jump @67 if a0 == 0
      :                          @21
   213: 95 8a f8                 a3 = a1 + 0xfffffffffffffff8
   216: 95 75 08                 s0 = a0 + 0x8
   219: 51 0a 45                 jump @31 if a3 == 0
      :                          @22
   222: 7d 58                    a1 = i8 [s0]
   224: 33 06 01                 s1 = 0x1
   227: 59 08 40                 jump @32 if a1 >=s 0
      :                          @23
   230: 84 89 ff 00              a2 = a1 & 0xff
   234: 33 06 02                 s1 = 0x2
   237: 53 29 c0 00 2d           jump @29 if a2 <u 192
      :                          @24
   242: 33 06 03                 s1 = 0x3
   245: 53 29 e0 00 25           jump @29 if a2 <u 224
      :                          @25
   250: 33 06 04                 s1 = 0x4
   253: 53 29 f0 00 1d           jump @29 if a2 <u 240
      :                          @26
   258: 33 06 05                 s1 = 0x5
   261: 53 29 f8 00 15           jump @29 if a2 <u 248
      :                          @27
   266: 33 06 06                 s1 = 0x6
   269: 53 29 fc 00 0d           jump @29 if a2 <u 252
      :                          @28
   274: 88 98 fe 00              a1 = a2 <u 0xfe
   278: 9a 86 08                 s1 = 0x8 - a1
   281: 01                       fallthrough
      :                          @29
   282: ae 6a 09                 jump @32 if a3 >=u s1
      :                          @30
   285: 28 90 00                 jump @48
      :                          @31
   288: 33 06                    s1 = 0
   290: 01                       fallthrough
      :                          @32
   291: 7b 16                    u64 [sp] = s1
   293: 64 57                    a0 = s0
   295: 64 68                    a1 = s1
   297: 64 a6                    s1 = a3
   299: 50 10 04 9e 01           ra = 4, jump @82
      :                          @33 [@dyn 2]
   304: 82 1a                    a3 = u64 [sp]
   306: 51 07 7b                 jump @48 if a0 == 0
      :                          @34
   309: e4 a6 07                 a0 = maxu(s1, a3)
   312: c9 a7 07                 a0 = a0 - a3
   315: 53 17 60 72              jump @48 if a0 <u 96
      :                          @35
   319: c8 5a 08                 a1 = a3 + s0
   322: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   325: 95 87 60                 a0 = a1 + 0x60
   328: 7b 17                    u64 [sp] = a0
   330: 51 06 4c                 jump @46 if s1 == 0
      :                          @36
   333: 7d 78                    a1 = i8 [a0]
   335: 33 05 01                 s0 = 0x1
   338: 59 08 37                 jump @43 if a1 >=s 0
      :                          @37
   341: 84 89 ff 00              a2 = a1 & 0xff
   345: 33 05 02                 s0 = 0x2
   348: 53 29 c0 00 2d           jump @43 if a2 <u 192
      :                          @38
   353: 33 05 03                 s0 = 0x3
   356: 53 29 e0 00 25           jump @43 if a2 <u 224
      :                          @39
   361: 33 05 04                 s0 = 0x4
   364: 53 29 f0 00 1d           jump @43 if a2 <u 240
      :                          @40
   369: 33 05 05                 s0 = 0x5
   372: 53 29 f8 00 15           jump @43 if a2 <u 248
      :                          @41
   377: 33 05 06                 s0 = 0x6
   380: 53 29 fc 00 0d           jump @43 if a2 <u 252
      :                          @42
   385: 88 98 fe 00              a1 = a2 <u 0xfe
   389: 9a 85 08                 s0 = 0x8 - a1
   392: 01                       fallthrough
      :                          @43
   393: ac 56 e3 00              jump @68 if s1 <u s0
      :                          @44
   397: 64 58                    a1 = s0
   399: 50 10 06 3a 01           ra = 6, jump @82
      :                          @45 [@dyn 3]
   404: 28 07                    jump @47
      :                          @46
   406: 33 05                    s0 = 0
   408: 33 07                    a0 = 0
   410: 01                       fallthrough
      :                          @47
   411: e4 56 08                 a1 = maxu(s1, s0)
   414: c9 58 08                 a1 = a1 - s0
   417: e4 78 08                 a1 = maxu(a1, a0)
   420: c9 78 08                 a1 = a1 - a0
   423: 33 09 21                 a2 = 0x21
   426: ae 98 1d                 jump @50 if a1 >=u a2
      :                          @48
   429: 33 08                    a1 = 0
   431: 33 07 00 00 01           a0 = 0x10000
   436: 01                       fallthrough
      :                          @49
   437: 82 10 a0 00              ra = u64 [sp + 0xa0]
   441: 82 15 98 00              s0 = u64 [sp + 0x98]
   445: 82 16 90 00              s1 = u64 [sp + 0x90]
   449: 95 11 a8 00              sp = sp + 0xa8
   453: 32 00                    ret
      :                          @50
   455: 82 19                    a2 = u64 [sp]
   457: c8 95 05                 s0 = s0 + a2
   460: c8 57 07                 a0 = a0 + s0
   463: 7c 79 20                 a2 = u8 [a0 + 0x20]
   466: 51 09 09                 jump @52 if a2 == 0
      :                          @51
   469: 33 07                    a0 = 0
   471: 33 06                    s1 = 0
   473: 28 6b                    jump @65
      :                          @52
   475: 95 89 df                 a2 = a1 + 0xffffffffffffffdf
   478: 95 76 21                 s1 = a0 + 0x21
   481: 51 09 51                 jump @63 if a2 == 0
      :                          @53
   484: 7d 67                    a0 = i8 [s1]
   486: 33 05 01                 s0 = 0x1
   489: 59 07 37                 jump @60 if a0 >=s 0
      :                          @54
   492: 84 77 ff 00              a0 = a0 & 0xff
   496: 33 05 02                 s0 = 0x2
   499: 53 27 c0 00 2d           jump @60 if a0 <u 192
      :                          @55
   504: 33 05 03                 s0 = 0x3
   507: 53 27 e0 00 25           jump @60 if a0 <u 224
      :                          @56
   512: 33 05 04                 s0 = 0x4
   515: 53 27 f0 00 1d           jump @60 if a0 <u 240
      :                          @57
   520: 33 05 05                 s0 = 0x5
   523: 53 27 f8 00 15           jump @60 if a0 <u 248
      :                          @58
   528: 33 05 06                 s0 = 0x6
   531: 53 27 fc 00 0d           jump @60 if a0 <u 252
      :                          @59
   536: 88 77 fe 00              a0 = a0 <u 0xfe
   540: 9a 75 08                 s0 = 0x8 - a0
   543: 01                       fallthrough
      :                          @60
   544: 7b 19                    u64 [sp] = a2
   546: ac 59 4b                 jump @69 if a2 <u s0
      :                          @61
   549: 64 67                    a0 = s1
   551: 64 58                    a1 = s0
   553: 50 10 08 a0 00           ra = 8, jump @82
      :                          @62 [@dyn 4]
   558: 82 19                    a2 = u64 [sp]
   560: 28 07                    jump @64
      :                          @63
   562: 33 05                    s0 = 0
   564: 33 07                    a0 = 0
   566: 01                       fallthrough
      :                          @64
   567: c8 56 06                 s1 = s1 + s0
   570: e4 59 08                 a1 = maxu(a2, s0)
   573: c9 58 08                 a1 = a1 - s0
   576: e6 78 07                 a0 = minu(a1, a0)
   579: 01                       fallthrough
      :                          @65
   580: c8 76 05                 s0 = s1 + a0
   583: 95 17 08                 a0 = sp + 0x8
   586: 33 09 80 00              a2 = 0x80
   590: 33 08                    a1 = 0
   592: 50 10 0a 27              ra = 10, jump @71
      :                          @66 [@dyn 5]
   596: 80 67                    a0 = u32 [s1]
   598: 80 58 fc                 a1 = u32 [s0 + 0xfffffffffffffffc]
   601: 33 09 64                 a2 = 0x64
   604: 95 1a 08                 a3 = sp + 0x8
   607: 0a 0b                    ecalli 11 // 'transfer'
   609: 95 17 88 00              a0 = sp + 0x88
   613: 33 08 08                 a1 = 0x8
   616: 28 4d ff                 jump @49
      :                          @67
   619: 00                       trap
      :                          @68
   620: 00                       trap
      :                          @69
   621: 00                       trap
      :                          @70 [export #2: 'on_transfer']
   622: 33 07 00 00 01           a0 = 0x10000
   627: 33 08                    a1 = 0
   629: 32 00                    ret
      :                          @71
   631: 8d 7a                    i32 a3 = -a0
   633: 84 aa 07                 a3 = a3 & 0x7
   636: c8 a7 0b                 a4 = a0 + a3
   639: 51 0a 0e                 jump @74 if a3 == 0
      :                          @72
   642: 64 7c                    a5 = a0
   644: 01                       fallthrough
      :                          @73
   645: 78 c8                    u8 [a5] = a1
   647: 95 cc 01                 a5 = a5 + 0x1
   650: ac bc fb                 jump @73 if a5 <u a4
      :                          @74
   653: c9 a9 03                 t1 = a2 - a3
   656: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
   659: c8 cb 0a                 a3 = a4 + a5
   662: 58 0c 1d                 jump @77 if a5 <=s 0
      :                          @75
   665: 84 82 ff 00              t0 = a1 & 0xff
   669: 14 09 01 01 01 01 01 01 01 01 a2 = 0x101010101010101
   679: ca 92 0c                 a5 = t0 * a2
   682: 01                       fallthrough
      :                          @76
   683: 7b bc                    u64 [a4] = a5
   685: 95 bb 08                 a4 = a4 + 0x8
   688: ac ab fb                 jump @76 if a4 <u a3
      :                          @77
   691: 84 39 07                 a2 = t1 & 0x7
   694: 52 09 05                 jump @79 if a2 != 0
      :                          @78
   697: 28 0e                    jump @81
      :                          @79
   699: c8 a9 09                 a2 = a2 + a3
   702: 01                       fallthrough
      :                          @80
   703: 78 a8                    u8 [a3] = a1
   705: 95 aa 01                 a3 = a3 + 0x1
   708: ac 9a fb                 jump @80 if a3 <u a2
      :                          @81
   711: 32 00                    ret
      :                          @82
   713: 51 08 9b 00              jump @103 if a1 == 0
      :                          @83
   717: 64 79                    a2 = a0
   719: 7c 77                    a0 = u8 [a0]
   721: 51 07 91 00              jump @102 if a0 == 0
      :                          @84
   725: 51 27 ff 00 90 00        jump @104 if a0 == 255
      :                          @85
   731: 6c 7a                    a3 = sext.b a0
   733: 57 0a 09                 jump @87 if a3 <s 0
      :                          @86
   736: 33 0a                    a3 = 0
   738: 33 08                    a1 = 0
   740: 28 73                    jump @101
      :                          @87
   742: 55 27 c0 00 0d           jump @89 if a0 >=u 192
      :                          @88
   747: 33 0a 01                 a3 = 0x1
   750: 33 0b 80                 a4 = 0xffffffffffffff80
   753: 28 4a                    jump @98
      :                          @89
   755: 55 27 e0 00 0e           jump @91 if a0 >=u 224
      :                          @90
   760: 33 0a 02                 a3 = 0x2
   763: 33 0b 40 ff              a4 = 0xffffffffffffff40
   767: 28 3c                    jump @98
      :                          @91
   769: 55 27 f0 00 0e           jump @93 if a0 >=u 240
      :                          @92
   774: 33 0a 03                 a3 = 0x3
   777: 33 0b 20 ff              a4 = 0xffffffffffffff20
   781: 28 2e                    jump @98
      :                          @93
   783: 55 27 f8 00 0e           jump @95 if a0 >=u 248
      :                          @94
   788: 33 0a 04                 a3 = 0x4
   791: 33 0b 10 ff              a4 = 0xffffffffffffff10
   795: 28 20                    jump @98
      :                          @95
   797: 55 27 fc 00 0e           jump @97 if a0 >=u 252
      :                          @96
   802: 33 0a 05                 a3 = 0x5
   805: 33 0b 08 ff              a4 = 0xffffffffffffff08
   809: 28 12                    jump @98
      :                          @97
   811: 88 7a fe 00              a3 = a0 <u 0xfe
   815: 33 0b 04 ff              a4 = 0xffffffffffffff04
   819: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
   823: 85 aa 07                 a3 = a3 ^ 0x7
   826: 01                       fallthrough
      :                          @98
   827: ae 8a 2b                 jump @105 if a3 >=u a1
      :                          @99
   830: 33 08                    a1 = 0
   832: c8 b7 07                 a0 = a0 + a4
   835: 64 ab                    a4 = a3
   837: 01                       fallthrough
      :                          @100
   838: c8 b9 0c                 a5 = a2 + a4
   841: 7c cc                    a5 = u8 [a5]
   843: 97 88 08                 a1 = a1 << 0x8
   846: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
   849: d4 c8 08                 a1 = a1 | a5
   852: 52 0b f2                 jump @100 if a4 != 0
      :                          @101
   855: 8a a9 03                 i32 a2 = a3 << 0x3
   858: cf 97 07                 a0 = a0 << a2
   861: c8 87 07                 a0 = a0 + a1
   864: 32 00                    ret
      :                          @102
   866: 32 00                    ret
      :                          @103
   868: 00                       trap
      :                          @104
   869: 00                       trap
      :                          @105
   870: 00                       trap
