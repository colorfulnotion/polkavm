// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 2 bytes
// RO data = []
// RW data = []
// Instructions = 250
// Code size = 775 bytes

      :                          @0
     0: 28 ab 00 00 00           jump @27
      :                          @1
     5: 28 ae 00 00 00           jump @28
      :                          @2
    10: 28 a7 02                 jump @76
      :                          @3
    13: 51 08 9b 00              jump @24 if a1 == 0
      :                          @4
    17: 64 79                    a2 = a0
    19: 7c 77                    a0 = u8 [a0]
    21: 51 07 91 00              jump @23 if a0 == 0
      :                          @5
    25: 51 27 ff 00 90 00        jump @25 if a0 == 255
      :                          @6
    31: 6c 7a                    a3 = sext.b a0
    33: 57 0a 09                 jump @8 if a3 <s 0
      :                          @7
    36: 33 0a                    a3 = 0
    38: 33 08                    a1 = 0
    40: 28 73                    jump @22
      :                          @8
    42: 55 27 c0 00 0d           jump @10 if a0 >=u 192
      :                          @9
    47: 33 0a 01                 a3 = 0x1
    50: 33 0b 80                 a4 = 0xffffffffffffff80
    53: 28 4a                    jump @19
      :                          @10
    55: 55 27 e0 00 0e           jump @12 if a0 >=u 224
      :                          @11
    60: 33 0a 02                 a3 = 0x2
    63: 33 0b 40 ff              a4 = 0xffffffffffffff40
    67: 28 3c                    jump @19
      :                          @12
    69: 55 27 f0 00 0e           jump @14 if a0 >=u 240
      :                          @13
    74: 33 0a 03                 a3 = 0x3
    77: 33 0b 20 ff              a4 = 0xffffffffffffff20
    81: 28 2e                    jump @19
      :                          @14
    83: 55 27 f8 00 0e           jump @16 if a0 >=u 248
      :                          @15
    88: 33 0a 04                 a3 = 0x4
    91: 33 0b 10 ff              a4 = 0xffffffffffffff10
    95: 28 20                    jump @19
      :                          @16
    97: 55 27 fc 00 0e           jump @18 if a0 >=u 252
      :                          @17
   102: 33 0a 05                 a3 = 0x5
   105: 33 0b 08 ff              a4 = 0xffffffffffffff08
   109: 28 12                    jump @19
      :                          @18
   111: 88 7a fe 00              a3 = a0 <u 0xfe
   115: 33 0b 04 ff              a4 = 0xffffffffffffff04
   119: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
   123: 85 aa 07                 a3 = a3 ^ 0x7
   126: 01                       fallthrough
      :                          @19
   127: ae 8a 2b                 jump @26 if a3 >=u a1
      :                          @20
   130: 33 08                    a1 = 0
   132: c8 b7 07                 a0 = a0 + a4
   135: 64 ab                    a4 = a3
   137: 01                       fallthrough
      :                          @21
   138: c8 b9 0c                 a5 = a2 + a4
   141: 7c cc                    a5 = u8 [a5]
   143: 97 88 08                 a1 = a1 << 0x8
   146: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
   149: d4 c8 08                 a1 = a1 | a5
   152: 52 0b f2                 jump @21 if a4 != 0
      :                          @22
   155: 8a a9 03                 i32 a2 = a3 << 0x3
   158: cf 97 07                 a0 = a0 << a2
   161: c8 87 07                 a0 = a0 + a1
   164: 32 00                    ret
      :                          @23
   166: 32 00                    ret
      :                          @24
   168: 00                       trap
      :                          @25
   169: 00                       trap
      :                          @26
   170: 00                       trap
      :                          @27 [export #0: 'refine']
   171: 33 08 08                 a1 = 0x8
   174: 95 77 04                 a0 = a0 + 0x4
   177: 32 00                    ret
      :                          @28 [export #1: 'accumulate']
   179: 95 11 60 ff              sp = sp + 0xffffffffffffff60
   183: 7b 10 98 00              u64 [sp + 0x98] = ra
   187: 7b 15 90 00              u64 [sp + 0x90] = s0
   191: 7b 16 88 00              u64 [sp + 0x88] = s1
   195: 64 85                    s0 = a1
   197: 95 55 f8                 s0 = s0 + 0xfffffffffffffff8
   200: 51 05 e4 01              jump @71 if s0 == 0
      :                          @29
   204: 95 77 08                 a0 = a0 + 0x8
   207: 7d 78                    a1 = i8 [a0]
   209: 33 06 01                 s1 = 0x1
   212: 5a 08 5d                 jump @37 if a1 >s 0
      :                          @30
   215: 84 8a ff 00              a3 = a1 & 0xff
   219: 83 a8 ff                 i32 a1 = a3 + 0xffffffffffffffff
   222: 84 88 ff 00              a1 = a1 & 0xff
   226: 33 06 02                 s1 = 0x2
   229: 53 28 bf 00 4c           jump @37 if a1 <u 191
      :                          @31
   234: 84 a8 e0 00              a1 = a3 & 0xe0
   238: 33 06 03                 s1 = 0x3
   241: 51 28 c0 00 40           jump @37 if a1 == 192
      :                          @32
   246: 84 a8 f0 00              a1 = a3 & 0xf0
   250: 33 06 04                 s1 = 0x4
   253: 51 28 e0 00 34           jump @37 if a1 == 224
      :                          @33
   258: 84 a8 f8 00              a1 = a3 & 0xf8
   262: 33 06 05                 s1 = 0x5
   265: 51 28 f0 00 28           jump @37 if a1 == 240
      :                          @34
   270: 84 a8 fc 00              a1 = a3 & 0xfc
   274: 33 06 06                 s1 = 0x6
   277: 51 28 f8 00 1c           jump @37 if a1 == 248
      :                          @35
   282: 84 a8 fe 00              a1 = a3 & 0xfe
   286: 33 06 07                 s1 = 0x7
   289: 51 28 fc 00 10           jump @37 if a1 == 252
      :                          @36
   294: 88 a8 fe 00              a1 = a3 <u 0xfe
   298: 85 86 01                 s1 = a1 ^ 0x1
   301: 97 66 03                 s1 = s1 << 0x3
   304: 01                       fallthrough
      :                          @37
   305: 7b 15                    u64 [sp] = s0
   307: ac 65 7a 01              jump @72 if s0 <u s1
      :                          @38
   311: 64 75                    s0 = a0
   313: 64 68                    a1 = s1
   315: 50 10 02 d2 fe           ra = 2, jump @3
      :                          @39 [@dyn 1]
   320: 51 07 28                 jump @44 if a0 == 0
      :                          @40
   323: 82 1a                    a3 = u64 [sp]
   325: aa 6a 69 01              jump @73 if a3 == s1
      :                          @41
   329: c8 56 07                 a0 = s1 + s0
   332: 7c 78                    a1 = u8 [a0]
   334: 95 7b 01                 a4 = a0 + 0x1
   337: 85 67 ff                 a0 = s1 ^ 0xffffffffffffffff
   340: c8 7a 0a                 a3 = a3 + a0
   343: 51 08 18                 jump @45 if a1 == 0
      :                          @42
   346: 33 05                    s0 = 0
   348: 33 06                    s1 = 0
   350: 95 a8 c0                 a1 = a3 + 0xffffffffffffffc0
   353: 52 08 a2 00              jump @59 if a1 != 0
      :                          @43
   357: 28 18 01                 jump @69
      :                          @44
   360: 33 05                    s0 = 0
   362: 33 06                    s1 = 0
   364: 28 11 01                 jump @69
      :                          @45
   367: 51 0a 7d                 jump @57 if a3 == 0
      :                          @46
   370: 7d b7                    a0 = i8 [a4]
   372: 33 05 01                 s0 = 0x1
   375: 5a 07 5a                 jump @54 if a0 >s 0
      :                          @47
   378: 84 77 ff 00              a0 = a0 & 0xff
   382: 83 78 ff                 i32 a1 = a0 + 0xffffffffffffffff
   385: 84 8c ff 00              a5 = a1 & 0xff
   389: 33 05 02                 s0 = 0x2
   392: 53 2c bf 00 49           jump @54 if a5 <u 191
      :                          @48
   397: 84 7c e0 00              a5 = a0 & 0xe0
   401: 33 05 03                 s0 = 0x3
   404: 51 2c c0 00 3d           jump @54 if a5 == 192
      :                          @49
   409: 84 7c f0 00              a5 = a0 & 0xf0
   413: 33 05 04                 s0 = 0x4
   416: 51 2c e0 00 31           jump @54 if a5 == 224
      :                          @50
   421: 84 7c f8 00              a5 = a0 & 0xf8
   425: 33 05 05                 s0 = 0x5
   428: 51 2c f0 00 25           jump @54 if a5 == 240
      :                          @51
   433: 84 7c fc 00              a5 = a0 & 0xfc
   437: 33 05 06                 s0 = 0x6
   440: 51 2c f8 00 19           jump @54 if a5 == 248
      :                          @52
   445: 84 7c fe 00              a5 = a0 & 0xfe
   449: 33 05 07                 s0 = 0x7
   452: 51 2c fc 00 0d           jump @54 if a5 == 252
      :                          @53
   457: 33 05 08                 s0 = 0x8
   460: 53 27 fe 00 20           jump @57 if a0 <u 254
      :                          @54
   465: 7b 1a                    u64 [sp] = a3
   467: ac 5a dc 00              jump @74 if a3 <u s0
      :                          @55
   471: 64 b7                    a0 = a4
   473: 64 58                    a1 = s0
   475: 64 b6                    s1 = a4
   477: 50 10 04 30 fe           ra = 4, jump @3
      :                          @56 [@dyn 2]
   482: 64 58                    a1 = s0
   484: 64 6b                    a4 = s1
   486: 64 76                    s1 = a0
   488: 82 1a                    a3 = u64 [sp]
   490: 28 07                    jump @58
      :                          @57
   492: 33 08                    a1 = 0
   494: 33 06                    s1 = 0
   496: 01                       fallthrough
      :                          @58
   497: c8 8b 05                 s0 = a4 + a1
   500: c8 65 0b                 a4 = s0 + s1
   503: c8 86 07                 a0 = s1 + a1
   506: c9 7a 0a                 a3 = a3 - a0
   509: 95 a8 c0                 a1 = a3 + 0xffffffffffffffc0
   512: 51 08 7d                 jump @69 if a1 == 0
      :                          @59
   515: 95 b7 40                 a0 = a4 + 0x40
   518: 7d 7a                    a3 = i8 [a0]
   520: 33 09 01                 a2 = 0x1
   523: 5a 0a 6b                 jump @68 if a3 >s 0
      :                          @60
   526: 84 aa ff 00              a3 = a3 & 0xff
   530: 83 a9 ff                 i32 a2 = a3 + 0xffffffffffffffff
   533: 84 9b ff 00              a4 = a2 & 0xff
   537: 33 0c bf 00              a5 = 0xbf
   541: 33 09 02                 a2 = 0x2
   544: ac cb 53                 jump @67 if a4 <u a5
      :                          @61
   547: 84 ab e0 00              a4 = a3 & 0xe0
   551: 33 0c c0 00              a5 = 0xc0
   555: 33 09 03                 a2 = 0x3
   558: aa cb 45                 jump @67 if a4 == a5
      :                          @62
   561: 84 ab f0 00              a4 = a3 & 0xf0
   565: 33 0c e0 00              a5 = 0xe0
   569: 33 09 04                 a2 = 0x4
   572: aa cb 37                 jump @67 if a4 == a5
      :                          @63
   575: 84 ab f8 00              a4 = a3 & 0xf8
   579: 33 0c f0 00              a5 = 0xf0
   583: 33 09 05                 a2 = 0x5
   586: aa cb 29                 jump @67 if a4 == a5
      :                          @64
   589: 84 ab fc 00              a4 = a3 & 0xfc
   593: 33 0c f8 00              a5 = 0xf8
   597: 33 09 06                 a2 = 0x6
   600: aa cb 1b                 jump @67 if a4 == a5
      :                          @65
   603: 84 ab fe 00              a4 = a3 & 0xfe
   607: 33 0c fc 00              a5 = 0xfc
   611: 33 09 07                 a2 = 0x7
   614: aa cb 0d                 jump @67 if a4 == a5
      :                          @66
   617: 33 0b fe 00              a4 = 0xfe
   621: 33 09 08                 a2 = 0x8
   624: ac ba 0d                 jump @69 if a3 <u a4
      :                          @67
   627: ac 98 3d                 jump @75 if a1 <u a2
      :                          @68
   630: 64 98                    a1 = a2
   632: 50 10 06 95 fd           ra = 6, jump @3
      :                          @69 [@dyn 3]
   637: c8 56 06                 s1 = s1 + s0
   640: 95 17 08                 a0 = sp + 0x8
   643: 33 09 80 00              a2 = 0x80
   647: 33 08                    a1 = 0
   649: 50 10 08 2c              ra = 8, jump @77
      :                          @70 [@dyn 4]
   653: 80 57                    a0 = u32 [s0]
   655: 80 68 fc                 a1 = u32 [s1 + 0xfffffffffffffffc]
   658: 33 09 64                 a2 = 0x64
   661: 95 1a 08                 a3 = sp + 0x8
   664: 0a 0b                    ecalli 11 // 'transfer'
   666: 82 10 98 00              ra = u64 [sp + 0x98]
   670: 82 15 90 00              s0 = u64 [sp + 0x90]
   674: 82 16 88 00              s1 = u64 [sp + 0x88]
   678: 95 11 a0 00              sp = sp + 0xa0
   682: 32 00                    ret
      :                          @71
   684: 00                       trap
      :                          @72
   685: 00                       trap
      :                          @73
   686: 00                       trap
      :                          @74
   687: 00                       trap
      :                          @75
   688: 00                       trap
      :                          @76 [export #2: 'on_transfer']
   689: 33 07                    a0 = 0
   691: 32 00                    ret
      :                          @77
   693: 8d 7a                    i32 a3 = -a0
   695: 84 aa 07                 a3 = a3 & 0x7
   698: c8 a7 0b                 a4 = a0 + a3
   701: 51 0a 0e                 jump @80 if a3 == 0
      :                          @78
   704: 64 7c                    a5 = a0
   706: 01                       fallthrough
      :                          @79
   707: 78 c8                    u8 [a5] = a1
   709: 95 cc 01                 a5 = a5 + 0x1
   712: ac bc fb                 jump @79 if a5 <u a4
      :                          @80
   715: c9 a9 03                 t1 = a2 - a3
   718: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
   721: c8 cb 0a                 a3 = a4 + a5
   724: 58 0c 1d                 jump @83 if a5 <=s 0
      :                          @81
   727: 84 82 ff 00              t0 = a1 & 0xff
   731: 14 09 01 01 01 01 01 01 01 01 a2 = 0x101010101010101
   741: ca 92 0c                 a5 = t0 * a2
   744: 01                       fallthrough
      :                          @82
   745: 7b bc                    u64 [a4] = a5
   747: 95 bb 08                 a4 = a4 + 0x8
   750: ac ab fb                 jump @82 if a4 <u a3
      :                          @83
   753: 84 39 07                 a2 = t1 & 0x7
   756: 52 09 05                 jump @85 if a2 != 0
      :                          @84
   759: 28 0e                    jump @87
      :                          @85
   761: c8 a9 09                 a2 = a2 + a3
   764: 01                       fallthrough
      :                          @86
   765: 78 a8                    u8 [a3] = a1
   767: 95 aa 01                 a3 = a3 + 0x1
   770: ac 9a fb                 jump @86 if a3 <u a2
      :                          @87
   773: 32 00                    ret
