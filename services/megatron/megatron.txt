// RO data = 49/52 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 2 bytes
// RO data = [112, 97, 114, 115, 101, 32, 114, 101, 102, 105, 110, 101, 32, 97, 114, 103, 115, 32, 115, 117, 99, 99, 101, 115, 115, 112, 97, 114, 115, 101, 32, 114, 101, 102, 105, 110, 101, 32, 97, 114, 103, 115, 32, 102, 97, 105, 108, 101, 100]
// RW data = []
// Instructions = 367
// Code size = 1132 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 ee 00 00 00           jump @19
      :                          @2
    10: 28 6e 03                 jump @66
      :                          @3 [export #0: 'refine']
    13: 95 11 d8                 sp = sp + 0xffffffffffffffd8
    16: 7b 10 20                 u64 [sp + 0x20] = ra
    19: 7b 15 18                 u64 [sp + 0x18] = s0
    22: 7b 16 10                 u64 [sp + 0x10] = s1
    25: 53 18 04 9c 00           jump @16 if a1 <u 4
      :                          @4
    30: 95 8a fc                 a3 = a1 + 0xfffffffffffffffc
    33: 51 0a 94 00              jump @16 if a3 == 0
      :                          @5
    37: 95 77 04                 a0 = a0 + 0x4
    40: 7b 17 08                 u64 [sp + 0x8] = a0
    43: 7d 77                    a0 = i8 [a0]
    45: 33 06 01                 s1 = 0x1
    48: 5a 07 5d                 jump @14 if a0 >s 0
      :                          @6
    51: 84 77 ff 00              a0 = a0 & 0xff
    55: 83 78 ff                 i32 a1 = a0 + 0xffffffffffffffff
    58: 84 8b ff 00              a4 = a1 & 0xff
    62: 33 06 02                 s1 = 0x2
    65: 53 2b bf 00 49           jump @13 if a4 <u 191
      :                          @7
    70: 84 7b e0 00              a4 = a0 & 0xe0
    74: 33 06 03                 s1 = 0x3
    77: 51 2b c0 00 3d           jump @13 if a4 == 192
      :                          @8
    82: 84 7b f0 00              a4 = a0 & 0xf0
    86: 33 06 04                 s1 = 0x4
    89: 51 2b e0 00 31           jump @13 if a4 == 224
      :                          @9
    94: 84 7b f8 00              a4 = a0 & 0xf8
    98: 33 06 05                 s1 = 0x5
   101: 51 2b f0 00 25           jump @13 if a4 == 240
      :                          @10
   106: 84 7b fc 00              a4 = a0 & 0xfc
   110: 33 06 06                 s1 = 0x6
   113: 51 2b f8 00 19           jump @13 if a4 == 248
      :                          @11
   118: 84 7b fe 00              a4 = a0 & 0xfe
   122: 33 06 07                 s1 = 0x7
   125: 51 2b fc 00 0d           jump @13 if a4 == 252
      :                          @12
   130: 33 06 08                 s1 = 0x8
   133: 53 27 fe 00 30           jump @16 if a0 <u 254
      :                          @13
   138: ac 6a 2b                 jump @16 if a3 <u s1
      :                          @14
   141: 82 17 08                 a0 = u64 [sp + 0x8]
   144: 64 68                    a1 = s1
   146: 7b 1a                    u64 [sp] = a3
   148: 50 10 02 3a 03           ra = 2, jump @78
      :                          @15 [@dyn 1]
   153: 64 75                    s0 = a0
   155: 82 17                    a0 = u64 [sp]
   157: e4 67 07                 a0 = maxu(a0, s1)
   160: c9 67 07                 a0 = a0 - s1
   163: d8 57 08                 a1 = a0 <u s0
   166: e4 57 07                 a0 = maxu(a0, s0)
   169: c9 57 07                 a0 = a0 - s0
   172: 88 77 20                 a0 = a0 <u 0x20
   175: d4 87 07                 a0 = a0 | a1
   178: 51 07 26                 jump @18 if a0 == 0
      :                          @16
   181: 33 0a 19 00 01           a3 = 0x10019
   186: 33 07 02                 a0 = 0x2
   189: 33 0b 18                 a4 = 0x18
   192: 33 08                    a1 = 0
   194: 33 09                    a2 = 0
   196: 0a 64                    ecalli 100 // 'log'
   198: 33 07 ff                 a0 = 0xffffffffffffffff
   201: 01                       fallthrough
      :                          @17
   202: 82 10 20                 ra = u64 [sp + 0x20]
   205: 82 15 18                 s0 = u64 [sp + 0x18]
   208: 82 16 10                 s1 = u64 [sp + 0x10]
   211: 95 11 28                 sp = sp + 0x28
   214: 32 00                    ret
      :                          @18
   216: 33 0a 00 00 01           a3 = 0x10000
   221: 33 07 02                 a0 = 0x2
   224: 33 0b 19                 a4 = 0x19
   227: 33 08                    a1 = 0
   229: 33 09                    a2 = 0
   231: 0a 64                    ecalli 100 // 'log'
   233: 64 58                    a1 = s0
   235: 82 17 08                 a0 = u64 [sp + 0x8]
   238: c8 67 07                 a0 = a0 + s1
   241: 28 d9                    jump @17
      :                          @19 [export #1: 'accumulate']
   243: 95 11 90                 sp = sp + 0xffffffffffffff90
   246: 7b 10 68                 u64 [sp + 0x68] = ra
   249: 7b 15 60                 u64 [sp + 0x60] = s0
   252: 7b 16 58                 u64 [sp + 0x58] = s1
   255: 64 86                    s1 = a1
   257: 95 66 f8                 s1 = s1 + 0xfffffffffffffff8
   260: 33 0a ff                 a3 = 0xffffffffffffffff
   263: 51 06 5f 02              jump @63 if s1 == 0
      :                          @20
   267: 95 77 08                 a0 = a0 + 0x8
   270: 7d 78                    a1 = i8 [a0]
   272: 33 05 01                 s0 = 0x1
   275: 5a 08 69                 jump @28 if a1 >s 0
      :                          @21
   278: 84 8b ff 00              a4 = a1 & 0xff
   282: 83 b8 ff                 i32 a1 = a4 + 0xffffffffffffffff
   285: 84 88 ff 00              a1 = a1 & 0xff
   289: 33 09 bf 00              a2 = 0xbf
   293: 33 05 02                 s0 = 0x2
   296: ac 98 54                 jump @28 if a1 <u a2
      :                          @22
   299: 84 b8 e0 00              a1 = a4 & 0xe0
   303: 33 09 c0 00              a2 = 0xc0
   307: 33 05 03                 s0 = 0x3
   310: aa 98 46                 jump @28 if a1 == a2
      :                          @23
   313: 84 b8 f0 00              a1 = a4 & 0xf0
   317: 33 09 e0 00              a2 = 0xe0
   321: 33 05 04                 s0 = 0x4
   324: aa 98 38                 jump @28 if a1 == a2
      :                          @24
   327: 84 b8 f8 00              a1 = a4 & 0xf8
   331: 33 09 f0 00              a2 = 0xf0
   335: 33 05 05                 s0 = 0x5
   338: aa 98 2a                 jump @28 if a1 == a2
      :                          @25
   341: 84 b8 fc 00              a1 = a4 & 0xfc
   345: 33 09 f8 00              a2 = 0xf8
   349: 33 05 06                 s0 = 0x6
   352: aa 98 1c                 jump @28 if a1 == a2
      :                          @26
   355: 84 b8 fe 00              a1 = a4 & 0xfe
   359: 33 09 fc 00              a2 = 0xfc
   363: 33 05 07                 s0 = 0x7
   366: aa 98 0e                 jump @28 if a1 == a2
      :                          @27
   369: 88 b8 fe 00              a1 = a4 <u 0xfe
   373: 85 85 01                 s0 = a1 ^ 0x1
   376: 97 55 03                 s0 = s0 << 0x3
   379: 01                       fallthrough
      :                          @28
   380: ac 56 ea 01              jump @63 if s1 <u s0
      :                          @29
   384: 64 58                    a1 = s0
   386: 7b 17                    u64 [sp] = a0
   388: 50 10 04 4a 02           ra = 4, jump @78
      :                          @30 [@dyn 2]
   393: 8e 77                    a0 = a0 >u 0
   395: d8 65 08                 a1 = s0 <u s1
   398: d2 87 07                 a0 = a0 & a1
   401: 51 07 28                 jump @34 if a0 == 0
      :                          @31
   404: 82 17                    a0 = u64 [sp]
   406: c8 57 07                 a0 = a0 + s0
   409: 7c 78                    a1 = u8 [a0]
   411: e4 56 06                 s1 = maxu(s1, s0)
   414: 95 7b 01                 a4 = a0 + 0x1
   417: 85 57 ff                 a0 = s0 ^ 0xffffffffffffffff
   420: c8 76 06                 s1 = s1 + a0
   423: 33 0a ff                 a3 = 0xffffffffffffffff
   426: 51 08 15                 jump @35 if a1 == 0
      :                          @32
   429: 33 0c                    a5 = 0
   431: 33 05                    s0 = 0
   433: 55 16 40 a7 00           jump @49 if s1 >=u 64
      :                          @33
   438: 28 b0 01                 jump @63
      :                          @34
   441: 33 0a ff                 a3 = 0xffffffffffffffff
   444: 28 aa 01                 jump @63
      :                          @35
   447: 51 06 7a                 jump @47 if s1 == 0
      :                          @36
   450: 7d b7                    a0 = i8 [a4]
   452: 33 05 01                 s0 = 0x1
   455: 5a 07 5a                 jump @44 if a0 >s 0
      :                          @37
   458: 84 77 ff 00              a0 = a0 & 0xff
   462: 83 78 ff                 i32 a1 = a0 + 0xffffffffffffffff
   465: 84 8c ff 00              a5 = a1 & 0xff
   469: 33 05 02                 s0 = 0x2
   472: 53 2c bf 00 49           jump @44 if a5 <u 191
      :                          @38
   477: 84 7c e0 00              a5 = a0 & 0xe0
   481: 33 05 03                 s0 = 0x3
   484: 51 2c c0 00 3d           jump @44 if a5 == 192
      :                          @39
   489: 84 7c f0 00              a5 = a0 & 0xf0
   493: 33 05 04                 s0 = 0x4
   496: 51 2c e0 00 31           jump @44 if a5 == 224
      :                          @40
   501: 84 7c f8 00              a5 = a0 & 0xf8
   505: 33 05 05                 s0 = 0x5
   508: 51 2c f0 00 25           jump @44 if a5 == 240
      :                          @41
   513: 84 7c fc 00              a5 = a0 & 0xfc
   517: 33 05 06                 s0 = 0x6
   520: 51 2c f8 00 19           jump @44 if a5 == 248
      :                          @42
   525: 84 7c fe 00              a5 = a0 & 0xfe
   529: 33 05 07                 s0 = 0x7
   532: 51 2c fc 00 0d           jump @44 if a5 == 252
      :                          @43
   537: 33 05 08                 s0 = 0x8
   540: 54 27 fd 00 1d           jump @47 if a0 <=u 253
      :                          @44
   545: ac 56 55 01              jump @64 if s1 <u s0
      :                          @45
   549: 64 b7                    a0 = a4
   551: 64 58                    a1 = s0
   553: 7b 1b                    u64 [sp] = a4
   555: 50 10 06 a3 01           ra = 6, jump @78
      :                          @46 [@dyn 3]
   560: 64 59                    a2 = s0
   562: 82 1b                    a4 = u64 [sp]
   564: 33 0a ff                 a3 = 0xffffffffffffffff
   567: 28 07                    jump @48
      :                          @47
   569: 33 09                    a2 = 0
   571: 33 07                    a0 = 0
   573: 01                       fallthrough
      :                          @48
   574: c8 9b 05                 s0 = a4 + a2
   577: e4 96 08                 a1 = maxu(s1, a2)
   580: c9 98 08                 a1 = a1 - a2
   583: e6 78 0c                 a5 = minu(a1, a0)
   586: c8 75 0b                 a4 = s0 + a0
   589: e4 78 06                 s1 = maxu(a1, a0)
   592: c9 76 06                 s1 = s1 - a0
   595: 53 16 40 13 01           jump @63 if s1 <u 64
      :                          @49
   600: 95 68 c0                 a1 = s1 + 0xffffffffffffffc0
   603: 51 08 79                 jump @61 if a1 == 0
      :                          @50
   606: 95 b7 40                 a0 = a4 + 0x40
   609: 7d 7a                    a3 = i8 [a0]
   611: 33 09 01                 a2 = 0x1
   614: 5a 0a 62                 jump @59 if a3 >s 0
      :                          @51
   617: 84 aa ff 00              a3 = a3 & 0xff
   621: 83 a9 ff                 i32 a2 = a3 + 0xffffffffffffffff
   624: 84 9b ff 00              a4 = a2 & 0xff
   628: 33 09 02                 a2 = 0x2
   631: 53 2b bf 00 4d           jump @58 if a4 <u 191
      :                          @52
   636: 84 ab e0 00              a4 = a3 & 0xe0
   640: 33 09 03                 a2 = 0x3
   643: 51 2b c0 00 41           jump @58 if a4 == 192
      :                          @53
   648: 84 ab f0 00              a4 = a3 & 0xf0
   652: 33 09 04                 a2 = 0x4
   655: 51 2b e0 00 35           jump @58 if a4 == 224
      :                          @54
   660: 84 ab f8 00              a4 = a3 & 0xf8
   664: 33 09 05                 a2 = 0x5
   667: 51 2b f0 00 29           jump @58 if a4 == 240
      :                          @55
   672: 84 ab fc 00              a4 = a3 & 0xfc
   676: 33 09 06                 a2 = 0x6
   679: 51 2b f8 00 1d           jump @58 if a4 == 248
      :                          @56
   684: 84 ab fe 00              a4 = a3 & 0xfe
   688: 33 06 fc 00              s1 = 0xfc
   692: 33 09 07                 a2 = 0x7
   695: aa 6b 0d                 jump @58 if a4 == s1
      :                          @57
   698: 33 0b fe 00              a4 = 0xfe
   702: 33 09 08                 a2 = 0x8
   705: ac ba 13                 jump @61 if a3 <u a4
      :                          @58
   708: ac 98 b3 00              jump @65 if a1 <u a2
      :                          @59
   712: 64 98                    a1 = a2
   714: 64 c6                    s1 = a5
   716: 50 10 08 02 01           ra = 8, jump @78
      :                          @60 [@dyn 4]
   721: 64 6c                    a5 = s1
   723: 01                       fallthrough
      :                          @61
   724: c8 c5 08                 a1 = s0 + a5
   727: 48 11 10                 u32 [sp + 16] = 0
   730: 49 11 08                 u64 [sp + 8] = 0
   733: 48 11 20                 u32 [sp + 32] = 0
   736: 49 11 18                 u64 [sp + 24] = 0
   739: 46 11 2b                 u8 [sp + 43] = 0
   742: 80 57                    a0 = u32 [s0]
   744: 80 85 fc                 s0 = u32 [a1 + 0xfffffffffffffffc]
   747: 95 18 2b                 a1 = sp + 0x2b
   750: 33 09 01                 a2 = 0x1
   753: 95 1a 08                 a3 = sp + 0x8
   756: 33 0c 0c                 a5 = 0xc
   759: 33 0b                    a4 = 0
   761: 0a 02                    ecalli 2 // 'read'
   763: 95 18 2b                 a1 = sp + 0x2b
   766: 33 09 01                 a2 = 0x1
   769: 95 1a 18                 a3 = sp + 0x18
   772: 33 0c 0c                 a5 = 0xc
   775: 64 57                    a0 = s0
   777: 33 0b                    a4 = 0
   779: 0a 02                    ecalli 2 // 'read'
   781: 81 17 0c                 a0 = i32 [sp + 0xc]
   784: 81 18 10                 a1 = i32 [sp + 0x10]
   787: 81 19 1c                 a2 = i32 [sp + 0x1c]
   790: 81 1a 20                 a3 = i32 [sp + 0x20]
   793: 81 1b 08                 a4 = i32 [sp + 0x8]
   796: be 97 07                 i32 a0 = a0 + a2
   799: be a8 08                 i32 a1 = a1 + a3
   802: 7a 1b 2c                 u32 [sp + 0x2c] = a4
   805: 7a 17 30                 u32 [sp + 0x30] = a0
   808: 7a 18 34                 u32 [sp + 0x34] = a1
   811: 95 17 2b                 a0 = sp + 0x2b
   814: 33 08 01                 a1 = 0x1
   817: 95 19 2c                 a2 = sp + 0x2c
   820: 33 0a 0c                 a3 = 0xc
   823: 0a 03                    ecalli 3 // 'write'
   825: 95 17 44                 a0 = sp + 0x44
   828: 33 09 14                 a2 = 0x14
   831: 33 08                    a1 = 0
   833: 50 10 0a 3b              ra = 10, jump @67
      :                          @62 [@dyn 5]
   837: 81 17 34                 a0 = i32 [sp + 0x34]
   840: 80 18 30                 a1 = u32 [sp + 0x30]
   843: 80 19 2c                 a2 = u32 [sp + 0x2c]
   846: 7a 17 40                 u32 [sp + 0x40] = a0
   849: 97 88 20                 a1 = a1 << 0x20
   852: d4 98 08                 a1 = a1 | a2
   855: 7b 18 38                 u64 [sp + 0x38] = a1
   858: 95 17 38                 a0 = sp + 0x38
   861: 0a 10                    ecalli 16 // 'oyield'
   863: 33 08 20                 a1 = 0x20
   866: 95 1a 38                 a3 = sp + 0x38
   869: 01                       fallthrough
      :                          @63
   870: 64 a7                    a0 = a3
   872: 82 10 68                 ra = u64 [sp + 0x68]
   875: 82 15 60                 s0 = u64 [sp + 0x60]
   878: 82 16 58                 s1 = u64 [sp + 0x58]
   881: 95 11 70                 sp = sp + 0x70
   884: 32 00                    ret
      :                          @64
   886: 00                       trap
      :                          @65
   887: 00                       trap
      :                          @66 [export #2: 'on_transfer']
   888: 33 07                    a0 = 0
   890: 32 00                    ret
      :                          @67
   892: 8d 7a                    i32 a3 = -a0
   894: 84 aa 07                 a3 = a3 & 0x7
   897: c8 a7 0b                 a4 = a0 + a3
   900: 51 0a 0e                 jump @70 if a3 == 0
      :                          @68
   903: 64 7c                    a5 = a0
   905: 01                       fallthrough
      :                          @69
   906: 78 c8                    u8 [a5] = a1
   908: 95 cc 01                 a5 = a5 + 0x1
   911: ac bc fb                 jump @69 if a5 <u a4
      :                          @70
   914: c9 a9 03                 t1 = a2 - a3
   917: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
   920: c8 cb 0a                 a3 = a4 + a5
   923: 58 0c 1d                 jump @73 if a5 <=s 0
      :                          @71
   926: 84 82 ff 00              t0 = a1 & 0xff
   930: 14 09 01 01 01 01 01 01 01 01 a2 = 0x101010101010101
   940: ca 92 0c                 a5 = t0 * a2
   943: 01                       fallthrough
      :                          @72
   944: 7b bc                    u64 [a4] = a5
   946: 95 bb 08                 a4 = a4 + 0x8
   949: ac ab fb                 jump @72 if a4 <u a3
      :                          @73
   952: 84 39 07                 a2 = t1 & 0x7
   955: 52 09 05                 jump @75 if a2 != 0
      :                          @74
   958: 28 0e                    jump @77
      :                          @75
   960: c8 a9 09                 a2 = a2 + a3
   963: 01                       fallthrough
      :                          @76
   964: 78 a8                    u8 [a3] = a1
   966: 95 aa 01                 a3 = a3 + 0x1
   969: ac 9a fb                 jump @76 if a3 <u a2
      :                          @77
   972: 32 00                    ret
      :                          @78
   974: 51 08 9b 00              jump @99 if a1 == 0
      :                          @79
   978: 64 79                    a2 = a0
   980: 7c 77                    a0 = u8 [a0]
   982: 51 07 91 00              jump @98 if a0 == 0
      :                          @80
   986: 51 27 ff 00 90 00        jump @100 if a0 == 255
      :                          @81
   992: 6c 7a                    a3 = sext.b a0
   994: 57 0a 09                 jump @83 if a3 <s 0
      :                          @82
   997: 33 0a                    a3 = 0
   999: 33 08                    a1 = 0
  1001: 28 73                    jump @97
      :                          @83
  1003: 55 27 c0 00 0d           jump @85 if a0 >=u 192
      :                          @84
  1008: 33 0a 01                 a3 = 0x1
  1011: 33 0b 80                 a4 = 0xffffffffffffff80
  1014: 28 4a                    jump @94
      :                          @85
  1016: 55 27 e0 00 0e           jump @87 if a0 >=u 224
      :                          @86
  1021: 33 0a 02                 a3 = 0x2
  1024: 33 0b 40 ff              a4 = 0xffffffffffffff40
  1028: 28 3c                    jump @94
      :                          @87
  1030: 55 27 f0 00 0e           jump @89 if a0 >=u 240
      :                          @88
  1035: 33 0a 03                 a3 = 0x3
  1038: 33 0b 20 ff              a4 = 0xffffffffffffff20
  1042: 28 2e                    jump @94
      :                          @89
  1044: 55 27 f8 00 0e           jump @91 if a0 >=u 248
      :                          @90
  1049: 33 0a 04                 a3 = 0x4
  1052: 33 0b 10 ff              a4 = 0xffffffffffffff10
  1056: 28 20                    jump @94
      :                          @91
  1058: 55 27 fc 00 0e           jump @93 if a0 >=u 252
      :                          @92
  1063: 33 0a 05                 a3 = 0x5
  1066: 33 0b 08 ff              a4 = 0xffffffffffffff08
  1070: 28 12                    jump @94
      :                          @93
  1072: 88 7a fe 00              a3 = a0 <u 0xfe
  1076: 33 0b 04 ff              a4 = 0xffffffffffffff04
  1080: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  1084: 85 aa 07                 a3 = a3 ^ 0x7
  1087: 01                       fallthrough
      :                          @94
  1088: ae 8a 2b                 jump @101 if a3 >=u a1
      :                          @95
  1091: 33 08                    a1 = 0
  1093: c8 b7 07                 a0 = a0 + a4
  1096: 64 ab                    a4 = a3
  1098: 01                       fallthrough
      :                          @96
  1099: c8 b9 0c                 a5 = a2 + a4
  1102: 7c cc                    a5 = u8 [a5]
  1104: 97 88 08                 a1 = a1 << 0x8
  1107: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  1110: d4 c8 08                 a1 = a1 | a5
  1113: 52 0b f2                 jump @96 if a4 != 0
      :                          @97
  1116: 8a a9 03                 i32 a2 = a3 << 0x3
  1119: cf 97 07                 a0 = a0 << a2
  1122: c8 87 07                 a0 = a0 + a1
  1125: 32 00                    ret
      :                          @98
  1127: 32 00                    ret
      :                          @99
  1129: 00                       trap
      :                          @100
  1130: 00                       trap
      :                          @101
  1131: 00                       trap
