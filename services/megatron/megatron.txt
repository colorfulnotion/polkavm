// RO data = 680/680 bytes
// RW data = 16/4176 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 2 bytes
// RO data = [109, 101, 103, 40, 109, 101, 103, 32, 114, 101, 97, 100, 32, 32, 32, 32, 32, 114, 101, 97, 100, 32, 102, 114, 111, 109, 32, 115, 101, 114, 118, 105, 99, 101, 32, 32, 102, 105, 98, 40, 110, 61, 41, 61, 32, 116, 114, 105, 98, 40, 110, 61, 116, 114, 97, 110, 115, 102, 101, 114, 32, 119, 114, 105, 116, 101, 40, 110, 61, 41, 32, 110, 117, 109, 95, 116, 114, 97, 110, 115, 102, 101, 114, 115, 61, 32, 116, 114, 97, 110, 115, 102, 101, 114, 40, 100, 101, 115, 116, 58, 44, 32, 97, 109, 111, 117, 110, 116, 61, 44, 32, 103, 97, 115, 95, 97, 118, 97, 105, 108, 61, 41, 32, 82, 101, 115, 117, 108, 116, 58, 32, 0, 0, 0, 0, 0, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 16, 0, 1, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 35, 0, 1, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 42, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 16, 0, 1, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 44, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 42, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 42, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 60, 0, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 69, 0, 1, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 136, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 1, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 100, 0, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 109, 0, 1, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 121, 0, 1, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0]
// RW data = [75, 89, 134, 56, 214, 197, 109, 52, 128, 128, 128, 128, 128, 128, 128, 128]
// Instructions = 1906
// Code size = 5675 bytes

      :                          @0
     0: 28 84 02 00 00           jump @45
      :                          @1
     5: 28 25 03 00 00           jump @60
      :                          @2
    10: 28 53 0a                 jump @170
      :                          @3 [@dyn 1]
    13: 95 11 78 ff              sp = sp + 0xffffffffffffff78
    17: 7b 10 80 00              u64 [sp + 0x80] = ra
    21: 64 82                    t0 = a1
    23: 80 88 34                 a1 = u32 [a1 + 0x34]
    26: 84 89 10                 a2 = a1 & 0x10
    29: 52 09 28                 jump @6 if a2 != 0
      :                          @4
    32: 84 88 20                 a1 = a1 & 0x20
    35: 52 08 68                 jump @10 if a1 != 0
      :                          @5
    38: 81 77                    a0 = i32 [a0]
    40: 89 79                    a2 = a0 <s 0
    42: 85 98 01                 a1 = a2 ^ 0x1
    45: 97 7a 20                 a3 = a0 << 0x20
    48: 98 aa 20                 a3 = a3 >> 0x20
    51: 9a 77                    a0 = -a0
    53: da 9a 07                 a0 = a3 if a2 == 0
    56: 64 29                    a2 = t0
    58: 82 10 80 00              ra = u64 [sp + 0x80]
    62: 95 11 88 00              sp = sp + 0x88
    66: 28 c9 0f                 jump @308
      :                          @6
    69: 81 7a                    a3 = i32 [a0]
    71: 33 08 81 00              a1 = 0x81
    75: 95 17 7f                 a0 = sp + 0x7f
    78: 33 03 57                 t1 = 0x57
    81: 01                       fallthrough
      :                          @7
    82: 64 8b                    a4 = a1
    84: 8b ac 04                 i32 a5 = a3 >> 0x4
    87: 84 aa 0f                 a3 = a3 & 0xf
    90: 88 a8 0a                 a1 = a3 <u 0xa
    93: 33 09 30                 a2 = 0x30
    96: da 83 09                 a2 = t1 if a1 == 0
    99: be a9 09                 i32 a2 = a2 + a3
   102: 78 79                    u8 [a0] = a2
   104: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   107: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   110: 64 ca                    a3 = a5
   112: 52 0c e2                 jump @7 if a5 != 0
      :                          @8
   115: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   118: 56 27 80 00 71           jump @16 if a0 >u 128
      :                          @9
   123: 9a 8c 81 00              a5 = 0x81 - a1
   127: 64 1b                    a4 = sp
   129: c8 7b 0b                 a4 = a4 + a0
   132: 33 09 88 00 01           a2 = 0x10088
   137: 28 47                    jump @14
      :                          @10
   139: 81 7a                    a3 = i32 [a0]
   141: 33 08 81 00              a1 = 0x81
   145: 95 17 7f                 a0 = sp + 0x7f
   148: 33 03 37                 t1 = 0x37
   151: 01                       fallthrough
      :                          @11
   152: 64 8b                    a4 = a1
   154: 8b ac 04                 i32 a5 = a3 >> 0x4
   157: 84 aa 0f                 a3 = a3 & 0xf
   160: 88 a8 0a                 a1 = a3 <u 0xa
   163: 33 09 30                 a2 = 0x30
   166: da 83 09                 a2 = t1 if a1 == 0
   169: be a9 09                 i32 a2 = a2 + a3
   172: 78 79                    u8 [a0] = a2
   174: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   177: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   180: 64 ca                    a3 = a5
   182: 52 0c e2                 jump @11 if a5 != 0
      :                          @12
   185: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   188: 56 27 80 00 2b           jump @16 if a0 >u 128
      :                          @13
   193: 9a 8c 81 00              a5 = 0x81 - a1
   197: 64 1b                    a4 = sp
   199: c8 7b 0b                 a4 = a4 + a0
   202: 33 09 88 00 01           a2 = 0x10088
   207: 01                       fallthrough
      :                          @14
   208: 33 08 01                 a1 = 0x1
   211: 33 0a 02                 a3 = 0x2
   214: 64 27                    a0 = t0
   216: 50 10 04 55 10           ra = 4, jump @318
      :                          @15 [@dyn 2]
   221: 82 10 80 00              ra = u64 [sp + 0x80]
   225: 95 11 88 00              sp = sp + 0x88
   229: 32 00                    ret
      :                          @16
   231: 00                       trap
      :                          @17 [@dyn 3]
   232: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   236: 7b 10 80 00              u64 [sp + 0x80] = ra
   240: 64 82                    t0 = a1
   242: 80 88 34                 a1 = u32 [a1 + 0x34]
   245: 84 89 10                 a2 = a1 & 0x10
   248: 52 09 1b                 jump @20 if a2 != 0
      :                          @18
   251: 84 88 20                 a1 = a1 & 0x20
   254: 52 08 5b                 jump @24 if a1 != 0
      :                          @19
   257: 80 77                    a0 = u32 [a0]
   259: 33 08 01                 a1 = 0x1
   262: 64 29                    a2 = t0
   264: 82 10 80 00              ra = u64 [sp + 0x80]
   268: 95 11 88 00              sp = sp + 0x88
   272: 28 fb 0e                 jump @308
      :                          @20
   275: 81 7a                    a3 = i32 [a0]
   277: 33 08 81 00              a1 = 0x81
   281: 95 17 7f                 a0 = sp + 0x7f
   284: 33 03 57                 t1 = 0x57
   287: 01                       fallthrough
      :                          @21
   288: 64 8b                    a4 = a1
   290: 8b ac 04                 i32 a5 = a3 >> 0x4
   293: 84 aa 0f                 a3 = a3 & 0xf
   296: 88 a8 0a                 a1 = a3 <u 0xa
   299: 33 09 30                 a2 = 0x30
   302: da 83 09                 a2 = t1 if a1 == 0
   305: be a9 09                 i32 a2 = a2 + a3
   308: 78 79                    u8 [a0] = a2
   310: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   313: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   316: 64 ca                    a3 = a5
   318: 52 0c e2                 jump @21 if a5 != 0
      :                          @22
   321: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   324: 56 27 80 00 71           jump @30 if a0 >u 128
      :                          @23
   329: 9a 8c 81 00              a5 = 0x81 - a1
   333: 64 1b                    a4 = sp
   335: c8 7b 0b                 a4 = a4 + a0
   338: 33 09 88 00 01           a2 = 0x10088
   343: 28 47                    jump @28
      :                          @24
   345: 81 7a                    a3 = i32 [a0]
   347: 33 08 81 00              a1 = 0x81
   351: 95 17 7f                 a0 = sp + 0x7f
   354: 33 03 37                 t1 = 0x37
   357: 01                       fallthrough
      :                          @25
   358: 64 8b                    a4 = a1
   360: 8b ac 04                 i32 a5 = a3 >> 0x4
   363: 84 aa 0f                 a3 = a3 & 0xf
   366: 88 a8 0a                 a1 = a3 <u 0xa
   369: 33 09 30                 a2 = 0x30
   372: da 83 09                 a2 = t1 if a1 == 0
   375: be a9 09                 i32 a2 = a2 + a3
   378: 78 79                    u8 [a0] = a2
   380: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   383: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   386: 64 ca                    a3 = a5
   388: 52 0c e2                 jump @25 if a5 != 0
      :                          @26
   391: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   394: 56 27 80 00 2b           jump @30 if a0 >u 128
      :                          @27
   399: 9a 8c 81 00              a5 = 0x81 - a1
   403: 64 1b                    a4 = sp
   405: c8 7b 0b                 a4 = a4 + a0
   408: 33 09 88 00 01           a2 = 0x10088
   413: 01                       fallthrough
      :                          @28
   414: 33 08 01                 a1 = 0x1
   417: 33 0a 02                 a3 = 0x2
   420: 64 27                    a0 = t0
   422: 50 10 08 87 0f           ra = 8, jump @318
      :                          @29 [@dyn 4]
   427: 82 10 80 00              ra = u64 [sp + 0x80]
   431: 95 11 88 00              sp = sp + 0x88
   435: 32 00                    ret
      :                          @30
   437: 00                       trap
      :                          @31 [@dyn 5]
   438: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   442: 7b 10 80 00              u64 [sp + 0x80] = ra
   446: 64 82                    t0 = a1
   448: 80 88 34                 a1 = u32 [a1 + 0x34]
   451: 84 89 10                 a2 = a1 & 0x10
   454: 52 09 1b                 jump @34 if a2 != 0
      :                          @32
   457: 84 88 20                 a1 = a1 & 0x20
   460: 52 08 5b                 jump @38 if a1 != 0
      :                          @33
   463: 82 77                    a0 = u64 [a0]
   465: 33 08 01                 a1 = 0x1
   468: 64 29                    a2 = t0
   470: 82 10 80 00              ra = u64 [sp + 0x80]
   474: 95 11 88 00              sp = sp + 0x88
   478: 28 2d 0e                 jump @308
      :                          @34
   481: 82 7a                    a3 = u64 [a0]
   483: 33 08 81 00              a1 = 0x81
   487: 95 17 7f                 a0 = sp + 0x7f
   490: 33 03 57                 t1 = 0x57
   493: 01                       fallthrough
      :                          @35
   494: 64 8b                    a4 = a1
   496: 98 ac 04                 a5 = a3 >> 0x4
   499: 84 aa 0f                 a3 = a3 & 0xf
   502: 88 a8 0a                 a1 = a3 <u 0xa
   505: 33 09 30                 a2 = 0x30
   508: da 83 09                 a2 = t1 if a1 == 0
   511: be a9 09                 i32 a2 = a2 + a3
   514: 78 79                    u8 [a0] = a2
   516: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   519: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   522: 64 ca                    a3 = a5
   524: 52 0c e2                 jump @35 if a5 != 0
      :                          @36
   527: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   530: 56 27 80 00 71           jump @44 if a0 >u 128
      :                          @37
   535: 9a 8c 81 00              a5 = 0x81 - a1
   539: 64 1b                    a4 = sp
   541: c8 7b 0b                 a4 = a4 + a0
   544: 33 09 88 00 01           a2 = 0x10088
   549: 28 47                    jump @42
      :                          @38
   551: 82 7a                    a3 = u64 [a0]
   553: 33 08 81 00              a1 = 0x81
   557: 95 17 7f                 a0 = sp + 0x7f
   560: 33 03 37                 t1 = 0x37
   563: 01                       fallthrough
      :                          @39
   564: 64 8b                    a4 = a1
   566: 98 ac 04                 a5 = a3 >> 0x4
   569: 84 aa 0f                 a3 = a3 & 0xf
   572: 88 a8 0a                 a1 = a3 <u 0xa
   575: 33 09 30                 a2 = 0x30
   578: da 83 09                 a2 = t1 if a1 == 0
   581: be a9 09                 i32 a2 = a2 + a3
   584: 78 79                    u8 [a0] = a2
   586: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   589: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   592: 64 ca                    a3 = a5
   594: 52 0c e2                 jump @39 if a5 != 0
      :                          @40
   597: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   600: 56 27 80 00 2b           jump @44 if a0 >u 128
      :                          @41
   605: 9a 8c 81 00              a5 = 0x81 - a1
   609: 64 1b                    a4 = sp
   611: c8 7b 0b                 a4 = a4 + a0
   614: 33 09 88 00 01           a2 = 0x10088
   619: 01                       fallthrough
      :                          @42
   620: 33 08 01                 a1 = 0x1
   623: 33 0a 02                 a3 = 0x2
   626: 64 27                    a0 = t0
   628: 50 10 0c b9 0e           ra = 12, jump @318
      :                          @43 [@dyn 6]
   633: 82 10 80 00              ra = u64 [sp + 0x80]
   637: 95 11 88 00              sp = sp + 0x88
   641: 32 00                    ret
      :                          @44
   643: 00                       trap
      :                          @45 [export #0: 'refine']
   644: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   647: 7b 10 18                 u64 [sp + 0x18] = ra
   650: 7b 15 10                 u64 [sp + 0x10] = s0
   653: 7b 16 08                 u64 [sp + 0x8] = s1
   656: 64 86                    s1 = a1
   658: 64 78                    a1 = a0
   660: 33 09 04                 a2 = 0x4
   663: 33 07 00 00 01           a0 = 0x10000
   668: ac 96 7c                 jump @57 if s1 <u a2
      :                          @46
   671: 95 66 fc                 s1 = s1 + 0xfffffffffffffffc
   674: 51 06 76                 jump @57 if s1 == 0
      :                          @47
   677: 95 87 04                 a0 = a1 + 0x4
   680: 7d 78                    a1 = i8 [a0]
   682: 33 05 01                 s0 = 0x1
   685: 59 08 3a                 jump @55 if a1 >=s 0
      :                          @48
   688: 84 89 ff 00              a2 = a1 & 0xff
   692: 33 05 02                 s0 = 0x2
   695: 53 29 c0 00 2d           jump @54 if a2 <u 192
      :                          @49
   700: 33 05 03                 s0 = 0x3
   703: 53 29 e0 00 25           jump @54 if a2 <u 224
      :                          @50
   708: 33 05 04                 s0 = 0x4
   711: 53 29 f0 00 1d           jump @54 if a2 <u 240
      :                          @51
   716: 33 05 05                 s0 = 0x5
   719: 53 29 f8 00 15           jump @54 if a2 <u 248
      :                          @52
   724: 33 05 06                 s0 = 0x6
   727: 53 29 fc 00 0d           jump @54 if a2 <u 252
      :                          @53
   732: 88 98 fe 00              a1 = a2 <u 0xfe
   736: 9a 85 08                 s0 = 0x8 - a1
   739: 01                       fallthrough
      :                          @54
   740: ac 56 45                 jump @59 if s1 <u s0
      :                          @55
   743: 64 58                    a1 = s0
   745: 7b 17                    u64 [sp] = a0
   747: 50 10 0e a2 12           ra = 14, jump @410
      :                          @56 [@dyn 7]
   752: 64 78                    a1 = a0
   754: e4 56 07                 a0 = maxu(s1, s0)
   757: c9 57 07                 a0 = a0 - s0
   760: d8 87 09                 a2 = a0 <u a1
   763: e4 87 07                 a0 = maxu(a0, a1)
   766: c9 87 07                 a0 = a0 - a1
   769: 88 77 20                 a0 = a0 <u 0x20
   772: d4 79 09                 a2 = a2 | a0
   775: 82 17                    a0 = u64 [sp]
   777: c8 75 05                 s0 = s0 + a0
   780: 94 98                    a1 = 0 if a2 != 0
   782: 33 07 00 00 01           a0 = 0x10000
   787: da 95 07                 a0 = s0 if a2 == 0
   790: 28 05                    jump @58
      :                          @57
   792: 33 08                    a1 = 0
   794: 01                       fallthrough
      :                          @58
   795: 82 10 18                 ra = u64 [sp + 0x18]
   798: 82 15 10                 s0 = u64 [sp + 0x10]
   801: 82 16 08                 s1 = u64 [sp + 0x8]
   804: 95 11 20                 sp = sp + 0x20
   807: 32 00                    ret
      :                          @59
   809: 00                       trap
      :                          @60 [export #1: 'accumulate']
   810: 95 11 f0 fd              sp = sp + 0xfffffffffffffdf0
   814: 7b 10 08 02              u64 [sp + 0x208] = ra
   818: 7b 15 00 02              u64 [sp + 0x200] = s0
   822: 7b 16 f8 01              u64 [sp + 0x1f8] = s1
   826: 33 09 08                 a2 = 0x8
   829: ac 98 e8 00              jump @90 if a1 <u a2
      :                          @61
   833: 51 17 fc 18 07           jump @166 if a0 == 4294967292
      :                          @62
   838: 51 07 14 07              jump @167 if a0 == 0
      :                          @63
   842: 95 8a f8                 a3 = a1 + 0xfffffffffffffff8
   845: 95 75 08                 s0 = a0 + 0x8
   848: 51 0a 45                 jump @73 if a3 == 0
      :                          @64
   851: 7d 58                    a1 = i8 [s0]
   853: 33 06 01                 s1 = 0x1
   856: 59 08 40                 jump @74 if a1 >=s 0
      :                          @65
   859: 84 89 ff 00              a2 = a1 & 0xff
   863: 33 06 02                 s1 = 0x2
   866: 53 29 c0 00 2d           jump @71 if a2 <u 192
      :                          @66
   871: 33 06 03                 s1 = 0x3
   874: 53 29 e0 00 25           jump @71 if a2 <u 224
      :                          @67
   879: 33 06 04                 s1 = 0x4
   882: 53 29 f0 00 1d           jump @71 if a2 <u 240
      :                          @68
   887: 33 06 05                 s1 = 0x5
   890: 53 29 f8 00 15           jump @71 if a2 <u 248
      :                          @69
   895: 33 06 06                 s1 = 0x6
   898: 53 29 fc 00 0d           jump @71 if a2 <u 252
      :                          @70
   903: 88 98 fe 00              a1 = a2 <u 0xfe
   907: 9a 86 08                 s1 = 0x8 - a1
   910: 01                       fallthrough
      :                          @71
   911: ae 6a 09                 jump @74 if a3 >=u s1
      :                          @72
   914: 28 93 00                 jump @90
      :                          @73
   917: 33 06                    s1 = 0
   919: 01                       fallthrough
      :                          @74
   920: 7b 16 60                 u64 [sp + 0x60] = s1
   923: 64 57                    a0 = s0
   925: 64 68                    a1 = s1
   927: 64 a6                    s1 = a3
   929: 50 10 10 ec 11           ra = 16, jump @410
      :                          @75 [@dyn 8]
   934: 82 1a 60                 a3 = u64 [sp + 0x60]
   937: 51 07 7c                 jump @90 if a0 == 0
      :                          @76
   940: e4 a6 07                 a0 = maxu(s1, a3)
   943: c9 a7 07                 a0 = a0 - a3
   946: 53 17 60 73              jump @90 if a0 <u 96
      :                          @77
   950: c8 5a 08                 a1 = a3 + s0
   953: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   956: 95 87 60                 a0 = a1 + 0x60
   959: 7b 17 60                 u64 [sp + 0x60] = a0
   962: 51 06 4c                 jump @88 if s1 == 0
      :                          @78
   965: 7d 78                    a1 = i8 [a0]
   967: 33 05 01                 s0 = 0x1
   970: 59 08 37                 jump @85 if a1 >=s 0
      :                          @79
   973: 84 89 ff 00              a2 = a1 & 0xff
   977: 33 05 02                 s0 = 0x2
   980: 53 29 c0 00 2d           jump @85 if a2 <u 192
      :                          @80
   985: 33 05 03                 s0 = 0x3
   988: 53 29 e0 00 25           jump @85 if a2 <u 224
      :                          @81
   993: 33 05 04                 s0 = 0x4
   996: 53 29 f0 00 1d           jump @85 if a2 <u 240
      :                          @82
  1001: 33 05 05                 s0 = 0x5
  1004: 53 29 f8 00 15           jump @85 if a2 <u 248
      :                          @83
  1009: 33 05 06                 s0 = 0x6
  1012: 53 29 fc 00 0d           jump @85 if a2 <u 252
      :                          @84
  1017: 88 98 fe 00              a1 = a2 <u 0xfe
  1021: 9a 85 08                 s0 = 0x8 - a1
  1024: 01                       fallthrough
      :                          @85
  1025: ac 56 5a 06              jump @168 if s1 <u s0
      :                          @86
  1029: 64 58                    a1 = s0
  1031: 50 10 12 86 11           ra = 18, jump @410
      :                          @87 [@dyn 9]
  1036: 28 07                    jump @89
      :                          @88
  1038: 33 05                    s0 = 0
  1040: 33 07                    a0 = 0
  1042: 01                       fallthrough
      :                          @89
  1043: e4 56 08                 a1 = maxu(s1, s0)
  1046: c9 58 08                 a1 = a1 - s0
  1049: e4 78 08                 a1 = maxu(a1, a0)
  1052: c9 78 08                 a1 = a1 - a0
  1055: 33 09 21                 a2 = 0x21
  1058: ae 98 1f                 jump @92 if a1 >=u a2
      :                          @90
  1061: 33 08                    a1 = 0
  1063: 33 05 00 00 01           s0 = 0x10000
  1068: 01                       fallthrough
      :                          @91
  1069: 64 57                    a0 = s0
  1071: 82 10 08 02              ra = u64 [sp + 0x208]
  1075: 82 15 00 02              s0 = u64 [sp + 0x200]
  1079: 82 16 f8 01              s1 = u64 [sp + 0x1f8]
  1083: 95 11 10 02              sp = sp + 0x210
  1087: 32 00                    ret
      :                          @92
  1089: 82 19 60                 a2 = u64 [sp + 0x60]
  1092: c8 95 05                 s0 = s0 + a2
  1095: c8 57 07                 a0 = a0 + s0
  1098: 7c 79 20                 a2 = u8 [a0 + 0x20]
  1101: 51 09 09                 jump @94 if a2 == 0
      :                          @93
  1104: 33 09                    a2 = 0
  1106: 33 08                    a1 = 0
  1108: 28 6e                    jump @107
      :                          @94
  1110: 95 8a df                 a3 = a1 + 0xffffffffffffffdf
  1113: 95 75 21                 s0 = a0 + 0x21
  1116: 51 0a 54                 jump @105 if a3 == 0
      :                          @95
  1119: 7d 57                    a0 = i8 [s0]
  1121: 33 06 01                 s1 = 0x1
  1124: 59 07 37                 jump @102 if a0 >=s 0
      :                          @96
  1127: 84 77 ff 00              a0 = a0 & 0xff
  1131: 33 06 02                 s1 = 0x2
  1134: 53 27 c0 00 2d           jump @102 if a0 <u 192
      :                          @97
  1139: 33 06 03                 s1 = 0x3
  1142: 53 27 e0 00 25           jump @102 if a0 <u 224
      :                          @98
  1147: 33 06 04                 s1 = 0x4
  1150: 53 27 f0 00 1d           jump @102 if a0 <u 240
      :                          @99
  1155: 33 06 05                 s1 = 0x5
  1158: 53 27 f8 00 15           jump @102 if a0 <u 248
      :                          @100
  1163: 33 06 06                 s1 = 0x6
  1166: 53 27 fc 00 0d           jump @102 if a0 <u 252
      :                          @101
  1171: 88 77 fe 00              a0 = a0 <u 0xfe
  1175: 9a 76 08                 s1 = 0x8 - a0
  1178: 01                       fallthrough
      :                          @102
  1179: 7b 1a 60                 u64 [sp + 0x60] = a3
  1182: ac 6a be 05              jump @169 if a3 <u s1
      :                          @103
  1186: 64 57                    a0 = s0
  1188: 64 68                    a1 = s1
  1190: 50 10 14 e7 10           ra = 20, jump @410
      :                          @104 [@dyn 10]
  1195: 82 1a 60                 a3 = u64 [sp + 0x60]
  1198: 28 07                    jump @106
      :                          @105
  1200: 33 06                    s1 = 0
  1202: 33 07                    a0 = 0
  1204: 01                       fallthrough
      :                          @106
  1205: c8 65 08                 a1 = s0 + s1
  1208: e4 6a 09                 a2 = maxu(a3, s1)
  1211: c9 69 09                 a2 = a2 - s1
  1214: e6 79 09                 a2 = minu(a2, a0)
  1217: 01                       fallthrough
      :                          @107
  1218: 48 11 70                 u32 [sp + 112] = 0
  1221: 49 11 68                 u64 [sp + 104] = 0
  1224: 48 21 80 00              u32 [sp + 128] = 0
  1228: 49 11 78                 u64 [sp + 120] = 0
  1231: 46 21 87 00              u8 [sp + 135] = 0
  1235: 48 21 90 00              u32 [sp + 144] = 0
  1239: 49 21 88 00              u64 [sp + 136] = 0
  1243: 80 87                    a0 = u32 [a1]
  1245: c8 98 08                 a1 = a1 + a2
  1248: 7b 17 98 00              u64 [sp + 0x98] = a0
  1252: 80 85 fc                 s0 = u32 [a1 + 0xfffffffffffffffc]
  1255: 7b 15 a0 00              u64 [sp + 0xa0] = s0
  1259: 95 18 87 00              a1 = sp + 0x87
  1263: 33 09 01                 a2 = 0x1
  1266: 95 1a 68                 a3 = sp + 0x68
  1269: 33 0c 0c                 a5 = 0xc
  1272: 33 0b                    a4 = 0
  1274: 0a 02                    ecalli 2 // 'read'
  1276: 95 18 87 00              a1 = sp + 0x87
  1280: 33 09 01                 a2 = 0x1
  1283: 95 1a 78                 a3 = sp + 0x78
  1286: 33 0c 0c                 a5 = 0xc
  1289: 64 57                    a0 = s0
  1291: 33 0b                    a4 = 0
  1293: 0a 02                    ecalli 2 // 'read'
  1295: 81 17 6c                 a0 = i32 [sp + 0x6c]
  1298: 33 06 ff ef              s1 = 0xffffffffffffefff
  1302: 7b 16 50                 u64 [sp + 0x50] = s1
  1305: 81 18 7c                 a1 = i32 [sp + 0x7c]
  1308: 81 19 68                 a2 = i32 [sp + 0x68]
  1311: 7a 17 a8 00              u32 [sp + 0xa8] = a0
  1315: 81 17 70                 a0 = i32 [sp + 0x70]
  1318: 7b 17 60                 u64 [sp + 0x60] = a0
  1321: 7a 18 ac 00              u32 [sp + 0xac] = a1
  1325: 81 17 80 00              a0 = i32 [sp + 0x80]
  1329: 7b 17 58                 u64 [sp + 0x58] = a0
  1332: 7a 19 b0 00              u32 [sp + 0xb0] = a2
  1336: 95 19 b0 00              a2 = sp + 0xb0
  1340: 7b 19 b8 00              u64 [sp + 0xb8] = a2
  1344: 33 08 06                 a1 = 0x6
  1347: 7b 18 c0 00              u64 [sp + 0xc0] = a1
  1351: 95 17 98 00              a0 = sp + 0x98
  1355: 7b 17 c8 00              u64 [sp + 0xc8] = a0
  1359: 33 07 0a                 a0 = 0xa
  1362: 7b 17 38                 u64 [sp + 0x38] = a0
  1365: 7b 17 d0 00              u64 [sp + 0xd0] = a0
  1369: 7b 19 d8 00              u64 [sp + 0xd8] = a2
  1373: 7b 18 e0 00              u64 [sp + 0xe0] = a1
  1377: 95 17 a8 00              a0 = sp + 0xa8
  1381: 7b 17 e8 00              u64 [sp + 0xe8] = a0
  1385: 7b 18 48                 u64 [sp + 0x48] = a1
  1388: 7b 18 f0 00              u64 [sp + 0xf0] = a1
  1392: 33 07 58 01 01           a0 = 0x10158
  1397: 7b 17 60 01              u64 [sp + 0x160] = a0
  1401: 49 21 68 01 04           u64 [sp + 360] = 0x4
  1406: 49 21 80 01              u64 [sp + 384] = 0
  1410: 95 18 b8 00              a1 = sp + 0xb8
  1414: 7b 18 70 01              u64 [sp + 0x170] = a1
  1418: 49 21 78 01 04           u64 [sp + 376] = 0x4
  1423: 95 17 c8 01              a0 = sp + 0x1c8
  1427: 95 18 60 01              a1 = sp + 0x160
  1431: 50 10 16 fd 06           ra = 22, jump @227
      :                          @108 [@dyn 11]
  1436: 82 15 d0 01              s0 = u64 [sp + 0x1d0]
  1440: 82 1b d8 01              a4 = u64 [sp + 0x1d8]
  1444: 82 16 c8 01              s1 = u64 [sp + 0x1c8]
  1448: 33 07 02                 a0 = 0x2
  1451: 33 08                    a1 = 0
  1453: 33 09                    a2 = 0
  1455: 64 5a                    a3 = s0
  1457: 33 00 18                 ra = 0x18
  1460: 0a 64                    ecalli 100 // 'log'
  1462: 01                       fallthrough
      :                          @109 [@dyn 12]
  1463: 82 17 50                 a0 = u64 [sp + 0x50]
  1466: c8 67 07                 a0 = a0 + s1
  1469: 33 08 40 00 03           a1 = 0x30040
  1474: 7b 18 10                 u64 [sp + 0x10] = a1
  1477: 53 27 00 f0 23           jump @115 if a0 <u 4294963200
      :                          @110
  1482: 82 18 10                 a1 = u64 [sp + 0x10]
  1485: 95 87 00 10              a0 = a1 + 0x1000
  1489: 01                       fallthrough
      :                          @111
  1490: 82 78                    a1 = u64 [a0]
  1492: c9 87 09                 a2 = a0 - a1
  1495: ab 59 11                 jump @115 if a2 != s0
      :                          @112
  1498: c9 68 09                 a2 = a1 - s1
  1501: 01                       fallthrough
      :                          @113
  1502: 82 7a                    a3 = u64 [a0]
  1504: ab 8a f2                 jump @111 if a3 != a1
      :                          @114
  1507: 7b 79                    u64 [a0] = a2
  1509: 33 0b                    a4 = 0
  1511: 01                       fallthrough
      :                          @115
  1512: 95 19 b0 00              a2 = sp + 0xb0
  1516: 7b 19 b8 00              u64 [sp + 0xb8] = a2
  1520: 82 18 48                 a1 = u64 [sp + 0x48]
  1523: 7b 18 c0 00              u64 [sp + 0xc0] = a1
  1527: 95 17 a0 00              a0 = sp + 0xa0
  1531: 7b 17 c8 00              u64 [sp + 0xc8] = a0
  1535: 82 17 38                 a0 = u64 [sp + 0x38]
  1538: 7b 17 d0 00              u64 [sp + 0xd0] = a0
  1542: 7b 19 d8 00              u64 [sp + 0xd8] = a2
  1546: 7b 18 e0 00              u64 [sp + 0xe0] = a1
  1550: 95 17 ac 00              a0 = sp + 0xac
  1554: 7b 17 e8 00              u64 [sp + 0xe8] = a0
  1558: 7b 18 f0 00              u64 [sp + 0xf0] = a1
  1562: 33 07 98 01 01           a0 = 0x10198
  1567: 7b 17 60 01              u64 [sp + 0x160] = a0
  1571: 49 21 68 01 04           u64 [sp + 360] = 0x4
  1576: 49 21 80 01              u64 [sp + 384] = 0
  1580: 95 18 b8 00              a1 = sp + 0xb8
  1584: 7b 18 70 01              u64 [sp + 0x170] = a1
  1588: 49 21 78 01 04           u64 [sp + 376] = 0x4
  1593: 95 17 c8 01              a0 = sp + 0x1c8
  1597: 95 18 60 01              a1 = sp + 0x160
  1601: 50 10 1a 53 06           ra = 26, jump @227
      :                          @116 [@dyn 13]
  1606: 82 15 d0 01              s0 = u64 [sp + 0x1d0]
  1610: 82 1b d8 01              a4 = u64 [sp + 0x1d8]
  1614: 82 16 c8 01              s1 = u64 [sp + 0x1c8]
  1618: 33 07 02                 a0 = 0x2
  1621: 33 08                    a1 = 0
  1623: 33 09                    a2 = 0
  1625: 64 5a                    a3 = s0
  1627: 33 00 1c                 ra = 0x1c
  1630: 0a 64                    ecalli 100 // 'log'
  1632: 01                       fallthrough
      :                          @117 [@dyn 14]
  1633: 82 17 50                 a0 = u64 [sp + 0x50]
  1636: c8 67 07                 a0 = a0 + s1
  1639: 53 27 00 f0 21           jump @123 if a0 <u 4294963200
      :                          @118
  1644: 82 18 10                 a1 = u64 [sp + 0x10]
  1647: 95 87 00 10              a0 = a1 + 0x1000
  1651: 01                       fallthrough
      :                          @119
  1652: 82 78                    a1 = u64 [a0]
  1654: c9 87 09                 a2 = a0 - a1
  1657: ab 59 0f                 jump @123 if a2 != s0
      :                          @120
  1660: c9 68 09                 a2 = a1 - s1
  1663: 01                       fallthrough
      :                          @121
  1664: 82 7a                    a3 = u64 [a0]
  1666: ab 8a f2                 jump @119 if a3 != a1
      :                          @122
  1669: 7b 79                    u64 [a0] = a2
  1671: 01                       fallthrough
      :                          @123
  1672: 81 17 a8 00              a0 = i32 [sp + 0xa8]
  1676: 81 18 ac 00              a1 = i32 [sp + 0xac]
  1680: be 78 05                 i32 s0 = a1 + a0
  1683: 7a 15 b4 00              u32 [sp + 0xb4] = s0
  1687: 82 17 60                 a0 = u64 [sp + 0x60]
  1690: 82 16 58                 s1 = u64 [sp + 0x58]
  1693: be 76 06                 i32 s1 = s1 + a0
  1696: 95 17 b8 00              a0 = sp + 0xb8
  1700: 33 09 80 00              a2 = 0x80
  1704: 33 08                    a1 = 0
  1706: 50 10 1e 0b 09           ra = 30, jump @295
      :                          @124 [@dyn 15]
  1711: 80 17 b0 00              a0 = u32 [sp + 0xb0]
  1715: 7b 17 38 01              u64 [sp + 0x138] = a0
  1719: 97 78 01                 a1 = a0 << 0x1
  1722: 95 88 01                 a1 = a1 + 0x1
  1725: 97 88 20                 a1 = a1 << 0x20
  1728: 98 88 20                 a1 = a1 >> 0x20
  1731: 7b 18 40 01              u64 [sp + 0x140] = a1
  1735: 49 21 48 01 64           u64 [sp + 328] = 0x64
  1740: 48 21 50 01              u32 [sp + 336] = 0
  1744: 51 07 2a 02              jump @148 if a0 == 0
      :                          @125
  1748: 7b 16                    u64 [sp] = s1
  1750: 7b 15 08                 u64 [sp + 0x8] = s0
  1753: 33 05                    s0 = 0
  1755: 33 0a                    a3 = 0
  1757: 14 08 ab aa aa aa 00 00 00 00 a1 = 0xaaaaaaab
  1767: ca 87 08                 a1 = a0 * a1
  1770: 98 88 21                 a1 = a1 >> 0x21
  1773: 97 89 01                 a2 = a1 << 0x1
  1776: bf 87 08                 i32 a1 = a0 - a1
  1779: bf 98 08                 i32 a1 = a1 - a2
  1782: 83 89 ff                 i32 a2 = a1 + 0xffffffffffffffff
  1785: 7b 19 28                 u64 [sp + 0x28] = a2
  1788: 86 88 02                 a1 = a1 | 0x2
  1791: 7b 18 20                 u64 [sp + 0x20] = a1
  1794: 33 08 28 02 01           a1 = 0x10228
  1799: 7b 18 30                 u64 [sp + 0x30] = a1
  1802: 82 18 10                 a1 = u64 [sp + 0x10]
  1805: 95 86 00 10              s1 = a1 + 0x1000
  1809: 83 77                    i32 a0 = a0 + 0
  1811: 7b 17 18                 u64 [sp + 0x18] = a0
  1814: 28 13                    jump @128
      :                          @126
  1816: 82 15 60                 s0 = u64 [sp + 0x60]
  1819: 82 1a 58                 a3 = u64 [sp + 0x58]
  1822: 01                       fallthrough
      :                          @127
  1823: 83 aa 01                 i32 a3 = a3 + 0x1
  1826: 82 17 18                 a0 = u64 [sp + 0x18]
  1829: aa 7a cb 01              jump @147 if a3 == a0
      :                          @128
  1833: 7a 1a 54 01              u32 [sp + 0x154] = a3
  1837: 82 17 20                 a0 = u64 [sp + 0x20]
  1840: 7b 1a 58                 u64 [sp + 0x58] = a3
  1843: 52 17 02 df 00           jump @137 if a0 != 2
      :                          @129
  1848: 82 17 98 00              a0 = u64 [sp + 0x98]
  1852: 82 18 38 01              a1 = u64 [sp + 0x138]
  1856: 82 19 48 01              a2 = u64 [sp + 0x148]
  1860: 95 1a b8 00              a3 = sp + 0xb8
  1864: 0a 0b                    ecalli 11 // 'transfer'
  1866: 7b 17 58 01              u64 [sp + 0x158] = a0
  1870: 83 55 01                 i32 s0 = s0 + 0x1
  1873: 7b 15 60                 u64 [sp + 0x60] = s0
  1876: 7a 15 50 01              u32 [sp + 0x150] = s0
  1880: 95 17 54 01              a0 = sp + 0x154
  1884: 7b 17 60 01              u64 [sp + 0x160] = a0
  1888: 82 17 48                 a0 = u64 [sp + 0x48]
  1891: 7b 17 68 01              u64 [sp + 0x168] = a0
  1895: 95 17 98 00              a0 = sp + 0x98
  1899: 7b 17 70 01              u64 [sp + 0x170] = a0
  1903: 82 17 38                 a0 = u64 [sp + 0x38]
  1906: 7b 17 78 01              u64 [sp + 0x178] = a0
  1910: 95 18 38 01              a1 = sp + 0x138
  1914: 7b 18 80 01              u64 [sp + 0x180] = a1
  1918: 7b 17 88 01              u64 [sp + 0x188] = a0
  1922: 95 18 48 01              a1 = sp + 0x148
  1926: 7b 18 90 01              u64 [sp + 0x190] = a1
  1930: 7b 17 98 01              u64 [sp + 0x198] = a0
  1934: 95 18 58 01              a1 = sp + 0x158
  1938: 7b 18 a0 01              u64 [sp + 0x1a0] = a1
  1942: 7b 17 a8 01              u64 [sp + 0x1a8] = a0
  1946: 82 17 30                 a0 = u64 [sp + 0x30]
  1949: 7b 17 c8 01              u64 [sp + 0x1c8] = a0
  1953: 49 21 d0 01 05           u64 [sp + 464] = 0x5
  1958: 49 21 e8 01              u64 [sp + 488] = 0
  1962: 95 18 60 01              a1 = sp + 0x160
  1966: 7b 18 d8 01              u64 [sp + 0x1d8] = a1
  1970: 49 21 e0 01 05           u64 [sp + 480] = 0x5
  1975: 95 17 b0 01              a0 = sp + 0x1b0
  1979: 95 18 c8 01              a1 = sp + 0x1c8
  1983: 50 10 20 d5 04           ra = 32, jump @227
      :                          @130 [@dyn 16]
  1988: 82 15 b8 01              s0 = u64 [sp + 0x1b8]
  1992: 82 1b c0 01              a4 = u64 [sp + 0x1c0]
  1996: 82 17 b0 01              a0 = u64 [sp + 0x1b0]
  2000: 7b 17 40                 u64 [sp + 0x40] = a0
  2003: 33 07 02                 a0 = 0x2
  2006: 33 08                    a1 = 0
  2008: 33 09                    a2 = 0
  2010: 64 5a                    a3 = s0
  2012: 33 00 22                 ra = 0x22
  2015: 0a 64                    ecalli 100 // 'log'
  2017: 01                       fallthrough
      :                          @131 [@dyn 17]
  2018: 82 1b 40                 a4 = u64 [sp + 0x40]
  2021: 82 17 50                 a0 = u64 [sp + 0x50]
  2024: c8 b7 07                 a0 = a0 + a4
  2027: 53 27 00 f0 20           jump @136 if a0 <u 4294963200
      :                          @132
  2032: 82 67                    a0 = u64 [s1]
  2034: c9 76 08                 a1 = s1 - a0
  2037: ab 58 16                 jump @136 if a1 != s0
      :                          @133
  2040: c9 b7 08                 a1 = a0 - a4
  2043: 01                       fallthrough
      :                          @134
  2044: 82 69                    a2 = u64 [s1]
  2046: ab 79 f2                 jump @132 if a2 != a0
      :                          @135
  2049: 7b 68                    u64 [s1] = a1
  2051: 82 15 60                 s0 = u64 [sp + 0x60]
  2054: 82 1a 58                 a3 = u64 [sp + 0x58]
  2057: 28 09                    jump @137
      :                          @136
  2059: 82 15 60                 s0 = u64 [sp + 0x60]
  2062: 82 1a 58                 a3 = u64 [sp + 0x58]
  2065: 01                       fallthrough
      :                          @137
  2066: 82 17 28                 a0 = u64 [sp + 0x28]
  2069: 55 17 02 0a ff           jump @127 if a0 >=u 2
      :                          @138
  2074: 82 17 a0 00              a0 = u64 [sp + 0xa0]
  2078: 82 18 40 01              a1 = u64 [sp + 0x140]
  2082: 82 19 48 01              a2 = u64 [sp + 0x148]
  2086: 95 1a b8 00              a3 = sp + 0xb8
  2090: 0a 0b                    ecalli 11 // 'transfer'
  2092: 7b 17 58 01              u64 [sp + 0x158] = a0
  2096: 83 55 01                 i32 s0 = s0 + 0x1
  2099: 7b 15 60                 u64 [sp + 0x60] = s0
  2102: 7a 15 50 01              u32 [sp + 0x150] = s0
  2106: 95 17 54 01              a0 = sp + 0x154
  2110: 7b 17 60 01              u64 [sp + 0x160] = a0
  2114: 82 17 48                 a0 = u64 [sp + 0x48]
  2117: 7b 17 68 01              u64 [sp + 0x168] = a0
  2121: 95 17 a0 00              a0 = sp + 0xa0
  2125: 7b 17 70 01              u64 [sp + 0x170] = a0
  2129: 82 17 38                 a0 = u64 [sp + 0x38]
  2132: 7b 17 78 01              u64 [sp + 0x178] = a0
  2136: 95 18 40 01              a1 = sp + 0x140
  2140: 7b 18 80 01              u64 [sp + 0x180] = a1
  2144: 7b 17 88 01              u64 [sp + 0x188] = a0
  2148: 95 18 48 01              a1 = sp + 0x148
  2152: 7b 18 90 01              u64 [sp + 0x190] = a1
  2156: 7b 17 98 01              u64 [sp + 0x198] = a0
  2160: 95 18 58 01              a1 = sp + 0x158
  2164: 7b 18 a0 01              u64 [sp + 0x1a0] = a1
  2168: 7b 17 a8 01              u64 [sp + 0x1a8] = a0
  2172: 82 17 30                 a0 = u64 [sp + 0x30]
  2175: 7b 17 c8 01              u64 [sp + 0x1c8] = a0
  2179: 49 21 d0 01 05           u64 [sp + 464] = 0x5
  2184: 49 21 e8 01              u64 [sp + 488] = 0
  2188: 95 18 60 01              a1 = sp + 0x160
  2192: 7b 18 d8 01              u64 [sp + 0x1d8] = a1
  2196: 49 21 e0 01 05           u64 [sp + 480] = 0x5
  2201: 95 17 b0 01              a0 = sp + 0x1b0
  2205: 95 18 c8 01              a1 = sp + 0x1c8
  2209: 50 10 24 f3 03           ra = 36, jump @227
      :                          @139 [@dyn 18]
  2214: 82 15 b8 01              s0 = u64 [sp + 0x1b8]
  2218: 82 1b c0 01              a4 = u64 [sp + 0x1c0]
  2222: 82 17 b0 01              a0 = u64 [sp + 0x1b0]
  2226: 7b 17 40                 u64 [sp + 0x40] = a0
  2229: 33 07 02                 a0 = 0x2
  2232: 33 08                    a1 = 0
  2234: 33 09                    a2 = 0
  2236: 64 5a                    a3 = s0
  2238: 33 00 26                 ra = 0x26
  2241: 0a 64                    ecalli 100 // 'log'
  2243: 01                       fallthrough
      :                          @140 [@dyn 19]
  2244: 82 1b 40                 a4 = u64 [sp + 0x40]
  2247: 82 17 50                 a0 = u64 [sp + 0x50]
  2250: c8 b7 07                 a0 = a0 + a4
  2253: 53 27 00 f0 4b fe        jump @126 if a0 <u 4294963200
      :                          @141
  2259: 82 67                    a0 = u64 [s1]
  2261: c9 76 08                 a1 = s1 - a0
  2264: ab 58 40 fe              jump @126 if a1 != s0
      :                          @142
  2268: c9 b7 08                 a1 = a0 - a4
  2271: 01                       fallthrough
      :                          @143
  2272: 82 69                    a2 = u64 [s1]
  2274: ab 79 f1                 jump @141 if a2 != a0
      :                          @144
  2277: 7b 68                    u64 [s1] = a1
  2279: 33 0a                    a3 = 0
  2281: 01                       fallthrough
      :                          @145
  2282: ab 79 e9                 jump @141 if a2 != a0
      :                          @146
  2285: 28 2b fe                 jump @126
      :                          @147
  2288: 81 17 b0 00              a0 = i32 [sp + 0xb0]
  2292: 82 15 08                 s0 = u64 [sp + 0x8]
  2295: 82 16                    s1 = u64 [sp]
  2297: 01                       fallthrough
      :                          @148
  2298: 7a 17 88 00              u32 [sp + 0x88] = a0
  2302: 7a 15 8c 00              u32 [sp + 0x8c] = s0
  2306: 7a 16 90 00              u32 [sp + 0x90] = s1
  2310: 95 17 b0 00              a0 = sp + 0xb0
  2314: 7b 17 c8 01              u64 [sp + 0x1c8] = a0
  2318: 82 17 48                 a0 = u64 [sp + 0x48]
  2321: 7b 17 d0 01              u64 [sp + 0x1d0] = a0
  2325: 95 18 b4 00              a1 = sp + 0xb4
  2329: 7b 18 d8 01              u64 [sp + 0x1d8] = a1
  2333: 7b 17 e0 01              u64 [sp + 0x1e0] = a0
  2337: 33 07 d8 01 01           a0 = 0x101d8
  2342: 7b 17 60 01              u64 [sp + 0x160] = a0
  2346: 49 21 68 01 02           u64 [sp + 360] = 0x2
  2351: 49 21 80 01              u64 [sp + 384] = 0
  2355: 95 18 c8 01              a1 = sp + 0x1c8
  2359: 7b 18 70 01              u64 [sp + 0x170] = a1
  2363: 49 21 78 01 02           u64 [sp + 376] = 0x2
  2368: 95 17 b0 01              a0 = sp + 0x1b0
  2372: 95 18 60 01              a1 = sp + 0x160
  2376: 50 10 28 4c 03           ra = 40, jump @227
      :                          @149 [@dyn 20]
  2381: 82 15 b8 01              s0 = u64 [sp + 0x1b8]
  2385: 82 1b c0 01              a4 = u64 [sp + 0x1c0]
  2389: 82 16 b0 01              s1 = u64 [sp + 0x1b0]
  2393: 33 07 02                 a0 = 0x2
  2396: 33 08                    a1 = 0
  2398: 33 09                    a2 = 0
  2400: 64 5a                    a3 = s0
  2402: 33 00 2a                 ra = 0x2a
  2405: 0a 64                    ecalli 100 // 'log'
  2407: 01                       fallthrough
      :                          @150 [@dyn 21]
  2408: 82 17 50                 a0 = u64 [sp + 0x50]
  2411: c8 67 07                 a0 = a0 + s1
  2414: 53 27 00 f0 21           jump @156 if a0 <u 4294963200
      :                          @151
  2419: 82 18 10                 a1 = u64 [sp + 0x10]
  2422: 95 87 00 10              a0 = a1 + 0x1000
  2426: 01                       fallthrough
      :                          @152
  2427: 82 78                    a1 = u64 [a0]
  2429: c9 87 09                 a2 = a0 - a1
  2432: ab 59 0f                 jump @156 if a2 != s0
      :                          @153
  2435: c9 68 09                 a2 = a1 - s1
  2438: 01                       fallthrough
      :                          @154
  2439: 82 7a                    a3 = u64 [a0]
  2441: ab 8a f2                 jump @152 if a3 != a1
      :                          @155
  2444: 7b 79                    u64 [a0] = a2
  2446: 01                       fallthrough
      :                          @156
  2447: 95 17 87 00              a0 = sp + 0x87
  2451: 33 08 01                 a1 = 0x1
  2454: 95 19 88 00              a2 = sp + 0x88
  2458: 33 0a 0c                 a3 = 0xc
  2461: 0a 03                    ecalli 3 // 'write'
  2463: 95 17 b0 00              a0 = sp + 0xb0
  2467: 7b 17 60 01              u64 [sp + 0x160] = a0
  2471: 82 17 48                 a0 = u64 [sp + 0x48]
  2474: 7b 17 68 01              u64 [sp + 0x168] = a0
  2478: 95 18 b4 00              a1 = sp + 0xb4
  2482: 7b 18 70 01              u64 [sp + 0x170] = a1
  2486: 7b 17 78 01              u64 [sp + 0x178] = a0
  2490: 95 17 50 01              a0 = sp + 0x150
  2494: 7b 17 80 01              u64 [sp + 0x180] = a0
  2498: 33 07 02                 a0 = 0x2
  2501: 7b 17 88 01              u64 [sp + 0x188] = a0
  2505: 33 07 f8 01 01           a0 = 0x101f8
  2510: 7b 17 c8 01              u64 [sp + 0x1c8] = a0
  2514: 49 21 d0 01 03           u64 [sp + 464] = 0x3
  2519: 49 21 e8 01              u64 [sp + 488] = 0
  2523: 95 18 60 01              a1 = sp + 0x160
  2527: 7b 18 d8 01              u64 [sp + 0x1d8] = a1
  2531: 49 21 e0 01 03           u64 [sp + 480] = 0x3
  2536: 95 17 b0 01              a0 = sp + 0x1b0
  2540: 95 18 c8 01              a1 = sp + 0x1c8
  2544: 50 10 2c a4 02           ra = 44, jump @227
      :                          @157 [@dyn 22]
  2549: 82 15 b8 01              s0 = u64 [sp + 0x1b8]
  2553: 82 1b c0 01              a4 = u64 [sp + 0x1c0]
  2557: 82 16 b0 01              s1 = u64 [sp + 0x1b0]
  2561: 33 07 02                 a0 = 0x2
  2564: 33 08                    a1 = 0
  2566: 33 09                    a2 = 0
  2568: 64 5a                    a3 = s0
  2570: 33 00 2e                 ra = 0x2e
  2573: 0a 64                    ecalli 100 // 'log'
  2575: 01                       fallthrough
      :                          @158 [@dyn 23]
  2576: 82 17 50                 a0 = u64 [sp + 0x50]
  2579: c8 67 07                 a0 = a0 + s1
  2582: 53 27 00 f0 23           jump @164 if a0 <u 4294963200
      :                          @159
  2587: 82 18 10                 a1 = u64 [sp + 0x10]
  2590: 95 87 00 10              a0 = a1 + 0x1000
  2594: 01                       fallthrough
      :                          @160
  2595: 82 78                    a1 = u64 [a0]
  2597: c9 87 09                 a2 = a0 - a1
  2600: ab 59 11                 jump @164 if a2 != s0
      :                          @161
  2603: c9 68 09                 a2 = a1 - s1
  2606: 01                       fallthrough
      :                          @162
  2607: 82 7a                    a3 = u64 [a0]
  2609: ab 8a f2                 jump @160 if a3 != a1
      :                          @163
  2612: 7b 79                    u64 [a0] = a2
  2614: 33 0b                    a4 = 0
  2616: 01                       fallthrough
      :                          @164
  2617: 33 05 11 00 03           s0 = 0x30011
  2622: 95 18 88 00              a1 = sp + 0x88
  2626: 33 09 0c                 a2 = 0xc
  2629: 33 07 11 00 03           a0 = 0x30011
  2634: 50 10 30 b9 04           ra = 48, jump @277
      :                          @165 [@dyn 24]
  2639: 64 57                    a0 = s0
  2641: 0a 10                    ecalli 16 // 'oyield'
  2643: 33 08 20                 a1 = 0x20
  2646: 28 d7 f9                 jump @91
      :                          @166
  2649: 00                       trap
      :                          @167
  2650: 00                       trap
      :                          @168
  2651: 00                       trap
      :                          @169
  2652: 00                       trap
      :                          @170 [export #2: 'on_transfer']
  2653: 33 07 00 00 01           a0 = 0x10000
  2658: 33 08                    a1 = 0
  2660: 32 00                    ret
      :                          @171
  2662: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  2665: 7b 10 40                 u64 [sp + 0x40] = ra
  2668: 7b 15 38                 u64 [sp + 0x38] = s0
  2671: 7b 16 30                 u64 [sp + 0x30] = s1
  2674: c8 89 09                 a2 = a2 + a1
  2677: ac 89 52                 jump @179 if a2 <u a1
      :                          @172
  2680: 64 75                    s0 = a0
  2682: 82 77                    a0 = u64 [a0]
  2684: 97 78 01                 a1 = a0 << 0x1
  2687: 33 0a 08                 a3 = 0x8
  2690: e4 a9 09                 a2 = maxu(a2, a3)
  2693: e4 98 06                 s1 = maxu(a1, a2)
  2696: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  2699: 98 88 3f                 a1 = a1 >> 0x3f
  2702: 51 07 12                 jump @174 if a0 == 0
      :                          @173
  2705: 82 59 08                 a2 = u64 [s0 + 0x8]
  2708: 7b 19 18                 u64 [sp + 0x18] = a2
  2711: 49 11 20 01              u64 [sp + 32] = 0x1
  2715: 7b 17 28                 u64 [sp + 0x28] = a0
  2718: 28 06                    jump @175
      :                          @174
  2720: 49 11 20                 u64 [sp + 32] = 0
  2723: 01                       fallthrough
      :                          @175
  2724: 64 17                    a0 = sp
  2726: 95 1a 18                 a3 = sp + 0x18
  2729: 64 69                    a2 = s1
  2731: 50 10 32 32              ra = 50, jump @183
      :                          @176 [@dyn 25]
  2735: 82 18                    a1 = u64 [sp]
  2737: 82 17 08                 a0 = u64 [sp + 0x8]
  2740: 51 08 14                 jump @180 if a1 == 0
      :                          @177
  2743: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  2753: aa 87 0d                 jump @181 if a0 == a1
      :                          @178
  2756: 52 07 18                 jump @182 if a0 != 0
      :                          @179
  2759: 00                       trap
      :                          @180
  2760: 7b 57 08                 u64 [s0 + 0x8] = a0
  2763: 7b 56                    u64 [s0] = s1
  2765: 01                       fallthrough
      :                          @181
  2766: 82 10 40                 ra = u64 [sp + 0x40]
  2769: 82 15 38                 s0 = u64 [sp + 0x38]
  2772: 82 16 30                 s1 = u64 [sp + 0x30]
  2775: 95 11 48                 sp = sp + 0x48
  2778: 32 00                    ret
      :                          @182
  2780: 00                       trap
      :                          @183
  2781: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  2784: 7b 10 30                 u64 [sp + 0x30] = ra
  2787: 7b 15 28                 u64 [sp + 0x28] = s0
  2790: 7b 16 20                 u64 [sp + 0x20] = s1
  2793: 64 96                    s1 = a2
  2795: 64 73                    t1 = a0
  2797: 51 08 6e                 jump @193 if a1 == 0
      :                          @184
  2800: 82 a7 08                 a0 = u64 [a3 + 0x8]
  2803: 51 07 71                 jump @194 if a0 == 0
      :                          @185
  2806: 82 a9 10                 a2 = u64 [a3 + 0x10]
  2809: 51 09 9e 00              jump @201 if a2 == 0
      :                          @186
  2813: 82 a8                    a1 = u64 [a3]
  2815: 33 02 00 10              t0 = 0x1000
  2819: 33 04 40 00 03           t2 = 0x30040
  2824: c8 24 07                 a0 = t2 + t0
  2827: 01                       fallthrough
      :                          @187
  2828: 82 7a                    a3 = u64 [a0]
  2830: c8 6a 05                 s0 = a3 + s1
  2833: ac a5 c2 00              jump @207 if s0 <u a3
      :                          @188
  2837: 95 5b 01                 a4 = s0 + 0x1
  2840: 88 bc 01                 a5 = a4 <u 0x1
  2843: d8 b2 0b                 a4 = t0 <u a4
  2846: d4 cb 0b                 a4 = a4 | a5
  2849: 52 0b b2 00              jump @207 if a4 != 0
      :                          @189
  2853: 82 7b                    a4 = u64 [a0]
  2855: ab ab e5                 jump @187 if a4 != a3
      :                          @190
  2858: 7b 75                    u64 [a0] = s0
  2860: 33 0c                    a5 = 0
  2862: 7b 13 18                 u64 [sp + 0x18] = t1
  2865: c9 54 07                 a0 = t2 - s0
  2868: 95 77 00 10              a0 = a0 + 0x1000
  2872: 7b 17 10                 u64 [sp + 0x10] = a0
  2875: 7b 18 08                 u64 [sp + 0x8] = a1
  2878: 64 95                    s0 = a2
  2880: 7b 14                    u64 [sp] = t2
  2882: 50 10 34 c1 03           ra = 52, jump @277
      :                          @191 [@dyn 26]
  2887: 54 25 00 10 94 00        jump @208 if s0 <=u 4096
      :                          @192
  2893: 82 13 18                 t1 = u64 [sp + 0x18]
  2896: 82 18 10                 a1 = u64 [sp + 0x10]
  2899: 33 07                    a0 = 0
  2901: 7b 38 08                 u64 [t1 + 0x8] = a1
  2904: 28 b1 00                 jump @214
      :                          @193
  2907: 49 13 08                 u64 [t1 + 8] = 0
  2910: 33 07 01                 a0 = 0x1
  2913: 28 a8 00                 jump @214
      :                          @194
  2916: 33 07 00 10              a0 = 0x1000
  2920: 33 02 40 00 03           t0 = 0x30040
  2925: c8 72 09                 a2 = t0 + a0
  2928: 01                       fallthrough
      :                          @195
  2929: 82 9b                    a4 = u64 [a2]
  2931: c8 6b 0a                 a3 = a4 + s1
  2934: ac ba 5d                 jump @207 if a3 <u a4
      :                          @196
  2937: 95 ac 01                 a5 = a3 + 0x1
  2940: 88 c8 01                 a1 = a5 <u 0x1
  2943: d8 c7 0c                 a5 = a0 <u a5
  2946: d4 c8 08                 a1 = a1 | a5
  2949: 52 08 4e                 jump @207 if a1 != 0
      :                          @197
  2952: 82 98                    a1 = u64 [a2]
  2954: ab b8 e7                 jump @195 if a1 != a4
      :                          @198
  2957: 7b 9a                    u64 [a2] = a3
  2959: 33 0c                    a5 = 0
  2961: 01                       fallthrough
      :                          @199
  2962: ab b8 df                 jump @195 if a1 != a4
      :                          @200
  2965: 28 30                    jump @206
      :                          @201
  2967: 33 07 00 10              a0 = 0x1000
  2971: 33 02 40 00 03           t0 = 0x30040
  2976: c8 72 09                 a2 = t0 + a0
  2979: 01                       fallthrough
      :                          @202
  2980: 82 9b                    a4 = u64 [a2]
  2982: c8 6b 0a                 a3 = a4 + s1
  2985: ac ba 2a                 jump @207 if a3 <u a4
      :                          @203
  2988: 95 ac 01                 a5 = a3 + 0x1
  2991: 88 c8 01                 a1 = a5 <u 0x1
  2994: d8 c7 0c                 a5 = a0 <u a5
  2997: d4 c8 08                 a1 = a1 | a5
  3000: 52 08 1b                 jump @207 if a1 != 0
      :                          @204
  3003: 82 98                    a1 = u64 [a2]
  3005: ab b8 e7                 jump @202 if a1 != a4
      :                          @205
  3008: 7b 9a                    u64 [a2] = a3
  3010: 33 0c                    a5 = 0
  3012: 01                       fallthrough
      :                          @206
  3013: c9 a2 07                 a0 = t0 - a3
  3016: 95 78 00 10              a1 = a0 + 0x1000
  3020: 33 07                    a0 = 0
  3022: 7b 38 08                 u64 [t1 + 0x8] = a1
  3025: 28 38                    jump @214
      :                          @207
  3027: 33 07 01                 a0 = 0x1
  3030: 7b 37 08                 u64 [t1 + 0x8] = a0
  3033: 28 30                    jump @214
      :                          @208
  3035: 64 5c                    a5 = s0
  3037: 82 18                    a1 = u64 [sp]
  3039: 95 87 00 10              a0 = a1 + 0x1000
  3043: 82 13 18                 t1 = u64 [sp + 0x18]
  3046: 82 15 08                 s0 = u64 [sp + 0x8]
  3049: 01                       fallthrough
      :                          @209
  3050: 82 78                    a1 = u64 [a0]
  3052: c9 87 09                 a2 = a0 - a1
  3055: ab 59 11                 jump @213 if a2 != s0
      :                          @210
  3058: c9 c8 09                 a2 = a1 - a5
  3061: 01                       fallthrough
      :                          @211
  3062: 82 7a                    a3 = u64 [a0]
  3064: ab 8a f2                 jump @209 if a3 != a1
      :                          @212
  3067: 7b 79                    u64 [a0] = a2
  3069: 33 0b                    a4 = 0
  3071: 01                       fallthrough
      :                          @213
  3072: 82 18 10                 a1 = u64 [sp + 0x10]
  3075: 33 07                    a0 = 0
  3077: 7b 38 08                 u64 [t1 + 0x8] = a1
  3080: 01                       fallthrough
      :                          @214
  3081: 7b 36 10                 u64 [t1 + 0x10] = s1
  3084: 7b 37                    u64 [t1] = a0
  3086: 82 10 30                 ra = u64 [sp + 0x30]
  3089: 82 15 28                 s0 = u64 [sp + 0x28]
  3092: 82 16 20                 s1 = u64 [sp + 0x20]
  3095: 95 11 38                 sp = sp + 0x38
  3098: 32 00                    ret
      :                          @215
  3100: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  3103: 7b 10 40                 u64 [sp + 0x40] = ra
  3106: 7b 15 38                 u64 [sp + 0x38] = s0
  3109: 7b 16 30                 u64 [sp + 0x30] = s1
  3112: 95 88 01                 a1 = a1 + 0x1
  3115: 51 08 53                 jump @223 if a1 == 0
      :                          @216
  3118: 64 75                    s0 = a0
  3120: 82 77                    a0 = u64 [a0]
  3122: 97 79 01                 a2 = a0 << 0x1
  3125: 33 0a 08                 a3 = 0x8
  3128: e4 a8 08                 a1 = maxu(a1, a3)
  3131: e4 89 06                 s1 = maxu(a2, a1)
  3134: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  3137: 98 88 3f                 a1 = a1 >> 0x3f
  3140: 51 07 12                 jump @218 if a0 == 0
      :                          @217
  3143: 82 59 08                 a2 = u64 [s0 + 0x8]
  3146: 7b 19 18                 u64 [sp + 0x18] = a2
  3149: 49 11 20 01              u64 [sp + 32] = 0x1
  3153: 7b 17 28                 u64 [sp + 0x28] = a0
  3156: 28 06                    jump @219
      :                          @218
  3158: 49 11 20                 u64 [sp + 32] = 0
  3161: 01                       fallthrough
      :                          @219
  3162: 64 17                    a0 = sp
  3164: 95 1a 18                 a3 = sp + 0x18
  3167: 64 69                    a2 = s1
  3169: 50 10 36 7c fe           ra = 54, jump @183
      :                          @220 [@dyn 27]
  3174: 82 18                    a1 = u64 [sp]
  3176: 82 17 08                 a0 = u64 [sp + 0x8]
  3179: 51 08 14                 jump @224 if a1 == 0
      :                          @221
  3182: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  3192: aa 87 0d                 jump @225 if a0 == a1
      :                          @222
  3195: 52 07 18                 jump @226 if a0 != 0
      :                          @223
  3198: 00                       trap
      :                          @224
  3199: 7b 57 08                 u64 [s0 + 0x8] = a0
  3202: 7b 56                    u64 [s0] = s1
  3204: 01                       fallthrough
      :                          @225
  3205: 82 10 40                 ra = u64 [sp + 0x40]
  3208: 82 15 38                 s0 = u64 [sp + 0x38]
  3211: 82 16 30                 s1 = u64 [sp + 0x30]
  3214: 95 11 48                 sp = sp + 0x48
  3217: 32 00                    ret
      :                          @226
  3219: 00                       trap
      :                          @227
  3220: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  3223: 7b 10 30                 u64 [sp + 0x30] = ra
  3226: 7b 15 28                 u64 [sp + 0x28] = s0
  3229: 7b 16 20                 u64 [sp + 0x20] = s1
  3232: 64 89                    a2 = a1
  3234: 82 8a 08                 a3 = u64 [a1 + 0x8]
  3237: 64 75                    s0 = a0
  3239: 51 0a 35                 jump @232 if a3 == 0
      :                          @228
  3242: 82 98                    a1 = u64 [a2]
  3244: 33 07                    a0 = 0
  3246: 95 8b 08                 a4 = a1 + 0x8
  3249: 01                       fallthrough
      :                          @229
  3250: 82 bc                    a5 = u64 [a4]
  3252: c8 c7 07                 a0 = a0 + a5
  3255: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  3258: 95 bb 10                 a4 = a4 + 0x10
  3261: 52 0a f5                 jump @229 if a3 != 0
      :                          @230
  3264: 82 9a 18                 a3 = u64 [a2 + 0x18]
  3267: 51 0a 24                 jump @234 if a3 == 0
      :                          @231
  3270: 82 88 08                 a1 = u64 [a1 + 0x8]
  3273: 8e 88                    a1 = a1 >u 0
  3275: 88 7a 10                 a3 = a0 <u 0x10
  3278: 85 aa 01                 a3 = a3 ^ 0x1
  3281: d4 a8 08                 a1 = a1 | a3
  3284: 89 7a                    a3 = a0 <s 0
  3286: e0 a8 08                 a1 = a1 & ~a3
  3289: 52 08 0a                 jump @233 if a1 != 0
      :                          @232
  3292: 33 07                    a0 = 0
  3294: 33 08 01                 a1 = 0x1
  3297: 28 48                    jump @242
      :                          @233
  3299: 97 77 01                 a0 = a0 << 0x1
  3302: 01                       fallthrough
      :                          @234
  3303: 51 07 3e                 jump @241 if a0 == 0
      :                          @235
  3306: 57 07 76                 jump @247 if a0 <s 0
      :                          @236
  3309: 64 53                    t1 = s0
  3311: 33 08 00 10              a1 = 0x1000
  3315: 33 02 40 00 03           t0 = 0x30040
  3320: c8 82 0b                 a4 = t0 + a1
  3323: 01                       fallthrough
      :                          @237
  3324: 82 bc                    a5 = u64 [a4]
  3326: c8 7c 0a                 a3 = a5 + a0
  3329: ac ca 5d                 jump @245 if a3 <u a5
      :                          @238
  3332: 95 a5 01                 s0 = a3 + 0x1
  3335: 88 56 01                 s1 = s0 <u 0x1
  3338: d8 58 05                 s0 = a1 <u s0
  3341: d4 65 05                 s0 = s0 | s1
  3344: 52 05 4e                 jump @245 if s0 != 0
      :                          @239
  3347: 82 b6                    s1 = u64 [a4]
  3349: ab c6 e7                 jump @237 if s1 != a5
      :                          @240
  3352: 7b ba                    u64 [a4] = a3
  3354: c9 a2 08                 a1 = t0 - a3
  3357: 95 88 00 10              a1 = a1 + 0x1000
  3361: 64 35                    s0 = t1
  3363: 28 06                    jump @242
      :                          @241
  3365: 33 08 01                 a1 = 0x1
  3368: 01                       fallthrough
      :                          @242
  3369: 7b 17                    u64 [sp] = a0
  3371: 7b 18 08                 u64 [sp + 0x8] = a1
  3374: 49 11 10                 u64 [sp + 16] = 0
  3377: 33 08 78 02 01           a1 = 0x10278
  3382: 64 17                    a0 = sp
  3384: 50 10 38 76 06           ra = 56, jump @372
      :                          @243 [@dyn 28]
  3389: 52 07 22                 jump @246 if a0 != 0
      :                          @244
  3392: 82 17 10                 a0 = u64 [sp + 0x10]
  3395: 82 18 08                 a1 = u64 [sp + 0x8]
  3398: 82 19                    a2 = u64 [sp]
  3400: 7b 57 10                 u64 [s0 + 0x10] = a0
  3403: 7b 58 08                 u64 [s0 + 0x8] = a1
  3406: 7b 59                    u64 [s0] = a2
  3408: 82 10 30                 ra = u64 [sp + 0x30]
  3411: 82 15 28                 s0 = u64 [sp + 0x28]
  3414: 82 16 20                 s1 = u64 [sp + 0x20]
  3417: 95 11 38                 sp = sp + 0x38
  3420: 32 00                    ret
      :                          @245
  3422: 00                       trap
      :                          @246
  3423: 00                       trap
      :                          @247
  3424: 00                       trap
      :                          @248 [@dyn 29]
  3425: 82 72                    t0 = u64 [a0]
  3427: 33 09 00 f0              a2 = 0xfffffffffffff000
  3431: 95 2a ff ef              a3 = t0 + 0xffffffffffffefff
  3435: ac 9a 27                 jump @254 if a3 <u a2
      :                          @249
  3438: 82 77 08                 a0 = u64 [a0 + 0x8]
  3441: 33 09 40 00 03           a2 = 0x30040
  3446: 95 99 00 10              a2 = a2 + 0x1000
  3450: 01                       fallthrough
      :                          @250
  3451: 82 9a                    a3 = u64 [a2]
  3453: c9 a9 0b                 a4 = a2 - a3
  3456: ab 7b 12                 jump @254 if a4 != a0
      :                          @251
  3459: c9 2a 0b                 a4 = a3 - t0
  3462: 01                       fallthrough
      :                          @252
  3463: 82 9c                    a5 = u64 [a2]
  3465: ab ac f2                 jump @250 if a5 != a3
      :                          @253
  3468: 7b 9b                    u64 [a2] = a4
  3470: 33 08                    a1 = 0
  3472: 32 00                    ret
      :                          @254
  3474: 32 00                    ret
      :                          @255 [@dyn 30]
  3476: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  3479: 7b 10 18                 u64 [sp + 0x18] = ra
  3482: 7b 15 10                 u64 [sp + 0x10] = s0
  3485: 7b 16 08                 u64 [sp + 0x8] = s1
  3488: 64 75                    s0 = a0
  3490: 82 7a 10                 a3 = u64 [a0 + 0x10]
  3493: 82 77                    a0 = u64 [a0]
  3495: c9 a7 07                 a0 = a0 - a3
  3498: 64 96                    s1 = a2
  3500: ac 97 2a                 jump @258 if a0 <u a2
      :                          @256
  3503: 7b 1a                    u64 [sp] = a3
  3505: 82 57 08                 a0 = u64 [s0 + 0x8]
  3508: c8 a7 07                 a0 = a0 + a3
  3511: 64 69                    a2 = s1
  3513: 50 10 3e 4a 01           ra = 62, jump @277
      :                          @257 [@dyn 31]
  3518: 82 17                    a0 = u64 [sp]
  3520: c8 76 06                 s1 = s1 + a0
  3523: 7b 56 10                 u64 [s0 + 0x10] = s1
  3526: 33 07                    a0 = 0
  3528: 82 10 18                 ra = u64 [sp + 0x18]
  3531: 82 15 10                 s0 = u64 [sp + 0x10]
  3534: 82 16 08                 s1 = u64 [sp + 0x8]
  3537: 95 11 20                 sp = sp + 0x20
  3540: 32 00                    ret
      :                          @258
  3542: 64 57                    a0 = s0
  3544: 7b 18                    u64 [sp] = a1
  3546: 64 a8                    a1 = a3
  3548: 64 69                    a2 = s1
  3550: 50 10 40 88 fc           ra = 64, jump @171
      :                          @259 [@dyn 32]
  3555: 82 18                    a1 = u64 [sp]
  3557: 82 5a 10                 a3 = u64 [s0 + 0x10]
  3560: 28 c7                    jump @256
      :                          @260 [@dyn 33]
  3562: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  3565: 7b 10 20                 u64 [sp + 0x20] = ra
  3568: 7b 15 18                 u64 [sp + 0x18] = s0
  3571: 7b 16 10                 u64 [sp + 0x10] = s1
  3574: 64 86                    s1 = a1
  3576: 83 88                    i32 a1 = a1 + 0
  3578: 33 09 80 00              a2 = 0x80
  3582: 64 7a                    a3 = a0
  3584: ae 98 2b                 jump @265 if a1 >=u a2
      :                          @261
  3587: 82 a8 10                 a1 = u64 [a3 + 0x10]
  3590: 82 a7                    a0 = u64 [a3]
  3592: ab 78 12                 jump @264 if a1 != a0
      :                          @262
  3595: 64 a7                    a0 = a3
  3597: 64 a5                    s0 = a3
  3599: 50 10 44 0d fe           ra = 68, jump @215
      :                          @263 [@dyn 34]
  3604: 64 5a                    a3 = s0
  3606: 82 58 10                 a1 = u64 [s0 + 0x10]
  3609: 01                       fallthrough
      :                          @264
  3610: 82 a7 08                 a0 = u64 [a3 + 0x8]
  3613: c8 87 07                 a0 = a0 + a1
  3616: 78 76                    u8 [a0] = s1
  3618: 95 88 01                 a1 = a1 + 0x1
  3621: 7b a8 10                 u64 [a3 + 0x10] = a1
  3624: 28 ab 00                 jump @273
      :                          @265
  3627: 8b 67 0b                 i32 a0 = s1 >> 0xb
  3630: 48 11 0c                 u32 [sp + 12] = 0
  3633: 52 07 1c                 jump @267 if a0 != 0
      :                          @266
  3636: 98 67 06                 a0 = s1 >> 0x6
  3639: 86 77 c0 00              a0 = a0 | 0xc0
  3643: 78 17 0c                 u8 [sp + 0xc] = a0
  3646: 84 67 3f                 a0 = s1 & 0x3f
  3649: 86 77 80 00              a0 = a0 | 0x80
  3653: 78 17 0d                 u8 [sp + 0xd] = a0
  3656: 33 06 02                 s1 = 0x2
  3659: 28 63                    jump @270
      :                          @267
  3661: 8b 67 10                 i32 a0 = s1 >> 0x10
  3664: 52 07 29                 jump @269 if a0 != 0
      :                          @268
  3667: 98 67 0c                 a0 = s1 >> 0xc
  3670: 86 77 e0 00              a0 = a0 | 0xe0
  3674: 78 17 0c                 u8 [sp + 0xc] = a0
  3677: 97 67 34                 a0 = s1 << 0x34
  3680: 98 77 3a                 a0 = a0 >> 0x3a
  3683: 95 77 80 00              a0 = a0 + 0x80
  3687: 78 17 0d                 u8 [sp + 0xd] = a0
  3690: 84 67 3f                 a0 = s1 & 0x3f
  3693: 86 77 80 00              a0 = a0 | 0x80
  3697: 78 17 0e                 u8 [sp + 0xe] = a0
  3700: 33 06 03                 s1 = 0x3
  3703: 28 37                    jump @270
      :                          @269
  3705: 97 67 2b                 a0 = s1 << 0x2b
  3708: 98 77 3d                 a0 = a0 >> 0x3d
  3711: 95 77 f0 00              a0 = a0 + 0xf0
  3715: 78 17 0c                 u8 [sp + 0xc] = a0
  3718: 97 67 2e                 a0 = s1 << 0x2e
  3721: 98 77 3a                 a0 = a0 >> 0x3a
  3724: 95 77 80 00              a0 = a0 + 0x80
  3728: 78 17 0d                 u8 [sp + 0xd] = a0
  3731: 97 67 34                 a0 = s1 << 0x34
  3734: 98 77 3a                 a0 = a0 >> 0x3a
  3737: 95 77 80 00              a0 = a0 + 0x80
  3741: 78 17 0e                 u8 [sp + 0xe] = a0
  3744: 84 67 3f                 a0 = s1 & 0x3f
  3747: 86 77 80 00              a0 = a0 | 0x80
  3751: 78 17 0f                 u8 [sp + 0xf] = a0
  3754: 33 06 04                 s1 = 0x4
  3757: 01                       fallthrough
      :                          @270
  3758: 82 a5 10                 s0 = u64 [a3 + 0x10]
  3761: 82 a7                    a0 = u64 [a3]
  3763: c9 57 07                 a0 = a0 - s0
  3766: ac 67 2d                 jump @274 if a0 <u s1
      :                          @271
  3769: 7b 1a                    u64 [sp] = a3
  3771: 82 a7 08                 a0 = u64 [a3 + 0x8]
  3774: c8 57 07                 a0 = a0 + s0
  3777: 95 18 0c                 a1 = sp + 0xc
  3780: 64 69                    a2 = s1
  3782: 50 10 46 3d              ra = 70, jump @277
      :                          @272 [@dyn 35]
  3786: c8 56 06                 s1 = s1 + s0
  3789: 82 17                    a0 = u64 [sp]
  3791: 7b 76 10                 u64 [a0 + 0x10] = s1
  3794: 01                       fallthrough
      :                          @273
  3795: 33 07                    a0 = 0
  3797: 82 10 20                 ra = u64 [sp + 0x20]
  3800: 82 15 18                 s0 = u64 [sp + 0x18]
  3803: 82 16 10                 s1 = u64 [sp + 0x10]
  3806: 95 11 28                 sp = sp + 0x28
  3809: 32 00                    ret
      :                          @274
  3811: 64 a7                    a0 = a3
  3813: 64 58                    a1 = s0
  3815: 64 69                    a2 = s1
  3817: 64 a5                    s0 = a3
  3819: 50 10 48 7b fb           ra = 72, jump @171
      :                          @275 [@dyn 36]
  3824: 64 5a                    a3 = s0
  3826: 82 55 10                 s0 = u64 [s0 + 0x10]
  3829: 28 c4                    jump @271
      :                          @276 [@dyn 37]
  3831: 64 8a                    a3 = a1
  3833: 33 08 78 02 01           a1 = 0x10278
  3838: 64 a9                    a2 = a3
  3840: 28 ae 04                 jump @372
      :                          @277
  3843: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  3846: 7b 10 18                 u64 [sp + 0x18] = ra
  3849: 7b 15 10                 u64 [sp + 0x10] = s0
  3852: 7b 16 08                 u64 [sp + 0x8] = s1
  3855: 53 19 10 64              jump @286 if a2 <u 16
      :                          @278
  3859: 8d 7a                    i32 a3 = -a0
  3861: 84 a2 07                 t0 = a3 & 0x7
  3864: c8 27 0b                 a4 = a0 + t0
  3867: 51 02 15                 jump @281 if t0 == 0
      :                          @279
  3870: 64 8c                    a5 = a1
  3872: 64 75                    s0 = a0
  3874: 01                       fallthrough
      :                          @280
  3875: 7c ca                    a3 = u8 [a5]
  3877: 78 5a                    u8 [s0] = a3
  3879: 95 55 01                 s0 = s0 + 0x1
  3882: 95 cc 01                 a5 = a5 + 0x1
  3885: ac b5 f6                 jump @280 if s0 <u a4
      :                          @281
  3888: c8 28 03                 t1 = a1 + t0
  3891: c9 29 02                 t0 = a2 - t0
  3894: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  3897: 84 38 07                 a1 = t1 & 0x7
  3900: c8 4b 0a                 a3 = a4 + t2
  3903: 51 08 3b                 jump @288 if a1 == 0
      :                          @282
  3906: 58 04 4b                 jump @291 if t2 <=s 0
      :                          @283
  3909: 97 38 03                 a1 = t1 << 0x3
  3912: 84 80 38                 ra = a1 & 0x38
  3915: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  3918: 82 c5                    s0 = u64 [a5]
  3920: 8d 88                    i32 a1 = -a1
  3922: 84 88 38                 a1 = a1 & 0x38
  3925: 95 cc 08                 a5 = a5 + 0x8
  3928: 01                       fallthrough
      :                          @284
  3929: 82 c6                    s1 = u64 [a5]
  3931: d0 05 05                 s0 = s0 >> ra
  3934: cf 86 09                 a2 = s1 << a1
  3937: d4 59 09                 a2 = a2 | s0
  3940: 7b b9                    u64 [a4] = a2
  3942: 95 bb 08                 a4 = a4 + 0x8
  3945: 95 cc 08                 a5 = a5 + 0x8
  3948: 64 65                    s0 = s1
  3950: ac ab eb                 jump @284 if a4 <u a3
      :                          @285
  3953: 28 1c                    jump @291
      :                          @286
  3955: 64 7a                    a3 = a0
  3957: 52 09 21                 jump @292 if a2 != 0
      :                          @287
  3960: 28 2f                    jump @294
      :                          @288
  3962: 58 04 13                 jump @291 if t2 <=s 0
      :                          @289
  3965: 64 38                    a1 = t1
  3967: 01                       fallthrough
      :                          @290
  3968: 82 89                    a2 = u64 [a1]
  3970: 7b b9                    u64 [a4] = a2
  3972: 95 bb 08                 a4 = a4 + 0x8
  3975: 95 88 08                 a1 = a1 + 0x8
  3978: ac ab f6                 jump @290 if a4 <u a3
      :                          @291
  3981: c8 43 08                 a1 = t1 + t2
  3984: 84 29 07                 a2 = t0 & 0x7
  3987: 51 09 14                 jump @294 if a2 == 0
      :                          @292
  3990: c8 a9 09                 a2 = a2 + a3
  3993: 01                       fallthrough
      :                          @293
  3994: 7c 8b                    a4 = u8 [a1]
  3996: 78 ab                    u8 [a3] = a4
  3998: 95 aa 01                 a3 = a3 + 0x1
  4001: 95 88 01                 a1 = a1 + 0x1
  4004: ac 9a f6                 jump @293 if a3 <u a2
      :                          @294
  4007: 82 10 18                 ra = u64 [sp + 0x18]
  4010: 82 15 10                 s0 = u64 [sp + 0x10]
  4013: 82 16 08                 s1 = u64 [sp + 0x8]
  4016: 95 11 20                 sp = sp + 0x20
  4019: 32 00                    ret
      :                          @295
  4021: 8d 7a                    i32 a3 = -a0
  4023: 84 aa 07                 a3 = a3 & 0x7
  4026: c8 a7 0b                 a4 = a0 + a3
  4029: 51 0a 0e                 jump @298 if a3 == 0
      :                          @296
  4032: 64 7c                    a5 = a0
  4034: 01                       fallthrough
      :                          @297
  4035: 78 c8                    u8 [a5] = a1
  4037: 95 cc 01                 a5 = a5 + 0x1
  4040: ac bc fb                 jump @297 if a5 <u a4
      :                          @298
  4043: c9 a9 03                 t1 = a2 - a3
  4046: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  4049: c8 cb 0a                 a3 = a4 + a5
  4052: 58 0c 1d                 jump @301 if a5 <=s 0
      :                          @299
  4055: 84 82 ff 00              t0 = a1 & 0xff
  4059: 14 09 01 01 01 01 01 01 01 01 a2 = 0x101010101010101
  4069: ca 92 0c                 a5 = t0 * a2
  4072: 01                       fallthrough
      :                          @300
  4073: 7b bc                    u64 [a4] = a5
  4075: 95 bb 08                 a4 = a4 + 0x8
  4078: ac ab fb                 jump @300 if a4 <u a3
      :                          @301
  4081: 84 39 07                 a2 = t1 & 0x7
  4084: 52 09 05                 jump @303 if a2 != 0
      :                          @302
  4087: 28 0e                    jump @305
      :                          @303
  4089: c8 a9 09                 a2 = a2 + a3
  4092: 01                       fallthrough
      :                          @304
  4093: 78 a8                    u8 [a3] = a1
  4095: 95 aa 01                 a3 = a3 + 0x1
  4098: ac 9a fb                 jump @304 if a3 <u a2
      :                          @305
  4101: 32 00                    ret
      :                          @306 [@dyn 38]
  4103: 82 77                    a0 = u64 [a0]
  4105: 01                       fallthrough
      :                          @307
  4106: 28                       jump @307
      :                          @308
  4107: 95 11 a0                 sp = sp + 0xffffffffffffffa0
  4110: 7b 10 58                 u64 [sp + 0x58] = ra
  4113: 7b 15 50                 u64 [sp + 0x50] = s0
  4116: 7b 16 48                 u64 [sp + 0x48] = s1
  4119: 7b 19 08                 u64 [sp + 0x8] = a2
  4122: 7b 18                    u64 [sp] = a1
  4124: 98 7a 04                 a3 = a0 >> 0x4
  4127: 33 09 27                 a2 = 0x27
  4130: 33 0b 8a 00 01           a4 = 0x1008a
  4135: 53 2a 71 02 7b           jump @311 if a3 <u 625
      :                          @309
  4140: 33 09 27                 a2 = 0x27
  4143: 95 1c 46                 a5 = sp + 0x46
  4146: 3a 08 00 00 03           a1 = u64 [0x30000]
  4151: 7b 18 18                 u64 [sp + 0x18] = a1
  4154: 49 11 10 f0 d8 00        u64 [sp + 16] = 0xd8f0
  4160: 33 03 7b 14              t1 = 0x147b
  4164: 33 04 ff e0 f5 05        t2 = 0x5f5e0ff
  4170: 01                       fallthrough
      :                          @310
  4171: 64 70                    ra = a0
  4173: 82 17 18                 a0 = u64 [sp + 0x18]
  4176: d6 70 07                 a0 = ra mulhu a0
  4179: 98 77 0b                 a0 = a0 >> 0xb
  4182: 82 18 10                 a1 = u64 [sp + 0x10]
  4185: c0 87 02                 i32 t0 = a0 * a1
  4188: c8 02 05                 s0 = t0 + ra
  4191: 97 52 30                 t0 = s0 << 0x30
  4194: 98 28 32                 a1 = t0 >> 0x32
  4197: ca 38 08                 a1 = a1 * t1
  4200: 98 8a 11                 a3 = a1 >> 0x11
  4203: 98 88 10                 a1 = a1 >> 0x10
  4206: 84 88 fe 07              a1 = a1 & 0x7fe
  4210: 96 aa 9c                 a3 = a3 * 0xffffffffffffff9c
  4213: c8 5a 0a                 a3 = a3 + s0
  4216: 97 aa 31                 a3 = a3 << 0x31
  4219: 98 aa 30                 a3 = a3 >> 0x30
  4222: c8 b8 08                 a1 = a1 + a4
  4225: 7c 85                    s0 = u8 [a1]
  4227: 7c 88 01                 a1 = u8 [a1 + 0x1]
  4230: c8 ba 0a                 a3 = a3 + a4
  4233: 7c a6 01                 s1 = u8 [a3 + 0x1]
  4236: 7c aa                    a3 = u8 [a3]
  4238: 78 c8 ff                 u8 [a5 + 0xffffffffffffffff] = a1
  4241: 78 c5 fe                 u8 [a5 + 0xfffffffffffffffe] = s0
  4244: 78 c6 01                 u8 [a5 + 0x1] = s1
  4247: 78 ca                    u8 [a5] = a3
  4249: 95 99 fc                 a2 = a2 + 0xfffffffffffffffc
  4252: 95 cc fc                 a5 = a5 + 0xfffffffffffffffc
  4255: ac 04 ac                 jump @310 if t2 <u ra
      :                          @311
  4258: 54 17 63 36              jump @313 if a0 <=u 99
      :                          @312
  4262: 97 78 30                 a1 = a0 << 0x30
  4265: 98 88 32                 a1 = a1 >> 0x32
  4268: 96 88 7b 14              a1 = a1 * 0x147b
  4272: 98 88 11                 a1 = a1 >> 0x11
  4275: 96 8a 9c                 a3 = a1 * 0xffffffffffffff9c
  4278: c8 a7 07                 a0 = a0 + a3
  4281: 97 77 31                 a0 = a0 << 0x31
  4284: 98 77 30                 a0 = a0 >> 0x30
  4287: 95 99 fe                 a2 = a2 + 0xfffffffffffffffe
  4290: c8 b7 07                 a0 = a0 + a4
  4293: 7c 7a 01                 a3 = u8 [a0 + 0x1]
  4296: 7c 77                    a0 = u8 [a0]
  4298: 95 1c 21                 a5 = sp + 0x21
  4301: c8 9c 0c                 a5 = a5 + a2
  4304: 78 ca 01                 u8 [a5 + 0x1] = a3
  4307: 78 c7                    u8 [a5] = a0
  4309: 64 87                    a0 = a1
  4311: 01                       fallthrough
      :                          @313
  4312: 55 17 0a 14              jump @315 if a0 >=u 10
      :                          @314
  4316: 95 99 ff                 a2 = a2 + 0xffffffffffffffff
  4319: 95 18 21                 a1 = sp + 0x21
  4322: c8 98 08                 a1 = a1 + a2
  4325: 83 77 30                 i32 a0 = a0 + 0x30
  4328: 78 87                    u8 [a1] = a0
  4330: 28 1c                    jump @316
      :                          @315
  4332: 97 77 01                 a0 = a0 << 0x1
  4335: 95 99 fe                 a2 = a2 + 0xfffffffffffffffe
  4338: c8 b7 07                 a0 = a0 + a4
  4341: 7c 78 01                 a1 = u8 [a0 + 0x1]
  4344: 7c 77                    a0 = u8 [a0]
  4346: 95 1a 21                 a3 = sp + 0x21
  4349: c8 9a 0a                 a3 = a3 + a2
  4352: 78 a8 01                 u8 [a3 + 0x1] = a1
  4355: 78 a7                    u8 [a3] = a0
  4357: 01                       fallthrough
      :                          @316
  4358: 95 1b 21                 a4 = sp + 0x21
  4361: c8 9b 0b                 a4 = a4 + a2
  4364: 9a 9c 27                 a5 = 0x27 - a2
  4367: 33 09 88 00 01           a2 = 0x10088
  4372: 82 17 08                 a0 = u64 [sp + 0x8]
  4375: 82 18                    a1 = u64 [sp]
  4377: 33 0a                    a3 = 0
  4379: 50 10 4e 12              ra = 78, jump @318
      :                          @317 [@dyn 39]
  4383: 82 10 58                 ra = u64 [sp + 0x58]
  4386: 82 15 50                 s0 = u64 [sp + 0x50]
  4389: 82 16 48                 s1 = u64 [sp + 0x48]
  4392: 95 11 60                 sp = sp + 0x60
  4395: 32 00                    ret
      :                          @318
  4397: 95 11 98                 sp = sp + 0xffffffffffffff98
  4400: 7b 10 60                 u64 [sp + 0x60] = ra
  4403: 7b 15 58                 u64 [sp + 0x58] = s0
  4406: 7b 16 50                 u64 [sp + 0x50] = s1
  4409: 7b 1b 18                 u64 [sp + 0x18] = a4
  4412: 51 08 4f                 jump @325 if a1 == 0
      :                          @319
  4415: 80 76 34                 s1 = u32 [a0 + 0x34]
  4418: 84 68 01                 a1 = s1 & 0x1
  4421: 33 0b 2b                 a4 = 0x2b
  4424: 33 05 00 00 11           s0 = 0x110000
  4429: db 8b 05                 s0 = a4 if a1 != 0
  4432: 7b 15 28                 u64 [sp + 0x28] = s0
  4435: c8 c8 02                 t0 = a1 + a5
  4438: 84 68 04                 a1 = s1 & 0x4
  4441: 51 08 42                 jump @326 if a1 == 0
      :                          @320
  4444: 7b 19 30                 u64 [sp + 0x30] = a2
  4447: 33 08                    a1 = 0
  4449: 51 0a 1a                 jump @323 if a3 == 0
      :                          @321
  4452: 64 a5                    s0 = a3
  4454: 01                       fallthrough
      :                          @322
  4455: 7d 9b                    a4 = i8 [a2]
  4457: 89 bb c0                 a4 = a4 <s 0xffffffffffffffc0
  4460: 85 bb 01                 a4 = a4 ^ 0x1
  4463: c8 b8 08                 a1 = a1 + a4
  4466: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  4469: 95 99 01                 a2 = a2 + 0x1
  4472: 52 05 ef                 jump @322 if s0 != 0
      :                          @323
  4475: c8 82 02                 t0 = t0 + a1
  4478: 7b 1a 38                 u64 [sp + 0x38] = a3
  4481: 82 78                    a1 = u64 [a0]
  4483: 7b 1c 20                 u64 [sp + 0x20] = a5
  4486: 52 08 23                 jump @327 if a1 != 0
      :                          @324
  4489: 28 41                    jump @332
      :                          @325
  4491: 81 76 34                 s1 = i32 [a0 + 0x34]
  4494: 95 c2 01                 t0 = a5 + 0x1
  4497: 49 11 28 2d              u64 [sp + 40] = 0x2d
  4501: 84 68 04                 a1 = s1 & 0x4
  4504: 52 08 c4                 jump @320 if a1 != 0
      :                          @326
  4507: 49 11 30                 u64 [sp + 48] = 0
  4510: 7b 1a 38                 u64 [sp + 0x38] = a3
  4513: 82 78                    a1 = u64 [a0]
  4515: 7b 1c 20                 u64 [sp + 0x20] = a5
  4518: 51 08 24                 jump @332 if a1 == 0
      :                          @327
  4521: 82 75 08                 s0 = u64 [a0 + 0x8]
  4524: ae 52 1e                 jump @332 if t0 >=u s0
      :                          @328
  4527: 84 66 08                 s1 = s1 & 0x8
  4530: 52 06 50                 jump @335 if s1 != 0
      :                          @329
  4533: 7c 79 38                 a2 = u8 [a0 + 0x38]
  4536: c9 25 0a                 a3 = s0 - t0
  4539: 5a 19 01 a1 00           jump @342 if a2 >s 1
      :                          @330
  4544: 52 09 ae 00              jump @344 if a2 != 0
      :                          @331
  4548: 7b 1a 10                 u64 [sp + 0x10] = a3
  4551: 28 ad 00                 jump @345
      :                          @332
  4554: 82 75 20                 s0 = u64 [a0 + 0x20]
  4557: 82 76 28                 s1 = u64 [a0 + 0x28]
  4560: 64 57                    a0 = s0
  4562: 64 68                    a1 = s1
  4564: 82 19 28                 a2 = u64 [sp + 0x28]
  4567: 82 1a 30                 a3 = u64 [sp + 0x30]
  4570: 82 1b 38                 a4 = u64 [sp + 0x38]
  4573: 50 10 50 6d 01           ra = 80, jump @365
      :                          @333 [@dyn 40]
  4578: 33 08 01                 a1 = 0x1
  4581: 52 07 bc 00              jump @350 if a0 != 0
      :                          @334
  4585: 82 6c 18                 a5 = u64 [s1 + 0x18]
  4588: 64 57                    a0 = s0
  4590: 82 18 18                 a1 = u64 [sp + 0x18]
  4593: 82 19 20                 a2 = u64 [sp + 0x20]
  4596: 82 10 60                 ra = u64 [sp + 0x60]
  4599: 82 15 58                 s0 = u64 [sp + 0x58]
  4602: 82 16 50                 s1 = u64 [sp + 0x50]
  4605: 95 11 68                 sp = sp + 0x68
  4608: 32 0c                    jump [a5]
      :                          @335
  4610: 7b 12 40                 u64 [sp + 0x40] = t0
  4613: 81 78 30                 a1 = i32 [a0 + 0x30]
  4616: 7b 18 08                 u64 [sp + 0x8] = a1
  4619: 7c 79 38                 a2 = u8 [a0 + 0x38]
  4622: 7b 19                    u64 [sp] = a2
  4624: 82 79 20                 a2 = u64 [a0 + 0x20]
  4627: 82 76 28                 s1 = u64 [a0 + 0x28]
  4630: 48 17 30 30              u32 [a0 + 48] = 0x30
  4634: 7b 17 10                 u64 [sp + 0x10] = a0
  4637: 46 17 38 01              u8 [a0 + 56] = 0x1
  4641: 7b 19 48                 u64 [sp + 0x48] = a2
  4644: 64 97                    a0 = a2
  4646: 64 68                    a1 = s1
  4648: 82 19 28                 a2 = u64 [sp + 0x28]
  4651: 82 1a 30                 a3 = u64 [sp + 0x30]
  4654: 82 1b 38                 a4 = u64 [sp + 0x38]
  4657: 50 10 52 19 01           ra = 82, jump @365
      :                          @336 [@dyn 41]
  4662: 52 07 67                 jump @349 if a0 != 0
      :                          @337
  4665: 82 17 40                 a0 = u64 [sp + 0x40]
  4668: c9 75 05                 s0 = s0 - a0
  4671: 95 55 01                 s0 = s0 + 0x1
  4674: 01                       fallthrough
      :                          @338
  4675: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  4678: 51 05 c6 00              jump @360 if s0 == 0
      :                          @339
  4682: 82 69 20                 a2 = u64 [s1 + 0x20]
  4685: 33 08 30                 a1 = 0x30
  4688: 82 17 48                 a0 = u64 [sp + 0x48]
  4691: b4 90 01 54              ra = 84, jump [a2]
      :                          @340 [@dyn 42]
  4695: 51 07 ec                 jump @338 if a0 == 0
      :                          @341
  4698: 28 43                    jump @349
      :                          @342
  4700: 52 19 02 12              jump @344 if a2 != 2
      :                          @343
  4704: 98 a9 01                 a2 = a3 >> 0x1
  4707: 95 a8 01                 a1 = a3 + 0x1
  4710: 98 88 01                 a1 = a1 >> 0x1
  4713: 7b 18 10                 u64 [sp + 0x10] = a1
  4716: 28 08                    jump @345
      :                          @344
  4718: 64 a9                    a2 = a3
  4720: 49 11 10                 u64 [sp + 16] = 0
  4723: 01                       fallthrough
      :                          @345
  4724: 82 78 20                 a1 = u64 [a0 + 0x20]
  4727: 7b 18 48                 u64 [sp + 0x48] = a1
  4730: 82 76 28                 s1 = u64 [a0 + 0x28]
  4733: 81 77 30                 a0 = i32 [a0 + 0x30]
  4736: 7b 17 40                 u64 [sp + 0x40] = a0
  4739: 95 95 01                 s0 = a2 + 0x1
  4742: 01                       fallthrough
      :                          @346
  4743: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  4746: 51 05 27                 jump @351 if s0 == 0
      :                          @347
  4749: 82 69 20                 a2 = u64 [s1 + 0x20]
  4752: 82 17 48                 a0 = u64 [sp + 0x48]
  4755: 82 18 40                 a1 = u64 [sp + 0x40]
  4758: b4 90 01 56              ra = 86, jump [a2]
      :                          @348 [@dyn 43]
  4762: 51 07 ed                 jump @346 if a0 == 0
      :                          @349
  4765: 33 08 01                 a1 = 0x1
  4768: 01                       fallthrough
      :                          @350
  4769: 64 87                    a0 = a1
  4771: 82 10 60                 ra = u64 [sp + 0x60]
  4774: 82 15 58                 s0 = u64 [sp + 0x58]
  4777: 82 16 50                 s1 = u64 [sp + 0x50]
  4780: 95 11 68                 sp = sp + 0x68
  4783: 32 00                    ret
      :                          @351
  4785: 82 15 48                 s0 = u64 [sp + 0x48]
  4788: 64 57                    a0 = s0
  4790: 64 68                    a1 = s1
  4792: 82 19 28                 a2 = u64 [sp + 0x28]
  4795: 82 1a 30                 a3 = u64 [sp + 0x30]
  4798: 82 1b 38                 a4 = u64 [sp + 0x38]
  4801: 50 10 58 89 00           ra = 88, jump @365
      :                          @352 [@dyn 44]
  4806: 33 08 01                 a1 = 0x1
  4809: 52 07 d8                 jump @350 if a0 != 0
      :                          @353
  4812: 82 6a 18                 a3 = u64 [s1 + 0x18]
  4815: 64 57                    a0 = s0
  4817: 82 18 18                 a1 = u64 [sp + 0x18]
  4820: 82 19 20                 a2 = u64 [sp + 0x20]
  4823: b4 a0 01 5a              ra = 90, jump [a3]
      :                          @354 [@dyn 45]
  4827: 33 08 01                 a1 = 0x1
  4830: 52 07 c3                 jump @350 if a0 != 0
      :                          @355
  4833: 82 17 10                 a0 = u64 [sp + 0x10]
  4836: 9a 77                    a0 = -a0
  4838: 7b 17 38                 u64 [sp + 0x38] = a0
  4841: 33 05 ff                 s0 = 0xffffffffffffffff
  4844: 01                       fallthrough
      :                          @356
  4845: 82 17 38                 a0 = u64 [sp + 0x38]
  4848: c8 57 07                 a0 = a0 + s0
  4851: 51 17 ff 42              jump @363 if a0 == 4294967295
      :                          @357
  4855: 82 69 20                 a2 = u64 [s1 + 0x20]
  4858: 82 17 48                 a0 = u64 [sp + 0x48]
  4861: 82 18 40                 a1 = u64 [sp + 0x40]
  4864: b4 90 01 5c              ra = 92, jump [a2]
      :                          @358 [@dyn 46]
  4868: 95 55 01                 s0 = s0 + 0x1
  4871: 51 07 e6                 jump @356 if a0 == 0
      :                          @359
  4874: 28 37                    jump @364
      :                          @360
  4876: 82 6a 18                 a3 = u64 [s1 + 0x18]
  4879: 82 17 48                 a0 = u64 [sp + 0x48]
  4882: 82 18 18                 a1 = u64 [sp + 0x18]
  4885: 82 19 20                 a2 = u64 [sp + 0x20]
  4888: b4 a0 01 5e              ra = 94, jump [a3]
      :                          @361 [@dyn 47]
  4892: 33 08 01                 a1 = 0x1
  4895: 52 07 82                 jump @350 if a0 != 0
      :                          @362
  4898: 33 08                    a1 = 0
  4900: 82 17 10                 a0 = u64 [sp + 0x10]
  4903: 82 19 08                 a2 = u64 [sp + 0x8]
  4906: 7a 79 30                 u32 [a0 + 0x30] = a2
  4909: 82 19                    a2 = u64 [sp]
  4911: 78 79 38                 u8 [a0 + 0x38] = a2
  4914: 28 6f ff                 jump @350
      :                          @363
  4917: 82 15 10                 s0 = u64 [sp + 0x10]
  4920: 82 17 10                 a0 = u64 [sp + 0x10]
  4923: d8 75 08                 a1 = s0 <u a0
  4926: 28 63 ff                 jump @350
      :                          @364
  4929: 82 17 10                 a0 = u64 [sp + 0x10]
  4932: d8 75 08                 a1 = s0 <u a0
  4935: 28 5a ff                 jump @350
      :                          @365
  4938: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  4941: 7b 10 20                 u64 [sp + 0x20] = ra
  4944: 7b 15 18                 u64 [sp + 0x18] = s0
  4947: 7b 16 10                 u64 [sp + 0x10] = s1
  4950: 83 9c                    i32 a5 = a2 + 0
  4952: 33 02 00 00 11           t0 = 0x110000
  4957: 64 a6                    s1 = a3
  4959: 64 85                    s0 = a1
  4961: 64 7a                    a3 = a0
  4963: aa 2c 20                 jump @368 if a5 == t0
      :                          @366
  4966: 82 5c 20                 a5 = u64 [s0 + 0x20]
  4969: 64 a7                    a0 = a3
  4971: 64 98                    a1 = a2
  4973: 7b 1b 08                 u64 [sp + 0x8] = a4
  4976: 7b 1a                    u64 [sp] = a3
  4978: b4 c0 01 60              ra = 96, jump [a5]
      :                          @367 [@dyn 48]
  4982: 82 1a                    a3 = u64 [sp]
  4984: 82 1b 08                 a4 = u64 [sp + 0x8]
  4987: 64 78                    a1 = a0
  4989: 33 07 01                 a0 = 0x1
  4992: 52 08 20                 jump @371 if a1 != 0
      :                          @368
  4995: 51 06 1a                 jump @370 if s1 == 0
      :                          @369
  4998: 82 5c 18                 a5 = u64 [s0 + 0x18]
  5001: 64 a7                    a0 = a3
  5003: 64 68                    a1 = s1
  5005: 64 b9                    a2 = a4
  5007: 82 10 20                 ra = u64 [sp + 0x20]
  5010: 82 15 18                 s0 = u64 [sp + 0x18]
  5013: 82 16 10                 s1 = u64 [sp + 0x10]
  5016: 95 11 28                 sp = sp + 0x28
  5019: 32 0c                    jump [a5]
      :                          @370
  5021: 33 07                    a0 = 0
  5023: 01                       fallthrough
      :                          @371
  5024: 82 10 20                 ra = u64 [sp + 0x20]
  5027: 82 15 18                 s0 = u64 [sp + 0x18]
  5030: 82 16 10                 s1 = u64 [sp + 0x10]
  5033: 95 11 28                 sp = sp + 0x28
  5036: 32 00                    ret
      :                          @372
  5038: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  5042: 7b 10 80 00              u64 [sp + 0x80] = ra
  5046: 7b 15 78                 u64 [sp + 0x78] = s0
  5049: 7b 16 70                 u64 [sp + 0x70] = s1
  5052: 49 11 60 20              u64 [sp + 96] = 0x20
  5056: 33 0a 03                 a3 = 0x3
  5059: 78 1a 68                 u8 [sp + 0x68] = a3
  5062: 82 96 20                 s1 = u64 [a2 + 0x20]
  5065: 49 11 30                 u64 [sp + 48] = 0
  5068: 49 11 40                 u64 [sp + 64] = 0
  5071: 7b 17 50                 u64 [sp + 0x50] = a0
  5074: 7b 18 58                 u64 [sp + 0x58] = a1
  5077: 51 06 07 01              jump @394 if s1 == 0
      :                          @373
  5081: 82 97 28                 a0 = u64 [a2 + 0x28]
  5084: 51 07 74 01              jump @404 if a0 == 0
      :                          @374
  5088: 49 11 28                 u64 [sp + 40] = 0
  5091: 82 95                    s0 = u64 [a2]
  5093: 7b 19 08                 u64 [sp + 0x8] = a2
  5096: 82 98 10                 a1 = u64 [a2 + 0x10]
  5099: 7b 18 18                 u64 [sp + 0x18] = a1
  5102: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  5105: 97 88 03                 a1 = a1 << 0x3
  5108: 98 88 03                 a1 = a1 >> 0x3
  5111: 95 88 01                 a1 = a1 + 0x1
  5114: 7b 18                    u64 [sp] = a1
  5116: 95 55 08                 s0 = s0 + 0x8
  5119: 96 78 38                 a1 = a0 * 0x38
  5122: 95 66 18                 s1 = s1 + 0x18
  5125: 33 07 4c                 a0 = 0x4c
  5128: 7b 17 10                 u64 [sp + 0x10] = a0
  5131: 01                       fallthrough
      :                          @375
  5132: 7b 18 20                 u64 [sp + 0x20] = a1
  5135: 82 59                    a2 = u64 [s0]
  5137: 51 09 17                 jump @378 if a2 == 0
      :                          @376
  5140: 82 1a 58                 a3 = u64 [sp + 0x58]
  5143: 82 17 50                 a0 = u64 [sp + 0x50]
  5146: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  5149: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5152: b4 a0 01 62              ra = 98, jump [a3]
      :                          @377 [@dyn 49]
  5156: 52 07 51 01              jump @407 if a0 != 0
      :                          @378
  5160: 81 67 10                 a0 = i32 [s1 + 0x10]
  5163: 7a 17 60                 u32 [sp + 0x60] = a0
  5166: 7c 67 18                 a0 = u8 [s1 + 0x18]
  5169: 78 17 68                 u8 [sp + 0x68] = a0
  5172: 81 67 14                 a0 = i32 [s1 + 0x14]
  5175: 7a 17 64                 u32 [sp + 0x64] = a0
  5178: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  5181: 82 67                    a0 = u64 [s1]
  5183: 51 08 26                 jump @383 if a1 == 0
      :                          @379
  5186: 52 18 01 16              jump @381 if a1 != 1
      :                          @380
  5190: 97 77 04                 a0 = a0 << 0x4
  5193: 82 18 18                 a1 = u64 [sp + 0x18]
  5196: c8 87 07                 a0 = a0 + a1
  5199: 82 78 08                 a1 = u64 [a0 + 0x8]
  5202: 82 19 10                 a2 = u64 [sp + 0x10]
  5205: aa 98 07                 jump @382 if a1 == a2
      :                          @381
  5208: 33 08                    a1 = 0
  5210: 28 0f                    jump @384
      :                          @382
  5212: 82 77                    a0 = u64 [a0]
  5214: 82 77                    a0 = u64 [a0]
  5216: 33 08 01                 a1 = 0x1
  5219: 28 06                    jump @384
      :                          @383
  5221: 33 08 01                 a1 = 0x1
  5224: 01                       fallthrough
      :                          @384
  5225: 7b 18 30                 u64 [sp + 0x30] = a1
  5228: 7b 17 38                 u64 [sp + 0x38] = a0
  5231: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  5234: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  5237: 51 08 26                 jump @389 if a1 == 0
      :                          @385
  5240: 52 18 01 16              jump @387 if a1 != 1
      :                          @386
  5244: 97 77 04                 a0 = a0 << 0x4
  5247: 82 18 18                 a1 = u64 [sp + 0x18]
  5250: c8 87 07                 a0 = a0 + a1
  5253: 82 78 08                 a1 = u64 [a0 + 0x8]
  5256: 82 19 10                 a2 = u64 [sp + 0x10]
  5259: aa 98 07                 jump @388 if a1 == a2
      :                          @387
  5262: 33 08                    a1 = 0
  5264: 28 0f                    jump @390
      :                          @388
  5266: 82 77                    a0 = u64 [a0]
  5268: 82 77                    a0 = u64 [a0]
  5270: 33 08 01                 a1 = 0x1
  5273: 28 06                    jump @390
      :                          @389
  5275: 33 08 01                 a1 = 0x1
  5278: 01                       fallthrough
      :                          @390
  5279: 7b 18 40                 u64 [sp + 0x40] = a1
  5282: 7b 17 48                 u64 [sp + 0x48] = a0
  5285: 82 67 08                 a0 = u64 [s1 + 0x8]
  5288: 97 77 04                 a0 = a0 << 0x4
  5291: 82 18 18                 a1 = u64 [sp + 0x18]
  5294: c8 78 08                 a1 = a1 + a0
  5297: 82 87                    a0 = u64 [a1]
  5299: 82 89 08                 a2 = u64 [a1 + 0x8]
  5302: 95 18 30                 a1 = sp + 0x30
  5305: b4 90 01 64              ra = 100, jump [a2]
      :                          @391 [@dyn 50]
  5309: 52 07 b8 00              jump @407 if a0 != 0
      :                          @392
  5313: 95 55 10                 s0 = s0 + 0x10
  5316: 82 18 20                 a1 = u64 [sp + 0x20]
  5319: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  5322: 95 66 38                 s1 = s1 + 0x38
  5325: 82 17 28                 a0 = u64 [sp + 0x28]
  5328: 95 77 01                 a0 = a0 + 0x1
  5331: 7b 17 28                 u64 [sp + 0x28] = a0
  5334: 52 08 36 ff              jump @375 if a1 != 0
      :                          @393
  5338: 28 69                    jump @402
      :                          @394
  5340: 82 97 18                 a0 = u64 [a2 + 0x18]
  5343: 51 07 71                 jump @404 if a0 == 0
      :                          @395
  5346: 82 95 10                 s0 = u64 [a2 + 0x10]
  5349: 33 0a                    a3 = 0
  5351: 97 78 04                 a1 = a0 << 0x4
  5354: c8 58 08                 a1 = a1 + s0
  5357: 7b 18 20                 u64 [sp + 0x20] = a1
  5360: 7b 19 08                 u64 [sp + 0x8] = a2
  5363: 82 96                    s1 = u64 [a2]
  5365: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  5368: 97 77 04                 a0 = a0 << 0x4
  5371: 98 77 04                 a0 = a0 >> 0x4
  5374: 95 77 01                 a0 = a0 + 0x1
  5377: 7b 17                    u64 [sp] = a0
  5379: 95 66 08                 s1 = s1 + 0x8
  5382: 01                       fallthrough
      :                          @396
  5383: 7b 1a 28                 u64 [sp + 0x28] = a3
  5386: 82 69                    a2 = u64 [s1]
  5388: 51 09 16                 jump @399 if a2 == 0
      :                          @397
  5391: 82 1a 58                 a3 = u64 [sp + 0x58]
  5394: 82 17 50                 a0 = u64 [sp + 0x50]
  5397: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  5400: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5403: b4 a0 01 66              ra = 102, jump [a3]
      :                          @398 [@dyn 51]
  5407: 52 07 56                 jump @407 if a0 != 0
      :                          @399
  5410: 82 57                    a0 = u64 [s0]
  5412: 82 59 08                 a2 = u64 [s0 + 0x8]
  5415: 95 18 30                 a1 = sp + 0x30
  5418: b4 90 01 68              ra = 104, jump [a2]
      :                          @400 [@dyn 52]
  5422: 52 07 47                 jump @407 if a0 != 0
      :                          @401
  5425: 95 66 10                 s1 = s1 + 0x10
  5428: 95 55 10                 s0 = s0 + 0x10
  5431: 82 1a 28                 a3 = u64 [sp + 0x28]
  5434: 95 aa 01                 a3 = a3 + 0x1
  5437: 82 17 20                 a0 = u64 [sp + 0x20]
  5440: ab 75 c7                 jump @396 if s0 != a0
      :                          @402
  5443: 82 19 08                 a2 = u64 [sp + 0x8]
  5446: 82 1a                    a3 = u64 [sp]
  5448: 82 97 08                 a0 = u64 [a2 + 0x8]
  5451: ac 7a 0d                 jump @405 if a3 <u a0
      :                          @403
  5454: 28 2c                    jump @408
      :                          @404
  5456: 33 0a                    a3 = 0
  5458: 82 97 08                 a0 = u64 [a2 + 0x8]
  5461: 54 07 25                 jump @408 if a0 <=u 0
      :                          @405
  5464: 82 97                    a0 = u64 [a2]
  5466: 97 a8 04                 a1 = a3 << 0x4
  5469: c8 87 09                 a2 = a0 + a1
  5472: 82 1a 58                 a3 = u64 [sp + 0x58]
  5475: 82 17 50                 a0 = u64 [sp + 0x50]
  5478: 82 98                    a1 = u64 [a2]
  5480: 82 99 08                 a2 = u64 [a2 + 0x8]
  5483: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5486: b4 a0 01 6a              ra = 106, jump [a3]
      :                          @406 [@dyn 53]
  5490: 51 07 08                 jump @408 if a0 == 0
      :                          @407
  5493: 33 07 01                 a0 = 0x1
  5496: 28 05                    jump @409
      :                          @408
  5498: 33 07                    a0 = 0
  5500: 01                       fallthrough
      :                          @409
  5501: 82 10 80 00              ra = u64 [sp + 0x80]
  5505: 82 15 78                 s0 = u64 [sp + 0x78]
  5508: 82 16 70                 s1 = u64 [sp + 0x70]
  5511: 95 11 88 00              sp = sp + 0x88
  5515: 32 00                    ret
      :                          @410
  5517: 51 08 9b 00              jump @431 if a1 == 0
      :                          @411
  5521: 64 79                    a2 = a0
  5523: 7c 77                    a0 = u8 [a0]
  5525: 51 07 91 00              jump @430 if a0 == 0
      :                          @412
  5529: 51 27 ff 00 90 00        jump @432 if a0 == 255
      :                          @413
  5535: 6c 7a                    a3 = sext.b a0
  5537: 57 0a 09                 jump @415 if a3 <s 0
      :                          @414
  5540: 33 0a                    a3 = 0
  5542: 33 08                    a1 = 0
  5544: 28 73                    jump @429
      :                          @415
  5546: 55 27 c0 00 0d           jump @417 if a0 >=u 192
      :                          @416
  5551: 33 0a 01                 a3 = 0x1
  5554: 33 0b 80                 a4 = 0xffffffffffffff80
  5557: 28 4a                    jump @426
      :                          @417
  5559: 55 27 e0 00 0e           jump @419 if a0 >=u 224
      :                          @418
  5564: 33 0a 02                 a3 = 0x2
  5567: 33 0b 40 ff              a4 = 0xffffffffffffff40
  5571: 28 3c                    jump @426
      :                          @419
  5573: 55 27 f0 00 0e           jump @421 if a0 >=u 240
      :                          @420
  5578: 33 0a 03                 a3 = 0x3
  5581: 33 0b 20 ff              a4 = 0xffffffffffffff20
  5585: 28 2e                    jump @426
      :                          @421
  5587: 55 27 f8 00 0e           jump @423 if a0 >=u 248
      :                          @422
  5592: 33 0a 04                 a3 = 0x4
  5595: 33 0b 10 ff              a4 = 0xffffffffffffff10
  5599: 28 20                    jump @426
      :                          @423
  5601: 55 27 fc 00 0e           jump @425 if a0 >=u 252
      :                          @424
  5606: 33 0a 05                 a3 = 0x5
  5609: 33 0b 08 ff              a4 = 0xffffffffffffff08
  5613: 28 12                    jump @426
      :                          @425
  5615: 88 7a fe 00              a3 = a0 <u 0xfe
  5619: 33 0b 04 ff              a4 = 0xffffffffffffff04
  5623: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  5627: 85 aa 07                 a3 = a3 ^ 0x7
  5630: 01                       fallthrough
      :                          @426
  5631: ae 8a 2b                 jump @433 if a3 >=u a1
      :                          @427
  5634: 33 08                    a1 = 0
  5636: c8 b7 07                 a0 = a0 + a4
  5639: 64 ab                    a4 = a3
  5641: 01                       fallthrough
      :                          @428
  5642: c8 b9 0c                 a5 = a2 + a4
  5645: 7c cc                    a5 = u8 [a5]
  5647: 97 88 08                 a1 = a1 << 0x8
  5650: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  5653: d4 c8 08                 a1 = a1 | a5
  5656: 52 0b f2                 jump @428 if a4 != 0
      :                          @429
  5659: 8a a9 03                 i32 a2 = a3 << 0x3
  5662: cf 97 07                 a0 = a0 << a2
  5665: c8 87 07                 a0 = a0 + a1
  5668: 32 00                    ret
      :                          @430
  5670: 32 00                    ret
      :                          @431
  5672: 00                       trap
      :                          @432
  5673: 00                       trap
      :                          @433
  5674: 00                       trap
