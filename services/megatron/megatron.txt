// RO data = 680/680 bytes
// RW data = 16/4144 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 2 bytes
// RO data = [109, 101, 103, 40, 109, 101, 103, 32, 114, 101, 97, 100, 32, 32, 32, 32, 32, 114, 101, 97, 100, 32, 102, 114, 111, 109, 32, 115, 101, 114, 118, 105, 99, 101, 32, 32, 102, 105, 98, 40, 110, 61, 41, 61, 32, 116, 114, 105, 98, 40, 110, 61, 116, 114, 97, 110, 115, 102, 101, 114, 32, 119, 114, 105, 116, 101, 40, 110, 61, 41, 32, 110, 117, 109, 84, 114, 97, 110, 115, 102, 101, 114, 115, 61, 32, 116, 114, 97, 110, 115, 102, 101, 114, 40, 100, 101, 115, 116, 58, 44, 32, 97, 109, 111, 117, 110, 116, 61, 44, 32, 103, 97, 115, 65, 118, 97, 105, 108, 61, 41, 32, 82, 101, 115, 117, 108, 116, 58, 32, 0, 0, 0, 0, 0, 0, 0, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 16, 0, 1, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 35, 0, 1, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 42, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 16, 0, 1, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 44, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 42, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 42, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 60, 0, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 69, 0, 1, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 136, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 1, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 99, 0, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 108, 0, 1, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 119, 0, 1, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0]
// RW data = [75, 89, 134, 56, 214, 197, 109, 52, 128, 128, 128, 128, 128, 128, 128, 128]
// Instructions = 1913
// Code size = 5699 bytes

      :                          @0
     0: 28 84 02 00 00           jump @45
      :                          @1
     5: 28 25 03 00 00           jump @60
      :                          @2
    10: 28 62 0a                 jump @170
      :                          @3 [@dyn 1]
    13: 95 11 78 ff              sp = sp + 0xffffffffffffff78
    17: 7b 10 80 00              u64 [sp + 0x80] = ra
    21: 64 82                    t0 = a1
    23: 80 88 34                 a1 = u32 [a1 + 0x34]
    26: 84 89 10                 a2 = a1 & 0x10
    29: 52 09 28                 jump @6 if a2 != 0
      :                          @4
    32: 84 88 20                 a1 = a1 & 0x20
    35: 52 08 68                 jump @10 if a1 != 0
      :                          @5
    38: 81 77                    a0 = i32 [a0]
    40: 89 79                    a2 = a0 <s 0
    42: 85 98 01                 a1 = a2 ^ 0x1
    45: 97 7a 20                 a3 = a0 << 0x20
    48: 98 aa 20                 a3 = a3 >> 0x20
    51: 9a 77                    a0 = -a0
    53: da 9a 07                 a0 = a3 if a2 == 0
    56: 64 29                    a2 = t0
    58: 82 10 80 00              ra = u64 [sp + 0x80]
    62: 95 11 88 00              sp = sp + 0x88
    66: 28 e1 0f                 jump @310
      :                          @6
    69: 81 7a                    a3 = i32 [a0]
    71: 33 08 81 00              a1 = 0x81
    75: 95 17 7f                 a0 = sp + 0x7f
    78: 33 03 57                 t1 = 0x57
    81: 01                       fallthrough
      :                          @7
    82: 64 8b                    a4 = a1
    84: 8b ac 04                 i32 a5 = a3 >> 0x4
    87: 84 aa 0f                 a3 = a3 & 0xf
    90: 88 a8 0a                 a1 = a3 <u 0xa
    93: 33 09 30                 a2 = 0x30
    96: da 83 09                 a2 = t1 if a1 == 0
    99: be a9 09                 i32 a2 = a2 + a3
   102: 78 79                    u8 [a0] = a2
   104: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   107: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   110: 64 ca                    a3 = a5
   112: 52 0c e2                 jump @7 if a5 != 0
      :                          @8
   115: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   118: 56 27 80 00 71           jump @16 if a0 >u 128
      :                          @9
   123: 9a 8c 81 00              a5 = 0x81 - a1
   127: 64 1b                    a4 = sp
   129: c8 7b 0b                 a4 = a4 + a0
   132: 33 09 88 00 01           a2 = 0x10088
   137: 28 47                    jump @14
      :                          @10
   139: 81 7a                    a3 = i32 [a0]
   141: 33 08 81 00              a1 = 0x81
   145: 95 17 7f                 a0 = sp + 0x7f
   148: 33 03 37                 t1 = 0x37
   151: 01                       fallthrough
      :                          @11
   152: 64 8b                    a4 = a1
   154: 8b ac 04                 i32 a5 = a3 >> 0x4
   157: 84 aa 0f                 a3 = a3 & 0xf
   160: 88 a8 0a                 a1 = a3 <u 0xa
   163: 33 09 30                 a2 = 0x30
   166: da 83 09                 a2 = t1 if a1 == 0
   169: be a9 09                 i32 a2 = a2 + a3
   172: 78 79                    u8 [a0] = a2
   174: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   177: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   180: 64 ca                    a3 = a5
   182: 52 0c e2                 jump @11 if a5 != 0
      :                          @12
   185: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   188: 56 27 80 00 2b           jump @16 if a0 >u 128
      :                          @13
   193: 9a 8c 81 00              a5 = 0x81 - a1
   197: 64 1b                    a4 = sp
   199: c8 7b 0b                 a4 = a4 + a0
   202: 33 09 88 00 01           a2 = 0x10088
   207: 01                       fallthrough
      :                          @14
   208: 33 08 01                 a1 = 0x1
   211: 33 0a 02                 a3 = 0x2
   214: 64 27                    a0 = t0
   216: 50 10 04 6d 10           ra = 4, jump @320
      :                          @15 [@dyn 2]
   221: 82 10 80 00              ra = u64 [sp + 0x80]
   225: 95 11 88 00              sp = sp + 0x88
   229: 32 00                    ret
      :                          @16
   231: 00                       trap
      :                          @17 [@dyn 3]
   232: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   236: 7b 10 80 00              u64 [sp + 0x80] = ra
   240: 64 82                    t0 = a1
   242: 80 88 34                 a1 = u32 [a1 + 0x34]
   245: 84 89 10                 a2 = a1 & 0x10
   248: 52 09 1b                 jump @20 if a2 != 0
      :                          @18
   251: 84 88 20                 a1 = a1 & 0x20
   254: 52 08 5b                 jump @24 if a1 != 0
      :                          @19
   257: 80 77                    a0 = u32 [a0]
   259: 33 08 01                 a1 = 0x1
   262: 64 29                    a2 = t0
   264: 82 10 80 00              ra = u64 [sp + 0x80]
   268: 95 11 88 00              sp = sp + 0x88
   272: 28 13 0f                 jump @310
      :                          @20
   275: 81 7a                    a3 = i32 [a0]
   277: 33 08 81 00              a1 = 0x81
   281: 95 17 7f                 a0 = sp + 0x7f
   284: 33 03 57                 t1 = 0x57
   287: 01                       fallthrough
      :                          @21
   288: 64 8b                    a4 = a1
   290: 8b ac 04                 i32 a5 = a3 >> 0x4
   293: 84 aa 0f                 a3 = a3 & 0xf
   296: 88 a8 0a                 a1 = a3 <u 0xa
   299: 33 09 30                 a2 = 0x30
   302: da 83 09                 a2 = t1 if a1 == 0
   305: be a9 09                 i32 a2 = a2 + a3
   308: 78 79                    u8 [a0] = a2
   310: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   313: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   316: 64 ca                    a3 = a5
   318: 52 0c e2                 jump @21 if a5 != 0
      :                          @22
   321: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   324: 56 27 80 00 71           jump @30 if a0 >u 128
      :                          @23
   329: 9a 8c 81 00              a5 = 0x81 - a1
   333: 64 1b                    a4 = sp
   335: c8 7b 0b                 a4 = a4 + a0
   338: 33 09 88 00 01           a2 = 0x10088
   343: 28 47                    jump @28
      :                          @24
   345: 81 7a                    a3 = i32 [a0]
   347: 33 08 81 00              a1 = 0x81
   351: 95 17 7f                 a0 = sp + 0x7f
   354: 33 03 37                 t1 = 0x37
   357: 01                       fallthrough
      :                          @25
   358: 64 8b                    a4 = a1
   360: 8b ac 04                 i32 a5 = a3 >> 0x4
   363: 84 aa 0f                 a3 = a3 & 0xf
   366: 88 a8 0a                 a1 = a3 <u 0xa
   369: 33 09 30                 a2 = 0x30
   372: da 83 09                 a2 = t1 if a1 == 0
   375: be a9 09                 i32 a2 = a2 + a3
   378: 78 79                    u8 [a0] = a2
   380: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   383: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   386: 64 ca                    a3 = a5
   388: 52 0c e2                 jump @25 if a5 != 0
      :                          @26
   391: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   394: 56 27 80 00 2b           jump @30 if a0 >u 128
      :                          @27
   399: 9a 8c 81 00              a5 = 0x81 - a1
   403: 64 1b                    a4 = sp
   405: c8 7b 0b                 a4 = a4 + a0
   408: 33 09 88 00 01           a2 = 0x10088
   413: 01                       fallthrough
      :                          @28
   414: 33 08 01                 a1 = 0x1
   417: 33 0a 02                 a3 = 0x2
   420: 64 27                    a0 = t0
   422: 50 10 08 9f 0f           ra = 8, jump @320
      :                          @29 [@dyn 4]
   427: 82 10 80 00              ra = u64 [sp + 0x80]
   431: 95 11 88 00              sp = sp + 0x88
   435: 32 00                    ret
      :                          @30
   437: 00                       trap
      :                          @31 [@dyn 5]
   438: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   442: 7b 10 80 00              u64 [sp + 0x80] = ra
   446: 64 82                    t0 = a1
   448: 80 88 34                 a1 = u32 [a1 + 0x34]
   451: 84 89 10                 a2 = a1 & 0x10
   454: 52 09 1b                 jump @34 if a2 != 0
      :                          @32
   457: 84 88 20                 a1 = a1 & 0x20
   460: 52 08 5b                 jump @38 if a1 != 0
      :                          @33
   463: 82 77                    a0 = u64 [a0]
   465: 33 08 01                 a1 = 0x1
   468: 64 29                    a2 = t0
   470: 82 10 80 00              ra = u64 [sp + 0x80]
   474: 95 11 88 00              sp = sp + 0x88
   478: 28 45 0e                 jump @310
      :                          @34
   481: 82 7a                    a3 = u64 [a0]
   483: 33 08 81 00              a1 = 0x81
   487: 95 17 7f                 a0 = sp + 0x7f
   490: 33 03 57                 t1 = 0x57
   493: 01                       fallthrough
      :                          @35
   494: 64 8b                    a4 = a1
   496: 98 ac 04                 a5 = a3 >> 0x4
   499: 84 aa 0f                 a3 = a3 & 0xf
   502: 88 a8 0a                 a1 = a3 <u 0xa
   505: 33 09 30                 a2 = 0x30
   508: da 83 09                 a2 = t1 if a1 == 0
   511: be a9 09                 i32 a2 = a2 + a3
   514: 78 79                    u8 [a0] = a2
   516: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   519: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   522: 64 ca                    a3 = a5
   524: 52 0c e2                 jump @35 if a5 != 0
      :                          @36
   527: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   530: 56 27 80 00 71           jump @44 if a0 >u 128
      :                          @37
   535: 9a 8c 81 00              a5 = 0x81 - a1
   539: 64 1b                    a4 = sp
   541: c8 7b 0b                 a4 = a4 + a0
   544: 33 09 88 00 01           a2 = 0x10088
   549: 28 47                    jump @42
      :                          @38
   551: 82 7a                    a3 = u64 [a0]
   553: 33 08 81 00              a1 = 0x81
   557: 95 17 7f                 a0 = sp + 0x7f
   560: 33 03 37                 t1 = 0x37
   563: 01                       fallthrough
      :                          @39
   564: 64 8b                    a4 = a1
   566: 98 ac 04                 a5 = a3 >> 0x4
   569: 84 aa 0f                 a3 = a3 & 0xf
   572: 88 a8 0a                 a1 = a3 <u 0xa
   575: 33 09 30                 a2 = 0x30
   578: da 83 09                 a2 = t1 if a1 == 0
   581: be a9 09                 i32 a2 = a2 + a3
   584: 78 79                    u8 [a0] = a2
   586: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   589: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   592: 64 ca                    a3 = a5
   594: 52 0c e2                 jump @39 if a5 != 0
      :                          @40
   597: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   600: 56 27 80 00 2b           jump @44 if a0 >u 128
      :                          @41
   605: 9a 8c 81 00              a5 = 0x81 - a1
   609: 64 1b                    a4 = sp
   611: c8 7b 0b                 a4 = a4 + a0
   614: 33 09 88 00 01           a2 = 0x10088
   619: 01                       fallthrough
      :                          @42
   620: 33 08 01                 a1 = 0x1
   623: 33 0a 02                 a3 = 0x2
   626: 64 27                    a0 = t0
   628: 50 10 0c d1 0e           ra = 12, jump @320
      :                          @43 [@dyn 6]
   633: 82 10 80 00              ra = u64 [sp + 0x80]
   637: 95 11 88 00              sp = sp + 0x88
   641: 32 00                    ret
      :                          @44
   643: 00                       trap
      :                          @45 [export #0: 'refine']
   644: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   647: 7b 10 18                 u64 [sp + 0x18] = ra
   650: 7b 15 10                 u64 [sp + 0x10] = s0
   653: 7b 16 08                 u64 [sp + 0x8] = s1
   656: 64 86                    s1 = a1
   658: 64 78                    a1 = a0
   660: 33 09 04                 a2 = 0x4
   663: 33 07 00 00 01           a0 = 0x10000
   668: ac 96 7c                 jump @57 if s1 <u a2
      :                          @46
   671: 95 66 fc                 s1 = s1 + 0xfffffffffffffffc
   674: 51 06 76                 jump @57 if s1 == 0
      :                          @47
   677: 95 87 04                 a0 = a1 + 0x4
   680: 7d 78                    a1 = i8 [a0]
   682: 33 05 01                 s0 = 0x1
   685: 59 08 3a                 jump @55 if a1 >=s 0
      :                          @48
   688: 84 89 ff 00              a2 = a1 & 0xff
   692: 33 05 02                 s0 = 0x2
   695: 53 29 c0 00 2d           jump @54 if a2 <u 192
      :                          @49
   700: 33 05 03                 s0 = 0x3
   703: 53 29 e0 00 25           jump @54 if a2 <u 224
      :                          @50
   708: 33 05 04                 s0 = 0x4
   711: 53 29 f0 00 1d           jump @54 if a2 <u 240
      :                          @51
   716: 33 05 05                 s0 = 0x5
   719: 53 29 f8 00 15           jump @54 if a2 <u 248
      :                          @52
   724: 33 05 06                 s0 = 0x6
   727: 53 29 fc 00 0d           jump @54 if a2 <u 252
      :                          @53
   732: 88 98 fe 00              a1 = a2 <u 0xfe
   736: 9a 85 08                 s0 = 0x8 - a1
   739: 01                       fallthrough
      :                          @54
   740: ac 56 45                 jump @59 if s1 <u s0
      :                          @55
   743: 64 58                    a1 = s0
   745: 7b 17                    u64 [sp] = a0
   747: 50 10 0e ba 12           ra = 14, jump @412
      :                          @56 [@dyn 7]
   752: 64 78                    a1 = a0
   754: e4 56 07                 a0 = maxu(s1, s0)
   757: c9 57 07                 a0 = a0 - s0
   760: d8 87 09                 a2 = a0 <u a1
   763: e4 87 07                 a0 = maxu(a0, a1)
   766: c9 87 07                 a0 = a0 - a1
   769: 88 77 20                 a0 = a0 <u 0x20
   772: d4 79 09                 a2 = a2 | a0
   775: 82 17                    a0 = u64 [sp]
   777: c8 75 05                 s0 = s0 + a0
   780: 94 98                    a1 = 0 if a2 != 0
   782: 33 07 00 00 01           a0 = 0x10000
   787: da 95 07                 a0 = s0 if a2 == 0
   790: 28 05                    jump @58
      :                          @57
   792: 33 08                    a1 = 0
   794: 01                       fallthrough
      :                          @58
   795: 82 10 18                 ra = u64 [sp + 0x18]
   798: 82 15 10                 s0 = u64 [sp + 0x10]
   801: 82 16 08                 s1 = u64 [sp + 0x8]
   804: 95 11 20                 sp = sp + 0x20
   807: 32 00                    ret
      :                          @59
   809: 00                       trap
      :                          @60 [export #1: 'accumulate']
   810: 95 11 e8 fd              sp = sp + 0xfffffffffffffde8
   814: 7b 10 10 02              u64 [sp + 0x210] = ra
   818: 7b 15 08 02              u64 [sp + 0x208] = s0
   822: 7b 16 00 02              u64 [sp + 0x200] = s1
   826: 33 09 08                 a2 = 0x8
   829: ac 98 e8 00              jump @90 if a1 <u a2
      :                          @61
   833: 51 17 fc 27 07           jump @166 if a0 == 4294967292
      :                          @62
   838: 51 07 23 07              jump @167 if a0 == 0
      :                          @63
   842: 95 8a f8                 a3 = a1 + 0xfffffffffffffff8
   845: 95 75 08                 s0 = a0 + 0x8
   848: 51 0a 45                 jump @73 if a3 == 0
      :                          @64
   851: 7d 58                    a1 = i8 [s0]
   853: 33 06 01                 s1 = 0x1
   856: 59 08 40                 jump @74 if a1 >=s 0
      :                          @65
   859: 84 89 ff 00              a2 = a1 & 0xff
   863: 33 06 02                 s1 = 0x2
   866: 53 29 c0 00 2d           jump @71 if a2 <u 192
      :                          @66
   871: 33 06 03                 s1 = 0x3
   874: 53 29 e0 00 25           jump @71 if a2 <u 224
      :                          @67
   879: 33 06 04                 s1 = 0x4
   882: 53 29 f0 00 1d           jump @71 if a2 <u 240
      :                          @68
   887: 33 06 05                 s1 = 0x5
   890: 53 29 f8 00 15           jump @71 if a2 <u 248
      :                          @69
   895: 33 06 06                 s1 = 0x6
   898: 53 29 fc 00 0d           jump @71 if a2 <u 252
      :                          @70
   903: 88 98 fe 00              a1 = a2 <u 0xfe
   907: 9a 86 08                 s1 = 0x8 - a1
   910: 01                       fallthrough
      :                          @71
   911: ae 6a 09                 jump @74 if a3 >=u s1
      :                          @72
   914: 28 93 00                 jump @90
      :                          @73
   917: 33 06                    s1 = 0
   919: 01                       fallthrough
      :                          @74
   920: 7b 16 60                 u64 [sp + 0x60] = s1
   923: 64 57                    a0 = s0
   925: 64 68                    a1 = s1
   927: 64 a6                    s1 = a3
   929: 50 10 10 04 12           ra = 16, jump @412
      :                          @75 [@dyn 8]
   934: 82 1a 60                 a3 = u64 [sp + 0x60]
   937: 51 07 7c                 jump @90 if a0 == 0
      :                          @76
   940: e4 a6 07                 a0 = maxu(s1, a3)
   943: c9 a7 07                 a0 = a0 - a3
   946: 53 17 60 73              jump @90 if a0 <u 96
      :                          @77
   950: c8 5a 08                 a1 = a3 + s0
   953: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   956: 95 87 60                 a0 = a1 + 0x60
   959: 7b 17 60                 u64 [sp + 0x60] = a0
   962: 51 06 4c                 jump @88 if s1 == 0
      :                          @78
   965: 7d 78                    a1 = i8 [a0]
   967: 33 05 01                 s0 = 0x1
   970: 59 08 37                 jump @85 if a1 >=s 0
      :                          @79
   973: 84 89 ff 00              a2 = a1 & 0xff
   977: 33 05 02                 s0 = 0x2
   980: 53 29 c0 00 2d           jump @85 if a2 <u 192
      :                          @80
   985: 33 05 03                 s0 = 0x3
   988: 53 29 e0 00 25           jump @85 if a2 <u 224
      :                          @81
   993: 33 05 04                 s0 = 0x4
   996: 53 29 f0 00 1d           jump @85 if a2 <u 240
      :                          @82
  1001: 33 05 05                 s0 = 0x5
  1004: 53 29 f8 00 15           jump @85 if a2 <u 248
      :                          @83
  1009: 33 05 06                 s0 = 0x6
  1012: 53 29 fc 00 0d           jump @85 if a2 <u 252
      :                          @84
  1017: 88 98 fe 00              a1 = a2 <u 0xfe
  1021: 9a 85 08                 s0 = 0x8 - a1
  1024: 01                       fallthrough
      :                          @85
  1025: ac 56 69 06              jump @168 if s1 <u s0
      :                          @86
  1029: 64 58                    a1 = s0
  1031: 50 10 12 9e 11           ra = 18, jump @412
      :                          @87 [@dyn 9]
  1036: 28 07                    jump @89
      :                          @88
  1038: 33 05                    s0 = 0
  1040: 33 07                    a0 = 0
  1042: 01                       fallthrough
      :                          @89
  1043: e4 56 08                 a1 = maxu(s1, s0)
  1046: c9 58 08                 a1 = a1 - s0
  1049: e4 78 08                 a1 = maxu(a1, a0)
  1052: c9 78 08                 a1 = a1 - a0
  1055: 33 09 21                 a2 = 0x21
  1058: ae 98 1d                 jump @92 if a1 >=u a2
      :                          @90
  1061: 33 08                    a1 = 0
  1063: 33 07 00 00 01           a0 = 0x10000
  1068: 01                       fallthrough
      :                          @91
  1069: 82 10 10 02              ra = u64 [sp + 0x210]
  1073: 82 15 08 02              s0 = u64 [sp + 0x208]
  1077: 82 16 00 02              s1 = u64 [sp + 0x200]
  1081: 95 11 18 02              sp = sp + 0x218
  1085: 32 00                    ret
      :                          @92
  1087: 82 19 60                 a2 = u64 [sp + 0x60]
  1090: c8 95 05                 s0 = s0 + a2
  1093: c8 57 07                 a0 = a0 + s0
  1096: 7c 79 20                 a2 = u8 [a0 + 0x20]
  1099: 51 09 09                 jump @94 if a2 == 0
      :                          @93
  1102: 33 09                    a2 = 0
  1104: 33 08                    a1 = 0
  1106: 28 6e                    jump @107
      :                          @94
  1108: 95 8a df                 a3 = a1 + 0xffffffffffffffdf
  1111: 95 75 21                 s0 = a0 + 0x21
  1114: 51 0a 54                 jump @105 if a3 == 0
      :                          @95
  1117: 7d 57                    a0 = i8 [s0]
  1119: 33 06 01                 s1 = 0x1
  1122: 59 07 37                 jump @102 if a0 >=s 0
      :                          @96
  1125: 84 77 ff 00              a0 = a0 & 0xff
  1129: 33 06 02                 s1 = 0x2
  1132: 53 27 c0 00 2d           jump @102 if a0 <u 192
      :                          @97
  1137: 33 06 03                 s1 = 0x3
  1140: 53 27 e0 00 25           jump @102 if a0 <u 224
      :                          @98
  1145: 33 06 04                 s1 = 0x4
  1148: 53 27 f0 00 1d           jump @102 if a0 <u 240
      :                          @99
  1153: 33 06 05                 s1 = 0x5
  1156: 53 27 f8 00 15           jump @102 if a0 <u 248
      :                          @100
  1161: 33 06 06                 s1 = 0x6
  1164: 53 27 fc 00 0d           jump @102 if a0 <u 252
      :                          @101
  1169: 88 77 fe 00              a0 = a0 <u 0xfe
  1173: 9a 76 08                 s1 = 0x8 - a0
  1176: 01                       fallthrough
      :                          @102
  1177: 7b 1a 60                 u64 [sp + 0x60] = a3
  1180: ac 6a cf 05              jump @169 if a3 <u s1
      :                          @103
  1184: 64 57                    a0 = s0
  1186: 64 68                    a1 = s1
  1188: 50 10 14 01 11           ra = 20, jump @412
      :                          @104 [@dyn 10]
  1193: 82 1a 60                 a3 = u64 [sp + 0x60]
  1196: 28 07                    jump @106
      :                          @105
  1198: 33 06                    s1 = 0
  1200: 33 07                    a0 = 0
  1202: 01                       fallthrough
      :                          @106
  1203: c8 65 08                 a1 = s0 + s1
  1206: e4 6a 09                 a2 = maxu(a3, s1)
  1209: c9 69 09                 a2 = a2 - s1
  1212: e6 79 09                 a2 = minu(a2, a0)
  1215: 01                       fallthrough
      :                          @107
  1216: 48 11 70                 u32 [sp + 112] = 0
  1219: 49 11 68                 u64 [sp + 104] = 0
  1222: 48 21 80 00              u32 [sp + 128] = 0
  1226: 49 11 78                 u64 [sp + 120] = 0
  1229: 46 21 87 00              u8 [sp + 135] = 0
  1233: 48 21 90 00              u32 [sp + 144] = 0
  1237: 49 21 88 00              u64 [sp + 136] = 0
  1241: 80 87                    a0 = u32 [a1]
  1243: c8 98 08                 a1 = a1 + a2
  1246: 7b 17 98 00              u64 [sp + 0x98] = a0
  1250: 80 85 fc                 s0 = u32 [a1 + 0xfffffffffffffffc]
  1253: 7b 15 a0 00              u64 [sp + 0xa0] = s0
  1257: 95 18 87 00              a1 = sp + 0x87
  1261: 33 09 01                 a2 = 0x1
  1264: 95 1a 68                 a3 = sp + 0x68
  1267: 33 0c 0c                 a5 = 0xc
  1270: 33 0b                    a4 = 0
  1272: 0a 02                    ecalli 2 // 'read'
  1274: 95 18 87 00              a1 = sp + 0x87
  1278: 33 09 01                 a2 = 0x1
  1281: 95 1a 78                 a3 = sp + 0x78
  1284: 33 0c 0c                 a5 = 0xc
  1287: 64 57                    a0 = s0
  1289: 33 0b                    a4 = 0
  1291: 0a 02                    ecalli 2 // 'read'
  1293: 81 17 68                 a0 = i32 [sp + 0x68]
  1296: 81 18 6c                 a1 = i32 [sp + 0x6c]
  1299: 33 06 ff ef              s1 = 0xffffffffffffefff
  1303: 7b 16 50                 u64 [sp + 0x50] = s1
  1306: 81 19 7c                 a2 = i32 [sp + 0x7c]
  1309: 7a 17 ac 00              u32 [sp + 0xac] = a0
  1313: 7a 18 b0 00              u32 [sp + 0xb0] = a1
  1317: 81 18 70                 a1 = i32 [sp + 0x70]
  1320: 7b 18 60                 u64 [sp + 0x60] = a1
  1323: 7a 19 b4 00              u32 [sp + 0xb4] = a2
  1327: 81 18 80 00              a1 = i32 [sp + 0x80]
  1331: 7b 18 58                 u64 [sp + 0x58] = a1
  1334: 7a 17 b8 00              u32 [sp + 0xb8] = a0
  1338: 95 17 b8 00              a0 = sp + 0xb8
  1342: 7b 17 c0 00              u64 [sp + 0xc0] = a0
  1346: 33 08 06                 a1 = 0x6
  1349: 7b 18 c8 00              u64 [sp + 0xc8] = a1
  1353: 95 17 98 00              a0 = sp + 0x98
  1357: 7b 17 d0 00              u64 [sp + 0xd0] = a0
  1361: 33 07 0a                 a0 = 0xa
  1364: 7b 17 38                 u64 [sp + 0x38] = a0
  1367: 7b 17 d8 00              u64 [sp + 0xd8] = a0
  1371: 95 17 ac 00              a0 = sp + 0xac
  1375: 7b 17 e0 00              u64 [sp + 0xe0] = a0
  1379: 7b 18 e8 00              u64 [sp + 0xe8] = a1
  1383: 95 17 b0 00              a0 = sp + 0xb0
  1387: 7b 17 f0 00              u64 [sp + 0xf0] = a0
  1391: 7b 18 48                 u64 [sp + 0x48] = a1
  1394: 7b 18 f8 00              u64 [sp + 0xf8] = a1
  1398: 33 07 58 01 01           a0 = 0x10158
  1403: 7b 17 68 01              u64 [sp + 0x168] = a0
  1407: 49 21 70 01 04           u64 [sp + 368] = 0x4
  1412: 49 21 88 01              u64 [sp + 392] = 0
  1416: 95 18 c0 00              a1 = sp + 0xc0
  1420: 7b 18 78 01              u64 [sp + 0x178] = a1
  1424: 49 21 80 01 04           u64 [sp + 384] = 0x4
  1429: 95 17 d0 01              a0 = sp + 0x1d0
  1433: 95 18 68 01              a1 = sp + 0x168
  1437: 50 10 16 06 07           ra = 22, jump @227
      :                          @108 [@dyn 11]
  1442: 82 15 d8 01              s0 = u64 [sp + 0x1d8]
  1446: 82 1b e0 01              a4 = u64 [sp + 0x1e0]
  1450: 82 16 d0 01              s1 = u64 [sp + 0x1d0]
  1454: 33 07 02                 a0 = 0x2
  1457: 33 08                    a1 = 0
  1459: 33 09                    a2 = 0
  1461: 64 5a                    a3 = s0
  1463: 33 00 18                 ra = 0x18
  1466: 0a 64                    ecalli 100 // 'log'
  1468: 01                       fallthrough
      :                          @109 [@dyn 12]
  1469: 82 17 50                 a0 = u64 [sp + 0x50]
  1472: c8 67 07                 a0 = a0 + s1
  1475: 33 08 20 00 03           a1 = 0x30020
  1480: 7b 18 10                 u64 [sp + 0x10] = a1
  1483: 53 27 00 f0 23           jump @115 if a0 <u 4294963200
      :                          @110
  1488: 82 18 10                 a1 = u64 [sp + 0x10]
  1491: 95 87 00 10              a0 = a1 + 0x1000
  1495: 01                       fallthrough
      :                          @111
  1496: 82 78                    a1 = u64 [a0]
  1498: c9 87 09                 a2 = a0 - a1
  1501: ab 59 11                 jump @115 if a2 != s0
      :                          @112
  1504: c9 68 09                 a2 = a1 - s1
  1507: 01                       fallthrough
      :                          @113
  1508: 82 7a                    a3 = u64 [a0]
  1510: ab 8a f2                 jump @111 if a3 != a1
      :                          @114
  1513: 7b 79                    u64 [a0] = a2
  1515: 33 0b                    a4 = 0
  1517: 01                       fallthrough
      :                          @115
  1518: 95 17 b8 00              a0 = sp + 0xb8
  1522: 7b 17 c0 00              u64 [sp + 0xc0] = a0
  1526: 82 18 48                 a1 = u64 [sp + 0x48]
  1529: 7b 18 c8 00              u64 [sp + 0xc8] = a1
  1533: 95 17 a0 00              a0 = sp + 0xa0
  1537: 7b 17 d0 00              u64 [sp + 0xd0] = a0
  1541: 82 17 38                 a0 = u64 [sp + 0x38]
  1544: 7b 17 d8 00              u64 [sp + 0xd8] = a0
  1548: 95 17 b4 00              a0 = sp + 0xb4
  1552: 7b 17 e0 00              u64 [sp + 0xe0] = a0
  1556: 7b 18 e8 00              u64 [sp + 0xe8] = a1
  1560: 7b 17 f0 00              u64 [sp + 0xf0] = a0
  1564: 7b 18 f8 00              u64 [sp + 0xf8] = a1
  1568: 33 07 98 01 01           a0 = 0x10198
  1573: 7b 17 68 01              u64 [sp + 0x168] = a0
  1577: 49 21 70 01 04           u64 [sp + 368] = 0x4
  1582: 49 21 88 01              u64 [sp + 392] = 0
  1586: 95 18 c0 00              a1 = sp + 0xc0
  1590: 7b 18 78 01              u64 [sp + 0x178] = a1
  1594: 49 21 80 01 04           u64 [sp + 384] = 0x4
  1599: 95 17 d0 01              a0 = sp + 0x1d0
  1603: 95 18 68 01              a1 = sp + 0x168
  1607: 50 10 1a 5c 06           ra = 26, jump @227
      :                          @116 [@dyn 13]
  1612: 82 15 d8 01              s0 = u64 [sp + 0x1d8]
  1616: 82 1b e0 01              a4 = u64 [sp + 0x1e0]
  1620: 82 16 d0 01              s1 = u64 [sp + 0x1d0]
  1624: 33 07 02                 a0 = 0x2
  1627: 33 08                    a1 = 0
  1629: 33 09                    a2 = 0
  1631: 64 5a                    a3 = s0
  1633: 33 00 1c                 ra = 0x1c
  1636: 0a 64                    ecalli 100 // 'log'
  1638: 01                       fallthrough
      :                          @117 [@dyn 14]
  1639: 82 17 50                 a0 = u64 [sp + 0x50]
  1642: c8 67 07                 a0 = a0 + s1
  1645: 53 27 00 f0 23           jump @123 if a0 <u 4294963200
      :                          @118
  1650: 82 18 10                 a1 = u64 [sp + 0x10]
  1653: 95 87 00 10              a0 = a1 + 0x1000
  1657: 01                       fallthrough
      :                          @119
  1658: 82 78                    a1 = u64 [a0]
  1660: c9 87 09                 a2 = a0 - a1
  1663: ab 59 11                 jump @123 if a2 != s0
      :                          @120
  1666: c9 68 09                 a2 = a1 - s1
  1669: 01                       fallthrough
      :                          @121
  1670: 82 7a                    a3 = u64 [a0]
  1672: ab 8a f2                 jump @119 if a3 != a1
      :                          @122
  1675: 7b 79                    u64 [a0] = a2
  1677: 33 0b                    a4 = 0
  1679: 01                       fallthrough
      :                          @123
  1680: 81 17 b0 00              a0 = i32 [sp + 0xb0]
  1684: 81 18 b4 00              a1 = i32 [sp + 0xb4]
  1688: be 78 05                 i32 s0 = a1 + a0
  1691: 7a 15 bc 00              u32 [sp + 0xbc] = s0
  1695: 82 17 60                 a0 = u64 [sp + 0x60]
  1698: 82 16 58                 s1 = u64 [sp + 0x58]
  1701: be 76 06                 i32 s1 = s1 + a0
  1704: 95 17 c0 00              a0 = sp + 0xc0
  1708: 33 09 80 00              a2 = 0x80
  1712: 33 08                    a1 = 0
  1714: 50 10 1e 12 09           ra = 30, jump @295
      :                          @124 [@dyn 15]
  1719: 80 17 b8 00              a0 = u32 [sp + 0xb8]
  1723: 7b 17 40 01              u64 [sp + 0x140] = a0
  1727: 97 78 01                 a1 = a0 << 0x1
  1730: 95 88 01                 a1 = a1 + 0x1
  1733: 97 88 20                 a1 = a1 << 0x20
  1736: 98 88 20                 a1 = a1 >> 0x20
  1739: 7b 18 48 01              u64 [sp + 0x148] = a1
  1743: 49 21 50 01 64           u64 [sp + 336] = 0x64
  1748: 48 21 58 01              u32 [sp + 344] = 0
  1752: 51 07 23 02              jump @148 if a0 == 0
      :                          @125
  1756: 7b 16                    u64 [sp] = s1
  1758: 7b 15 08                 u64 [sp + 0x8] = s0
  1761: 33 0a                    a3 = 0
  1763: 33 0b                    a4 = 0
  1765: 14 08 ab aa aa aa 00 00 00 00 a1 = 0xaaaaaaab
  1775: ca 87 08                 a1 = a0 * a1
  1778: 98 88 21                 a1 = a1 >> 0x21
  1781: 97 89 01                 a2 = a1 << 0x1
  1784: bf 87 08                 i32 a1 = a0 - a1
  1787: bf 98 08                 i32 a1 = a1 - a2
  1790: 83 89 ff                 i32 a2 = a1 + 0xffffffffffffffff
  1793: 7b 19 28                 u64 [sp + 0x28] = a2
  1796: 86 88 02                 a1 = a1 | 0x2
  1799: 7b 18 20                 u64 [sp + 0x20] = a1
  1802: 33 08 28 02 01           a1 = 0x10228
  1807: 7b 18 30                 u64 [sp + 0x30] = a1
  1810: 82 18 10                 a1 = u64 [sp + 0x10]
  1813: 95 86 00 10              s1 = a1 + 0x1000
  1817: 83 77                    i32 a0 = a0 + 0
  1819: 7b 17 18                 u64 [sp + 0x18] = a0
  1822: 28 1a                    jump @128
      :                          @126
  1824: 82 1a 60                 a3 = u64 [sp + 0x60]
  1827: 83 aa 01                 i32 a3 = a3 + 0x1
  1830: 7a 1a 58 01              u32 [sp + 0x158] = a3
  1834: 82 1b 58                 a4 = u64 [sp + 0x58]
  1837: 01                       fallthrough
      :                          @127
  1838: 83 bb 01                 i32 a4 = a4 + 0x1
  1841: 82 17 18                 a0 = u64 [sp + 0x18]
  1844: aa 7b bd 01              jump @147 if a4 == a0
      :                          @128
  1848: 7a 1b 5c 01              u32 [sp + 0x15c] = a4
  1852: 82 17 20                 a0 = u64 [sp + 0x20]
  1855: 7b 1b 58                 u64 [sp + 0x58] = a4
  1858: 52 17 02 d8 00           jump @137 if a0 != 2
      :                          @129
  1863: 7b 1a 60                 u64 [sp + 0x60] = a3
  1866: 82 17 98 00              a0 = u64 [sp + 0x98]
  1870: 82 18 40 01              a1 = u64 [sp + 0x140]
  1874: 82 19 50 01              a2 = u64 [sp + 0x150]
  1878: 95 1a c0 00              a3 = sp + 0xc0
  1882: 0a 0b                    ecalli 11 // 'transfer'
  1884: 7b 17 60 01              u64 [sp + 0x160] = a0
  1888: 95 17 5c 01              a0 = sp + 0x15c
  1892: 7b 17 68 01              u64 [sp + 0x168] = a0
  1896: 82 17 48                 a0 = u64 [sp + 0x48]
  1899: 7b 17 70 01              u64 [sp + 0x170] = a0
  1903: 95 17 98 00              a0 = sp + 0x98
  1907: 7b 17 78 01              u64 [sp + 0x178] = a0
  1911: 82 17 38                 a0 = u64 [sp + 0x38]
  1914: 7b 17 80 01              u64 [sp + 0x180] = a0
  1918: 95 18 40 01              a1 = sp + 0x140
  1922: 7b 18 88 01              u64 [sp + 0x188] = a1
  1926: 7b 17 90 01              u64 [sp + 0x190] = a0
  1930: 95 18 50 01              a1 = sp + 0x150
  1934: 7b 18 98 01              u64 [sp + 0x198] = a1
  1938: 7b 17 a0 01              u64 [sp + 0x1a0] = a0
  1942: 95 18 60 01              a1 = sp + 0x160
  1946: 7b 18 a8 01              u64 [sp + 0x1a8] = a1
  1950: 7b 17 b0 01              u64 [sp + 0x1b0] = a0
  1954: 82 17 30                 a0 = u64 [sp + 0x30]
  1957: 7b 17 d0 01              u64 [sp + 0x1d0] = a0
  1961: 49 21 d8 01 05           u64 [sp + 472] = 0x5
  1966: 49 21 f0 01              u64 [sp + 496] = 0
  1970: 95 18 68 01              a1 = sp + 0x168
  1974: 7b 18 e0 01              u64 [sp + 0x1e0] = a1
  1978: 49 21 e8 01 05           u64 [sp + 488] = 0x5
  1983: 95 17 b8 01              a0 = sp + 0x1b8
  1987: 95 18 d0 01              a1 = sp + 0x1d0
  1991: 50 10 20 dc 04           ra = 32, jump @227
      :                          @130 [@dyn 16]
  1996: 82 15 c0 01              s0 = u64 [sp + 0x1c0]
  2000: 82 1b c8 01              a4 = u64 [sp + 0x1c8]
  2004: 82 17 b8 01              a0 = u64 [sp + 0x1b8]
  2008: 7b 17 40                 u64 [sp + 0x40] = a0
  2011: 33 07 02                 a0 = 0x2
  2014: 33 08                    a1 = 0
  2016: 33 09                    a2 = 0
  2018: 64 5a                    a3 = s0
  2020: 33 00 22                 ra = 0x22
  2023: 0a 64                    ecalli 100 // 'log'
  2025: 01                       fallthrough
      :                          @131 [@dyn 17]
  2026: 82 1b 40                 a4 = u64 [sp + 0x40]
  2029: 82 17 50                 a0 = u64 [sp + 0x50]
  2032: c8 b7 07                 a0 = a0 + a4
  2035: 53 27 00 f0 19           jump @136 if a0 <u 4294963200
      :                          @132
  2040: 82 67                    a0 = u64 [s1]
  2042: c9 76 08                 a1 = s1 - a0
  2045: ab 58 0f                 jump @136 if a1 != s0
      :                          @133
  2048: c9 b7 08                 a1 = a0 - a4
  2051: 01                       fallthrough
      :                          @134
  2052: 82 69                    a2 = u64 [s1]
  2054: ab 79 f2                 jump @132 if a2 != a0
      :                          @135
  2057: 7b 68                    u64 [s1] = a1
  2059: 01                       fallthrough
      :                          @136
  2060: 82 1a 60                 a3 = u64 [sp + 0x60]
  2063: 83 aa 01                 i32 a3 = a3 + 0x1
  2066: 7a 1a 58 01              u32 [sp + 0x158] = a3
  2070: 82 1b 58                 a4 = u64 [sp + 0x58]
  2073: 01                       fallthrough
      :                          @137
  2074: 82 17 28                 a0 = u64 [sp + 0x28]
  2077: 55 17 02 11 ff           jump @127 if a0 >=u 2
      :                          @138
  2082: 7b 1a 60                 u64 [sp + 0x60] = a3
  2085: 82 17 98 00              a0 = u64 [sp + 0x98]
  2089: 82 18 48 01              a1 = u64 [sp + 0x148]
  2093: 82 19 50 01              a2 = u64 [sp + 0x150]
  2097: 95 1a c0 00              a3 = sp + 0xc0
  2101: 0a 0b                    ecalli 11 // 'transfer'
  2103: 7b 17 60 01              u64 [sp + 0x160] = a0
  2107: 95 17 5c 01              a0 = sp + 0x15c
  2111: 7b 17 68 01              u64 [sp + 0x168] = a0
  2115: 82 17 48                 a0 = u64 [sp + 0x48]
  2118: 7b 17 70 01              u64 [sp + 0x170] = a0
  2122: 95 17 a0 00              a0 = sp + 0xa0
  2126: 7b 17 78 01              u64 [sp + 0x178] = a0
  2130: 82 17 38                 a0 = u64 [sp + 0x38]
  2133: 7b 17 80 01              u64 [sp + 0x180] = a0
  2137: 95 18 48 01              a1 = sp + 0x148
  2141: 7b 18 88 01              u64 [sp + 0x188] = a1
  2145: 7b 17 90 01              u64 [sp + 0x190] = a0
  2149: 95 18 50 01              a1 = sp + 0x150
  2153: 7b 18 98 01              u64 [sp + 0x198] = a1
  2157: 7b 17 a0 01              u64 [sp + 0x1a0] = a0
  2161: 95 18 60 01              a1 = sp + 0x160
  2165: 7b 18 a8 01              u64 [sp + 0x1a8] = a1
  2169: 7b 17 b0 01              u64 [sp + 0x1b0] = a0
  2173: 82 17 30                 a0 = u64 [sp + 0x30]
  2176: 7b 17 d0 01              u64 [sp + 0x1d0] = a0
  2180: 49 21 d8 01 05           u64 [sp + 472] = 0x5
  2185: 49 21 f0 01              u64 [sp + 496] = 0
  2189: 95 18 68 01              a1 = sp + 0x168
  2193: 7b 18 e0 01              u64 [sp + 0x1e0] = a1
  2197: 49 21 e8 01 05           u64 [sp + 488] = 0x5
  2202: 95 17 b8 01              a0 = sp + 0x1b8
  2206: 95 18 d0 01              a1 = sp + 0x1d0
  2210: 50 10 24 01 04           ra = 36, jump @227
      :                          @139 [@dyn 18]
  2215: 82 15 c0 01              s0 = u64 [sp + 0x1c0]
  2219: 82 1b c8 01              a4 = u64 [sp + 0x1c8]
  2223: 82 17 b8 01              a0 = u64 [sp + 0x1b8]
  2227: 7b 17 40                 u64 [sp + 0x40] = a0
  2230: 33 07 02                 a0 = 0x2
  2233: 33 08                    a1 = 0
  2235: 33 09                    a2 = 0
  2237: 64 5a                    a3 = s0
  2239: 33 00 26                 ra = 0x26
  2242: 0a 64                    ecalli 100 // 'log'
  2244: 01                       fallthrough
      :                          @140 [@dyn 19]
  2245: 82 1b 40                 a4 = u64 [sp + 0x40]
  2248: 82 17 50                 a0 = u64 [sp + 0x50]
  2251: c8 b7 07                 a0 = a0 + a4
  2254: 53 27 00 f0 52 fe        jump @126 if a0 <u 4294963200
      :                          @141
  2260: 82 67                    a0 = u64 [s1]
  2262: c9 76 08                 a1 = s1 - a0
  2265: ab 58 47 fe              jump @126 if a1 != s0
      :                          @142
  2269: c9 b7 08                 a1 = a0 - a4
  2272: 01                       fallthrough
      :                          @143
  2273: 82 69                    a2 = u64 [s1]
  2275: ab 79 f1                 jump @141 if a2 != a0
      :                          @144
  2278: 7b 68                    u64 [s1] = a1
  2280: 33 0a                    a3 = 0
  2282: 01                       fallthrough
      :                          @145
  2283: ab 79 e9                 jump @141 if a2 != a0
      :                          @146
  2286: 28 32 fe                 jump @126
      :                          @147
  2289: 81 17 b8 00              a0 = i32 [sp + 0xb8]
  2293: 82 15 08                 s0 = u64 [sp + 0x8]
  2296: 82 16                    s1 = u64 [sp]
  2298: 01                       fallthrough
      :                          @148
  2299: 7a 17 88 00              u32 [sp + 0x88] = a0
  2303: 7a 15 8c 00              u32 [sp + 0x8c] = s0
  2307: 7a 16 90 00              u32 [sp + 0x90] = s1
  2311: 95 17 b8 00              a0 = sp + 0xb8
  2315: 7b 17 d0 01              u64 [sp + 0x1d0] = a0
  2319: 82 17 48                 a0 = u64 [sp + 0x48]
  2322: 7b 17 d8 01              u64 [sp + 0x1d8] = a0
  2326: 95 18 bc 00              a1 = sp + 0xbc
  2330: 7b 18 e0 01              u64 [sp + 0x1e0] = a1
  2334: 7b 17 e8 01              u64 [sp + 0x1e8] = a0
  2338: 33 07 d8 01 01           a0 = 0x101d8
  2343: 7b 17 68 01              u64 [sp + 0x168] = a0
  2347: 49 21 70 01 02           u64 [sp + 368] = 0x2
  2352: 49 21 88 01              u64 [sp + 392] = 0
  2356: 95 18 d0 01              a1 = sp + 0x1d0
  2360: 7b 18 78 01              u64 [sp + 0x178] = a1
  2364: 49 21 80 01 02           u64 [sp + 384] = 0x2
  2369: 95 17 b8 01              a0 = sp + 0x1b8
  2373: 95 18 68 01              a1 = sp + 0x168
  2377: 50 10 28 5a 03           ra = 40, jump @227
      :                          @149 [@dyn 20]
  2382: 82 15 c0 01              s0 = u64 [sp + 0x1c0]
  2386: 82 1b c8 01              a4 = u64 [sp + 0x1c8]
  2390: 82 16 b8 01              s1 = u64 [sp + 0x1b8]
  2394: 33 07 02                 a0 = 0x2
  2397: 33 08                    a1 = 0
  2399: 33 09                    a2 = 0
  2401: 64 5a                    a3 = s0
  2403: 33 00 2a                 ra = 0x2a
  2406: 0a 64                    ecalli 100 // 'log'
  2408: 01                       fallthrough
      :                          @150 [@dyn 21]
  2409: 82 17 50                 a0 = u64 [sp + 0x50]
  2412: c8 67 07                 a0 = a0 + s1
  2415: 53 27 00 f0 21           jump @156 if a0 <u 4294963200
      :                          @151
  2420: 82 18 10                 a1 = u64 [sp + 0x10]
  2423: 95 87 00 10              a0 = a1 + 0x1000
  2427: 01                       fallthrough
      :                          @152
  2428: 82 78                    a1 = u64 [a0]
  2430: c9 87 09                 a2 = a0 - a1
  2433: ab 59 0f                 jump @156 if a2 != s0
      :                          @153
  2436: c9 68 09                 a2 = a1 - s1
  2439: 01                       fallthrough
      :                          @154
  2440: 82 7a                    a3 = u64 [a0]
  2442: ab 8a f2                 jump @152 if a3 != a1
      :                          @155
  2445: 7b 79                    u64 [a0] = a2
  2447: 01                       fallthrough
      :                          @156
  2448: 95 17 87 00              a0 = sp + 0x87
  2452: 33 08 01                 a1 = 0x1
  2455: 95 19 88 00              a2 = sp + 0x88
  2459: 33 0a 0c                 a3 = 0xc
  2462: 0a 03                    ecalli 3 // 'write'
  2464: 95 17 b8 00              a0 = sp + 0xb8
  2468: 7b 17 68 01              u64 [sp + 0x168] = a0
  2472: 82 17 48                 a0 = u64 [sp + 0x48]
  2475: 7b 17 70 01              u64 [sp + 0x170] = a0
  2479: 95 18 bc 00              a1 = sp + 0xbc
  2483: 7b 18 78 01              u64 [sp + 0x178] = a1
  2487: 7b 17 80 01              u64 [sp + 0x180] = a0
  2491: 95 17 58 01              a0 = sp + 0x158
  2495: 7b 17 88 01              u64 [sp + 0x188] = a0
  2499: 33 07 02                 a0 = 0x2
  2502: 7b 17 90 01              u64 [sp + 0x190] = a0
  2506: 33 07 f8 01 01           a0 = 0x101f8
  2511: 7b 17 d0 01              u64 [sp + 0x1d0] = a0
  2515: 49 21 d8 01 03           u64 [sp + 472] = 0x3
  2520: 49 21 f0 01              u64 [sp + 496] = 0
  2524: 95 18 68 01              a1 = sp + 0x168
  2528: 7b 18 e0 01              u64 [sp + 0x1e0] = a1
  2532: 49 21 e8 01 03           u64 [sp + 488] = 0x3
  2537: 95 17 b8 01              a0 = sp + 0x1b8
  2541: 95 18 d0 01              a1 = sp + 0x1d0
  2545: 50 10 2c b2 02           ra = 44, jump @227
      :                          @157 [@dyn 22]
  2550: 82 15 c0 01              s0 = u64 [sp + 0x1c0]
  2554: 82 1b c8 01              a4 = u64 [sp + 0x1c8]
  2558: 82 16 b8 01              s1 = u64 [sp + 0x1b8]
  2562: 33 07 02                 a0 = 0x2
  2565: 33 08                    a1 = 0
  2567: 33 09                    a2 = 0
  2569: 64 5a                    a3 = s0
  2571: 33 00 2e                 ra = 0x2e
  2574: 0a 64                    ecalli 100 // 'log'
  2576: 01                       fallthrough
      :                          @158 [@dyn 23]
  2577: 82 17 50                 a0 = u64 [sp + 0x50]
  2580: c8 67 07                 a0 = a0 + s1
  2583: 53 27 00 f0 23           jump @164 if a0 <u 4294963200
      :                          @159
  2588: 82 18 10                 a1 = u64 [sp + 0x10]
  2591: 95 87 00 10              a0 = a1 + 0x1000
  2595: 01                       fallthrough
      :                          @160
  2596: 82 78                    a1 = u64 [a0]
  2598: c9 87 09                 a2 = a0 - a1
  2601: ab 59 11                 jump @164 if a2 != s0
      :                          @161
  2604: c9 68 09                 a2 = a1 - s1
  2607: 01                       fallthrough
      :                          @162
  2608: 82 7a                    a3 = u64 [a0]
  2610: ab 8a f2                 jump @160 if a3 != a1
      :                          @163
  2613: 7b 79                    u64 [a0] = a2
  2615: 33 0b                    a4 = 0
  2617: 01                       fallthrough
      :                          @164
  2618: 95 17 74 01              a0 = sp + 0x174
  2622: 33 09 14                 a2 = 0x14
  2625: 33 08                    a1 = 0
  2627: 50 10 30 81 05           ra = 48, jump @295
      :                          @165 [@dyn 24]
  2632: 82 17 88 00              a0 = u64 [sp + 0x88]
  2636: 81 18 90 00              a1 = i32 [sp + 0x90]
  2640: 7b 17 68 01              u64 [sp + 0x168] = a0
  2644: 7a 18 70 01              u32 [sp + 0x170] = a1
  2648: 95 17 68 01              a0 = sp + 0x168
  2652: 0a 10                    ecalli 16 // 'oyield'
  2654: 95 17 68 01              a0 = sp + 0x168
  2658: 33 08 20                 a1 = 0x20
  2661: 28 c8 f9                 jump @91
      :                          @166
  2664: 00                       trap
      :                          @167
  2665: 00                       trap
      :                          @168
  2666: 00                       trap
      :                          @169
  2667: 00                       trap
      :                          @170 [export #2: 'on_transfer']
  2668: 33 07 00 00 01           a0 = 0x10000
  2673: 33 08                    a1 = 0
  2675: 32 00                    ret
      :                          @171
  2677: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  2680: 7b 10 40                 u64 [sp + 0x40] = ra
  2683: 7b 15 38                 u64 [sp + 0x38] = s0
  2686: 7b 16 30                 u64 [sp + 0x30] = s1
  2689: c8 89 09                 a2 = a2 + a1
  2692: ac 89 52                 jump @179 if a2 <u a1
      :                          @172
  2695: 64 75                    s0 = a0
  2697: 82 77                    a0 = u64 [a0]
  2699: 97 78 01                 a1 = a0 << 0x1
  2702: 33 0a 08                 a3 = 0x8
  2705: e4 a9 09                 a2 = maxu(a2, a3)
  2708: e4 98 06                 s1 = maxu(a1, a2)
  2711: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  2714: 98 88 3f                 a1 = a1 >> 0x3f
  2717: 51 07 12                 jump @174 if a0 == 0
      :                          @173
  2720: 82 59 08                 a2 = u64 [s0 + 0x8]
  2723: 7b 19 18                 u64 [sp + 0x18] = a2
  2726: 49 11 20 01              u64 [sp + 32] = 0x1
  2730: 7b 17 28                 u64 [sp + 0x28] = a0
  2733: 28 06                    jump @175
      :                          @174
  2735: 49 11 20                 u64 [sp + 32] = 0
  2738: 01                       fallthrough
      :                          @175
  2739: 64 17                    a0 = sp
  2741: 95 1a 18                 a3 = sp + 0x18
  2744: 64 69                    a2 = s1
  2746: 50 10 32 32              ra = 50, jump @183
      :                          @176 [@dyn 25]
  2750: 82 18                    a1 = u64 [sp]
  2752: 82 17 08                 a0 = u64 [sp + 0x8]
  2755: 51 08 14                 jump @180 if a1 == 0
      :                          @177
  2758: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  2768: aa 87 0d                 jump @181 if a0 == a1
      :                          @178
  2771: 52 07 18                 jump @182 if a0 != 0
      :                          @179
  2774: 00                       trap
      :                          @180
  2775: 7b 57 08                 u64 [s0 + 0x8] = a0
  2778: 7b 56                    u64 [s0] = s1
  2780: 01                       fallthrough
      :                          @181
  2781: 82 10 40                 ra = u64 [sp + 0x40]
  2784: 82 15 38                 s0 = u64 [sp + 0x38]
  2787: 82 16 30                 s1 = u64 [sp + 0x30]
  2790: 95 11 48                 sp = sp + 0x48
  2793: 32 00                    ret
      :                          @182
  2795: 00                       trap
      :                          @183
  2796: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  2799: 7b 10 30                 u64 [sp + 0x30] = ra
  2802: 7b 15 28                 u64 [sp + 0x28] = s0
  2805: 7b 16 20                 u64 [sp + 0x20] = s1
  2808: 64 96                    s1 = a2
  2810: 64 73                    t1 = a0
  2812: 51 08 6e                 jump @193 if a1 == 0
      :                          @184
  2815: 82 a7 08                 a0 = u64 [a3 + 0x8]
  2818: 51 07 71                 jump @194 if a0 == 0
      :                          @185
  2821: 82 a9 10                 a2 = u64 [a3 + 0x10]
  2824: 51 09 9e 00              jump @201 if a2 == 0
      :                          @186
  2828: 82 a8                    a1 = u64 [a3]
  2830: 33 02 00 10              t0 = 0x1000
  2834: 33 04 20 00 03           t2 = 0x30020
  2839: c8 24 07                 a0 = t2 + t0
  2842: 01                       fallthrough
      :                          @187
  2843: 82 7a                    a3 = u64 [a0]
  2845: c8 6a 05                 s0 = a3 + s1
  2848: ac a5 c2 00              jump @207 if s0 <u a3
      :                          @188
  2852: 95 5b 01                 a4 = s0 + 0x1
  2855: 88 bc 01                 a5 = a4 <u 0x1
  2858: d8 b2 0b                 a4 = t0 <u a4
  2861: d4 cb 0b                 a4 = a4 | a5
  2864: 52 0b b2 00              jump @207 if a4 != 0
      :                          @189
  2868: 82 7b                    a4 = u64 [a0]
  2870: ab ab e5                 jump @187 if a4 != a3
      :                          @190
  2873: 7b 75                    u64 [a0] = s0
  2875: 33 0c                    a5 = 0
  2877: 7b 13 18                 u64 [sp + 0x18] = t1
  2880: c9 54 07                 a0 = t2 - s0
  2883: 95 77 00 10              a0 = a0 + 0x1000
  2887: 7b 17 10                 u64 [sp + 0x10] = a0
  2890: 7b 18 08                 u64 [sp + 0x8] = a1
  2893: 64 95                    s0 = a2
  2895: 7b 14                    u64 [sp] = t2
  2897: 50 10 34 c1 03           ra = 52, jump @277
      :                          @191 [@dyn 26]
  2902: 54 25 00 10 94 00        jump @208 if s0 <=u 4096
      :                          @192
  2908: 82 13 18                 t1 = u64 [sp + 0x18]
  2911: 82 18 10                 a1 = u64 [sp + 0x10]
  2914: 33 07                    a0 = 0
  2916: 7b 38 08                 u64 [t1 + 0x8] = a1
  2919: 28 b1 00                 jump @214
      :                          @193
  2922: 49 13 08                 u64 [t1 + 8] = 0
  2925: 33 07 01                 a0 = 0x1
  2928: 28 a8 00                 jump @214
      :                          @194
  2931: 33 07 00 10              a0 = 0x1000
  2935: 33 02 20 00 03           t0 = 0x30020
  2940: c8 72 09                 a2 = t0 + a0
  2943: 01                       fallthrough
      :                          @195
  2944: 82 9b                    a4 = u64 [a2]
  2946: c8 6b 0a                 a3 = a4 + s1
  2949: ac ba 5d                 jump @207 if a3 <u a4
      :                          @196
  2952: 95 ac 01                 a5 = a3 + 0x1
  2955: 88 c8 01                 a1 = a5 <u 0x1
  2958: d8 c7 0c                 a5 = a0 <u a5
  2961: d4 c8 08                 a1 = a1 | a5
  2964: 52 08 4e                 jump @207 if a1 != 0
      :                          @197
  2967: 82 98                    a1 = u64 [a2]
  2969: ab b8 e7                 jump @195 if a1 != a4
      :                          @198
  2972: 7b 9a                    u64 [a2] = a3
  2974: 33 0c                    a5 = 0
  2976: 01                       fallthrough
      :                          @199
  2977: ab b8 df                 jump @195 if a1 != a4
      :                          @200
  2980: 28 30                    jump @206
      :                          @201
  2982: 33 07 00 10              a0 = 0x1000
  2986: 33 02 20 00 03           t0 = 0x30020
  2991: c8 72 09                 a2 = t0 + a0
  2994: 01                       fallthrough
      :                          @202
  2995: 82 9b                    a4 = u64 [a2]
  2997: c8 6b 0a                 a3 = a4 + s1
  3000: ac ba 2a                 jump @207 if a3 <u a4
      :                          @203
  3003: 95 ac 01                 a5 = a3 + 0x1
  3006: 88 c8 01                 a1 = a5 <u 0x1
  3009: d8 c7 0c                 a5 = a0 <u a5
  3012: d4 c8 08                 a1 = a1 | a5
  3015: 52 08 1b                 jump @207 if a1 != 0
      :                          @204
  3018: 82 98                    a1 = u64 [a2]
  3020: ab b8 e7                 jump @202 if a1 != a4
      :                          @205
  3023: 7b 9a                    u64 [a2] = a3
  3025: 33 0c                    a5 = 0
  3027: 01                       fallthrough
      :                          @206
  3028: c9 a2 07                 a0 = t0 - a3
  3031: 95 78 00 10              a1 = a0 + 0x1000
  3035: 33 07                    a0 = 0
  3037: 7b 38 08                 u64 [t1 + 0x8] = a1
  3040: 28 38                    jump @214
      :                          @207
  3042: 33 07 01                 a0 = 0x1
  3045: 7b 37 08                 u64 [t1 + 0x8] = a0
  3048: 28 30                    jump @214
      :                          @208
  3050: 64 5c                    a5 = s0
  3052: 82 18                    a1 = u64 [sp]
  3054: 95 87 00 10              a0 = a1 + 0x1000
  3058: 82 13 18                 t1 = u64 [sp + 0x18]
  3061: 82 15 08                 s0 = u64 [sp + 0x8]
  3064: 01                       fallthrough
      :                          @209
  3065: 82 78                    a1 = u64 [a0]
  3067: c9 87 09                 a2 = a0 - a1
  3070: ab 59 11                 jump @213 if a2 != s0
      :                          @210
  3073: c9 c8 09                 a2 = a1 - a5
  3076: 01                       fallthrough
      :                          @211
  3077: 82 7a                    a3 = u64 [a0]
  3079: ab 8a f2                 jump @209 if a3 != a1
      :                          @212
  3082: 7b 79                    u64 [a0] = a2
  3084: 33 0b                    a4 = 0
  3086: 01                       fallthrough
      :                          @213
  3087: 82 18 10                 a1 = u64 [sp + 0x10]
  3090: 33 07                    a0 = 0
  3092: 7b 38 08                 u64 [t1 + 0x8] = a1
  3095: 01                       fallthrough
      :                          @214
  3096: 7b 36 10                 u64 [t1 + 0x10] = s1
  3099: 7b 37                    u64 [t1] = a0
  3101: 82 10 30                 ra = u64 [sp + 0x30]
  3104: 82 15 28                 s0 = u64 [sp + 0x28]
  3107: 82 16 20                 s1 = u64 [sp + 0x20]
  3110: 95 11 38                 sp = sp + 0x38
  3113: 32 00                    ret
      :                          @215
  3115: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  3118: 7b 10 40                 u64 [sp + 0x40] = ra
  3121: 7b 15 38                 u64 [sp + 0x38] = s0
  3124: 7b 16 30                 u64 [sp + 0x30] = s1
  3127: 95 88 01                 a1 = a1 + 0x1
  3130: 51 08 53                 jump @223 if a1 == 0
      :                          @216
  3133: 64 75                    s0 = a0
  3135: 82 77                    a0 = u64 [a0]
  3137: 97 79 01                 a2 = a0 << 0x1
  3140: 33 0a 08                 a3 = 0x8
  3143: e4 a8 08                 a1 = maxu(a1, a3)
  3146: e4 89 06                 s1 = maxu(a2, a1)
  3149: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  3152: 98 88 3f                 a1 = a1 >> 0x3f
  3155: 51 07 12                 jump @218 if a0 == 0
      :                          @217
  3158: 82 59 08                 a2 = u64 [s0 + 0x8]
  3161: 7b 19 18                 u64 [sp + 0x18] = a2
  3164: 49 11 20 01              u64 [sp + 32] = 0x1
  3168: 7b 17 28                 u64 [sp + 0x28] = a0
  3171: 28 06                    jump @219
      :                          @218
  3173: 49 11 20                 u64 [sp + 32] = 0
  3176: 01                       fallthrough
      :                          @219
  3177: 64 17                    a0 = sp
  3179: 95 1a 18                 a3 = sp + 0x18
  3182: 64 69                    a2 = s1
  3184: 50 10 36 7c fe           ra = 54, jump @183
      :                          @220 [@dyn 27]
  3189: 82 18                    a1 = u64 [sp]
  3191: 82 17 08                 a0 = u64 [sp + 0x8]
  3194: 51 08 14                 jump @224 if a1 == 0
      :                          @221
  3197: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  3207: aa 87 0d                 jump @225 if a0 == a1
      :                          @222
  3210: 52 07 18                 jump @226 if a0 != 0
      :                          @223
  3213: 00                       trap
      :                          @224
  3214: 7b 57 08                 u64 [s0 + 0x8] = a0
  3217: 7b 56                    u64 [s0] = s1
  3219: 01                       fallthrough
      :                          @225
  3220: 82 10 40                 ra = u64 [sp + 0x40]
  3223: 82 15 38                 s0 = u64 [sp + 0x38]
  3226: 82 16 30                 s1 = u64 [sp + 0x30]
  3229: 95 11 48                 sp = sp + 0x48
  3232: 32 00                    ret
      :                          @226
  3234: 00                       trap
      :                          @227
  3235: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  3238: 7b 10 30                 u64 [sp + 0x30] = ra
  3241: 7b 15 28                 u64 [sp + 0x28] = s0
  3244: 7b 16 20                 u64 [sp + 0x20] = s1
  3247: 64 89                    a2 = a1
  3249: 82 8a 08                 a3 = u64 [a1 + 0x8]
  3252: 64 75                    s0 = a0
  3254: 51 0a 35                 jump @232 if a3 == 0
      :                          @228
  3257: 82 98                    a1 = u64 [a2]
  3259: 33 07                    a0 = 0
  3261: 95 8b 08                 a4 = a1 + 0x8
  3264: 01                       fallthrough
      :                          @229
  3265: 82 bc                    a5 = u64 [a4]
  3267: c8 c7 07                 a0 = a0 + a5
  3270: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  3273: 95 bb 10                 a4 = a4 + 0x10
  3276: 52 0a f5                 jump @229 if a3 != 0
      :                          @230
  3279: 82 9a 18                 a3 = u64 [a2 + 0x18]
  3282: 51 0a 24                 jump @234 if a3 == 0
      :                          @231
  3285: 82 88 08                 a1 = u64 [a1 + 0x8]
  3288: 8e 88                    a1 = a1 >u 0
  3290: 88 7a 10                 a3 = a0 <u 0x10
  3293: 85 aa 01                 a3 = a3 ^ 0x1
  3296: d4 a8 08                 a1 = a1 | a3
  3299: 89 7a                    a3 = a0 <s 0
  3301: e0 a8 08                 a1 = a1 & ~a3
  3304: 52 08 0a                 jump @233 if a1 != 0
      :                          @232
  3307: 33 07                    a0 = 0
  3309: 33 08 01                 a1 = 0x1
  3312: 28 48                    jump @242
      :                          @233
  3314: 97 77 01                 a0 = a0 << 0x1
  3317: 01                       fallthrough
      :                          @234
  3318: 51 07 3e                 jump @241 if a0 == 0
      :                          @235
  3321: 57 07 76                 jump @247 if a0 <s 0
      :                          @236
  3324: 64 53                    t1 = s0
  3326: 33 08 00 10              a1 = 0x1000
  3330: 33 02 20 00 03           t0 = 0x30020
  3335: c8 82 0b                 a4 = t0 + a1
  3338: 01                       fallthrough
      :                          @237
  3339: 82 bc                    a5 = u64 [a4]
  3341: c8 7c 0a                 a3 = a5 + a0
  3344: ac ca 5d                 jump @245 if a3 <u a5
      :                          @238
  3347: 95 a5 01                 s0 = a3 + 0x1
  3350: 88 56 01                 s1 = s0 <u 0x1
  3353: d8 58 05                 s0 = a1 <u s0
  3356: d4 65 05                 s0 = s0 | s1
  3359: 52 05 4e                 jump @245 if s0 != 0
      :                          @239
  3362: 82 b6                    s1 = u64 [a4]
  3364: ab c6 e7                 jump @237 if s1 != a5
      :                          @240
  3367: 7b ba                    u64 [a4] = a3
  3369: c9 a2 08                 a1 = t0 - a3
  3372: 95 88 00 10              a1 = a1 + 0x1000
  3376: 64 35                    s0 = t1
  3378: 28 06                    jump @242
      :                          @241
  3380: 33 08 01                 a1 = 0x1
  3383: 01                       fallthrough
      :                          @242
  3384: 7b 17                    u64 [sp] = a0
  3386: 7b 18 08                 u64 [sp + 0x8] = a1
  3389: 49 11 10                 u64 [sp + 16] = 0
  3392: 33 08 78 02 01           a1 = 0x10278
  3397: 64 17                    a0 = sp
  3399: 50 10 38 7f 06           ra = 56, jump @374
      :                          @243 [@dyn 28]
  3404: 52 07 22                 jump @246 if a0 != 0
      :                          @244
  3407: 82 17 10                 a0 = u64 [sp + 0x10]
  3410: 82 18 08                 a1 = u64 [sp + 0x8]
  3413: 82 19                    a2 = u64 [sp]
  3415: 7b 57 10                 u64 [s0 + 0x10] = a0
  3418: 7b 58 08                 u64 [s0 + 0x8] = a1
  3421: 7b 59                    u64 [s0] = a2
  3423: 82 10 30                 ra = u64 [sp + 0x30]
  3426: 82 15 28                 s0 = u64 [sp + 0x28]
  3429: 82 16 20                 s1 = u64 [sp + 0x20]
  3432: 95 11 38                 sp = sp + 0x38
  3435: 32 00                    ret
      :                          @245
  3437: 00                       trap
      :                          @246
  3438: 00                       trap
      :                          @247
  3439: 00                       trap
      :                          @248 [@dyn 29]
  3440: 82 72                    t0 = u64 [a0]
  3442: 33 09 00 f0              a2 = 0xfffffffffffff000
  3446: 95 2a ff ef              a3 = t0 + 0xffffffffffffefff
  3450: ac 9a 27                 jump @254 if a3 <u a2
      :                          @249
  3453: 82 77 08                 a0 = u64 [a0 + 0x8]
  3456: 33 09 20 00 03           a2 = 0x30020
  3461: 95 99 00 10              a2 = a2 + 0x1000
  3465: 01                       fallthrough
      :                          @250
  3466: 82 9a                    a3 = u64 [a2]
  3468: c9 a9 0b                 a4 = a2 - a3
  3471: ab 7b 12                 jump @254 if a4 != a0
      :                          @251
  3474: c9 2a 0b                 a4 = a3 - t0
  3477: 01                       fallthrough
      :                          @252
  3478: 82 9c                    a5 = u64 [a2]
  3480: ab ac f2                 jump @250 if a5 != a3
      :                          @253
  3483: 7b 9b                    u64 [a2] = a4
  3485: 33 08                    a1 = 0
  3487: 32 00                    ret
      :                          @254
  3489: 32 00                    ret
      :                          @255 [@dyn 30]
  3491: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  3494: 7b 10 18                 u64 [sp + 0x18] = ra
  3497: 7b 15 10                 u64 [sp + 0x10] = s0
  3500: 7b 16 08                 u64 [sp + 0x8] = s1
  3503: 64 75                    s0 = a0
  3505: 82 7a 10                 a3 = u64 [a0 + 0x10]
  3508: 82 77                    a0 = u64 [a0]
  3510: c9 a7 07                 a0 = a0 - a3
  3513: 64 96                    s1 = a2
  3515: ac 97 2a                 jump @258 if a0 <u a2
      :                          @256
  3518: 7b 1a                    u64 [sp] = a3
  3520: 82 57 08                 a0 = u64 [s0 + 0x8]
  3523: c8 a7 07                 a0 = a0 + a3
  3526: 64 69                    a2 = s1
  3528: 50 10 3e 4a 01           ra = 62, jump @277
      :                          @257 [@dyn 31]
  3533: 82 17                    a0 = u64 [sp]
  3535: c8 76 06                 s1 = s1 + a0
  3538: 7b 56 10                 u64 [s0 + 0x10] = s1
  3541: 33 07                    a0 = 0
  3543: 82 10 18                 ra = u64 [sp + 0x18]
  3546: 82 15 10                 s0 = u64 [sp + 0x10]
  3549: 82 16 08                 s1 = u64 [sp + 0x8]
  3552: 95 11 20                 sp = sp + 0x20
  3555: 32 00                    ret
      :                          @258
  3557: 64 57                    a0 = s0
  3559: 7b 18                    u64 [sp] = a1
  3561: 64 a8                    a1 = a3
  3563: 64 69                    a2 = s1
  3565: 50 10 40 88 fc           ra = 64, jump @171
      :                          @259 [@dyn 32]
  3570: 82 18                    a1 = u64 [sp]
  3572: 82 5a 10                 a3 = u64 [s0 + 0x10]
  3575: 28 c7                    jump @256
      :                          @260 [@dyn 33]
  3577: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  3580: 7b 10 20                 u64 [sp + 0x20] = ra
  3583: 7b 15 18                 u64 [sp + 0x18] = s0
  3586: 7b 16 10                 u64 [sp + 0x10] = s1
  3589: 64 86                    s1 = a1
  3591: 83 88                    i32 a1 = a1 + 0
  3593: 33 09 80 00              a2 = 0x80
  3597: 64 7a                    a3 = a0
  3599: ae 98 2b                 jump @265 if a1 >=u a2
      :                          @261
  3602: 82 a8 10                 a1 = u64 [a3 + 0x10]
  3605: 82 a7                    a0 = u64 [a3]
  3607: ab 78 12                 jump @264 if a1 != a0
      :                          @262
  3610: 64 a7                    a0 = a3
  3612: 64 a5                    s0 = a3
  3614: 50 10 44 0d fe           ra = 68, jump @215
      :                          @263 [@dyn 34]
  3619: 64 5a                    a3 = s0
  3621: 82 58 10                 a1 = u64 [s0 + 0x10]
  3624: 01                       fallthrough
      :                          @264
  3625: 82 a7 08                 a0 = u64 [a3 + 0x8]
  3628: c8 87 07                 a0 = a0 + a1
  3631: 78 76                    u8 [a0] = s1
  3633: 95 88 01                 a1 = a1 + 0x1
  3636: 7b a8 10                 u64 [a3 + 0x10] = a1
  3639: 28 ab 00                 jump @273
      :                          @265
  3642: 8b 67 0b                 i32 a0 = s1 >> 0xb
  3645: 48 11 0c                 u32 [sp + 12] = 0
  3648: 52 07 1c                 jump @267 if a0 != 0
      :                          @266
  3651: 98 67 06                 a0 = s1 >> 0x6
  3654: 86 77 c0 00              a0 = a0 | 0xc0
  3658: 78 17 0c                 u8 [sp + 0xc] = a0
  3661: 84 67 3f                 a0 = s1 & 0x3f
  3664: 86 77 80 00              a0 = a0 | 0x80
  3668: 78 17 0d                 u8 [sp + 0xd] = a0
  3671: 33 06 02                 s1 = 0x2
  3674: 28 63                    jump @270
      :                          @267
  3676: 8b 67 10                 i32 a0 = s1 >> 0x10
  3679: 52 07 29                 jump @269 if a0 != 0
      :                          @268
  3682: 98 67 0c                 a0 = s1 >> 0xc
  3685: 86 77 e0 00              a0 = a0 | 0xe0
  3689: 78 17 0c                 u8 [sp + 0xc] = a0
  3692: 97 67 34                 a0 = s1 << 0x34
  3695: 98 77 3a                 a0 = a0 >> 0x3a
  3698: 95 77 80 00              a0 = a0 + 0x80
  3702: 78 17 0d                 u8 [sp + 0xd] = a0
  3705: 84 67 3f                 a0 = s1 & 0x3f
  3708: 86 77 80 00              a0 = a0 | 0x80
  3712: 78 17 0e                 u8 [sp + 0xe] = a0
  3715: 33 06 03                 s1 = 0x3
  3718: 28 37                    jump @270
      :                          @269
  3720: 97 67 2b                 a0 = s1 << 0x2b
  3723: 98 77 3d                 a0 = a0 >> 0x3d
  3726: 95 77 f0 00              a0 = a0 + 0xf0
  3730: 78 17 0c                 u8 [sp + 0xc] = a0
  3733: 97 67 2e                 a0 = s1 << 0x2e
  3736: 98 77 3a                 a0 = a0 >> 0x3a
  3739: 95 77 80 00              a0 = a0 + 0x80
  3743: 78 17 0d                 u8 [sp + 0xd] = a0
  3746: 97 67 34                 a0 = s1 << 0x34
  3749: 98 77 3a                 a0 = a0 >> 0x3a
  3752: 95 77 80 00              a0 = a0 + 0x80
  3756: 78 17 0e                 u8 [sp + 0xe] = a0
  3759: 84 67 3f                 a0 = s1 & 0x3f
  3762: 86 77 80 00              a0 = a0 | 0x80
  3766: 78 17 0f                 u8 [sp + 0xf] = a0
  3769: 33 06 04                 s1 = 0x4
  3772: 01                       fallthrough
      :                          @270
  3773: 82 a5 10                 s0 = u64 [a3 + 0x10]
  3776: 82 a7                    a0 = u64 [a3]
  3778: c9 57 07                 a0 = a0 - s0
  3781: ac 67 2d                 jump @274 if a0 <u s1
      :                          @271
  3784: 7b 1a                    u64 [sp] = a3
  3786: 82 a7 08                 a0 = u64 [a3 + 0x8]
  3789: c8 57 07                 a0 = a0 + s0
  3792: 95 18 0c                 a1 = sp + 0xc
  3795: 64 69                    a2 = s1
  3797: 50 10 46 3d              ra = 70, jump @277
      :                          @272 [@dyn 35]
  3801: c8 56 06                 s1 = s1 + s0
  3804: 82 17                    a0 = u64 [sp]
  3806: 7b 76 10                 u64 [a0 + 0x10] = s1
  3809: 01                       fallthrough
      :                          @273
  3810: 33 07                    a0 = 0
  3812: 82 10 20                 ra = u64 [sp + 0x20]
  3815: 82 15 18                 s0 = u64 [sp + 0x18]
  3818: 82 16 10                 s1 = u64 [sp + 0x10]
  3821: 95 11 28                 sp = sp + 0x28
  3824: 32 00                    ret
      :                          @274
  3826: 64 a7                    a0 = a3
  3828: 64 58                    a1 = s0
  3830: 64 69                    a2 = s1
  3832: 64 a5                    s0 = a3
  3834: 50 10 48 7b fb           ra = 72, jump @171
      :                          @275 [@dyn 36]
  3839: 64 5a                    a3 = s0
  3841: 82 55 10                 s0 = u64 [s0 + 0x10]
  3844: 28 c4                    jump @271
      :                          @276 [@dyn 37]
  3846: 64 8a                    a3 = a1
  3848: 33 08 78 02 01           a1 = 0x10278
  3853: 64 a9                    a2 = a3
  3855: 28 b7 04                 jump @374
      :                          @277
  3858: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  3861: 7b 10 18                 u64 [sp + 0x18] = ra
  3864: 7b 15 10                 u64 [sp + 0x10] = s0
  3867: 7b 16 08                 u64 [sp + 0x8] = s1
  3870: 53 19 10 64              jump @286 if a2 <u 16
      :                          @278
  3874: 8d 7a                    i32 a3 = -a0
  3876: 84 a2 07                 t0 = a3 & 0x7
  3879: c8 27 0b                 a4 = a0 + t0
  3882: 51 02 15                 jump @281 if t0 == 0
      :                          @279
  3885: 64 8c                    a5 = a1
  3887: 64 75                    s0 = a0
  3889: 01                       fallthrough
      :                          @280
  3890: 7c ca                    a3 = u8 [a5]
  3892: 78 5a                    u8 [s0] = a3
  3894: 95 55 01                 s0 = s0 + 0x1
  3897: 95 cc 01                 a5 = a5 + 0x1
  3900: ac b5 f6                 jump @280 if s0 <u a4
      :                          @281
  3903: c8 28 03                 t1 = a1 + t0
  3906: c9 29 02                 t0 = a2 - t0
  3909: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  3912: 84 38 07                 a1 = t1 & 0x7
  3915: c8 4b 0a                 a3 = a4 + t2
  3918: 51 08 3b                 jump @288 if a1 == 0
      :                          @282
  3921: 58 04 4b                 jump @291 if t2 <=s 0
      :                          @283
  3924: 97 38 03                 a1 = t1 << 0x3
  3927: 84 80 38                 ra = a1 & 0x38
  3930: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  3933: 82 c5                    s0 = u64 [a5]
  3935: 8d 88                    i32 a1 = -a1
  3937: 84 88 38                 a1 = a1 & 0x38
  3940: 95 cc 08                 a5 = a5 + 0x8
  3943: 01                       fallthrough
      :                          @284
  3944: 82 c6                    s1 = u64 [a5]
  3946: d0 05 05                 s0 = s0 >> ra
  3949: cf 86 09                 a2 = s1 << a1
  3952: d4 59 09                 a2 = a2 | s0
  3955: 7b b9                    u64 [a4] = a2
  3957: 95 bb 08                 a4 = a4 + 0x8
  3960: 95 cc 08                 a5 = a5 + 0x8
  3963: 64 65                    s0 = s1
  3965: ac ab eb                 jump @284 if a4 <u a3
      :                          @285
  3968: 28 1c                    jump @291
      :                          @286
  3970: 64 7a                    a3 = a0
  3972: 52 09 21                 jump @292 if a2 != 0
      :                          @287
  3975: 28 2f                    jump @294
      :                          @288
  3977: 58 04 13                 jump @291 if t2 <=s 0
      :                          @289
  3980: 64 38                    a1 = t1
  3982: 01                       fallthrough
      :                          @290
  3983: 82 89                    a2 = u64 [a1]
  3985: 7b b9                    u64 [a4] = a2
  3987: 95 bb 08                 a4 = a4 + 0x8
  3990: 95 88 08                 a1 = a1 + 0x8
  3993: ac ab f6                 jump @290 if a4 <u a3
      :                          @291
  3996: c8 43 08                 a1 = t1 + t2
  3999: 84 29 07                 a2 = t0 & 0x7
  4002: 51 09 14                 jump @294 if a2 == 0
      :                          @292
  4005: c8 a9 09                 a2 = a2 + a3
  4008: 01                       fallthrough
      :                          @293
  4009: 7c 8b                    a4 = u8 [a1]
  4011: 78 ab                    u8 [a3] = a4
  4013: 95 aa 01                 a3 = a3 + 0x1
  4016: 95 88 01                 a1 = a1 + 0x1
  4019: ac 9a f6                 jump @293 if a3 <u a2
      :                          @294
  4022: 82 10 18                 ra = u64 [sp + 0x18]
  4025: 82 15 10                 s0 = u64 [sp + 0x10]
  4028: 82 16 08                 s1 = u64 [sp + 0x8]
  4031: 95 11 20                 sp = sp + 0x20
  4034: 32 00                    ret
      :                          @295
  4036: 53 19 10 48              jump @304 if a2 <u 16
      :                          @296
  4040: 8d 7a                    i32 a3 = -a0
  4042: 84 aa 07                 a3 = a3 & 0x7
  4045: c8 a7 0b                 a4 = a0 + a3
  4048: 51 0a 0e                 jump @299 if a3 == 0
      :                          @297
  4051: 64 7c                    a5 = a0
  4053: 01                       fallthrough
      :                          @298
  4054: 78 c8                    u8 [a5] = a1
  4056: 95 cc 01                 a5 = a5 + 0x1
  4059: ac bc fb                 jump @298 if a5 <u a4
      :                          @299
  4062: c9 a9 03                 t1 = a2 - a3
  4065: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  4068: c8 cb 0a                 a3 = a4 + a5
  4071: 58 0c 1d                 jump @302 if a5 <=s 0
      :                          @300
  4074: 84 82 ff 00              t0 = a1 & 0xff
  4078: 14 09 01 01 01 01 01 01 01 01 a2 = 0x101010101010101
  4088: ca 92 0c                 a5 = t0 * a2
  4091: 01                       fallthrough
      :                          @301
  4092: 7b bc                    u64 [a4] = a5
  4094: 95 bb 08                 a4 = a4 + 0x8
  4097: ac ab fb                 jump @301 if a4 <u a3
      :                          @302
  4100: 84 39 07                 a2 = t1 & 0x7
  4103: 52 09 0a                 jump @305 if a2 != 0
      :                          @303
  4106: 28 13                    jump @307
      :                          @304
  4108: 64 7a                    a3 = a0
  4110: 51 09 0f                 jump @307 if a2 == 0
      :                          @305
  4113: c8 a9 09                 a2 = a2 + a3
  4116: 01                       fallthrough
      :                          @306
  4117: 78 a8                    u8 [a3] = a1
  4119: 95 aa 01                 a3 = a3 + 0x1
  4122: ac 9a fb                 jump @306 if a3 <u a2
      :                          @307
  4125: 32 00                    ret
      :                          @308 [@dyn 38]
  4127: 82 77                    a0 = u64 [a0]
  4129: 01                       fallthrough
      :                          @309
  4130: 28                       jump @309
      :                          @310
  4131: 95 11 a0                 sp = sp + 0xffffffffffffffa0
  4134: 7b 10 58                 u64 [sp + 0x58] = ra
  4137: 7b 15 50                 u64 [sp + 0x50] = s0
  4140: 7b 16 48                 u64 [sp + 0x48] = s1
  4143: 7b 19 08                 u64 [sp + 0x8] = a2
  4146: 7b 18                    u64 [sp] = a1
  4148: 98 7a 04                 a3 = a0 >> 0x4
  4151: 33 09 27                 a2 = 0x27
  4154: 33 0b 8a 00 01           a4 = 0x1008a
  4159: 53 2a 71 02 7b           jump @313 if a3 <u 625
      :                          @311
  4164: 33 09 27                 a2 = 0x27
  4167: 95 1c 46                 a5 = sp + 0x46
  4170: 3a 08 00 00 03           a1 = u64 [0x30000]
  4175: 7b 18 18                 u64 [sp + 0x18] = a1
  4178: 49 11 10 f0 d8 00        u64 [sp + 16] = 0xd8f0
  4184: 33 03 7b 14              t1 = 0x147b
  4188: 33 04 ff e0 f5 05        t2 = 0x5f5e0ff
  4194: 01                       fallthrough
      :                          @312
  4195: 64 70                    ra = a0
  4197: 82 17 18                 a0 = u64 [sp + 0x18]
  4200: d6 70 07                 a0 = ra mulhu a0
  4203: 98 77 0b                 a0 = a0 >> 0xb
  4206: 82 18 10                 a1 = u64 [sp + 0x10]
  4209: c0 87 02                 i32 t0 = a0 * a1
  4212: c8 02 05                 s0 = t0 + ra
  4215: 97 52 30                 t0 = s0 << 0x30
  4218: 98 28 32                 a1 = t0 >> 0x32
  4221: ca 38 08                 a1 = a1 * t1
  4224: 98 8a 11                 a3 = a1 >> 0x11
  4227: 98 88 10                 a1 = a1 >> 0x10
  4230: 84 88 fe 07              a1 = a1 & 0x7fe
  4234: 96 aa 9c                 a3 = a3 * 0xffffffffffffff9c
  4237: c8 5a 0a                 a3 = a3 + s0
  4240: 97 aa 31                 a3 = a3 << 0x31
  4243: 98 aa 30                 a3 = a3 >> 0x30
  4246: c8 b8 08                 a1 = a1 + a4
  4249: 7c 85                    s0 = u8 [a1]
  4251: 7c 88 01                 a1 = u8 [a1 + 0x1]
  4254: c8 ba 0a                 a3 = a3 + a4
  4257: 7c a6 01                 s1 = u8 [a3 + 0x1]
  4260: 7c aa                    a3 = u8 [a3]
  4262: 78 c8 ff                 u8 [a5 + 0xffffffffffffffff] = a1
  4265: 78 c5 fe                 u8 [a5 + 0xfffffffffffffffe] = s0
  4268: 78 c6 01                 u8 [a5 + 0x1] = s1
  4271: 78 ca                    u8 [a5] = a3
  4273: 95 99 fc                 a2 = a2 + 0xfffffffffffffffc
  4276: 95 cc fc                 a5 = a5 + 0xfffffffffffffffc
  4279: ac 04 ac                 jump @312 if t2 <u ra
      :                          @313
  4282: 54 17 63 36              jump @315 if a0 <=u 99
      :                          @314
  4286: 97 78 30                 a1 = a0 << 0x30
  4289: 98 88 32                 a1 = a1 >> 0x32
  4292: 96 88 7b 14              a1 = a1 * 0x147b
  4296: 98 88 11                 a1 = a1 >> 0x11
  4299: 96 8a 9c                 a3 = a1 * 0xffffffffffffff9c
  4302: c8 a7 07                 a0 = a0 + a3
  4305: 97 77 31                 a0 = a0 << 0x31
  4308: 98 77 30                 a0 = a0 >> 0x30
  4311: 95 99 fe                 a2 = a2 + 0xfffffffffffffffe
  4314: c8 b7 07                 a0 = a0 + a4
  4317: 7c 7a 01                 a3 = u8 [a0 + 0x1]
  4320: 7c 77                    a0 = u8 [a0]
  4322: 95 1c 21                 a5 = sp + 0x21
  4325: c8 9c 0c                 a5 = a5 + a2
  4328: 78 ca 01                 u8 [a5 + 0x1] = a3
  4331: 78 c7                    u8 [a5] = a0
  4333: 64 87                    a0 = a1
  4335: 01                       fallthrough
      :                          @315
  4336: 55 17 0a 14              jump @317 if a0 >=u 10
      :                          @316
  4340: 95 99 ff                 a2 = a2 + 0xffffffffffffffff
  4343: 95 18 21                 a1 = sp + 0x21
  4346: c8 98 08                 a1 = a1 + a2
  4349: 83 77 30                 i32 a0 = a0 + 0x30
  4352: 78 87                    u8 [a1] = a0
  4354: 28 1c                    jump @318
      :                          @317
  4356: 97 77 01                 a0 = a0 << 0x1
  4359: 95 99 fe                 a2 = a2 + 0xfffffffffffffffe
  4362: c8 b7 07                 a0 = a0 + a4
  4365: 7c 78 01                 a1 = u8 [a0 + 0x1]
  4368: 7c 77                    a0 = u8 [a0]
  4370: 95 1a 21                 a3 = sp + 0x21
  4373: c8 9a 0a                 a3 = a3 + a2
  4376: 78 a8 01                 u8 [a3 + 0x1] = a1
  4379: 78 a7                    u8 [a3] = a0
  4381: 01                       fallthrough
      :                          @318
  4382: 95 1b 21                 a4 = sp + 0x21
  4385: c8 9b 0b                 a4 = a4 + a2
  4388: 9a 9c 27                 a5 = 0x27 - a2
  4391: 33 09 88 00 01           a2 = 0x10088
  4396: 82 17 08                 a0 = u64 [sp + 0x8]
  4399: 82 18                    a1 = u64 [sp]
  4401: 33 0a                    a3 = 0
  4403: 50 10 4e 12              ra = 78, jump @320
      :                          @319 [@dyn 39]
  4407: 82 10 58                 ra = u64 [sp + 0x58]
  4410: 82 15 50                 s0 = u64 [sp + 0x50]
  4413: 82 16 48                 s1 = u64 [sp + 0x48]
  4416: 95 11 60                 sp = sp + 0x60
  4419: 32 00                    ret
      :                          @320
  4421: 95 11 98                 sp = sp + 0xffffffffffffff98
  4424: 7b 10 60                 u64 [sp + 0x60] = ra
  4427: 7b 15 58                 u64 [sp + 0x58] = s0
  4430: 7b 16 50                 u64 [sp + 0x50] = s1
  4433: 7b 1b 18                 u64 [sp + 0x18] = a4
  4436: 51 08 4f                 jump @327 if a1 == 0
      :                          @321
  4439: 80 76 34                 s1 = u32 [a0 + 0x34]
  4442: 84 68 01                 a1 = s1 & 0x1
  4445: 33 0b 2b                 a4 = 0x2b
  4448: 33 05 00 00 11           s0 = 0x110000
  4453: db 8b 05                 s0 = a4 if a1 != 0
  4456: 7b 15 28                 u64 [sp + 0x28] = s0
  4459: c8 c8 02                 t0 = a1 + a5
  4462: 84 68 04                 a1 = s1 & 0x4
  4465: 51 08 42                 jump @328 if a1 == 0
      :                          @322
  4468: 7b 19 30                 u64 [sp + 0x30] = a2
  4471: 33 08                    a1 = 0
  4473: 51 0a 1a                 jump @325 if a3 == 0
      :                          @323
  4476: 64 a5                    s0 = a3
  4478: 01                       fallthrough
      :                          @324
  4479: 7d 9b                    a4 = i8 [a2]
  4481: 89 bb c0                 a4 = a4 <s 0xffffffffffffffc0
  4484: 85 bb 01                 a4 = a4 ^ 0x1
  4487: c8 b8 08                 a1 = a1 + a4
  4490: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  4493: 95 99 01                 a2 = a2 + 0x1
  4496: 52 05 ef                 jump @324 if s0 != 0
      :                          @325
  4499: c8 82 02                 t0 = t0 + a1
  4502: 7b 1a 38                 u64 [sp + 0x38] = a3
  4505: 82 78                    a1 = u64 [a0]
  4507: 7b 1c 20                 u64 [sp + 0x20] = a5
  4510: 52 08 23                 jump @329 if a1 != 0
      :                          @326
  4513: 28 41                    jump @334
      :                          @327
  4515: 81 76 34                 s1 = i32 [a0 + 0x34]
  4518: 95 c2 01                 t0 = a5 + 0x1
  4521: 49 11 28 2d              u64 [sp + 40] = 0x2d
  4525: 84 68 04                 a1 = s1 & 0x4
  4528: 52 08 c4                 jump @322 if a1 != 0
      :                          @328
  4531: 49 11 30                 u64 [sp + 48] = 0
  4534: 7b 1a 38                 u64 [sp + 0x38] = a3
  4537: 82 78                    a1 = u64 [a0]
  4539: 7b 1c 20                 u64 [sp + 0x20] = a5
  4542: 51 08 24                 jump @334 if a1 == 0
      :                          @329
  4545: 82 75 08                 s0 = u64 [a0 + 0x8]
  4548: ae 52 1e                 jump @334 if t0 >=u s0
      :                          @330
  4551: 84 66 08                 s1 = s1 & 0x8
  4554: 52 06 50                 jump @337 if s1 != 0
      :                          @331
  4557: 7c 79 38                 a2 = u8 [a0 + 0x38]
  4560: c9 25 0a                 a3 = s0 - t0
  4563: 5a 19 01 a1 00           jump @344 if a2 >s 1
      :                          @332
  4568: 52 09 ae 00              jump @346 if a2 != 0
      :                          @333
  4572: 7b 1a 10                 u64 [sp + 0x10] = a3
  4575: 28 ad 00                 jump @347
      :                          @334
  4578: 82 75 20                 s0 = u64 [a0 + 0x20]
  4581: 82 76 28                 s1 = u64 [a0 + 0x28]
  4584: 64 57                    a0 = s0
  4586: 64 68                    a1 = s1
  4588: 82 19 28                 a2 = u64 [sp + 0x28]
  4591: 82 1a 30                 a3 = u64 [sp + 0x30]
  4594: 82 1b 38                 a4 = u64 [sp + 0x38]
  4597: 50 10 50 6d 01           ra = 80, jump @367
      :                          @335 [@dyn 40]
  4602: 33 08 01                 a1 = 0x1
  4605: 52 07 bc 00              jump @352 if a0 != 0
      :                          @336
  4609: 82 6c 18                 a5 = u64 [s1 + 0x18]
  4612: 64 57                    a0 = s0
  4614: 82 18 18                 a1 = u64 [sp + 0x18]
  4617: 82 19 20                 a2 = u64 [sp + 0x20]
  4620: 82 10 60                 ra = u64 [sp + 0x60]
  4623: 82 15 58                 s0 = u64 [sp + 0x58]
  4626: 82 16 50                 s1 = u64 [sp + 0x50]
  4629: 95 11 68                 sp = sp + 0x68
  4632: 32 0c                    jump [a5]
      :                          @337
  4634: 7b 12 40                 u64 [sp + 0x40] = t0
  4637: 81 78 30                 a1 = i32 [a0 + 0x30]
  4640: 7b 18 08                 u64 [sp + 0x8] = a1
  4643: 7c 79 38                 a2 = u8 [a0 + 0x38]
  4646: 7b 19                    u64 [sp] = a2
  4648: 82 79 20                 a2 = u64 [a0 + 0x20]
  4651: 82 76 28                 s1 = u64 [a0 + 0x28]
  4654: 48 17 30 30              u32 [a0 + 48] = 0x30
  4658: 7b 17 10                 u64 [sp + 0x10] = a0
  4661: 46 17 38 01              u8 [a0 + 56] = 0x1
  4665: 7b 19 48                 u64 [sp + 0x48] = a2
  4668: 64 97                    a0 = a2
  4670: 64 68                    a1 = s1
  4672: 82 19 28                 a2 = u64 [sp + 0x28]
  4675: 82 1a 30                 a3 = u64 [sp + 0x30]
  4678: 82 1b 38                 a4 = u64 [sp + 0x38]
  4681: 50 10 52 19 01           ra = 82, jump @367
      :                          @338 [@dyn 41]
  4686: 52 07 67                 jump @351 if a0 != 0
      :                          @339
  4689: 82 17 40                 a0 = u64 [sp + 0x40]
  4692: c9 75 05                 s0 = s0 - a0
  4695: 95 55 01                 s0 = s0 + 0x1
  4698: 01                       fallthrough
      :                          @340
  4699: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  4702: 51 05 c6 00              jump @362 if s0 == 0
      :                          @341
  4706: 82 69 20                 a2 = u64 [s1 + 0x20]
  4709: 33 08 30                 a1 = 0x30
  4712: 82 17 48                 a0 = u64 [sp + 0x48]
  4715: b4 90 01 54              ra = 84, jump [a2]
      :                          @342 [@dyn 42]
  4719: 51 07 ec                 jump @340 if a0 == 0
      :                          @343
  4722: 28 43                    jump @351
      :                          @344
  4724: 52 19 02 12              jump @346 if a2 != 2
      :                          @345
  4728: 98 a9 01                 a2 = a3 >> 0x1
  4731: 95 a8 01                 a1 = a3 + 0x1
  4734: 98 88 01                 a1 = a1 >> 0x1
  4737: 7b 18 10                 u64 [sp + 0x10] = a1
  4740: 28 08                    jump @347
      :                          @346
  4742: 64 a9                    a2 = a3
  4744: 49 11 10                 u64 [sp + 16] = 0
  4747: 01                       fallthrough
      :                          @347
  4748: 82 78 20                 a1 = u64 [a0 + 0x20]
  4751: 7b 18 48                 u64 [sp + 0x48] = a1
  4754: 82 76 28                 s1 = u64 [a0 + 0x28]
  4757: 81 77 30                 a0 = i32 [a0 + 0x30]
  4760: 7b 17 40                 u64 [sp + 0x40] = a0
  4763: 95 95 01                 s0 = a2 + 0x1
  4766: 01                       fallthrough
      :                          @348
  4767: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  4770: 51 05 27                 jump @353 if s0 == 0
      :                          @349
  4773: 82 69 20                 a2 = u64 [s1 + 0x20]
  4776: 82 17 48                 a0 = u64 [sp + 0x48]
  4779: 82 18 40                 a1 = u64 [sp + 0x40]
  4782: b4 90 01 56              ra = 86, jump [a2]
      :                          @350 [@dyn 43]
  4786: 51 07 ed                 jump @348 if a0 == 0
      :                          @351
  4789: 33 08 01                 a1 = 0x1
  4792: 01                       fallthrough
      :                          @352
  4793: 64 87                    a0 = a1
  4795: 82 10 60                 ra = u64 [sp + 0x60]
  4798: 82 15 58                 s0 = u64 [sp + 0x58]
  4801: 82 16 50                 s1 = u64 [sp + 0x50]
  4804: 95 11 68                 sp = sp + 0x68
  4807: 32 00                    ret
      :                          @353
  4809: 82 15 48                 s0 = u64 [sp + 0x48]
  4812: 64 57                    a0 = s0
  4814: 64 68                    a1 = s1
  4816: 82 19 28                 a2 = u64 [sp + 0x28]
  4819: 82 1a 30                 a3 = u64 [sp + 0x30]
  4822: 82 1b 38                 a4 = u64 [sp + 0x38]
  4825: 50 10 58 89 00           ra = 88, jump @367
      :                          @354 [@dyn 44]
  4830: 33 08 01                 a1 = 0x1
  4833: 52 07 d8                 jump @352 if a0 != 0
      :                          @355
  4836: 82 6a 18                 a3 = u64 [s1 + 0x18]
  4839: 64 57                    a0 = s0
  4841: 82 18 18                 a1 = u64 [sp + 0x18]
  4844: 82 19 20                 a2 = u64 [sp + 0x20]
  4847: b4 a0 01 5a              ra = 90, jump [a3]
      :                          @356 [@dyn 45]
  4851: 33 08 01                 a1 = 0x1
  4854: 52 07 c3                 jump @352 if a0 != 0
      :                          @357
  4857: 82 17 10                 a0 = u64 [sp + 0x10]
  4860: 9a 77                    a0 = -a0
  4862: 7b 17 38                 u64 [sp + 0x38] = a0
  4865: 33 05 ff                 s0 = 0xffffffffffffffff
  4868: 01                       fallthrough
      :                          @358
  4869: 82 17 38                 a0 = u64 [sp + 0x38]
  4872: c8 57 07                 a0 = a0 + s0
  4875: 51 17 ff 42              jump @365 if a0 == 4294967295
      :                          @359
  4879: 82 69 20                 a2 = u64 [s1 + 0x20]
  4882: 82 17 48                 a0 = u64 [sp + 0x48]
  4885: 82 18 40                 a1 = u64 [sp + 0x40]
  4888: b4 90 01 5c              ra = 92, jump [a2]
      :                          @360 [@dyn 46]
  4892: 95 55 01                 s0 = s0 + 0x1
  4895: 51 07 e6                 jump @358 if a0 == 0
      :                          @361
  4898: 28 37                    jump @366
      :                          @362
  4900: 82 6a 18                 a3 = u64 [s1 + 0x18]
  4903: 82 17 48                 a0 = u64 [sp + 0x48]
  4906: 82 18 18                 a1 = u64 [sp + 0x18]
  4909: 82 19 20                 a2 = u64 [sp + 0x20]
  4912: b4 a0 01 5e              ra = 94, jump [a3]
      :                          @363 [@dyn 47]
  4916: 33 08 01                 a1 = 0x1
  4919: 52 07 82                 jump @352 if a0 != 0
      :                          @364
  4922: 33 08                    a1 = 0
  4924: 82 17 10                 a0 = u64 [sp + 0x10]
  4927: 82 19 08                 a2 = u64 [sp + 0x8]
  4930: 7a 79 30                 u32 [a0 + 0x30] = a2
  4933: 82 19                    a2 = u64 [sp]
  4935: 78 79 38                 u8 [a0 + 0x38] = a2
  4938: 28 6f ff                 jump @352
      :                          @365
  4941: 82 15 10                 s0 = u64 [sp + 0x10]
  4944: 82 17 10                 a0 = u64 [sp + 0x10]
  4947: d8 75 08                 a1 = s0 <u a0
  4950: 28 63 ff                 jump @352
      :                          @366
  4953: 82 17 10                 a0 = u64 [sp + 0x10]
  4956: d8 75 08                 a1 = s0 <u a0
  4959: 28 5a ff                 jump @352
      :                          @367
  4962: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  4965: 7b 10 20                 u64 [sp + 0x20] = ra
  4968: 7b 15 18                 u64 [sp + 0x18] = s0
  4971: 7b 16 10                 u64 [sp + 0x10] = s1
  4974: 83 9c                    i32 a5 = a2 + 0
  4976: 33 02 00 00 11           t0 = 0x110000
  4981: 64 a6                    s1 = a3
  4983: 64 85                    s0 = a1
  4985: 64 7a                    a3 = a0
  4987: aa 2c 20                 jump @370 if a5 == t0
      :                          @368
  4990: 82 5c 20                 a5 = u64 [s0 + 0x20]
  4993: 64 a7                    a0 = a3
  4995: 64 98                    a1 = a2
  4997: 7b 1b 08                 u64 [sp + 0x8] = a4
  5000: 7b 1a                    u64 [sp] = a3
  5002: b4 c0 01 60              ra = 96, jump [a5]
      :                          @369 [@dyn 48]
  5006: 82 1a                    a3 = u64 [sp]
  5008: 82 1b 08                 a4 = u64 [sp + 0x8]
  5011: 64 78                    a1 = a0
  5013: 33 07 01                 a0 = 0x1
  5016: 52 08 20                 jump @373 if a1 != 0
      :                          @370
  5019: 51 06 1a                 jump @372 if s1 == 0
      :                          @371
  5022: 82 5c 18                 a5 = u64 [s0 + 0x18]
  5025: 64 a7                    a0 = a3
  5027: 64 68                    a1 = s1
  5029: 64 b9                    a2 = a4
  5031: 82 10 20                 ra = u64 [sp + 0x20]
  5034: 82 15 18                 s0 = u64 [sp + 0x18]
  5037: 82 16 10                 s1 = u64 [sp + 0x10]
  5040: 95 11 28                 sp = sp + 0x28
  5043: 32 0c                    jump [a5]
      :                          @372
  5045: 33 07                    a0 = 0
  5047: 01                       fallthrough
      :                          @373
  5048: 82 10 20                 ra = u64 [sp + 0x20]
  5051: 82 15 18                 s0 = u64 [sp + 0x18]
  5054: 82 16 10                 s1 = u64 [sp + 0x10]
  5057: 95 11 28                 sp = sp + 0x28
  5060: 32 00                    ret
      :                          @374
  5062: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  5066: 7b 10 80 00              u64 [sp + 0x80] = ra
  5070: 7b 15 78                 u64 [sp + 0x78] = s0
  5073: 7b 16 70                 u64 [sp + 0x70] = s1
  5076: 49 11 60 20              u64 [sp + 96] = 0x20
  5080: 33 0a 03                 a3 = 0x3
  5083: 78 1a 68                 u8 [sp + 0x68] = a3
  5086: 82 96 20                 s1 = u64 [a2 + 0x20]
  5089: 49 11 30                 u64 [sp + 48] = 0
  5092: 49 11 40                 u64 [sp + 64] = 0
  5095: 7b 17 50                 u64 [sp + 0x50] = a0
  5098: 7b 18 58                 u64 [sp + 0x58] = a1
  5101: 51 06 07 01              jump @396 if s1 == 0
      :                          @375
  5105: 82 97 28                 a0 = u64 [a2 + 0x28]
  5108: 51 07 74 01              jump @406 if a0 == 0
      :                          @376
  5112: 49 11 28                 u64 [sp + 40] = 0
  5115: 82 95                    s0 = u64 [a2]
  5117: 7b 19 08                 u64 [sp + 0x8] = a2
  5120: 82 98 10                 a1 = u64 [a2 + 0x10]
  5123: 7b 18 18                 u64 [sp + 0x18] = a1
  5126: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  5129: 97 88 03                 a1 = a1 << 0x3
  5132: 98 88 03                 a1 = a1 >> 0x3
  5135: 95 88 01                 a1 = a1 + 0x1
  5138: 7b 18                    u64 [sp] = a1
  5140: 95 55 08                 s0 = s0 + 0x8
  5143: 96 78 38                 a1 = a0 * 0x38
  5146: 95 66 18                 s1 = s1 + 0x18
  5149: 33 07 4c                 a0 = 0x4c
  5152: 7b 17 10                 u64 [sp + 0x10] = a0
  5155: 01                       fallthrough
      :                          @377
  5156: 7b 18 20                 u64 [sp + 0x20] = a1
  5159: 82 59                    a2 = u64 [s0]
  5161: 51 09 17                 jump @380 if a2 == 0
      :                          @378
  5164: 82 1a 58                 a3 = u64 [sp + 0x58]
  5167: 82 17 50                 a0 = u64 [sp + 0x50]
  5170: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  5173: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5176: b4 a0 01 62              ra = 98, jump [a3]
      :                          @379 [@dyn 49]
  5180: 52 07 51 01              jump @409 if a0 != 0
      :                          @380
  5184: 81 67 10                 a0 = i32 [s1 + 0x10]
  5187: 7a 17 60                 u32 [sp + 0x60] = a0
  5190: 7c 67 18                 a0 = u8 [s1 + 0x18]
  5193: 78 17 68                 u8 [sp + 0x68] = a0
  5196: 81 67 14                 a0 = i32 [s1 + 0x14]
  5199: 7a 17 64                 u32 [sp + 0x64] = a0
  5202: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  5205: 82 67                    a0 = u64 [s1]
  5207: 51 08 26                 jump @385 if a1 == 0
      :                          @381
  5210: 52 18 01 16              jump @383 if a1 != 1
      :                          @382
  5214: 97 77 04                 a0 = a0 << 0x4
  5217: 82 18 18                 a1 = u64 [sp + 0x18]
  5220: c8 87 07                 a0 = a0 + a1
  5223: 82 78 08                 a1 = u64 [a0 + 0x8]
  5226: 82 19 10                 a2 = u64 [sp + 0x10]
  5229: aa 98 07                 jump @384 if a1 == a2
      :                          @383
  5232: 33 08                    a1 = 0
  5234: 28 0f                    jump @386
      :                          @384
  5236: 82 77                    a0 = u64 [a0]
  5238: 82 77                    a0 = u64 [a0]
  5240: 33 08 01                 a1 = 0x1
  5243: 28 06                    jump @386
      :                          @385
  5245: 33 08 01                 a1 = 0x1
  5248: 01                       fallthrough
      :                          @386
  5249: 7b 18 30                 u64 [sp + 0x30] = a1
  5252: 7b 17 38                 u64 [sp + 0x38] = a0
  5255: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  5258: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  5261: 51 08 26                 jump @391 if a1 == 0
      :                          @387
  5264: 52 18 01 16              jump @389 if a1 != 1
      :                          @388
  5268: 97 77 04                 a0 = a0 << 0x4
  5271: 82 18 18                 a1 = u64 [sp + 0x18]
  5274: c8 87 07                 a0 = a0 + a1
  5277: 82 78 08                 a1 = u64 [a0 + 0x8]
  5280: 82 19 10                 a2 = u64 [sp + 0x10]
  5283: aa 98 07                 jump @390 if a1 == a2
      :                          @389
  5286: 33 08                    a1 = 0
  5288: 28 0f                    jump @392
      :                          @390
  5290: 82 77                    a0 = u64 [a0]
  5292: 82 77                    a0 = u64 [a0]
  5294: 33 08 01                 a1 = 0x1
  5297: 28 06                    jump @392
      :                          @391
  5299: 33 08 01                 a1 = 0x1
  5302: 01                       fallthrough
      :                          @392
  5303: 7b 18 40                 u64 [sp + 0x40] = a1
  5306: 7b 17 48                 u64 [sp + 0x48] = a0
  5309: 82 67 08                 a0 = u64 [s1 + 0x8]
  5312: 97 77 04                 a0 = a0 << 0x4
  5315: 82 18 18                 a1 = u64 [sp + 0x18]
  5318: c8 78 08                 a1 = a1 + a0
  5321: 82 87                    a0 = u64 [a1]
  5323: 82 89 08                 a2 = u64 [a1 + 0x8]
  5326: 95 18 30                 a1 = sp + 0x30
  5329: b4 90 01 64              ra = 100, jump [a2]
      :                          @393 [@dyn 50]
  5333: 52 07 b8 00              jump @409 if a0 != 0
      :                          @394
  5337: 95 55 10                 s0 = s0 + 0x10
  5340: 82 18 20                 a1 = u64 [sp + 0x20]
  5343: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  5346: 95 66 38                 s1 = s1 + 0x38
  5349: 82 17 28                 a0 = u64 [sp + 0x28]
  5352: 95 77 01                 a0 = a0 + 0x1
  5355: 7b 17 28                 u64 [sp + 0x28] = a0
  5358: 52 08 36 ff              jump @377 if a1 != 0
      :                          @395
  5362: 28 69                    jump @404
      :                          @396
  5364: 82 97 18                 a0 = u64 [a2 + 0x18]
  5367: 51 07 71                 jump @406 if a0 == 0
      :                          @397
  5370: 82 95 10                 s0 = u64 [a2 + 0x10]
  5373: 33 0a                    a3 = 0
  5375: 97 78 04                 a1 = a0 << 0x4
  5378: c8 58 08                 a1 = a1 + s0
  5381: 7b 18 20                 u64 [sp + 0x20] = a1
  5384: 7b 19 08                 u64 [sp + 0x8] = a2
  5387: 82 96                    s1 = u64 [a2]
  5389: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  5392: 97 77 04                 a0 = a0 << 0x4
  5395: 98 77 04                 a0 = a0 >> 0x4
  5398: 95 77 01                 a0 = a0 + 0x1
  5401: 7b 17                    u64 [sp] = a0
  5403: 95 66 08                 s1 = s1 + 0x8
  5406: 01                       fallthrough
      :                          @398
  5407: 7b 1a 28                 u64 [sp + 0x28] = a3
  5410: 82 69                    a2 = u64 [s1]
  5412: 51 09 16                 jump @401 if a2 == 0
      :                          @399
  5415: 82 1a 58                 a3 = u64 [sp + 0x58]
  5418: 82 17 50                 a0 = u64 [sp + 0x50]
  5421: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  5424: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5427: b4 a0 01 66              ra = 102, jump [a3]
      :                          @400 [@dyn 51]
  5431: 52 07 56                 jump @409 if a0 != 0
      :                          @401
  5434: 82 57                    a0 = u64 [s0]
  5436: 82 59 08                 a2 = u64 [s0 + 0x8]
  5439: 95 18 30                 a1 = sp + 0x30
  5442: b4 90 01 68              ra = 104, jump [a2]
      :                          @402 [@dyn 52]
  5446: 52 07 47                 jump @409 if a0 != 0
      :                          @403
  5449: 95 66 10                 s1 = s1 + 0x10
  5452: 95 55 10                 s0 = s0 + 0x10
  5455: 82 1a 28                 a3 = u64 [sp + 0x28]
  5458: 95 aa 01                 a3 = a3 + 0x1
  5461: 82 17 20                 a0 = u64 [sp + 0x20]
  5464: ab 75 c7                 jump @398 if s0 != a0
      :                          @404
  5467: 82 19 08                 a2 = u64 [sp + 0x8]
  5470: 82 1a                    a3 = u64 [sp]
  5472: 82 97 08                 a0 = u64 [a2 + 0x8]
  5475: ac 7a 0d                 jump @407 if a3 <u a0
      :                          @405
  5478: 28 2c                    jump @410
      :                          @406
  5480: 33 0a                    a3 = 0
  5482: 82 97 08                 a0 = u64 [a2 + 0x8]
  5485: 54 07 25                 jump @410 if a0 <=u 0
      :                          @407
  5488: 82 97                    a0 = u64 [a2]
  5490: 97 a8 04                 a1 = a3 << 0x4
  5493: c8 87 09                 a2 = a0 + a1
  5496: 82 1a 58                 a3 = u64 [sp + 0x58]
  5499: 82 17 50                 a0 = u64 [sp + 0x50]
  5502: 82 98                    a1 = u64 [a2]
  5504: 82 99 08                 a2 = u64 [a2 + 0x8]
  5507: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5510: b4 a0 01 6a              ra = 106, jump [a3]
      :                          @408 [@dyn 53]
  5514: 51 07 08                 jump @410 if a0 == 0
      :                          @409
  5517: 33 07 01                 a0 = 0x1
  5520: 28 05                    jump @411
      :                          @410
  5522: 33 07                    a0 = 0
  5524: 01                       fallthrough
      :                          @411
  5525: 82 10 80 00              ra = u64 [sp + 0x80]
  5529: 82 15 78                 s0 = u64 [sp + 0x78]
  5532: 82 16 70                 s1 = u64 [sp + 0x70]
  5535: 95 11 88 00              sp = sp + 0x88
  5539: 32 00                    ret
      :                          @412
  5541: 51 08 9b 00              jump @433 if a1 == 0
      :                          @413
  5545: 64 79                    a2 = a0
  5547: 7c 77                    a0 = u8 [a0]
  5549: 51 07 91 00              jump @432 if a0 == 0
      :                          @414
  5553: 51 27 ff 00 90 00        jump @434 if a0 == 255
      :                          @415
  5559: 6c 7a                    a3 = sext.b a0
  5561: 57 0a 09                 jump @417 if a3 <s 0
      :                          @416
  5564: 33 0a                    a3 = 0
  5566: 33 08                    a1 = 0
  5568: 28 73                    jump @431
      :                          @417
  5570: 55 27 c0 00 0d           jump @419 if a0 >=u 192
      :                          @418
  5575: 33 0a 01                 a3 = 0x1
  5578: 33 0b 80                 a4 = 0xffffffffffffff80
  5581: 28 4a                    jump @428
      :                          @419
  5583: 55 27 e0 00 0e           jump @421 if a0 >=u 224
      :                          @420
  5588: 33 0a 02                 a3 = 0x2
  5591: 33 0b 40 ff              a4 = 0xffffffffffffff40
  5595: 28 3c                    jump @428
      :                          @421
  5597: 55 27 f0 00 0e           jump @423 if a0 >=u 240
      :                          @422
  5602: 33 0a 03                 a3 = 0x3
  5605: 33 0b 20 ff              a4 = 0xffffffffffffff20
  5609: 28 2e                    jump @428
      :                          @423
  5611: 55 27 f8 00 0e           jump @425 if a0 >=u 248
      :                          @424
  5616: 33 0a 04                 a3 = 0x4
  5619: 33 0b 10 ff              a4 = 0xffffffffffffff10
  5623: 28 20                    jump @428
      :                          @425
  5625: 55 27 fc 00 0e           jump @427 if a0 >=u 252
      :                          @426
  5630: 33 0a 05                 a3 = 0x5
  5633: 33 0b 08 ff              a4 = 0xffffffffffffff08
  5637: 28 12                    jump @428
      :                          @427
  5639: 88 7a fe 00              a3 = a0 <u 0xfe
  5643: 33 0b 04 ff              a4 = 0xffffffffffffff04
  5647: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  5651: 85 aa 07                 a3 = a3 ^ 0x7
  5654: 01                       fallthrough
      :                          @428
  5655: ae 8a 2b                 jump @435 if a3 >=u a1
      :                          @429
  5658: 33 08                    a1 = 0
  5660: c8 b7 07                 a0 = a0 + a4
  5663: 64 ab                    a4 = a3
  5665: 01                       fallthrough
      :                          @430
  5666: c8 b9 0c                 a5 = a2 + a4
  5669: 7c cc                    a5 = u8 [a5]
  5671: 97 88 08                 a1 = a1 << 0x8
  5674: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  5677: d4 c8 08                 a1 = a1 | a5
  5680: 52 0b f2                 jump @430 if a4 != 0
      :                          @431
  5683: 8a a9 03                 i32 a2 = a3 << 0x3
  5686: cf 97 07                 a0 = a0 << a2
  5689: c8 87 07                 a0 = a0 + a1
  5692: 32 00                    ret
      :                          @432
  5694: 32 00                    ret
      :                          @433
  5696: 00                       trap
      :                          @434
  5697: 00                       trap
      :                          @435
  5698: 00                       trap
