// RO data = 872/872 bytes
// RW data = 16/4176 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 2 bytes
// RO data = [109, 101, 103, 40, 109, 101, 103, 32, 114, 101, 97, 100, 32, 32, 32, 32, 32, 114, 101, 97, 100, 32, 102, 114, 111, 109, 32, 115, 101, 114, 118, 105, 99, 101, 32, 32, 102, 105, 98, 40, 110, 61, 41, 61, 32, 116, 114, 105, 98, 40, 110, 61, 116, 114, 97, 110, 115, 102, 101, 114, 32, 119, 114, 105, 116, 101, 40, 110, 61, 41, 32, 110, 117, 109, 95, 116, 114, 97, 110, 115, 102, 101, 114, 115, 61, 32, 116, 114, 97, 110, 115, 102, 101, 114, 40, 100, 101, 115, 116, 58, 44, 32, 97, 109, 111, 117, 110, 116, 61, 44, 32, 103, 97, 115, 95, 97, 118, 97, 105, 108, 61, 41, 32, 82, 101, 115, 117, 108, 116, 58, 32, 77, 101, 103, 97, 116, 114, 111, 110, 32, 111, 110, 95, 116, 114, 97, 110, 115, 102, 101, 114, 32, 103, 97, 115, 58, 32, 103, 111, 116, 32, 32, 40, 114, 101, 99, 111, 114, 100, 101, 100, 32, 97, 116, 32, 107, 101, 121, 32, 52, 41, 0, 0, 0, 91, 44, 10, 10, 93, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 119, 114, 105, 116, 101, 95, 114, 101, 115, 117, 108, 116, 32, 107, 101, 121, 61, 44, 32, 114, 101, 115, 117, 108, 116, 61, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 16, 0, 1, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 35, 0, 1, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 42, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 16, 0, 1, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 44, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 42, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 42, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 60, 0, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 69, 0, 1, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 184, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 1, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 100, 0, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 109, 0, 1, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 121, 0, 1, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 131, 0, 1, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 161, 0, 1, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 135, 1, 1, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 152, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0]
// RW data = [75, 89, 134, 56, 214, 197, 109, 52, 128, 128, 128, 128, 128, 128, 128, 128]
// Instructions = 2402
// Code size = 7195 bytes

      :                          @0
     0: 28 84 02 00 00           jump @45
      :                          @1
     5: 28 25 03 00 00           jump @60
      :                          @2
    10: 28 53 0a                 jump @170
      :                          @3 [@dyn 1]
    13: 95 11 78 ff              sp = sp + 0xffffffffffffff78
    17: 7b 10 80 00              u64 [sp + 0x80] = ra
    21: 64 82                    t0 = a1
    23: 80 88 34                 a1 = u32 [a1 + 0x34]
    26: 84 89 10                 a2 = a1 & 0x10
    29: 52 09 28                 jump @6 if a2 != 0
      :                          @4
    32: 84 88 20                 a1 = a1 & 0x20
    35: 52 08 68                 jump @10 if a1 != 0
      :                          @5
    38: 81 77                    a0 = i32 [a0]
    40: 89 79                    a2 = a0 <s 0
    42: 85 98 01                 a1 = a2 ^ 0x1
    45: 97 7a 20                 a3 = a0 << 0x20
    48: 98 aa 20                 a3 = a3 >> 0x20
    51: 9a 77                    a0 = -a0
    53: da 9a 07                 a0 = a3 if a2 == 0
    56: 64 29                    a2 = t0
    58: 82 10 80 00              ra = u64 [sp + 0x80]
    62: 95 11 88 00              sp = sp + 0x88
    66: 28 4e 11                 jump @324
      :                          @6
    69: 81 7a                    a3 = i32 [a0]
    71: 33 08 81 00              a1 = 0x81
    75: 95 17 7f                 a0 = sp + 0x7f
    78: 33 03 57                 t1 = 0x57
    81: 01                       fallthrough
      :                          @7
    82: 64 8b                    a4 = a1
    84: 8b ac 04                 i32 a5 = a3 >> 0x4
    87: 84 aa 0f                 a3 = a3 & 0xf
    90: 88 a8 0a                 a1 = a3 <u 0xa
    93: 33 09 30                 a2 = 0x30
    96: da 83 09                 a2 = t1 if a1 == 0
    99: be a9 09                 i32 a2 = a2 + a3
   102: 78 79                    u8 [a0] = a2
   104: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   107: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   110: 64 ca                    a3 = a5
   112: 52 0c e2                 jump @7 if a5 != 0
      :                          @8
   115: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   118: 56 27 80 00 71           jump @16 if a0 >u 128
      :                          @9
   123: 9a 8c 81 00              a5 = 0x81 - a1
   127: 64 1b                    a4 = sp
   129: c8 7b 0b                 a4 = a4 + a0
   132: 33 09 bd 00 01           a2 = 0x100bd
   137: 28 47                    jump @14
      :                          @10
   139: 81 7a                    a3 = i32 [a0]
   141: 33 08 81 00              a1 = 0x81
   145: 95 17 7f                 a0 = sp + 0x7f
   148: 33 03 37                 t1 = 0x37
   151: 01                       fallthrough
      :                          @11
   152: 64 8b                    a4 = a1
   154: 8b ac 04                 i32 a5 = a3 >> 0x4
   157: 84 aa 0f                 a3 = a3 & 0xf
   160: 88 a8 0a                 a1 = a3 <u 0xa
   163: 33 09 30                 a2 = 0x30
   166: da 83 09                 a2 = t1 if a1 == 0
   169: be a9 09                 i32 a2 = a2 + a3
   172: 78 79                    u8 [a0] = a2
   174: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   177: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   180: 64 ca                    a3 = a5
   182: 52 0c e2                 jump @11 if a5 != 0
      :                          @12
   185: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   188: 56 27 80 00 2b           jump @16 if a0 >u 128
      :                          @13
   193: 9a 8c 81 00              a5 = 0x81 - a1
   197: 64 1b                    a4 = sp
   199: c8 7b 0b                 a4 = a4 + a0
   202: 33 09 bd 00 01           a2 = 0x100bd
   207: 01                       fallthrough
      :                          @14
   208: 33 08 01                 a1 = 0x1
   211: 33 0a 02                 a3 = 0x2
   214: 64 27                    a0 = t0
   216: 50 10 04 da 11           ra = 4, jump @334
      :                          @15 [@dyn 2]
   221: 82 10 80 00              ra = u64 [sp + 0x80]
   225: 95 11 88 00              sp = sp + 0x88
   229: 32 00                    ret
      :                          @16
   231: 00                       trap
      :                          @17 [@dyn 3]
   232: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   236: 7b 10 80 00              u64 [sp + 0x80] = ra
   240: 64 82                    t0 = a1
   242: 80 88 34                 a1 = u32 [a1 + 0x34]
   245: 84 89 10                 a2 = a1 & 0x10
   248: 52 09 1b                 jump @20 if a2 != 0
      :                          @18
   251: 84 88 20                 a1 = a1 & 0x20
   254: 52 08 5b                 jump @24 if a1 != 0
      :                          @19
   257: 80 77                    a0 = u32 [a0]
   259: 33 08 01                 a1 = 0x1
   262: 64 29                    a2 = t0
   264: 82 10 80 00              ra = u64 [sp + 0x80]
   268: 95 11 88 00              sp = sp + 0x88
   272: 28 80 10                 jump @324
      :                          @20
   275: 81 7a                    a3 = i32 [a0]
   277: 33 08 81 00              a1 = 0x81
   281: 95 17 7f                 a0 = sp + 0x7f
   284: 33 03 57                 t1 = 0x57
   287: 01                       fallthrough
      :                          @21
   288: 64 8b                    a4 = a1
   290: 8b ac 04                 i32 a5 = a3 >> 0x4
   293: 84 aa 0f                 a3 = a3 & 0xf
   296: 88 a8 0a                 a1 = a3 <u 0xa
   299: 33 09 30                 a2 = 0x30
   302: da 83 09                 a2 = t1 if a1 == 0
   305: be a9 09                 i32 a2 = a2 + a3
   308: 78 79                    u8 [a0] = a2
   310: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   313: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   316: 64 ca                    a3 = a5
   318: 52 0c e2                 jump @21 if a5 != 0
      :                          @22
   321: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   324: 56 27 80 00 71           jump @30 if a0 >u 128
      :                          @23
   329: 9a 8c 81 00              a5 = 0x81 - a1
   333: 64 1b                    a4 = sp
   335: c8 7b 0b                 a4 = a4 + a0
   338: 33 09 bd 00 01           a2 = 0x100bd
   343: 28 47                    jump @28
      :                          @24
   345: 81 7a                    a3 = i32 [a0]
   347: 33 08 81 00              a1 = 0x81
   351: 95 17 7f                 a0 = sp + 0x7f
   354: 33 03 37                 t1 = 0x37
   357: 01                       fallthrough
      :                          @25
   358: 64 8b                    a4 = a1
   360: 8b ac 04                 i32 a5 = a3 >> 0x4
   363: 84 aa 0f                 a3 = a3 & 0xf
   366: 88 a8 0a                 a1 = a3 <u 0xa
   369: 33 09 30                 a2 = 0x30
   372: da 83 09                 a2 = t1 if a1 == 0
   375: be a9 09                 i32 a2 = a2 + a3
   378: 78 79                    u8 [a0] = a2
   380: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   383: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   386: 64 ca                    a3 = a5
   388: 52 0c e2                 jump @25 if a5 != 0
      :                          @26
   391: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   394: 56 27 80 00 2b           jump @30 if a0 >u 128
      :                          @27
   399: 9a 8c 81 00              a5 = 0x81 - a1
   403: 64 1b                    a4 = sp
   405: c8 7b 0b                 a4 = a4 + a0
   408: 33 09 bd 00 01           a2 = 0x100bd
   413: 01                       fallthrough
      :                          @28
   414: 33 08 01                 a1 = 0x1
   417: 33 0a 02                 a3 = 0x2
   420: 64 27                    a0 = t0
   422: 50 10 08 0c 11           ra = 8, jump @334
      :                          @29 [@dyn 4]
   427: 82 10 80 00              ra = u64 [sp + 0x80]
   431: 95 11 88 00              sp = sp + 0x88
   435: 32 00                    ret
      :                          @30
   437: 00                       trap
      :                          @31 [@dyn 5]
   438: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   442: 7b 10 80 00              u64 [sp + 0x80] = ra
   446: 64 82                    t0 = a1
   448: 80 88 34                 a1 = u32 [a1 + 0x34]
   451: 84 89 10                 a2 = a1 & 0x10
   454: 52 09 1b                 jump @34 if a2 != 0
      :                          @32
   457: 84 88 20                 a1 = a1 & 0x20
   460: 52 08 5b                 jump @38 if a1 != 0
      :                          @33
   463: 82 77                    a0 = u64 [a0]
   465: 33 08 01                 a1 = 0x1
   468: 64 29                    a2 = t0
   470: 82 10 80 00              ra = u64 [sp + 0x80]
   474: 95 11 88 00              sp = sp + 0x88
   478: 28 b2 0f                 jump @324
      :                          @34
   481: 82 7a                    a3 = u64 [a0]
   483: 33 08 81 00              a1 = 0x81
   487: 95 17 7f                 a0 = sp + 0x7f
   490: 33 03 57                 t1 = 0x57
   493: 01                       fallthrough
      :                          @35
   494: 64 8b                    a4 = a1
   496: 98 ac 04                 a5 = a3 >> 0x4
   499: 84 aa 0f                 a3 = a3 & 0xf
   502: 88 a8 0a                 a1 = a3 <u 0xa
   505: 33 09 30                 a2 = 0x30
   508: da 83 09                 a2 = t1 if a1 == 0
   511: be a9 09                 i32 a2 = a2 + a3
   514: 78 79                    u8 [a0] = a2
   516: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   519: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   522: 64 ca                    a3 = a5
   524: 52 0c e2                 jump @35 if a5 != 0
      :                          @36
   527: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   530: 56 27 80 00 71           jump @44 if a0 >u 128
      :                          @37
   535: 9a 8c 81 00              a5 = 0x81 - a1
   539: 64 1b                    a4 = sp
   541: c8 7b 0b                 a4 = a4 + a0
   544: 33 09 bd 00 01           a2 = 0x100bd
   549: 28 47                    jump @42
      :                          @38
   551: 82 7a                    a3 = u64 [a0]
   553: 33 08 81 00              a1 = 0x81
   557: 95 17 7f                 a0 = sp + 0x7f
   560: 33 03 37                 t1 = 0x37
   563: 01                       fallthrough
      :                          @39
   564: 64 8b                    a4 = a1
   566: 98 ac 04                 a5 = a3 >> 0x4
   569: 84 aa 0f                 a3 = a3 & 0xf
   572: 88 a8 0a                 a1 = a3 <u 0xa
   575: 33 09 30                 a2 = 0x30
   578: da 83 09                 a2 = t1 if a1 == 0
   581: be a9 09                 i32 a2 = a2 + a3
   584: 78 79                    u8 [a0] = a2
   586: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   589: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   592: 64 ca                    a3 = a5
   594: 52 0c e2                 jump @39 if a5 != 0
      :                          @40
   597: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   600: 56 27 80 00 2b           jump @44 if a0 >u 128
      :                          @41
   605: 9a 8c 81 00              a5 = 0x81 - a1
   609: 64 1b                    a4 = sp
   611: c8 7b 0b                 a4 = a4 + a0
   614: 33 09 bd 00 01           a2 = 0x100bd
   619: 01                       fallthrough
      :                          @42
   620: 33 08 01                 a1 = 0x1
   623: 33 0a 02                 a3 = 0x2
   626: 64 27                    a0 = t0
   628: 50 10 0c 3e 10           ra = 12, jump @334
      :                          @43 [@dyn 6]
   633: 82 10 80 00              ra = u64 [sp + 0x80]
   637: 95 11 88 00              sp = sp + 0x88
   641: 32 00                    ret
      :                          @44
   643: 00                       trap
      :                          @45 [export #0: 'refine']
   644: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   647: 7b 10 18                 u64 [sp + 0x18] = ra
   650: 7b 15 10                 u64 [sp + 0x10] = s0
   653: 7b 16 08                 u64 [sp + 0x8] = s1
   656: 64 86                    s1 = a1
   658: 64 78                    a1 = a0
   660: 33 09 04                 a2 = 0x4
   663: 33 07 00 00 01           a0 = 0x10000
   668: ac 96 7c                 jump @57 if s1 <u a2
      :                          @46
   671: 95 66 fc                 s1 = s1 + 0xfffffffffffffffc
   674: 51 06 76                 jump @57 if s1 == 0
      :                          @47
   677: 95 87 04                 a0 = a1 + 0x4
   680: 7d 78                    a1 = i8 [a0]
   682: 33 05 01                 s0 = 0x1
   685: 59 08 3a                 jump @55 if a1 >=s 0
      :                          @48
   688: 84 89 ff 00              a2 = a1 & 0xff
   692: 33 05 02                 s0 = 0x2
   695: 53 29 c0 00 2d           jump @54 if a2 <u 192
      :                          @49
   700: 33 05 03                 s0 = 0x3
   703: 53 29 e0 00 25           jump @54 if a2 <u 224
      :                          @50
   708: 33 05 04                 s0 = 0x4
   711: 53 29 f0 00 1d           jump @54 if a2 <u 240
      :                          @51
   716: 33 05 05                 s0 = 0x5
   719: 53 29 f8 00 15           jump @54 if a2 <u 248
      :                          @52
   724: 33 05 06                 s0 = 0x6
   727: 53 29 fc 00 0d           jump @54 if a2 <u 252
      :                          @53
   732: 88 98 fe 00              a1 = a2 <u 0xfe
   736: 9a 85 08                 s0 = 0x8 - a1
   739: 01                       fallthrough
      :                          @54
   740: ac 56 45                 jump @59 if s1 <u s0
      :                          @55
   743: 64 58                    a1 = s0
   745: 7b 17                    u64 [sp] = a0
   747: 50 10 0e a2 16           ra = 14, jump @480
      :                          @56 [@dyn 7]
   752: 64 78                    a1 = a0
   754: e4 56 07                 a0 = maxu(s1, s0)
   757: c9 57 07                 a0 = a0 - s0
   760: d8 87 09                 a2 = a0 <u a1
   763: e4 87 07                 a0 = maxu(a0, a1)
   766: c9 87 07                 a0 = a0 - a1
   769: 88 77 20                 a0 = a0 <u 0x20
   772: d4 79 09                 a2 = a2 | a0
   775: 82 17                    a0 = u64 [sp]
   777: c8 75 05                 s0 = s0 + a0
   780: 94 98                    a1 = 0 if a2 != 0
   782: 33 07 00 00 01           a0 = 0x10000
   787: da 95 07                 a0 = s0 if a2 == 0
   790: 28 05                    jump @58
      :                          @57
   792: 33 08                    a1 = 0
   794: 01                       fallthrough
      :                          @58
   795: 82 10 18                 ra = u64 [sp + 0x18]
   798: 82 15 10                 s0 = u64 [sp + 0x10]
   801: 82 16 08                 s1 = u64 [sp + 0x8]
   804: 95 11 20                 sp = sp + 0x20
   807: 32 00                    ret
      :                          @59
   809: 00                       trap
      :                          @60 [export #1: 'accumulate']
   810: 95 11 f0 fd              sp = sp + 0xfffffffffffffdf0
   814: 7b 10 08 02              u64 [sp + 0x208] = ra
   818: 7b 15 00 02              u64 [sp + 0x200] = s0
   822: 7b 16 f8 01              u64 [sp + 0x1f8] = s1
   826: 33 09 08                 a2 = 0x8
   829: ac 98 e8 00              jump @90 if a1 <u a2
      :                          @61
   833: 51 17 fc 18 07           jump @166 if a0 == 4294967292
      :                          @62
   838: 51 07 14 07              jump @167 if a0 == 0
      :                          @63
   842: 95 8a f8                 a3 = a1 + 0xfffffffffffffff8
   845: 95 75 08                 s0 = a0 + 0x8
   848: 51 0a 45                 jump @73 if a3 == 0
      :                          @64
   851: 7d 58                    a1 = i8 [s0]
   853: 33 06 01                 s1 = 0x1
   856: 59 08 40                 jump @74 if a1 >=s 0
      :                          @65
   859: 84 89 ff 00              a2 = a1 & 0xff
   863: 33 06 02                 s1 = 0x2
   866: 53 29 c0 00 2d           jump @71 if a2 <u 192
      :                          @66
   871: 33 06 03                 s1 = 0x3
   874: 53 29 e0 00 25           jump @71 if a2 <u 224
      :                          @67
   879: 33 06 04                 s1 = 0x4
   882: 53 29 f0 00 1d           jump @71 if a2 <u 240
      :                          @68
   887: 33 06 05                 s1 = 0x5
   890: 53 29 f8 00 15           jump @71 if a2 <u 248
      :                          @69
   895: 33 06 06                 s1 = 0x6
   898: 53 29 fc 00 0d           jump @71 if a2 <u 252
      :                          @70
   903: 88 98 fe 00              a1 = a2 <u 0xfe
   907: 9a 86 08                 s1 = 0x8 - a1
   910: 01                       fallthrough
      :                          @71
   911: ae 6a 09                 jump @74 if a3 >=u s1
      :                          @72
   914: 28 93 00                 jump @90
      :                          @73
   917: 33 06                    s1 = 0
   919: 01                       fallthrough
      :                          @74
   920: 7b 16 60                 u64 [sp + 0x60] = s1
   923: 64 57                    a0 = s0
   925: 64 68                    a1 = s1
   927: 64 a6                    s1 = a3
   929: 50 10 10 ec 15           ra = 16, jump @480
      :                          @75 [@dyn 8]
   934: 82 1a 60                 a3 = u64 [sp + 0x60]
   937: 51 07 7c                 jump @90 if a0 == 0
      :                          @76
   940: e4 a6 07                 a0 = maxu(s1, a3)
   943: c9 a7 07                 a0 = a0 - a3
   946: 53 17 60 73              jump @90 if a0 <u 96
      :                          @77
   950: c8 5a 08                 a1 = a3 + s0
   953: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   956: 95 87 60                 a0 = a1 + 0x60
   959: 7b 17 60                 u64 [sp + 0x60] = a0
   962: 51 06 4c                 jump @88 if s1 == 0
      :                          @78
   965: 7d 78                    a1 = i8 [a0]
   967: 33 05 01                 s0 = 0x1
   970: 59 08 37                 jump @85 if a1 >=s 0
      :                          @79
   973: 84 89 ff 00              a2 = a1 & 0xff
   977: 33 05 02                 s0 = 0x2
   980: 53 29 c0 00 2d           jump @85 if a2 <u 192
      :                          @80
   985: 33 05 03                 s0 = 0x3
   988: 53 29 e0 00 25           jump @85 if a2 <u 224
      :                          @81
   993: 33 05 04                 s0 = 0x4
   996: 53 29 f0 00 1d           jump @85 if a2 <u 240
      :                          @82
  1001: 33 05 05                 s0 = 0x5
  1004: 53 29 f8 00 15           jump @85 if a2 <u 248
      :                          @83
  1009: 33 05 06                 s0 = 0x6
  1012: 53 29 fc 00 0d           jump @85 if a2 <u 252
      :                          @84
  1017: 88 98 fe 00              a1 = a2 <u 0xfe
  1021: 9a 85 08                 s0 = 0x8 - a1
  1024: 01                       fallthrough
      :                          @85
  1025: ac 56 5a 06              jump @168 if s1 <u s0
      :                          @86
  1029: 64 58                    a1 = s0
  1031: 50 10 12 86 15           ra = 18, jump @480
      :                          @87 [@dyn 9]
  1036: 28 07                    jump @89
      :                          @88
  1038: 33 05                    s0 = 0
  1040: 33 07                    a0 = 0
  1042: 01                       fallthrough
      :                          @89
  1043: e4 56 08                 a1 = maxu(s1, s0)
  1046: c9 58 08                 a1 = a1 - s0
  1049: e4 78 08                 a1 = maxu(a1, a0)
  1052: c9 78 08                 a1 = a1 - a0
  1055: 33 09 21                 a2 = 0x21
  1058: ae 98 1f                 jump @92 if a1 >=u a2
      :                          @90
  1061: 33 08                    a1 = 0
  1063: 33 05 00 00 01           s0 = 0x10000
  1068: 01                       fallthrough
      :                          @91
  1069: 64 57                    a0 = s0
  1071: 82 10 08 02              ra = u64 [sp + 0x208]
  1075: 82 15 00 02              s0 = u64 [sp + 0x200]
  1079: 82 16 f8 01              s1 = u64 [sp + 0x1f8]
  1083: 95 11 10 02              sp = sp + 0x210
  1087: 32 00                    ret
      :                          @92
  1089: 82 19 60                 a2 = u64 [sp + 0x60]
  1092: c8 95 05                 s0 = s0 + a2
  1095: c8 57 07                 a0 = a0 + s0
  1098: 7c 79 20                 a2 = u8 [a0 + 0x20]
  1101: 51 09 09                 jump @94 if a2 == 0
      :                          @93
  1104: 33 09                    a2 = 0
  1106: 33 08                    a1 = 0
  1108: 28 6e                    jump @107
      :                          @94
  1110: 95 8a df                 a3 = a1 + 0xffffffffffffffdf
  1113: 95 75 21                 s0 = a0 + 0x21
  1116: 51 0a 54                 jump @105 if a3 == 0
      :                          @95
  1119: 7d 57                    a0 = i8 [s0]
  1121: 33 06 01                 s1 = 0x1
  1124: 59 07 37                 jump @102 if a0 >=s 0
      :                          @96
  1127: 84 77 ff 00              a0 = a0 & 0xff
  1131: 33 06 02                 s1 = 0x2
  1134: 53 27 c0 00 2d           jump @102 if a0 <u 192
      :                          @97
  1139: 33 06 03                 s1 = 0x3
  1142: 53 27 e0 00 25           jump @102 if a0 <u 224
      :                          @98
  1147: 33 06 04                 s1 = 0x4
  1150: 53 27 f0 00 1d           jump @102 if a0 <u 240
      :                          @99
  1155: 33 06 05                 s1 = 0x5
  1158: 53 27 f8 00 15           jump @102 if a0 <u 248
      :                          @100
  1163: 33 06 06                 s1 = 0x6
  1166: 53 27 fc 00 0d           jump @102 if a0 <u 252
      :                          @101
  1171: 88 77 fe 00              a0 = a0 <u 0xfe
  1175: 9a 76 08                 s1 = 0x8 - a0
  1178: 01                       fallthrough
      :                          @102
  1179: 7b 1a 60                 u64 [sp + 0x60] = a3
  1182: ac 6a be 05              jump @169 if a3 <u s1
      :                          @103
  1186: 64 57                    a0 = s0
  1188: 64 68                    a1 = s1
  1190: 50 10 14 e7 14           ra = 20, jump @480
      :                          @104 [@dyn 10]
  1195: 82 1a 60                 a3 = u64 [sp + 0x60]
  1198: 28 07                    jump @106
      :                          @105
  1200: 33 06                    s1 = 0
  1202: 33 07                    a0 = 0
  1204: 01                       fallthrough
      :                          @106
  1205: c8 65 08                 a1 = s0 + s1
  1208: e4 6a 09                 a2 = maxu(a3, s1)
  1211: c9 69 09                 a2 = a2 - s1
  1214: e6 79 09                 a2 = minu(a2, a0)
  1217: 01                       fallthrough
      :                          @107
  1218: 48 11 70                 u32 [sp + 112] = 0
  1221: 49 11 68                 u64 [sp + 104] = 0
  1224: 48 21 80 00              u32 [sp + 128] = 0
  1228: 49 11 78                 u64 [sp + 120] = 0
  1231: 46 21 87 00              u8 [sp + 135] = 0
  1235: 48 21 90 00              u32 [sp + 144] = 0
  1239: 49 21 88 00              u64 [sp + 136] = 0
  1243: 80 87                    a0 = u32 [a1]
  1245: c8 98 08                 a1 = a1 + a2
  1248: 7b 17 98 00              u64 [sp + 0x98] = a0
  1252: 80 85 fc                 s0 = u32 [a1 + 0xfffffffffffffffc]
  1255: 7b 15 a0 00              u64 [sp + 0xa0] = s0
  1259: 95 18 87 00              a1 = sp + 0x87
  1263: 33 09 01                 a2 = 0x1
  1266: 95 1a 68                 a3 = sp + 0x68
  1269: 33 0c 0c                 a5 = 0xc
  1272: 33 0b                    a4 = 0
  1274: 0a 02                    ecalli 2 // 'read'
  1276: 95 18 87 00              a1 = sp + 0x87
  1280: 33 09 01                 a2 = 0x1
  1283: 95 1a 78                 a3 = sp + 0x78
  1286: 33 0c 0c                 a5 = 0xc
  1289: 64 57                    a0 = s0
  1291: 33 0b                    a4 = 0
  1293: 0a 02                    ecalli 2 // 'read'
  1295: 81 17 6c                 a0 = i32 [sp + 0x6c]
  1298: 33 06 ff ef              s1 = 0xffffffffffffefff
  1302: 7b 16 50                 u64 [sp + 0x50] = s1
  1305: 81 18 7c                 a1 = i32 [sp + 0x7c]
  1308: 81 19 68                 a2 = i32 [sp + 0x68]
  1311: 7a 17 a8 00              u32 [sp + 0xa8] = a0
  1315: 81 17 70                 a0 = i32 [sp + 0x70]
  1318: 7b 17 60                 u64 [sp + 0x60] = a0
  1321: 7a 18 ac 00              u32 [sp + 0xac] = a1
  1325: 81 17 80 00              a0 = i32 [sp + 0x80]
  1329: 7b 17 58                 u64 [sp + 0x58] = a0
  1332: 7a 19 b0 00              u32 [sp + 0xb0] = a2
  1336: 95 19 b0 00              a2 = sp + 0xb0
  1340: 7b 19 b8 00              u64 [sp + 0xb8] = a2
  1344: 33 08 06                 a1 = 0x6
  1347: 7b 18 c0 00              u64 [sp + 0xc0] = a1
  1351: 95 17 98 00              a0 = sp + 0x98
  1355: 7b 17 c8 00              u64 [sp + 0xc8] = a0
  1359: 33 07 0a                 a0 = 0xa
  1362: 7b 17 38                 u64 [sp + 0x38] = a0
  1365: 7b 17 d0 00              u64 [sp + 0xd0] = a0
  1369: 7b 19 d8 00              u64 [sp + 0xd8] = a2
  1373: 7b 18 e0 00              u64 [sp + 0xe0] = a1
  1377: 95 17 a8 00              a0 = sp + 0xa8
  1381: 7b 17 e8 00              u64 [sp + 0xe8] = a0
  1385: 7b 18 48                 u64 [sp + 0x48] = a1
  1388: 7b 18 f0 00              u64 [sp + 0xf0] = a1
  1392: 33 07 a8 01 01           a0 = 0x101a8
  1397: 7b 17 60 01              u64 [sp + 0x160] = a0
  1401: 49 21 68 01 04           u64 [sp + 360] = 0x4
  1406: 49 21 80 01              u64 [sp + 384] = 0
  1410: 95 18 b8 00              a1 = sp + 0xb8
  1414: 7b 18 70 01              u64 [sp + 0x170] = a1
  1418: 49 21 78 01 04           u64 [sp + 376] = 0x4
  1423: 95 17 c8 01              a0 = sp + 0x1c8
  1427: 95 18 60 01              a1 = sp + 0x160
  1431: 50 10 16 82 08           ra = 22, jump @243
      :                          @108 [@dyn 11]
  1436: 82 15 d0 01              s0 = u64 [sp + 0x1d0]
  1440: 82 1b d8 01              a4 = u64 [sp + 0x1d8]
  1444: 82 16 c8 01              s1 = u64 [sp + 0x1c8]
  1448: 33 07 02                 a0 = 0x2
  1451: 33 08                    a1 = 0
  1453: 33 09                    a2 = 0
  1455: 64 5a                    a3 = s0
  1457: 33 00 18                 ra = 0x18
  1460: 0a 64                    ecalli 100 // 'log'
  1462: 01                       fallthrough
      :                          @109 [@dyn 12]
  1463: 82 17 50                 a0 = u64 [sp + 0x50]
  1466: c8 67 07                 a0 = a0 + s1
  1469: 33 08 40 00 03           a1 = 0x30040
  1474: 7b 18 10                 u64 [sp + 0x10] = a1
  1477: 53 27 00 f0 23           jump @115 if a0 <u 4294963200
      :                          @110
  1482: 82 18 10                 a1 = u64 [sp + 0x10]
  1485: 95 87 00 10              a0 = a1 + 0x1000
  1489: 01                       fallthrough
      :                          @111
  1490: 82 78                    a1 = u64 [a0]
  1492: c9 87 09                 a2 = a0 - a1
  1495: ab 59 11                 jump @115 if a2 != s0
      :                          @112
  1498: c9 68 09                 a2 = a1 - s1
  1501: 01                       fallthrough
      :                          @113
  1502: 82 7a                    a3 = u64 [a0]
  1504: ab 8a f2                 jump @111 if a3 != a1
      :                          @114
  1507: 7b 79                    u64 [a0] = a2
  1509: 33 0b                    a4 = 0
  1511: 01                       fallthrough
      :                          @115
  1512: 95 19 b0 00              a2 = sp + 0xb0
  1516: 7b 19 b8 00              u64 [sp + 0xb8] = a2
  1520: 82 18 48                 a1 = u64 [sp + 0x48]
  1523: 7b 18 c0 00              u64 [sp + 0xc0] = a1
  1527: 95 17 a0 00              a0 = sp + 0xa0
  1531: 7b 17 c8 00              u64 [sp + 0xc8] = a0
  1535: 82 17 38                 a0 = u64 [sp + 0x38]
  1538: 7b 17 d0 00              u64 [sp + 0xd0] = a0
  1542: 7b 19 d8 00              u64 [sp + 0xd8] = a2
  1546: 7b 18 e0 00              u64 [sp + 0xe0] = a1
  1550: 95 17 ac 00              a0 = sp + 0xac
  1554: 7b 17 e8 00              u64 [sp + 0xe8] = a0
  1558: 7b 18 f0 00              u64 [sp + 0xf0] = a1
  1562: 33 07 e8 01 01           a0 = 0x101e8
  1567: 7b 17 60 01              u64 [sp + 0x160] = a0
  1571: 49 21 68 01 04           u64 [sp + 360] = 0x4
  1576: 49 21 80 01              u64 [sp + 384] = 0
  1580: 95 18 b8 00              a1 = sp + 0xb8
  1584: 7b 18 70 01              u64 [sp + 0x170] = a1
  1588: 49 21 78 01 04           u64 [sp + 376] = 0x4
  1593: 95 17 c8 01              a0 = sp + 0x1c8
  1597: 95 18 60 01              a1 = sp + 0x160
  1601: 50 10 1a d8 07           ra = 26, jump @243
      :                          @116 [@dyn 13]
  1606: 82 15 d0 01              s0 = u64 [sp + 0x1d0]
  1610: 82 1b d8 01              a4 = u64 [sp + 0x1d8]
  1614: 82 16 c8 01              s1 = u64 [sp + 0x1c8]
  1618: 33 07 02                 a0 = 0x2
  1621: 33 08                    a1 = 0
  1623: 33 09                    a2 = 0
  1625: 64 5a                    a3 = s0
  1627: 33 00 1c                 ra = 0x1c
  1630: 0a 64                    ecalli 100 // 'log'
  1632: 01                       fallthrough
      :                          @117 [@dyn 14]
  1633: 82 17 50                 a0 = u64 [sp + 0x50]
  1636: c8 67 07                 a0 = a0 + s1
  1639: 53 27 00 f0 21           jump @123 if a0 <u 4294963200
      :                          @118
  1644: 82 18 10                 a1 = u64 [sp + 0x10]
  1647: 95 87 00 10              a0 = a1 + 0x1000
  1651: 01                       fallthrough
      :                          @119
  1652: 82 78                    a1 = u64 [a0]
  1654: c9 87 09                 a2 = a0 - a1
  1657: ab 59 0f                 jump @123 if a2 != s0
      :                          @120
  1660: c9 68 09                 a2 = a1 - s1
  1663: 01                       fallthrough
      :                          @121
  1664: 82 7a                    a3 = u64 [a0]
  1666: ab 8a f2                 jump @119 if a3 != a1
      :                          @122
  1669: 7b 79                    u64 [a0] = a2
  1671: 01                       fallthrough
      :                          @123
  1672: 81 17 a8 00              a0 = i32 [sp + 0xa8]
  1676: 81 18 ac 00              a1 = i32 [sp + 0xac]
  1680: be 78 05                 i32 s0 = a1 + a0
  1683: 7a 15 b4 00              u32 [sp + 0xb4] = s0
  1687: 82 17 60                 a0 = u64 [sp + 0x60]
  1690: 82 16 58                 s1 = u64 [sp + 0x58]
  1693: be 76 06                 i32 s1 = s1 + a0
  1696: 95 17 b8 00              a0 = sp + 0xb8
  1700: 33 09 80 00              a2 = 0x80
  1704: 33 08                    a1 = 0
  1706: 50 10 1e 90 0a           ra = 30, jump @311
      :                          @124 [@dyn 15]
  1711: 80 17 b0 00              a0 = u32 [sp + 0xb0]
  1715: 7b 17 38 01              u64 [sp + 0x138] = a0
  1719: 97 78 01                 a1 = a0 << 0x1
  1722: 95 88 01                 a1 = a1 + 0x1
  1725: 97 88 20                 a1 = a1 << 0x20
  1728: 98 88 20                 a1 = a1 >> 0x20
  1731: 7b 18 40 01              u64 [sp + 0x140] = a1
  1735: 49 21 48 01 64           u64 [sp + 328] = 0x64
  1740: 48 21 50 01              u32 [sp + 336] = 0
  1744: 51 07 2a 02              jump @148 if a0 == 0
      :                          @125
  1748: 7b 16                    u64 [sp] = s1
  1750: 7b 15 08                 u64 [sp + 0x8] = s0
  1753: 33 05                    s0 = 0
  1755: 33 0a                    a3 = 0
  1757: 14 08 ab aa aa aa 00 00 00 00 a1 = 0xaaaaaaab
  1767: ca 87 08                 a1 = a0 * a1
  1770: 98 88 21                 a1 = a1 >> 0x21
  1773: 97 89 01                 a2 = a1 << 0x1
  1776: bf 87 08                 i32 a1 = a0 - a1
  1779: bf 98 08                 i32 a1 = a1 - a2
  1782: 83 89 ff                 i32 a2 = a1 + 0xffffffffffffffff
  1785: 7b 19 28                 u64 [sp + 0x28] = a2
  1788: 86 88 02                 a1 = a1 | 0x2
  1791: 7b 18 20                 u64 [sp + 0x20] = a1
  1794: 33 08 78 02 01           a1 = 0x10278
  1799: 7b 18 30                 u64 [sp + 0x30] = a1
  1802: 82 18 10                 a1 = u64 [sp + 0x10]
  1805: 95 86 00 10              s1 = a1 + 0x1000
  1809: 83 77                    i32 a0 = a0 + 0
  1811: 7b 17 18                 u64 [sp + 0x18] = a0
  1814: 28 13                    jump @128
      :                          @126
  1816: 82 15 60                 s0 = u64 [sp + 0x60]
  1819: 82 1a 58                 a3 = u64 [sp + 0x58]
  1822: 01                       fallthrough
      :                          @127
  1823: 83 aa 01                 i32 a3 = a3 + 0x1
  1826: 82 17 18                 a0 = u64 [sp + 0x18]
  1829: aa 7a cb 01              jump @147 if a3 == a0
      :                          @128
  1833: 7a 1a 54 01              u32 [sp + 0x154] = a3
  1837: 82 17 20                 a0 = u64 [sp + 0x20]
  1840: 7b 1a 58                 u64 [sp + 0x58] = a3
  1843: 52 17 02 df 00           jump @137 if a0 != 2
      :                          @129
  1848: 82 17 98 00              a0 = u64 [sp + 0x98]
  1852: 82 18 38 01              a1 = u64 [sp + 0x138]
  1856: 82 19 48 01              a2 = u64 [sp + 0x148]
  1860: 95 1a b8 00              a3 = sp + 0xb8
  1864: 0a 0b                    ecalli 11 // 'transfer'
  1866: 7b 17 58 01              u64 [sp + 0x158] = a0
  1870: 83 55 01                 i32 s0 = s0 + 0x1
  1873: 7b 15 60                 u64 [sp + 0x60] = s0
  1876: 7a 15 50 01              u32 [sp + 0x150] = s0
  1880: 95 17 54 01              a0 = sp + 0x154
  1884: 7b 17 60 01              u64 [sp + 0x160] = a0
  1888: 82 17 48                 a0 = u64 [sp + 0x48]
  1891: 7b 17 68 01              u64 [sp + 0x168] = a0
  1895: 95 17 98 00              a0 = sp + 0x98
  1899: 7b 17 70 01              u64 [sp + 0x170] = a0
  1903: 82 17 38                 a0 = u64 [sp + 0x38]
  1906: 7b 17 78 01              u64 [sp + 0x178] = a0
  1910: 95 18 38 01              a1 = sp + 0x138
  1914: 7b 18 80 01              u64 [sp + 0x180] = a1
  1918: 7b 17 88 01              u64 [sp + 0x188] = a0
  1922: 95 18 48 01              a1 = sp + 0x148
  1926: 7b 18 90 01              u64 [sp + 0x190] = a1
  1930: 7b 17 98 01              u64 [sp + 0x198] = a0
  1934: 95 18 58 01              a1 = sp + 0x158
  1938: 7b 18 a0 01              u64 [sp + 0x1a0] = a1
  1942: 7b 17 a8 01              u64 [sp + 0x1a8] = a0
  1946: 82 17 30                 a0 = u64 [sp + 0x30]
  1949: 7b 17 c8 01              u64 [sp + 0x1c8] = a0
  1953: 49 21 d0 01 05           u64 [sp + 464] = 0x5
  1958: 49 21 e8 01              u64 [sp + 488] = 0
  1962: 95 18 60 01              a1 = sp + 0x160
  1966: 7b 18 d8 01              u64 [sp + 0x1d8] = a1
  1970: 49 21 e0 01 05           u64 [sp + 480] = 0x5
  1975: 95 17 b0 01              a0 = sp + 0x1b0
  1979: 95 18 c8 01              a1 = sp + 0x1c8
  1983: 50 10 20 5a 06           ra = 32, jump @243
      :                          @130 [@dyn 16]
  1988: 82 15 b8 01              s0 = u64 [sp + 0x1b8]
  1992: 82 1b c0 01              a4 = u64 [sp + 0x1c0]
  1996: 82 17 b0 01              a0 = u64 [sp + 0x1b0]
  2000: 7b 17 40                 u64 [sp + 0x40] = a0
  2003: 33 07 02                 a0 = 0x2
  2006: 33 08                    a1 = 0
  2008: 33 09                    a2 = 0
  2010: 64 5a                    a3 = s0
  2012: 33 00 22                 ra = 0x22
  2015: 0a 64                    ecalli 100 // 'log'
  2017: 01                       fallthrough
      :                          @131 [@dyn 17]
  2018: 82 1b 40                 a4 = u64 [sp + 0x40]
  2021: 82 17 50                 a0 = u64 [sp + 0x50]
  2024: c8 b7 07                 a0 = a0 + a4
  2027: 53 27 00 f0 20           jump @136 if a0 <u 4294963200
      :                          @132
  2032: 82 67                    a0 = u64 [s1]
  2034: c9 76 08                 a1 = s1 - a0
  2037: ab 58 16                 jump @136 if a1 != s0
      :                          @133
  2040: c9 b7 08                 a1 = a0 - a4
  2043: 01                       fallthrough
      :                          @134
  2044: 82 69                    a2 = u64 [s1]
  2046: ab 79 f2                 jump @132 if a2 != a0
      :                          @135
  2049: 7b 68                    u64 [s1] = a1
  2051: 82 15 60                 s0 = u64 [sp + 0x60]
  2054: 82 1a 58                 a3 = u64 [sp + 0x58]
  2057: 28 09                    jump @137
      :                          @136
  2059: 82 15 60                 s0 = u64 [sp + 0x60]
  2062: 82 1a 58                 a3 = u64 [sp + 0x58]
  2065: 01                       fallthrough
      :                          @137
  2066: 82 17 28                 a0 = u64 [sp + 0x28]
  2069: 55 17 02 0a ff           jump @127 if a0 >=u 2
      :                          @138
  2074: 82 17 a0 00              a0 = u64 [sp + 0xa0]
  2078: 82 18 40 01              a1 = u64 [sp + 0x140]
  2082: 82 19 48 01              a2 = u64 [sp + 0x148]
  2086: 95 1a b8 00              a3 = sp + 0xb8
  2090: 0a 0b                    ecalli 11 // 'transfer'
  2092: 7b 17 58 01              u64 [sp + 0x158] = a0
  2096: 83 55 01                 i32 s0 = s0 + 0x1
  2099: 7b 15 60                 u64 [sp + 0x60] = s0
  2102: 7a 15 50 01              u32 [sp + 0x150] = s0
  2106: 95 17 54 01              a0 = sp + 0x154
  2110: 7b 17 60 01              u64 [sp + 0x160] = a0
  2114: 82 17 48                 a0 = u64 [sp + 0x48]
  2117: 7b 17 68 01              u64 [sp + 0x168] = a0
  2121: 95 17 a0 00              a0 = sp + 0xa0
  2125: 7b 17 70 01              u64 [sp + 0x170] = a0
  2129: 82 17 38                 a0 = u64 [sp + 0x38]
  2132: 7b 17 78 01              u64 [sp + 0x178] = a0
  2136: 95 18 40 01              a1 = sp + 0x140
  2140: 7b 18 80 01              u64 [sp + 0x180] = a1
  2144: 7b 17 88 01              u64 [sp + 0x188] = a0
  2148: 95 18 48 01              a1 = sp + 0x148
  2152: 7b 18 90 01              u64 [sp + 0x190] = a1
  2156: 7b 17 98 01              u64 [sp + 0x198] = a0
  2160: 95 18 58 01              a1 = sp + 0x158
  2164: 7b 18 a0 01              u64 [sp + 0x1a0] = a1
  2168: 7b 17 a8 01              u64 [sp + 0x1a8] = a0
  2172: 82 17 30                 a0 = u64 [sp + 0x30]
  2175: 7b 17 c8 01              u64 [sp + 0x1c8] = a0
  2179: 49 21 d0 01 05           u64 [sp + 464] = 0x5
  2184: 49 21 e8 01              u64 [sp + 488] = 0
  2188: 95 18 60 01              a1 = sp + 0x160
  2192: 7b 18 d8 01              u64 [sp + 0x1d8] = a1
  2196: 49 21 e0 01 05           u64 [sp + 480] = 0x5
  2201: 95 17 b0 01              a0 = sp + 0x1b0
  2205: 95 18 c8 01              a1 = sp + 0x1c8
  2209: 50 10 24 78 05           ra = 36, jump @243
      :                          @139 [@dyn 18]
  2214: 82 15 b8 01              s0 = u64 [sp + 0x1b8]
  2218: 82 1b c0 01              a4 = u64 [sp + 0x1c0]
  2222: 82 17 b0 01              a0 = u64 [sp + 0x1b0]
  2226: 7b 17 40                 u64 [sp + 0x40] = a0
  2229: 33 07 02                 a0 = 0x2
  2232: 33 08                    a1 = 0
  2234: 33 09                    a2 = 0
  2236: 64 5a                    a3 = s0
  2238: 33 00 26                 ra = 0x26
  2241: 0a 64                    ecalli 100 // 'log'
  2243: 01                       fallthrough
      :                          @140 [@dyn 19]
  2244: 82 1b 40                 a4 = u64 [sp + 0x40]
  2247: 82 17 50                 a0 = u64 [sp + 0x50]
  2250: c8 b7 07                 a0 = a0 + a4
  2253: 53 27 00 f0 4b fe        jump @126 if a0 <u 4294963200
      :                          @141
  2259: 82 67                    a0 = u64 [s1]
  2261: c9 76 08                 a1 = s1 - a0
  2264: ab 58 40 fe              jump @126 if a1 != s0
      :                          @142
  2268: c9 b7 08                 a1 = a0 - a4
  2271: 01                       fallthrough
      :                          @143
  2272: 82 69                    a2 = u64 [s1]
  2274: ab 79 f1                 jump @141 if a2 != a0
      :                          @144
  2277: 7b 68                    u64 [s1] = a1
  2279: 33 0a                    a3 = 0
  2281: 01                       fallthrough
      :                          @145
  2282: ab 79 e9                 jump @141 if a2 != a0
      :                          @146
  2285: 28 2b fe                 jump @126
      :                          @147
  2288: 81 17 b0 00              a0 = i32 [sp + 0xb0]
  2292: 82 15 08                 s0 = u64 [sp + 0x8]
  2295: 82 16                    s1 = u64 [sp]
  2297: 01                       fallthrough
      :                          @148
  2298: 7a 17 88 00              u32 [sp + 0x88] = a0
  2302: 7a 15 8c 00              u32 [sp + 0x8c] = s0
  2306: 7a 16 90 00              u32 [sp + 0x90] = s1
  2310: 95 17 b0 00              a0 = sp + 0xb0
  2314: 7b 17 c8 01              u64 [sp + 0x1c8] = a0
  2318: 82 17 48                 a0 = u64 [sp + 0x48]
  2321: 7b 17 d0 01              u64 [sp + 0x1d0] = a0
  2325: 95 18 b4 00              a1 = sp + 0xb4
  2329: 7b 18 d8 01              u64 [sp + 0x1d8] = a1
  2333: 7b 17 e0 01              u64 [sp + 0x1e0] = a0
  2337: 33 07 28 02 01           a0 = 0x10228
  2342: 7b 17 60 01              u64 [sp + 0x160] = a0
  2346: 49 21 68 01 02           u64 [sp + 360] = 0x2
  2351: 49 21 80 01              u64 [sp + 384] = 0
  2355: 95 18 c8 01              a1 = sp + 0x1c8
  2359: 7b 18 70 01              u64 [sp + 0x170] = a1
  2363: 49 21 78 01 02           u64 [sp + 376] = 0x2
  2368: 95 17 b0 01              a0 = sp + 0x1b0
  2372: 95 18 60 01              a1 = sp + 0x160
  2376: 50 10 28 d1 04           ra = 40, jump @243
      :                          @149 [@dyn 20]
  2381: 82 15 b8 01              s0 = u64 [sp + 0x1b8]
  2385: 82 1b c0 01              a4 = u64 [sp + 0x1c0]
  2389: 82 16 b0 01              s1 = u64 [sp + 0x1b0]
  2393: 33 07 02                 a0 = 0x2
  2396: 33 08                    a1 = 0
  2398: 33 09                    a2 = 0
  2400: 64 5a                    a3 = s0
  2402: 33 00 2a                 ra = 0x2a
  2405: 0a 64                    ecalli 100 // 'log'
  2407: 01                       fallthrough
      :                          @150 [@dyn 21]
  2408: 82 17 50                 a0 = u64 [sp + 0x50]
  2411: c8 67 07                 a0 = a0 + s1
  2414: 53 27 00 f0 21           jump @156 if a0 <u 4294963200
      :                          @151
  2419: 82 18 10                 a1 = u64 [sp + 0x10]
  2422: 95 87 00 10              a0 = a1 + 0x1000
  2426: 01                       fallthrough
      :                          @152
  2427: 82 78                    a1 = u64 [a0]
  2429: c9 87 09                 a2 = a0 - a1
  2432: ab 59 0f                 jump @156 if a2 != s0
      :                          @153
  2435: c9 68 09                 a2 = a1 - s1
  2438: 01                       fallthrough
      :                          @154
  2439: 82 7a                    a3 = u64 [a0]
  2441: ab 8a f2                 jump @152 if a3 != a1
      :                          @155
  2444: 7b 79                    u64 [a0] = a2
  2446: 01                       fallthrough
      :                          @156
  2447: 95 17 87 00              a0 = sp + 0x87
  2451: 33 08 01                 a1 = 0x1
  2454: 95 19 88 00              a2 = sp + 0x88
  2458: 33 0a 0c                 a3 = 0xc
  2461: 0a 03                    ecalli 3 // 'write'
  2463: 95 17 b0 00              a0 = sp + 0xb0
  2467: 7b 17 60 01              u64 [sp + 0x160] = a0
  2471: 82 17 48                 a0 = u64 [sp + 0x48]
  2474: 7b 17 68 01              u64 [sp + 0x168] = a0
  2478: 95 18 b4 00              a1 = sp + 0xb4
  2482: 7b 18 70 01              u64 [sp + 0x170] = a1
  2486: 7b 17 78 01              u64 [sp + 0x178] = a0
  2490: 95 17 50 01              a0 = sp + 0x150
  2494: 7b 17 80 01              u64 [sp + 0x180] = a0
  2498: 33 07 02                 a0 = 0x2
  2501: 7b 17 88 01              u64 [sp + 0x188] = a0
  2505: 33 07 48 02 01           a0 = 0x10248
  2510: 7b 17 c8 01              u64 [sp + 0x1c8] = a0
  2514: 49 21 d0 01 03           u64 [sp + 464] = 0x3
  2519: 49 21 e8 01              u64 [sp + 488] = 0
  2523: 95 18 60 01              a1 = sp + 0x160
  2527: 7b 18 d8 01              u64 [sp + 0x1d8] = a1
  2531: 49 21 e0 01 03           u64 [sp + 480] = 0x3
  2536: 95 17 b0 01              a0 = sp + 0x1b0
  2540: 95 18 c8 01              a1 = sp + 0x1c8
  2544: 50 10 2c 29 04           ra = 44, jump @243
      :                          @157 [@dyn 22]
  2549: 82 15 b8 01              s0 = u64 [sp + 0x1b8]
  2553: 82 1b c0 01              a4 = u64 [sp + 0x1c0]
  2557: 82 16 b0 01              s1 = u64 [sp + 0x1b0]
  2561: 33 07 02                 a0 = 0x2
  2564: 33 08                    a1 = 0
  2566: 33 09                    a2 = 0
  2568: 64 5a                    a3 = s0
  2570: 33 00 2e                 ra = 0x2e
  2573: 0a 64                    ecalli 100 // 'log'
  2575: 01                       fallthrough
      :                          @158 [@dyn 23]
  2576: 82 17 50                 a0 = u64 [sp + 0x50]
  2579: c8 67 07                 a0 = a0 + s1
  2582: 53 27 00 f0 23           jump @164 if a0 <u 4294963200
      :                          @159
  2587: 82 18 10                 a1 = u64 [sp + 0x10]
  2590: 95 87 00 10              a0 = a1 + 0x1000
  2594: 01                       fallthrough
      :                          @160
  2595: 82 78                    a1 = u64 [a0]
  2597: c9 87 09                 a2 = a0 - a1
  2600: ab 59 11                 jump @164 if a2 != s0
      :                          @161
  2603: c9 68 09                 a2 = a1 - s1
  2606: 01                       fallthrough
      :                          @162
  2607: 82 7a                    a3 = u64 [a0]
  2609: ab 8a f2                 jump @160 if a3 != a1
      :                          @163
  2612: 7b 79                    u64 [a0] = a2
  2614: 33 0b                    a4 = 0
  2616: 01                       fallthrough
      :                          @164
  2617: 33 05 11 00 03           s0 = 0x30011
  2622: 95 18 88 00              a1 = sp + 0x88
  2626: 33 09 0c                 a2 = 0xc
  2629: 33 07 11 00 03           a0 = 0x30011
  2634: 50 10 30 3e 06           ra = 48, jump @293
      :                          @165 [@dyn 24]
  2639: 64 57                    a0 = s0
  2641: 0a 10                    ecalli 16 // 'oyield'
  2643: 33 08 20                 a1 = 0x20
  2646: 28 d7 f9                 jump @91
      :                          @166
  2649: 00                       trap
      :                          @167
  2650: 00                       trap
      :                          @168
  2651: 00                       trap
      :                          @169
  2652: 00                       trap
      :                          @170 [export #2: 'on_transfer']
  2653: 95 11 d8 fe              sp = sp + 0xfffffffffffffed8
  2657: 7b 10 20 01              u64 [sp + 0x120] = ra
  2661: 7b 15 18 01              u64 [sp + 0x118] = s0
  2665: 7b 16 10 01              u64 [sp + 0x110] = s1
  2669: 49 11 10 ff ef           u64 [sp + 16] = 0xffffffffffffefff
  2674: 0a                       ecalli 0 // 'gas'
  2675: 7b 17 18                 u64 [sp + 0x18] = a0
  2678: 7b 17 20                 u64 [sp + 0x20] = a0
  2681: 46 11 2f 04              u8 [sp + 47] = 0x4
  2685: 7b 17 30                 u64 [sp + 0x30] = a0
  2688: 95 17 2f                 a0 = sp + 0x2f
  2691: 33 08 01                 a1 = 0x1
  2694: 95 19 30                 a2 = sp + 0x30
  2697: 33 0a 08                 a3 = 0x8
  2700: 0a 03                    ecalli 3 // 'write'
  2702: 95 17 2f                 a0 = sp + 0x2f
  2705: 7b 17 80 00              u64 [sp + 0x80] = a0
  2709: 33 07 82 00              a0 = 0x82
  2713: 7b 17 88 00              u64 [sp + 0x88] = a0
  2717: 95 17 20                 a0 = sp + 0x20
  2720: 7b 17 90 00              u64 [sp + 0x90] = a0
  2724: 49 21 a0 00 02           u64 [sp + 160] = 0x2
  2729: 49 21 b0 00 02           u64 [sp + 176] = 0x2
  2734: 49 21 c0 00              u64 [sp + 192] = 0
  2738: 14 07 20 00 00 00 10 00 00 00 a0 = 0x1000000020
  2748: 7b 17 c8 00              u64 [sp + 0xc8] = a0
  2752: 46 21 d0 00 03           u8 [sp + 208] = 0x3
  2757: 49 21 d8 00 02           u64 [sp + 216] = 0x2
  2762: 49 21 e8 00 02           u64 [sp + 232] = 0x2
  2767: 49 21 f8 00 01           u64 [sp + 248] = 0x1
  2772: 7b 17 00 01              u64 [sp + 0x100] = a0
  2776: 33 07 0a                 a0 = 0xa
  2779: 7b 17 08                 u64 [sp + 0x8] = a0
  2782: 7b 17 98 00              u64 [sp + 0x98] = a0
  2786: 46 21 08 01 03           u8 [sp + 264] = 0x3
  2791: 33 07 48 03 01           a0 = 0x10348
  2796: 7b 17 50                 u64 [sp + 0x50] = a0
  2799: 49 11 58 02              u64 [sp + 88] = 0x2
  2803: 95 17 a0 00              a0 = sp + 0xa0
  2807: 7b 17 70                 u64 [sp + 0x70] = a0
  2810: 49 11 78 02              u64 [sp + 120] = 0x2
  2814: 95 17 80 00              a0 = sp + 0x80
  2818: 7b 17 60                 u64 [sp + 0x60] = a0
  2821: 49 11 68 02              u64 [sp + 104] = 0x2
  2825: 95 17 38                 a0 = sp + 0x38
  2828: 95 18 50                 a1 = sp + 0x50
  2831: 50 10 32 0a 03           ra = 50, jump @243
      :                          @171 [@dyn 25]
  2836: 82 15 40                 s0 = u64 [sp + 0x40]
  2839: 82 1b 48                 a4 = u64 [sp + 0x48]
  2842: 82 16 38                 s1 = u64 [sp + 0x38]
  2845: 33 07 02                 a0 = 0x2
  2848: 33 08                    a1 = 0
  2850: 33 09                    a2 = 0
  2852: 64 5a                    a3 = s0
  2854: 33 00 34                 ra = 0x34
  2857: 0a 64                    ecalli 100 // 'log'
  2859: 01                       fallthrough
      :                          @172 [@dyn 26]
  2860: 82 17 10                 a0 = u64 [sp + 0x10]
  2863: c8 67 07                 a0 = a0 + s1
  2866: 33 0c 40 00 03           a5 = 0x30040
  2871: 53 27 00 f0 20           jump @178 if a0 <u 4294963200
      :                          @173
  2876: 95 c7 00 10              a0 = a5 + 0x1000
  2880: 01                       fallthrough
      :                          @174
  2881: 82 78                    a1 = u64 [a0]
  2883: c9 87 09                 a2 = a0 - a1
  2886: ab 59 11                 jump @178 if a2 != s0
      :                          @175
  2889: c9 68 09                 a2 = a1 - s1
  2892: 01                       fallthrough
      :                          @176
  2893: 82 7a                    a3 = u64 [a0]
  2895: ab 8a f2                 jump @174 if a3 != a1
      :                          @177
  2898: 7b 79                    u64 [a0] = a2
  2900: 33 0b                    a4 = 0
  2902: 01                       fallthrough
      :                          @178
  2903: 7b 1c                    u64 [sp] = a5
  2905: 95 17 18                 a0 = sp + 0x18
  2908: 7b 17 80 00              u64 [sp + 0x80] = a0
  2912: 82 17 08                 a0 = u64 [sp + 0x8]
  2915: 7b 17 88 00              u64 [sp + 0x88] = a0
  2919: 33 07 c8 02 01           a0 = 0x102c8
  2924: 7b 17 a0 00              u64 [sp + 0xa0] = a0
  2928: 49 21 a8 00 02           u64 [sp + 168] = 0x2
  2933: 49 21 c0 00              u64 [sp + 192] = 0
  2937: 95 17 80 00              a0 = sp + 0x80
  2941: 7b 17 b0 00              u64 [sp + 0xb0] = a0
  2945: 49 21 b8 00 01           u64 [sp + 184] = 0x1
  2950: 95 17 50                 a0 = sp + 0x50
  2953: 95 18 a0 00              a1 = sp + 0xa0
  2957: 50 10 36 8c 02           ra = 54, jump @243
      :                          @179 [@dyn 27]
  2962: 82 15 58                 s0 = u64 [sp + 0x58]
  2965: 82 1b 60                 a4 = u64 [sp + 0x60]
  2968: 82 16 50                 s1 = u64 [sp + 0x50]
  2971: 33 07 02                 a0 = 0x2
  2974: 33 08                    a1 = 0
  2976: 33 09                    a2 = 0
  2978: 64 5a                    a3 = s0
  2980: 33 00 38                 ra = 0x38
  2983: 0a 64                    ecalli 100 // 'log'
  2985: 01                       fallthrough
      :                          @180 [@dyn 28]
  2986: 82 17 10                 a0 = u64 [sp + 0x10]
  2989: c8 67 07                 a0 = a0 + s1
  2992: 53 27 00 f0 22           jump @186 if a0 <u 4294963200
      :                          @181
  2997: 82 18                    a1 = u64 [sp]
  2999: 95 87 00 10              a0 = a1 + 0x1000
  3003: 01                       fallthrough
      :                          @182
  3004: 82 78                    a1 = u64 [a0]
  3006: c9 87 09                 a2 = a0 - a1
  3009: ab 59 11                 jump @186 if a2 != s0
      :                          @183
  3012: c9 68 09                 a2 = a1 - s1
  3015: 01                       fallthrough
      :                          @184
  3016: 82 7a                    a3 = u64 [a0]
  3018: ab 8a f2                 jump @182 if a3 != a1
      :                          @185
  3021: 7b 79                    u64 [a0] = a2
  3023: 33 0b                    a4 = 0
  3025: 01                       fallthrough
      :                          @186
  3026: 33 07 00 00 01           a0 = 0x10000
  3031: 33 08                    a1 = 0
  3033: 82 10 20 01              ra = u64 [sp + 0x120]
  3037: 82 15 18 01              s0 = u64 [sp + 0x118]
  3041: 82 16 10 01              s1 = u64 [sp + 0x110]
  3045: 95 11 28 01              sp = sp + 0x128
  3049: 32 00                    ret
      :                          @187
  3051: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  3054: 7b 10 40                 u64 [sp + 0x40] = ra
  3057: 7b 15 38                 u64 [sp + 0x38] = s0
  3060: 7b 16 30                 u64 [sp + 0x30] = s1
  3063: c8 89 09                 a2 = a2 + a1
  3066: ac 89 52                 jump @195 if a2 <u a1
      :                          @188
  3069: 64 75                    s0 = a0
  3071: 82 77                    a0 = u64 [a0]
  3073: 97 78 01                 a1 = a0 << 0x1
  3076: 33 0a 08                 a3 = 0x8
  3079: e4 a9 09                 a2 = maxu(a2, a3)
  3082: e4 98 06                 s1 = maxu(a1, a2)
  3085: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  3088: 98 88 3f                 a1 = a1 >> 0x3f
  3091: 51 07 12                 jump @190 if a0 == 0
      :                          @189
  3094: 82 59 08                 a2 = u64 [s0 + 0x8]
  3097: 7b 19 18                 u64 [sp + 0x18] = a2
  3100: 49 11 20 01              u64 [sp + 32] = 0x1
  3104: 7b 17 28                 u64 [sp + 0x28] = a0
  3107: 28 06                    jump @191
      :                          @190
  3109: 49 11 20                 u64 [sp + 32] = 0
  3112: 01                       fallthrough
      :                          @191
  3113: 64 17                    a0 = sp
  3115: 95 1a 18                 a3 = sp + 0x18
  3118: 64 69                    a2 = s1
  3120: 50 10 3a 32              ra = 58, jump @199
      :                          @192 [@dyn 29]
  3124: 82 18                    a1 = u64 [sp]
  3126: 82 17 08                 a0 = u64 [sp + 0x8]
  3129: 51 08 14                 jump @196 if a1 == 0
      :                          @193
  3132: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  3142: aa 87 0d                 jump @197 if a0 == a1
      :                          @194
  3145: 52 07 18                 jump @198 if a0 != 0
      :                          @195
  3148: 00                       trap
      :                          @196
  3149: 7b 57 08                 u64 [s0 + 0x8] = a0
  3152: 7b 56                    u64 [s0] = s1
  3154: 01                       fallthrough
      :                          @197
  3155: 82 10 40                 ra = u64 [sp + 0x40]
  3158: 82 15 38                 s0 = u64 [sp + 0x38]
  3161: 82 16 30                 s1 = u64 [sp + 0x30]
  3164: 95 11 48                 sp = sp + 0x48
  3167: 32 00                    ret
      :                          @198
  3169: 00                       trap
      :                          @199
  3170: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  3173: 7b 10 30                 u64 [sp + 0x30] = ra
  3176: 7b 15 28                 u64 [sp + 0x28] = s0
  3179: 7b 16 20                 u64 [sp + 0x20] = s1
  3182: 64 96                    s1 = a2
  3184: 64 73                    t1 = a0
  3186: 51 08 6e                 jump @209 if a1 == 0
      :                          @200
  3189: 82 a7 08                 a0 = u64 [a3 + 0x8]
  3192: 51 07 71                 jump @210 if a0 == 0
      :                          @201
  3195: 82 a9 10                 a2 = u64 [a3 + 0x10]
  3198: 51 09 9e 00              jump @217 if a2 == 0
      :                          @202
  3202: 82 a8                    a1 = u64 [a3]
  3204: 33 02 00 10              t0 = 0x1000
  3208: 33 04 40 00 03           t2 = 0x30040
  3213: c8 24 07                 a0 = t2 + t0
  3216: 01                       fallthrough
      :                          @203
  3217: 82 7a                    a3 = u64 [a0]
  3219: c8 6a 05                 s0 = a3 + s1
  3222: ac a5 c2 00              jump @223 if s0 <u a3
      :                          @204
  3226: 95 5b 01                 a4 = s0 + 0x1
  3229: 88 bc 01                 a5 = a4 <u 0x1
  3232: d8 b2 0b                 a4 = t0 <u a4
  3235: d4 cb 0b                 a4 = a4 | a5
  3238: 52 0b b2 00              jump @223 if a4 != 0
      :                          @205
  3242: 82 7b                    a4 = u64 [a0]
  3244: ab ab e5                 jump @203 if a4 != a3
      :                          @206
  3247: 7b 75                    u64 [a0] = s0
  3249: 33 0c                    a5 = 0
  3251: 7b 13 18                 u64 [sp + 0x18] = t1
  3254: c9 54 07                 a0 = t2 - s0
  3257: 95 77 00 10              a0 = a0 + 0x1000
  3261: 7b 17 10                 u64 [sp + 0x10] = a0
  3264: 7b 18 08                 u64 [sp + 0x8] = a1
  3267: 64 95                    s0 = a2
  3269: 7b 14                    u64 [sp] = t2
  3271: 50 10 3c c1 03           ra = 60, jump @293
      :                          @207 [@dyn 30]
  3276: 54 25 00 10 94 00        jump @224 if s0 <=u 4096
      :                          @208
  3282: 82 13 18                 t1 = u64 [sp + 0x18]
  3285: 82 18 10                 a1 = u64 [sp + 0x10]
  3288: 33 07                    a0 = 0
  3290: 7b 38 08                 u64 [t1 + 0x8] = a1
  3293: 28 b1 00                 jump @230
      :                          @209
  3296: 49 13 08                 u64 [t1 + 8] = 0
  3299: 33 07 01                 a0 = 0x1
  3302: 28 a8 00                 jump @230
      :                          @210
  3305: 33 07 00 10              a0 = 0x1000
  3309: 33 02 40 00 03           t0 = 0x30040
  3314: c8 72 09                 a2 = t0 + a0
  3317: 01                       fallthrough
      :                          @211
  3318: 82 9b                    a4 = u64 [a2]
  3320: c8 6b 0a                 a3 = a4 + s1
  3323: ac ba 5d                 jump @223 if a3 <u a4
      :                          @212
  3326: 95 ac 01                 a5 = a3 + 0x1
  3329: 88 c8 01                 a1 = a5 <u 0x1
  3332: d8 c7 0c                 a5 = a0 <u a5
  3335: d4 c8 08                 a1 = a1 | a5
  3338: 52 08 4e                 jump @223 if a1 != 0
      :                          @213
  3341: 82 98                    a1 = u64 [a2]
  3343: ab b8 e7                 jump @211 if a1 != a4
      :                          @214
  3346: 7b 9a                    u64 [a2] = a3
  3348: 33 0c                    a5 = 0
  3350: 01                       fallthrough
      :                          @215
  3351: ab b8 df                 jump @211 if a1 != a4
      :                          @216
  3354: 28 30                    jump @222
      :                          @217
  3356: 33 07 00 10              a0 = 0x1000
  3360: 33 02 40 00 03           t0 = 0x30040
  3365: c8 72 09                 a2 = t0 + a0
  3368: 01                       fallthrough
      :                          @218
  3369: 82 9b                    a4 = u64 [a2]
  3371: c8 6b 0a                 a3 = a4 + s1
  3374: ac ba 2a                 jump @223 if a3 <u a4
      :                          @219
  3377: 95 ac 01                 a5 = a3 + 0x1
  3380: 88 c8 01                 a1 = a5 <u 0x1
  3383: d8 c7 0c                 a5 = a0 <u a5
  3386: d4 c8 08                 a1 = a1 | a5
  3389: 52 08 1b                 jump @223 if a1 != 0
      :                          @220
  3392: 82 98                    a1 = u64 [a2]
  3394: ab b8 e7                 jump @218 if a1 != a4
      :                          @221
  3397: 7b 9a                    u64 [a2] = a3
  3399: 33 0c                    a5 = 0
  3401: 01                       fallthrough
      :                          @222
  3402: c9 a2 07                 a0 = t0 - a3
  3405: 95 78 00 10              a1 = a0 + 0x1000
  3409: 33 07                    a0 = 0
  3411: 7b 38 08                 u64 [t1 + 0x8] = a1
  3414: 28 38                    jump @230
      :                          @223
  3416: 33 07 01                 a0 = 0x1
  3419: 7b 37 08                 u64 [t1 + 0x8] = a0
  3422: 28 30                    jump @230
      :                          @224
  3424: 64 5c                    a5 = s0
  3426: 82 18                    a1 = u64 [sp]
  3428: 95 87 00 10              a0 = a1 + 0x1000
  3432: 82 13 18                 t1 = u64 [sp + 0x18]
  3435: 82 15 08                 s0 = u64 [sp + 0x8]
  3438: 01                       fallthrough
      :                          @225
  3439: 82 78                    a1 = u64 [a0]
  3441: c9 87 09                 a2 = a0 - a1
  3444: ab 59 11                 jump @229 if a2 != s0
      :                          @226
  3447: c9 c8 09                 a2 = a1 - a5
  3450: 01                       fallthrough
      :                          @227
  3451: 82 7a                    a3 = u64 [a0]
  3453: ab 8a f2                 jump @225 if a3 != a1
      :                          @228
  3456: 7b 79                    u64 [a0] = a2
  3458: 33 0b                    a4 = 0
  3460: 01                       fallthrough
      :                          @229
  3461: 82 18 10                 a1 = u64 [sp + 0x10]
  3464: 33 07                    a0 = 0
  3466: 7b 38 08                 u64 [t1 + 0x8] = a1
  3469: 01                       fallthrough
      :                          @230
  3470: 7b 36 10                 u64 [t1 + 0x10] = s1
  3473: 7b 37                    u64 [t1] = a0
  3475: 82 10 30                 ra = u64 [sp + 0x30]
  3478: 82 15 28                 s0 = u64 [sp + 0x28]
  3481: 82 16 20                 s1 = u64 [sp + 0x20]
  3484: 95 11 38                 sp = sp + 0x38
  3487: 32 00                    ret
      :                          @231
  3489: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  3492: 7b 10 40                 u64 [sp + 0x40] = ra
  3495: 7b 15 38                 u64 [sp + 0x38] = s0
  3498: 7b 16 30                 u64 [sp + 0x30] = s1
  3501: 95 88 01                 a1 = a1 + 0x1
  3504: 51 08 53                 jump @239 if a1 == 0
      :                          @232
  3507: 64 75                    s0 = a0
  3509: 82 77                    a0 = u64 [a0]
  3511: 97 79 01                 a2 = a0 << 0x1
  3514: 33 0a 08                 a3 = 0x8
  3517: e4 a8 08                 a1 = maxu(a1, a3)
  3520: e4 89 06                 s1 = maxu(a2, a1)
  3523: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  3526: 98 88 3f                 a1 = a1 >> 0x3f
  3529: 51 07 12                 jump @234 if a0 == 0
      :                          @233
  3532: 82 59 08                 a2 = u64 [s0 + 0x8]
  3535: 7b 19 18                 u64 [sp + 0x18] = a2
  3538: 49 11 20 01              u64 [sp + 32] = 0x1
  3542: 7b 17 28                 u64 [sp + 0x28] = a0
  3545: 28 06                    jump @235
      :                          @234
  3547: 49 11 20                 u64 [sp + 32] = 0
  3550: 01                       fallthrough
      :                          @235
  3551: 64 17                    a0 = sp
  3553: 95 1a 18                 a3 = sp + 0x18
  3556: 64 69                    a2 = s1
  3558: 50 10 3e 7c fe           ra = 62, jump @199
      :                          @236 [@dyn 31]
  3563: 82 18                    a1 = u64 [sp]
  3565: 82 17 08                 a0 = u64 [sp + 0x8]
  3568: 51 08 14                 jump @240 if a1 == 0
      :                          @237
  3571: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  3581: aa 87 0d                 jump @241 if a0 == a1
      :                          @238
  3584: 52 07 18                 jump @242 if a0 != 0
      :                          @239
  3587: 00                       trap
      :                          @240
  3588: 7b 57 08                 u64 [s0 + 0x8] = a0
  3591: 7b 56                    u64 [s0] = s1
  3593: 01                       fallthrough
      :                          @241
  3594: 82 10 40                 ra = u64 [sp + 0x40]
  3597: 82 15 38                 s0 = u64 [sp + 0x38]
  3600: 82 16 30                 s1 = u64 [sp + 0x30]
  3603: 95 11 48                 sp = sp + 0x48
  3606: 32 00                    ret
      :                          @242
  3608: 00                       trap
      :                          @243
  3609: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  3612: 7b 10 30                 u64 [sp + 0x30] = ra
  3615: 7b 15 28                 u64 [sp + 0x28] = s0
  3618: 7b 16 20                 u64 [sp + 0x20] = s1
  3621: 64 89                    a2 = a1
  3623: 82 8a 08                 a3 = u64 [a1 + 0x8]
  3626: 64 75                    s0 = a0
  3628: 51 0a 35                 jump @248 if a3 == 0
      :                          @244
  3631: 82 98                    a1 = u64 [a2]
  3633: 33 07                    a0 = 0
  3635: 95 8b 08                 a4 = a1 + 0x8
  3638: 01                       fallthrough
      :                          @245
  3639: 82 bc                    a5 = u64 [a4]
  3641: c8 c7 07                 a0 = a0 + a5
  3644: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  3647: 95 bb 10                 a4 = a4 + 0x10
  3650: 52 0a f5                 jump @245 if a3 != 0
      :                          @246
  3653: 82 9a 18                 a3 = u64 [a2 + 0x18]
  3656: 51 0a 24                 jump @250 if a3 == 0
      :                          @247
  3659: 82 88 08                 a1 = u64 [a1 + 0x8]
  3662: 8e 88                    a1 = a1 >u 0
  3664: 88 7a 10                 a3 = a0 <u 0x10
  3667: 85 aa 01                 a3 = a3 ^ 0x1
  3670: d4 a8 08                 a1 = a1 | a3
  3673: 89 7a                    a3 = a0 <s 0
  3675: e0 a8 08                 a1 = a1 & ~a3
  3678: 52 08 0a                 jump @249 if a1 != 0
      :                          @248
  3681: 33 07                    a0 = 0
  3683: 33 08 01                 a1 = 0x1
  3686: 28 48                    jump @258
      :                          @249
  3688: 97 77 01                 a0 = a0 << 0x1
  3691: 01                       fallthrough
      :                          @250
  3692: 51 07 3e                 jump @257 if a0 == 0
      :                          @251
  3695: 57 07 76                 jump @263 if a0 <s 0
      :                          @252
  3698: 64 53                    t1 = s0
  3700: 33 08 00 10              a1 = 0x1000
  3704: 33 02 40 00 03           t0 = 0x30040
  3709: c8 82 0b                 a4 = t0 + a1
  3712: 01                       fallthrough
      :                          @253
  3713: 82 bc                    a5 = u64 [a4]
  3715: c8 7c 0a                 a3 = a5 + a0
  3718: ac ca 5d                 jump @261 if a3 <u a5
      :                          @254
  3721: 95 a5 01                 s0 = a3 + 0x1
  3724: 88 56 01                 s1 = s0 <u 0x1
  3727: d8 58 05                 s0 = a1 <u s0
  3730: d4 65 05                 s0 = s0 | s1
  3733: 52 05 4e                 jump @261 if s0 != 0
      :                          @255
  3736: 82 b6                    s1 = u64 [a4]
  3738: ab c6 e7                 jump @253 if s1 != a5
      :                          @256
  3741: 7b ba                    u64 [a4] = a3
  3743: c9 a2 08                 a1 = t0 - a3
  3746: 95 88 00 10              a1 = a1 + 0x1000
  3750: 64 35                    s0 = t1
  3752: 28 06                    jump @258
      :                          @257
  3754: 33 08 01                 a1 = 0x1
  3757: 01                       fallthrough
      :                          @258
  3758: 7b 17                    u64 [sp] = a0
  3760: 7b 18 08                 u64 [sp + 0x8] = a1
  3763: 49 11 10                 u64 [sp + 16] = 0
  3766: 33 08 e8 02 01           a1 = 0x102e8
  3771: 64 17                    a0 = sp
  3773: 50 10 40 76 06           ra = 64, jump @388
      :                          @259 [@dyn 32]
  3778: 52 07 22                 jump @262 if a0 != 0
      :                          @260
  3781: 82 17 10                 a0 = u64 [sp + 0x10]
  3784: 82 18 08                 a1 = u64 [sp + 0x8]
  3787: 82 19                    a2 = u64 [sp]
  3789: 7b 57 10                 u64 [s0 + 0x10] = a0
  3792: 7b 58 08                 u64 [s0 + 0x8] = a1
  3795: 7b 59                    u64 [s0] = a2
  3797: 82 10 30                 ra = u64 [sp + 0x30]
  3800: 82 15 28                 s0 = u64 [sp + 0x28]
  3803: 82 16 20                 s1 = u64 [sp + 0x20]
  3806: 95 11 38                 sp = sp + 0x38
  3809: 32 00                    ret
      :                          @261
  3811: 00                       trap
      :                          @262
  3812: 00                       trap
      :                          @263
  3813: 00                       trap
      :                          @264 [@dyn 33]
  3814: 82 72                    t0 = u64 [a0]
  3816: 33 09 00 f0              a2 = 0xfffffffffffff000
  3820: 95 2a ff ef              a3 = t0 + 0xffffffffffffefff
  3824: ac 9a 27                 jump @270 if a3 <u a2
      :                          @265
  3827: 82 77 08                 a0 = u64 [a0 + 0x8]
  3830: 33 09 40 00 03           a2 = 0x30040
  3835: 95 99 00 10              a2 = a2 + 0x1000
  3839: 01                       fallthrough
      :                          @266
  3840: 82 9a                    a3 = u64 [a2]
  3842: c9 a9 0b                 a4 = a2 - a3
  3845: ab 7b 12                 jump @270 if a4 != a0
      :                          @267
  3848: c9 2a 0b                 a4 = a3 - t0
  3851: 01                       fallthrough
      :                          @268
  3852: 82 9c                    a5 = u64 [a2]
  3854: ab ac f2                 jump @266 if a5 != a3
      :                          @269
  3857: 7b 9b                    u64 [a2] = a4
  3859: 33 08                    a1 = 0
  3861: 32 00                    ret
      :                          @270
  3863: 32 00                    ret
      :                          @271 [@dyn 34]
  3865: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  3868: 7b 10 18                 u64 [sp + 0x18] = ra
  3871: 7b 15 10                 u64 [sp + 0x10] = s0
  3874: 7b 16 08                 u64 [sp + 0x8] = s1
  3877: 64 75                    s0 = a0
  3879: 82 7a 10                 a3 = u64 [a0 + 0x10]
  3882: 82 77                    a0 = u64 [a0]
  3884: c9 a7 07                 a0 = a0 - a3
  3887: 64 96                    s1 = a2
  3889: ac 97 2a                 jump @274 if a0 <u a2
      :                          @272
  3892: 7b 1a                    u64 [sp] = a3
  3894: 82 57 08                 a0 = u64 [s0 + 0x8]
  3897: c8 a7 07                 a0 = a0 + a3
  3900: 64 69                    a2 = s1
  3902: 50 10 46 4a 01           ra = 70, jump @293
      :                          @273 [@dyn 35]
  3907: 82 17                    a0 = u64 [sp]
  3909: c8 76 06                 s1 = s1 + a0
  3912: 7b 56 10                 u64 [s0 + 0x10] = s1
  3915: 33 07                    a0 = 0
  3917: 82 10 18                 ra = u64 [sp + 0x18]
  3920: 82 15 10                 s0 = u64 [sp + 0x10]
  3923: 82 16 08                 s1 = u64 [sp + 0x8]
  3926: 95 11 20                 sp = sp + 0x20
  3929: 32 00                    ret
      :                          @274
  3931: 64 57                    a0 = s0
  3933: 7b 18                    u64 [sp] = a1
  3935: 64 a8                    a1 = a3
  3937: 64 69                    a2 = s1
  3939: 50 10 48 88 fc           ra = 72, jump @187
      :                          @275 [@dyn 36]
  3944: 82 18                    a1 = u64 [sp]
  3946: 82 5a 10                 a3 = u64 [s0 + 0x10]
  3949: 28 c7                    jump @272
      :                          @276 [@dyn 37]
  3951: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  3954: 7b 10 20                 u64 [sp + 0x20] = ra
  3957: 7b 15 18                 u64 [sp + 0x18] = s0
  3960: 7b 16 10                 u64 [sp + 0x10] = s1
  3963: 64 86                    s1 = a1
  3965: 83 88                    i32 a1 = a1 + 0
  3967: 33 09 80 00              a2 = 0x80
  3971: 64 7a                    a3 = a0
  3973: ae 98 2b                 jump @281 if a1 >=u a2
      :                          @277
  3976: 82 a8 10                 a1 = u64 [a3 + 0x10]
  3979: 82 a7                    a0 = u64 [a3]
  3981: ab 78 12                 jump @280 if a1 != a0
      :                          @278
  3984: 64 a7                    a0 = a3
  3986: 64 a5                    s0 = a3
  3988: 50 10 4c 0d fe           ra = 76, jump @231
      :                          @279 [@dyn 38]
  3993: 64 5a                    a3 = s0
  3995: 82 58 10                 a1 = u64 [s0 + 0x10]
  3998: 01                       fallthrough
      :                          @280
  3999: 82 a7 08                 a0 = u64 [a3 + 0x8]
  4002: c8 87 07                 a0 = a0 + a1
  4005: 78 76                    u8 [a0] = s1
  4007: 95 88 01                 a1 = a1 + 0x1
  4010: 7b a8 10                 u64 [a3 + 0x10] = a1
  4013: 28 ab 00                 jump @289
      :                          @281
  4016: 8b 67 0b                 i32 a0 = s1 >> 0xb
  4019: 48 11 0c                 u32 [sp + 12] = 0
  4022: 52 07 1c                 jump @283 if a0 != 0
      :                          @282
  4025: 98 67 06                 a0 = s1 >> 0x6
  4028: 86 77 c0 00              a0 = a0 | 0xc0
  4032: 78 17 0c                 u8 [sp + 0xc] = a0
  4035: 84 67 3f                 a0 = s1 & 0x3f
  4038: 86 77 80 00              a0 = a0 | 0x80
  4042: 78 17 0d                 u8 [sp + 0xd] = a0
  4045: 33 06 02                 s1 = 0x2
  4048: 28 63                    jump @286
      :                          @283
  4050: 8b 67 10                 i32 a0 = s1 >> 0x10
  4053: 52 07 29                 jump @285 if a0 != 0
      :                          @284
  4056: 98 67 0c                 a0 = s1 >> 0xc
  4059: 86 77 e0 00              a0 = a0 | 0xe0
  4063: 78 17 0c                 u8 [sp + 0xc] = a0
  4066: 97 67 34                 a0 = s1 << 0x34
  4069: 98 77 3a                 a0 = a0 >> 0x3a
  4072: 95 77 80 00              a0 = a0 + 0x80
  4076: 78 17 0d                 u8 [sp + 0xd] = a0
  4079: 84 67 3f                 a0 = s1 & 0x3f
  4082: 86 77 80 00              a0 = a0 | 0x80
  4086: 78 17 0e                 u8 [sp + 0xe] = a0
  4089: 33 06 03                 s1 = 0x3
  4092: 28 37                    jump @286
      :                          @285
  4094: 97 67 2b                 a0 = s1 << 0x2b
  4097: 98 77 3d                 a0 = a0 >> 0x3d
  4100: 95 77 f0 00              a0 = a0 + 0xf0
  4104: 78 17 0c                 u8 [sp + 0xc] = a0
  4107: 97 67 2e                 a0 = s1 << 0x2e
  4110: 98 77 3a                 a0 = a0 >> 0x3a
  4113: 95 77 80 00              a0 = a0 + 0x80
  4117: 78 17 0d                 u8 [sp + 0xd] = a0
  4120: 97 67 34                 a0 = s1 << 0x34
  4123: 98 77 3a                 a0 = a0 >> 0x3a
  4126: 95 77 80 00              a0 = a0 + 0x80
  4130: 78 17 0e                 u8 [sp + 0xe] = a0
  4133: 84 67 3f                 a0 = s1 & 0x3f
  4136: 86 77 80 00              a0 = a0 | 0x80
  4140: 78 17 0f                 u8 [sp + 0xf] = a0
  4143: 33 06 04                 s1 = 0x4
  4146: 01                       fallthrough
      :                          @286
  4147: 82 a5 10                 s0 = u64 [a3 + 0x10]
  4150: 82 a7                    a0 = u64 [a3]
  4152: c9 57 07                 a0 = a0 - s0
  4155: ac 67 2d                 jump @290 if a0 <u s1
      :                          @287
  4158: 7b 1a                    u64 [sp] = a3
  4160: 82 a7 08                 a0 = u64 [a3 + 0x8]
  4163: c8 57 07                 a0 = a0 + s0
  4166: 95 18 0c                 a1 = sp + 0xc
  4169: 64 69                    a2 = s1
  4171: 50 10 4e 3d              ra = 78, jump @293
      :                          @288 [@dyn 39]
  4175: c8 56 06                 s1 = s1 + s0
  4178: 82 17                    a0 = u64 [sp]
  4180: 7b 76 10                 u64 [a0 + 0x10] = s1
  4183: 01                       fallthrough
      :                          @289
  4184: 33 07                    a0 = 0
  4186: 82 10 20                 ra = u64 [sp + 0x20]
  4189: 82 15 18                 s0 = u64 [sp + 0x18]
  4192: 82 16 10                 s1 = u64 [sp + 0x10]
  4195: 95 11 28                 sp = sp + 0x28
  4198: 32 00                    ret
      :                          @290
  4200: 64 a7                    a0 = a3
  4202: 64 58                    a1 = s0
  4204: 64 69                    a2 = s1
  4206: 64 a5                    s0 = a3
  4208: 50 10 50 7b fb           ra = 80, jump @187
      :                          @291 [@dyn 40]
  4213: 64 5a                    a3 = s0
  4215: 82 55 10                 s0 = u64 [s0 + 0x10]
  4218: 28 c4                    jump @287
      :                          @292 [@dyn 41]
  4220: 64 8a                    a3 = a1
  4222: 33 08 e8 02 01           a1 = 0x102e8
  4227: 64 a9                    a2 = a3
  4229: 28 ae 04                 jump @388
      :                          @293
  4232: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  4235: 7b 10 18                 u64 [sp + 0x18] = ra
  4238: 7b 15 10                 u64 [sp + 0x10] = s0
  4241: 7b 16 08                 u64 [sp + 0x8] = s1
  4244: 53 19 10 64              jump @302 if a2 <u 16
      :                          @294
  4248: 8d 7a                    i32 a3 = -a0
  4250: 84 a2 07                 t0 = a3 & 0x7
  4253: c8 27 0b                 a4 = a0 + t0
  4256: 51 02 15                 jump @297 if t0 == 0
      :                          @295
  4259: 64 8c                    a5 = a1
  4261: 64 75                    s0 = a0
  4263: 01                       fallthrough
      :                          @296
  4264: 7c ca                    a3 = u8 [a5]
  4266: 78 5a                    u8 [s0] = a3
  4268: 95 55 01                 s0 = s0 + 0x1
  4271: 95 cc 01                 a5 = a5 + 0x1
  4274: ac b5 f6                 jump @296 if s0 <u a4
      :                          @297
  4277: c8 28 03                 t1 = a1 + t0
  4280: c9 29 02                 t0 = a2 - t0
  4283: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  4286: 84 38 07                 a1 = t1 & 0x7
  4289: c8 4b 0a                 a3 = a4 + t2
  4292: 51 08 3b                 jump @304 if a1 == 0
      :                          @298
  4295: 58 04 4b                 jump @307 if t2 <=s 0
      :                          @299
  4298: 97 38 03                 a1 = t1 << 0x3
  4301: 84 80 38                 ra = a1 & 0x38
  4304: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  4307: 82 c5                    s0 = u64 [a5]
  4309: 8d 88                    i32 a1 = -a1
  4311: 84 88 38                 a1 = a1 & 0x38
  4314: 95 cc 08                 a5 = a5 + 0x8
  4317: 01                       fallthrough
      :                          @300
  4318: 82 c6                    s1 = u64 [a5]
  4320: d0 05 05                 s0 = s0 >> ra
  4323: cf 86 09                 a2 = s1 << a1
  4326: d4 59 09                 a2 = a2 | s0
  4329: 7b b9                    u64 [a4] = a2
  4331: 95 bb 08                 a4 = a4 + 0x8
  4334: 95 cc 08                 a5 = a5 + 0x8
  4337: 64 65                    s0 = s1
  4339: ac ab eb                 jump @300 if a4 <u a3
      :                          @301
  4342: 28 1c                    jump @307
      :                          @302
  4344: 64 7a                    a3 = a0
  4346: 52 09 21                 jump @308 if a2 != 0
      :                          @303
  4349: 28 2f                    jump @310
      :                          @304
  4351: 58 04 13                 jump @307 if t2 <=s 0
      :                          @305
  4354: 64 38                    a1 = t1
  4356: 01                       fallthrough
      :                          @306
  4357: 82 89                    a2 = u64 [a1]
  4359: 7b b9                    u64 [a4] = a2
  4361: 95 bb 08                 a4 = a4 + 0x8
  4364: 95 88 08                 a1 = a1 + 0x8
  4367: ac ab f6                 jump @306 if a4 <u a3
      :                          @307
  4370: c8 43 08                 a1 = t1 + t2
  4373: 84 29 07                 a2 = t0 & 0x7
  4376: 51 09 14                 jump @310 if a2 == 0
      :                          @308
  4379: c8 a9 09                 a2 = a2 + a3
  4382: 01                       fallthrough
      :                          @309
  4383: 7c 8b                    a4 = u8 [a1]
  4385: 78 ab                    u8 [a3] = a4
  4387: 95 aa 01                 a3 = a3 + 0x1
  4390: 95 88 01                 a1 = a1 + 0x1
  4393: ac 9a f6                 jump @309 if a3 <u a2
      :                          @310
  4396: 82 10 18                 ra = u64 [sp + 0x18]
  4399: 82 15 10                 s0 = u64 [sp + 0x10]
  4402: 82 16 08                 s1 = u64 [sp + 0x8]
  4405: 95 11 20                 sp = sp + 0x20
  4408: 32 00                    ret
      :                          @311
  4410: 8d 7a                    i32 a3 = -a0
  4412: 84 aa 07                 a3 = a3 & 0x7
  4415: c8 a7 0b                 a4 = a0 + a3
  4418: 51 0a 0e                 jump @314 if a3 == 0
      :                          @312
  4421: 64 7c                    a5 = a0
  4423: 01                       fallthrough
      :                          @313
  4424: 78 c8                    u8 [a5] = a1
  4426: 95 cc 01                 a5 = a5 + 0x1
  4429: ac bc fb                 jump @313 if a5 <u a4
      :                          @314
  4432: c9 a9 03                 t1 = a2 - a3
  4435: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  4438: c8 cb 0a                 a3 = a4 + a5
  4441: 58 0c 1d                 jump @317 if a5 <=s 0
      :                          @315
  4444: 84 82 ff 00              t0 = a1 & 0xff
  4448: 14 09 01 01 01 01 01 01 01 01 a2 = 0x101010101010101
  4458: ca 92 0c                 a5 = t0 * a2
  4461: 01                       fallthrough
      :                          @316
  4462: 7b bc                    u64 [a4] = a5
  4464: 95 bb 08                 a4 = a4 + 0x8
  4467: ac ab fb                 jump @316 if a4 <u a3
      :                          @317
  4470: 84 39 07                 a2 = t1 & 0x7
  4473: 52 09 05                 jump @319 if a2 != 0
      :                          @318
  4476: 28 0e                    jump @321
      :                          @319
  4478: c8 a9 09                 a2 = a2 + a3
  4481: 01                       fallthrough
      :                          @320
  4482: 78 a8                    u8 [a3] = a1
  4484: 95 aa 01                 a3 = a3 + 0x1
  4487: ac 9a fb                 jump @320 if a3 <u a2
      :                          @321
  4490: 32 00                    ret
      :                          @322 [@dyn 42]
  4492: 82 77                    a0 = u64 [a0]
  4494: 01                       fallthrough
      :                          @323
  4495: 28                       jump @323
      :                          @324
  4496: 95 11 a0                 sp = sp + 0xffffffffffffffa0
  4499: 7b 10 58                 u64 [sp + 0x58] = ra
  4502: 7b 15 50                 u64 [sp + 0x50] = s0
  4505: 7b 16 48                 u64 [sp + 0x48] = s1
  4508: 7b 19 08                 u64 [sp + 0x8] = a2
  4511: 7b 18                    u64 [sp] = a1
  4513: 98 7a 04                 a3 = a0 >> 0x4
  4516: 33 09 27                 a2 = 0x27
  4519: 33 0b bf 00 01           a4 = 0x100bf
  4524: 53 2a 71 02 7b           jump @327 if a3 <u 625
      :                          @325
  4529: 33 09 27                 a2 = 0x27
  4532: 95 1c 46                 a5 = sp + 0x46
  4535: 3a 08 00 00 03           a1 = u64 [0x30000]
  4540: 7b 18 18                 u64 [sp + 0x18] = a1
  4543: 49 11 10 f0 d8 00        u64 [sp + 16] = 0xd8f0
  4549: 33 03 7b 14              t1 = 0x147b
  4553: 33 04 ff e0 f5 05        t2 = 0x5f5e0ff
  4559: 01                       fallthrough
      :                          @326
  4560: 64 70                    ra = a0
  4562: 82 17 18                 a0 = u64 [sp + 0x18]
  4565: d6 70 07                 a0 = ra mulhu a0
  4568: 98 77 0b                 a0 = a0 >> 0xb
  4571: 82 18 10                 a1 = u64 [sp + 0x10]
  4574: c0 87 02                 i32 t0 = a0 * a1
  4577: c8 02 05                 s0 = t0 + ra
  4580: 97 52 30                 t0 = s0 << 0x30
  4583: 98 28 32                 a1 = t0 >> 0x32
  4586: ca 38 08                 a1 = a1 * t1
  4589: 98 8a 11                 a3 = a1 >> 0x11
  4592: 98 88 10                 a1 = a1 >> 0x10
  4595: 84 88 fe 07              a1 = a1 & 0x7fe
  4599: 96 aa 9c                 a3 = a3 * 0xffffffffffffff9c
  4602: c8 5a 0a                 a3 = a3 + s0
  4605: 97 aa 31                 a3 = a3 << 0x31
  4608: 98 aa 30                 a3 = a3 >> 0x30
  4611: c8 b8 08                 a1 = a1 + a4
  4614: 7c 85                    s0 = u8 [a1]
  4616: 7c 88 01                 a1 = u8 [a1 + 0x1]
  4619: c8 ba 0a                 a3 = a3 + a4
  4622: 7c a6 01                 s1 = u8 [a3 + 0x1]
  4625: 7c aa                    a3 = u8 [a3]
  4627: 78 c8 ff                 u8 [a5 + 0xffffffffffffffff] = a1
  4630: 78 c5 fe                 u8 [a5 + 0xfffffffffffffffe] = s0
  4633: 78 c6 01                 u8 [a5 + 0x1] = s1
  4636: 78 ca                    u8 [a5] = a3
  4638: 95 99 fc                 a2 = a2 + 0xfffffffffffffffc
  4641: 95 cc fc                 a5 = a5 + 0xfffffffffffffffc
  4644: ac 04 ac                 jump @326 if t2 <u ra
      :                          @327
  4647: 54 17 63 36              jump @329 if a0 <=u 99
      :                          @328
  4651: 97 78 30                 a1 = a0 << 0x30
  4654: 98 88 32                 a1 = a1 >> 0x32
  4657: 96 88 7b 14              a1 = a1 * 0x147b
  4661: 98 88 11                 a1 = a1 >> 0x11
  4664: 96 8a 9c                 a3 = a1 * 0xffffffffffffff9c
  4667: c8 a7 07                 a0 = a0 + a3
  4670: 97 77 31                 a0 = a0 << 0x31
  4673: 98 77 30                 a0 = a0 >> 0x30
  4676: 95 99 fe                 a2 = a2 + 0xfffffffffffffffe
  4679: c8 b7 07                 a0 = a0 + a4
  4682: 7c 7a 01                 a3 = u8 [a0 + 0x1]
  4685: 7c 77                    a0 = u8 [a0]
  4687: 95 1c 21                 a5 = sp + 0x21
  4690: c8 9c 0c                 a5 = a5 + a2
  4693: 78 ca 01                 u8 [a5 + 0x1] = a3
  4696: 78 c7                    u8 [a5] = a0
  4698: 64 87                    a0 = a1
  4700: 01                       fallthrough
      :                          @329
  4701: 55 17 0a 14              jump @331 if a0 >=u 10
      :                          @330
  4705: 95 99 ff                 a2 = a2 + 0xffffffffffffffff
  4708: 95 18 21                 a1 = sp + 0x21
  4711: c8 98 08                 a1 = a1 + a2
  4714: 83 77 30                 i32 a0 = a0 + 0x30
  4717: 78 87                    u8 [a1] = a0
  4719: 28 1c                    jump @332
      :                          @331
  4721: 97 77 01                 a0 = a0 << 0x1
  4724: 95 99 fe                 a2 = a2 + 0xfffffffffffffffe
  4727: c8 b7 07                 a0 = a0 + a4
  4730: 7c 78 01                 a1 = u8 [a0 + 0x1]
  4733: 7c 77                    a0 = u8 [a0]
  4735: 95 1a 21                 a3 = sp + 0x21
  4738: c8 9a 0a                 a3 = a3 + a2
  4741: 78 a8 01                 u8 [a3 + 0x1] = a1
  4744: 78 a7                    u8 [a3] = a0
  4746: 01                       fallthrough
      :                          @332
  4747: 95 1b 21                 a4 = sp + 0x21
  4750: c8 9b 0b                 a4 = a4 + a2
  4753: 9a 9c 27                 a5 = 0x27 - a2
  4756: 33 09 b8 00 01           a2 = 0x100b8
  4761: 82 17 08                 a0 = u64 [sp + 0x8]
  4764: 82 18                    a1 = u64 [sp]
  4766: 33 0a                    a3 = 0
  4768: 50 10 56 12              ra = 86, jump @334
      :                          @333 [@dyn 43]
  4772: 82 10 58                 ra = u64 [sp + 0x58]
  4775: 82 15 50                 s0 = u64 [sp + 0x50]
  4778: 82 16 48                 s1 = u64 [sp + 0x48]
  4781: 95 11 60                 sp = sp + 0x60
  4784: 32 00                    ret
      :                          @334
  4786: 95 11 98                 sp = sp + 0xffffffffffffff98
  4789: 7b 10 60                 u64 [sp + 0x60] = ra
  4792: 7b 15 58                 u64 [sp + 0x58] = s0
  4795: 7b 16 50                 u64 [sp + 0x50] = s1
  4798: 7b 1b 18                 u64 [sp + 0x18] = a4
  4801: 51 08 4f                 jump @341 if a1 == 0
      :                          @335
  4804: 80 76 34                 s1 = u32 [a0 + 0x34]
  4807: 84 68 01                 a1 = s1 & 0x1
  4810: 33 0b 2b                 a4 = 0x2b
  4813: 33 05 00 00 11           s0 = 0x110000
  4818: db 8b 05                 s0 = a4 if a1 != 0
  4821: 7b 15 28                 u64 [sp + 0x28] = s0
  4824: c8 c8 02                 t0 = a1 + a5
  4827: 84 68 04                 a1 = s1 & 0x4
  4830: 51 08 42                 jump @342 if a1 == 0
      :                          @336
  4833: 7b 19 30                 u64 [sp + 0x30] = a2
  4836: 33 08                    a1 = 0
  4838: 51 0a 1a                 jump @339 if a3 == 0
      :                          @337
  4841: 64 a5                    s0 = a3
  4843: 01                       fallthrough
      :                          @338
  4844: 7d 9b                    a4 = i8 [a2]
  4846: 89 bb c0                 a4 = a4 <s 0xffffffffffffffc0
  4849: 85 bb 01                 a4 = a4 ^ 0x1
  4852: c8 b8 08                 a1 = a1 + a4
  4855: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  4858: 95 99 01                 a2 = a2 + 0x1
  4861: 52 05 ef                 jump @338 if s0 != 0
      :                          @339
  4864: c8 82 02                 t0 = t0 + a1
  4867: 7b 1a 38                 u64 [sp + 0x38] = a3
  4870: 82 78                    a1 = u64 [a0]
  4872: 7b 1c 20                 u64 [sp + 0x20] = a5
  4875: 52 08 23                 jump @343 if a1 != 0
      :                          @340
  4878: 28 41                    jump @348
      :                          @341
  4880: 81 76 34                 s1 = i32 [a0 + 0x34]
  4883: 95 c2 01                 t0 = a5 + 0x1
  4886: 49 11 28 2d              u64 [sp + 40] = 0x2d
  4890: 84 68 04                 a1 = s1 & 0x4
  4893: 52 08 c4                 jump @336 if a1 != 0
      :                          @342
  4896: 49 11 30                 u64 [sp + 48] = 0
  4899: 7b 1a 38                 u64 [sp + 0x38] = a3
  4902: 82 78                    a1 = u64 [a0]
  4904: 7b 1c 20                 u64 [sp + 0x20] = a5
  4907: 51 08 24                 jump @348 if a1 == 0
      :                          @343
  4910: 82 75 08                 s0 = u64 [a0 + 0x8]
  4913: ae 52 1e                 jump @348 if t0 >=u s0
      :                          @344
  4916: 84 66 08                 s1 = s1 & 0x8
  4919: 52 06 50                 jump @351 if s1 != 0
      :                          @345
  4922: 7c 79 38                 a2 = u8 [a0 + 0x38]
  4925: c9 25 0a                 a3 = s0 - t0
  4928: 5a 19 01 a1 00           jump @358 if a2 >s 1
      :                          @346
  4933: 52 09 ae 00              jump @360 if a2 != 0
      :                          @347
  4937: 7b 1a 10                 u64 [sp + 0x10] = a3
  4940: 28 ad 00                 jump @361
      :                          @348
  4943: 82 75 20                 s0 = u64 [a0 + 0x20]
  4946: 82 76 28                 s1 = u64 [a0 + 0x28]
  4949: 64 57                    a0 = s0
  4951: 64 68                    a1 = s1
  4953: 82 19 28                 a2 = u64 [sp + 0x28]
  4956: 82 1a 30                 a3 = u64 [sp + 0x30]
  4959: 82 1b 38                 a4 = u64 [sp + 0x38]
  4962: 50 10 58 6d 01           ra = 88, jump @381
      :                          @349 [@dyn 44]
  4967: 33 08 01                 a1 = 0x1
  4970: 52 07 bc 00              jump @366 if a0 != 0
      :                          @350
  4974: 82 6c 18                 a5 = u64 [s1 + 0x18]
  4977: 64 57                    a0 = s0
  4979: 82 18 18                 a1 = u64 [sp + 0x18]
  4982: 82 19 20                 a2 = u64 [sp + 0x20]
  4985: 82 10 60                 ra = u64 [sp + 0x60]
  4988: 82 15 58                 s0 = u64 [sp + 0x58]
  4991: 82 16 50                 s1 = u64 [sp + 0x50]
  4994: 95 11 68                 sp = sp + 0x68
  4997: 32 0c                    jump [a5]
      :                          @351
  4999: 7b 12 40                 u64 [sp + 0x40] = t0
  5002: 81 78 30                 a1 = i32 [a0 + 0x30]
  5005: 7b 18 08                 u64 [sp + 0x8] = a1
  5008: 7c 79 38                 a2 = u8 [a0 + 0x38]
  5011: 7b 19                    u64 [sp] = a2
  5013: 82 79 20                 a2 = u64 [a0 + 0x20]
  5016: 82 76 28                 s1 = u64 [a0 + 0x28]
  5019: 48 17 30 30              u32 [a0 + 48] = 0x30
  5023: 7b 17 10                 u64 [sp + 0x10] = a0
  5026: 46 17 38 01              u8 [a0 + 56] = 0x1
  5030: 7b 19 48                 u64 [sp + 0x48] = a2
  5033: 64 97                    a0 = a2
  5035: 64 68                    a1 = s1
  5037: 82 19 28                 a2 = u64 [sp + 0x28]
  5040: 82 1a 30                 a3 = u64 [sp + 0x30]
  5043: 82 1b 38                 a4 = u64 [sp + 0x38]
  5046: 50 10 5a 19 01           ra = 90, jump @381
      :                          @352 [@dyn 45]
  5051: 52 07 67                 jump @365 if a0 != 0
      :                          @353
  5054: 82 17 40                 a0 = u64 [sp + 0x40]
  5057: c9 75 05                 s0 = s0 - a0
  5060: 95 55 01                 s0 = s0 + 0x1
  5063: 01                       fallthrough
      :                          @354
  5064: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  5067: 51 05 c6 00              jump @376 if s0 == 0
      :                          @355
  5071: 82 69 20                 a2 = u64 [s1 + 0x20]
  5074: 33 08 30                 a1 = 0x30
  5077: 82 17 48                 a0 = u64 [sp + 0x48]
  5080: b4 90 01 5c              ra = 92, jump [a2]
      :                          @356 [@dyn 46]
  5084: 51 07 ec                 jump @354 if a0 == 0
      :                          @357
  5087: 28 43                    jump @365
      :                          @358
  5089: 52 19 02 12              jump @360 if a2 != 2
      :                          @359
  5093: 98 a9 01                 a2 = a3 >> 0x1
  5096: 95 a8 01                 a1 = a3 + 0x1
  5099: 98 88 01                 a1 = a1 >> 0x1
  5102: 7b 18 10                 u64 [sp + 0x10] = a1
  5105: 28 08                    jump @361
      :                          @360
  5107: 64 a9                    a2 = a3
  5109: 49 11 10                 u64 [sp + 16] = 0
  5112: 01                       fallthrough
      :                          @361
  5113: 82 78 20                 a1 = u64 [a0 + 0x20]
  5116: 7b 18 48                 u64 [sp + 0x48] = a1
  5119: 82 76 28                 s1 = u64 [a0 + 0x28]
  5122: 81 77 30                 a0 = i32 [a0 + 0x30]
  5125: 7b 17 40                 u64 [sp + 0x40] = a0
  5128: 95 95 01                 s0 = a2 + 0x1
  5131: 01                       fallthrough
      :                          @362
  5132: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  5135: 51 05 27                 jump @367 if s0 == 0
      :                          @363
  5138: 82 69 20                 a2 = u64 [s1 + 0x20]
  5141: 82 17 48                 a0 = u64 [sp + 0x48]
  5144: 82 18 40                 a1 = u64 [sp + 0x40]
  5147: b4 90 01 5e              ra = 94, jump [a2]
      :                          @364 [@dyn 47]
  5151: 51 07 ed                 jump @362 if a0 == 0
      :                          @365
  5154: 33 08 01                 a1 = 0x1
  5157: 01                       fallthrough
      :                          @366
  5158: 64 87                    a0 = a1
  5160: 82 10 60                 ra = u64 [sp + 0x60]
  5163: 82 15 58                 s0 = u64 [sp + 0x58]
  5166: 82 16 50                 s1 = u64 [sp + 0x50]
  5169: 95 11 68                 sp = sp + 0x68
  5172: 32 00                    ret
      :                          @367
  5174: 82 15 48                 s0 = u64 [sp + 0x48]
  5177: 64 57                    a0 = s0
  5179: 64 68                    a1 = s1
  5181: 82 19 28                 a2 = u64 [sp + 0x28]
  5184: 82 1a 30                 a3 = u64 [sp + 0x30]
  5187: 82 1b 38                 a4 = u64 [sp + 0x38]
  5190: 50 10 60 89 00           ra = 96, jump @381
      :                          @368 [@dyn 48]
  5195: 33 08 01                 a1 = 0x1
  5198: 52 07 d8                 jump @366 if a0 != 0
      :                          @369
  5201: 82 6a 18                 a3 = u64 [s1 + 0x18]
  5204: 64 57                    a0 = s0
  5206: 82 18 18                 a1 = u64 [sp + 0x18]
  5209: 82 19 20                 a2 = u64 [sp + 0x20]
  5212: b4 a0 01 62              ra = 98, jump [a3]
      :                          @370 [@dyn 49]
  5216: 33 08 01                 a1 = 0x1
  5219: 52 07 c3                 jump @366 if a0 != 0
      :                          @371
  5222: 82 17 10                 a0 = u64 [sp + 0x10]
  5225: 9a 77                    a0 = -a0
  5227: 7b 17 38                 u64 [sp + 0x38] = a0
  5230: 33 05 ff                 s0 = 0xffffffffffffffff
  5233: 01                       fallthrough
      :                          @372
  5234: 82 17 38                 a0 = u64 [sp + 0x38]
  5237: c8 57 07                 a0 = a0 + s0
  5240: 51 17 ff 42              jump @379 if a0 == 4294967295
      :                          @373
  5244: 82 69 20                 a2 = u64 [s1 + 0x20]
  5247: 82 17 48                 a0 = u64 [sp + 0x48]
  5250: 82 18 40                 a1 = u64 [sp + 0x40]
  5253: b4 90 01 64              ra = 100, jump [a2]
      :                          @374 [@dyn 50]
  5257: 95 55 01                 s0 = s0 + 0x1
  5260: 51 07 e6                 jump @372 if a0 == 0
      :                          @375
  5263: 28 37                    jump @380
      :                          @376
  5265: 82 6a 18                 a3 = u64 [s1 + 0x18]
  5268: 82 17 48                 a0 = u64 [sp + 0x48]
  5271: 82 18 18                 a1 = u64 [sp + 0x18]
  5274: 82 19 20                 a2 = u64 [sp + 0x20]
  5277: b4 a0 01 66              ra = 102, jump [a3]
      :                          @377 [@dyn 51]
  5281: 33 08 01                 a1 = 0x1
  5284: 52 07 82                 jump @366 if a0 != 0
      :                          @378
  5287: 33 08                    a1 = 0
  5289: 82 17 10                 a0 = u64 [sp + 0x10]
  5292: 82 19 08                 a2 = u64 [sp + 0x8]
  5295: 7a 79 30                 u32 [a0 + 0x30] = a2
  5298: 82 19                    a2 = u64 [sp]
  5300: 78 79 38                 u8 [a0 + 0x38] = a2
  5303: 28 6f ff                 jump @366
      :                          @379
  5306: 82 15 10                 s0 = u64 [sp + 0x10]
  5309: 82 17 10                 a0 = u64 [sp + 0x10]
  5312: d8 75 08                 a1 = s0 <u a0
  5315: 28 63 ff                 jump @366
      :                          @380
  5318: 82 17 10                 a0 = u64 [sp + 0x10]
  5321: d8 75 08                 a1 = s0 <u a0
  5324: 28 5a ff                 jump @366
      :                          @381
  5327: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  5330: 7b 10 20                 u64 [sp + 0x20] = ra
  5333: 7b 15 18                 u64 [sp + 0x18] = s0
  5336: 7b 16 10                 u64 [sp + 0x10] = s1
  5339: 83 9c                    i32 a5 = a2 + 0
  5341: 33 02 00 00 11           t0 = 0x110000
  5346: 64 a6                    s1 = a3
  5348: 64 85                    s0 = a1
  5350: 64 7a                    a3 = a0
  5352: aa 2c 20                 jump @384 if a5 == t0
      :                          @382
  5355: 82 5c 20                 a5 = u64 [s0 + 0x20]
  5358: 64 a7                    a0 = a3
  5360: 64 98                    a1 = a2
  5362: 7b 1b 08                 u64 [sp + 0x8] = a4
  5365: 7b 1a                    u64 [sp] = a3
  5367: b4 c0 01 68              ra = 104, jump [a5]
      :                          @383 [@dyn 52]
  5371: 82 1a                    a3 = u64 [sp]
  5373: 82 1b 08                 a4 = u64 [sp + 0x8]
  5376: 64 78                    a1 = a0
  5378: 33 07 01                 a0 = 0x1
  5381: 52 08 20                 jump @387 if a1 != 0
      :                          @384
  5384: 51 06 1a                 jump @386 if s1 == 0
      :                          @385
  5387: 82 5c 18                 a5 = u64 [s0 + 0x18]
  5390: 64 a7                    a0 = a3
  5392: 64 68                    a1 = s1
  5394: 64 b9                    a2 = a4
  5396: 82 10 20                 ra = u64 [sp + 0x20]
  5399: 82 15 18                 s0 = u64 [sp + 0x18]
  5402: 82 16 10                 s1 = u64 [sp + 0x10]
  5405: 95 11 28                 sp = sp + 0x28
  5408: 32 0c                    jump [a5]
      :                          @386
  5410: 33 07                    a0 = 0
  5412: 01                       fallthrough
      :                          @387
  5413: 82 10 20                 ra = u64 [sp + 0x20]
  5416: 82 15 18                 s0 = u64 [sp + 0x18]
  5419: 82 16 10                 s1 = u64 [sp + 0x10]
  5422: 95 11 28                 sp = sp + 0x28
  5425: 32 00                    ret
      :                          @388
  5427: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  5431: 7b 10 80 00              u64 [sp + 0x80] = ra
  5435: 7b 15 78                 u64 [sp + 0x78] = s0
  5438: 7b 16 70                 u64 [sp + 0x70] = s1
  5441: 49 11 60 20              u64 [sp + 96] = 0x20
  5445: 33 0a 03                 a3 = 0x3
  5448: 78 1a 68                 u8 [sp + 0x68] = a3
  5451: 82 96 20                 s1 = u64 [a2 + 0x20]
  5454: 49 11 30                 u64 [sp + 48] = 0
  5457: 49 11 40                 u64 [sp + 64] = 0
  5460: 7b 17 50                 u64 [sp + 0x50] = a0
  5463: 7b 18 58                 u64 [sp + 0x58] = a1
  5466: 51 06 07 01              jump @410 if s1 == 0
      :                          @389
  5470: 82 97 28                 a0 = u64 [a2 + 0x28]
  5473: 51 07 74 01              jump @420 if a0 == 0
      :                          @390
  5477: 49 11 28                 u64 [sp + 40] = 0
  5480: 82 95                    s0 = u64 [a2]
  5482: 7b 19 08                 u64 [sp + 0x8] = a2
  5485: 82 98 10                 a1 = u64 [a2 + 0x10]
  5488: 7b 18 18                 u64 [sp + 0x18] = a1
  5491: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  5494: 97 88 03                 a1 = a1 << 0x3
  5497: 98 88 03                 a1 = a1 >> 0x3
  5500: 95 88 01                 a1 = a1 + 0x1
  5503: 7b 18                    u64 [sp] = a1
  5505: 95 55 08                 s0 = s0 + 0x8
  5508: 96 78 38                 a1 = a0 * 0x38
  5511: 95 66 18                 s1 = s1 + 0x18
  5514: 33 07 54                 a0 = 0x54
  5517: 7b 17 10                 u64 [sp + 0x10] = a0
  5520: 01                       fallthrough
      :                          @391
  5521: 7b 18 20                 u64 [sp + 0x20] = a1
  5524: 82 59                    a2 = u64 [s0]
  5526: 51 09 17                 jump @394 if a2 == 0
      :                          @392
  5529: 82 1a 58                 a3 = u64 [sp + 0x58]
  5532: 82 17 50                 a0 = u64 [sp + 0x50]
  5535: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  5538: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5541: b4 a0 01 6a              ra = 106, jump [a3]
      :                          @393 [@dyn 53]
  5545: 52 07 51 01              jump @423 if a0 != 0
      :                          @394
  5549: 81 67 10                 a0 = i32 [s1 + 0x10]
  5552: 7a 17 60                 u32 [sp + 0x60] = a0
  5555: 7c 67 18                 a0 = u8 [s1 + 0x18]
  5558: 78 17 68                 u8 [sp + 0x68] = a0
  5561: 81 67 14                 a0 = i32 [s1 + 0x14]
  5564: 7a 17 64                 u32 [sp + 0x64] = a0
  5567: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  5570: 82 67                    a0 = u64 [s1]
  5572: 51 08 26                 jump @399 if a1 == 0
      :                          @395
  5575: 52 18 01 16              jump @397 if a1 != 1
      :                          @396
  5579: 97 77 04                 a0 = a0 << 0x4
  5582: 82 18 18                 a1 = u64 [sp + 0x18]
  5585: c8 87 07                 a0 = a0 + a1
  5588: 82 78 08                 a1 = u64 [a0 + 0x8]
  5591: 82 19 10                 a2 = u64 [sp + 0x10]
  5594: aa 98 07                 jump @398 if a1 == a2
      :                          @397
  5597: 33 08                    a1 = 0
  5599: 28 0f                    jump @400
      :                          @398
  5601: 82 77                    a0 = u64 [a0]
  5603: 82 77                    a0 = u64 [a0]
  5605: 33 08 01                 a1 = 0x1
  5608: 28 06                    jump @400
      :                          @399
  5610: 33 08 01                 a1 = 0x1
  5613: 01                       fallthrough
      :                          @400
  5614: 7b 18 30                 u64 [sp + 0x30] = a1
  5617: 7b 17 38                 u64 [sp + 0x38] = a0
  5620: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  5623: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  5626: 51 08 26                 jump @405 if a1 == 0
      :                          @401
  5629: 52 18 01 16              jump @403 if a1 != 1
      :                          @402
  5633: 97 77 04                 a0 = a0 << 0x4
  5636: 82 18 18                 a1 = u64 [sp + 0x18]
  5639: c8 87 07                 a0 = a0 + a1
  5642: 82 78 08                 a1 = u64 [a0 + 0x8]
  5645: 82 19 10                 a2 = u64 [sp + 0x10]
  5648: aa 98 07                 jump @404 if a1 == a2
      :                          @403
  5651: 33 08                    a1 = 0
  5653: 28 0f                    jump @406
      :                          @404
  5655: 82 77                    a0 = u64 [a0]
  5657: 82 77                    a0 = u64 [a0]
  5659: 33 08 01                 a1 = 0x1
  5662: 28 06                    jump @406
      :                          @405
  5664: 33 08 01                 a1 = 0x1
  5667: 01                       fallthrough
      :                          @406
  5668: 7b 18 40                 u64 [sp + 0x40] = a1
  5671: 7b 17 48                 u64 [sp + 0x48] = a0
  5674: 82 67 08                 a0 = u64 [s1 + 0x8]
  5677: 97 77 04                 a0 = a0 << 0x4
  5680: 82 18 18                 a1 = u64 [sp + 0x18]
  5683: c8 78 08                 a1 = a1 + a0
  5686: 82 87                    a0 = u64 [a1]
  5688: 82 89 08                 a2 = u64 [a1 + 0x8]
  5691: 95 18 30                 a1 = sp + 0x30
  5694: b4 90 01 6c              ra = 108, jump [a2]
      :                          @407 [@dyn 54]
  5698: 52 07 b8 00              jump @423 if a0 != 0
      :                          @408
  5702: 95 55 10                 s0 = s0 + 0x10
  5705: 82 18 20                 a1 = u64 [sp + 0x20]
  5708: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  5711: 95 66 38                 s1 = s1 + 0x38
  5714: 82 17 28                 a0 = u64 [sp + 0x28]
  5717: 95 77 01                 a0 = a0 + 0x1
  5720: 7b 17 28                 u64 [sp + 0x28] = a0
  5723: 52 08 36 ff              jump @391 if a1 != 0
      :                          @409
  5727: 28 69                    jump @418
      :                          @410
  5729: 82 97 18                 a0 = u64 [a2 + 0x18]
  5732: 51 07 71                 jump @420 if a0 == 0
      :                          @411
  5735: 82 95 10                 s0 = u64 [a2 + 0x10]
  5738: 33 0a                    a3 = 0
  5740: 97 78 04                 a1 = a0 << 0x4
  5743: c8 58 08                 a1 = a1 + s0
  5746: 7b 18 20                 u64 [sp + 0x20] = a1
  5749: 7b 19 08                 u64 [sp + 0x8] = a2
  5752: 82 96                    s1 = u64 [a2]
  5754: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  5757: 97 77 04                 a0 = a0 << 0x4
  5760: 98 77 04                 a0 = a0 >> 0x4
  5763: 95 77 01                 a0 = a0 + 0x1
  5766: 7b 17                    u64 [sp] = a0
  5768: 95 66 08                 s1 = s1 + 0x8
  5771: 01                       fallthrough
      :                          @412
  5772: 7b 1a 28                 u64 [sp + 0x28] = a3
  5775: 82 69                    a2 = u64 [s1]
  5777: 51 09 16                 jump @415 if a2 == 0
      :                          @413
  5780: 82 1a 58                 a3 = u64 [sp + 0x58]
  5783: 82 17 50                 a0 = u64 [sp + 0x50]
  5786: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  5789: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5792: b4 a0 01 6e              ra = 110, jump [a3]
      :                          @414 [@dyn 55]
  5796: 52 07 56                 jump @423 if a0 != 0
      :                          @415
  5799: 82 57                    a0 = u64 [s0]
  5801: 82 59 08                 a2 = u64 [s0 + 0x8]
  5804: 95 18 30                 a1 = sp + 0x30
  5807: b4 90 01 70              ra = 112, jump [a2]
      :                          @416 [@dyn 56]
  5811: 52 07 47                 jump @423 if a0 != 0
      :                          @417
  5814: 95 66 10                 s1 = s1 + 0x10
  5817: 95 55 10                 s0 = s0 + 0x10
  5820: 82 1a 28                 a3 = u64 [sp + 0x28]
  5823: 95 aa 01                 a3 = a3 + 0x1
  5826: 82 17 20                 a0 = u64 [sp + 0x20]
  5829: ab 75 c7                 jump @412 if s0 != a0
      :                          @418
  5832: 82 19 08                 a2 = u64 [sp + 0x8]
  5835: 82 1a                    a3 = u64 [sp]
  5837: 82 97 08                 a0 = u64 [a2 + 0x8]
  5840: ac 7a 0d                 jump @421 if a3 <u a0
      :                          @419
  5843: 28 2c                    jump @424
      :                          @420
  5845: 33 0a                    a3 = 0
  5847: 82 97 08                 a0 = u64 [a2 + 0x8]
  5850: 54 07 25                 jump @424 if a0 <=u 0
      :                          @421
  5853: 82 97                    a0 = u64 [a2]
  5855: 97 a8 04                 a1 = a3 << 0x4
  5858: c8 87 09                 a2 = a0 + a1
  5861: 82 1a 58                 a3 = u64 [sp + 0x58]
  5864: 82 17 50                 a0 = u64 [sp + 0x50]
  5867: 82 98                    a1 = u64 [a2]
  5869: 82 99 08                 a2 = u64 [a2 + 0x8]
  5872: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5875: b4 a0 01 72              ra = 114, jump [a3]
      :                          @422 [@dyn 57]
  5879: 51 07 08                 jump @424 if a0 == 0
      :                          @423
  5882: 33 07 01                 a0 = 0x1
  5885: 28 05                    jump @425
      :                          @424
  5887: 33 07                    a0 = 0
  5889: 01                       fallthrough
      :                          @425
  5890: 82 10 80 00              ra = u64 [sp + 0x80]
  5894: 82 15 78                 s0 = u64 [sp + 0x78]
  5897: 82 16 70                 s1 = u64 [sp + 0x70]
  5900: 95 11 88 00              sp = sp + 0x88
  5904: 32 00                    ret
      :                          @426 [@dyn 58]
  5906: 32 00                    ret
      :                          @427 [@dyn 59]
  5908: 95 11 88                 sp = sp + 0xffffffffffffff88
  5911: 7b 10 70                 u64 [sp + 0x70] = ra
  5914: 7b 15 68                 u64 [sp + 0x68] = s0
  5917: 7b 16 60                 u64 [sp + 0x60] = s1
  5920: 64 93                    t1 = a2
  5922: 33 0c                    a5 = 0
  5924: 33 02                    t0 = 0
  5926: 33 0b                    a4 = 0
  5928: 14 04 ff fe fe fe fe fe fe fe t2 = 0xfefefefefefefeff
  5938: 33 0a 0a 0a 0a 0a        a3 = 0xa0a0a0a
  5944: 14 00 0a 0a 0a 0a 0a 0a 0a 0a ra = 0xa0a0a0a0a0a0a0a
  5954: 82 79 10                 a2 = u64 [a0 + 0x10]
  5957: 7b 19 48                 u64 [sp + 0x48] = a2
  5960: 82 79                    a2 = u64 [a0]
  5962: 7b 19 30                 u64 [sp + 0x30] = a2
  5965: 82 77 08                 a0 = u64 [a0 + 0x8]
  5968: 7b 17 28                 u64 [sp + 0x28] = a0
  5971: 7b 18 50                 u64 [sp + 0x50] = a1
  5974: 95 88 08                 a1 = a1 + 0x8
  5977: 7b 18                    u64 [sp] = a1
  5979: 33 07 0c 00 01           a0 = 0x1000c
  5984: 7b 17 08                 u64 [sp + 0x8] = a0
  5987: 33 05 0a                 s0 = 0xa
  5990: 7b 13 20                 u64 [sp + 0x20] = t1
  5993: 7b 14 18                 u64 [sp + 0x18] = t2
  5996: 7b 10 10                 u64 [sp + 0x10] = ra
  5999: 28 39                    jump @431
      :                          @428
  6001: c8 89 07                 a0 = a2 + a1
  6004: 7c 77 ff                 a0 = u8 [a0 + 0xffffffffffffffff]
  6007: 95 77 f6                 a0 = a0 + 0xfffffffffffffff6
  6010: 88 77 01                 a0 = a0 <u 0x1
  6013: 01                       fallthrough
      :                          @429
  6014: 82 1a 48                 a3 = u64 [sp + 0x48]
  6017: 78 a7                    u8 [a3] = a0
  6019: 82 17 28                 a0 = u64 [sp + 0x28]
  6022: 82 7a 18                 a3 = u64 [a0 + 0x18]
  6025: 82 17 30                 a0 = u64 [sp + 0x30]
  6028: b4 a0 01 78              ra = 120, jump [a3]
      :                          @430 [@dyn 60]
  6032: 64 52                    t0 = s0
  6034: 82 13 20                 t1 = u64 [sp + 0x20]
  6037: 82 14 18                 t2 = u64 [sp + 0x18]
  6040: 82 10 10                 ra = u64 [sp + 0x10]
  6043: 82 1c 58                 a5 = u64 [sp + 0x58]
  6046: 33 05 0a                 s0 = 0xa
  6049: 82 1b 38                 a4 = u64 [sp + 0x38]
  6052: 52 07 66 01              jump @472 if a0 != 0
      :                          @431
  6056: 84 b7 ff 00              a0 = a4 & 0xff
  6060: 52 07 5a 01              jump @471 if a0 != 0
      :                          @432
  6064: 7b 12 40                 u64 [sp + 0x40] = t0
  6067: ae c3 0a                 jump @435 if t1 >=u a5
      :                          @433
  6070: 28 f4 00                 jump @462
      :                          @434
  6073: ac c3 f1 00              jump @462 if t1 <u a5
      :                          @435
  6077: c9 c3 08                 a1 = t1 - a5
  6080: 82 16 50                 s1 = u64 [sp + 0x50]
  6083: c8 c6 06                 s1 = s1 + a5
  6086: 55 18 10 1d              jump @441 if a1 >=u 16
      :                          @436
  6090: aa c3 dd 00              jump @461 if t1 == a5
      :                          @437
  6094: 33 0a                    a3 = 0
  6096: 01                       fallthrough
      :                          @438
  6097: c8 a6 07                 a0 = s1 + a3
  6100: 7c 77                    a0 = u8 [a0]
  6102: aa 57 aa 00              jump @456 if a0 == s0
      :                          @439
  6106: 95 aa 01                 a3 = a3 + 0x1
  6109: ab a8 f4                 jump @438 if a1 != a3
      :                          @440
  6112: 28 c7 00                 jump @461
      :                          @441
  6115: 95 69 07                 a2 = s1 + 0x7
  6118: 84 9a f8                 a3 = a2 & 0xfffffffffffffff8
  6121: c9 6a 07                 a0 = a3 - s1
  6124: d3 6a 0a                 a3 = a3 ^ s1
  6127: 88 aa 01                 a3 = a3 <u 0x1
  6130: 88 7b 01                 a4 = a0 <u 0x1
  6133: d4 ba 0a                 a3 = a3 | a4
  6136: 7b 1c 58                 u64 [sp + 0x58] = a5
  6139: 51 0a 44                 jump @447 if a3 == 0
      :                          @442
  6142: 33 07                    a0 = 0
  6144: 95 82 f0                 t0 = a1 + 0xfffffffffffffff0
  6147: 01                       fallthrough
      :                          @443
  6148: 82 1b 58                 a4 = u64 [sp + 0x58]
  6151: 82 19                    a2 = u64 [sp]
  6153: c8 9b 0b                 a4 = a4 + a2
  6156: 01                       fallthrough
      :                          @444
  6157: c8 76 0c                 a5 = s1 + a0
  6160: 82 cc                    a5 = u64 [a5]
  6162: c8 7b 09                 a2 = a4 + a0
  6165: 82 99                    a2 = u64 [a2]
  6167: d3 0c 05                 s0 = a5 ^ ra
  6170: c8 45 05                 s0 = s0 + t2
  6173: e0 c5 0c                 a5 = s0 & ~a5
  6176: d3 09 05                 s0 = a2 ^ ra
  6179: 3a 0a 08 00 03           a3 = u64 [0x30008]
  6184: c8 45 05                 s0 = s0 + t2
  6187: e0 95 09                 a2 = s0 & ~a2
  6190: d4 c9 09                 a2 = a2 | a5
  6193: d2 a9 09                 a2 = a2 & a3
  6196: 52 09 1f                 jump @450 if a2 != 0
      :                          @445
  6199: 95 77 10                 a0 = a0 + 0x10
  6202: ae 72 d3                 jump @444 if t0 >=u a0
      :                          @446
  6205: 28 16                    jump @450
      :                          @447
  6207: c8 a6 0b                 a4 = s1 + a3
  6210: 7c bb                    a4 = u8 [a4]
  6212: aa 5b 54                 jump @459 if a4 == s0
      :                          @448
  6215: 95 aa 01                 a3 = a3 + 0x1
  6218: ab a7 f5                 jump @447 if a0 != a3
      :                          @449
  6221: 95 82 f0                 t0 = a1 + 0xfffffffffffffff0
  6224: ae 72 b4                 jump @443 if t0 >=u a0
      :                          @450
  6227: aa 87 98 00              jump @468 if a0 == a1
      :                          @451
  6231: 33 0a                    a3 = 0
  6233: c8 76 06                 s1 = s1 + a0
  6236: c9 73 08                 a1 = t1 - a0
  6239: 82 1c 58                 a5 = u64 [sp + 0x58]
  6242: c9 c8 08                 a1 = a1 - a5
  6245: 33 05 0a                 s0 = 0xa
  6248: 82 12 40                 t0 = u64 [sp + 0x40]
  6251: 01                       fallthrough
      :                          @452
  6252: c8 a6 09                 a2 = s1 + a3
  6255: 7c 99                    a2 = u8 [a2]
  6257: aa 59 0b                 jump @455 if a2 == s0
      :                          @453
  6260: 95 aa 01                 a3 = a3 + 0x1
  6263: ab a8 f5                 jump @452 if a1 != a3
      :                          @454
  6266: 28 2d                    jump @461
      :                          @455
  6268: c8 7a 0a                 a3 = a3 + a0
  6271: 01                       fallthrough
      :                          @456
  6272: c8 ca 0a                 a3 = a3 + a5
  6275: 95 ac 01                 a5 = a3 + 0x1
  6278: ae 3a 33 ff              jump @434 if a3 >=u t1
      :                          @457
  6282: 82 17 50                 a0 = u64 [sp + 0x50]
  6285: c8 7a 0a                 a3 = a3 + a0
  6288: 7c a7                    a0 = u8 [a3]
  6290: ab 57 27 ff              jump @434 if a0 != s0
      :                          @458
  6294: 28 5c                    jump @469
      :                          @459
  6296: 82 1c 58                 a5 = u64 [sp + 0x58]
  6299: c8 ca 0a                 a3 = a3 + a5
  6302: 95 ac 01                 a5 = a3 + 0x1
  6305: ac 3a e9                 jump @457 if a3 <u t1
      :                          @460
  6308: 28 15 ff                 jump @434
      :                          @461
  6311: 64 3c                    a5 = t1
  6313: 01                       fallthrough
      :                          @462
  6314: 7b 1c 58                 u64 [sp + 0x58] = a5
  6317: 49 11 38 01              u64 [sp + 56] = 0x1
  6321: 64 25                    s0 = t0
  6323: 64 36                    s1 = t1
  6325: aa 32 51                 jump @471 if t0 == t1
      :                          @463
  6328: 82 17 48                 a0 = u64 [sp + 0x48]
  6331: 7c 77                    a0 = u8 [a0]
  6333: 51 07 1c                 jump @466 if a0 == 0
      :                          @464
  6336: 82 17 28                 a0 = u64 [sp + 0x28]
  6339: 82 7a 18                 a3 = u64 [a0 + 0x18]
  6342: 33 09 04                 a2 = 0x4
  6345: 82 17 30                 a0 = u64 [sp + 0x30]
  6348: 82 18 08                 a1 = u64 [sp + 0x8]
  6351: b4 a0 01 7a              ra = 122, jump [a3]
      :                          @465 [@dyn 61]
  6355: 82 12 40                 t0 = u64 [sp + 0x40]
  6358: 52 07 34                 jump @472 if a0 != 0
      :                          @466
  6361: c9 26 09                 a2 = s1 - t0
  6364: 82 18 50                 a1 = u64 [sp + 0x50]
  6367: c8 28 08                 a1 = a1 + t0
  6370: ab 26 8f fe              jump @428 if s1 != t0
      :                          @467
  6374: 33 07                    a0 = 0
  6376: 28 96 fe                 jump @429
      :                          @468
  6379: 64 3c                    a5 = t1
  6381: 82 12 40                 t0 = u64 [sp + 0x40]
  6384: 28 ba                    jump @462
      :                          @469
  6386: 49 11 38                 u64 [sp + 56] = 0
  6389: 64 c6                    s1 = a5
  6391: 64 c5                    s0 = a5
  6393: 7b 1c 58                 u64 [sp + 0x58] = a5
  6396: 82 17 48                 a0 = u64 [sp + 0x48]
  6399: 7c 77                    a0 = u8 [a0]
  6401: 52 07 bf                 jump @464 if a0 != 0
      :                          @470
  6404: 28 d5                    jump @466
      :                          @471
  6406: 33 07                    a0 = 0
  6408: 28 06                    jump @473
      :                          @472
  6410: 33 07 01                 a0 = 0x1
  6413: 01                       fallthrough
      :                          @473
  6414: 82 10 70                 ra = u64 [sp + 0x70]
  6417: 82 15 68                 s0 = u64 [sp + 0x68]
  6420: 82 16 60                 s1 = u64 [sp + 0x60]
  6423: 95 11 78                 sp = sp + 0x78
  6426: 32 00                    ret
      :                          @474 [@dyn 62]
  6428: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  6431: 7b 10 20                 u64 [sp + 0x20] = ra
  6434: 7b 15 18                 u64 [sp + 0x18] = s0
  6437: 7b 16 10                 u64 [sp + 0x10] = s1
  6440: 82 75 10                 s0 = u64 [a0 + 0x10]
  6443: 7c 59                    a2 = u8 [s0]
  6445: 82 7b                    a4 = u64 [a0]
  6447: 82 76 08                 s1 = u64 [a0 + 0x8]
  6450: 51 09 32                 jump @478 if a2 == 0
      :                          @475
  6453: 82 6a 18                 a3 = u64 [s1 + 0x18]
  6456: 7b 18 08                 u64 [sp + 0x8] = a1
  6459: 33 08 0c 00 01           a1 = 0x1000c
  6464: 33 09 04                 a2 = 0x4
  6467: 64 b7                    a0 = a4
  6469: 7b 1b                    u64 [sp] = a4
  6471: b4 a0 01 7e              ra = 126, jump [a3]
      :                          @476 [@dyn 63]
  6475: 82 18 08                 a1 = u64 [sp + 0x8]
  6478: 82 1b                    a4 = u64 [sp]
  6480: 51 07 14                 jump @478 if a0 == 0
      :                          @477
  6483: 33 07 01                 a0 = 0x1
  6486: 82 10 20                 ra = u64 [sp + 0x20]
  6489: 82 15 18                 s0 = u64 [sp + 0x18]
  6492: 82 16 10                 s1 = u64 [sp + 0x10]
  6495: 95 11 28                 sp = sp + 0x28
  6498: 32 00                    ret
      :                          @478
  6500: 83 87                    i32 a0 = a1 + 0
  6502: 95 77 f6                 a0 = a0 + 0xfffffffffffffff6
  6505: 88 77 01                 a0 = a0 <u 0x1
  6508: 78 57                    u8 [s0] = a0
  6510: 82 6c 20                 a5 = u64 [s1 + 0x20]
  6513: 64 b7                    a0 = a4
  6515: 82 10 20                 ra = u64 [sp + 0x20]
  6518: 82 15 18                 s0 = u64 [sp + 0x18]
  6521: 82 16 10                 s1 = u64 [sp + 0x10]
  6524: 95 11 28                 sp = sp + 0x28
  6527: 32 0c                    jump [a5]
      :                          @479 [@dyn 64]
  6529: 64 8a                    a3 = a1
  6531: 33 08 18 03 01           a1 = 0x10318
  6536: 64 a9                    a2 = a3
  6538: 28 a9 fb                 jump @388
      :                          @480
  6541: 51 08 9b 00              jump @501 if a1 == 0
      :                          @481
  6545: 64 79                    a2 = a0
  6547: 7c 77                    a0 = u8 [a0]
  6549: 51 07 91 00              jump @500 if a0 == 0
      :                          @482
  6553: 51 27 ff 00 90 00        jump @502 if a0 == 255
      :                          @483
  6559: 6c 7a                    a3 = sext.b a0
  6561: 57 0a 09                 jump @485 if a3 <s 0
      :                          @484
  6564: 33 0a                    a3 = 0
  6566: 33 08                    a1 = 0
  6568: 28 73                    jump @499
      :                          @485
  6570: 55 27 c0 00 0d           jump @487 if a0 >=u 192
      :                          @486
  6575: 33 0a 01                 a3 = 0x1
  6578: 33 0b 80                 a4 = 0xffffffffffffff80
  6581: 28 4a                    jump @496
      :                          @487
  6583: 55 27 e0 00 0e           jump @489 if a0 >=u 224
      :                          @488
  6588: 33 0a 02                 a3 = 0x2
  6591: 33 0b 40 ff              a4 = 0xffffffffffffff40
  6595: 28 3c                    jump @496
      :                          @489
  6597: 55 27 f0 00 0e           jump @491 if a0 >=u 240
      :                          @490
  6602: 33 0a 03                 a3 = 0x3
  6605: 33 0b 20 ff              a4 = 0xffffffffffffff20
  6609: 28 2e                    jump @496
      :                          @491
  6611: 55 27 f8 00 0e           jump @493 if a0 >=u 248
      :                          @492
  6616: 33 0a 04                 a3 = 0x4
  6619: 33 0b 10 ff              a4 = 0xffffffffffffff10
  6623: 28 20                    jump @496
      :                          @493
  6625: 55 27 fc 00 0e           jump @495 if a0 >=u 252
      :                          @494
  6630: 33 0a 05                 a3 = 0x5
  6633: 33 0b 08 ff              a4 = 0xffffffffffffff08
  6637: 28 12                    jump @496
      :                          @495
  6639: 88 7a fe 00              a3 = a0 <u 0xfe
  6643: 33 0b 04 ff              a4 = 0xffffffffffffff04
  6647: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  6651: 85 aa 07                 a3 = a3 ^ 0x7
  6654: 01                       fallthrough
      :                          @496
  6655: ae 8a 2b                 jump @503 if a3 >=u a1
      :                          @497
  6658: 33 08                    a1 = 0
  6660: c8 b7 07                 a0 = a0 + a4
  6663: 64 ab                    a4 = a3
  6665: 01                       fallthrough
      :                          @498
  6666: c8 b9 0c                 a5 = a2 + a4
  6669: 7c cc                    a5 = u8 [a5]
  6671: 97 88 08                 a1 = a1 << 0x8
  6674: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  6677: d4 c8 08                 a1 = a1 | a5
  6680: 52 0b f2                 jump @498 if a4 != 0
      :                          @499
  6683: 8a a9 03                 i32 a2 = a3 << 0x3
  6686: cf 97 07                 a0 = a0 << a2
  6689: c8 87 07                 a0 = a0 + a1
  6692: 32 00                    ret
      :                          @500
  6694: 32 00                    ret
      :                          @501
  6696: 00                       trap
      :                          @502
  6697: 00                       trap
      :                          @503
  6698: 00                       trap
      :                          @504 [@dyn 65]
  6699: 95 11 68 ff              sp = sp + 0xffffffffffffff68
  6703: 7b 10 90 00              u64 [sp + 0x90] = ra
  6707: 7b 15 88 00              u64 [sp + 0x88] = s0
  6711: 7b 16 80 00              u64 [sp + 0x80] = s1
  6715: 64 85                    s0 = a1
  6717: 82 86 28                 s1 = u64 [a1 + 0x28]
  6720: 82 8a 20                 a3 = u64 [a1 + 0x20]
  6723: 82 6b 18                 a4 = u64 [s1 + 0x18]
  6726: 7b 17 10                 u64 [sp + 0x10] = a0
  6729: 33 08 b8 00 01           a1 = 0x100b8
  6734: 33 09 01                 a2 = 0x1
  6737: 7b 1a 18                 u64 [sp + 0x18] = a3
  6740: 64 a7                    a0 = a3
  6742: 7b 1b 08                 u64 [sp + 0x8] = a4
  6745: b4 b0 02 84 00           ra = 132, jump [a4]
      :                          @505 [@dyn 66]
  6750: 51 07 09                 jump @507 if a0 == 0
      :                          @506
  6753: 33 09 01                 a2 = 0x1
  6756: 28 d2 00                 jump @519
      :                          @507
  6759: 80 58 34                 a1 = u32 [s0 + 0x34]
  6762: 84 87 04                 a0 = a1 & 0x4
  6765: 52 07 21                 jump @511 if a0 != 0
      :                          @508
  6768: 82 17 10                 a0 = u64 [sp + 0x10]
  6771: 64 58                    a1 = s0
  6773: 50 20 86 00 d5 00        ra = 134, jump @520
      :                          @509 [@dyn 67]
  6779: 33 09 01                 a2 = 0x1
  6782: 52 07 b8 00              jump @519 if a0 != 0
      :                          @510
  6786: 82 57 28                 a0 = u64 [s0 + 0x28]
  6789: 82 5a 20                 a3 = u64 [s0 + 0x20]
  6792: 82 7b 18                 a4 = u64 [a0 + 0x18]
  6795: 28 99 00                 jump @517
      :                          @511
  6798: 7b 18                    u64 [sp] = a1
  6800: 33 08 bb 00 01           a1 = 0x100bb
  6805: 33 09 01                 a2 = 0x1
  6808: 82 17 18                 a0 = u64 [sp + 0x18]
  6811: 82 1a 08                 a3 = u64 [sp + 0x8]
  6814: b4 a0 02 88 00           ra = 136, jump [a3]
      :                          @512 [@dyn 68]
  6819: 33 09 01                 a2 = 0x1
  6822: 82 18 18                 a1 = u64 [sp + 0x18]
  6825: 52 07 8d 00              jump @519 if a0 != 0
      :                          @513
  6829: 46 11 3f 01              u8 [sp + 63] = 0x1
  6833: 7b 18 20                 u64 [sp + 0x20] = a1
  6836: 7b 16 28                 u64 [sp + 0x28] = s1
  6839: 95 17 3f                 a0 = sp + 0x3f
  6842: 7b 17 30                 u64 [sp + 0x30] = a0
  6845: 81 57 30                 a0 = i32 [s0 + 0x30]
  6848: 7c 58 38                 a1 = u8 [s0 + 0x38]
  6851: 82 59                    a2 = u64 [s0]
  6853: 82 5a 08                 a3 = u64 [s0 + 0x8]
  6856: 82 5b 10                 a4 = u64 [s0 + 0x10]
  6859: 82 5c 18                 a5 = u64 [s0 + 0x18]
  6862: 82 16                    s1 = u64 [sp]
  6864: 7a 16 74                 u32 [sp + 0x74] = s1
  6867: 7a 17 70                 u32 [sp + 0x70] = a0
  6870: 78 18 78                 u8 [sp + 0x78] = a1
  6873: 7b 19 40                 u64 [sp + 0x40] = a2
  6876: 7b 1a 48                 u64 [sp + 0x48] = a3
  6879: 7b 1b 50                 u64 [sp + 0x50] = a4
  6882: 7b 1c 58                 u64 [sp + 0x58] = a5
  6885: 95 17 20                 a0 = sp + 0x20
  6888: 7b 17 60                 u64 [sp + 0x60] = a0
  6891: 33 07 18 03 01           a0 = 0x10318
  6896: 7b 17 68                 u64 [sp + 0x68] = a0
  6899: 95 18 40                 a1 = sp + 0x40
  6902: 82 17 10                 a0 = u64 [sp + 0x10]
  6905: 50 20 8a 00 51           ra = 138, jump @520
      :                          @514 [@dyn 69]
  6910: 52 07 63 ff              jump @506 if a0 != 0
      :                          @515
  6914: 82 18 68                 a1 = u64 [sp + 0x68]
  6917: 82 17 60                 a0 = u64 [sp + 0x60]
  6920: 82 8a 18                 a3 = u64 [a1 + 0x18]
  6923: 33 08 b9 00 01           a1 = 0x100b9
  6928: 33 09 02                 a2 = 0x2
  6931: b4 a0 02 8c 00           ra = 140, jump [a3]
      :                          @516 [@dyn 70]
  6936: 82 1a 18                 a3 = u64 [sp + 0x18]
  6939: 82 1b 08                 a4 = u64 [sp + 0x8]
  6942: 33 09 01                 a2 = 0x1
  6945: 52 07 15                 jump @519 if a0 != 0
      :                          @517
  6948: 33 08 bc 00 01           a1 = 0x100bc
  6953: 33 09 01                 a2 = 0x1
  6956: 64 a7                    a0 = a3
  6958: b4 b0 02 8e 00           ra = 142, jump [a4]
      :                          @518 [@dyn 71]
  6963: 64 79                    a2 = a0
  6965: 01                       fallthrough
      :                          @519
  6966: 64 97                    a0 = a2
  6968: 82 10 90 00              ra = u64 [sp + 0x90]
  6972: 82 15 88 00              s0 = u64 [sp + 0x88]
  6976: 82 16 80 00              s1 = u64 [sp + 0x80]
  6980: 95 11 98 00              sp = sp + 0x98
  6984: 32 00                    ret
      :                          @520
  6986: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  6990: 7b 10 80 00              u64 [sp + 0x80] = ra
  6994: 64 82                    t0 = a1
  6996: 80 88 34                 a1 = u32 [a1 + 0x34]
  6999: 84 89 10                 a2 = a1 & 0x10
  7002: 52 09 1b                 jump @523 if a2 != 0
      :                          @521
  7005: 84 88 20                 a1 = a1 & 0x20
  7008: 52 08 5c                 jump @527 if a1 != 0
      :                          @522
  7011: 7c 77                    a0 = u8 [a0]
  7013: 33 08 01                 a1 = 0x1
  7016: 64 29                    a2 = t0
  7018: 82 10 80 00              ra = u64 [sp + 0x80]
  7022: 95 11 88 00              sp = sp + 0x88
  7026: 28 1e f6                 jump @324
      :                          @523
  7029: 7c 77                    a0 = u8 [a0]
  7031: 33 0a 81 00              a3 = 0x81
  7035: 95 18 7f                 a1 = sp + 0x7f
  7038: 33 03 57                 t1 = 0x57
  7041: 01                       fallthrough
      :                          @524
  7042: 64 ab                    a4 = a3
  7044: 84 7a 0f                 a3 = a0 & 0xf
  7047: 97 77 38                 a0 = a0 << 0x38
  7050: 98 77 3c                 a0 = a0 >> 0x3c
  7053: 88 ac 0a                 a5 = a3 <u 0xa
  7056: 33 09 30                 a2 = 0x30
  7059: da c3 09                 a2 = t1 if a5 == 0
  7062: be a9 09                 i32 a2 = a2 + a3
  7065: 78 89                    u8 [a1] = a2
  7067: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
  7070: 95 ba ff                 a3 = a4 + 0xffffffffffffffff
  7073: 52 07 e1                 jump @524 if a0 != 0
      :                          @525
  7076: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
  7079: 56 27 80 00 73           jump @533 if a0 >u 128
      :                          @526
  7084: 9a ac 81 00              a5 = 0x81 - a3
  7088: 64 1b                    a4 = sp
  7090: c8 7b 0b                 a4 = a4 + a0
  7093: 33 09 bd 00 01           a2 = 0x100bd
  7098: 28 48                    jump @531
      :                          @527
  7100: 7c 77                    a0 = u8 [a0]
  7102: 33 0a 81 00              a3 = 0x81
  7106: 95 18 7f                 a1 = sp + 0x7f
  7109: 33 03 37                 t1 = 0x37
  7112: 01                       fallthrough
      :                          @528
  7113: 64 ab                    a4 = a3
  7115: 84 7a 0f                 a3 = a0 & 0xf
  7118: 97 77 38                 a0 = a0 << 0x38
  7121: 98 77 3c                 a0 = a0 >> 0x3c
  7124: 88 ac 0a                 a5 = a3 <u 0xa
  7127: 33 09 30                 a2 = 0x30
  7130: da c3 09                 a2 = t1 if a5 == 0
  7133: be a9 09                 i32 a2 = a2 + a3
  7136: 78 89                    u8 [a1] = a2
  7138: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
  7141: 95 ba ff                 a3 = a4 + 0xffffffffffffffff
  7144: 52 07 e1                 jump @528 if a0 != 0
      :                          @529
  7147: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
  7150: 56 27 80 00 2c           jump @533 if a0 >u 128
      :                          @530
  7155: 9a ac 81 00              a5 = 0x81 - a3
  7159: 64 1b                    a4 = sp
  7161: c8 7b 0b                 a4 = a4 + a0
  7164: 33 09 bd 00 01           a2 = 0x100bd
  7169: 01                       fallthrough
      :                          @531
  7170: 33 08 01                 a1 = 0x1
  7173: 33 0a 02                 a3 = 0x2
  7176: 64 27                    a0 = t0
  7178: 50 20 90 00 a8 f6        ra = 144, jump @334
      :                          @532 [@dyn 72]
  7184: 82 10 80 00              ra = u64 [sp + 0x80]
  7188: 95 11 88 00              sp = sp + 0x88
  7192: 32 00                    ret
      :                          @533
  7194: 00                       trap
