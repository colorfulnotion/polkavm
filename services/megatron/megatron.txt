// RO data = 888/888 bytes
// RW data = 16/4176 bytes
// Stack size = 8192 bytes
// RO data = [109, 101, 103, 40, 109, 101, 103, 32, 114, 101, 97, 100, 32, 32, 32, 32, 32, 114, 101, 97, 100, 32, 102, 114, 111, 109, 32, 115, 101, 114, 118, 105, 99, 101, 32, 32, 102, 105, 98, 40, 110, 61, 41, 61, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 16, 0, 1, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 35, 0, 1, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 42, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 32, 116, 114, 105, 98, 40, 110, 61, 116, 114, 97, 110, 115, 102, 101, 114, 4, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 16, 0, 1, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 112, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 42, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 42, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 32, 119, 114, 105, 116, 101, 40, 110, 61, 41, 32, 110, 117, 109, 95, 116, 114, 97, 110, 115, 102, 101, 114, 115, 61, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 224, 0, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 233, 0, 1, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 32, 116, 114, 97, 110, 115, 102, 101, 114, 40, 100, 101, 115, 116, 58, 44, 32, 97, 109, 111, 117, 110, 116, 61, 44, 32, 103, 97, 115, 95, 97, 118, 97, 105, 108, 61, 41, 32, 82, 101, 115, 117, 108, 116, 58, 32, 0, 0, 56, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 1, 1, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 63, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 72, 1, 1, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 84, 1, 1, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 77, 101, 103, 97, 116, 114, 111, 110, 32, 111, 110, 95, 116, 114, 97, 110, 115, 102, 101, 114, 32, 103, 97, 115, 58, 32, 103, 111, 116, 32, 32, 40, 114, 101, 99, 111, 114, 100, 101, 100, 32, 97, 116, 32, 107, 101, 121, 32, 52, 41, 0, 0, 0, 0, 0, 0, 176, 1, 1, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 206, 1, 1, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 44, 10, 10, 93, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 119, 114, 105, 116, 101, 95, 114, 101, 115, 117, 108, 116, 32, 107, 101, 121, 61, 44, 32, 114, 101, 115, 117, 108, 116, 61, 62, 3, 1, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 79, 3, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0]
// RW data = [75, 89, 134, 56, 214, 197, 109, 52, 128, 128, 128, 128, 128, 128, 128, 128]
// Instructions = 2385
// Code size = 7149 bytes

      :                          @0
     0: 28 3f 02 00 00           jump @39
      :                          @1
     5: 28 e0 02 00 00           jump @54
      :                          @2
    10: 28 25 0a                 jump @165
      :                          @3 [@dyn 1]
    13: 95 11 78 ff              sp = sp + 0xffffffffffffff78
    17: 7b 10 80 00              u64 [sp + 0x80] = ra
    21: 64 82                    t0 = a1
    23: 80 88 34                 a1 = u32 [a1 + 0x34]
    26: 84 89 10                 a2 = a1 & 0x10
    29: 52 09 28                 jump @6 if a2 != 0
      :                          @4
    32: 84 88 20                 a1 = a1 & 0x20
    35: 52 08 52                 jump @9 if a1 != 0
      :                          @5
    38: 81 77                    a0 = i32 [a0]
    40: 89 79                    a2 = a0 <s 0
    42: 85 98 01                 a1 = a2 ^ 0x1
    45: 97 7a 20                 a3 = a0 << 0x20
    48: 98 aa 20                 a3 = a3 >> 0x20
    51: 9a 77                    a0 = -a0
    53: da 9a 07                 a0 = a3 if a2 == 0
    56: 64 29                    a2 = t0
    58: 82 10 80 00              ra = u64 [sp + 0x80]
    62: 95 11 88 00              sp = sp + 0x88
    66: 28 25 11                 jump @319
      :                          @6
    69: 81 7a                    a3 = i32 [a0]
    71: 33 08 81 00              a1 = 0x81
    75: 95 17 7f                 a0 = sp + 0x7f
    78: 33 03 57                 t1 = 0x57
    81: 01                       fallthrough
      :                          @7
    82: 64 8b                    a4 = a1
    84: 8b ac 04                 i32 a5 = a3 >> 0x4
    87: 84 aa 0f                 a3 = a3 & 0xf
    90: 88 a8 0a                 a1 = a3 <u 0xa
    93: 33 09 30                 a2 = 0x30
    96: da 83 09                 a2 = t1 if a1 == 0
    99: be a9 09                 i32 a2 = a2 + a3
   102: 78 79                    u8 [a0] = a2
   104: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   107: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   110: 64 ca                    a3 = a5
   112: 52 0c e2                 jump @7 if a5 != 0
      :                          @8
   115: 28 30                    jump @11
      :                          @9
   117: 81 7a                    a3 = i32 [a0]
   119: 33 08 81 00              a1 = 0x81
   123: 95 17 7f                 a0 = sp + 0x7f
   126: 33 03 37                 t1 = 0x37
   129: 01                       fallthrough
      :                          @10
   130: 64 8b                    a4 = a1
   132: 8b ac 04                 i32 a5 = a3 >> 0x4
   135: 84 aa 0f                 a3 = a3 & 0xf
   138: 88 a8 0a                 a1 = a3 <u 0xa
   141: 33 09 30                 a2 = 0x30
   144: da 83 09                 a2 = t1 if a1 == 0
   147: be a9 09                 i32 a2 = a2 + a3
   150: 78 79                    u8 [a0] = a2
   152: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   155: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   158: 64 ca                    a3 = a5
   160: 52 0c e2                 jump @10 if a5 != 0
      :                          @11
   163: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   166: 56 27 80 00 2a           jump @14 if a0 >u 128
      :                          @12
   171: 9a 8c 81 00              a5 = 0x81 - a1
   175: 64 1b                    a4 = sp
   177: c8 7b 0b                 a4 = a4 + a0
   180: 33 09 74 02 01           a2 = 0x10274
   185: 33 08 01                 a1 = 0x1
   188: 33 0a 02                 a3 = 0x2
   191: 64 27                    a0 = t0
   193: 50 10 04 d3 11           ra = 4, jump @329
      :                          @13 [@dyn 2]
   198: 82 10 80 00              ra = u64 [sp + 0x80]
   202: 95 11 88 00              sp = sp + 0x88
   206: 32 00                    ret
      :                          @14
   208: 00                       trap
      :                          @15 [@dyn 3]
   209: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   213: 7b 10 80 00              u64 [sp + 0x80] = ra
   217: 64 82                    t0 = a1
   219: 80 88 34                 a1 = u32 [a1 + 0x34]
   222: 84 89 10                 a2 = a1 & 0x10
   225: 52 09 1b                 jump @18 if a2 != 0
      :                          @16
   228: 84 88 20                 a1 = a1 & 0x20
   231: 52 08 45                 jump @21 if a1 != 0
      :                          @17
   234: 80 77                    a0 = u32 [a0]
   236: 33 08 01                 a1 = 0x1
   239: 64 29                    a2 = t0
   241: 82 10 80 00              ra = u64 [sp + 0x80]
   245: 95 11 88 00              sp = sp + 0x88
   249: 28 6e 10                 jump @319
      :                          @18
   252: 81 7a                    a3 = i32 [a0]
   254: 33 08 81 00              a1 = 0x81
   258: 95 17 7f                 a0 = sp + 0x7f
   261: 33 03 57                 t1 = 0x57
   264: 01                       fallthrough
      :                          @19
   265: 64 8b                    a4 = a1
   267: 8b ac 04                 i32 a5 = a3 >> 0x4
   270: 84 aa 0f                 a3 = a3 & 0xf
   273: 88 a8 0a                 a1 = a3 <u 0xa
   276: 33 09 30                 a2 = 0x30
   279: da 83 09                 a2 = t1 if a1 == 0
   282: be a9 09                 i32 a2 = a2 + a3
   285: 78 79                    u8 [a0] = a2
   287: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   290: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   293: 64 ca                    a3 = a5
   295: 52 0c e2                 jump @19 if a5 != 0
      :                          @20
   298: 28 30                    jump @23
      :                          @21
   300: 81 7a                    a3 = i32 [a0]
   302: 33 08 81 00              a1 = 0x81
   306: 95 17 7f                 a0 = sp + 0x7f
   309: 33 03 37                 t1 = 0x37
   312: 01                       fallthrough
      :                          @22
   313: 64 8b                    a4 = a1
   315: 8b ac 04                 i32 a5 = a3 >> 0x4
   318: 84 aa 0f                 a3 = a3 & 0xf
   321: 88 a8 0a                 a1 = a3 <u 0xa
   324: 33 09 30                 a2 = 0x30
   327: da 83 09                 a2 = t1 if a1 == 0
   330: be a9 09                 i32 a2 = a2 + a3
   333: 78 79                    u8 [a0] = a2
   335: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   338: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   341: 64 ca                    a3 = a5
   343: 52 0c e2                 jump @22 if a5 != 0
      :                          @23
   346: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   349: 56 27 80 00 2a           jump @26 if a0 >u 128
      :                          @24
   354: 9a 8c 81 00              a5 = 0x81 - a1
   358: 64 1b                    a4 = sp
   360: c8 7b 0b                 a4 = a4 + a0
   363: 33 09 74 02 01           a2 = 0x10274
   368: 33 08 01                 a1 = 0x1
   371: 33 0a 02                 a3 = 0x2
   374: 64 27                    a0 = t0
   376: 50 10 08 1c 11           ra = 8, jump @329
      :                          @25 [@dyn 4]
   381: 82 10 80 00              ra = u64 [sp + 0x80]
   385: 95 11 88 00              sp = sp + 0x88
   389: 32 00                    ret
      :                          @26
   391: 00                       trap
      :                          @27 [@dyn 5]
   392: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   396: 7b 10 80 00              u64 [sp + 0x80] = ra
   400: 64 82                    t0 = a1
   402: 80 88 34                 a1 = u32 [a1 + 0x34]
   405: 84 89 10                 a2 = a1 & 0x10
   408: 52 09 1b                 jump @30 if a2 != 0
      :                          @28
   411: 84 88 20                 a1 = a1 & 0x20
   414: 52 08 45                 jump @33 if a1 != 0
      :                          @29
   417: 82 77                    a0 = u64 [a0]
   419: 33 08 01                 a1 = 0x1
   422: 64 29                    a2 = t0
   424: 82 10 80 00              ra = u64 [sp + 0x80]
   428: 95 11 88 00              sp = sp + 0x88
   432: 28 b7 0f                 jump @319
      :                          @30
   435: 82 7a                    a3 = u64 [a0]
   437: 33 08 81 00              a1 = 0x81
   441: 95 17 7f                 a0 = sp + 0x7f
   444: 33 03 57                 t1 = 0x57
   447: 01                       fallthrough
      :                          @31
   448: 64 8b                    a4 = a1
   450: 98 ac 04                 a5 = a3 >> 0x4
   453: 84 aa 0f                 a3 = a3 & 0xf
   456: 88 a8 0a                 a1 = a3 <u 0xa
   459: 33 09 30                 a2 = 0x30
   462: da 83 09                 a2 = t1 if a1 == 0
   465: be a9 09                 i32 a2 = a2 + a3
   468: 78 79                    u8 [a0] = a2
   470: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   473: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   476: 64 ca                    a3 = a5
   478: 52 0c e2                 jump @31 if a5 != 0
      :                          @32
   481: 28 30                    jump @35
      :                          @33
   483: 82 7a                    a3 = u64 [a0]
   485: 33 08 81 00              a1 = 0x81
   489: 95 17 7f                 a0 = sp + 0x7f
   492: 33 03 37                 t1 = 0x37
   495: 01                       fallthrough
      :                          @34
   496: 64 8b                    a4 = a1
   498: 98 ac 04                 a5 = a3 >> 0x4
   501: 84 aa 0f                 a3 = a3 & 0xf
   504: 88 a8 0a                 a1 = a3 <u 0xa
   507: 33 09 30                 a2 = 0x30
   510: da 83 09                 a2 = t1 if a1 == 0
   513: be a9 09                 i32 a2 = a2 + a3
   516: 78 79                    u8 [a0] = a2
   518: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   521: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   524: 64 ca                    a3 = a5
   526: 52 0c e2                 jump @34 if a5 != 0
      :                          @35
   529: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   532: 56 27 80 00 2a           jump @38 if a0 >u 128
      :                          @36
   537: 9a 8c 81 00              a5 = 0x81 - a1
   541: 64 1b                    a4 = sp
   543: c8 7b 0b                 a4 = a4 + a0
   546: 33 09 74 02 01           a2 = 0x10274
   551: 33 08 01                 a1 = 0x1
   554: 33 0a 02                 a3 = 0x2
   557: 64 27                    a0 = t0
   559: 50 10 0c 65 10           ra = 12, jump @329
      :                          @37 [@dyn 6]
   564: 82 10 80 00              ra = u64 [sp + 0x80]
   568: 95 11 88 00              sp = sp + 0x88
   572: 32 00                    ret
      :                          @38
   574: 00                       trap
      :                          @39 [export #0: 'refine']
   575: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   578: 7b 10 18                 u64 [sp + 0x18] = ra
   581: 7b 15 10                 u64 [sp + 0x10] = s0
   584: 7b 16 08                 u64 [sp + 0x8] = s1
   587: 64 86                    s1 = a1
   589: 64 78                    a1 = a0
   591: 33 09 04                 a2 = 0x4
   594: 33 07 00 00 01           a0 = 0x10000
   599: ac 96 7c                 jump @51 if s1 <u a2
      :                          @40
   602: 95 66 fc                 s1 = s1 + 0xfffffffffffffffc
   605: 51 06 76                 jump @51 if s1 == 0
      :                          @41
   608: 95 87 04                 a0 = a1 + 0x4
   611: 7d 78                    a1 = i8 [a0]
   613: 33 05 01                 s0 = 0x1
   616: 59 08 3a                 jump @49 if a1 >=s 0
      :                          @42
   619: 84 89 ff 00              a2 = a1 & 0xff
   623: 33 05 02                 s0 = 0x2
   626: 53 29 c0 00 2d           jump @48 if a2 <u 192
      :                          @43
   631: 33 05 03                 s0 = 0x3
   634: 53 29 e0 00 25           jump @48 if a2 <u 224
      :                          @44
   639: 33 05 04                 s0 = 0x4
   642: 53 29 f0 00 1d           jump @48 if a2 <u 240
      :                          @45
   647: 33 05 05                 s0 = 0x5
   650: 53 29 f8 00 15           jump @48 if a2 <u 248
      :                          @46
   655: 33 05 06                 s0 = 0x6
   658: 53 29 fc 00 0d           jump @48 if a2 <u 252
      :                          @47
   663: 88 98 fe 00              a1 = a2 <u 0xfe
   667: 9a 85 08                 s0 = 0x8 - a1
   670: 01                       fallthrough
      :                          @48
   671: ac 56 45                 jump @53 if s1 <u s0
      :                          @49
   674: 64 58                    a1 = s0
   676: 7b 17                    u64 [sp] = a0
   678: 50 10 0e d0 16           ra = 14, jump @475
      :                          @50 [@dyn 7]
   683: 64 78                    a1 = a0
   685: e4 56 07                 a0 = maxu(s1, s0)
   688: c9 57 07                 a0 = a0 - s0
   691: d8 87 09                 a2 = a0 <u a1
   694: e4 87 07                 a0 = maxu(a0, a1)
   697: c9 87 07                 a0 = a0 - a1
   700: 88 77 20                 a0 = a0 <u 0x20
   703: d4 79 09                 a2 = a2 | a0
   706: 82 17                    a0 = u64 [sp]
   708: c8 75 05                 s0 = s0 + a0
   711: 94 98                    a1 = 0 if a2 != 0
   713: 33 07 00 00 01           a0 = 0x10000
   718: da 95 07                 a0 = s0 if a2 == 0
   721: 28 05                    jump @52
      :                          @51
   723: 33 08                    a1 = 0
   725: 01                       fallthrough
      :                          @52
   726: 82 10 18                 ra = u64 [sp + 0x18]
   729: 82 15 10                 s0 = u64 [sp + 0x10]
   732: 82 16 08                 s1 = u64 [sp + 0x8]
   735: 95 11 20                 sp = sp + 0x20
   738: 32 00                    ret
      :                          @53
   740: 00                       trap
      :                          @54 [export #1: 'accumulate']
   741: 95 11 f8 fd              sp = sp + 0xfffffffffffffdf8
   745: 7b 10 00 02              u64 [sp + 0x200] = ra
   749: 7b 15 f8 01              u64 [sp + 0x1f8] = s0
   753: 7b 16 f0 01              u64 [sp + 0x1f0] = s1
   757: 33 09 08                 a2 = 0x8
   760: ac 98 fe 00              jump @86 if a1 <u a2
      :                          @55
   764: 51 17 fc 30 07           jump @162 if a0 == 4294967292
      :                          @56
   769: 51 07 2b 07              jump @162 if a0 == 0
      :                          @57
   773: 95 8a f8                 a3 = a1 + 0xfffffffffffffff8
   776: 95 75 08                 s0 = a0 + 0x8
   779: 51 0a 45                 jump @67 if a3 == 0
      :                          @58
   782: 7d 58                    a1 = i8 [s0]
   784: 33 06 01                 s1 = 0x1
   787: 59 08 40                 jump @68 if a1 >=s 0
      :                          @59
   790: 84 89 ff 00              a2 = a1 & 0xff
   794: 33 06 02                 s1 = 0x2
   797: 53 29 c0 00 2d           jump @65 if a2 <u 192
      :                          @60
   802: 33 06 03                 s1 = 0x3
   805: 53 29 e0 00 25           jump @65 if a2 <u 224
      :                          @61
   810: 33 06 04                 s1 = 0x4
   813: 53 29 f0 00 1d           jump @65 if a2 <u 240
      :                          @62
   818: 33 06 05                 s1 = 0x5
   821: 53 29 f8 00 15           jump @65 if a2 <u 248
      :                          @63
   826: 33 06 06                 s1 = 0x6
   829: 53 29 fc 00 0d           jump @65 if a2 <u 252
      :                          @64
   834: 88 98 fe 00              a1 = a2 <u 0xfe
   838: 9a 86 08                 s1 = 0x8 - a1
   841: 01                       fallthrough
      :                          @65
   842: ae 6a 09                 jump @68 if a3 >=u s1
      :                          @66
   845: 28 a9 00                 jump @86
      :                          @67
   848: 33 06                    s1 = 0
   850: 01                       fallthrough
      :                          @68
   851: 7b 16 58                 u64 [sp + 0x58] = s1
   854: 64 57                    a0 = s0
   856: 64 68                    a1 = s1
   858: 64 a6                    s1 = a3
   860: 50 10 10 1a 16           ra = 16, jump @475
      :                          @69 [@dyn 8]
   865: 82 1a 58                 a3 = u64 [sp + 0x58]
   868: 51 07 92 00              jump @86 if a0 == 0
      :                          @70
   872: e4 a6 07                 a0 = maxu(s1, a3)
   875: c9 a7 07                 a0 = a0 - a3
   878: 53 17 60 88 00           jump @86 if a0 <u 96
      :                          @71
   883: c8 5a 08                 a1 = a3 + s0
   886: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   889: 95 87 60                 a0 = a1 + 0x60
   892: 7b 17 58                 u64 [sp + 0x58] = a0
   895: 51 06 4c                 jump @82 if s1 == 0
      :                          @72
   898: 7d 78                    a1 = i8 [a0]
   900: 33 05 01                 s0 = 0x1
   903: 59 08 37                 jump @79 if a1 >=s 0
      :                          @73
   906: 84 89 ff 00              a2 = a1 & 0xff
   910: 33 05 02                 s0 = 0x2
   913: 53 29 c0 00 2d           jump @79 if a2 <u 192
      :                          @74
   918: 33 05 03                 s0 = 0x3
   921: 53 29 e0 00 25           jump @79 if a2 <u 224
      :                          @75
   926: 33 05 04                 s0 = 0x4
   929: 53 29 f0 00 1d           jump @79 if a2 <u 240
      :                          @76
   934: 33 05 05                 s0 = 0x5
   937: 53 29 f8 00 15           jump @79 if a2 <u 248
      :                          @77
   942: 33 05 06                 s0 = 0x6
   945: 53 29 fc 00 0d           jump @79 if a2 <u 252
      :                          @78
   950: 88 98 fe 00              a1 = a2 <u 0xfe
   954: 9a 85 08                 s0 = 0x8 - a1
   957: 01                       fallthrough
      :                          @79
   958: ac 56 6f 06              jump @163 if s1 <u s0
      :                          @80
   962: 64 58                    a1 = s0
   964: 50 10 12 b2 15           ra = 18, jump @475
      :                          @81 [@dyn 9]
   969: 28 07                    jump @83
      :                          @82
   971: 33 05                    s0 = 0
   973: 33 07                    a0 = 0
   975: 01                       fallthrough
      :                          @83
   976: e4 56 08                 a1 = maxu(s1, s0)
   979: c9 58 08                 a1 = a1 - s0
   982: e4 78 08                 a1 = maxu(a1, a0)
   985: c9 78 08                 a1 = a1 - a0
   988: 33 09 20                 a2 = 0x20
   991: ac 98 17                 jump @86 if a1 <u a2
      :                          @84
   994: 82 19 58                 a2 = u64 [sp + 0x58]
   997: c8 95 05                 s0 = s0 + a2
  1000: c8 57 07                 a0 = a0 + s0
  1003: 51 17 e0 41 06           jump @162 if a0 == 4294967264
      :                          @85
  1008: 33 09 29                 a2 = 0x29
  1011: ae 98 1f                 jump @88 if a1 >=u a2
      :                          @86
  1014: 33 08                    a1 = 0
  1016: 33 05 00 00 01           s0 = 0x10000
  1021: 01                       fallthrough
      :                          @87
  1022: 64 57                    a0 = s0
  1024: 82 10 00 02              ra = u64 [sp + 0x200]
  1028: 82 15 f8 01              s0 = u64 [sp + 0x1f8]
  1032: 82 16 f0 01              s1 = u64 [sp + 0x1f0]
  1036: 95 11 08 02              sp = sp + 0x208
  1040: 32 00                    ret
      :                          @88
  1042: 7c 79 28                 a2 = u8 [a0 + 0x28]
  1045: 51 09 09                 jump @90 if a2 == 0
      :                          @89
  1048: 33 09                    a2 = 0
  1050: 33 08                    a1 = 0
  1052: 28 6e                    jump @103
      :                          @90
  1054: 95 8a d7                 a3 = a1 + 0xffffffffffffffd7
  1057: 95 75 29                 s0 = a0 + 0x29
  1060: 51 0a 54                 jump @101 if a3 == 0
      :                          @91
  1063: 7d 57                    a0 = i8 [s0]
  1065: 33 06 01                 s1 = 0x1
  1068: 59 07 37                 jump @98 if a0 >=s 0
      :                          @92
  1071: 84 77 ff 00              a0 = a0 & 0xff
  1075: 33 06 02                 s1 = 0x2
  1078: 53 27 c0 00 2d           jump @98 if a0 <u 192
      :                          @93
  1083: 33 06 03                 s1 = 0x3
  1086: 53 27 e0 00 25           jump @98 if a0 <u 224
      :                          @94
  1091: 33 06 04                 s1 = 0x4
  1094: 53 27 f0 00 1d           jump @98 if a0 <u 240
      :                          @95
  1099: 33 06 05                 s1 = 0x5
  1102: 53 27 f8 00 15           jump @98 if a0 <u 248
      :                          @96
  1107: 33 06 06                 s1 = 0x6
  1110: 53 27 fc 00 0d           jump @98 if a0 <u 252
      :                          @97
  1115: 88 77 fe 00              a0 = a0 <u 0xfe
  1119: 9a 76 08                 s1 = 0x8 - a0
  1122: 01                       fallthrough
      :                          @98
  1123: 7b 1a 58                 u64 [sp + 0x58] = a3
  1126: ac 6a c8 05              jump @164 if a3 <u s1
      :                          @99
  1130: 64 57                    a0 = s0
  1132: 64 68                    a1 = s1
  1134: 50 10 14 08 15           ra = 20, jump @475
      :                          @100 [@dyn 10]
  1139: 82 1a 58                 a3 = u64 [sp + 0x58]
  1142: 28 07                    jump @102
      :                          @101
  1144: 33 06                    s1 = 0
  1146: 33 07                    a0 = 0
  1148: 01                       fallthrough
      :                          @102
  1149: c8 65 08                 a1 = s0 + s1
  1152: e4 6a 09                 a2 = maxu(a3, s1)
  1155: c9 69 09                 a2 = a2 - s1
  1158: e6 79 09                 a2 = minu(a2, a0)
  1161: 01                       fallthrough
      :                          @103
  1162: 48 11 68                 u32 [sp + 104] = 0
  1165: 49 11 60                 u64 [sp + 96] = 0
  1168: 48 11 78                 u32 [sp + 120] = 0
  1171: 49 11 70                 u64 [sp + 112] = 0
  1174: 46 11 7f                 u8 [sp + 127] = 0
  1177: 48 21 88 00              u32 [sp + 136] = 0
  1181: 49 21 80 00              u64 [sp + 128] = 0
  1185: 80 87                    a0 = u32 [a1]
  1187: c8 98 08                 a1 = a1 + a2
  1190: 7b 17 90 00              u64 [sp + 0x90] = a0
  1194: 80 85 fc                 s0 = u32 [a1 + 0xfffffffffffffffc]
  1197: 7b 15 98 00              u64 [sp + 0x98] = s0
  1201: 95 18 7f                 a1 = sp + 0x7f
  1204: 33 09 01                 a2 = 0x1
  1207: 95 1a 60                 a3 = sp + 0x60
  1210: 33 0c 0c                 a5 = 0xc
  1213: 33 0b                    a4 = 0
  1215: 0a 02                    ecalli 2 // 'read'
  1217: 95 18 7f                 a1 = sp + 0x7f
  1220: 33 09 01                 a2 = 0x1
  1223: 95 1a 70                 a3 = sp + 0x70
  1226: 33 0c 0c                 a5 = 0xc
  1229: 64 57                    a0 = s0
  1231: 33 0b                    a4 = 0
  1233: 0a 02                    ecalli 2 // 'read'
  1235: 81 17 64                 a0 = i32 [sp + 0x64]
  1238: 33 06 ff ef              s1 = 0xffffffffffffefff
  1242: 7b 16 48                 u64 [sp + 0x48] = s1
  1245: 81 18 74                 a1 = i32 [sp + 0x74]
  1248: 81 19 60                 a2 = i32 [sp + 0x60]
  1251: 7a 17 a0 00              u32 [sp + 0xa0] = a0
  1255: 81 17 68                 a0 = i32 [sp + 0x68]
  1258: 7b 17 58                 u64 [sp + 0x58] = a0
  1261: 7a 18 a4 00              u32 [sp + 0xa4] = a1
  1265: 81 17 78                 a0 = i32 [sp + 0x78]
  1268: 7b 17 50                 u64 [sp + 0x50] = a0
  1271: 7a 19 a8 00              u32 [sp + 0xa8] = a2
  1275: 95 19 a8 00              a2 = sp + 0xa8
  1279: 7b 19 b0 00              u64 [sp + 0xb0] = a2
  1283: 33 08 06                 a1 = 0x6
  1286: 7b 18 b8 00              u64 [sp + 0xb8] = a1
  1290: 95 17 90 00              a0 = sp + 0x90
  1294: 7b 17 c0 00              u64 [sp + 0xc0] = a0
  1298: 33 07 0a                 a0 = 0xa
  1301: 7b 17 38                 u64 [sp + 0x38] = a0
  1304: 7b 17 c8 00              u64 [sp + 0xc8] = a0
  1308: 7b 19 d0 00              u64 [sp + 0xd0] = a2
  1312: 7b 18 d8 00              u64 [sp + 0xd8] = a1
  1316: 95 17 a0 00              a0 = sp + 0xa0
  1320: 7b 17 e0 00              u64 [sp + 0xe0] = a0
  1324: 7b 18 40                 u64 [sp + 0x40] = a1
  1327: 7b 18 e8 00              u64 [sp + 0xe8] = a1
  1331: 33 07 30 00 01           a0 = 0x10030
  1336: 7b 17 58 01              u64 [sp + 0x158] = a0
  1340: 49 21 60 01 04           u64 [sp + 352] = 0x4
  1345: 49 21 78 01              u64 [sp + 376] = 0
  1349: 95 18 b0 00              a1 = sp + 0xb0
  1353: 7b 18 68 01              u64 [sp + 0x168] = a1
  1357: 49 21 70 01 04           u64 [sp + 368] = 0x4
  1362: 95 17 c0 01              a0 = sp + 0x1c0
  1366: 95 18 58 01              a1 = sp + 0x158
  1370: 50 10 16 95 08           ra = 22, jump @238
      :                          @104 [@dyn 11]
  1375: 82 15 c8 01              s0 = u64 [sp + 0x1c8]
  1379: 82 1b d0 01              a4 = u64 [sp + 0x1d0]
  1383: 82 16 c0 01              s1 = u64 [sp + 0x1c0]
  1387: 33 07 02                 a0 = 0x2
  1390: 33 08                    a1 = 0
  1392: 33 09                    a2 = 0
  1394: 64 5a                    a3 = s0
  1396: 33 00 18                 ra = 0x18
  1399: 0a 64                    ecalli 100 // 'log'
  1401: 01                       fallthrough
      :                          @105 [@dyn 12]
  1402: 82 17 48                 a0 = u64 [sp + 0x48]
  1405: c8 67 07                 a0 = a0 + s1
  1408: 53 27 00 f0 25           jump @111 if a0 <u 4294963200
      :                          @106
  1413: 33 07 40 00 03           a0 = 0x30040
  1418: 95 77 00 10              a0 = a0 + 0x1000
  1422: 01                       fallthrough
      :                          @107
  1423: 82 78                    a1 = u64 [a0]
  1425: c9 87 09                 a2 = a0 - a1
  1428: ab 59 11                 jump @111 if a2 != s0
      :                          @108
  1431: c9 68 09                 a2 = a1 - s1
  1434: 01                       fallthrough
      :                          @109
  1435: 82 7a                    a3 = u64 [a0]
  1437: ab 8a f2                 jump @107 if a3 != a1
      :                          @110
  1440: 7b 79                    u64 [a0] = a2
  1442: 33 0b                    a4 = 0
  1444: 01                       fallthrough
      :                          @111
  1445: 95 19 a8 00              a2 = sp + 0xa8
  1449: 7b 19 b0 00              u64 [sp + 0xb0] = a2
  1453: 82 18 40                 a1 = u64 [sp + 0x40]
  1456: 7b 18 b8 00              u64 [sp + 0xb8] = a1
  1460: 95 17 98 00              a0 = sp + 0x98
  1464: 7b 17 c0 00              u64 [sp + 0xc0] = a0
  1468: 82 17 38                 a0 = u64 [sp + 0x38]
  1471: 7b 17 c8 00              u64 [sp + 0xc8] = a0
  1475: 7b 19 d0 00              u64 [sp + 0xd0] = a2
  1479: 7b 18 d8 00              u64 [sp + 0xd8] = a1
  1483: 95 17 a4 00              a0 = sp + 0xa4
  1487: 7b 17 e0 00              u64 [sp + 0xe0] = a0
  1491: 7b 18 e8 00              u64 [sp + 0xe8] = a1
  1495: 33 07 80 00 01           a0 = 0x10080
  1500: 7b 17 58 01              u64 [sp + 0x158] = a0
  1504: 49 21 60 01 04           u64 [sp + 352] = 0x4
  1509: 49 21 78 01              u64 [sp + 376] = 0
  1513: 95 18 b0 00              a1 = sp + 0xb0
  1517: 7b 18 68 01              u64 [sp + 0x168] = a1
  1521: 49 21 70 01 04           u64 [sp + 368] = 0x4
  1526: 95 17 c0 01              a0 = sp + 0x1c0
  1530: 95 18 58 01              a1 = sp + 0x158
  1534: 50 10 1a f1 07           ra = 26, jump @238
      :                          @112 [@dyn 13]
  1539: 82 15 c8 01              s0 = u64 [sp + 0x1c8]
  1543: 82 1b d0 01              a4 = u64 [sp + 0x1d0]
  1547: 82 16 c0 01              s1 = u64 [sp + 0x1c0]
  1551: 33 07 02                 a0 = 0x2
  1554: 33 08                    a1 = 0
  1556: 33 09                    a2 = 0
  1558: 64 5a                    a3 = s0
  1560: 33 00 1c                 ra = 0x1c
  1563: 0a 64                    ecalli 100 // 'log'
  1565: 01                       fallthrough
      :                          @113 [@dyn 14]
  1566: 82 17 48                 a0 = u64 [sp + 0x48]
  1569: c8 67 07                 a0 = a0 + s1
  1572: 53 27 00 f0 23           jump @119 if a0 <u 4294963200
      :                          @114
  1577: 33 07 40 00 03           a0 = 0x30040
  1582: 95 77 00 10              a0 = a0 + 0x1000
  1586: 01                       fallthrough
      :                          @115
  1587: 82 78                    a1 = u64 [a0]
  1589: c9 87 09                 a2 = a0 - a1
  1592: ab 59 0f                 jump @119 if a2 != s0
      :                          @116
  1595: c9 68 09                 a2 = a1 - s1
  1598: 01                       fallthrough
      :                          @117
  1599: 82 7a                    a3 = u64 [a0]
  1601: ab 8a f2                 jump @115 if a3 != a1
      :                          @118
  1604: 7b 79                    u64 [a0] = a2
  1606: 01                       fallthrough
      :                          @119
  1607: 81 17 a0 00              a0 = i32 [sp + 0xa0]
  1611: 81 18 a4 00              a1 = i32 [sp + 0xa4]
  1615: be 78 05                 i32 s0 = a1 + a0
  1618: 7a 15 ac 00              u32 [sp + 0xac] = s0
  1622: 82 17 58                 a0 = u64 [sp + 0x58]
  1625: 82 16 50                 s1 = u64 [sp + 0x50]
  1628: be 76 06                 i32 s1 = s1 + a0
  1631: 95 17 b0 00              a0 = sp + 0xb0
  1635: 33 09 80 00              a2 = 0x80
  1639: 33 08                    a1 = 0
  1641: 50 10 1e a8 0a           ra = 30, jump @306
      :                          @120 [@dyn 15]
  1646: 80 17 a8 00              a0 = u32 [sp + 0xa8]
  1650: 7b 17 30 01              u64 [sp + 0x130] = a0
  1654: 97 78 01                 a1 = a0 << 0x1
  1657: 95 88 01                 a1 = a1 + 0x1
  1660: 97 88 20                 a1 = a1 << 0x20
  1663: 98 88 20                 a1 = a1 >> 0x20
  1666: 7b 18 38 01              u64 [sp + 0x138] = a1
  1670: 49 21 40 01 64           u64 [sp + 320] = 0x64
  1675: 48 21 48 01              u32 [sp + 328] = 0
  1679: 51 07 38 02              jump @144 if a0 == 0
      :                          @121
  1683: 7b 16                    u64 [sp] = s1
  1685: 7b 15 08                 u64 [sp + 0x8] = s0
  1688: 33 05                    s0 = 0
  1690: 33 0a                    a3 = 0
  1692: 14 08 ab aa aa aa 00 00 00 00 a1 = 0xaaaaaaab
  1702: ca 87 08                 a1 = a0 * a1
  1705: 98 88 21                 a1 = a1 >> 0x21
  1708: 97 89 01                 a2 = a1 << 0x1
  1711: bf 87 08                 i32 a1 = a0 - a1
  1714: bf 98 08                 i32 a1 = a1 - a2
  1717: 83 89 ff                 i32 a2 = a1 + 0xffffffffffffffff
  1720: 7b 19 20                 u64 [sp + 0x20] = a2
  1723: 86 88 02                 a1 = a1 | 0x2
  1726: 7b 18 18                 u64 [sp + 0x18] = a1
  1729: 33 08 06                 a1 = 0x6
  1732: 7b 18 38                 u64 [sp + 0x38] = a1
  1735: 33 08 0a                 a1 = 0xa
  1738: 7b 18 30                 u64 [sp + 0x30] = a1
  1741: 33 06 40 00 03           s1 = 0x30040
  1746: 95 66 00 10              s1 = s1 + 0x1000
  1750: 33 08 60 01 01           a1 = 0x10160
  1755: 7b 18 28                 u64 [sp + 0x28] = a1
  1758: 83 77                    i32 a0 = a0 + 0
  1760: 7b 17 10                 u64 [sp + 0x10] = a0
  1763: 28 13                    jump @124
      :                          @122
  1765: 82 15 58                 s0 = u64 [sp + 0x58]
  1768: 82 1a 50                 a3 = u64 [sp + 0x50]
  1771: 01                       fallthrough
      :                          @123
  1772: 83 aa 01                 i32 a3 = a3 + 0x1
  1775: 82 17 10                 a0 = u64 [sp + 0x10]
  1778: aa 7a cb 01              jump @143 if a3 == a0
      :                          @124
  1782: 7a 1a 4c 01              u32 [sp + 0x14c] = a3
  1786: 82 17 18                 a0 = u64 [sp + 0x18]
  1789: 7b 1a 50                 u64 [sp + 0x50] = a3
  1792: 52 17 02 df 00           jump @133 if a0 != 2
      :                          @125
  1797: 82 17 90 00              a0 = u64 [sp + 0x90]
  1801: 82 18 30 01              a1 = u64 [sp + 0x130]
  1805: 82 19 40 01              a2 = u64 [sp + 0x140]
  1809: 95 1a b0 00              a3 = sp + 0xb0
  1813: 0a 0b                    ecalli 11 // 'transfer'
  1815: 7b 17 50 01              u64 [sp + 0x150] = a0
  1819: 83 55 01                 i32 s0 = s0 + 0x1
  1822: 7b 15 58                 u64 [sp + 0x58] = s0
  1825: 7a 15 48 01              u32 [sp + 0x148] = s0
  1829: 95 17 4c 01              a0 = sp + 0x14c
  1833: 7b 17 58 01              u64 [sp + 0x158] = a0
  1837: 82 17 38                 a0 = u64 [sp + 0x38]
  1840: 7b 17 60 01              u64 [sp + 0x160] = a0
  1844: 95 17 90 00              a0 = sp + 0x90
  1848: 7b 17 68 01              u64 [sp + 0x168] = a0
  1852: 82 17 30                 a0 = u64 [sp + 0x30]
  1855: 7b 17 70 01              u64 [sp + 0x170] = a0
  1859: 95 18 30 01              a1 = sp + 0x130
  1863: 7b 18 78 01              u64 [sp + 0x178] = a1
  1867: 7b 17 80 01              u64 [sp + 0x180] = a0
  1871: 95 18 40 01              a1 = sp + 0x140
  1875: 7b 18 88 01              u64 [sp + 0x188] = a1
  1879: 7b 17 90 01              u64 [sp + 0x190] = a0
  1883: 95 18 50 01              a1 = sp + 0x150
  1887: 7b 18 98 01              u64 [sp + 0x198] = a1
  1891: 7b 17 a0 01              u64 [sp + 0x1a0] = a0
  1895: 82 17 28                 a0 = u64 [sp + 0x28]
  1898: 7b 17 c0 01              u64 [sp + 0x1c0] = a0
  1902: 49 21 c8 01 05           u64 [sp + 456] = 0x5
  1907: 49 21 e0 01              u64 [sp + 480] = 0
  1911: 95 18 58 01              a1 = sp + 0x158
  1915: 7b 18 d0 01              u64 [sp + 0x1d0] = a1
  1919: 49 21 d8 01 05           u64 [sp + 472] = 0x5
  1924: 95 17 a8 01              a0 = sp + 0x1a8
  1928: 95 18 c0 01              a1 = sp + 0x1c0
  1932: 50 10 20 63 06           ra = 32, jump @238
      :                          @126 [@dyn 16]
  1937: 82 15 b0 01              s0 = u64 [sp + 0x1b0]
  1941: 82 1b b8 01              a4 = u64 [sp + 0x1b8]
  1945: 82 17 a8 01              a0 = u64 [sp + 0x1a8]
  1949: 7b 17 40                 u64 [sp + 0x40] = a0
  1952: 33 07 02                 a0 = 0x2
  1955: 33 08                    a1 = 0
  1957: 33 09                    a2 = 0
  1959: 64 5a                    a3 = s0
  1961: 33 00 22                 ra = 0x22
  1964: 0a 64                    ecalli 100 // 'log'
  1966: 01                       fallthrough
      :                          @127 [@dyn 17]
  1967: 82 1b 40                 a4 = u64 [sp + 0x40]
  1970: 82 17 48                 a0 = u64 [sp + 0x48]
  1973: c8 b7 07                 a0 = a0 + a4
  1976: 53 27 00 f0 20           jump @132 if a0 <u 4294963200
      :                          @128
  1981: 82 67                    a0 = u64 [s1]
  1983: c9 76 08                 a1 = s1 - a0
  1986: ab 58 16                 jump @132 if a1 != s0
      :                          @129
  1989: c9 b7 08                 a1 = a0 - a4
  1992: 01                       fallthrough
      :                          @130
  1993: 82 69                    a2 = u64 [s1]
  1995: ab 79 f2                 jump @128 if a2 != a0
      :                          @131
  1998: 7b 68                    u64 [s1] = a1
  2000: 82 15 58                 s0 = u64 [sp + 0x58]
  2003: 82 1a 50                 a3 = u64 [sp + 0x50]
  2006: 28 09                    jump @133
      :                          @132
  2008: 82 15 58                 s0 = u64 [sp + 0x58]
  2011: 82 1a 50                 a3 = u64 [sp + 0x50]
  2014: 01                       fallthrough
      :                          @133
  2015: 82 17 20                 a0 = u64 [sp + 0x20]
  2018: 55 17 02 0a ff           jump @123 if a0 >=u 2
      :                          @134
  2023: 82 17 98 00              a0 = u64 [sp + 0x98]
  2027: 82 18 38 01              a1 = u64 [sp + 0x138]
  2031: 82 19 40 01              a2 = u64 [sp + 0x140]
  2035: 95 1a b0 00              a3 = sp + 0xb0
  2039: 0a 0b                    ecalli 11 // 'transfer'
  2041: 7b 17 50 01              u64 [sp + 0x150] = a0
  2045: 83 55 01                 i32 s0 = s0 + 0x1
  2048: 7b 15 58                 u64 [sp + 0x58] = s0
  2051: 7a 15 48 01              u32 [sp + 0x148] = s0
  2055: 95 17 4c 01              a0 = sp + 0x14c
  2059: 7b 17 58 01              u64 [sp + 0x158] = a0
  2063: 82 17 38                 a0 = u64 [sp + 0x38]
  2066: 7b 17 60 01              u64 [sp + 0x160] = a0
  2070: 95 17 98 00              a0 = sp + 0x98
  2074: 7b 17 68 01              u64 [sp + 0x168] = a0
  2078: 82 17 30                 a0 = u64 [sp + 0x30]
  2081: 7b 17 70 01              u64 [sp + 0x170] = a0
  2085: 95 18 38 01              a1 = sp + 0x138
  2089: 7b 18 78 01              u64 [sp + 0x178] = a1
  2093: 7b 17 80 01              u64 [sp + 0x180] = a0
  2097: 95 18 40 01              a1 = sp + 0x140
  2101: 7b 18 88 01              u64 [sp + 0x188] = a1
  2105: 7b 17 90 01              u64 [sp + 0x190] = a0
  2109: 95 18 50 01              a1 = sp + 0x150
  2113: 7b 18 98 01              u64 [sp + 0x198] = a1
  2117: 7b 17 a0 01              u64 [sp + 0x1a0] = a0
  2121: 82 17 28                 a0 = u64 [sp + 0x28]
  2124: 7b 17 c0 01              u64 [sp + 0x1c0] = a0
  2128: 49 21 c8 01 05           u64 [sp + 456] = 0x5
  2133: 49 21 e0 01              u64 [sp + 480] = 0
  2137: 95 18 58 01              a1 = sp + 0x158
  2141: 7b 18 d0 01              u64 [sp + 0x1d0] = a1
  2145: 49 21 d8 01 05           u64 [sp + 472] = 0x5
  2150: 95 17 a8 01              a0 = sp + 0x1a8
  2154: 95 18 c0 01              a1 = sp + 0x1c0
  2158: 50 10 24 81 05           ra = 36, jump @238
      :                          @135 [@dyn 18]
  2163: 82 15 b0 01              s0 = u64 [sp + 0x1b0]
  2167: 82 1b b8 01              a4 = u64 [sp + 0x1b8]
  2171: 82 17 a8 01              a0 = u64 [sp + 0x1a8]
  2175: 7b 17 40                 u64 [sp + 0x40] = a0
  2178: 33 07 02                 a0 = 0x2
  2181: 33 08                    a1 = 0
  2183: 33 09                    a2 = 0
  2185: 64 5a                    a3 = s0
  2187: 33 00 26                 ra = 0x26
  2190: 0a 64                    ecalli 100 // 'log'
  2192: 01                       fallthrough
      :                          @136 [@dyn 19]
  2193: 82 1b 40                 a4 = u64 [sp + 0x40]
  2196: 82 17 48                 a0 = u64 [sp + 0x48]
  2199: c8 b7 07                 a0 = a0 + a4
  2202: 53 27 00 f0 4b fe        jump @122 if a0 <u 4294963200
      :                          @137
  2208: 82 67                    a0 = u64 [s1]
  2210: c9 76 08                 a1 = s1 - a0
  2213: ab 58 40 fe              jump @122 if a1 != s0
      :                          @138
  2217: c9 b7 08                 a1 = a0 - a4
  2220: 01                       fallthrough
      :                          @139
  2221: 82 69                    a2 = u64 [s1]
  2223: ab 79 f1                 jump @137 if a2 != a0
      :                          @140
  2226: 7b 68                    u64 [s1] = a1
  2228: 33 0a                    a3 = 0
  2230: 01                       fallthrough
      :                          @141
  2231: ab 79 e9                 jump @137 if a2 != a0
      :                          @142
  2234: 28 2b fe                 jump @122
      :                          @143
  2237: 81 17 a8 00              a0 = i32 [sp + 0xa8]
  2241: 82 15 08                 s0 = u64 [sp + 0x8]
  2244: 82 16                    s1 = u64 [sp]
  2246: 01                       fallthrough
      :                          @144
  2247: 7a 17 80 00              u32 [sp + 0x80] = a0
  2251: 7a 15 84 00              u32 [sp + 0x84] = s0
  2255: 7a 16 88 00              u32 [sp + 0x88] = s1
  2259: 95 17 a8 00              a0 = sp + 0xa8
  2263: 7b 17 c0 01              u64 [sp + 0x1c0] = a0
  2267: 33 07 06                 a0 = 0x6
  2270: 7b 17 c8 01              u64 [sp + 0x1c8] = a0
  2274: 95 18 ac 00              a1 = sp + 0xac
  2278: 7b 18 d0 01              u64 [sp + 0x1d0] = a1
  2282: 7b 17 58                 u64 [sp + 0x58] = a0
  2285: 7b 17 d8 01              u64 [sp + 0x1d8] = a0
  2289: 33 07 c0 00 01           a0 = 0x100c0
  2294: 7b 17 58 01              u64 [sp + 0x158] = a0
  2298: 49 21 60 01 02           u64 [sp + 352] = 0x2
  2303: 49 21 78 01              u64 [sp + 376] = 0
  2307: 95 18 c0 01              a1 = sp + 0x1c0
  2311: 7b 18 68 01              u64 [sp + 0x168] = a1
  2315: 49 21 70 01 02           u64 [sp + 368] = 0x2
  2320: 95 17 a8 01              a0 = sp + 0x1a8
  2324: 95 18 58 01              a1 = sp + 0x158
  2328: 50 10 28 d7 04           ra = 40, jump @238
      :                          @145 [@dyn 20]
  2333: 82 15 b0 01              s0 = u64 [sp + 0x1b0]
  2337: 82 1b b8 01              a4 = u64 [sp + 0x1b8]
  2341: 82 16 a8 01              s1 = u64 [sp + 0x1a8]
  2345: 33 07 02                 a0 = 0x2
  2348: 33 08                    a1 = 0
  2350: 33 09                    a2 = 0
  2352: 64 5a                    a3 = s0
  2354: 33 00 2a                 ra = 0x2a
  2357: 0a 64                    ecalli 100 // 'log'
  2359: 01                       fallthrough
      :                          @146 [@dyn 21]
  2360: 82 17 48                 a0 = u64 [sp + 0x48]
  2363: c8 67 07                 a0 = a0 + s1
  2366: 53 27 00 f0 23           jump @152 if a0 <u 4294963200
      :                          @147
  2371: 33 07 40 00 03           a0 = 0x30040
  2376: 95 77 00 10              a0 = a0 + 0x1000
  2380: 01                       fallthrough
      :                          @148
  2381: 82 78                    a1 = u64 [a0]
  2383: c9 87 09                 a2 = a0 - a1
  2386: ab 59 0f                 jump @152 if a2 != s0
      :                          @149
  2389: c9 68 09                 a2 = a1 - s1
  2392: 01                       fallthrough
      :                          @150
  2393: 82 7a                    a3 = u64 [a0]
  2395: ab 8a f2                 jump @148 if a3 != a1
      :                          @151
  2398: 7b 79                    u64 [a0] = a2
  2400: 01                       fallthrough
      :                          @152
  2401: 95 17 7f                 a0 = sp + 0x7f
  2404: 33 08 01                 a1 = 0x1
  2407: 95 19 80 00              a2 = sp + 0x80
  2411: 33 0a 0c                 a3 = 0xc
  2414: 0a 03                    ecalli 3 // 'write'
  2416: 95 17 a8 00              a0 = sp + 0xa8
  2420: 7b 17 58 01              u64 [sp + 0x158] = a0
  2424: 82 17 58                 a0 = u64 [sp + 0x58]
  2427: 7b 17 60 01              u64 [sp + 0x160] = a0
  2431: 95 18 ac 00              a1 = sp + 0xac
  2435: 7b 18 68 01              u64 [sp + 0x168] = a1
  2439: 7b 17 70 01              u64 [sp + 0x170] = a0
  2443: 95 17 48 01              a0 = sp + 0x148
  2447: 7b 17 78 01              u64 [sp + 0x178] = a0
  2451: 33 07 02                 a0 = 0x2
  2454: 7b 17 80 01              u64 [sp + 0x180] = a0
  2458: 33 07 00 01 01           a0 = 0x10100
  2463: 7b 17 c0 01              u64 [sp + 0x1c0] = a0
  2467: 49 21 c8 01 03           u64 [sp + 456] = 0x3
  2472: 49 21 e0 01              u64 [sp + 480] = 0
  2476: 95 18 58 01              a1 = sp + 0x158
  2480: 7b 18 d0 01              u64 [sp + 0x1d0] = a1
  2484: 49 21 d8 01 03           u64 [sp + 472] = 0x3
  2489: 95 17 a8 01              a0 = sp + 0x1a8
  2493: 95 18 c0 01              a1 = sp + 0x1c0
  2497: 50 10 2c 2e 04           ra = 44, jump @238
      :                          @153 [@dyn 22]
  2502: 82 15 b0 01              s0 = u64 [sp + 0x1b0]
  2506: 82 1b b8 01              a4 = u64 [sp + 0x1b8]
  2510: 82 16 a8 01              s1 = u64 [sp + 0x1a8]
  2514: 33 07 02                 a0 = 0x2
  2517: 33 08                    a1 = 0
  2519: 33 09                    a2 = 0
  2521: 64 5a                    a3 = s0
  2523: 33 00 2e                 ra = 0x2e
  2526: 0a 64                    ecalli 100 // 'log'
  2528: 01                       fallthrough
      :                          @154 [@dyn 23]
  2529: 82 17 48                 a0 = u64 [sp + 0x48]
  2532: c8 67 07                 a0 = a0 + s1
  2535: 53 27 00 f0 25           jump @160 if a0 <u 4294963200
      :                          @155
  2540: 33 07 40 00 03           a0 = 0x30040
  2545: 95 77 00 10              a0 = a0 + 0x1000
  2549: 01                       fallthrough
      :                          @156
  2550: 82 78                    a1 = u64 [a0]
  2552: c9 87 09                 a2 = a0 - a1
  2555: ab 59 11                 jump @160 if a2 != s0
      :                          @157
  2558: c9 68 09                 a2 = a1 - s1
  2561: 01                       fallthrough
      :                          @158
  2562: 82 7a                    a3 = u64 [a0]
  2564: ab 8a f2                 jump @156 if a3 != a1
      :                          @159
  2567: 7b 79                    u64 [a0] = a2
  2569: 33 0b                    a4 = 0
  2571: 01                       fallthrough
      :                          @160
  2572: 33 05 11 00 03           s0 = 0x30011
  2577: 95 18 80 00              a1 = sp + 0x80
  2581: 33 09 0c                 a2 = 0xc
  2584: 33 07 11 00 03           a0 = 0x30011
  2589: 50 10 30 42 06           ra = 48, jump @288
      :                          @161 [@dyn 24]
  2594: 64 57                    a0 = s0
  2596: 0a 10                    ecalli 16 // 'oyield'
  2598: 33 08 20                 a1 = 0x20
  2601: 28 d5 f9                 jump @87
      :                          @162
  2604: 00                       trap
      :                          @163
  2605: 00                       trap
      :                          @164
  2606: 00                       trap
      :                          @165 [export #2: 'on_transfer']
  2607: 95 11 e0 fe              sp = sp + 0xfffffffffffffee0
  2611: 7b 10 18 01              u64 [sp + 0x118] = ra
  2615: 7b 15 10 01              u64 [sp + 0x110] = s0
  2619: 7b 16 08 01              u64 [sp + 0x108] = s1
  2623: 49 11 08 ff ef           u64 [sp + 8] = 0xffffffffffffefff
  2628: 0a                       ecalli 0 // 'gas'
  2629: 7b 17 10                 u64 [sp + 0x10] = a0
  2632: 7b 17 18                 u64 [sp + 0x18] = a0
  2635: 46 11 27 04              u8 [sp + 39] = 0x4
  2639: 7b 17 28                 u64 [sp + 0x28] = a0
  2642: 95 17 27                 a0 = sp + 0x27
  2645: 33 08 01                 a1 = 0x1
  2648: 95 19 28                 a2 = sp + 0x28
  2651: 33 0a 08                 a3 = 0x8
  2654: 0a 03                    ecalli 3 // 'write'
  2656: 95 17 27                 a0 = sp + 0x27
  2659: 7b 17 78                 u64 [sp + 0x78] = a0
  2662: 33 07 82 00              a0 = 0x82
  2666: 7b 17 80 00              u64 [sp + 0x80] = a0
  2670: 95 17 18                 a0 = sp + 0x18
  2673: 7b 17 88 00              u64 [sp + 0x88] = a0
  2677: 49 21 98 00 02           u64 [sp + 152] = 0x2
  2682: 49 21 a8 00 02           u64 [sp + 168] = 0x2
  2687: 49 21 b8 00              u64 [sp + 184] = 0
  2691: 14 07 20 00 00 00 10 00 00 00 a0 = 0x1000000020
  2701: 7b 17 c0 00              u64 [sp + 0xc0] = a0
  2705: 46 21 c8 00 03           u8 [sp + 200] = 0x3
  2710: 49 21 d0 00 02           u64 [sp + 208] = 0x2
  2715: 49 21 e0 00 02           u64 [sp + 224] = 0x2
  2720: 49 21 f0 00 01           u64 [sp + 240] = 0x1
  2725: 7b 17 f8 00              u64 [sp + 0xf8] = a0
  2729: 33 07 0a                 a0 = 0xa
  2732: 7b 17                    u64 [sp] = a0
  2734: 7b 17 90 00              u64 [sp + 0x90] = a0
  2738: 46 21 00 01 03           u8 [sp + 256] = 0x3
  2743: 33 07 58 03 01           a0 = 0x10358
  2748: 7b 17 48                 u64 [sp + 0x48] = a0
  2751: 49 11 50 02              u64 [sp + 80] = 0x2
  2755: 95 17 98 00              a0 = sp + 0x98
  2759: 7b 17 68                 u64 [sp + 0x68] = a0
  2762: 49 11 70 02              u64 [sp + 112] = 0x2
  2766: 95 17 78                 a0 = sp + 0x78
  2769: 7b 17 58                 u64 [sp + 0x58] = a0
  2772: 49 11 60 02              u64 [sp + 96] = 0x2
  2776: 95 17 30                 a0 = sp + 0x30
  2779: 95 18 48                 a1 = sp + 0x48
  2782: 50 10 32 11 03           ra = 50, jump @238
      :                          @166 [@dyn 25]
  2787: 82 15 38                 s0 = u64 [sp + 0x38]
  2790: 82 1b 40                 a4 = u64 [sp + 0x40]
  2793: 82 16 30                 s1 = u64 [sp + 0x30]
  2796: 33 07 02                 a0 = 0x2
  2799: 33 08                    a1 = 0
  2801: 33 09                    a2 = 0
  2803: 64 5a                    a3 = s0
  2805: 33 00 34                 ra = 0x34
  2808: 0a 64                    ecalli 100 // 'log'
  2810: 01                       fallthrough
      :                          @167 [@dyn 26]
  2811: 82 17 08                 a0 = u64 [sp + 0x8]
  2814: c8 67 07                 a0 = a0 + s1
  2817: 53 27 00 f0 25           jump @173 if a0 <u 4294963200
      :                          @168
  2822: 33 07 40 00 03           a0 = 0x30040
  2827: 95 77 00 10              a0 = a0 + 0x1000
  2831: 01                       fallthrough
      :                          @169
  2832: 82 78                    a1 = u64 [a0]
  2834: c9 87 09                 a2 = a0 - a1
  2837: ab 59 11                 jump @173 if a2 != s0
      :                          @170
  2840: c9 68 09                 a2 = a1 - s1
  2843: 01                       fallthrough
      :                          @171
  2844: 82 7a                    a3 = u64 [a0]
  2846: ab 8a f2                 jump @169 if a3 != a1
      :                          @172
  2849: 7b 79                    u64 [a0] = a2
  2851: 33 0b                    a4 = 0
  2853: 01                       fallthrough
      :                          @173
  2854: 95 17 10                 a0 = sp + 0x10
  2857: 7b 17 78                 u64 [sp + 0x78] = a0
  2860: 82 17                    a0 = u64 [sp]
  2862: 7b 17 80 00              u64 [sp + 0x80] = a0
  2866: 33 07 e8 01 01           a0 = 0x101e8
  2871: 7b 17 98 00              u64 [sp + 0x98] = a0
  2875: 49 21 a0 00 02           u64 [sp + 160] = 0x2
  2880: 49 21 b8 00              u64 [sp + 184] = 0
  2884: 95 17 78                 a0 = sp + 0x78
  2887: 7b 17 a8 00              u64 [sp + 0xa8] = a0
  2891: 49 21 b0 00 01           u64 [sp + 176] = 0x1
  2896: 95 17 48                 a0 = sp + 0x48
  2899: 95 18 98 00              a1 = sp + 0x98
  2903: 50 10 36 98 02           ra = 54, jump @238
      :                          @174 [@dyn 27]
  2908: 82 15 50                 s0 = u64 [sp + 0x50]
  2911: 82 1b 58                 a4 = u64 [sp + 0x58]
  2914: 82 16 48                 s1 = u64 [sp + 0x48]
  2917: 33 07 02                 a0 = 0x2
  2920: 33 08                    a1 = 0
  2922: 33 09                    a2 = 0
  2924: 64 5a                    a3 = s0
  2926: 33 00 38                 ra = 0x38
  2929: 0a 64                    ecalli 100 // 'log'
  2931: 01                       fallthrough
      :                          @175 [@dyn 28]
  2932: 82 17 08                 a0 = u64 [sp + 0x8]
  2935: c8 67 07                 a0 = a0 + s1
  2938: 53 27 00 f0 25           jump @181 if a0 <u 4294963200
      :                          @176
  2943: 33 07 40 00 03           a0 = 0x30040
  2948: 95 77 00 10              a0 = a0 + 0x1000
  2952: 01                       fallthrough
      :                          @177
  2953: 82 78                    a1 = u64 [a0]
  2955: c9 87 09                 a2 = a0 - a1
  2958: ab 59 11                 jump @181 if a2 != s0
      :                          @178
  2961: c9 68 09                 a2 = a1 - s1
  2964: 01                       fallthrough
      :                          @179
  2965: 82 7a                    a3 = u64 [a0]
  2967: ab 8a f2                 jump @177 if a3 != a1
      :                          @180
  2970: 7b 79                    u64 [a0] = a2
  2972: 33 0b                    a4 = 0
  2974: 01                       fallthrough
      :                          @181
  2975: 33 07 00 00 01           a0 = 0x10000
  2980: 33 08                    a1 = 0
  2982: 82 10 18 01              ra = u64 [sp + 0x118]
  2986: 82 15 10 01              s0 = u64 [sp + 0x110]
  2990: 82 16 08 01              s1 = u64 [sp + 0x108]
  2994: 95 11 20 01              sp = sp + 0x120
  2998: 32 00                    ret
      :                          @182
  3000: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  3003: 7b 10 40                 u64 [sp + 0x40] = ra
  3006: 7b 15 38                 u64 [sp + 0x38] = s0
  3009: 7b 16 30                 u64 [sp + 0x30] = s1
  3012: c8 89 09                 a2 = a2 + a1
  3015: ac 89 52                 jump @190 if a2 <u a1
      :                          @183
  3018: 64 75                    s0 = a0
  3020: 82 77                    a0 = u64 [a0]
  3022: 97 78 01                 a1 = a0 << 0x1
  3025: 33 0a 08                 a3 = 0x8
  3028: e4 a9 09                 a2 = maxu(a2, a3)
  3031: e4 98 06                 s1 = maxu(a1, a2)
  3034: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  3037: 98 88 3f                 a1 = a1 >> 0x3f
  3040: 51 07 12                 jump @185 if a0 == 0
      :                          @184
  3043: 82 59 08                 a2 = u64 [s0 + 0x8]
  3046: 7b 19 18                 u64 [sp + 0x18] = a2
  3049: 49 11 20 01              u64 [sp + 32] = 0x1
  3053: 7b 17 28                 u64 [sp + 0x28] = a0
  3056: 28 06                    jump @186
      :                          @185
  3058: 49 11 20                 u64 [sp + 32] = 0
  3061: 01                       fallthrough
      :                          @186
  3062: 64 17                    a0 = sp
  3064: 95 1a 18                 a3 = sp + 0x18
  3067: 64 69                    a2 = s1
  3069: 50 10 3a 32              ra = 58, jump @194
      :                          @187 [@dyn 29]
  3073: 82 18                    a1 = u64 [sp]
  3075: 82 17 08                 a0 = u64 [sp + 0x8]
  3078: 51 08 14                 jump @191 if a1 == 0
      :                          @188
  3081: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  3091: aa 87 0d                 jump @192 if a0 == a1
      :                          @189
  3094: 52 07 18                 jump @193 if a0 != 0
      :                          @190
  3097: 00                       trap
      :                          @191
  3098: 7b 57 08                 u64 [s0 + 0x8] = a0
  3101: 7b 56                    u64 [s0] = s1
  3103: 01                       fallthrough
      :                          @192
  3104: 82 10 40                 ra = u64 [sp + 0x40]
  3107: 82 15 38                 s0 = u64 [sp + 0x38]
  3110: 82 16 30                 s1 = u64 [sp + 0x30]
  3113: 95 11 48                 sp = sp + 0x48
  3116: 32 00                    ret
      :                          @193
  3118: 00                       trap
      :                          @194
  3119: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  3122: 7b 10 30                 u64 [sp + 0x30] = ra
  3125: 7b 15 28                 u64 [sp + 0x28] = s0
  3128: 7b 16 20                 u64 [sp + 0x20] = s1
  3131: 64 95                    s0 = a2
  3133: 64 72                    t0 = a0
  3135: 51 08 76                 jump @204 if a1 == 0
      :                          @195
  3138: 82 a7 08                 a0 = u64 [a3 + 0x8]
  3141: 51 07 79                 jump @205 if a0 == 0
      :                          @196
  3144: 82 a9 10                 a2 = u64 [a3 + 0x10]
  3147: 51 09 a6 00              jump @212 if a2 == 0
      :                          @197
  3151: 82 a8                    a1 = u64 [a3]
  3153: 33 06 40 00 03           s1 = 0x30040
  3158: 33 03 00 10              t1 = 0x1000
  3162: c8 36 06                 s1 = s1 + t1
  3165: 01                       fallthrough
      :                          @198
  3166: 82 6a                    a3 = u64 [s1]
  3168: c8 5a 07                 a0 = a3 + s0
  3171: ac a7 cb 00              jump @218 if a0 <u a3
      :                          @199
  3175: 95 7b 01                 a4 = a0 + 0x1
  3178: 88 bc 01                 a5 = a4 <u 0x1
  3181: d8 b3 0b                 a4 = t1 <u a4
  3184: d4 cb 0b                 a4 = a4 | a5
  3187: 52 0b bb 00              jump @218 if a4 != 0
      :                          @200
  3191: 82 6b                    a4 = u64 [s1]
  3193: ab ab e5                 jump @198 if a4 != a3
      :                          @201
  3196: 7b 67                    u64 [s1] = a0
  3198: 33 0c                    a5 = 0
  3200: 7b 12 18                 u64 [sp + 0x18] = t0
  3203: 33 0a 40 00 03           a3 = 0x30040
  3208: 33 0b 00 10              a4 = 0x1000
  3212: 7b 1a                    u64 [sp] = a3
  3214: c8 ba 0a                 a3 = a3 + a4
  3217: c9 7a 07                 a0 = a3 - a0
  3220: 7b 17 10                 u64 [sp + 0x10] = a0
  3223: 7b 18 08                 u64 [sp + 0x8] = a1
  3226: 64 96                    s1 = a2
  3228: 50 10 3c c3 03           ra = 60, jump @288
      :                          @202 [@dyn 30]
  3233: 54 26 00 10 95 00        jump @219 if s1 <=u 4096
      :                          @203
  3239: 82 12 18                 t0 = u64 [sp + 0x18]
  3242: 82 18 10                 a1 = u64 [sp + 0x10]
  3245: 33 07                    a0 = 0
  3247: 7b 28 08                 u64 [t0 + 0x8] = a1
  3250: 28 b2 00                 jump @225
      :                          @204
  3253: 49 12 08                 u64 [t0 + 8] = 0
  3256: 33 07 01                 a0 = 0x1
  3259: 28 a9 00                 jump @225
      :                          @205
  3262: 33 09 40 00 03           a2 = 0x30040
  3267: 33 07 00 10              a0 = 0x1000
  3271: c8 79 09                 a2 = a2 + a0
  3274: 01                       fallthrough
      :                          @206
  3275: 82 9a                    a3 = u64 [a2]
  3277: c8 5a 08                 a1 = a3 + s0
  3280: ac a8 5e                 jump @218 if a1 <u a3
      :                          @207
  3283: 95 8b 01                 a4 = a1 + 0x1
  3286: 88 bc 01                 a5 = a4 <u 0x1
  3289: d8 b7 0b                 a4 = a0 <u a4
  3292: d4 cb 0b                 a4 = a4 | a5
  3295: 52 0b 4f                 jump @218 if a4 != 0
      :                          @208
  3298: 82 9b                    a4 = u64 [a2]
  3300: ab ab e7                 jump @206 if a4 != a3
      :                          @209
  3303: 7b 98                    u64 [a2] = a1
  3305: 33 0c                    a5 = 0
  3307: 01                       fallthrough
      :                          @210
  3308: ab ab df                 jump @206 if a4 != a3
      :                          @211
  3311: 28 30                    jump @217
      :                          @212
  3313: 33 09 40 00 03           a2 = 0x30040
  3318: 33 07 00 10              a0 = 0x1000
  3322: c8 79 09                 a2 = a2 + a0
  3325: 01                       fallthrough
      :                          @213
  3326: 82 9a                    a3 = u64 [a2]
  3328: c8 5a 08                 a1 = a3 + s0
  3331: ac a8 2b                 jump @218 if a1 <u a3
      :                          @214
  3334: 95 8b 01                 a4 = a1 + 0x1
  3337: 88 bc 01                 a5 = a4 <u 0x1
  3340: d8 b7 0b                 a4 = a0 <u a4
  3343: d4 cb 0b                 a4 = a4 | a5
  3346: 52 0b 1c                 jump @218 if a4 != 0
      :                          @215
  3349: 82 9b                    a4 = u64 [a2]
  3351: ab ab e7                 jump @213 if a4 != a3
      :                          @216
  3354: 7b 98                    u64 [a2] = a1
  3356: 33 0c                    a5 = 0
  3358: 01                       fallthrough
      :                          @217
  3359: 33 07 40 10 03           a0 = 0x31040
  3364: c9 87 08                 a1 = a0 - a1
  3367: 33 07                    a0 = 0
  3369: 7b 28 08                 u64 [t0 + 0x8] = a1
  3372: 28 38                    jump @225
      :                          @218
  3374: 33 07 01                 a0 = 0x1
  3377: 7b 27 08                 u64 [t0 + 0x8] = a0
  3380: 28 30                    jump @225
      :                          @219
  3382: 64 6c                    a5 = s1
  3384: 82 17                    a0 = u64 [sp]
  3386: 95 77 00 10              a0 = a0 + 0x1000
  3390: 82 12 18                 t0 = u64 [sp + 0x18]
  3393: 82 16 08                 s1 = u64 [sp + 0x8]
  3396: 01                       fallthrough
      :                          @220
  3397: 82 78                    a1 = u64 [a0]
  3399: c9 87 09                 a2 = a0 - a1
  3402: ab 69 11                 jump @224 if a2 != s1
      :                          @221
  3405: c9 c8 09                 a2 = a1 - a5
  3408: 01                       fallthrough
      :                          @222
  3409: 82 7a                    a3 = u64 [a0]
  3411: ab 8a f2                 jump @220 if a3 != a1
      :                          @223
  3414: 7b 79                    u64 [a0] = a2
  3416: 33 0b                    a4 = 0
  3418: 01                       fallthrough
      :                          @224
  3419: 82 18 10                 a1 = u64 [sp + 0x10]
  3422: 33 07                    a0 = 0
  3424: 7b 28 08                 u64 [t0 + 0x8] = a1
  3427: 01                       fallthrough
      :                          @225
  3428: 7b 25 10                 u64 [t0 + 0x10] = s0
  3431: 7b 27                    u64 [t0] = a0
  3433: 82 10 30                 ra = u64 [sp + 0x30]
  3436: 82 15 28                 s0 = u64 [sp + 0x28]
  3439: 82 16 20                 s1 = u64 [sp + 0x20]
  3442: 95 11 38                 sp = sp + 0x38
  3445: 32 00                    ret
      :                          @226
  3447: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  3450: 7b 10 40                 u64 [sp + 0x40] = ra
  3453: 7b 15 38                 u64 [sp + 0x38] = s0
  3456: 7b 16 30                 u64 [sp + 0x30] = s1
  3459: 95 88 01                 a1 = a1 + 0x1
  3462: 51 08 53                 jump @234 if a1 == 0
      :                          @227
  3465: 64 75                    s0 = a0
  3467: 82 77                    a0 = u64 [a0]
  3469: 97 79 01                 a2 = a0 << 0x1
  3472: 33 0a 08                 a3 = 0x8
  3475: e4 a8 08                 a1 = maxu(a1, a3)
  3478: e4 89 06                 s1 = maxu(a2, a1)
  3481: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  3484: 98 88 3f                 a1 = a1 >> 0x3f
  3487: 51 07 12                 jump @229 if a0 == 0
      :                          @228
  3490: 82 59 08                 a2 = u64 [s0 + 0x8]
  3493: 7b 19 18                 u64 [sp + 0x18] = a2
  3496: 49 11 20 01              u64 [sp + 32] = 0x1
  3500: 7b 17 28                 u64 [sp + 0x28] = a0
  3503: 28 06                    jump @230
      :                          @229
  3505: 49 11 20                 u64 [sp + 32] = 0
  3508: 01                       fallthrough
      :                          @230
  3509: 64 17                    a0 = sp
  3511: 95 1a 18                 a3 = sp + 0x18
  3514: 64 69                    a2 = s1
  3516: 50 10 3e 73 fe           ra = 62, jump @194
      :                          @231 [@dyn 31]
  3521: 82 18                    a1 = u64 [sp]
  3523: 82 17 08                 a0 = u64 [sp + 0x8]
  3526: 51 08 14                 jump @235 if a1 == 0
      :                          @232
  3529: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  3539: aa 87 0d                 jump @236 if a0 == a1
      :                          @233
  3542: 52 07 18                 jump @237 if a0 != 0
      :                          @234
  3545: 00                       trap
      :                          @235
  3546: 7b 57 08                 u64 [s0 + 0x8] = a0
  3549: 7b 56                    u64 [s0] = s1
  3551: 01                       fallthrough
      :                          @236
  3552: 82 10 40                 ra = u64 [sp + 0x40]
  3555: 82 15 38                 s0 = u64 [sp + 0x38]
  3558: 82 16 30                 s1 = u64 [sp + 0x30]
  3561: 95 11 48                 sp = sp + 0x48
  3564: 32 00                    ret
      :                          @237
  3566: 00                       trap
      :                          @238
  3567: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  3570: 7b 10 30                 u64 [sp + 0x30] = ra
  3573: 7b 15 28                 u64 [sp + 0x28] = s0
  3576: 7b 16 20                 u64 [sp + 0x20] = s1
  3579: 64 89                    a2 = a1
  3581: 82 8a 08                 a3 = u64 [a1 + 0x8]
  3584: 64 75                    s0 = a0
  3586: 51 0a 35                 jump @243 if a3 == 0
      :                          @239
  3589: 82 98                    a1 = u64 [a2]
  3591: 33 07                    a0 = 0
  3593: 95 8b 08                 a4 = a1 + 0x8
  3596: 01                       fallthrough
      :                          @240
  3597: 82 bc                    a5 = u64 [a4]
  3599: c8 c7 07                 a0 = a0 + a5
  3602: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  3605: 95 bb 10                 a4 = a4 + 0x10
  3608: 52 0a f5                 jump @240 if a3 != 0
      :                          @241
  3611: 82 9a 18                 a3 = u64 [a2 + 0x18]
  3614: 51 0a 24                 jump @245 if a3 == 0
      :                          @242
  3617: 82 88 08                 a1 = u64 [a1 + 0x8]
  3620: 8e 88                    a1 = a1 >u 0
  3622: 88 7a 10                 a3 = a0 <u 0x10
  3625: 85 aa 01                 a3 = a3 ^ 0x1
  3628: d4 a8 08                 a1 = a1 | a3
  3631: 89 7a                    a3 = a0 <s 0
  3633: e0 a8 08                 a1 = a1 & ~a3
  3636: 52 08 0a                 jump @244 if a1 != 0
      :                          @243
  3639: 33 07                    a0 = 0
  3641: 33 08 01                 a1 = 0x1
  3644: 28 49                    jump @253
      :                          @244
  3646: 97 77 01                 a0 = a0 << 0x1
  3649: 01                       fallthrough
      :                          @245
  3650: 51 07 3f                 jump @252 if a0 == 0
      :                          @246
  3653: 57 07 77                 jump @258 if a0 <s 0
      :                          @247
  3656: 64 52                    t0 = s0
  3658: 33 0b 40 00 03           a4 = 0x30040
  3663: 33 08 00 10              a1 = 0x1000
  3667: c8 8b 0b                 a4 = a4 + a1
  3670: 01                       fallthrough
      :                          @248
  3671: 82 bc                    a5 = u64 [a4]
  3673: c8 7c 0a                 a3 = a5 + a0
  3676: ac ca 5e                 jump @256 if a3 <u a5
      :                          @249
  3679: 95 a5 01                 s0 = a3 + 0x1
  3682: 88 56 01                 s1 = s0 <u 0x1
  3685: d8 58 05                 s0 = a1 <u s0
  3688: d4 65 05                 s0 = s0 | s1
  3691: 52 05 4f                 jump @256 if s0 != 0
      :                          @250
  3694: 82 b6                    s1 = u64 [a4]
  3696: ab c6 e7                 jump @248 if s1 != a5
      :                          @251
  3699: 7b ba                    u64 [a4] = a3
  3701: 33 08 40 10 03           a1 = 0x31040
  3706: c9 a8 08                 a1 = a1 - a3
  3709: 64 25                    s0 = t0
  3711: 28 06                    jump @253
      :                          @252
  3713: 33 08 01                 a1 = 0x1
  3716: 01                       fallthrough
      :                          @253
  3717: 7b 17                    u64 [sp] = a0
  3719: 7b 18 08                 u64 [sp + 0x8] = a1
  3722: 49 11 10                 u64 [sp + 16] = 0
  3725: 33 08 08 02 01           a1 = 0x10208
  3730: 64 17                    a0 = sp
  3732: 50 10 40 81 06           ra = 64, jump @383
      :                          @254 [@dyn 32]
  3737: 52 07 22                 jump @257 if a0 != 0
      :                          @255
  3740: 82 17 10                 a0 = u64 [sp + 0x10]
  3743: 82 18 08                 a1 = u64 [sp + 0x8]
  3746: 82 19                    a2 = u64 [sp]
  3748: 7b 57 10                 u64 [s0 + 0x10] = a0
  3751: 7b 58 08                 u64 [s0 + 0x8] = a1
  3754: 7b 59                    u64 [s0] = a2
  3756: 82 10 30                 ra = u64 [sp + 0x30]
  3759: 82 15 28                 s0 = u64 [sp + 0x28]
  3762: 82 16 20                 s1 = u64 [sp + 0x20]
  3765: 95 11 38                 sp = sp + 0x38
  3768: 32 00                    ret
      :                          @256
  3770: 00                       trap
      :                          @257
  3771: 00                       trap
      :                          @258
  3772: 00                       trap
      :                          @259 [@dyn 33]
  3773: 82 72                    t0 = u64 [a0]
  3775: 33 09 00 f0              a2 = 0xfffffffffffff000
  3779: 95 2a ff ef              a3 = t0 + 0xffffffffffffefff
  3783: ac 9a 27                 jump @265 if a3 <u a2
      :                          @260
  3786: 82 77 08                 a0 = u64 [a0 + 0x8]
  3789: 33 09 40 00 03           a2 = 0x30040
  3794: 95 99 00 10              a2 = a2 + 0x1000
  3798: 01                       fallthrough
      :                          @261
  3799: 82 9a                    a3 = u64 [a2]
  3801: c9 a9 0b                 a4 = a2 - a3
  3804: ab 7b 12                 jump @265 if a4 != a0
      :                          @262
  3807: c9 2a 0b                 a4 = a3 - t0
  3810: 01                       fallthrough
      :                          @263
  3811: 82 9c                    a5 = u64 [a2]
  3813: ab ac f2                 jump @261 if a5 != a3
      :                          @264
  3816: 7b 9b                    u64 [a2] = a4
  3818: 33 08                    a1 = 0
  3820: 32 00                    ret
      :                          @265
  3822: 32 00                    ret
      :                          @266 [@dyn 34]
  3824: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  3827: 7b 10 18                 u64 [sp + 0x18] = ra
  3830: 7b 15 10                 u64 [sp + 0x10] = s0
  3833: 7b 16 08                 u64 [sp + 0x8] = s1
  3836: 64 75                    s0 = a0
  3838: 82 7a 10                 a3 = u64 [a0 + 0x10]
  3841: 82 77                    a0 = u64 [a0]
  3843: c9 a7 07                 a0 = a0 - a3
  3846: 64 96                    s1 = a2
  3848: ac 97 2a                 jump @269 if a0 <u a2
      :                          @267
  3851: 7b 1a                    u64 [sp] = a3
  3853: 82 57 08                 a0 = u64 [s0 + 0x8]
  3856: c8 a7 07                 a0 = a0 + a3
  3859: 64 69                    a2 = s1
  3861: 50 10 46 4a 01           ra = 70, jump @288
      :                          @268 [@dyn 35]
  3866: 82 17                    a0 = u64 [sp]
  3868: c8 76 06                 s1 = s1 + a0
  3871: 7b 56 10                 u64 [s0 + 0x10] = s1
  3874: 33 07                    a0 = 0
  3876: 82 10 18                 ra = u64 [sp + 0x18]
  3879: 82 15 10                 s0 = u64 [sp + 0x10]
  3882: 82 16 08                 s1 = u64 [sp + 0x8]
  3885: 95 11 20                 sp = sp + 0x20
  3888: 32 00                    ret
      :                          @269
  3890: 64 57                    a0 = s0
  3892: 7b 18                    u64 [sp] = a1
  3894: 64 a8                    a1 = a3
  3896: 64 69                    a2 = s1
  3898: 50 10 48 7e fc           ra = 72, jump @182
      :                          @270 [@dyn 36]
  3903: 82 18                    a1 = u64 [sp]
  3905: 82 5a 10                 a3 = u64 [s0 + 0x10]
  3908: 28 c7                    jump @267
      :                          @271 [@dyn 37]
  3910: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  3913: 7b 10 20                 u64 [sp + 0x20] = ra
  3916: 7b 15 18                 u64 [sp + 0x18] = s0
  3919: 7b 16 10                 u64 [sp + 0x10] = s1
  3922: 64 86                    s1 = a1
  3924: 83 88                    i32 a1 = a1 + 0
  3926: 33 09 80 00              a2 = 0x80
  3930: 64 7a                    a3 = a0
  3932: ae 98 2b                 jump @276 if a1 >=u a2
      :                          @272
  3935: 82 a8 10                 a1 = u64 [a3 + 0x10]
  3938: 82 a7                    a0 = u64 [a3]
  3940: ab 78 12                 jump @275 if a1 != a0
      :                          @273
  3943: 64 a7                    a0 = a3
  3945: 64 a5                    s0 = a3
  3947: 50 10 4c 0c fe           ra = 76, jump @226
      :                          @274 [@dyn 38]
  3952: 64 5a                    a3 = s0
  3954: 82 58 10                 a1 = u64 [s0 + 0x10]
  3957: 01                       fallthrough
      :                          @275
  3958: 82 a7 08                 a0 = u64 [a3 + 0x8]
  3961: c8 87 07                 a0 = a0 + a1
  3964: 78 76                    u8 [a0] = s1
  3966: 95 88 01                 a1 = a1 + 0x1
  3969: 7b a8 10                 u64 [a3 + 0x10] = a1
  3972: 28 ab 00                 jump @284
      :                          @276
  3975: 8b 67 0b                 i32 a0 = s1 >> 0xb
  3978: 48 11 0c                 u32 [sp + 12] = 0
  3981: 52 07 1c                 jump @278 if a0 != 0
      :                          @277
  3984: 98 67 06                 a0 = s1 >> 0x6
  3987: 86 77 c0 00              a0 = a0 | 0xc0
  3991: 78 17 0c                 u8 [sp + 0xc] = a0
  3994: 84 67 3f                 a0 = s1 & 0x3f
  3997: 86 77 80 00              a0 = a0 | 0x80
  4001: 78 17 0d                 u8 [sp + 0xd] = a0
  4004: 33 06 02                 s1 = 0x2
  4007: 28 63                    jump @281
      :                          @278
  4009: 8b 67 10                 i32 a0 = s1 >> 0x10
  4012: 52 07 29                 jump @280 if a0 != 0
      :                          @279
  4015: 98 67 0c                 a0 = s1 >> 0xc
  4018: 86 77 e0 00              a0 = a0 | 0xe0
  4022: 78 17 0c                 u8 [sp + 0xc] = a0
  4025: 97 67 34                 a0 = s1 << 0x34
  4028: 98 77 3a                 a0 = a0 >> 0x3a
  4031: 95 77 80 00              a0 = a0 + 0x80
  4035: 78 17 0d                 u8 [sp + 0xd] = a0
  4038: 84 67 3f                 a0 = s1 & 0x3f
  4041: 86 77 80 00              a0 = a0 | 0x80
  4045: 78 17 0e                 u8 [sp + 0xe] = a0
  4048: 33 06 03                 s1 = 0x3
  4051: 28 37                    jump @281
      :                          @280
  4053: 97 67 2b                 a0 = s1 << 0x2b
  4056: 98 77 3d                 a0 = a0 >> 0x3d
  4059: 95 77 f0 00              a0 = a0 + 0xf0
  4063: 78 17 0c                 u8 [sp + 0xc] = a0
  4066: 97 67 2e                 a0 = s1 << 0x2e
  4069: 98 77 3a                 a0 = a0 >> 0x3a
  4072: 95 77 80 00              a0 = a0 + 0x80
  4076: 78 17 0d                 u8 [sp + 0xd] = a0
  4079: 97 67 34                 a0 = s1 << 0x34
  4082: 98 77 3a                 a0 = a0 >> 0x3a
  4085: 95 77 80 00              a0 = a0 + 0x80
  4089: 78 17 0e                 u8 [sp + 0xe] = a0
  4092: 84 67 3f                 a0 = s1 & 0x3f
  4095: 86 77 80 00              a0 = a0 | 0x80
  4099: 78 17 0f                 u8 [sp + 0xf] = a0
  4102: 33 06 04                 s1 = 0x4
  4105: 01                       fallthrough
      :                          @281
  4106: 82 a5 10                 s0 = u64 [a3 + 0x10]
  4109: 82 a7                    a0 = u64 [a3]
  4111: c9 57 07                 a0 = a0 - s0
  4114: ac 67 2d                 jump @285 if a0 <u s1
      :                          @282
  4117: 7b 1a                    u64 [sp] = a3
  4119: 82 a7 08                 a0 = u64 [a3 + 0x8]
  4122: c8 57 07                 a0 = a0 + s0
  4125: 95 18 0c                 a1 = sp + 0xc
  4128: 64 69                    a2 = s1
  4130: 50 10 4e 3d              ra = 78, jump @288
      :                          @283 [@dyn 39]
  4134: c8 56 06                 s1 = s1 + s0
  4137: 82 17                    a0 = u64 [sp]
  4139: 7b 76 10                 u64 [a0 + 0x10] = s1
  4142: 01                       fallthrough
      :                          @284
  4143: 33 07                    a0 = 0
  4145: 82 10 20                 ra = u64 [sp + 0x20]
  4148: 82 15 18                 s0 = u64 [sp + 0x18]
  4151: 82 16 10                 s1 = u64 [sp + 0x10]
  4154: 95 11 28                 sp = sp + 0x28
  4157: 32 00                    ret
      :                          @285
  4159: 64 a7                    a0 = a3
  4161: 64 58                    a1 = s0
  4163: 64 69                    a2 = s1
  4165: 64 a5                    s0 = a3
  4167: 50 10 50 71 fb           ra = 80, jump @182
      :                          @286 [@dyn 40]
  4172: 64 5a                    a3 = s0
  4174: 82 55 10                 s0 = u64 [s0 + 0x10]
  4177: 28 c4                    jump @282
      :                          @287 [@dyn 41]
  4179: 64 8a                    a3 = a1
  4181: 33 08 08 02 01           a1 = 0x10208
  4186: 64 a9                    a2 = a3
  4188: 28 b9 04                 jump @383
      :                          @288
  4191: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  4194: 7b 10 18                 u64 [sp + 0x18] = ra
  4197: 7b 15 10                 u64 [sp + 0x10] = s0
  4200: 7b 16 08                 u64 [sp + 0x8] = s1
  4203: 53 19 10 64              jump @297 if a2 <u 16
      :                          @289
  4207: 8d 7a                    i32 a3 = -a0
  4209: 84 a2 07                 t0 = a3 & 0x7
  4212: c8 27 0b                 a4 = a0 + t0
  4215: 51 02 15                 jump @292 if t0 == 0
      :                          @290
  4218: 64 8c                    a5 = a1
  4220: 64 75                    s0 = a0
  4222: 01                       fallthrough
      :                          @291
  4223: 7c ca                    a3 = u8 [a5]
  4225: 78 5a                    u8 [s0] = a3
  4227: 95 55 01                 s0 = s0 + 0x1
  4230: 95 cc 01                 a5 = a5 + 0x1
  4233: ac b5 f6                 jump @291 if s0 <u a4
      :                          @292
  4236: c8 28 03                 t1 = a1 + t0
  4239: c9 29 02                 t0 = a2 - t0
  4242: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  4245: 84 38 07                 a1 = t1 & 0x7
  4248: c8 4b 0a                 a3 = a4 + t2
  4251: 51 08 3b                 jump @299 if a1 == 0
      :                          @293
  4254: 58 04 4b                 jump @302 if t2 <=s 0
      :                          @294
  4257: 97 38 03                 a1 = t1 << 0x3
  4260: 84 80 38                 ra = a1 & 0x38
  4263: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  4266: 82 c5                    s0 = u64 [a5]
  4268: 8d 88                    i32 a1 = -a1
  4270: 84 88 38                 a1 = a1 & 0x38
  4273: 95 cc 08                 a5 = a5 + 0x8
  4276: 01                       fallthrough
      :                          @295
  4277: 82 c6                    s1 = u64 [a5]
  4279: d0 05 05                 s0 = s0 >> ra
  4282: cf 86 09                 a2 = s1 << a1
  4285: d4 59 09                 a2 = a2 | s0
  4288: 7b b9                    u64 [a4] = a2
  4290: 95 bb 08                 a4 = a4 + 0x8
  4293: 95 cc 08                 a5 = a5 + 0x8
  4296: 64 65                    s0 = s1
  4298: ac ab eb                 jump @295 if a4 <u a3
      :                          @296
  4301: 28 1c                    jump @302
      :                          @297
  4303: 64 7a                    a3 = a0
  4305: 52 09 21                 jump @303 if a2 != 0
      :                          @298
  4308: 28 2f                    jump @305
      :                          @299
  4310: 58 04 13                 jump @302 if t2 <=s 0
      :                          @300
  4313: 64 38                    a1 = t1
  4315: 01                       fallthrough
      :                          @301
  4316: 82 89                    a2 = u64 [a1]
  4318: 7b b9                    u64 [a4] = a2
  4320: 95 bb 08                 a4 = a4 + 0x8
  4323: 95 88 08                 a1 = a1 + 0x8
  4326: ac ab f6                 jump @301 if a4 <u a3
      :                          @302
  4329: c8 43 08                 a1 = t1 + t2
  4332: 84 29 07                 a2 = t0 & 0x7
  4335: 51 09 14                 jump @305 if a2 == 0
      :                          @303
  4338: c8 a9 09                 a2 = a2 + a3
  4341: 01                       fallthrough
      :                          @304
  4342: 7c 8b                    a4 = u8 [a1]
  4344: 78 ab                    u8 [a3] = a4
  4346: 95 aa 01                 a3 = a3 + 0x1
  4349: 95 88 01                 a1 = a1 + 0x1
  4352: ac 9a f6                 jump @304 if a3 <u a2
      :                          @305
  4355: 82 10 18                 ra = u64 [sp + 0x18]
  4358: 82 15 10                 s0 = u64 [sp + 0x10]
  4361: 82 16 08                 s1 = u64 [sp + 0x8]
  4364: 95 11 20                 sp = sp + 0x20
  4367: 32 00                    ret
      :                          @306
  4369: 8d 7a                    i32 a3 = -a0
  4371: 84 aa 07                 a3 = a3 & 0x7
  4374: c8 a7 0b                 a4 = a0 + a3
  4377: 51 0a 0e                 jump @309 if a3 == 0
      :                          @307
  4380: 64 7c                    a5 = a0
  4382: 01                       fallthrough
      :                          @308
  4383: 78 c8                    u8 [a5] = a1
  4385: 95 cc 01                 a5 = a5 + 0x1
  4388: ac bc fb                 jump @308 if a5 <u a4
      :                          @309
  4391: c9 a9 03                 t1 = a2 - a3
  4394: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  4397: c8 cb 0a                 a3 = a4 + a5
  4400: 58 0c 1d                 jump @312 if a5 <=s 0
      :                          @310
  4403: 84 82 ff 00              t0 = a1 & 0xff
  4407: 14 09 01 01 01 01 01 01 01 01 a2 = 0x101010101010101
  4417: ca 92 0c                 a5 = t0 * a2
  4420: 01                       fallthrough
      :                          @311
  4421: 7b bc                    u64 [a4] = a5
  4423: 95 bb 08                 a4 = a4 + 0x8
  4426: ac ab fb                 jump @311 if a4 <u a3
      :                          @312
  4429: 84 39 07                 a2 = t1 & 0x7
  4432: 52 09 05                 jump @314 if a2 != 0
      :                          @313
  4435: 28 0e                    jump @316
      :                          @314
  4437: c8 a9 09                 a2 = a2 + a3
  4440: 01                       fallthrough
      :                          @315
  4441: 78 a8                    u8 [a3] = a1
  4443: 95 aa 01                 a3 = a3 + 0x1
  4446: ac 9a fb                 jump @315 if a3 <u a2
      :                          @316
  4449: 32 00                    ret
      :                          @317 [@dyn 42]
  4451: 82 77                    a0 = u64 [a0]
  4453: 01                       fallthrough
      :                          @318
  4454: 28                       jump @318
      :                          @319
  4455: 95 11 a0                 sp = sp + 0xffffffffffffffa0
  4458: 7b 10 58                 u64 [sp + 0x58] = ra
  4461: 7b 15 50                 u64 [sp + 0x50] = s0
  4464: 7b 16 48                 u64 [sp + 0x48] = s1
  4467: 7b 19 08                 u64 [sp + 0x8] = a2
  4470: 7b 18                    u64 [sp] = a1
  4472: 98 7a 04                 a3 = a0 >> 0x4
  4475: 33 09 27                 a2 = 0x27
  4478: 53 2a 71 02 81 00        jump @322 if a3 <u 625
      :                          @320
  4484: 33 09 27                 a2 = 0x27
  4487: 95 1b 46                 a4 = sp + 0x46
  4490: 3a 08 00 00 03           a1 = u64 [0x30000]
  4495: 7b 18 18                 u64 [sp + 0x18] = a1
  4498: 49 11 10 f0 d8 00        u64 [sp + 16] = 0xd8f0
  4504: 33 03 7b 14              t1 = 0x147b
  4508: 33 05 76 02 01           s0 = 0x10276
  4513: 33 00 ff e0 f5 05        ra = 0x5f5e0ff
  4519: 01                       fallthrough
      :                          @321
  4520: 64 74                    t2 = a0
  4522: 82 17 18                 a0 = u64 [sp + 0x18]
  4525: d6 74 07                 a0 = t2 mulhu a0
  4528: 98 77 0b                 a0 = a0 >> 0xb
  4531: 82 18 10                 a1 = u64 [sp + 0x10]
  4534: c0 87 02                 i32 t0 = a0 * a1
  4537: c8 42 0a                 a3 = t0 + t2
  4540: 97 a2 30                 t0 = a3 << 0x30
  4543: 98 28 32                 a1 = t0 >> 0x32
  4546: ca 38 08                 a1 = a1 * t1
  4549: 98 8c 11                 a5 = a1 >> 0x11
  4552: 98 88 10                 a1 = a1 >> 0x10
  4555: 84 88 fe 07              a1 = a1 & 0x7fe
  4559: 96 cc 9c                 a5 = a5 * 0xffffffffffffff9c
  4562: c8 ca 0a                 a3 = a3 + a5
  4565: 97 aa 31                 a3 = a3 << 0x31
  4568: 98 aa 30                 a3 = a3 >> 0x30
  4571: c8 58 08                 a1 = a1 + s0
  4574: 7c 8c                    a5 = u8 [a1]
  4576: 7c 88 01                 a1 = u8 [a1 + 0x1]
  4579: c8 5a 0a                 a3 = a3 + s0
  4582: 7c a6 01                 s1 = u8 [a3 + 0x1]
  4585: 7c aa                    a3 = u8 [a3]
  4587: 78 b8 ff                 u8 [a4 + 0xffffffffffffffff] = a1
  4590: 78 bc fe                 u8 [a4 + 0xfffffffffffffffe] = a5
  4593: 78 b6 01                 u8 [a4 + 0x1] = s1
  4596: 78 ba                    u8 [a4] = a3
  4598: 95 99 fc                 a2 = a2 + 0xfffffffffffffffc
  4601: 95 bb fc                 a4 = a4 + 0xfffffffffffffffc
  4604: ac 40 ac                 jump @321 if ra <u t2
      :                          @322
  4607: 54 17 63 3b              jump @324 if a0 <=u 99
      :                          @323
  4611: 97 78 30                 a1 = a0 << 0x30
  4614: 98 88 32                 a1 = a1 >> 0x32
  4617: 96 88 7b 14              a1 = a1 * 0x147b
  4621: 98 88 11                 a1 = a1 >> 0x11
  4624: 96 8a 9c                 a3 = a1 * 0xffffffffffffff9c
  4627: c8 a7 07                 a0 = a0 + a3
  4630: 97 77 31                 a0 = a0 << 0x31
  4633: 98 77 30                 a0 = a0 >> 0x30
  4636: 95 99 fe                 a2 = a2 + 0xfffffffffffffffe
  4639: 33 0a 76 02 01           a3 = 0x10276
  4644: c8 a7 07                 a0 = a0 + a3
  4647: 7c 7a 01                 a3 = u8 [a0 + 0x1]
  4650: 7c 77                    a0 = u8 [a0]
  4652: 95 1b 21                 a4 = sp + 0x21
  4655: c8 9b 0b                 a4 = a4 + a2
  4658: 78 ba 01                 u8 [a4 + 0x1] = a3
  4661: 78 b7                    u8 [a4] = a0
  4663: 64 87                    a0 = a1
  4665: 01                       fallthrough
      :                          @324
  4666: 55 17 0a 14              jump @326 if a0 >=u 10
      :                          @325
  4670: 95 99 ff                 a2 = a2 + 0xffffffffffffffff
  4673: 95 18 21                 a1 = sp + 0x21
  4676: c8 98 08                 a1 = a1 + a2
  4679: 83 77 30                 i32 a0 = a0 + 0x30
  4682: 78 87                    u8 [a1] = a0
  4684: 28 21                    jump @327
      :                          @326
  4686: 97 77 01                 a0 = a0 << 0x1
  4689: 95 99 fe                 a2 = a2 + 0xfffffffffffffffe
  4692: 33 08 76 02 01           a1 = 0x10276
  4697: c8 87 07                 a0 = a0 + a1
  4700: 7c 78 01                 a1 = u8 [a0 + 0x1]
  4703: 7c 77                    a0 = u8 [a0]
  4705: 95 1a 21                 a3 = sp + 0x21
  4708: c8 9a 0a                 a3 = a3 + a2
  4711: 78 a8 01                 u8 [a3 + 0x1] = a1
  4714: 78 a7                    u8 [a3] = a0
  4716: 01                       fallthrough
      :                          @327
  4717: 95 1b 21                 a4 = sp + 0x21
  4720: c8 9b 0b                 a4 = a4 + a2
  4723: 9a 9c 27                 a5 = 0x27 - a2
  4726: 33 09 38 02 01           a2 = 0x10238
  4731: 82 17 08                 a0 = u64 [sp + 0x8]
  4734: 82 18                    a1 = u64 [sp]
  4736: 33 0a                    a3 = 0
  4738: 50 10 56 12              ra = 86, jump @329
      :                          @328 [@dyn 43]
  4742: 82 10 58                 ra = u64 [sp + 0x58]
  4745: 82 15 50                 s0 = u64 [sp + 0x50]
  4748: 82 16 48                 s1 = u64 [sp + 0x48]
  4751: 95 11 60                 sp = sp + 0x60
  4754: 32 00                    ret
      :                          @329
  4756: 95 11 98                 sp = sp + 0xffffffffffffff98
  4759: 7b 10 60                 u64 [sp + 0x60] = ra
  4762: 7b 15 58                 u64 [sp + 0x58] = s0
  4765: 7b 16 50                 u64 [sp + 0x50] = s1
  4768: 7b 1b 18                 u64 [sp + 0x18] = a4
  4771: 51 08 4f                 jump @336 if a1 == 0
      :                          @330
  4774: 80 76 34                 s1 = u32 [a0 + 0x34]
  4777: 84 68 01                 a1 = s1 & 0x1
  4780: 33 0b 2b                 a4 = 0x2b
  4783: 33 05 00 00 11           s0 = 0x110000
  4788: db 8b 05                 s0 = a4 if a1 != 0
  4791: 7b 15 28                 u64 [sp + 0x28] = s0
  4794: c8 c8 02                 t0 = a1 + a5
  4797: 84 68 04                 a1 = s1 & 0x4
  4800: 51 08 42                 jump @337 if a1 == 0
      :                          @331
  4803: 7b 19 30                 u64 [sp + 0x30] = a2
  4806: 33 08                    a1 = 0
  4808: 51 0a 1a                 jump @334 if a3 == 0
      :                          @332
  4811: 64 a5                    s0 = a3
  4813: 01                       fallthrough
      :                          @333
  4814: 7d 9b                    a4 = i8 [a2]
  4816: 89 bb c0                 a4 = a4 <s 0xffffffffffffffc0
  4819: 85 bb 01                 a4 = a4 ^ 0x1
  4822: c8 b8 08                 a1 = a1 + a4
  4825: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  4828: 95 99 01                 a2 = a2 + 0x1
  4831: 52 05 ef                 jump @333 if s0 != 0
      :                          @334
  4834: c8 82 02                 t0 = t0 + a1
  4837: 7b 1a 38                 u64 [sp + 0x38] = a3
  4840: 82 78                    a1 = u64 [a0]
  4842: 7b 1c 20                 u64 [sp + 0x20] = a5
  4845: 52 08 23                 jump @338 if a1 != 0
      :                          @335
  4848: 28 41                    jump @343
      :                          @336
  4850: 81 76 34                 s1 = i32 [a0 + 0x34]
  4853: 95 c2 01                 t0 = a5 + 0x1
  4856: 49 11 28 2d              u64 [sp + 40] = 0x2d
  4860: 84 68 04                 a1 = s1 & 0x4
  4863: 52 08 c4                 jump @331 if a1 != 0
      :                          @337
  4866: 49 11 30                 u64 [sp + 48] = 0
  4869: 7b 1a 38                 u64 [sp + 0x38] = a3
  4872: 82 78                    a1 = u64 [a0]
  4874: 7b 1c 20                 u64 [sp + 0x20] = a5
  4877: 51 08 24                 jump @343 if a1 == 0
      :                          @338
  4880: 82 75 08                 s0 = u64 [a0 + 0x8]
  4883: ae 52 1e                 jump @343 if t0 >=u s0
      :                          @339
  4886: 84 66 08                 s1 = s1 & 0x8
  4889: 52 06 50                 jump @346 if s1 != 0
      :                          @340
  4892: 7c 79 38                 a2 = u8 [a0 + 0x38]
  4895: c9 25 0a                 a3 = s0 - t0
  4898: 5a 19 01 a1 00           jump @353 if a2 >s 1
      :                          @341
  4903: 52 09 ae 00              jump @355 if a2 != 0
      :                          @342
  4907: 7b 1a 10                 u64 [sp + 0x10] = a3
  4910: 28 ad 00                 jump @356
      :                          @343
  4913: 82 75 20                 s0 = u64 [a0 + 0x20]
  4916: 82 76 28                 s1 = u64 [a0 + 0x28]
  4919: 64 57                    a0 = s0
  4921: 64 68                    a1 = s1
  4923: 82 19 28                 a2 = u64 [sp + 0x28]
  4926: 82 1a 30                 a3 = u64 [sp + 0x30]
  4929: 82 1b 38                 a4 = u64 [sp + 0x38]
  4932: 50 10 58 6d 01           ra = 88, jump @376
      :                          @344 [@dyn 44]
  4937: 33 08 01                 a1 = 0x1
  4940: 52 07 bc 00              jump @361 if a0 != 0
      :                          @345
  4944: 82 6c 18                 a5 = u64 [s1 + 0x18]
  4947: 64 57                    a0 = s0
  4949: 82 18 18                 a1 = u64 [sp + 0x18]
  4952: 82 19 20                 a2 = u64 [sp + 0x20]
  4955: 82 10 60                 ra = u64 [sp + 0x60]
  4958: 82 15 58                 s0 = u64 [sp + 0x58]
  4961: 82 16 50                 s1 = u64 [sp + 0x50]
  4964: 95 11 68                 sp = sp + 0x68
  4967: 32 0c                    jump [a5]
      :                          @346
  4969: 7b 12 40                 u64 [sp + 0x40] = t0
  4972: 81 78 30                 a1 = i32 [a0 + 0x30]
  4975: 7b 18 08                 u64 [sp + 0x8] = a1
  4978: 7c 79 38                 a2 = u8 [a0 + 0x38]
  4981: 7b 19                    u64 [sp] = a2
  4983: 82 79 20                 a2 = u64 [a0 + 0x20]
  4986: 82 76 28                 s1 = u64 [a0 + 0x28]
  4989: 48 17 30 30              u32 [a0 + 48] = 0x30
  4993: 7b 17 10                 u64 [sp + 0x10] = a0
  4996: 46 17 38 01              u8 [a0 + 56] = 0x1
  5000: 7b 19 48                 u64 [sp + 0x48] = a2
  5003: 64 97                    a0 = a2
  5005: 64 68                    a1 = s1
  5007: 82 19 28                 a2 = u64 [sp + 0x28]
  5010: 82 1a 30                 a3 = u64 [sp + 0x30]
  5013: 82 1b 38                 a4 = u64 [sp + 0x38]
  5016: 50 10 5a 19 01           ra = 90, jump @376
      :                          @347 [@dyn 45]
  5021: 52 07 67                 jump @360 if a0 != 0
      :                          @348
  5024: 82 17 40                 a0 = u64 [sp + 0x40]
  5027: c9 75 05                 s0 = s0 - a0
  5030: 95 55 01                 s0 = s0 + 0x1
  5033: 01                       fallthrough
      :                          @349
  5034: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  5037: 51 05 c6 00              jump @371 if s0 == 0
      :                          @350
  5041: 82 69 20                 a2 = u64 [s1 + 0x20]
  5044: 33 08 30                 a1 = 0x30
  5047: 82 17 48                 a0 = u64 [sp + 0x48]
  5050: b4 90 01 5c              ra = 92, jump [a2]
      :                          @351 [@dyn 46]
  5054: 51 07 ec                 jump @349 if a0 == 0
      :                          @352
  5057: 28 43                    jump @360
      :                          @353
  5059: 52 19 02 12              jump @355 if a2 != 2
      :                          @354
  5063: 98 a9 01                 a2 = a3 >> 0x1
  5066: 95 a8 01                 a1 = a3 + 0x1
  5069: 98 88 01                 a1 = a1 >> 0x1
  5072: 7b 18 10                 u64 [sp + 0x10] = a1
  5075: 28 08                    jump @356
      :                          @355
  5077: 64 a9                    a2 = a3
  5079: 49 11 10                 u64 [sp + 16] = 0
  5082: 01                       fallthrough
      :                          @356
  5083: 82 78 20                 a1 = u64 [a0 + 0x20]
  5086: 7b 18 48                 u64 [sp + 0x48] = a1
  5089: 82 76 28                 s1 = u64 [a0 + 0x28]
  5092: 81 77 30                 a0 = i32 [a0 + 0x30]
  5095: 7b 17 40                 u64 [sp + 0x40] = a0
  5098: 95 95 01                 s0 = a2 + 0x1
  5101: 01                       fallthrough
      :                          @357
  5102: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  5105: 51 05 27                 jump @362 if s0 == 0
      :                          @358
  5108: 82 69 20                 a2 = u64 [s1 + 0x20]
  5111: 82 17 48                 a0 = u64 [sp + 0x48]
  5114: 82 18 40                 a1 = u64 [sp + 0x40]
  5117: b4 90 01 5e              ra = 94, jump [a2]
      :                          @359 [@dyn 47]
  5121: 51 07 ed                 jump @357 if a0 == 0
      :                          @360
  5124: 33 08 01                 a1 = 0x1
  5127: 01                       fallthrough
      :                          @361
  5128: 64 87                    a0 = a1
  5130: 82 10 60                 ra = u64 [sp + 0x60]
  5133: 82 15 58                 s0 = u64 [sp + 0x58]
  5136: 82 16 50                 s1 = u64 [sp + 0x50]
  5139: 95 11 68                 sp = sp + 0x68
  5142: 32 00                    ret
      :                          @362
  5144: 82 15 48                 s0 = u64 [sp + 0x48]
  5147: 64 57                    a0 = s0
  5149: 64 68                    a1 = s1
  5151: 82 19 28                 a2 = u64 [sp + 0x28]
  5154: 82 1a 30                 a3 = u64 [sp + 0x30]
  5157: 82 1b 38                 a4 = u64 [sp + 0x38]
  5160: 50 10 60 89 00           ra = 96, jump @376
      :                          @363 [@dyn 48]
  5165: 33 08 01                 a1 = 0x1
  5168: 52 07 d8                 jump @361 if a0 != 0
      :                          @364
  5171: 82 6a 18                 a3 = u64 [s1 + 0x18]
  5174: 64 57                    a0 = s0
  5176: 82 18 18                 a1 = u64 [sp + 0x18]
  5179: 82 19 20                 a2 = u64 [sp + 0x20]
  5182: b4 a0 01 62              ra = 98, jump [a3]
      :                          @365 [@dyn 49]
  5186: 33 08 01                 a1 = 0x1
  5189: 52 07 c3                 jump @361 if a0 != 0
      :                          @366
  5192: 82 17 10                 a0 = u64 [sp + 0x10]
  5195: 9a 77                    a0 = -a0
  5197: 7b 17 38                 u64 [sp + 0x38] = a0
  5200: 33 05 ff                 s0 = 0xffffffffffffffff
  5203: 01                       fallthrough
      :                          @367
  5204: 82 17 38                 a0 = u64 [sp + 0x38]
  5207: c8 57 07                 a0 = a0 + s0
  5210: 51 17 ff 42              jump @374 if a0 == 4294967295
      :                          @368
  5214: 82 69 20                 a2 = u64 [s1 + 0x20]
  5217: 82 17 48                 a0 = u64 [sp + 0x48]
  5220: 82 18 40                 a1 = u64 [sp + 0x40]
  5223: b4 90 01 64              ra = 100, jump [a2]
      :                          @369 [@dyn 50]
  5227: 95 55 01                 s0 = s0 + 0x1
  5230: 51 07 e6                 jump @367 if a0 == 0
      :                          @370
  5233: 28 37                    jump @375
      :                          @371
  5235: 82 6a 18                 a3 = u64 [s1 + 0x18]
  5238: 82 17 48                 a0 = u64 [sp + 0x48]
  5241: 82 18 18                 a1 = u64 [sp + 0x18]
  5244: 82 19 20                 a2 = u64 [sp + 0x20]
  5247: b4 a0 01 66              ra = 102, jump [a3]
      :                          @372 [@dyn 51]
  5251: 33 08 01                 a1 = 0x1
  5254: 52 07 82                 jump @361 if a0 != 0
      :                          @373
  5257: 33 08                    a1 = 0
  5259: 82 17 10                 a0 = u64 [sp + 0x10]
  5262: 82 19 08                 a2 = u64 [sp + 0x8]
  5265: 7a 79 30                 u32 [a0 + 0x30] = a2
  5268: 82 19                    a2 = u64 [sp]
  5270: 78 79 38                 u8 [a0 + 0x38] = a2
  5273: 28 6f ff                 jump @361
      :                          @374
  5276: 82 15 10                 s0 = u64 [sp + 0x10]
  5279: 82 17 10                 a0 = u64 [sp + 0x10]
  5282: d8 75 08                 a1 = s0 <u a0
  5285: 28 63 ff                 jump @361
      :                          @375
  5288: 82 17 10                 a0 = u64 [sp + 0x10]
  5291: d8 75 08                 a1 = s0 <u a0
  5294: 28 5a ff                 jump @361
      :                          @376
  5297: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  5300: 7b 10 20                 u64 [sp + 0x20] = ra
  5303: 7b 15 18                 u64 [sp + 0x18] = s0
  5306: 7b 16 10                 u64 [sp + 0x10] = s1
  5309: 83 9c                    i32 a5 = a2 + 0
  5311: 33 02 00 00 11           t0 = 0x110000
  5316: 64 a6                    s1 = a3
  5318: 64 85                    s0 = a1
  5320: 64 7a                    a3 = a0
  5322: aa 2c 20                 jump @379 if a5 == t0
      :                          @377
  5325: 82 5c 20                 a5 = u64 [s0 + 0x20]
  5328: 64 a7                    a0 = a3
  5330: 64 98                    a1 = a2
  5332: 7b 1b 08                 u64 [sp + 0x8] = a4
  5335: 7b 1a                    u64 [sp] = a3
  5337: b4 c0 01 68              ra = 104, jump [a5]
      :                          @378 [@dyn 52]
  5341: 82 1a                    a3 = u64 [sp]
  5343: 82 1b 08                 a4 = u64 [sp + 0x8]
  5346: 64 78                    a1 = a0
  5348: 33 07 01                 a0 = 0x1
  5351: 52 08 20                 jump @382 if a1 != 0
      :                          @379
  5354: 51 06 1a                 jump @381 if s1 == 0
      :                          @380
  5357: 82 5c 18                 a5 = u64 [s0 + 0x18]
  5360: 64 a7                    a0 = a3
  5362: 64 68                    a1 = s1
  5364: 64 b9                    a2 = a4
  5366: 82 10 20                 ra = u64 [sp + 0x20]
  5369: 82 15 18                 s0 = u64 [sp + 0x18]
  5372: 82 16 10                 s1 = u64 [sp + 0x10]
  5375: 95 11 28                 sp = sp + 0x28
  5378: 32 0c                    jump [a5]
      :                          @381
  5380: 33 07                    a0 = 0
  5382: 01                       fallthrough
      :                          @382
  5383: 82 10 20                 ra = u64 [sp + 0x20]
  5386: 82 15 18                 s0 = u64 [sp + 0x18]
  5389: 82 16 10                 s1 = u64 [sp + 0x10]
  5392: 95 11 28                 sp = sp + 0x28
  5395: 32 00                    ret
      :                          @383
  5397: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  5401: 7b 10 80 00              u64 [sp + 0x80] = ra
  5405: 7b 15 78                 u64 [sp + 0x78] = s0
  5408: 7b 16 70                 u64 [sp + 0x70] = s1
  5411: 49 11 60 20              u64 [sp + 96] = 0x20
  5415: 33 0a 03                 a3 = 0x3
  5418: 78 1a 68                 u8 [sp + 0x68] = a3
  5421: 82 96 20                 s1 = u64 [a2 + 0x20]
  5424: 49 11 30                 u64 [sp + 48] = 0
  5427: 49 11 40                 u64 [sp + 64] = 0
  5430: 7b 17 50                 u64 [sp + 0x50] = a0
  5433: 7b 18 58                 u64 [sp + 0x58] = a1
  5436: 51 06 07 01              jump @405 if s1 == 0
      :                          @384
  5440: 82 97 28                 a0 = u64 [a2 + 0x28]
  5443: 51 07 74 01              jump @415 if a0 == 0
      :                          @385
  5447: 49 11 28                 u64 [sp + 40] = 0
  5450: 82 95                    s0 = u64 [a2]
  5452: 7b 19 08                 u64 [sp + 0x8] = a2
  5455: 82 98 10                 a1 = u64 [a2 + 0x10]
  5458: 7b 18 18                 u64 [sp + 0x18] = a1
  5461: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  5464: 97 88 03                 a1 = a1 << 0x3
  5467: 98 88 03                 a1 = a1 >> 0x3
  5470: 95 88 01                 a1 = a1 + 0x1
  5473: 7b 18                    u64 [sp] = a1
  5475: 95 55 08                 s0 = s0 + 0x8
  5478: 96 78 38                 a1 = a0 * 0x38
  5481: 95 66 18                 s1 = s1 + 0x18
  5484: 33 07 54                 a0 = 0x54
  5487: 7b 17 10                 u64 [sp + 0x10] = a0
  5490: 01                       fallthrough
      :                          @386
  5491: 7b 18 20                 u64 [sp + 0x20] = a1
  5494: 82 59                    a2 = u64 [s0]
  5496: 51 09 17                 jump @389 if a2 == 0
      :                          @387
  5499: 82 1a 58                 a3 = u64 [sp + 0x58]
  5502: 82 17 50                 a0 = u64 [sp + 0x50]
  5505: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  5508: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5511: b4 a0 01 6a              ra = 106, jump [a3]
      :                          @388 [@dyn 53]
  5515: 52 07 51 01              jump @418 if a0 != 0
      :                          @389
  5519: 81 67 10                 a0 = i32 [s1 + 0x10]
  5522: 7a 17 60                 u32 [sp + 0x60] = a0
  5525: 7c 67 18                 a0 = u8 [s1 + 0x18]
  5528: 78 17 68                 u8 [sp + 0x68] = a0
  5531: 81 67 14                 a0 = i32 [s1 + 0x14]
  5534: 7a 17 64                 u32 [sp + 0x64] = a0
  5537: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  5540: 82 67                    a0 = u64 [s1]
  5542: 51 08 26                 jump @394 if a1 == 0
      :                          @390
  5545: 52 18 01 16              jump @392 if a1 != 1
      :                          @391
  5549: 97 77 04                 a0 = a0 << 0x4
  5552: 82 18 18                 a1 = u64 [sp + 0x18]
  5555: c8 87 07                 a0 = a0 + a1
  5558: 82 78 08                 a1 = u64 [a0 + 0x8]
  5561: 82 19 10                 a2 = u64 [sp + 0x10]
  5564: aa 98 07                 jump @393 if a1 == a2
      :                          @392
  5567: 33 08                    a1 = 0
  5569: 28 0f                    jump @395
      :                          @393
  5571: 82 77                    a0 = u64 [a0]
  5573: 82 77                    a0 = u64 [a0]
  5575: 33 08 01                 a1 = 0x1
  5578: 28 06                    jump @395
      :                          @394
  5580: 33 08 01                 a1 = 0x1
  5583: 01                       fallthrough
      :                          @395
  5584: 7b 18 30                 u64 [sp + 0x30] = a1
  5587: 7b 17 38                 u64 [sp + 0x38] = a0
  5590: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  5593: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  5596: 51 08 26                 jump @400 if a1 == 0
      :                          @396
  5599: 52 18 01 16              jump @398 if a1 != 1
      :                          @397
  5603: 97 77 04                 a0 = a0 << 0x4
  5606: 82 18 18                 a1 = u64 [sp + 0x18]
  5609: c8 87 07                 a0 = a0 + a1
  5612: 82 78 08                 a1 = u64 [a0 + 0x8]
  5615: 82 19 10                 a2 = u64 [sp + 0x10]
  5618: aa 98 07                 jump @399 if a1 == a2
      :                          @398
  5621: 33 08                    a1 = 0
  5623: 28 0f                    jump @401
      :                          @399
  5625: 82 77                    a0 = u64 [a0]
  5627: 82 77                    a0 = u64 [a0]
  5629: 33 08 01                 a1 = 0x1
  5632: 28 06                    jump @401
      :                          @400
  5634: 33 08 01                 a1 = 0x1
  5637: 01                       fallthrough
      :                          @401
  5638: 7b 18 40                 u64 [sp + 0x40] = a1
  5641: 7b 17 48                 u64 [sp + 0x48] = a0
  5644: 82 67 08                 a0 = u64 [s1 + 0x8]
  5647: 97 77 04                 a0 = a0 << 0x4
  5650: 82 18 18                 a1 = u64 [sp + 0x18]
  5653: c8 78 08                 a1 = a1 + a0
  5656: 82 87                    a0 = u64 [a1]
  5658: 82 89 08                 a2 = u64 [a1 + 0x8]
  5661: 95 18 30                 a1 = sp + 0x30
  5664: b4 90 01 6c              ra = 108, jump [a2]
      :                          @402 [@dyn 54]
  5668: 52 07 b8 00              jump @418 if a0 != 0
      :                          @403
  5672: 95 55 10                 s0 = s0 + 0x10
  5675: 82 18 20                 a1 = u64 [sp + 0x20]
  5678: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  5681: 95 66 38                 s1 = s1 + 0x38
  5684: 82 17 28                 a0 = u64 [sp + 0x28]
  5687: 95 77 01                 a0 = a0 + 0x1
  5690: 7b 17 28                 u64 [sp + 0x28] = a0
  5693: 52 08 36 ff              jump @386 if a1 != 0
      :                          @404
  5697: 28 69                    jump @413
      :                          @405
  5699: 82 97 18                 a0 = u64 [a2 + 0x18]
  5702: 51 07 71                 jump @415 if a0 == 0
      :                          @406
  5705: 82 95 10                 s0 = u64 [a2 + 0x10]
  5708: 33 0a                    a3 = 0
  5710: 97 78 04                 a1 = a0 << 0x4
  5713: c8 58 08                 a1 = a1 + s0
  5716: 7b 18 20                 u64 [sp + 0x20] = a1
  5719: 7b 19 08                 u64 [sp + 0x8] = a2
  5722: 82 96                    s1 = u64 [a2]
  5724: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  5727: 97 77 04                 a0 = a0 << 0x4
  5730: 98 77 04                 a0 = a0 >> 0x4
  5733: 95 77 01                 a0 = a0 + 0x1
  5736: 7b 17                    u64 [sp] = a0
  5738: 95 66 08                 s1 = s1 + 0x8
  5741: 01                       fallthrough
      :                          @407
  5742: 7b 1a 28                 u64 [sp + 0x28] = a3
  5745: 82 69                    a2 = u64 [s1]
  5747: 51 09 16                 jump @410 if a2 == 0
      :                          @408
  5750: 82 1a 58                 a3 = u64 [sp + 0x58]
  5753: 82 17 50                 a0 = u64 [sp + 0x50]
  5756: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  5759: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5762: b4 a0 01 6e              ra = 110, jump [a3]
      :                          @409 [@dyn 55]
  5766: 52 07 56                 jump @418 if a0 != 0
      :                          @410
  5769: 82 57                    a0 = u64 [s0]
  5771: 82 59 08                 a2 = u64 [s0 + 0x8]
  5774: 95 18 30                 a1 = sp + 0x30
  5777: b4 90 01 70              ra = 112, jump [a2]
      :                          @411 [@dyn 56]
  5781: 52 07 47                 jump @418 if a0 != 0
      :                          @412
  5784: 95 66 10                 s1 = s1 + 0x10
  5787: 95 55 10                 s0 = s0 + 0x10
  5790: 82 1a 28                 a3 = u64 [sp + 0x28]
  5793: 95 aa 01                 a3 = a3 + 0x1
  5796: 82 17 20                 a0 = u64 [sp + 0x20]
  5799: ab 75 c7                 jump @407 if s0 != a0
      :                          @413
  5802: 82 19 08                 a2 = u64 [sp + 0x8]
  5805: 82 1a                    a3 = u64 [sp]
  5807: 82 97 08                 a0 = u64 [a2 + 0x8]
  5810: ac 7a 0d                 jump @416 if a3 <u a0
      :                          @414
  5813: 28 2c                    jump @419
      :                          @415
  5815: 33 0a                    a3 = 0
  5817: 82 97 08                 a0 = u64 [a2 + 0x8]
  5820: 54 07 25                 jump @419 if a0 <=u 0
      :                          @416
  5823: 82 97                    a0 = u64 [a2]
  5825: 97 a8 04                 a1 = a3 << 0x4
  5828: c8 87 09                 a2 = a0 + a1
  5831: 82 1a 58                 a3 = u64 [sp + 0x58]
  5834: 82 17 50                 a0 = u64 [sp + 0x50]
  5837: 82 98                    a1 = u64 [a2]
  5839: 82 99 08                 a2 = u64 [a2 + 0x8]
  5842: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5845: b4 a0 01 72              ra = 114, jump [a3]
      :                          @417 [@dyn 57]
  5849: 51 07 08                 jump @419 if a0 == 0
      :                          @418
  5852: 33 07 01                 a0 = 0x1
  5855: 28 05                    jump @420
      :                          @419
  5857: 33 07                    a0 = 0
  5859: 01                       fallthrough
      :                          @420
  5860: 82 10 80 00              ra = u64 [sp + 0x80]
  5864: 82 15 78                 s0 = u64 [sp + 0x78]
  5867: 82 16 70                 s1 = u64 [sp + 0x70]
  5870: 95 11 88 00              sp = sp + 0x88
  5874: 32 00                    ret
      :                          @421 [@dyn 58]
  5876: 32 00                    ret
      :                          @422 [@dyn 59]
  5878: 95 11 80                 sp = sp + 0xffffffffffffff80
  5881: 7b 10 78                 u64 [sp + 0x78] = ra
  5884: 7b 15 70                 u64 [sp + 0x70] = s0
  5887: 7b 16 68                 u64 [sp + 0x68] = s1
  5890: 64 92                    t0 = a2
  5892: 33 00                    ra = 0
  5894: 33 0b                    a4 = 0
  5896: 33 05                    s0 = 0
  5898: 14 03 ff fe fe fe fe fe fe fe t1 = 0xfefefefefefefeff
  5908: 33 0a 0a 0a 0a 0a        a3 = 0xa0a0a0a
  5914: 14 04 0a 0a 0a 0a 0a 0a 0a 0a t2 = 0xa0a0a0a0a0a0a0a
  5924: 82 79 10                 a2 = u64 [a0 + 0x10]
  5927: 7b 19 48                 u64 [sp + 0x48] = a2
  5930: 82 79                    a2 = u64 [a0]
  5932: 7b 19 38                 u64 [sp + 0x38] = a2
  5935: 82 77 08                 a0 = u64 [a0 + 0x8]
  5938: 7b 17 30                 u64 [sp + 0x30] = a0
  5941: 33 07 0c 00 01           a0 = 0x1000c
  5946: 7b 17 08                 u64 [sp + 0x8] = a0
  5949: 3a 07 08 00 03           a0 = u64 [0x30008]
  5954: 7b 17 60                 u64 [sp + 0x60] = a0
  5957: 7b 18 58                 u64 [sp + 0x58] = a1
  5960: 95 88 08                 a1 = a1 + 0x8
  5963: 7b 18                    u64 [sp] = a1
  5965: 33 0c 0a                 a5 = 0xa
  5968: 7b 12 20                 u64 [sp + 0x20] = t0
  5971: 7b 13 18                 u64 [sp + 0x18] = t1
  5974: 7b 14 10                 u64 [sp + 0x10] = t2
  5977: 28 3a                    jump @426
      :                          @423
  5979: 64 06                    s1 = ra
  5981: c8 89 07                 a0 = a2 + a1
  5984: 7c 77 ff                 a0 = u8 [a0 + 0xffffffffffffffff]
  5987: 95 77 f6                 a0 = a0 + 0xfffffffffffffff6
  5990: 88 77 01                 a0 = a0 <u 0x1
  5993: 01                       fallthrough
      :                          @424
  5994: 82 1a 48                 a3 = u64 [sp + 0x48]
  5997: 78 a7                    u8 [a3] = a0
  5999: 82 17 30                 a0 = u64 [sp + 0x30]
  6002: 82 7a 18                 a3 = u64 [a0 + 0x18]
  6005: 82 17 38                 a0 = u64 [sp + 0x38]
  6008: b4 a0 01 78              ra = 120, jump [a3]
      :                          @425 [@dyn 60]
  6012: 64 5b                    a4 = s0
  6014: 82 12 20                 t0 = u64 [sp + 0x20]
  6017: 82 13 18                 t1 = u64 [sp + 0x18]
  6020: 82 14 10                 t2 = u64 [sp + 0x10]
  6023: 64 60                    ra = s1
  6025: 33 0c 0a                 a5 = 0xa
  6028: 82 15 40                 s0 = u64 [sp + 0x40]
  6031: 52 07 63 01              jump @467 if a0 != 0
      :                          @426
  6035: 84 57 ff 00              a0 = s0 & 0xff
  6039: 52 07 57 01              jump @466 if a0 != 0
      :                          @427
  6043: 7b 1b 50                 u64 [sp + 0x50] = a4
  6046: ae 02 0a                 jump @430 if t0 >=u ra
      :                          @428
  6049: 28 ef 00                 jump @457
      :                          @429
  6052: ac 02 ec 00              jump @457 if t0 <u ra
      :                          @430
  6056: c9 02 08                 a1 = t0 - ra
  6059: 82 16 58                 s1 = u64 [sp + 0x58]
  6062: c8 06 06                 s1 = s1 + ra
  6065: 55 18 10 1d              jump @436 if a1 >=u 16
      :                          @431
  6069: aa 02 d8 00              jump @456 if t0 == ra
      :                          @432
  6073: 33 0a                    a3 = 0
  6075: 01                       fallthrough
      :                          @433
  6076: c8 a6 07                 a0 = s1 + a3
  6079: 7c 77                    a0 = u8 [a0]
  6081: aa c7 a5 00              jump @451 if a0 == a5
      :                          @434
  6085: 95 aa 01                 a3 = a3 + 0x1
  6088: ab a8 f4                 jump @433 if a1 != a3
      :                          @435
  6091: 28 c2 00                 jump @456
      :                          @436
  6094: 95 69 07                 a2 = s1 + 0x7
  6097: 84 9a f8                 a3 = a2 & 0xfffffffffffffff8
  6100: c9 6a 07                 a0 = a3 - s1
  6103: d3 6a 0a                 a3 = a3 ^ s1
  6106: 88 aa 01                 a3 = a3 <u 0x1
  6109: 88 7b 01                 a4 = a0 <u 0x1
  6112: d4 ba 0a                 a3 = a3 | a4
  6115: 51 0a 45                 jump @442 if a3 == 0
      :                          @437
  6118: 33 07                    a0 = 0
  6120: 95 8a f0                 a3 = a1 + 0xfffffffffffffff0
  6123: 82 1b                    a4 = u64 [sp]
  6125: c8 0b 0b                 a4 = a4 + ra
  6128: 28 08                    jump @439
      :                          @438
  6130: 82 1b                    a4 = u64 [sp]
  6132: c8 0b 0b                 a4 = a4 + ra
  6135: 01                       fallthrough
      :                          @439
  6136: c8 76 0c                 a5 = s1 + a0
  6139: 82 cc                    a5 = u64 [a5]
  6141: c8 7b 09                 a2 = a4 + a0
  6144: 82 99                    a2 = u64 [a2]
  6146: d3 4c 05                 s0 = a5 ^ t2
  6149: c8 35 05                 s0 = s0 + t1
  6152: e0 c5 0c                 a5 = s0 & ~a5
  6155: d3 49 05                 s0 = a2 ^ t2
  6158: c8 35 05                 s0 = s0 + t1
  6161: e0 95 09                 a2 = s0 & ~a2
  6164: d4 c9 09                 a2 = a2 | a5
  6167: 82 1c 60                 a5 = u64 [sp + 0x60]
  6170: d2 c9 09                 a2 = a2 & a5
  6173: 52 09 1f                 jump @445 if a2 != 0
      :                          @440
  6176: 95 77 10                 a0 = a0 + 0x10
  6179: ae 7a d5                 jump @439 if a3 >=u a0
      :                          @441
  6182: 28 16                    jump @445
      :                          @442
  6184: c8 a6 0b                 a4 = s1 + a3
  6187: 7c bb                    a4 = u8 [a4]
  6189: aa cb 51                 jump @454 if a4 == a5
      :                          @443
  6192: 95 aa 01                 a3 = a3 + 0x1
  6195: ab a7 f5                 jump @442 if a0 != a3
      :                          @444
  6198: 95 8a f0                 a3 = a1 + 0xfffffffffffffff0
  6201: ae 7a b9                 jump @438 if a3 >=u a0
      :                          @445
  6204: aa 87 9a 00              jump @463 if a0 == a1
      :                          @446
  6208: 33 0a                    a3 = 0
  6210: c8 76 06                 s1 = s1 + a0
  6213: c9 72 08                 a1 = t0 - a0
  6216: c9 08 08                 a1 = a1 - ra
  6219: 33 0c 0a                 a5 = 0xa
  6222: 82 1b 50                 a4 = u64 [sp + 0x50]
  6225: 01                       fallthrough
      :                          @447
  6226: c8 a6 09                 a2 = s1 + a3
  6229: 7c 99                    a2 = u8 [a2]
  6231: aa c9 0b                 jump @450 if a2 == a5
      :                          @448
  6234: 95 aa 01                 a3 = a3 + 0x1
  6237: ab a8 f5                 jump @447 if a1 != a3
      :                          @449
  6240: 28 2d                    jump @456
      :                          @450
  6242: c8 7a 0a                 a3 = a3 + a0
  6245: 01                       fallthrough
      :                          @451
  6246: c8 0a 0a                 a3 = a3 + ra
  6249: 95 a0 01                 ra = a3 + 0x1
  6252: ae 2a 38 ff              jump @429 if a3 >=u t0
      :                          @452
  6256: 82 17 58                 a0 = u64 [sp + 0x58]
  6259: c8 7a 0a                 a3 = a3 + a0
  6262: 7c a7                    a0 = u8 [a3]
  6264: ab c7 2c ff              jump @429 if a0 != a5
      :                          @453
  6268: 28 61                    jump @464
      :                          @454
  6270: 82 1b 50                 a4 = u64 [sp + 0x50]
  6273: c8 0a 0a                 a3 = a3 + ra
  6276: 95 a0 01                 ra = a3 + 0x1
  6279: ac 2a e9                 jump @452 if a3 <u t0
      :                          @455
  6282: 28 1a ff                 jump @429
      :                          @456
  6285: 64 20                    ra = t0
  6287: 01                       fallthrough
      :                          @457
  6288: 49 11 40 01              u64 [sp + 64] = 0x1
  6292: 64 b5                    s0 = a4
  6294: 64 26                    s1 = t0
  6296: aa 2b 56                 jump @466 if a4 == t0
      :                          @458
  6299: 82 17 48                 a0 = u64 [sp + 0x48]
  6302: 7c 77                    a0 = u8 [a0]
  6304: 51 07 22                 jump @461 if a0 == 0
      :                          @459
  6307: 82 17 30                 a0 = u64 [sp + 0x30]
  6310: 82 7a 18                 a3 = u64 [a0 + 0x18]
  6313: 33 09 04                 a2 = 0x4
  6316: 82 17 38                 a0 = u64 [sp + 0x38]
  6319: 82 18 08                 a1 = u64 [sp + 0x8]
  6322: 7b 10 28                 u64 [sp + 0x28] = ra
  6325: b4 a0 01 7a              ra = 122, jump [a3]
      :                          @460 [@dyn 61]
  6329: 82 1b 50                 a4 = u64 [sp + 0x50]
  6332: 82 10 28                 ra = u64 [sp + 0x28]
  6335: 52 07 33                 jump @467 if a0 != 0
      :                          @461
  6338: c9 b6 09                 a2 = s1 - a4
  6341: 82 18 58                 a1 = u64 [sp + 0x58]
  6344: c8 b8 08                 a1 = a1 + a4
  6347: ab b6 90 fe              jump @423 if s1 != a4
      :                          @462
  6351: 64 06                    s1 = ra
  6353: 33 07                    a0 = 0
  6355: 28 97 fe                 jump @424
      :                          @463
  6358: 64 20                    ra = t0
  6360: 82 1b 50                 a4 = u64 [sp + 0x50]
  6363: 28 b5                    jump @457
      :                          @464
  6365: 49 11 40                 u64 [sp + 64] = 0
  6368: 64 05                    s0 = ra
  6370: 64 06                    s1 = ra
  6372: 82 17 48                 a0 = u64 [sp + 0x48]
  6375: 7c 77                    a0 = u8 [a0]
  6377: 52 07 ba                 jump @459 if a0 != 0
      :                          @465
  6380: 28 d6                    jump @461
      :                          @466
  6382: 33 07                    a0 = 0
  6384: 28 06                    jump @468
      :                          @467
  6386: 33 07 01                 a0 = 0x1
  6389: 01                       fallthrough
      :                          @468
  6390: 82 10 78                 ra = u64 [sp + 0x78]
  6393: 82 15 70                 s0 = u64 [sp + 0x70]
  6396: 82 16 68                 s1 = u64 [sp + 0x68]
  6399: 95 11 80 00              sp = sp + 0x80
  6403: 32 00                    ret
      :                          @469 [@dyn 62]
  6405: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  6408: 7b 10 20                 u64 [sp + 0x20] = ra
  6411: 7b 15 18                 u64 [sp + 0x18] = s0
  6414: 7b 16 10                 u64 [sp + 0x10] = s1
  6417: 82 75 10                 s0 = u64 [a0 + 0x10]
  6420: 7c 59                    a2 = u8 [s0]
  6422: 82 7b                    a4 = u64 [a0]
  6424: 82 76 08                 s1 = u64 [a0 + 0x8]
  6427: 51 09 32                 jump @473 if a2 == 0
      :                          @470
  6430: 82 6a 18                 a3 = u64 [s1 + 0x18]
  6433: 7b 18 08                 u64 [sp + 0x8] = a1
  6436: 33 08 0c 00 01           a1 = 0x1000c
  6441: 33 09 04                 a2 = 0x4
  6444: 64 b7                    a0 = a4
  6446: 7b 1b                    u64 [sp] = a4
  6448: b4 a0 01 7e              ra = 126, jump [a3]
      :                          @471 [@dyn 63]
  6452: 82 18 08                 a1 = u64 [sp + 0x8]
  6455: 82 1b                    a4 = u64 [sp]
  6457: 51 07 14                 jump @473 if a0 == 0
      :                          @472
  6460: 33 07 01                 a0 = 0x1
  6463: 82 10 20                 ra = u64 [sp + 0x20]
  6466: 82 15 18                 s0 = u64 [sp + 0x18]
  6469: 82 16 10                 s1 = u64 [sp + 0x10]
  6472: 95 11 28                 sp = sp + 0x28
  6475: 32 00                    ret
      :                          @473
  6477: 83 87                    i32 a0 = a1 + 0
  6479: 95 77 f6                 a0 = a0 + 0xfffffffffffffff6
  6482: 88 77 01                 a0 = a0 <u 0x1
  6485: 78 57                    u8 [s0] = a0
  6487: 82 6c 20                 a5 = u64 [s1 + 0x20]
  6490: 64 b7                    a0 = a4
  6492: 82 10 20                 ra = u64 [sp + 0x20]
  6495: 82 15 18                 s0 = u64 [sp + 0x18]
  6498: 82 16 10                 s1 = u64 [sp + 0x10]
  6501: 95 11 28                 sp = sp + 0x28
  6504: 32 0c                    jump [a5]
      :                          @474 [@dyn 64]
  6506: 64 8a                    a3 = a1
  6508: 33 08 40 02 01           a1 = 0x10240
  6513: 64 a9                    a2 = a3
  6515: 28 a2 fb                 jump @383
      :                          @475
  6518: 51 08 9b 00              jump @496 if a1 == 0
      :                          @476
  6522: 64 79                    a2 = a0
  6524: 7c 77                    a0 = u8 [a0]
  6526: 51 07 91 00              jump @495 if a0 == 0
      :                          @477
  6530: 51 27 ff 00 90 00        jump @497 if a0 == 255
      :                          @478
  6536: 6c 7a                    a3 = sext.b a0
  6538: 57 0a 09                 jump @480 if a3 <s 0
      :                          @479
  6541: 33 0a                    a3 = 0
  6543: 33 08                    a1 = 0
  6545: 28 73                    jump @494
      :                          @480
  6547: 55 27 c0 00 0d           jump @482 if a0 >=u 192
      :                          @481
  6552: 33 0a 01                 a3 = 0x1
  6555: 33 0b 80                 a4 = 0xffffffffffffff80
  6558: 28 4a                    jump @491
      :                          @482
  6560: 55 27 e0 00 0e           jump @484 if a0 >=u 224
      :                          @483
  6565: 33 0a 02                 a3 = 0x2
  6568: 33 0b 40 ff              a4 = 0xffffffffffffff40
  6572: 28 3c                    jump @491
      :                          @484
  6574: 55 27 f0 00 0e           jump @486 if a0 >=u 240
      :                          @485
  6579: 33 0a 03                 a3 = 0x3
  6582: 33 0b 20 ff              a4 = 0xffffffffffffff20
  6586: 28 2e                    jump @491
      :                          @486
  6588: 55 27 f8 00 0e           jump @488 if a0 >=u 248
      :                          @487
  6593: 33 0a 04                 a3 = 0x4
  6596: 33 0b 10 ff              a4 = 0xffffffffffffff10
  6600: 28 20                    jump @491
      :                          @488
  6602: 55 27 fc 00 0e           jump @490 if a0 >=u 252
      :                          @489
  6607: 33 0a 05                 a3 = 0x5
  6610: 33 0b 08 ff              a4 = 0xffffffffffffff08
  6614: 28 12                    jump @491
      :                          @490
  6616: 88 7a fe 00              a3 = a0 <u 0xfe
  6620: 33 0b 04 ff              a4 = 0xffffffffffffff04
  6624: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  6628: 85 aa 07                 a3 = a3 ^ 0x7
  6631: 01                       fallthrough
      :                          @491
  6632: ae 8a 2b                 jump @498 if a3 >=u a1
      :                          @492
  6635: 33 08                    a1 = 0
  6637: c8 b7 07                 a0 = a0 + a4
  6640: 64 ab                    a4 = a3
  6642: 01                       fallthrough
      :                          @493
  6643: c8 b9 0c                 a5 = a2 + a4
  6646: 7c cc                    a5 = u8 [a5]
  6648: 97 88 08                 a1 = a1 << 0x8
  6651: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  6654: d4 c8 08                 a1 = a1 | a5
  6657: 52 0b f2                 jump @493 if a4 != 0
      :                          @494
  6660: 8a a9 03                 i32 a2 = a3 << 0x3
  6663: cf 97 07                 a0 = a0 << a2
  6666: c8 87 07                 a0 = a0 + a1
  6669: 32 00                    ret
      :                          @495
  6671: 32 00                    ret
      :                          @496
  6673: 00                       trap
      :                          @497
  6674: 00                       trap
      :                          @498
  6675: 00                       trap
      :                          @499 [@dyn 65]
  6676: 95 11 68 ff              sp = sp + 0xffffffffffffff68
  6680: 7b 10 90 00              u64 [sp + 0x90] = ra
  6684: 7b 15 88 00              u64 [sp + 0x88] = s0
  6688: 7b 16 80 00              u64 [sp + 0x80] = s1
  6692: 64 85                    s0 = a1
  6694: 82 86 28                 s1 = u64 [a1 + 0x28]
  6697: 82 8a 20                 a3 = u64 [a1 + 0x20]
  6700: 82 6b 18                 a4 = u64 [s1 + 0x18]
  6703: 7b 17 10                 u64 [sp + 0x10] = a0
  6706: 33 08 38 02 01           a1 = 0x10238
  6711: 33 09 01                 a2 = 0x1
  6714: 7b 1a 18                 u64 [sp + 0x18] = a3
  6717: 64 a7                    a0 = a3
  6719: 7b 1b 08                 u64 [sp + 0x8] = a4
  6722: b4 b0 02 84 00           ra = 132, jump [a4]
      :                          @500 [@dyn 66]
  6727: 51 07 09                 jump @502 if a0 == 0
      :                          @501
  6730: 33 09 01                 a2 = 0x1
  6733: 28 d2 00                 jump @514
      :                          @502
  6736: 80 58 34                 a1 = u32 [s0 + 0x34]
  6739: 84 87 04                 a0 = a1 & 0x4
  6742: 52 07 21                 jump @506 if a0 != 0
      :                          @503
  6745: 82 17 10                 a0 = u64 [sp + 0x10]
  6748: 64 58                    a1 = s0
  6750: 50 20 86 00 d5 00        ra = 134, jump @515
      :                          @504 [@dyn 67]
  6756: 33 09 01                 a2 = 0x1
  6759: 52 07 b8 00              jump @514 if a0 != 0
      :                          @505
  6763: 82 57 28                 a0 = u64 [s0 + 0x28]
  6766: 82 5a 20                 a3 = u64 [s0 + 0x20]
  6769: 82 7b 18                 a4 = u64 [a0 + 0x18]
  6772: 28 99 00                 jump @512
      :                          @506
  6775: 7b 18                    u64 [sp] = a1
  6777: 33 08 72 02 01           a1 = 0x10272
  6782: 33 09 01                 a2 = 0x1
  6785: 82 17 18                 a0 = u64 [sp + 0x18]
  6788: 82 1a 08                 a3 = u64 [sp + 0x8]
  6791: b4 a0 02 88 00           ra = 136, jump [a3]
      :                          @507 [@dyn 68]
  6796: 33 09 01                 a2 = 0x1
  6799: 82 18 18                 a1 = u64 [sp + 0x18]
  6802: 52 07 8d 00              jump @514 if a0 != 0
      :                          @508
  6806: 46 11 3f 01              u8 [sp + 63] = 0x1
  6810: 7b 18 20                 u64 [sp + 0x20] = a1
  6813: 7b 16 28                 u64 [sp + 0x28] = s1
  6816: 95 17 3f                 a0 = sp + 0x3f
  6819: 7b 17 30                 u64 [sp + 0x30] = a0
  6822: 81 57 30                 a0 = i32 [s0 + 0x30]
  6825: 7c 58 38                 a1 = u8 [s0 + 0x38]
  6828: 82 59                    a2 = u64 [s0]
  6830: 82 5a 08                 a3 = u64 [s0 + 0x8]
  6833: 82 5b 10                 a4 = u64 [s0 + 0x10]
  6836: 82 5c 18                 a5 = u64 [s0 + 0x18]
  6839: 82 16                    s1 = u64 [sp]
  6841: 7a 16 74                 u32 [sp + 0x74] = s1
  6844: 7a 17 70                 u32 [sp + 0x70] = a0
  6847: 78 18 78                 u8 [sp + 0x78] = a1
  6850: 7b 19 40                 u64 [sp + 0x40] = a2
  6853: 7b 1a 48                 u64 [sp + 0x48] = a3
  6856: 7b 1b 50                 u64 [sp + 0x50] = a4
  6859: 7b 1c 58                 u64 [sp + 0x58] = a5
  6862: 95 17 20                 a0 = sp + 0x20
  6865: 7b 17 60                 u64 [sp + 0x60] = a0
  6868: 33 07 40 02 01           a0 = 0x10240
  6873: 7b 17 68                 u64 [sp + 0x68] = a0
  6876: 95 18 40                 a1 = sp + 0x40
  6879: 82 17 10                 a0 = u64 [sp + 0x10]
  6882: 50 20 8a 00 51           ra = 138, jump @515
      :                          @509 [@dyn 69]
  6887: 52 07 63 ff              jump @501 if a0 != 0
      :                          @510
  6891: 82 18 68                 a1 = u64 [sp + 0x68]
  6894: 82 17 60                 a0 = u64 [sp + 0x60]
  6897: 82 8a 18                 a3 = u64 [a1 + 0x18]
  6900: 33 08 70 02 01           a1 = 0x10270
  6905: 33 09 02                 a2 = 0x2
  6908: b4 a0 02 8c 00           ra = 140, jump [a3]
      :                          @511 [@dyn 70]
  6913: 82 1a 18                 a3 = u64 [sp + 0x18]
  6916: 82 1b 08                 a4 = u64 [sp + 0x8]
  6919: 33 09 01                 a2 = 0x1
  6922: 52 07 15                 jump @514 if a0 != 0
      :                          @512
  6925: 33 08 73 02 01           a1 = 0x10273
  6930: 33 09 01                 a2 = 0x1
  6933: 64 a7                    a0 = a3
  6935: b4 b0 02 8e 00           ra = 142, jump [a4]
      :                          @513 [@dyn 71]
  6940: 64 79                    a2 = a0
  6942: 01                       fallthrough
      :                          @514
  6943: 64 97                    a0 = a2
  6945: 82 10 90 00              ra = u64 [sp + 0x90]
  6949: 82 15 88 00              s0 = u64 [sp + 0x88]
  6953: 82 16 80 00              s1 = u64 [sp + 0x80]
  6957: 95 11 98 00              sp = sp + 0x98
  6961: 32 00                    ret
      :                          @515
  6963: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  6967: 7b 10 80 00              u64 [sp + 0x80] = ra
  6971: 64 82                    t0 = a1
  6973: 80 88 34                 a1 = u32 [a1 + 0x34]
  6976: 84 89 10                 a2 = a1 & 0x10
  6979: 52 09 1b                 jump @518 if a2 != 0
      :                          @516
  6982: 84 88 20                 a1 = a1 & 0x20
  6985: 52 08 46                 jump @521 if a1 != 0
      :                          @517
  6988: 7c 77                    a0 = u8 [a0]
  6990: 33 08 01                 a1 = 0x1
  6993: 64 29                    a2 = t0
  6995: 82 10 80 00              ra = u64 [sp + 0x80]
  6999: 95 11 88 00              sp = sp + 0x88
  7003: 28 0c f6                 jump @319
      :                          @518
  7006: 7c 77                    a0 = u8 [a0]
  7008: 33 0a 81 00              a3 = 0x81
  7012: 95 18 7f                 a1 = sp + 0x7f
  7015: 33 03 57                 t1 = 0x57
  7018: 01                       fallthrough
      :                          @519
  7019: 64 ab                    a4 = a3
  7021: 84 7a 0f                 a3 = a0 & 0xf
  7024: 97 77 38                 a0 = a0 << 0x38
  7027: 98 77 3c                 a0 = a0 >> 0x3c
  7030: 88 ac 0a                 a5 = a3 <u 0xa
  7033: 33 09 30                 a2 = 0x30
  7036: da c3 09                 a2 = t1 if a5 == 0
  7039: be a9 09                 i32 a2 = a2 + a3
  7042: 78 89                    u8 [a1] = a2
  7044: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
  7047: 95 ba ff                 a3 = a4 + 0xffffffffffffffff
  7050: 52 07 e1                 jump @519 if a0 != 0
      :                          @520
  7053: 28 31                    jump @523
      :                          @521
  7055: 7c 77                    a0 = u8 [a0]
  7057: 33 0a 81 00              a3 = 0x81
  7061: 95 18 7f                 a1 = sp + 0x7f
  7064: 33 03 37                 t1 = 0x37
  7067: 01                       fallthrough
      :                          @522
  7068: 64 ab                    a4 = a3
  7070: 84 7a 0f                 a3 = a0 & 0xf
  7073: 97 77 38                 a0 = a0 << 0x38
  7076: 98 77 3c                 a0 = a0 >> 0x3c
  7079: 88 ac 0a                 a5 = a3 <u 0xa
  7082: 33 09 30                 a2 = 0x30
  7085: da c3 09                 a2 = t1 if a5 == 0
  7088: be a9 09                 i32 a2 = a2 + a3
  7091: 78 89                    u8 [a1] = a2
  7093: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
  7096: 95 ba ff                 a3 = a4 + 0xffffffffffffffff
  7099: 52 07 e1                 jump @522 if a0 != 0
      :                          @523
  7102: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
  7105: 56 27 80 00 2b           jump @526 if a0 >u 128
      :                          @524
  7110: 9a ac 81 00              a5 = 0x81 - a3
  7114: 64 1b                    a4 = sp
  7116: c8 7b 0b                 a4 = a4 + a0
  7119: 33 09 74 02 01           a2 = 0x10274
  7124: 33 08 01                 a1 = 0x1
  7127: 33 0a 02                 a3 = 0x2
  7130: 64 27                    a0 = t0
  7132: 50 20 90 00 b8 f6        ra = 144, jump @329
      :                          @525 [@dyn 72]
  7138: 82 10 80 00              ra = u64 [sp + 0x80]
  7142: 95 11 88 00              sp = sp + 0x88
  7146: 32 00                    ret
      :                          @526
  7148: 00                       trap
