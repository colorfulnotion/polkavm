// RO data = 976/976 bytes
// RW data = 16/65776 bytes
// Stack size = 65536 bytes
// RO data = [109, 101, 103, 40, 109, 101, 103, 32, 114, 101, 97, 100, 32, 32, 32, 32, 32, 114, 101, 97, 100, 32, 102, 114, 111, 109, 32, 115, 101, 114, 118, 105, 99, 101, 32, 32, 102, 105, 98, 40, 110, 61, 41, 61, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 16, 0, 1, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 35, 0, 1, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 42, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 32, 116, 114, 105, 98, 40, 110, 61, 32, 108, 101, 110, 103, 116, 104, 61, 116, 114, 97, 110, 115, 102, 101, 114, 4, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 16, 0, 1, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 112, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 42, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 42, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 32, 119, 114, 105, 116, 101, 40, 110, 61, 41, 32, 110, 117, 109, 95, 116, 114, 97, 110, 115, 102, 101, 114, 115, 61, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 232, 0, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 241, 0, 1, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 32, 116, 114, 97, 110, 115, 102, 101, 114, 40, 100, 101, 115, 116, 58, 44, 32, 97, 109, 111, 117, 110, 116, 61, 44, 32, 103, 97, 115, 95, 97, 118, 97, 105, 108, 61, 41, 32, 82, 101, 115, 117, 108, 116, 58, 32, 0, 0, 64, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 1, 1, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 71, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 80, 1, 1, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 92, 1, 1, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 77, 101, 103, 97, 116, 114, 111, 110, 32, 111, 110, 95, 116, 114, 97, 110, 115, 102, 101, 114, 32, 103, 97, 115, 58, 32, 103, 111, 116, 32, 32, 40, 114, 101, 99, 111, 114, 100, 101, 100, 32, 97, 116, 32, 107, 101, 121, 32, 52, 41, 0, 0, 0, 0, 0, 0, 184, 1, 1, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 214, 1, 1, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 44, 10, 10, 93, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 112, 97, 114, 115, 101, 95, 97, 99, 99, 117, 109, 117, 108, 97, 116, 101, 95, 97, 114, 103, 115, 32, 115, 116, 97, 114, 116, 95, 97, 100, 100, 114, 101, 115, 115, 61, 0, 0, 0, 0, 0, 0, 70, 3, 1, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 120, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 119, 114, 105, 116, 101, 95, 114, 101, 115, 117, 108, 116, 32, 107, 101, 121, 61, 44, 32, 114, 101, 115, 117, 108, 116, 61, 0, 0, 0, 0, 0, 0, 144, 3, 1, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 161, 3, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0]
// RW data = [75, 89, 134, 56, 214, 197, 109, 52, 128, 128, 128, 128, 128, 128, 128, 128]
// Instructions = 2501
// Code size = 7595 bytes

      :                          @0
     0: 28 3f 02 00 00           jump @39
      :                          @1
     5: 28 e0 02 00 00           jump @54
      :                          @2
    10: 28 1b 0c                 jump @199
      :                          @3 [@dyn 1]
    13: 95 11 78 ff              sp = sp + 0xffffffffffffff78
    17: 7b 10 80 00              u64 [sp + 0x80] = ra
    21: 64 82                    t0 = a1
    23: 80 88 34                 a1 = u32 [a1 + 0x34]
    26: 84 89 10                 a2 = a1 & 0x10
    29: 52 09 28                 jump @6 if a2 != 0
      :                          @4
    32: 84 88 20                 a1 = a1 & 0x20
    35: 52 08 52                 jump @9 if a1 != 0
      :                          @5
    38: 81 77                    a0 = i32 [a0]
    40: 89 79                    a2 = a0 <s 0
    42: 85 98 01                 a1 = a2 ^ 0x1
    45: 97 7a 20                 a3 = a0 << 0x20
    48: 98 aa 20                 a3 = a3 >> 0x20
    51: 9a 77                    a0 = -a0
    53: da 9a 07                 a0 = a3 if a2 == 0
    56: 64 29                    a2 = t0
    58: 82 10 80 00              ra = u64 [sp + 0x80]
    62: 95 11 88 00              sp = sp + 0x88
    66: 28 e0 12                 jump @343
      :                          @6
    69: 81 7a                    a3 = i32 [a0]
    71: 33 08 81 00              a1 = 0x81
    75: 95 17 7f                 a0 = sp + 0x7f
    78: 33 03 57                 t1 = 0x57
    81: 01                       fallthrough
      :                          @7
    82: 64 8b                    a4 = a1
    84: 8b ac 04                 i32 a5 = a3 >> 0x4
    87: 84 aa 0f                 a3 = a3 & 0xf
    90: 88 a8 0a                 a1 = a3 <u 0xa
    93: 33 09 30                 a2 = 0x30
    96: da 83 09                 a2 = t1 if a1 == 0
    99: be a9 09                 i32 a2 = a2 + a3
   102: 78 79                    u8 [a0] = a2
   104: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   107: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   110: 64 ca                    a3 = a5
   112: 52 0c e2                 jump @7 if a5 != 0
      :                          @8
   115: 28 30                    jump @11
      :                          @9
   117: 81 7a                    a3 = i32 [a0]
   119: 33 08 81 00              a1 = 0x81
   123: 95 17 7f                 a0 = sp + 0x7f
   126: 33 03 37                 t1 = 0x37
   129: 01                       fallthrough
      :                          @10
   130: 64 8b                    a4 = a1
   132: 8b ac 04                 i32 a5 = a3 >> 0x4
   135: 84 aa 0f                 a3 = a3 & 0xf
   138: 88 a8 0a                 a1 = a3 <u 0xa
   141: 33 09 30                 a2 = 0x30
   144: da 83 09                 a2 = t1 if a1 == 0
   147: be a9 09                 i32 a2 = a2 + a3
   150: 78 79                    u8 [a0] = a2
   152: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   155: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   158: 64 ca                    a3 = a5
   160: 52 0c e2                 jump @10 if a5 != 0
      :                          @11
   163: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   166: 56 27 80 00 2a           jump @14 if a0 >u 128
      :                          @12
   171: 9a 8c 81 00              a5 = 0x81 - a1
   175: 64 1b                    a4 = sp
   177: c8 7b 0b                 a4 = a4 + a0
   180: 33 09 7c 02 01           a2 = 0x1027c
   185: 33 08 01                 a1 = 0x1
   188: 33 0a 02                 a3 = 0x2
   191: 64 27                    a0 = t0
   193: 50 10 04 8e 13           ra = 4, jump @353
      :                          @13 [@dyn 2]
   198: 82 10 80 00              ra = u64 [sp + 0x80]
   202: 95 11 88 00              sp = sp + 0x88
   206: 32 00                    ret
      :                          @14
   208: 00                       trap
      :                          @15 [@dyn 3]
   209: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   213: 7b 10 80 00              u64 [sp + 0x80] = ra
   217: 64 82                    t0 = a1
   219: 80 88 34                 a1 = u32 [a1 + 0x34]
   222: 84 89 10                 a2 = a1 & 0x10
   225: 52 09 1b                 jump @18 if a2 != 0
      :                          @16
   228: 84 88 20                 a1 = a1 & 0x20
   231: 52 08 45                 jump @21 if a1 != 0
      :                          @17
   234: 80 77                    a0 = u32 [a0]
   236: 33 08 01                 a1 = 0x1
   239: 64 29                    a2 = t0
   241: 82 10 80 00              ra = u64 [sp + 0x80]
   245: 95 11 88 00              sp = sp + 0x88
   249: 28 29 12                 jump @343
      :                          @18
   252: 81 7a                    a3 = i32 [a0]
   254: 33 08 81 00              a1 = 0x81
   258: 95 17 7f                 a0 = sp + 0x7f
   261: 33 03 57                 t1 = 0x57
   264: 01                       fallthrough
      :                          @19
   265: 64 8b                    a4 = a1
   267: 8b ac 04                 i32 a5 = a3 >> 0x4
   270: 84 aa 0f                 a3 = a3 & 0xf
   273: 88 a8 0a                 a1 = a3 <u 0xa
   276: 33 09 30                 a2 = 0x30
   279: da 83 09                 a2 = t1 if a1 == 0
   282: be a9 09                 i32 a2 = a2 + a3
   285: 78 79                    u8 [a0] = a2
   287: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   290: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   293: 64 ca                    a3 = a5
   295: 52 0c e2                 jump @19 if a5 != 0
      :                          @20
   298: 28 30                    jump @23
      :                          @21
   300: 81 7a                    a3 = i32 [a0]
   302: 33 08 81 00              a1 = 0x81
   306: 95 17 7f                 a0 = sp + 0x7f
   309: 33 03 37                 t1 = 0x37
   312: 01                       fallthrough
      :                          @22
   313: 64 8b                    a4 = a1
   315: 8b ac 04                 i32 a5 = a3 >> 0x4
   318: 84 aa 0f                 a3 = a3 & 0xf
   321: 88 a8 0a                 a1 = a3 <u 0xa
   324: 33 09 30                 a2 = 0x30
   327: da 83 09                 a2 = t1 if a1 == 0
   330: be a9 09                 i32 a2 = a2 + a3
   333: 78 79                    u8 [a0] = a2
   335: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   338: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   341: 64 ca                    a3 = a5
   343: 52 0c e2                 jump @22 if a5 != 0
      :                          @23
   346: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   349: 56 27 80 00 2a           jump @26 if a0 >u 128
      :                          @24
   354: 9a 8c 81 00              a5 = 0x81 - a1
   358: 64 1b                    a4 = sp
   360: c8 7b 0b                 a4 = a4 + a0
   363: 33 09 7c 02 01           a2 = 0x1027c
   368: 33 08 01                 a1 = 0x1
   371: 33 0a 02                 a3 = 0x2
   374: 64 27                    a0 = t0
   376: 50 10 08 d7 12           ra = 8, jump @353
      :                          @25 [@dyn 4]
   381: 82 10 80 00              ra = u64 [sp + 0x80]
   385: 95 11 88 00              sp = sp + 0x88
   389: 32 00                    ret
      :                          @26
   391: 00                       trap
      :                          @27 [@dyn 5]
   392: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   396: 7b 10 80 00              u64 [sp + 0x80] = ra
   400: 64 82                    t0 = a1
   402: 80 88 34                 a1 = u32 [a1 + 0x34]
   405: 84 89 10                 a2 = a1 & 0x10
   408: 52 09 1b                 jump @30 if a2 != 0
      :                          @28
   411: 84 88 20                 a1 = a1 & 0x20
   414: 52 08 45                 jump @33 if a1 != 0
      :                          @29
   417: 82 77                    a0 = u64 [a0]
   419: 33 08 01                 a1 = 0x1
   422: 64 29                    a2 = t0
   424: 82 10 80 00              ra = u64 [sp + 0x80]
   428: 95 11 88 00              sp = sp + 0x88
   432: 28 72 11                 jump @343
      :                          @30
   435: 82 7a                    a3 = u64 [a0]
   437: 33 08 81 00              a1 = 0x81
   441: 95 17 7f                 a0 = sp + 0x7f
   444: 33 03 57                 t1 = 0x57
   447: 01                       fallthrough
      :                          @31
   448: 64 8b                    a4 = a1
   450: 98 ac 04                 a5 = a3 >> 0x4
   453: 84 aa 0f                 a3 = a3 & 0xf
   456: 88 a8 0a                 a1 = a3 <u 0xa
   459: 33 09 30                 a2 = 0x30
   462: da 83 09                 a2 = t1 if a1 == 0
   465: be a9 09                 i32 a2 = a2 + a3
   468: 78 79                    u8 [a0] = a2
   470: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   473: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   476: 64 ca                    a3 = a5
   478: 52 0c e2                 jump @31 if a5 != 0
      :                          @32
   481: 28 30                    jump @35
      :                          @33
   483: 82 7a                    a3 = u64 [a0]
   485: 33 08 81 00              a1 = 0x81
   489: 95 17 7f                 a0 = sp + 0x7f
   492: 33 03 37                 t1 = 0x37
   495: 01                       fallthrough
      :                          @34
   496: 64 8b                    a4 = a1
   498: 98 ac 04                 a5 = a3 >> 0x4
   501: 84 aa 0f                 a3 = a3 & 0xf
   504: 88 a8 0a                 a1 = a3 <u 0xa
   507: 33 09 30                 a2 = 0x30
   510: da 83 09                 a2 = t1 if a1 == 0
   513: be a9 09                 i32 a2 = a2 + a3
   516: 78 79                    u8 [a0] = a2
   518: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   521: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   524: 64 ca                    a3 = a5
   526: 52 0c e2                 jump @34 if a5 != 0
      :                          @35
   529: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   532: 56 27 80 00 2a           jump @38 if a0 >u 128
      :                          @36
   537: 9a 8c 81 00              a5 = 0x81 - a1
   541: 64 1b                    a4 = sp
   543: c8 7b 0b                 a4 = a4 + a0
   546: 33 09 7c 02 01           a2 = 0x1027c
   551: 33 08 01                 a1 = 0x1
   554: 33 0a 02                 a3 = 0x2
   557: 64 27                    a0 = t0
   559: 50 10 0c 20 12           ra = 12, jump @353
      :                          @37 [@dyn 6]
   564: 82 10 80 00              ra = u64 [sp + 0x80]
   568: 95 11 88 00              sp = sp + 0x88
   572: 32 00                    ret
      :                          @38
   574: 00                       trap
      :                          @39 [export #0: 'refine']
   575: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   578: 7b 10 18                 u64 [sp + 0x18] = ra
   581: 7b 15 10                 u64 [sp + 0x10] = s0
   584: 7b 16 08                 u64 [sp + 0x8] = s1
   587: 64 86                    s1 = a1
   589: 64 78                    a1 = a0
   591: 33 09 04                 a2 = 0x4
   594: 33 07 00 00 01           a0 = 0x10000
   599: ac 96 7c                 jump @51 if s1 <u a2
      :                          @40
   602: 95 66 fc                 s1 = s1 + 0xfffffffffffffffc
   605: 51 06 76                 jump @51 if s1 == 0
      :                          @41
   608: 95 87 04                 a0 = a1 + 0x4
   611: 7d 78                    a1 = i8 [a0]
   613: 33 05 01                 s0 = 0x1
   616: 59 08 3a                 jump @49 if a1 >=s 0
      :                          @42
   619: 84 89 ff 00              a2 = a1 & 0xff
   623: 33 05 02                 s0 = 0x2
   626: 53 29 c0 00 2d           jump @48 if a2 <u 192
      :                          @43
   631: 33 05 03                 s0 = 0x3
   634: 53 29 e0 00 25           jump @48 if a2 <u 224
      :                          @44
   639: 33 05 04                 s0 = 0x4
   642: 53 29 f0 00 1d           jump @48 if a2 <u 240
      :                          @45
   647: 33 05 05                 s0 = 0x5
   650: 53 29 f8 00 15           jump @48 if a2 <u 248
      :                          @46
   655: 33 05 06                 s0 = 0x6
   658: 53 29 fc 00 0d           jump @48 if a2 <u 252
      :                          @47
   663: 88 98 fe 00              a1 = a2 <u 0xfe
   667: 9a 85 08                 s0 = 0x8 - a1
   670: 01                       fallthrough
      :                          @48
   671: ac 56 45                 jump @53 if s1 <u s0
      :                          @49
   674: 64 58                    a1 = s0
   676: 7b 17                    u64 [sp] = a0
   678: 50 10 0e 8e 18           ra = 14, jump @499
      :                          @50 [@dyn 7]
   683: 64 78                    a1 = a0
   685: e4 56 07                 a0 = maxu(s1, s0)
   688: c9 57 07                 a0 = a0 - s0
   691: d8 87 09                 a2 = a0 <u a1
   694: e4 87 07                 a0 = maxu(a0, a1)
   697: c9 87 07                 a0 = a0 - a1
   700: 88 77 20                 a0 = a0 <u 0x20
   703: d4 79 09                 a2 = a2 | a0
   706: 82 17                    a0 = u64 [sp]
   708: c8 75 05                 s0 = s0 + a0
   711: 94 98                    a1 = 0 if a2 != 0
   713: 33 07 00 00 01           a0 = 0x10000
   718: da 95 07                 a0 = s0 if a2 == 0
   721: 28 05                    jump @52
      :                          @51
   723: 33 08                    a1 = 0
   725: 01                       fallthrough
      :                          @52
   726: 82 10 18                 ra = u64 [sp + 0x18]
   729: 82 15 10                 s0 = u64 [sp + 0x10]
   732: 82 16 08                 s1 = u64 [sp + 0x8]
   735: 95 11 20                 sp = sp + 0x20
   738: 32 00                    ret
      :                          @53
   740: 00                       trap
      :                          @54 [export #1: 'accumulate']
   741: 95 11 a0 fe              sp = sp + 0xfffffffffffffea0
   745: 7b 10 58 01              u64 [sp + 0x158] = ra
   749: 7b 15 50 01              u64 [sp + 0x150] = s0
   753: 7b 16 48 01              u64 [sp + 0x148] = s1
   757: 7b 17 20 01              u64 [sp + 0x120] = a0
   761: 7b 18 28 01              u64 [sp + 0x128] = a1
   765: 51 08 96 02              jump @123 if a1 == 0
      :                          @55
   769: 7b 17 60                 u64 [sp + 0x60] = a0
   772: 7b 18 50                 u64 [sp + 0x50] = a1
   775: 49 11 58 ff ff fe        u64 [sp + 88] = 0xfffffffffffeffff
   781: 95 17 20 01              a0 = sp + 0x120
   785: 7b 17 f0 00              u64 [sp + 0xf0] = a0
   789: 33 07 5e                 a0 = 0x5e
   792: 7b 17 f8 00              u64 [sp + 0xf8] = a0
   796: 95 18 28 01              a1 = sp + 0x128
   800: 7b 18 00 01              u64 [sp + 0x100] = a1
   804: 7b 17 08 01              u64 [sp + 0x108] = a0
   808: 33 07 70 03 01           a0 = 0x10370
   813: 7b 17 a0 00              u64 [sp + 0xa0] = a0
   817: 49 21 a8 00 02           u64 [sp + 168] = 0x2
   822: 49 21 c0 00              u64 [sp + 192] = 0
   826: 95 18 f0 00              a1 = sp + 0xf0
   830: 7b 18 b0 00              u64 [sp + 0xb0] = a1
   834: 49 21 b8 00 02           u64 [sp + 184] = 0x2
   839: 95 17 30 01              a0 = sp + 0x130
   843: 95 18 a0 00              a1 = sp + 0xa0
   847: 50 10 10 a1 0c           ra = 16, jump @272
      :                          @56 [@dyn 8]
   852: 82 16 38 01              s1 = u64 [sp + 0x138]
   856: 82 1b 40 01              a4 = u64 [sp + 0x140]
   860: 82 15 30 01              s0 = u64 [sp + 0x130]
   864: 33 07 02                 a0 = 0x2
   867: 33 08                    a1 = 0
   869: 33 09                    a2 = 0
   871: 64 6a                    a3 = s1
   873: 33 00 12                 ra = 0x12
   876: 0a 64                    ecalli 100 // 'log'
   878: 01                       fallthrough
      :                          @57 [@dyn 9]
   879: 82 17 58                 a0 = u64 [sp + 0x58]
   882: c8 57 07                 a0 = a0 + s0
   885: 53 37 00 00 ff 27        jump @63 if a0 <u 4294901760
      :                          @58
   891: 33 07 e0 00 03           a0 = 0x300e0
   896: 95 77 00 00 01           a0 = a0 + 0x10000
   901: 01                       fallthrough
      :                          @59
   902: 82 78                    a1 = u64 [a0]
   904: c9 87 09                 a2 = a0 - a1
   907: ab 69 11                 jump @63 if a2 != s1
      :                          @60
   910: c9 58 09                 a2 = a1 - s0
   913: 01                       fallthrough
      :                          @61
   914: 82 7a                    a3 = u64 [a0]
   916: ab 8a f2                 jump @59 if a3 != a1
      :                          @62
   919: 7b 79                    u64 [a0] = a2
   921: 33 0b                    a4 = 0
   923: 01                       fallthrough
      :                          @63
   924: 82 17 60                 a0 = u64 [sp + 0x60]
   927: 7d 78                    a1 = i8 [a0]
   929: 33 06 01                 s1 = 0x1
   932: 59 08 37                 jump @70 if a1 >=s 0
      :                          @64
   935: 84 89 ff 00              a2 = a1 & 0xff
   939: 33 06 02                 s1 = 0x2
   942: 53 29 c0 00 2d           jump @70 if a2 <u 192
      :                          @65
   947: 33 06 03                 s1 = 0x3
   950: 53 29 e0 00 25           jump @70 if a2 <u 224
      :                          @66
   955: 33 06 04                 s1 = 0x4
   958: 53 29 f0 00 1d           jump @70 if a2 <u 240
      :                          @67
   963: 33 06 05                 s1 = 0x5
   966: 53 29 f8 00 15           jump @70 if a2 <u 248
      :                          @68
   971: 33 06 06                 s1 = 0x6
   974: 53 29 fc 00 0d           jump @70 if a2 <u 252
      :                          @69
   979: 88 98 fe 00              a1 = a2 <u 0xfe
   983: 9a 86 08                 s1 = 0x8 - a1
   986: 01                       fallthrough
      :                          @70
   987: 82 15 50                 s0 = u64 [sp + 0x50]
   990: ac 65 b5 01              jump @123 if s0 <u s1
      :                          @71
   994: 64 68                    a1 = s1
   996: 50 10 14 50 17           ra = 20, jump @499
      :                          @72 [@dyn 10]
  1001: 82 17 60                 a0 = u64 [sp + 0x60]
  1004: aa 65 a7 01              jump @123 if s0 == s1
      :                          @73
  1008: c8 67 07                 a0 = a0 + s1
  1011: 7d 78                    a1 = i8 [a0]
  1013: c9 65 05                 s0 = s0 - s1
  1016: 33 06 01                 s1 = 0x1
  1019: 59 08 37                 jump @80 if a1 >=s 0
      :                          @74
  1022: 84 89 ff 00              a2 = a1 & 0xff
  1026: 33 06 02                 s1 = 0x2
  1029: 53 29 c0 00 2d           jump @80 if a2 <u 192
      :                          @75
  1034: 33 06 03                 s1 = 0x3
  1037: 53 29 e0 00 25           jump @80 if a2 <u 224
      :                          @76
  1042: 33 06 04                 s1 = 0x4
  1045: 53 29 f0 00 1d           jump @80 if a2 <u 240
      :                          @77
  1050: 33 06 05                 s1 = 0x5
  1053: 53 29 f8 00 15           jump @80 if a2 <u 248
      :                          @78
  1058: 33 06 06                 s1 = 0x6
  1061: 53 29 fc 00 0d           jump @80 if a2 <u 252
      :                          @79
  1066: 88 98 fe 00              a1 = a2 <u 0xfe
  1070: 9a 86 08                 s1 = 0x8 - a1
  1073: 01                       fallthrough
      :                          @80
  1074: ac 65 61 01              jump @123 if s0 <u s1
      :                          @81
  1078: 64 68                    a1 = s1
  1080: 7b 17 60                 u64 [sp + 0x60] = a0
  1083: 50 10 16 f9 16           ra = 22, jump @499
      :                          @82 [@dyn 11]
  1088: 82 17 60                 a0 = u64 [sp + 0x60]
  1091: c8 67 07                 a0 = a0 + s1
  1094: c9 65 0a                 a3 = s0 - s1
  1097: 7b 1a 60                 u64 [sp + 0x60] = a3
  1100: ab 65 07                 jump @84 if s0 != s1
      :                          @83
  1103: 33 06                    s1 = 0
  1105: 28 42                    jump @92
      :                          @84
  1107: 7d 78                    a1 = i8 [a0]
  1109: 33 06 01                 s1 = 0x1
  1112: 59 08 37                 jump @91 if a1 >=s 0
      :                          @85
  1115: 84 89 ff 00              a2 = a1 & 0xff
  1119: 33 06 02                 s1 = 0x2
  1122: 53 29 c0 00 2d           jump @91 if a2 <u 192
      :                          @86
  1127: 33 06 03                 s1 = 0x3
  1130: 53 29 e0 00 25           jump @91 if a2 <u 224
      :                          @87
  1135: 33 06 04                 s1 = 0x4
  1138: 53 29 f0 00 1d           jump @91 if a2 <u 240
      :                          @88
  1143: 33 06 05                 s1 = 0x5
  1146: 53 29 f8 00 15           jump @91 if a2 <u 248
      :                          @89
  1151: 33 06 06                 s1 = 0x6
  1154: 53 29 fc 00 0d           jump @91 if a2 <u 252
      :                          @90
  1159: 88 98 fe 00              a1 = a2 <u 0xfe
  1163: 9a 86 08                 s1 = 0x8 - a1
  1166: 01                       fallthrough
      :                          @91
  1167: ac 6a 04 01              jump @123 if a3 <u s1
      :                          @92
  1171: 64 68                    a1 = s1
  1173: 64 75                    s0 = a0
  1175: 50 10 18 9d 16           ra = 24, jump @499
      :                          @93 [@dyn 12]
  1180: 51 07 f7 00              jump @123 if a0 == 0
      :                          @94
  1184: 82 17 60                 a0 = u64 [sp + 0x60]
  1187: e4 67 07                 a0 = maxu(a0, s1)
  1190: c9 67 07                 a0 = a0 - s1
  1193: 53 17 60 ea 00           jump @123 if a0 <u 96
      :                          @95
  1198: c8 56 08                 a1 = s1 + s0
  1201: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
  1204: 95 87 60                 a0 = a1 + 0x60
  1207: 7b 17 60                 u64 [sp + 0x60] = a0
  1210: 51 06 4c                 jump @106 if s1 == 0
      :                          @96
  1213: 7d 78                    a1 = i8 [a0]
  1215: 33 05 01                 s0 = 0x1
  1218: 59 08 37                 jump @103 if a1 >=s 0
      :                          @97
  1221: 84 89 ff 00              a2 = a1 & 0xff
  1225: 33 05 02                 s0 = 0x2
  1228: 53 29 c0 00 2d           jump @103 if a2 <u 192
      :                          @98
  1233: 33 05 03                 s0 = 0x3
  1236: 53 29 e0 00 25           jump @103 if a2 <u 224
      :                          @99
  1241: 33 05 04                 s0 = 0x4
  1244: 53 29 f0 00 1d           jump @103 if a2 <u 240
      :                          @100
  1249: 33 05 05                 s0 = 0x5
  1252: 53 29 f8 00 15           jump @103 if a2 <u 248
      :                          @101
  1257: 33 05 06                 s0 = 0x6
  1260: 53 29 fc 00 0d           jump @103 if a2 <u 252
      :                          @102
  1265: 88 98 fe 00              a1 = a2 <u 0xfe
  1269: 9a 85 08                 s0 = 0x8 - a1
  1272: 01                       fallthrough
      :                          @103
  1273: ac 56 29 07              jump @196 if s1 <u s0
      :                          @104
  1277: 64 58                    a1 = s0
  1279: 50 10 1a 35 16           ra = 26, jump @499
      :                          @105 [@dyn 13]
  1284: 28 07                    jump @107
      :                          @106
  1286: 33 05                    s0 = 0
  1288: 33 07                    a0 = 0
  1290: 01                       fallthrough
      :                          @107
  1291: e4 56 08                 a1 = maxu(s1, s0)
  1294: c9 58 08                 a1 = a1 - s0
  1297: e4 78 08                 a1 = maxu(a1, a0)
  1300: c9 78 08                 a1 = a1 - a0
  1303: 33 09 20                 a2 = 0x20
  1306: ac 98 79                 jump @123 if a1 <u a2
      :                          @108
  1309: 82 19 60                 a2 = u64 [sp + 0x60]
  1312: c8 95 05                 s0 = s0 + a2
  1315: c8 57 07                 a0 = a0 + s0
  1318: 95 85 e0                 s0 = a1 + 0xffffffffffffffe0
  1321: 95 77 20                 a0 = a0 + 0x20
  1324: 7b 17 60                 u64 [sp + 0x60] = a0
  1327: 51 05 4c                 jump @119 if s0 == 0
      :                          @109
  1330: 7d 78                    a1 = i8 [a0]
  1332: 33 06 01                 s1 = 0x1
  1335: 59 08 37                 jump @116 if a1 >=s 0
      :                          @110
  1338: 84 89 ff 00              a2 = a1 & 0xff
  1342: 33 06 02                 s1 = 0x2
  1345: 53 29 c0 00 2d           jump @116 if a2 <u 192
      :                          @111
  1350: 33 06 03                 s1 = 0x3
  1353: 53 29 e0 00 25           jump @116 if a2 <u 224
      :                          @112
  1358: 33 06 04                 s1 = 0x4
  1361: 53 29 f0 00 1d           jump @116 if a2 <u 240
      :                          @113
  1366: 33 06 05                 s1 = 0x5
  1369: 53 29 f8 00 15           jump @116 if a2 <u 248
      :                          @114
  1374: 33 06 06                 s1 = 0x6
  1377: 53 29 fc 00 0d           jump @116 if a2 <u 252
      :                          @115
  1382: 88 98 fe 00              a1 = a2 <u 0xfe
  1386: 9a 86 08                 s1 = 0x8 - a1
  1389: 01                       fallthrough
      :                          @116
  1390: ac 65 b5 06              jump @197 if s0 <u s1
      :                          @117
  1394: 64 68                    a1 = s1
  1396: 50 10 1c c0 15           ra = 28, jump @499
      :                          @118 [@dyn 14]
  1401: 28 05                    jump @120
      :                          @119
  1403: 33 06                    s1 = 0
  1405: 01                       fallthrough
      :                          @120
  1406: ae 56 15                 jump @123 if s1 >=u s0
      :                          @121
  1409: 82 17 60                 a0 = u64 [sp + 0x60]
  1412: c8 67 07                 a0 = a0 + s1
  1415: 7c 78                    a1 = u8 [a0]
  1417: 51 08 26                 jump @125 if a1 == 0
      :                          @122
  1420: 33 08                    a1 = 0
  1422: 33 05                    s0 = 0
  1424: 28 9a 00                 jump @138
      :                          @123
  1427: 33 08                    a1 = 0
  1429: 33 05 00 00 01           s0 = 0x10000
  1434: 01                       fallthrough
      :                          @124
  1435: 64 57                    a0 = s0
  1437: 82 10 58 01              ra = u64 [sp + 0x158]
  1441: 82 15 50 01              s0 = u64 [sp + 0x150]
  1445: 82 16 48 01              s1 = u64 [sp + 0x148]
  1449: 95 11 60 01              sp = sp + 0x160
  1453: 32 00                    ret
      :                          @125
  1455: e4 65 08                 a1 = maxu(s0, s1)
  1458: c9 68 08                 a1 = a1 - s1
  1461: 95 75 01                 s0 = a0 + 0x1
  1464: 33 07 01                 a0 = 0x1
  1467: e4 78 07                 a0 = maxu(a1, a0)
  1470: 33 09 02                 a2 = 0x2
  1473: 95 7a ff                 a3 = a0 + 0xffffffffffffffff
  1476: ae 98 09                 jump @127 if a1 >=u a2
      :                          @126
  1479: 33 06                    s1 = 0
  1481: 33 07                    a0 = 0
  1483: 28 52                    jump @137
      :                          @127
  1485: 7d 57                    a0 = i8 [s0]
  1487: 33 06 01                 s1 = 0x1
  1490: 59 07 37                 jump @134 if a0 >=s 0
      :                          @128
  1493: 84 77 ff 00              a0 = a0 & 0xff
  1497: 33 06 02                 s1 = 0x2
  1500: 53 27 c0 00 2d           jump @134 if a0 <u 192
      :                          @129
  1505: 33 06 03                 s1 = 0x3
  1508: 53 27 e0 00 25           jump @134 if a0 <u 224
      :                          @130
  1513: 33 06 04                 s1 = 0x4
  1516: 53 27 f0 00 1d           jump @134 if a0 <u 240
      :                          @131
  1521: 33 06 05                 s1 = 0x5
  1524: 53 27 f8 00 15           jump @134 if a0 <u 248
      :                          @132
  1529: 33 06 06                 s1 = 0x6
  1532: 53 27 fc 00 0d           jump @134 if a0 <u 252
      :                          @133
  1537: 88 77 fe 00              a0 = a0 <u 0xfe
  1541: 9a 76 08                 s1 = 0x8 - a0
  1544: 01                       fallthrough
      :                          @134
  1545: 7b 1a 60                 u64 [sp + 0x60] = a3
  1548: ac 6a 18 06              jump @198 if a3 <u s1
      :                          @135
  1552: 64 57                    a0 = s0
  1554: 64 68                    a1 = s1
  1556: 50 10 1e 20 15           ra = 30, jump @499
      :                          @136 [@dyn 15]
  1561: 82 1a 60                 a3 = u64 [sp + 0x60]
  1564: 01                       fallthrough
      :                          @137
  1565: c8 65 05                 s0 = s0 + s1
  1568: e4 6a 08                 a1 = maxu(a3, s1)
  1571: c9 68 08                 a1 = a1 - s1
  1574: e6 78 08                 a1 = minu(a1, a0)
  1577: 01                       fallthrough
      :                          @138
  1578: 80 57                    a0 = u32 [s0]
  1580: c8 58 08                 a1 = a1 + s0
  1583: 7b 17 68                 u64 [sp + 0x68] = a0
  1586: 80 88 fc                 a1 = u32 [a1 + 0xfffffffffffffffc]
  1589: 7b 18 60                 u64 [sp + 0x60] = a1
  1592: 7b 18 70                 u64 [sp + 0x70] = a1
  1595: 33 08 10 00 03           a1 = 0x30010
  1600: 7b 18 50                 u64 [sp + 0x50] = a1
  1603: 33 06 34 00 03           s1 = 0x30034
  1608: 33 09 01                 a2 = 0x1
  1611: 33 0c 0c                 a5 = 0xc
  1614: 33 0a 34 00 03           a3 = 0x30034
  1619: 33 0b                    a4 = 0
  1621: 0a 02                    ecalli 2 // 'read'
  1623: 33 05 40 00 03           s0 = 0x30040
  1628: 33 09 01                 a2 = 0x1
  1631: 33 0c 0c                 a5 = 0xc
  1634: 82 17 60                 a0 = u64 [sp + 0x60]
  1637: 82 18 50                 a1 = u64 [sp + 0x50]
  1640: 33 0a 40 00 03           a3 = 0x30040
  1645: 33 0b                    a4 = 0
  1647: 0a 02                    ecalli 2 // 'read'
  1649: 39 07 38 00 03           a0 = i32 [0x30038]
  1654: 39 08 34 00 03           a1 = i32 [0x30034]
  1659: 7a 17 78                 u32 [sp + 0x78] = a0
  1662: 39 07 3c 00 03           a0 = i32 [0x3003c]
  1667: 7b 17 60                 u64 [sp + 0x60] = a0
  1670: 34 07 45 00 03           a0 = u8 [0x30045]
  1675: 34 09 44 00 03           a2 = u8 [0x30044]
  1680: 34 0a 46 00 03           a3 = u8 [0x30046]
  1685: 35 0b 47 00 03           a4 = i8 [0x30047]
  1690: 8a 77 08                 i32 a0 = a0 << 0x8
  1693: d4 97 07                 a0 = a0 | a2
  1696: 8a a9 10                 i32 a2 = a3 << 0x10
  1699: 8a ba 18                 i32 a3 = a4 << 0x18
  1702: d4 a9 09                 a2 = a2 | a3
  1705: d4 97 07                 a0 = a0 | a2
  1708: 7a 17 7c                 u32 [sp + 0x7c] = a0
  1711: 34 07 49 00 03           a0 = u8 [0x30049]
  1716: 34 09 48 00 03           a2 = u8 [0x30048]
  1721: 34 0a 4a 00 03           a3 = u8 [0x3004a]
  1726: 34 0b 4b 00 03           a4 = u8 [0x3004b]
  1731: 97 77 08                 a0 = a0 << 0x8
  1734: d4 97 07                 a0 = a0 | a2
  1737: 7b 17 48                 u64 [sp + 0x48] = a0
  1740: 97 aa 10                 a3 = a3 << 0x10
  1743: 97 bb 18                 a4 = a4 << 0x18
  1746: d4 ba 0a                 a3 = a3 | a4
  1749: 7b 1a 40                 u64 [sp + 0x40] = a3
  1752: 7a 18 80 00              u32 [sp + 0x80] = a1
  1756: 95 19 80 00              a2 = sp + 0x80
  1760: 7b 19 a0 00              u64 [sp + 0xa0] = a2
  1764: 33 08 06                 a1 = 0x6
  1767: 7b 18 a8 00              u64 [sp + 0xa8] = a1
  1771: 95 17 68                 a0 = sp + 0x68
  1774: 7b 17 b0 00              u64 [sp + 0xb0] = a0
  1778: 33 07 0a                 a0 = 0xa
  1781: 7b 17 38                 u64 [sp + 0x38] = a0
  1784: 7b 17 b8 00              u64 [sp + 0xb8] = a0
  1788: 7b 19 c0 00              u64 [sp + 0xc0] = a2
  1792: 7b 18 c8 00              u64 [sp + 0xc8] = a1
  1796: 95 17 78                 a0 = sp + 0x78
  1799: 7b 17 d0 00              u64 [sp + 0xd0] = a0
  1803: 7b 18 50                 u64 [sp + 0x50] = a1
  1806: 7b 18 d8 00              u64 [sp + 0xd8] = a1
  1810: 33 07 30 00 01           a0 = 0x10030
  1815: 7b 17 f0 00              u64 [sp + 0xf0] = a0
  1819: 49 21 f8 00 04           u64 [sp + 248] = 0x4
  1824: 49 21 10 01              u64 [sp + 272] = 0
  1828: 95 18 a0 00              a1 = sp + 0xa0
  1832: 7b 18 00 01              u64 [sp + 0x100] = a1
  1836: 49 21 08 01 04           u64 [sp + 264] = 0x4
  1841: 95 17 30 01              a0 = sp + 0x130
  1845: 95 18 f0 00              a1 = sp + 0xf0
  1849: 50 10 20 b7 08           ra = 32, jump @272
      :                          @139 [@dyn 16]
  1854: 82 15 38 01              s0 = u64 [sp + 0x138]
  1858: 82 1b 40 01              a4 = u64 [sp + 0x140]
  1862: 82 16 30 01              s1 = u64 [sp + 0x130]
  1866: 33 07 02                 a0 = 0x2
  1869: 33 08                    a1 = 0
  1871: 33 09                    a2 = 0
  1873: 64 5a                    a3 = s0
  1875: 33 00 22                 ra = 0x22
  1878: 0a 64                    ecalli 100 // 'log'
  1880: 01                       fallthrough
      :                          @140 [@dyn 17]
  1881: 82 17 58                 a0 = u64 [sp + 0x58]
  1884: c8 67 07                 a0 = a0 + s1
  1887: 53 37 00 00 ff 27        jump @146 if a0 <u 4294901760
      :                          @141
  1893: 33 07 e0 00 03           a0 = 0x300e0
  1898: 95 77 00 00 01           a0 = a0 + 0x10000
  1903: 01                       fallthrough
      :                          @142
  1904: 82 78                    a1 = u64 [a0]
  1906: c9 87 09                 a2 = a0 - a1
  1909: ab 59 11                 jump @146 if a2 != s0
      :                          @143
  1912: c9 68 09                 a2 = a1 - s1
  1915: 01                       fallthrough
      :                          @144
  1916: 82 7a                    a3 = u64 [a0]
  1918: ab 8a f2                 jump @142 if a3 != a1
      :                          @145
  1921: 7b 79                    u64 [a0] = a2
  1923: 33 0b                    a4 = 0
  1925: 01                       fallthrough
      :                          @146
  1926: 82 17 48                 a0 = u64 [sp + 0x48]
  1929: 82 18 40                 a1 = u64 [sp + 0x40]
  1932: d4 87 07                 a0 = a0 | a1
  1935: 7b 17 48                 u64 [sp + 0x48] = a0
  1938: 95 19 80 00              a2 = sp + 0x80
  1942: 7b 19 a0 00              u64 [sp + 0xa0] = a2
  1946: 82 18 50                 a1 = u64 [sp + 0x50]
  1949: 7b 18 a8 00              u64 [sp + 0xa8] = a1
  1953: 95 17 70                 a0 = sp + 0x70
  1956: 7b 17 b0 00              u64 [sp + 0xb0] = a0
  1960: 82 17 38                 a0 = u64 [sp + 0x38]
  1963: 7b 17 b8 00              u64 [sp + 0xb8] = a0
  1967: 7b 19 c0 00              u64 [sp + 0xc0] = a2
  1971: 7b 18 c8 00              u64 [sp + 0xc8] = a1
  1975: 95 17 7c                 a0 = sp + 0x7c
  1978: 7b 17 d0 00              u64 [sp + 0xd0] = a0
  1982: 7b 18 d8 00              u64 [sp + 0xd8] = a1
  1986: 33 07 88 00 01           a0 = 0x10088
  1991: 7b 17 f0 00              u64 [sp + 0xf0] = a0
  1995: 49 21 f8 00 04           u64 [sp + 248] = 0x4
  2000: 49 21 10 01              u64 [sp + 272] = 0
  2004: 95 18 a0 00              a1 = sp + 0xa0
  2008: 7b 18 00 01              u64 [sp + 0x100] = a1
  2012: 49 21 08 01 04           u64 [sp + 264] = 0x4
  2017: 95 17 30 01              a0 = sp + 0x130
  2021: 95 18 f0 00              a1 = sp + 0xf0
  2025: 50 10 24 07 08           ra = 36, jump @272
      :                          @147 [@dyn 18]
  2030: 82 15 38 01              s0 = u64 [sp + 0x138]
  2034: 82 1b 40 01              a4 = u64 [sp + 0x140]
  2038: 82 16 30 01              s1 = u64 [sp + 0x130]
  2042: 33 07 02                 a0 = 0x2
  2045: 33 08                    a1 = 0
  2047: 33 09                    a2 = 0
  2049: 64 5a                    a3 = s0
  2051: 33 00 26                 ra = 0x26
  2054: 0a 64                    ecalli 100 // 'log'
  2056: 01                       fallthrough
      :                          @148 [@dyn 19]
  2057: 82 17 58                 a0 = u64 [sp + 0x58]
  2060: c8 67 07                 a0 = a0 + s1
  2063: 53 37 00 00 ff 27        jump @154 if a0 <u 4294901760
      :                          @149
  2069: 33 07 e0 00 03           a0 = 0x300e0
  2074: 95 77 00 00 01           a0 = a0 + 0x10000
  2079: 01                       fallthrough
      :                          @150
  2080: 82 78                    a1 = u64 [a0]
  2082: c9 87 09                 a2 = a0 - a1
  2085: ab 59 11                 jump @154 if a2 != s0
      :                          @151
  2088: c9 68 09                 a2 = a1 - s1
  2091: 01                       fallthrough
      :                          @152
  2092: 82 7a                    a3 = u64 [a0]
  2094: ab 8a f2                 jump @150 if a3 != a1
      :                          @153
  2097: 7b 79                    u64 [a0] = a2
  2099: 33 0b                    a4 = 0
  2101: 01                       fallthrough
      :                          @154
  2102: 81 18 78                 a1 = i32 [sp + 0x78]
  2105: 81 19 7c                 a2 = i32 [sp + 0x7c]
  2108: 80 17 80 00              a0 = u32 [sp + 0x80]
  2112: be 89 09                 i32 a2 = a2 + a1
  2115: 7a 19 84 00              u32 [sp + 0x84] = a2
  2119: 82 18 60                 a1 = u64 [sp + 0x60]
  2122: 82 1a 48                 a3 = u64 [sp + 0x48]
  2125: be 8a 0a                 i32 a3 = a3 + a1
  2128: 7b 17 88 00              u64 [sp + 0x88] = a0
  2132: 97 78 01                 a1 = a0 << 0x1
  2135: 95 88 01                 a1 = a1 + 0x1
  2138: 97 88 20                 a1 = a1 << 0x20
  2141: 98 88 20                 a1 = a1 >> 0x20
  2144: 7b 18 90 00              u64 [sp + 0x90] = a1
  2148: 49 21 20 01 40 9c 00     u64 [sp + 288] = 0x9c40
  2155: 48 21 98 00              u32 [sp + 152] = 0
  2159: 51 07 3d 02              jump @178 if a0 == 0
      :                          @155
  2163: 7b 1a                    u64 [sp] = a3
  2165: 7b 19 08                 u64 [sp + 0x8] = a2
  2168: 33 06                    s1 = 0
  2170: 33 0a                    a3 = 0
  2172: 14 08 ab aa aa aa 00 00 00 00 a1 = 0xaaaaaaab
  2182: ca 87 08                 a1 = a0 * a1
  2185: 98 88 21                 a1 = a1 >> 0x21
  2188: 97 89 01                 a2 = a1 << 0x1
  2191: bf 87 08                 i32 a1 = a0 - a1
  2194: bf 98 08                 i32 a1 = a1 - a2
  2197: 83 89 ff                 i32 a2 = a1 + 0xffffffffffffffff
  2200: 7b 19 20                 u64 [sp + 0x20] = a2
  2203: 86 88 02                 a1 = a1 | 0x2
  2206: 7b 18 18                 u64 [sp + 0x18] = a1
  2209: 33 08 58 00 03           a1 = 0x30058
  2214: 7b 18 40                 u64 [sp + 0x40] = a1
  2217: 33 08 06                 a1 = 0x6
  2220: 7b 18 38                 u64 [sp + 0x38] = a1
  2223: 33 08 0a                 a1 = 0xa
  2226: 7b 18 30                 u64 [sp + 0x30] = a1
  2229: 33 05 e0 00 03           s0 = 0x300e0
  2234: 95 55 00 00 01           s0 = s0 + 0x10000
  2239: 33 08 68 01 01           a1 = 0x10168
  2244: 7b 18 28                 u64 [sp + 0x28] = a1
  2247: 83 77                    i32 a0 = a0 + 0
  2249: 7b 17 10                 u64 [sp + 0x10] = a0
  2252: 28 13                    jump @158
      :                          @156
  2254: 82 16 60                 s1 = u64 [sp + 0x60]
  2257: 82 1a 50                 a3 = u64 [sp + 0x50]
  2260: 01                       fallthrough
      :                          @157
  2261: 83 aa 01                 i32 a3 = a3 + 0x1
  2264: 82 17 10                 a0 = u64 [sp + 0x10]
  2267: aa 7a c7 01              jump @177 if a3 == a0
      :                          @158
  2271: 7a 1a 9c 00              u32 [sp + 0x9c] = a3
  2275: 82 17 18                 a0 = u64 [sp + 0x18]
  2278: 7b 1a 50                 u64 [sp + 0x50] = a3
  2281: 52 17 02 dd 00           jump @167 if a0 != 2
      :                          @159
  2286: 82 17 68                 a0 = u64 [sp + 0x68]
  2289: 82 18 88 00              a1 = u64 [sp + 0x88]
  2293: 82 19 20 01              a2 = u64 [sp + 0x120]
  2297: 82 1a 40                 a3 = u64 [sp + 0x40]
  2300: 0a 0b                    ecalli 11 // 'transfer'
  2302: 7b 17 28 01              u64 [sp + 0x128] = a0
  2306: 83 66 01                 i32 s1 = s1 + 0x1
  2309: 7b 16 60                 u64 [sp + 0x60] = s1
  2312: 7a 16 98 00              u32 [sp + 0x98] = s1
  2316: 95 17 9c 00              a0 = sp + 0x9c
  2320: 7b 17 a0 00              u64 [sp + 0xa0] = a0
  2324: 82 17 38                 a0 = u64 [sp + 0x38]
  2327: 7b 17 a8 00              u64 [sp + 0xa8] = a0
  2331: 95 17 68                 a0 = sp + 0x68
  2334: 7b 17 b0 00              u64 [sp + 0xb0] = a0
  2338: 82 17 30                 a0 = u64 [sp + 0x30]
  2341: 7b 17 b8 00              u64 [sp + 0xb8] = a0
  2345: 95 18 88 00              a1 = sp + 0x88
  2349: 7b 18 c0 00              u64 [sp + 0xc0] = a1
  2353: 7b 17 c8 00              u64 [sp + 0xc8] = a0
  2357: 95 18 20 01              a1 = sp + 0x120
  2361: 7b 18 d0 00              u64 [sp + 0xd0] = a1
  2365: 7b 17 d8 00              u64 [sp + 0xd8] = a0
  2369: 95 18 28 01              a1 = sp + 0x128
  2373: 7b 18 e0 00              u64 [sp + 0xe0] = a1
  2377: 7b 17 e8 00              u64 [sp + 0xe8] = a0
  2381: 82 17 28                 a0 = u64 [sp + 0x28]
  2384: 7b 17 f0 00              u64 [sp + 0xf0] = a0
  2388: 49 21 f8 00 05           u64 [sp + 248] = 0x5
  2393: 49 21 10 01              u64 [sp + 272] = 0
  2397: 95 18 a0 00              a1 = sp + 0xa0
  2401: 7b 18 00 01              u64 [sp + 0x100] = a1
  2405: 49 21 08 01 05           u64 [sp + 264] = 0x5
  2410: 95 17 30 01              a0 = sp + 0x130
  2414: 95 18 f0 00              a1 = sp + 0xf0
  2418: 50 10 28 7e 06           ra = 40, jump @272
      :                          @160 [@dyn 20]
  2423: 82 16 38 01              s1 = u64 [sp + 0x138]
  2427: 82 1b 40 01              a4 = u64 [sp + 0x140]
  2431: 82 17 30 01              a0 = u64 [sp + 0x130]
  2435: 7b 17 48                 u64 [sp + 0x48] = a0
  2438: 33 07 02                 a0 = 0x2
  2441: 33 08                    a1 = 0
  2443: 33 09                    a2 = 0
  2445: 64 6a                    a3 = s1
  2447: 33 00 2a                 ra = 0x2a
  2450: 0a 64                    ecalli 100 // 'log'
  2452: 01                       fallthrough
      :                          @161 [@dyn 21]
  2453: 82 1b 48                 a4 = u64 [sp + 0x48]
  2456: 82 17 58                 a0 = u64 [sp + 0x58]
  2459: c8 b7 07                 a0 = a0 + a4
  2462: 53 37 00 00 ff 21        jump @166 if a0 <u 4294901760
      :                          @162
  2468: 82 57                    a0 = u64 [s0]
  2470: c9 75 08                 a1 = s0 - a0
  2473: ab 68 16                 jump @166 if a1 != s1
      :                          @163
  2476: c9 b7 08                 a1 = a0 - a4
  2479: 01                       fallthrough
      :                          @164
  2480: 82 59                    a2 = u64 [s0]
  2482: ab 79 f2                 jump @162 if a2 != a0
      :                          @165
  2485: 7b 58                    u64 [s0] = a1
  2487: 82 16 60                 s1 = u64 [sp + 0x60]
  2490: 82 1a 50                 a3 = u64 [sp + 0x50]
  2493: 28 09                    jump @167
      :                          @166
  2495: 82 16 60                 s1 = u64 [sp + 0x60]
  2498: 82 1a 50                 a3 = u64 [sp + 0x50]
  2501: 01                       fallthrough
      :                          @167
  2502: 82 17 20                 a0 = u64 [sp + 0x20]
  2505: 55 17 02 0c ff           jump @157 if a0 >=u 2
      :                          @168
  2510: 82 17 70                 a0 = u64 [sp + 0x70]
  2513: 82 18 90 00              a1 = u64 [sp + 0x90]
  2517: 82 19 20 01              a2 = u64 [sp + 0x120]
  2521: 82 1a 40                 a3 = u64 [sp + 0x40]
  2524: 0a 0b                    ecalli 11 // 'transfer'
  2526: 7b 17 28 01              u64 [sp + 0x128] = a0
  2530: 83 66 01                 i32 s1 = s1 + 0x1
  2533: 7b 16 60                 u64 [sp + 0x60] = s1
  2536: 7a 16 98 00              u32 [sp + 0x98] = s1
  2540: 95 17 9c 00              a0 = sp + 0x9c
  2544: 7b 17 a0 00              u64 [sp + 0xa0] = a0
  2548: 82 17 38                 a0 = u64 [sp + 0x38]
  2551: 7b 17 a8 00              u64 [sp + 0xa8] = a0
  2555: 95 17 70                 a0 = sp + 0x70
  2558: 7b 17 b0 00              u64 [sp + 0xb0] = a0
  2562: 82 17 30                 a0 = u64 [sp + 0x30]
  2565: 7b 17 b8 00              u64 [sp + 0xb8] = a0
  2569: 95 18 90 00              a1 = sp + 0x90
  2573: 7b 18 c0 00              u64 [sp + 0xc0] = a1
  2577: 7b 17 c8 00              u64 [sp + 0xc8] = a0
  2581: 95 18 20 01              a1 = sp + 0x120
  2585: 7b 18 d0 00              u64 [sp + 0xd0] = a1
  2589: 7b 17 d8 00              u64 [sp + 0xd8] = a0
  2593: 95 18 28 01              a1 = sp + 0x128
  2597: 7b 18 e0 00              u64 [sp + 0xe0] = a1
  2601: 7b 17 e8 00              u64 [sp + 0xe8] = a0
  2605: 82 17 28                 a0 = u64 [sp + 0x28]
  2608: 7b 17 f0 00              u64 [sp + 0xf0] = a0
  2612: 49 21 f8 00 05           u64 [sp + 248] = 0x5
  2617: 49 21 10 01              u64 [sp + 272] = 0
  2621: 95 18 a0 00              a1 = sp + 0xa0
  2625: 7b 18 00 01              u64 [sp + 0x100] = a1
  2629: 49 21 08 01 05           u64 [sp + 264] = 0x5
  2634: 95 17 30 01              a0 = sp + 0x130
  2638: 95 18 f0 00              a1 = sp + 0xf0
  2642: 50 10 2c 9e 05           ra = 44, jump @272
      :                          @169 [@dyn 22]
  2647: 82 16 38 01              s1 = u64 [sp + 0x138]
  2651: 82 1b 40 01              a4 = u64 [sp + 0x140]
  2655: 82 17 30 01              a0 = u64 [sp + 0x130]
  2659: 7b 17 48                 u64 [sp + 0x48] = a0
  2662: 33 07 02                 a0 = 0x2
  2665: 33 08                    a1 = 0
  2667: 33 09                    a2 = 0
  2669: 64 6a                    a3 = s1
  2671: 33 00 2e                 ra = 0x2e
  2674: 0a 64                    ecalli 100 // 'log'
  2676: 01                       fallthrough
      :                          @170 [@dyn 23]
  2677: 82 1b 48                 a4 = u64 [sp + 0x48]
  2680: 82 17 58                 a0 = u64 [sp + 0x58]
  2683: c8 b7 07                 a0 = a0 + a4
  2686: 53 37 00 00 ff 50 fe     jump @156 if a0 <u 4294901760
      :                          @171
  2693: 82 57                    a0 = u64 [s0]
  2695: c9 75 08                 a1 = s0 - a0
  2698: ab 68 44 fe              jump @156 if a1 != s1
      :                          @172
  2702: c9 b7 08                 a1 = a0 - a4
  2705: 01                       fallthrough
      :                          @173
  2706: 82 59                    a2 = u64 [s0]
  2708: ab 79 f1                 jump @171 if a2 != a0
      :                          @174
  2711: 7b 58                    u64 [s0] = a1
  2713: 33 0a                    a3 = 0
  2715: 01                       fallthrough
      :                          @175
  2716: ab 79 e9                 jump @171 if a2 != a0
      :                          @176
  2719: 28 2f fe                 jump @156
      :                          @177
  2722: 81 17 80 00              a0 = i32 [sp + 0x80]
  2726: 82 19 08                 a2 = u64 [sp + 0x8]
  2729: 82 1a                    a3 = u64 [sp]
  2731: 01                       fallthrough
      :                          @178
  2732: 3d 07 4c 00 03           u32 [0x3004c] = a0
  2737: 33 07 4c 00 03           a0 = 0x3004c
  2742: 3d 09 50 00 03           u32 [0x30050] = a2
  2747: 7b 17 50                 u64 [sp + 0x50] = a0
  2750: 3d 0a 54 00 03           u32 [0x30054] = a3
  2755: 95 17 80 00              a0 = sp + 0x80
  2759: 7b 17 f0 00              u64 [sp + 0xf0] = a0
  2763: 33 07 06                 a0 = 0x6
  2766: 7b 17 f8 00              u64 [sp + 0xf8] = a0
  2770: 95 18 84 00              a1 = sp + 0x84
  2774: 7b 18 00 01              u64 [sp + 0x100] = a1
  2778: 7b 17 60                 u64 [sp + 0x60] = a0
  2781: 7b 17 08 01              u64 [sp + 0x108] = a0
  2785: 33 07 c8 00 01           a0 = 0x100c8
  2790: 7b 17 a0 00              u64 [sp + 0xa0] = a0
  2794: 49 21 a8 00 02           u64 [sp + 168] = 0x2
  2799: 49 21 c0 00              u64 [sp + 192] = 0
  2803: 95 18 f0 00              a1 = sp + 0xf0
  2807: 7b 18 b0 00              u64 [sp + 0xb0] = a1
  2811: 49 21 b8 00 02           u64 [sp + 184] = 0x2
  2816: 95 17 30 01              a0 = sp + 0x130
  2820: 95 18 a0 00              a1 = sp + 0xa0
  2824: 50 10 30 e8 04           ra = 48, jump @272
      :                          @179 [@dyn 24]
  2829: 82 16 38 01              s1 = u64 [sp + 0x138]
  2833: 82 1b 40 01              a4 = u64 [sp + 0x140]
  2837: 82 15 30 01              s0 = u64 [sp + 0x130]
  2841: 33 07 02                 a0 = 0x2
  2844: 33 08                    a1 = 0
  2846: 33 09                    a2 = 0
  2848: 64 6a                    a3 = s1
  2850: 33 00 32                 ra = 0x32
  2853: 0a 64                    ecalli 100 // 'log'
  2855: 01                       fallthrough
      :                          @180 [@dyn 25]
  2856: 82 17 58                 a0 = u64 [sp + 0x58]
  2859: c8 57 07                 a0 = a0 + s0
  2862: 53 37 00 00 ff 25        jump @186 if a0 <u 4294901760
      :                          @181
  2868: 33 07 e0 00 03           a0 = 0x300e0
  2873: 95 77 00 00 01           a0 = a0 + 0x10000
  2878: 01                       fallthrough
      :                          @182
  2879: 82 78                    a1 = u64 [a0]
  2881: c9 87 09                 a2 = a0 - a1
  2884: ab 69 0f                 jump @186 if a2 != s1
      :                          @183
  2887: c9 58 09                 a2 = a1 - s0
  2890: 01                       fallthrough
      :                          @184
  2891: 82 7a                    a3 = u64 [a0]
  2893: ab 8a f2                 jump @182 if a3 != a1
      :                          @185
  2896: 7b 79                    u64 [a0] = a2
  2898: 01                       fallthrough
      :                          @186
  2899: 33 07 10 00 03           a0 = 0x30010
  2904: 33 08 01                 a1 = 0x1
  2907: 33 0a 0c                 a3 = 0xc
  2910: 82 19 50                 a2 = u64 [sp + 0x50]
  2913: 0a 03                    ecalli 3 // 'write'
  2915: 95 17 80 00              a0 = sp + 0x80
  2919: 7b 17 a0 00              u64 [sp + 0xa0] = a0
  2923: 82 17 60                 a0 = u64 [sp + 0x60]
  2926: 7b 17 a8 00              u64 [sp + 0xa8] = a0
  2930: 95 18 84 00              a1 = sp + 0x84
  2934: 7b 18 b0 00              u64 [sp + 0xb0] = a1
  2938: 7b 17 b8 00              u64 [sp + 0xb8] = a0
  2942: 95 17 98 00              a0 = sp + 0x98
  2946: 7b 17 c0 00              u64 [sp + 0xc0] = a0
  2950: 33 07 02                 a0 = 0x2
  2953: 7b 17 c8 00              u64 [sp + 0xc8] = a0
  2957: 33 07 08 01 01           a0 = 0x10108
  2962: 7b 17 f0 00              u64 [sp + 0xf0] = a0
  2966: 49 21 f8 00 03           u64 [sp + 248] = 0x3
  2971: 49 21 10 01              u64 [sp + 272] = 0
  2975: 95 18 a0 00              a1 = sp + 0xa0
  2979: 7b 18 00 01              u64 [sp + 0x100] = a1
  2983: 49 21 08 01 03           u64 [sp + 264] = 0x3
  2988: 95 17 30 01              a0 = sp + 0x130
  2992: 95 18 f0 00              a1 = sp + 0xf0
  2996: 50 10 34 3c 04           ra = 52, jump @272
      :                          @187 [@dyn 26]
  3001: 82 15 38 01              s0 = u64 [sp + 0x138]
  3005: 82 1b 40 01              a4 = u64 [sp + 0x140]
  3009: 82 16 30 01              s1 = u64 [sp + 0x130]
  3013: 33 07 02                 a0 = 0x2
  3016: 33 08                    a1 = 0
  3018: 33 09                    a2 = 0
  3020: 64 5a                    a3 = s0
  3022: 33 00 36                 ra = 0x36
  3025: 0a 64                    ecalli 100 // 'log'
  3027: 01                       fallthrough
      :                          @188 [@dyn 27]
  3028: 82 17 58                 a0 = u64 [sp + 0x58]
  3031: c8 67 07                 a0 = a0 + s1
  3034: 53 37 00 00 ff 27        jump @194 if a0 <u 4294901760
      :                          @189
  3040: 33 07 e0 00 03           a0 = 0x300e0
  3045: 95 77 00 00 01           a0 = a0 + 0x10000
  3050: 01                       fallthrough
      :                          @190
  3051: 82 78                    a1 = u64 [a0]
  3053: c9 87 09                 a2 = a0 - a1
  3056: ab 59 11                 jump @194 if a2 != s0
      :                          @191
  3059: c9 68 09                 a2 = a1 - s1
  3062: 01                       fallthrough
      :                          @192
  3063: 82 7a                    a3 = u64 [a0]
  3065: ab 8a f2                 jump @190 if a3 != a1
      :                          @193
  3068: 7b 79                    u64 [a0] = a2
  3070: 33 0b                    a4 = 0
  3072: 01                       fallthrough
      :                          @194
  3073: 33 05 12 00 03           s0 = 0x30012
  3078: 33 08 4c 00 03           a1 = 0x3004c
  3083: 33 09 0c                 a2 = 0xc
  3086: 33 07 12 00 03           a0 = 0x30012
  3091: 50 10 38 51 06           ra = 56, jump @322
      :                          @195 [@dyn 28]
  3096: 64 57                    a0 = s0
  3098: 0a 10                    ecalli 16 // 'oyield'
  3100: 33 08 20                 a1 = 0x20
  3103: 28 7c f9                 jump @124
      :                          @196
  3106: 00                       trap
      :                          @197
  3107: 00                       trap
      :                          @198
  3108: 00                       trap
      :                          @199 [export #2: 'on_transfer']
  3109: 95 11 e0 fe              sp = sp + 0xfffffffffffffee0
  3113: 7b 10 18 01              u64 [sp + 0x118] = ra
  3117: 7b 15 10 01              u64 [sp + 0x110] = s0
  3121: 7b 16 08 01              u64 [sp + 0x108] = s1
  3125: 49 11 08 ff ff fe        u64 [sp + 8] = 0xfffffffffffeffff
  3131: 0a                       ecalli 0 // 'gas'
  3132: 7b 17 10                 u64 [sp + 0x10] = a0
  3135: 7b 17 18                 u64 [sp + 0x18] = a0
  3138: 46 11 27 04              u8 [sp + 39] = 0x4
  3142: 7b 17 28                 u64 [sp + 0x28] = a0
  3145: 95 17 27                 a0 = sp + 0x27
  3148: 33 08 01                 a1 = 0x1
  3151: 95 19 28                 a2 = sp + 0x28
  3154: 33 0a 08                 a3 = 0x8
  3157: 0a 03                    ecalli 3 // 'write'
  3159: 95 17 27                 a0 = sp + 0x27
  3162: 7b 17 78                 u64 [sp + 0x78] = a0
  3165: 33 07 8c 00              a0 = 0x8c
  3169: 7b 17 80 00              u64 [sp + 0x80] = a0
  3173: 95 17 18                 a0 = sp + 0x18
  3176: 7b 17 88 00              u64 [sp + 0x88] = a0
  3180: 49 21 98 00 02           u64 [sp + 152] = 0x2
  3185: 49 21 a8 00 02           u64 [sp + 168] = 0x2
  3190: 49 21 b8 00              u64 [sp + 184] = 0
  3194: 14 07 20 00 00 00 10 00 00 00 a0 = 0x1000000020
  3204: 7b 17 c0 00              u64 [sp + 0xc0] = a0
  3208: 46 21 c8 00 03           u8 [sp + 200] = 0x3
  3213: 49 21 d0 00 02           u64 [sp + 208] = 0x2
  3218: 49 21 e0 00 02           u64 [sp + 224] = 0x2
  3223: 49 21 f0 00 01           u64 [sp + 240] = 0x1
  3228: 7b 17 f8 00              u64 [sp + 0xf8] = a0
  3232: 33 07 0a                 a0 = 0xa
  3235: 7b 17                    u64 [sp] = a0
  3237: 7b 17 90 00              u64 [sp + 0x90] = a0
  3241: 46 21 00 01 03           u8 [sp + 256] = 0x3
  3246: 33 07 b0 03 01           a0 = 0x103b0
  3251: 7b 17 48                 u64 [sp + 0x48] = a0
  3254: 49 11 50 02              u64 [sp + 80] = 0x2
  3258: 95 17 98 00              a0 = sp + 0x98
  3262: 7b 17 68                 u64 [sp + 0x68] = a0
  3265: 49 11 70 02              u64 [sp + 112] = 0x2
  3269: 95 17 78                 a0 = sp + 0x78
  3272: 7b 17 58                 u64 [sp + 0x58] = a0
  3275: 49 11 60 02              u64 [sp + 96] = 0x2
  3279: 95 17 30                 a0 = sp + 0x30
  3282: 95 18 48                 a1 = sp + 0x48
  3285: 50 10 3a 1b 03           ra = 58, jump @272
      :                          @200 [@dyn 29]
  3290: 82 15 38                 s0 = u64 [sp + 0x38]
  3293: 82 1b 40                 a4 = u64 [sp + 0x40]
  3296: 82 16 30                 s1 = u64 [sp + 0x30]
  3299: 33 07 02                 a0 = 0x2
  3302: 33 08                    a1 = 0
  3304: 33 09                    a2 = 0
  3306: 64 5a                    a3 = s0
  3308: 33 00 3c                 ra = 0x3c
  3311: 0a 64                    ecalli 100 // 'log'
  3313: 01                       fallthrough
      :                          @201 [@dyn 30]
  3314: 82 17 08                 a0 = u64 [sp + 0x8]
  3317: c8 67 07                 a0 = a0 + s1
  3320: 53 37 00 00 ff 27        jump @207 if a0 <u 4294901760
      :                          @202
  3326: 33 07 e0 00 03           a0 = 0x300e0
  3331: 95 77 00 00 01           a0 = a0 + 0x10000
  3336: 01                       fallthrough
      :                          @203
  3337: 82 78                    a1 = u64 [a0]
  3339: c9 87 09                 a2 = a0 - a1
  3342: ab 59 11                 jump @207 if a2 != s0
      :                          @204
  3345: c9 68 09                 a2 = a1 - s1
  3348: 01                       fallthrough
      :                          @205
  3349: 82 7a                    a3 = u64 [a0]
  3351: ab 8a f2                 jump @203 if a3 != a1
      :                          @206
  3354: 7b 79                    u64 [a0] = a2
  3356: 33 0b                    a4 = 0
  3358: 01                       fallthrough
      :                          @207
  3359: 95 17 10                 a0 = sp + 0x10
  3362: 7b 17 78                 u64 [sp + 0x78] = a0
  3365: 82 17                    a0 = u64 [sp]
  3367: 7b 17 80 00              u64 [sp + 0x80] = a0
  3371: 33 07 f0 01 01           a0 = 0x101f0
  3376: 7b 17 98 00              u64 [sp + 0x98] = a0
  3380: 49 21 a0 00 02           u64 [sp + 160] = 0x2
  3385: 49 21 b8 00              u64 [sp + 184] = 0
  3389: 95 17 78                 a0 = sp + 0x78
  3392: 7b 17 a8 00              u64 [sp + 0xa8] = a0
  3396: 49 21 b0 00 01           u64 [sp + 176] = 0x1
  3401: 95 17 48                 a0 = sp + 0x48
  3404: 95 18 98 00              a1 = sp + 0x98
  3408: 50 10 3e a0 02           ra = 62, jump @272
      :                          @208 [@dyn 31]
  3413: 82 15 50                 s0 = u64 [sp + 0x50]
  3416: 82 1b 58                 a4 = u64 [sp + 0x58]
  3419: 82 16 48                 s1 = u64 [sp + 0x48]
  3422: 33 07 02                 a0 = 0x2
  3425: 33 08                    a1 = 0
  3427: 33 09                    a2 = 0
  3429: 64 5a                    a3 = s0
  3431: 33 00 40                 ra = 0x40
  3434: 0a 64                    ecalli 100 // 'log'
  3436: 01                       fallthrough
      :                          @209 [@dyn 32]
  3437: 82 17 08                 a0 = u64 [sp + 0x8]
  3440: c8 67 07                 a0 = a0 + s1
  3443: 53 37 00 00 ff 27        jump @215 if a0 <u 4294901760
      :                          @210
  3449: 33 07 e0 00 03           a0 = 0x300e0
  3454: 95 77 00 00 01           a0 = a0 + 0x10000
  3459: 01                       fallthrough
      :                          @211
  3460: 82 78                    a1 = u64 [a0]
  3462: c9 87 09                 a2 = a0 - a1
  3465: ab 59 11                 jump @215 if a2 != s0
      :                          @212
  3468: c9 68 09                 a2 = a1 - s1
  3471: 01                       fallthrough
      :                          @213
  3472: 82 7a                    a3 = u64 [a0]
  3474: ab 8a f2                 jump @211 if a3 != a1
      :                          @214
  3477: 7b 79                    u64 [a0] = a2
  3479: 33 0b                    a4 = 0
  3481: 01                       fallthrough
      :                          @215
  3482: 33 07 00 00 01           a0 = 0x10000
  3487: 33 08                    a1 = 0
  3489: 82 10 18 01              ra = u64 [sp + 0x118]
  3493: 82 15 10 01              s0 = u64 [sp + 0x110]
  3497: 82 16 08 01              s1 = u64 [sp + 0x108]
  3501: 95 11 20 01              sp = sp + 0x120
  3505: 32 00                    ret
      :                          @216
  3507: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  3510: 7b 10 40                 u64 [sp + 0x40] = ra
  3513: 7b 15 38                 u64 [sp + 0x38] = s0
  3516: 7b 16 30                 u64 [sp + 0x30] = s1
  3519: c8 89 09                 a2 = a2 + a1
  3522: ac 89 52                 jump @224 if a2 <u a1
      :                          @217
  3525: 64 75                    s0 = a0
  3527: 82 77                    a0 = u64 [a0]
  3529: 97 78 01                 a1 = a0 << 0x1
  3532: 33 0a 08                 a3 = 0x8
  3535: e4 a9 09                 a2 = maxu(a2, a3)
  3538: e4 98 06                 s1 = maxu(a1, a2)
  3541: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  3544: 98 88 3f                 a1 = a1 >> 0x3f
  3547: 51 07 12                 jump @219 if a0 == 0
      :                          @218
  3550: 82 59 08                 a2 = u64 [s0 + 0x8]
  3553: 7b 19 18                 u64 [sp + 0x18] = a2
  3556: 49 11 20 01              u64 [sp + 32] = 0x1
  3560: 7b 17 28                 u64 [sp + 0x28] = a0
  3563: 28 06                    jump @220
      :                          @219
  3565: 49 11 20                 u64 [sp + 32] = 0
  3568: 01                       fallthrough
      :                          @220
  3569: 64 17                    a0 = sp
  3571: 95 1a 18                 a3 = sp + 0x18
  3574: 64 69                    a2 = s1
  3576: 50 10 42 32              ra = 66, jump @228
      :                          @221 [@dyn 33]
  3580: 82 18                    a1 = u64 [sp]
  3582: 82 17 08                 a0 = u64 [sp + 0x8]
  3585: 51 08 14                 jump @225 if a1 == 0
      :                          @222
  3588: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  3598: aa 87 0d                 jump @226 if a0 == a1
      :                          @223
  3601: 52 07 18                 jump @227 if a0 != 0
      :                          @224
  3604: 00                       trap
      :                          @225
  3605: 7b 57 08                 u64 [s0 + 0x8] = a0
  3608: 7b 56                    u64 [s0] = s1
  3610: 01                       fallthrough
      :                          @226
  3611: 82 10 40                 ra = u64 [sp + 0x40]
  3614: 82 15 38                 s0 = u64 [sp + 0x38]
  3617: 82 16 30                 s1 = u64 [sp + 0x30]
  3620: 95 11 48                 sp = sp + 0x48
  3623: 32 00                    ret
      :                          @227
  3625: 00                       trap
      :                          @228
  3626: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  3629: 7b 10 30                 u64 [sp + 0x30] = ra
  3632: 7b 15 28                 u64 [sp + 0x28] = s0
  3635: 7b 16 20                 u64 [sp + 0x20] = s1
  3638: 64 95                    s0 = a2
  3640: 64 72                    t0 = a0
  3642: 51 08 79                 jump @238 if a1 == 0
      :                          @229
  3645: 82 a7 08                 a0 = u64 [a3 + 0x8]
  3648: 51 07 7c                 jump @239 if a0 == 0
      :                          @230
  3651: 82 a9 10                 a2 = u64 [a3 + 0x10]
  3654: 51 09 aa 00              jump @246 if a2 == 0
      :                          @231
  3658: 82 a8                    a1 = u64 [a3]
  3660: 33 06 e0 00 03           s1 = 0x300e0
  3665: 33 03 00 00 01           t1 = 0x10000
  3670: c8 36 06                 s1 = s1 + t1
  3673: 01                       fallthrough
      :                          @232
  3674: 82 6a                    a3 = u64 [s1]
  3676: c8 5a 07                 a0 = a3 + s0
  3679: ac a7 cf 00              jump @252 if a0 <u a3
      :                          @233
  3683: 95 7b 01                 a4 = a0 + 0x1
  3686: 88 bc 01                 a5 = a4 <u 0x1
  3689: d8 b3 0b                 a4 = t1 <u a4
  3692: d4 cb 0b                 a4 = a4 | a5
  3695: 52 0b bf 00              jump @252 if a4 != 0
      :                          @234
  3699: 82 6b                    a4 = u64 [s1]
  3701: ab ab e5                 jump @232 if a4 != a3
      :                          @235
  3704: 7b 67                    u64 [s1] = a0
  3706: 33 0c                    a5 = 0
  3708: 7b 12 18                 u64 [sp + 0x18] = t0
  3711: 33 0a e0 00 03           a3 = 0x300e0
  3716: 33 0b 00 00 01           a4 = 0x10000
  3721: 7b 1a                    u64 [sp] = a3
  3723: c8 ba 0a                 a3 = a3 + a4
  3726: c9 7a 07                 a0 = a3 - a0
  3729: 7b 17 10                 u64 [sp + 0x10] = a0
  3732: 7b 18 08                 u64 [sp + 0x8] = a1
  3735: 64 96                    s1 = a2
  3737: 50 10 44 cb 03           ra = 68, jump @322
      :                          @236 [@dyn 34]
  3742: 54 36 00 00 01 98 00     jump @253 if s1 <=u 65536
      :                          @237
  3749: 82 12 18                 t0 = u64 [sp + 0x18]
  3752: 82 18 10                 a1 = u64 [sp + 0x10]
  3755: 33 07                    a0 = 0
  3757: 7b 28 08                 u64 [t0 + 0x8] = a1
  3760: 28 b5 00                 jump @259
      :                          @238
  3763: 49 12 08                 u64 [t0 + 8] = 0
  3766: 33 07 01                 a0 = 0x1
  3769: 28 ac 00                 jump @259
      :                          @239
  3772: 33 09 e0 00 03           a2 = 0x300e0
  3777: 33 07 00 00 01           a0 = 0x10000
  3782: c8 79 09                 a2 = a2 + a0
  3785: 01                       fallthrough
      :                          @240
  3786: 82 9a                    a3 = u64 [a2]
  3788: c8 5a 08                 a1 = a3 + s0
  3791: ac a8 5f                 jump @252 if a1 <u a3
      :                          @241
  3794: 95 8b 01                 a4 = a1 + 0x1
  3797: 88 bc 01                 a5 = a4 <u 0x1
  3800: d8 b7 0b                 a4 = a0 <u a4
  3803: d4 cb 0b                 a4 = a4 | a5
  3806: 52 0b 50                 jump @252 if a4 != 0
      :                          @242
  3809: 82 9b                    a4 = u64 [a2]
  3811: ab ab e7                 jump @240 if a4 != a3
      :                          @243
  3814: 7b 98                    u64 [a2] = a1
  3816: 33 0c                    a5 = 0
  3818: 01                       fallthrough
      :                          @244
  3819: ab ab df                 jump @240 if a4 != a3
      :                          @245
  3822: 28 31                    jump @251
      :                          @246
  3824: 33 09 e0 00 03           a2 = 0x300e0
  3829: 33 07 00 00 01           a0 = 0x10000
  3834: c8 79 09                 a2 = a2 + a0
  3837: 01                       fallthrough
      :                          @247
  3838: 82 9a                    a3 = u64 [a2]
  3840: c8 5a 08                 a1 = a3 + s0
  3843: ac a8 2b                 jump @252 if a1 <u a3
      :                          @248
  3846: 95 8b 01                 a4 = a1 + 0x1
  3849: 88 bc 01                 a5 = a4 <u 0x1
  3852: d8 b7 0b                 a4 = a0 <u a4
  3855: d4 cb 0b                 a4 = a4 | a5
  3858: 52 0b 1c                 jump @252 if a4 != 0
      :                          @249
  3861: 82 9b                    a4 = u64 [a2]
  3863: ab ab e7                 jump @247 if a4 != a3
      :                          @250
  3866: 7b 98                    u64 [a2] = a1
  3868: 33 0c                    a5 = 0
  3870: 01                       fallthrough
      :                          @251
  3871: 33 07 e0 00 04           a0 = 0x400e0
  3876: c9 87 08                 a1 = a0 - a1
  3879: 33 07                    a0 = 0
  3881: 7b 28 08                 u64 [t0 + 0x8] = a1
  3884: 28 39                    jump @259
      :                          @252
  3886: 33 07 01                 a0 = 0x1
  3889: 7b 27 08                 u64 [t0 + 0x8] = a0
  3892: 28 31                    jump @259
      :                          @253
  3894: 64 6c                    a5 = s1
  3896: 82 17                    a0 = u64 [sp]
  3898: 95 77 00 00 01           a0 = a0 + 0x10000
  3903: 82 12 18                 t0 = u64 [sp + 0x18]
  3906: 82 16 08                 s1 = u64 [sp + 0x8]
  3909: 01                       fallthrough
      :                          @254
  3910: 82 78                    a1 = u64 [a0]
  3912: c9 87 09                 a2 = a0 - a1
  3915: ab 69 11                 jump @258 if a2 != s1
      :                          @255
  3918: c9 c8 09                 a2 = a1 - a5
  3921: 01                       fallthrough
      :                          @256
  3922: 82 7a                    a3 = u64 [a0]
  3924: ab 8a f2                 jump @254 if a3 != a1
      :                          @257
  3927: 7b 79                    u64 [a0] = a2
  3929: 33 0b                    a4 = 0
  3931: 01                       fallthrough
      :                          @258
  3932: 82 18 10                 a1 = u64 [sp + 0x10]
  3935: 33 07                    a0 = 0
  3937: 7b 28 08                 u64 [t0 + 0x8] = a1
  3940: 01                       fallthrough
      :                          @259
  3941: 7b 25 10                 u64 [t0 + 0x10] = s0
  3944: 7b 27                    u64 [t0] = a0
  3946: 82 10 30                 ra = u64 [sp + 0x30]
  3949: 82 15 28                 s0 = u64 [sp + 0x28]
  3952: 82 16 20                 s1 = u64 [sp + 0x20]
  3955: 95 11 38                 sp = sp + 0x38
  3958: 32 00                    ret
      :                          @260
  3960: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  3963: 7b 10 40                 u64 [sp + 0x40] = ra
  3966: 7b 15 38                 u64 [sp + 0x38] = s0
  3969: 7b 16 30                 u64 [sp + 0x30] = s1
  3972: 95 88 01                 a1 = a1 + 0x1
  3975: 51 08 53                 jump @268 if a1 == 0
      :                          @261
  3978: 64 75                    s0 = a0
  3980: 82 77                    a0 = u64 [a0]
  3982: 97 79 01                 a2 = a0 << 0x1
  3985: 33 0a 08                 a3 = 0x8
  3988: e4 a8 08                 a1 = maxu(a1, a3)
  3991: e4 89 06                 s1 = maxu(a2, a1)
  3994: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  3997: 98 88 3f                 a1 = a1 >> 0x3f
  4000: 51 07 12                 jump @263 if a0 == 0
      :                          @262
  4003: 82 59 08                 a2 = u64 [s0 + 0x8]
  4006: 7b 19 18                 u64 [sp + 0x18] = a2
  4009: 49 11 20 01              u64 [sp + 32] = 0x1
  4013: 7b 17 28                 u64 [sp + 0x28] = a0
  4016: 28 06                    jump @264
      :                          @263
  4018: 49 11 20                 u64 [sp + 32] = 0
  4021: 01                       fallthrough
      :                          @264
  4022: 64 17                    a0 = sp
  4024: 95 1a 18                 a3 = sp + 0x18
  4027: 64 69                    a2 = s1
  4029: 50 10 46 6d fe           ra = 70, jump @228
      :                          @265 [@dyn 35]
  4034: 82 18                    a1 = u64 [sp]
  4036: 82 17 08                 a0 = u64 [sp + 0x8]
  4039: 51 08 14                 jump @269 if a1 == 0
      :                          @266
  4042: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  4052: aa 87 0d                 jump @270 if a0 == a1
      :                          @267
  4055: 52 07 18                 jump @271 if a0 != 0
      :                          @268
  4058: 00                       trap
      :                          @269
  4059: 7b 57 08                 u64 [s0 + 0x8] = a0
  4062: 7b 56                    u64 [s0] = s1
  4064: 01                       fallthrough
      :                          @270
  4065: 82 10 40                 ra = u64 [sp + 0x40]
  4068: 82 15 38                 s0 = u64 [sp + 0x38]
  4071: 82 16 30                 s1 = u64 [sp + 0x30]
  4074: 95 11 48                 sp = sp + 0x48
  4077: 32 00                    ret
      :                          @271
  4079: 00                       trap
      :                          @272
  4080: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  4083: 7b 10 30                 u64 [sp + 0x30] = ra
  4086: 7b 15 28                 u64 [sp + 0x28] = s0
  4089: 7b 16 20                 u64 [sp + 0x20] = s1
  4092: 64 89                    a2 = a1
  4094: 82 8a 08                 a3 = u64 [a1 + 0x8]
  4097: 64 75                    s0 = a0
  4099: 51 0a 35                 jump @277 if a3 == 0
      :                          @273
  4102: 82 98                    a1 = u64 [a2]
  4104: 33 07                    a0 = 0
  4106: 95 8b 08                 a4 = a1 + 0x8
  4109: 01                       fallthrough
      :                          @274
  4110: 82 bc                    a5 = u64 [a4]
  4112: c8 c7 07                 a0 = a0 + a5
  4115: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  4118: 95 bb 10                 a4 = a4 + 0x10
  4121: 52 0a f5                 jump @274 if a3 != 0
      :                          @275
  4124: 82 9a 18                 a3 = u64 [a2 + 0x18]
  4127: 51 0a 24                 jump @279 if a3 == 0
      :                          @276
  4130: 82 88 08                 a1 = u64 [a1 + 0x8]
  4133: 8e 88                    a1 = a1 >u 0
  4135: 88 7a 10                 a3 = a0 <u 0x10
  4138: 85 aa 01                 a3 = a3 ^ 0x1
  4141: d4 a8 08                 a1 = a1 | a3
  4144: 89 7a                    a3 = a0 <s 0
  4146: e0 a8 08                 a1 = a1 & ~a3
  4149: 52 08 0a                 jump @278 if a1 != 0
      :                          @277
  4152: 33 07                    a0 = 0
  4154: 33 08 01                 a1 = 0x1
  4157: 28 4a                    jump @287
      :                          @278
  4159: 97 77 01                 a0 = a0 << 0x1
  4162: 01                       fallthrough
      :                          @279
  4163: 51 07 40                 jump @286 if a0 == 0
      :                          @280
  4166: 57 07 78                 jump @292 if a0 <s 0
      :                          @281
  4169: 64 52                    t0 = s0
  4171: 33 0b e0 00 03           a4 = 0x300e0
  4176: 33 08 00 00 01           a1 = 0x10000
  4181: c8 8b 0b                 a4 = a4 + a1
  4184: 01                       fallthrough
      :                          @282
  4185: 82 bc                    a5 = u64 [a4]
  4187: c8 7c 0a                 a3 = a5 + a0
  4190: ac ca 5e                 jump @290 if a3 <u a5
      :                          @283
  4193: 95 a5 01                 s0 = a3 + 0x1
  4196: 88 56 01                 s1 = s0 <u 0x1
  4199: d8 58 05                 s0 = a1 <u s0
  4202: d4 65 05                 s0 = s0 | s1
  4205: 52 05 4f                 jump @290 if s0 != 0
      :                          @284
  4208: 82 b6                    s1 = u64 [a4]
  4210: ab c6 e7                 jump @282 if s1 != a5
      :                          @285
  4213: 7b ba                    u64 [a4] = a3
  4215: 33 08 e0 00 04           a1 = 0x400e0
  4220: c9 a8 08                 a1 = a1 - a3
  4223: 64 25                    s0 = t0
  4225: 28 06                    jump @287
      :                          @286
  4227: 33 08 01                 a1 = 0x1
  4230: 01                       fallthrough
      :                          @287
  4231: 7b 17                    u64 [sp] = a0
  4233: 7b 18 08                 u64 [sp + 0x8] = a1
  4236: 49 11 10                 u64 [sp + 16] = 0
  4239: 33 08 10 02 01           a1 = 0x10210
  4244: 64 17                    a0 = sp
  4246: 50 10 48 3a 06           ra = 72, jump @407
      :                          @288 [@dyn 36]
  4251: 52 07 22                 jump @291 if a0 != 0
      :                          @289
  4254: 82 17 10                 a0 = u64 [sp + 0x10]
  4257: 82 18 08                 a1 = u64 [sp + 0x8]
  4260: 82 19                    a2 = u64 [sp]
  4262: 7b 57 10                 u64 [s0 + 0x10] = a0
  4265: 7b 58 08                 u64 [s0 + 0x8] = a1
  4268: 7b 59                    u64 [s0] = a2
  4270: 82 10 30                 ra = u64 [sp + 0x30]
  4273: 82 15 28                 s0 = u64 [sp + 0x28]
  4276: 82 16 20                 s1 = u64 [sp + 0x20]
  4279: 95 11 38                 sp = sp + 0x38
  4282: 32 00                    ret
      :                          @290
  4284: 00                       trap
      :                          @291
  4285: 00                       trap
      :                          @292
  4286: 00                       trap
      :                          @293 [@dyn 37]
  4287: 82 72                    t0 = u64 [a0]
  4289: 33 09 00 00 ff           a2 = 0xffffffffffff0000
  4294: 95 2a ff ff fe           a3 = t0 + 0xfffffffffffeffff
  4299: ac 9a 28                 jump @299 if a3 <u a2
      :                          @294
  4302: 82 77 08                 a0 = u64 [a0 + 0x8]
  4305: 33 09 e0 00 03           a2 = 0x300e0
  4310: 95 99 00 00 01           a2 = a2 + 0x10000
  4315: 01                       fallthrough
      :                          @295
  4316: 82 9a                    a3 = u64 [a2]
  4318: c9 a9 0b                 a4 = a2 - a3
  4321: ab 7b 12                 jump @299 if a4 != a0
      :                          @296
  4324: c9 2a 0b                 a4 = a3 - t0
  4327: 01                       fallthrough
      :                          @297
  4328: 82 9c                    a5 = u64 [a2]
  4330: ab ac f2                 jump @295 if a5 != a3
      :                          @298
  4333: 7b 9b                    u64 [a2] = a4
  4335: 33 08                    a1 = 0
  4337: 32 00                    ret
      :                          @299
  4339: 32 00                    ret
      :                          @300 [@dyn 38]
  4341: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  4344: 7b 10 18                 u64 [sp + 0x18] = ra
  4347: 7b 15 10                 u64 [sp + 0x10] = s0
  4350: 7b 16 08                 u64 [sp + 0x8] = s1
  4353: 64 75                    s0 = a0
  4355: 82 7a 10                 a3 = u64 [a0 + 0x10]
  4358: 82 77                    a0 = u64 [a0]
  4360: c9 a7 07                 a0 = a0 - a3
  4363: 64 96                    s1 = a2
  4365: ac 97 2a                 jump @303 if a0 <u a2
      :                          @301
  4368: 7b 1a                    u64 [sp] = a3
  4370: 82 57 08                 a0 = u64 [s0 + 0x8]
  4373: c8 a7 07                 a0 = a0 + a3
  4376: 64 69                    a2 = s1
  4378: 50 10 4e 4a 01           ra = 78, jump @322
      :                          @302 [@dyn 39]
  4383: 82 17                    a0 = u64 [sp]
  4385: c8 76 06                 s1 = s1 + a0
  4388: 7b 56 10                 u64 [s0 + 0x10] = s1
  4391: 33 07                    a0 = 0
  4393: 82 10 18                 ra = u64 [sp + 0x18]
  4396: 82 15 10                 s0 = u64 [sp + 0x10]
  4399: 82 16 08                 s1 = u64 [sp + 0x8]
  4402: 95 11 20                 sp = sp + 0x20
  4405: 32 00                    ret
      :                          @303
  4407: 64 57                    a0 = s0
  4409: 7b 18                    u64 [sp] = a1
  4411: 64 a8                    a1 = a3
  4413: 64 69                    a2 = s1
  4415: 50 10 50 74 fc           ra = 80, jump @216
      :                          @304 [@dyn 40]
  4420: 82 18                    a1 = u64 [sp]
  4422: 82 5a 10                 a3 = u64 [s0 + 0x10]
  4425: 28 c7                    jump @301
      :                          @305 [@dyn 41]
  4427: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  4430: 7b 10 20                 u64 [sp + 0x20] = ra
  4433: 7b 15 18                 u64 [sp + 0x18] = s0
  4436: 7b 16 10                 u64 [sp + 0x10] = s1
  4439: 64 86                    s1 = a1
  4441: 83 88                    i32 a1 = a1 + 0
  4443: 33 09 80 00              a2 = 0x80
  4447: 64 7a                    a3 = a0
  4449: ae 98 2b                 jump @310 if a1 >=u a2
      :                          @306
  4452: 82 a8 10                 a1 = u64 [a3 + 0x10]
  4455: 82 a7                    a0 = u64 [a3]
  4457: ab 78 12                 jump @309 if a1 != a0
      :                          @307
  4460: 64 a7                    a0 = a3
  4462: 64 a5                    s0 = a3
  4464: 50 10 54 08 fe           ra = 84, jump @260
      :                          @308 [@dyn 42]
  4469: 64 5a                    a3 = s0
  4471: 82 58 10                 a1 = u64 [s0 + 0x10]
  4474: 01                       fallthrough
      :                          @309
  4475: 82 a7 08                 a0 = u64 [a3 + 0x8]
  4478: c8 87 07                 a0 = a0 + a1
  4481: 78 76                    u8 [a0] = s1
  4483: 95 88 01                 a1 = a1 + 0x1
  4486: 7b a8 10                 u64 [a3 + 0x10] = a1
  4489: 28 ab 00                 jump @318
      :                          @310
  4492: 8b 67 0b                 i32 a0 = s1 >> 0xb
  4495: 48 11 0c                 u32 [sp + 12] = 0
  4498: 52 07 1c                 jump @312 if a0 != 0
      :                          @311
  4501: 98 67 06                 a0 = s1 >> 0x6
  4504: 86 77 c0 00              a0 = a0 | 0xc0
  4508: 78 17 0c                 u8 [sp + 0xc] = a0
  4511: 84 67 3f                 a0 = s1 & 0x3f
  4514: 86 77 80 00              a0 = a0 | 0x80
  4518: 78 17 0d                 u8 [sp + 0xd] = a0
  4521: 33 06 02                 s1 = 0x2
  4524: 28 63                    jump @315
      :                          @312
  4526: 8b 67 10                 i32 a0 = s1 >> 0x10
  4529: 52 07 29                 jump @314 if a0 != 0
      :                          @313
  4532: 98 67 0c                 a0 = s1 >> 0xc
  4535: 86 77 e0 00              a0 = a0 | 0xe0
  4539: 78 17 0c                 u8 [sp + 0xc] = a0
  4542: 97 67 34                 a0 = s1 << 0x34
  4545: 98 77 3a                 a0 = a0 >> 0x3a
  4548: 95 77 80 00              a0 = a0 + 0x80
  4552: 78 17 0d                 u8 [sp + 0xd] = a0
  4555: 84 67 3f                 a0 = s1 & 0x3f
  4558: 86 77 80 00              a0 = a0 | 0x80
  4562: 78 17 0e                 u8 [sp + 0xe] = a0
  4565: 33 06 03                 s1 = 0x3
  4568: 28 37                    jump @315
      :                          @314
  4570: 97 67 2b                 a0 = s1 << 0x2b
  4573: 98 77 3d                 a0 = a0 >> 0x3d
  4576: 95 77 f0 00              a0 = a0 + 0xf0
  4580: 78 17 0c                 u8 [sp + 0xc] = a0
  4583: 97 67 2e                 a0 = s1 << 0x2e
  4586: 98 77 3a                 a0 = a0 >> 0x3a
  4589: 95 77 80 00              a0 = a0 + 0x80
  4593: 78 17 0d                 u8 [sp + 0xd] = a0
  4596: 97 67 34                 a0 = s1 << 0x34
  4599: 98 77 3a                 a0 = a0 >> 0x3a
  4602: 95 77 80 00              a0 = a0 + 0x80
  4606: 78 17 0e                 u8 [sp + 0xe] = a0
  4609: 84 67 3f                 a0 = s1 & 0x3f
  4612: 86 77 80 00              a0 = a0 | 0x80
  4616: 78 17 0f                 u8 [sp + 0xf] = a0
  4619: 33 06 04                 s1 = 0x4
  4622: 01                       fallthrough
      :                          @315
  4623: 82 a5 10                 s0 = u64 [a3 + 0x10]
  4626: 82 a7                    a0 = u64 [a3]
  4628: c9 57 07                 a0 = a0 - s0
  4631: ac 67 2d                 jump @319 if a0 <u s1
      :                          @316
  4634: 7b 1a                    u64 [sp] = a3
  4636: 82 a7 08                 a0 = u64 [a3 + 0x8]
  4639: c8 57 07                 a0 = a0 + s0
  4642: 95 18 0c                 a1 = sp + 0xc
  4645: 64 69                    a2 = s1
  4647: 50 10 56 3d              ra = 86, jump @322
      :                          @317 [@dyn 43]
  4651: c8 56 06                 s1 = s1 + s0
  4654: 82 17                    a0 = u64 [sp]
  4656: 7b 76 10                 u64 [a0 + 0x10] = s1
  4659: 01                       fallthrough
      :                          @318
  4660: 33 07                    a0 = 0
  4662: 82 10 20                 ra = u64 [sp + 0x20]
  4665: 82 15 18                 s0 = u64 [sp + 0x18]
  4668: 82 16 10                 s1 = u64 [sp + 0x10]
  4671: 95 11 28                 sp = sp + 0x28
  4674: 32 00                    ret
      :                          @319
  4676: 64 a7                    a0 = a3
  4678: 64 58                    a1 = s0
  4680: 64 69                    a2 = s1
  4682: 64 a5                    s0 = a3
  4684: 50 10 58 67 fb           ra = 88, jump @216
      :                          @320 [@dyn 44]
  4689: 64 5a                    a3 = s0
  4691: 82 55 10                 s0 = u64 [s0 + 0x10]
  4694: 28 c4                    jump @316
      :                          @321 [@dyn 45]
  4696: 64 8a                    a3 = a1
  4698: 33 08 10 02 01           a1 = 0x10210
  4703: 64 a9                    a2 = a3
  4705: 28 6f 04                 jump @407
      :                          @322
  4708: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  4711: 7b 10 18                 u64 [sp + 0x18] = ra
  4714: 7b 15 10                 u64 [sp + 0x10] = s0
  4717: 7b 16 08                 u64 [sp + 0x8] = s1
  4720: 53 19 10 64              jump @331 if a2 <u 16
      :                          @323
  4724: 8d 7a                    i32 a3 = -a0
  4726: 84 a2 07                 t0 = a3 & 0x7
  4729: c8 27 0b                 a4 = a0 + t0
  4732: 51 02 15                 jump @326 if t0 == 0
      :                          @324
  4735: 64 8c                    a5 = a1
  4737: 64 75                    s0 = a0
  4739: 01                       fallthrough
      :                          @325
  4740: 7c ca                    a3 = u8 [a5]
  4742: 78 5a                    u8 [s0] = a3
  4744: 95 55 01                 s0 = s0 + 0x1
  4747: 95 cc 01                 a5 = a5 + 0x1
  4750: ac b5 f6                 jump @325 if s0 <u a4
      :                          @326
  4753: c8 28 03                 t1 = a1 + t0
  4756: c9 29 02                 t0 = a2 - t0
  4759: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  4762: 84 38 07                 a1 = t1 & 0x7
  4765: c8 4b 0a                 a3 = a4 + t2
  4768: 51 08 3b                 jump @333 if a1 == 0
      :                          @327
  4771: 58 04 4b                 jump @336 if t2 <=s 0
      :                          @328
  4774: 97 38 03                 a1 = t1 << 0x3
  4777: 84 80 38                 ra = a1 & 0x38
  4780: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  4783: 82 c5                    s0 = u64 [a5]
  4785: 8d 88                    i32 a1 = -a1
  4787: 84 88 38                 a1 = a1 & 0x38
  4790: 95 cc 08                 a5 = a5 + 0x8
  4793: 01                       fallthrough
      :                          @329
  4794: 82 c6                    s1 = u64 [a5]
  4796: d0 05 05                 s0 = s0 >> ra
  4799: cf 86 09                 a2 = s1 << a1
  4802: d4 59 09                 a2 = a2 | s0
  4805: 7b b9                    u64 [a4] = a2
  4807: 95 bb 08                 a4 = a4 + 0x8
  4810: 95 cc 08                 a5 = a5 + 0x8
  4813: 64 65                    s0 = s1
  4815: ac ab eb                 jump @329 if a4 <u a3
      :                          @330
  4818: 28 1c                    jump @336
      :                          @331
  4820: 64 7a                    a3 = a0
  4822: 52 09 21                 jump @337 if a2 != 0
      :                          @332
  4825: 28 2f                    jump @339
      :                          @333
  4827: 58 04 13                 jump @336 if t2 <=s 0
      :                          @334
  4830: 64 38                    a1 = t1
  4832: 01                       fallthrough
      :                          @335
  4833: 82 89                    a2 = u64 [a1]
  4835: 7b b9                    u64 [a4] = a2
  4837: 95 bb 08                 a4 = a4 + 0x8
  4840: 95 88 08                 a1 = a1 + 0x8
  4843: ac ab f6                 jump @335 if a4 <u a3
      :                          @336
  4846: c8 43 08                 a1 = t1 + t2
  4849: 84 29 07                 a2 = t0 & 0x7
  4852: 51 09 14                 jump @339 if a2 == 0
      :                          @337
  4855: c8 a9 09                 a2 = a2 + a3
  4858: 01                       fallthrough
      :                          @338
  4859: 7c 8b                    a4 = u8 [a1]
  4861: 78 ab                    u8 [a3] = a4
  4863: 95 aa 01                 a3 = a3 + 0x1
  4866: 95 88 01                 a1 = a1 + 0x1
  4869: ac 9a f6                 jump @338 if a3 <u a2
      :                          @339
  4872: 82 10 18                 ra = u64 [sp + 0x18]
  4875: 82 15 10                 s0 = u64 [sp + 0x10]
  4878: 82 16 08                 s1 = u64 [sp + 0x8]
  4881: 95 11 20                 sp = sp + 0x20
  4884: 32 00                    ret
      :                          @340 [@dyn 46]
  4886: 82 77                    a0 = u64 [a0]
  4888: 01                       fallthrough
      :                          @341
  4889: 28                       jump @341
      :                          @342 [@dyn 47]
  4890: 82 77                    a0 = u64 [a0]
  4892: 64 89                    a2 = a1
  4894: 33 08 01                 a1 = 0x1
  4897: 01                       fallthrough
      :                          @343
  4898: 95 11 a0                 sp = sp + 0xffffffffffffffa0
  4901: 7b 10 58                 u64 [sp + 0x58] = ra
  4904: 7b 15 50                 u64 [sp + 0x50] = s0
  4907: 7b 16 48                 u64 [sp + 0x48] = s1
  4910: 7b 19 08                 u64 [sp + 0x8] = a2
  4913: 7b 18                    u64 [sp] = a1
  4915: 98 7a 04                 a3 = a0 >> 0x4
  4918: 33 09 27                 a2 = 0x27
  4921: 53 2a 71 02 81 00        jump @346 if a3 <u 625
      :                          @344
  4927: 33 09 27                 a2 = 0x27
  4930: 95 1b 46                 a4 = sp + 0x46
  4933: 3a 08 00 00 03           a1 = u64 [0x30000]
  4938: 7b 18 18                 u64 [sp + 0x18] = a1
  4941: 49 11 10 f0 d8 00        u64 [sp + 16] = 0xd8f0
  4947: 33 03 7b 14              t1 = 0x147b
  4951: 33 05 7e 02 01           s0 = 0x1027e
  4956: 33 00 ff e0 f5 05        ra = 0x5f5e0ff
  4962: 01                       fallthrough
      :                          @345
  4963: 64 74                    t2 = a0
  4965: 82 17 18                 a0 = u64 [sp + 0x18]
  4968: d6 74 07                 a0 = t2 mulhu a0
  4971: 98 77 0b                 a0 = a0 >> 0xb
  4974: 82 18 10                 a1 = u64 [sp + 0x10]
  4977: c0 87 02                 i32 t0 = a0 * a1
  4980: c8 42 0a                 a3 = t0 + t2
  4983: 97 a2 30                 t0 = a3 << 0x30
  4986: 98 28 32                 a1 = t0 >> 0x32
  4989: ca 38 08                 a1 = a1 * t1
  4992: 98 8c 11                 a5 = a1 >> 0x11
  4995: 98 88 10                 a1 = a1 >> 0x10
  4998: 84 88 fe 07              a1 = a1 & 0x7fe
  5002: 96 cc 9c                 a5 = a5 * 0xffffffffffffff9c
  5005: c8 ca 0a                 a3 = a3 + a5
  5008: 97 aa 31                 a3 = a3 << 0x31
  5011: 98 aa 30                 a3 = a3 >> 0x30
  5014: c8 58 08                 a1 = a1 + s0
  5017: 7c 8c                    a5 = u8 [a1]
  5019: 7c 88 01                 a1 = u8 [a1 + 0x1]
  5022: c8 5a 0a                 a3 = a3 + s0
  5025: 7c a6 01                 s1 = u8 [a3 + 0x1]
  5028: 7c aa                    a3 = u8 [a3]
  5030: 78 b8 ff                 u8 [a4 + 0xffffffffffffffff] = a1
  5033: 78 bc fe                 u8 [a4 + 0xfffffffffffffffe] = a5
  5036: 78 b6 01                 u8 [a4 + 0x1] = s1
  5039: 78 ba                    u8 [a4] = a3
  5041: 95 99 fc                 a2 = a2 + 0xfffffffffffffffc
  5044: 95 bb fc                 a4 = a4 + 0xfffffffffffffffc
  5047: ac 40 ac                 jump @345 if ra <u t2
      :                          @346
  5050: 54 17 63 3b              jump @348 if a0 <=u 99
      :                          @347
  5054: 97 78 30                 a1 = a0 << 0x30
  5057: 98 88 32                 a1 = a1 >> 0x32
  5060: 96 88 7b 14              a1 = a1 * 0x147b
  5064: 98 88 11                 a1 = a1 >> 0x11
  5067: 96 8a 9c                 a3 = a1 * 0xffffffffffffff9c
  5070: c8 a7 07                 a0 = a0 + a3
  5073: 97 77 31                 a0 = a0 << 0x31
  5076: 98 77 30                 a0 = a0 >> 0x30
  5079: 95 99 fe                 a2 = a2 + 0xfffffffffffffffe
  5082: 33 0a 7e 02 01           a3 = 0x1027e
  5087: c8 a7 07                 a0 = a0 + a3
  5090: 7c 7a 01                 a3 = u8 [a0 + 0x1]
  5093: 7c 77                    a0 = u8 [a0]
  5095: 95 1b 21                 a4 = sp + 0x21
  5098: c8 9b 0b                 a4 = a4 + a2
  5101: 78 ba 01                 u8 [a4 + 0x1] = a3
  5104: 78 b7                    u8 [a4] = a0
  5106: 64 87                    a0 = a1
  5108: 01                       fallthrough
      :                          @348
  5109: 55 17 0a 14              jump @350 if a0 >=u 10
      :                          @349
  5113: 95 99 ff                 a2 = a2 + 0xffffffffffffffff
  5116: 95 18 21                 a1 = sp + 0x21
  5119: c8 98 08                 a1 = a1 + a2
  5122: 83 77 30                 i32 a0 = a0 + 0x30
  5125: 78 87                    u8 [a1] = a0
  5127: 28 21                    jump @351
      :                          @350
  5129: 97 77 01                 a0 = a0 << 0x1
  5132: 95 99 fe                 a2 = a2 + 0xfffffffffffffffe
  5135: 33 08 7e 02 01           a1 = 0x1027e
  5140: c8 87 07                 a0 = a0 + a1
  5143: 7c 78 01                 a1 = u8 [a0 + 0x1]
  5146: 7c 77                    a0 = u8 [a0]
  5148: 95 1a 21                 a3 = sp + 0x21
  5151: c8 9a 0a                 a3 = a3 + a2
  5154: 78 a8 01                 u8 [a3 + 0x1] = a1
  5157: 78 a7                    u8 [a3] = a0
  5159: 01                       fallthrough
      :                          @351
  5160: 95 1b 21                 a4 = sp + 0x21
  5163: c8 9b 0b                 a4 = a4 + a2
  5166: 9a 9c 27                 a5 = 0x27 - a2
  5169: 33 09 40 02 01           a2 = 0x10240
  5174: 82 17 08                 a0 = u64 [sp + 0x8]
  5177: 82 18                    a1 = u64 [sp]
  5179: 33 0a                    a3 = 0
  5181: 50 10 60 12              ra = 96, jump @353
      :                          @352 [@dyn 48]
  5185: 82 10 58                 ra = u64 [sp + 0x58]
  5188: 82 15 50                 s0 = u64 [sp + 0x50]
  5191: 82 16 48                 s1 = u64 [sp + 0x48]
  5194: 95 11 60                 sp = sp + 0x60
  5197: 32 00                    ret
      :                          @353
  5199: 95 11 98                 sp = sp + 0xffffffffffffff98
  5202: 7b 10 60                 u64 [sp + 0x60] = ra
  5205: 7b 15 58                 u64 [sp + 0x58] = s0
  5208: 7b 16 50                 u64 [sp + 0x50] = s1
  5211: 7b 1b 18                 u64 [sp + 0x18] = a4
  5214: 51 08 4f                 jump @360 if a1 == 0
      :                          @354
  5217: 80 76 34                 s1 = u32 [a0 + 0x34]
  5220: 84 68 01                 a1 = s1 & 0x1
  5223: 33 0b 2b                 a4 = 0x2b
  5226: 33 05 00 00 11           s0 = 0x110000
  5231: db 8b 05                 s0 = a4 if a1 != 0
  5234: 7b 15 28                 u64 [sp + 0x28] = s0
  5237: c8 c8 02                 t0 = a1 + a5
  5240: 84 68 04                 a1 = s1 & 0x4
  5243: 51 08 42                 jump @361 if a1 == 0
      :                          @355
  5246: 7b 19 30                 u64 [sp + 0x30] = a2
  5249: 33 08                    a1 = 0
  5251: 51 0a 1a                 jump @358 if a3 == 0
      :                          @356
  5254: 64 a5                    s0 = a3
  5256: 01                       fallthrough
      :                          @357
  5257: 7d 9b                    a4 = i8 [a2]
  5259: 89 bb c0                 a4 = a4 <s 0xffffffffffffffc0
  5262: 85 bb 01                 a4 = a4 ^ 0x1
  5265: c8 b8 08                 a1 = a1 + a4
  5268: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  5271: 95 99 01                 a2 = a2 + 0x1
  5274: 52 05 ef                 jump @357 if s0 != 0
      :                          @358
  5277: c8 82 02                 t0 = t0 + a1
  5280: 7b 1a 38                 u64 [sp + 0x38] = a3
  5283: 82 78                    a1 = u64 [a0]
  5285: 7b 1c 20                 u64 [sp + 0x20] = a5
  5288: 52 08 23                 jump @362 if a1 != 0
      :                          @359
  5291: 28 41                    jump @367
      :                          @360
  5293: 81 76 34                 s1 = i32 [a0 + 0x34]
  5296: 95 c2 01                 t0 = a5 + 0x1
  5299: 49 11 28 2d              u64 [sp + 40] = 0x2d
  5303: 84 68 04                 a1 = s1 & 0x4
  5306: 52 08 c4                 jump @355 if a1 != 0
      :                          @361
  5309: 49 11 30                 u64 [sp + 48] = 0
  5312: 7b 1a 38                 u64 [sp + 0x38] = a3
  5315: 82 78                    a1 = u64 [a0]
  5317: 7b 1c 20                 u64 [sp + 0x20] = a5
  5320: 51 08 24                 jump @367 if a1 == 0
      :                          @362
  5323: 82 75 08                 s0 = u64 [a0 + 0x8]
  5326: ae 52 1e                 jump @367 if t0 >=u s0
      :                          @363
  5329: 84 66 08                 s1 = s1 & 0x8
  5332: 52 06 50                 jump @370 if s1 != 0
      :                          @364
  5335: 7c 79 38                 a2 = u8 [a0 + 0x38]
  5338: c9 25 0a                 a3 = s0 - t0
  5341: 5a 19 01 a1 00           jump @377 if a2 >s 1
      :                          @365
  5346: 52 09 ae 00              jump @379 if a2 != 0
      :                          @366
  5350: 7b 1a 10                 u64 [sp + 0x10] = a3
  5353: 28 ad 00                 jump @380
      :                          @367
  5356: 82 75 20                 s0 = u64 [a0 + 0x20]
  5359: 82 76 28                 s1 = u64 [a0 + 0x28]
  5362: 64 57                    a0 = s0
  5364: 64 68                    a1 = s1
  5366: 82 19 28                 a2 = u64 [sp + 0x28]
  5369: 82 1a 30                 a3 = u64 [sp + 0x30]
  5372: 82 1b 38                 a4 = u64 [sp + 0x38]
  5375: 50 10 62 6d 01           ra = 98, jump @400
      :                          @368 [@dyn 49]
  5380: 33 08 01                 a1 = 0x1
  5383: 52 07 bc 00              jump @385 if a0 != 0
      :                          @369
  5387: 82 6c 18                 a5 = u64 [s1 + 0x18]
  5390: 64 57                    a0 = s0
  5392: 82 18 18                 a1 = u64 [sp + 0x18]
  5395: 82 19 20                 a2 = u64 [sp + 0x20]
  5398: 82 10 60                 ra = u64 [sp + 0x60]
  5401: 82 15 58                 s0 = u64 [sp + 0x58]
  5404: 82 16 50                 s1 = u64 [sp + 0x50]
  5407: 95 11 68                 sp = sp + 0x68
  5410: 32 0c                    jump [a5]
      :                          @370
  5412: 7b 12 40                 u64 [sp + 0x40] = t0
  5415: 81 78 30                 a1 = i32 [a0 + 0x30]
  5418: 7b 18 08                 u64 [sp + 0x8] = a1
  5421: 7c 79 38                 a2 = u8 [a0 + 0x38]
  5424: 7b 19                    u64 [sp] = a2
  5426: 82 79 20                 a2 = u64 [a0 + 0x20]
  5429: 82 76 28                 s1 = u64 [a0 + 0x28]
  5432: 48 17 30 30              u32 [a0 + 48] = 0x30
  5436: 7b 17 10                 u64 [sp + 0x10] = a0
  5439: 46 17 38 01              u8 [a0 + 56] = 0x1
  5443: 7b 19 48                 u64 [sp + 0x48] = a2
  5446: 64 97                    a0 = a2
  5448: 64 68                    a1 = s1
  5450: 82 19 28                 a2 = u64 [sp + 0x28]
  5453: 82 1a 30                 a3 = u64 [sp + 0x30]
  5456: 82 1b 38                 a4 = u64 [sp + 0x38]
  5459: 50 10 64 19 01           ra = 100, jump @400
      :                          @371 [@dyn 50]
  5464: 52 07 67                 jump @384 if a0 != 0
      :                          @372
  5467: 82 17 40                 a0 = u64 [sp + 0x40]
  5470: c9 75 05                 s0 = s0 - a0
  5473: 95 55 01                 s0 = s0 + 0x1
  5476: 01                       fallthrough
      :                          @373
  5477: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  5480: 51 05 c6 00              jump @395 if s0 == 0
      :                          @374
  5484: 82 69 20                 a2 = u64 [s1 + 0x20]
  5487: 33 08 30                 a1 = 0x30
  5490: 82 17 48                 a0 = u64 [sp + 0x48]
  5493: b4 90 01 66              ra = 102, jump [a2]
      :                          @375 [@dyn 51]
  5497: 51 07 ec                 jump @373 if a0 == 0
      :                          @376
  5500: 28 43                    jump @384
      :                          @377
  5502: 52 19 02 12              jump @379 if a2 != 2
      :                          @378
  5506: 98 a9 01                 a2 = a3 >> 0x1
  5509: 95 a8 01                 a1 = a3 + 0x1
  5512: 98 88 01                 a1 = a1 >> 0x1
  5515: 7b 18 10                 u64 [sp + 0x10] = a1
  5518: 28 08                    jump @380
      :                          @379
  5520: 64 a9                    a2 = a3
  5522: 49 11 10                 u64 [sp + 16] = 0
  5525: 01                       fallthrough
      :                          @380
  5526: 82 78 20                 a1 = u64 [a0 + 0x20]
  5529: 7b 18 48                 u64 [sp + 0x48] = a1
  5532: 82 76 28                 s1 = u64 [a0 + 0x28]
  5535: 81 77 30                 a0 = i32 [a0 + 0x30]
  5538: 7b 17 40                 u64 [sp + 0x40] = a0
  5541: 95 95 01                 s0 = a2 + 0x1
  5544: 01                       fallthrough
      :                          @381
  5545: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  5548: 51 05 27                 jump @386 if s0 == 0
      :                          @382
  5551: 82 69 20                 a2 = u64 [s1 + 0x20]
  5554: 82 17 48                 a0 = u64 [sp + 0x48]
  5557: 82 18 40                 a1 = u64 [sp + 0x40]
  5560: b4 90 01 68              ra = 104, jump [a2]
      :                          @383 [@dyn 52]
  5564: 51 07 ed                 jump @381 if a0 == 0
      :                          @384
  5567: 33 08 01                 a1 = 0x1
  5570: 01                       fallthrough
      :                          @385
  5571: 64 87                    a0 = a1
  5573: 82 10 60                 ra = u64 [sp + 0x60]
  5576: 82 15 58                 s0 = u64 [sp + 0x58]
  5579: 82 16 50                 s1 = u64 [sp + 0x50]
  5582: 95 11 68                 sp = sp + 0x68
  5585: 32 00                    ret
      :                          @386
  5587: 82 15 48                 s0 = u64 [sp + 0x48]
  5590: 64 57                    a0 = s0
  5592: 64 68                    a1 = s1
  5594: 82 19 28                 a2 = u64 [sp + 0x28]
  5597: 82 1a 30                 a3 = u64 [sp + 0x30]
  5600: 82 1b 38                 a4 = u64 [sp + 0x38]
  5603: 50 10 6a 89 00           ra = 106, jump @400
      :                          @387 [@dyn 53]
  5608: 33 08 01                 a1 = 0x1
  5611: 52 07 d8                 jump @385 if a0 != 0
      :                          @388
  5614: 82 6a 18                 a3 = u64 [s1 + 0x18]
  5617: 64 57                    a0 = s0
  5619: 82 18 18                 a1 = u64 [sp + 0x18]
  5622: 82 19 20                 a2 = u64 [sp + 0x20]
  5625: b4 a0 01 6c              ra = 108, jump [a3]
      :                          @389 [@dyn 54]
  5629: 33 08 01                 a1 = 0x1
  5632: 52 07 c3                 jump @385 if a0 != 0
      :                          @390
  5635: 82 17 10                 a0 = u64 [sp + 0x10]
  5638: 9a 77                    a0 = -a0
  5640: 7b 17 38                 u64 [sp + 0x38] = a0
  5643: 33 05 ff                 s0 = 0xffffffffffffffff
  5646: 01                       fallthrough
      :                          @391
  5647: 82 17 38                 a0 = u64 [sp + 0x38]
  5650: c8 57 07                 a0 = a0 + s0
  5653: 51 17 ff 42              jump @398 if a0 == 4294967295
      :                          @392
  5657: 82 69 20                 a2 = u64 [s1 + 0x20]
  5660: 82 17 48                 a0 = u64 [sp + 0x48]
  5663: 82 18 40                 a1 = u64 [sp + 0x40]
  5666: b4 90 01 6e              ra = 110, jump [a2]
      :                          @393 [@dyn 55]
  5670: 95 55 01                 s0 = s0 + 0x1
  5673: 51 07 e6                 jump @391 if a0 == 0
      :                          @394
  5676: 28 37                    jump @399
      :                          @395
  5678: 82 6a 18                 a3 = u64 [s1 + 0x18]
  5681: 82 17 48                 a0 = u64 [sp + 0x48]
  5684: 82 18 18                 a1 = u64 [sp + 0x18]
  5687: 82 19 20                 a2 = u64 [sp + 0x20]
  5690: b4 a0 01 70              ra = 112, jump [a3]
      :                          @396 [@dyn 56]
  5694: 33 08 01                 a1 = 0x1
  5697: 52 07 82                 jump @385 if a0 != 0
      :                          @397
  5700: 33 08                    a1 = 0
  5702: 82 17 10                 a0 = u64 [sp + 0x10]
  5705: 82 19 08                 a2 = u64 [sp + 0x8]
  5708: 7a 79 30                 u32 [a0 + 0x30] = a2
  5711: 82 19                    a2 = u64 [sp]
  5713: 78 79 38                 u8 [a0 + 0x38] = a2
  5716: 28 6f ff                 jump @385
      :                          @398
  5719: 82 15 10                 s0 = u64 [sp + 0x10]
  5722: 82 17 10                 a0 = u64 [sp + 0x10]
  5725: d8 75 08                 a1 = s0 <u a0
  5728: 28 63 ff                 jump @385
      :                          @399
  5731: 82 17 10                 a0 = u64 [sp + 0x10]
  5734: d8 75 08                 a1 = s0 <u a0
  5737: 28 5a ff                 jump @385
      :                          @400
  5740: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  5743: 7b 10 20                 u64 [sp + 0x20] = ra
  5746: 7b 15 18                 u64 [sp + 0x18] = s0
  5749: 7b 16 10                 u64 [sp + 0x10] = s1
  5752: 83 9c                    i32 a5 = a2 + 0
  5754: 33 02 00 00 11           t0 = 0x110000
  5759: 64 a6                    s1 = a3
  5761: 64 85                    s0 = a1
  5763: 64 7a                    a3 = a0
  5765: aa 2c 20                 jump @403 if a5 == t0
      :                          @401
  5768: 82 5c 20                 a5 = u64 [s0 + 0x20]
  5771: 64 a7                    a0 = a3
  5773: 64 98                    a1 = a2
  5775: 7b 1b 08                 u64 [sp + 0x8] = a4
  5778: 7b 1a                    u64 [sp] = a3
  5780: b4 c0 01 72              ra = 114, jump [a5]
      :                          @402 [@dyn 57]
  5784: 82 1a                    a3 = u64 [sp]
  5786: 82 1b 08                 a4 = u64 [sp + 0x8]
  5789: 64 78                    a1 = a0
  5791: 33 07 01                 a0 = 0x1
  5794: 52 08 20                 jump @406 if a1 != 0
      :                          @403
  5797: 51 06 1a                 jump @405 if s1 == 0
      :                          @404
  5800: 82 5c 18                 a5 = u64 [s0 + 0x18]
  5803: 64 a7                    a0 = a3
  5805: 64 68                    a1 = s1
  5807: 64 b9                    a2 = a4
  5809: 82 10 20                 ra = u64 [sp + 0x20]
  5812: 82 15 18                 s0 = u64 [sp + 0x18]
  5815: 82 16 10                 s1 = u64 [sp + 0x10]
  5818: 95 11 28                 sp = sp + 0x28
  5821: 32 0c                    jump [a5]
      :                          @405
  5823: 33 07                    a0 = 0
  5825: 01                       fallthrough
      :                          @406
  5826: 82 10 20                 ra = u64 [sp + 0x20]
  5829: 82 15 18                 s0 = u64 [sp + 0x18]
  5832: 82 16 10                 s1 = u64 [sp + 0x10]
  5835: 95 11 28                 sp = sp + 0x28
  5838: 32 00                    ret
      :                          @407
  5840: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  5844: 7b 10 80 00              u64 [sp + 0x80] = ra
  5848: 7b 15 78                 u64 [sp + 0x78] = s0
  5851: 7b 16 70                 u64 [sp + 0x70] = s1
  5854: 49 11 60 20              u64 [sp + 96] = 0x20
  5858: 33 0a 03                 a3 = 0x3
  5861: 78 1a 68                 u8 [sp + 0x68] = a3
  5864: 82 96 20                 s1 = u64 [a2 + 0x20]
  5867: 49 11 30                 u64 [sp + 48] = 0
  5870: 49 11 40                 u64 [sp + 64] = 0
  5873: 7b 17 50                 u64 [sp + 0x50] = a0
  5876: 7b 18 58                 u64 [sp + 0x58] = a1
  5879: 51 06 07 01              jump @429 if s1 == 0
      :                          @408
  5883: 82 97 28                 a0 = u64 [a2 + 0x28]
  5886: 51 07 74 01              jump @439 if a0 == 0
      :                          @409
  5890: 49 11 28                 u64 [sp + 40] = 0
  5893: 82 95                    s0 = u64 [a2]
  5895: 7b 19 08                 u64 [sp + 0x8] = a2
  5898: 82 98 10                 a1 = u64 [a2 + 0x10]
  5901: 7b 18 18                 u64 [sp + 0x18] = a1
  5904: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  5907: 97 88 03                 a1 = a1 << 0x3
  5910: 98 88 03                 a1 = a1 >> 0x3
  5913: 95 88 01                 a1 = a1 + 0x1
  5916: 7b 18                    u64 [sp] = a1
  5918: 95 55 08                 s0 = s0 + 0x8
  5921: 96 78 38                 a1 = a0 * 0x38
  5924: 95 66 18                 s1 = s1 + 0x18
  5927: 33 07 5c                 a0 = 0x5c
  5930: 7b 17 10                 u64 [sp + 0x10] = a0
  5933: 01                       fallthrough
      :                          @410
  5934: 7b 18 20                 u64 [sp + 0x20] = a1
  5937: 82 59                    a2 = u64 [s0]
  5939: 51 09 17                 jump @413 if a2 == 0
      :                          @411
  5942: 82 1a 58                 a3 = u64 [sp + 0x58]
  5945: 82 17 50                 a0 = u64 [sp + 0x50]
  5948: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  5951: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5954: b4 a0 01 74              ra = 116, jump [a3]
      :                          @412 [@dyn 58]
  5958: 52 07 51 01              jump @442 if a0 != 0
      :                          @413
  5962: 81 67 10                 a0 = i32 [s1 + 0x10]
  5965: 7a 17 60                 u32 [sp + 0x60] = a0
  5968: 7c 67 18                 a0 = u8 [s1 + 0x18]
  5971: 78 17 68                 u8 [sp + 0x68] = a0
  5974: 81 67 14                 a0 = i32 [s1 + 0x14]
  5977: 7a 17 64                 u32 [sp + 0x64] = a0
  5980: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  5983: 82 67                    a0 = u64 [s1]
  5985: 51 08 26                 jump @418 if a1 == 0
      :                          @414
  5988: 52 18 01 16              jump @416 if a1 != 1
      :                          @415
  5992: 97 77 04                 a0 = a0 << 0x4
  5995: 82 18 18                 a1 = u64 [sp + 0x18]
  5998: c8 87 07                 a0 = a0 + a1
  6001: 82 78 08                 a1 = u64 [a0 + 0x8]
  6004: 82 19 10                 a2 = u64 [sp + 0x10]
  6007: aa 98 07                 jump @417 if a1 == a2
      :                          @416
  6010: 33 08                    a1 = 0
  6012: 28 0f                    jump @419
      :                          @417
  6014: 82 77                    a0 = u64 [a0]
  6016: 82 77                    a0 = u64 [a0]
  6018: 33 08 01                 a1 = 0x1
  6021: 28 06                    jump @419
      :                          @418
  6023: 33 08 01                 a1 = 0x1
  6026: 01                       fallthrough
      :                          @419
  6027: 7b 18 30                 u64 [sp + 0x30] = a1
  6030: 7b 17 38                 u64 [sp + 0x38] = a0
  6033: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  6036: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  6039: 51 08 26                 jump @424 if a1 == 0
      :                          @420
  6042: 52 18 01 16              jump @422 if a1 != 1
      :                          @421
  6046: 97 77 04                 a0 = a0 << 0x4
  6049: 82 18 18                 a1 = u64 [sp + 0x18]
  6052: c8 87 07                 a0 = a0 + a1
  6055: 82 78 08                 a1 = u64 [a0 + 0x8]
  6058: 82 19 10                 a2 = u64 [sp + 0x10]
  6061: aa 98 07                 jump @423 if a1 == a2
      :                          @422
  6064: 33 08                    a1 = 0
  6066: 28 0f                    jump @425
      :                          @423
  6068: 82 77                    a0 = u64 [a0]
  6070: 82 77                    a0 = u64 [a0]
  6072: 33 08 01                 a1 = 0x1
  6075: 28 06                    jump @425
      :                          @424
  6077: 33 08 01                 a1 = 0x1
  6080: 01                       fallthrough
      :                          @425
  6081: 7b 18 40                 u64 [sp + 0x40] = a1
  6084: 7b 17 48                 u64 [sp + 0x48] = a0
  6087: 82 67 08                 a0 = u64 [s1 + 0x8]
  6090: 97 77 04                 a0 = a0 << 0x4
  6093: 82 18 18                 a1 = u64 [sp + 0x18]
  6096: c8 78 08                 a1 = a1 + a0
  6099: 82 87                    a0 = u64 [a1]
  6101: 82 89 08                 a2 = u64 [a1 + 0x8]
  6104: 95 18 30                 a1 = sp + 0x30
  6107: b4 90 01 76              ra = 118, jump [a2]
      :                          @426 [@dyn 59]
  6111: 52 07 b8 00              jump @442 if a0 != 0
      :                          @427
  6115: 95 55 10                 s0 = s0 + 0x10
  6118: 82 18 20                 a1 = u64 [sp + 0x20]
  6121: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  6124: 95 66 38                 s1 = s1 + 0x38
  6127: 82 17 28                 a0 = u64 [sp + 0x28]
  6130: 95 77 01                 a0 = a0 + 0x1
  6133: 7b 17 28                 u64 [sp + 0x28] = a0
  6136: 52 08 36 ff              jump @410 if a1 != 0
      :                          @428
  6140: 28 69                    jump @437
      :                          @429
  6142: 82 97 18                 a0 = u64 [a2 + 0x18]
  6145: 51 07 71                 jump @439 if a0 == 0
      :                          @430
  6148: 82 95 10                 s0 = u64 [a2 + 0x10]
  6151: 33 0a                    a3 = 0
  6153: 97 78 04                 a1 = a0 << 0x4
  6156: c8 58 08                 a1 = a1 + s0
  6159: 7b 18 20                 u64 [sp + 0x20] = a1
  6162: 7b 19 08                 u64 [sp + 0x8] = a2
  6165: 82 96                    s1 = u64 [a2]
  6167: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  6170: 97 77 04                 a0 = a0 << 0x4
  6173: 98 77 04                 a0 = a0 >> 0x4
  6176: 95 77 01                 a0 = a0 + 0x1
  6179: 7b 17                    u64 [sp] = a0
  6181: 95 66 08                 s1 = s1 + 0x8
  6184: 01                       fallthrough
      :                          @431
  6185: 7b 1a 28                 u64 [sp + 0x28] = a3
  6188: 82 69                    a2 = u64 [s1]
  6190: 51 09 16                 jump @434 if a2 == 0
      :                          @432
  6193: 82 1a 58                 a3 = u64 [sp + 0x58]
  6196: 82 17 50                 a0 = u64 [sp + 0x50]
  6199: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  6202: 82 aa 18                 a3 = u64 [a3 + 0x18]
  6205: b4 a0 01 78              ra = 120, jump [a3]
      :                          @433 [@dyn 60]
  6209: 52 07 56                 jump @442 if a0 != 0
      :                          @434
  6212: 82 57                    a0 = u64 [s0]
  6214: 82 59 08                 a2 = u64 [s0 + 0x8]
  6217: 95 18 30                 a1 = sp + 0x30
  6220: b4 90 01 7a              ra = 122, jump [a2]
      :                          @435 [@dyn 61]
  6224: 52 07 47                 jump @442 if a0 != 0
      :                          @436
  6227: 95 66 10                 s1 = s1 + 0x10
  6230: 95 55 10                 s0 = s0 + 0x10
  6233: 82 1a 28                 a3 = u64 [sp + 0x28]
  6236: 95 aa 01                 a3 = a3 + 0x1
  6239: 82 17 20                 a0 = u64 [sp + 0x20]
  6242: ab 75 c7                 jump @431 if s0 != a0
      :                          @437
  6245: 82 19 08                 a2 = u64 [sp + 0x8]
  6248: 82 1a                    a3 = u64 [sp]
  6250: 82 97 08                 a0 = u64 [a2 + 0x8]
  6253: ac 7a 0d                 jump @440 if a3 <u a0
      :                          @438
  6256: 28 2c                    jump @443
      :                          @439
  6258: 33 0a                    a3 = 0
  6260: 82 97 08                 a0 = u64 [a2 + 0x8]
  6263: 54 07 25                 jump @443 if a0 <=u 0
      :                          @440
  6266: 82 97                    a0 = u64 [a2]
  6268: 97 a8 04                 a1 = a3 << 0x4
  6271: c8 87 09                 a2 = a0 + a1
  6274: 82 1a 58                 a3 = u64 [sp + 0x58]
  6277: 82 17 50                 a0 = u64 [sp + 0x50]
  6280: 82 98                    a1 = u64 [a2]
  6282: 82 99 08                 a2 = u64 [a2 + 0x8]
  6285: 82 aa 18                 a3 = u64 [a3 + 0x18]
  6288: b4 a0 01 7c              ra = 124, jump [a3]
      :                          @441 [@dyn 62]
  6292: 51 07 08                 jump @443 if a0 == 0
      :                          @442
  6295: 33 07 01                 a0 = 0x1
  6298: 28 05                    jump @444
      :                          @443
  6300: 33 07                    a0 = 0
  6302: 01                       fallthrough
      :                          @444
  6303: 82 10 80 00              ra = u64 [sp + 0x80]
  6307: 82 15 78                 s0 = u64 [sp + 0x78]
  6310: 82 16 70                 s1 = u64 [sp + 0x70]
  6313: 95 11 88 00              sp = sp + 0x88
  6317: 32 00                    ret
      :                          @445 [@dyn 63]
  6319: 32 00                    ret
      :                          @446 [@dyn 64]
  6321: 95 11 80                 sp = sp + 0xffffffffffffff80
  6324: 7b 10 78                 u64 [sp + 0x78] = ra
  6327: 7b 15 70                 u64 [sp + 0x70] = s0
  6330: 7b 16 68                 u64 [sp + 0x68] = s1
  6333: 64 92                    t0 = a2
  6335: 33 00                    ra = 0
  6337: 33 0b                    a4 = 0
  6339: 33 05                    s0 = 0
  6341: 14 03 ff fe fe fe fe fe fe fe t1 = 0xfefefefefefefeff
  6351: 33 0a 0a 0a 0a 0a        a3 = 0xa0a0a0a
  6357: 14 04 0a 0a 0a 0a 0a 0a 0a 0a t2 = 0xa0a0a0a0a0a0a0a
  6367: 82 79 10                 a2 = u64 [a0 + 0x10]
  6370: 7b 19 48                 u64 [sp + 0x48] = a2
  6373: 82 79                    a2 = u64 [a0]
  6375: 7b 19 38                 u64 [sp + 0x38] = a2
  6378: 82 77 08                 a0 = u64 [a0 + 0x8]
  6381: 7b 17 30                 u64 [sp + 0x30] = a0
  6384: 33 07 0c 00 01           a0 = 0x1000c
  6389: 7b 17 08                 u64 [sp + 0x8] = a0
  6392: 3a 07 08 00 03           a0 = u64 [0x30008]
  6397: 7b 17 60                 u64 [sp + 0x60] = a0
  6400: 7b 18 58                 u64 [sp + 0x58] = a1
  6403: 95 88 08                 a1 = a1 + 0x8
  6406: 7b 18                    u64 [sp] = a1
  6408: 33 0c 0a                 a5 = 0xa
  6411: 7b 12 20                 u64 [sp + 0x20] = t0
  6414: 7b 13 18                 u64 [sp + 0x18] = t1
  6417: 7b 14 10                 u64 [sp + 0x10] = t2
  6420: 28 3b                    jump @450
      :                          @447
  6422: 64 06                    s1 = ra
  6424: c8 89 07                 a0 = a2 + a1
  6427: 7c 77 ff                 a0 = u8 [a0 + 0xffffffffffffffff]
  6430: 95 77 f6                 a0 = a0 + 0xfffffffffffffff6
  6433: 88 77 01                 a0 = a0 <u 0x1
  6436: 01                       fallthrough
      :                          @448
  6437: 82 1a 48                 a3 = u64 [sp + 0x48]
  6440: 78 a7                    u8 [a3] = a0
  6442: 82 17 30                 a0 = u64 [sp + 0x30]
  6445: 82 7a 18                 a3 = u64 [a0 + 0x18]
  6448: 82 17 38                 a0 = u64 [sp + 0x38]
  6451: b4 a0 02 82 00           ra = 130, jump [a3]
      :                          @449 [@dyn 65]
  6456: 64 5b                    a4 = s0
  6458: 82 12 20                 t0 = u64 [sp + 0x20]
  6461: 82 13 18                 t1 = u64 [sp + 0x18]
  6464: 82 14 10                 t2 = u64 [sp + 0x10]
  6467: 64 60                    ra = s1
  6469: 33 0c 0a                 a5 = 0xa
  6472: 82 15 40                 s0 = u64 [sp + 0x40]
  6475: 52 07 64 01              jump @491 if a0 != 0
      :                          @450
  6479: 84 57 ff 00              a0 = s0 & 0xff
  6483: 52 07 58 01              jump @490 if a0 != 0
      :                          @451
  6487: 7b 1b 50                 u64 [sp + 0x50] = a4
  6490: ae 02 0a                 jump @454 if t0 >=u ra
      :                          @452
  6493: 28 ef 00                 jump @481
      :                          @453
  6496: ac 02 ec 00              jump @481 if t0 <u ra
      :                          @454
  6500: c9 02 08                 a1 = t0 - ra
  6503: 82 16 58                 s1 = u64 [sp + 0x58]
  6506: c8 06 06                 s1 = s1 + ra
  6509: 55 18 10 1d              jump @460 if a1 >=u 16
      :                          @455
  6513: aa 02 d8 00              jump @480 if t0 == ra
      :                          @456
  6517: 33 0a                    a3 = 0
  6519: 01                       fallthrough
      :                          @457
  6520: c8 a6 07                 a0 = s1 + a3
  6523: 7c 77                    a0 = u8 [a0]
  6525: aa c7 a5 00              jump @475 if a0 == a5
      :                          @458
  6529: 95 aa 01                 a3 = a3 + 0x1
  6532: ab a8 f4                 jump @457 if a1 != a3
      :                          @459
  6535: 28 c2 00                 jump @480
      :                          @460
  6538: 95 69 07                 a2 = s1 + 0x7
  6541: 84 9a f8                 a3 = a2 & 0xfffffffffffffff8
  6544: c9 6a 07                 a0 = a3 - s1
  6547: d3 6a 0a                 a3 = a3 ^ s1
  6550: 88 aa 01                 a3 = a3 <u 0x1
  6553: 88 7b 01                 a4 = a0 <u 0x1
  6556: d4 ba 0a                 a3 = a3 | a4
  6559: 51 0a 45                 jump @466 if a3 == 0
      :                          @461
  6562: 33 07                    a0 = 0
  6564: 95 8a f0                 a3 = a1 + 0xfffffffffffffff0
  6567: 82 1b                    a4 = u64 [sp]
  6569: c8 0b 0b                 a4 = a4 + ra
  6572: 28 08                    jump @463
      :                          @462
  6574: 82 1b                    a4 = u64 [sp]
  6576: c8 0b 0b                 a4 = a4 + ra
  6579: 01                       fallthrough
      :                          @463
  6580: c8 76 0c                 a5 = s1 + a0
  6583: 82 cc                    a5 = u64 [a5]
  6585: c8 7b 09                 a2 = a4 + a0
  6588: 82 99                    a2 = u64 [a2]
  6590: d3 4c 05                 s0 = a5 ^ t2
  6593: c8 35 05                 s0 = s0 + t1
  6596: e0 c5 0c                 a5 = s0 & ~a5
  6599: d3 49 05                 s0 = a2 ^ t2
  6602: c8 35 05                 s0 = s0 + t1
  6605: e0 95 09                 a2 = s0 & ~a2
  6608: d4 c9 09                 a2 = a2 | a5
  6611: 82 1c 60                 a5 = u64 [sp + 0x60]
  6614: d2 c9 09                 a2 = a2 & a5
  6617: 52 09 1f                 jump @469 if a2 != 0
      :                          @464
  6620: 95 77 10                 a0 = a0 + 0x10
  6623: ae 7a d5                 jump @463 if a3 >=u a0
      :                          @465
  6626: 28 16                    jump @469
      :                          @466
  6628: c8 a6 0b                 a4 = s1 + a3
  6631: 7c bb                    a4 = u8 [a4]
  6633: aa cb 51                 jump @478 if a4 == a5
      :                          @467
  6636: 95 aa 01                 a3 = a3 + 0x1
  6639: ab a7 f5                 jump @466 if a0 != a3
      :                          @468
  6642: 95 8a f0                 a3 = a1 + 0xfffffffffffffff0
  6645: ae 7a b9                 jump @462 if a3 >=u a0
      :                          @469
  6648: aa 87 9b 00              jump @487 if a0 == a1
      :                          @470
  6652: 33 0a                    a3 = 0
  6654: c8 76 06                 s1 = s1 + a0
  6657: c9 72 08                 a1 = t0 - a0
  6660: c9 08 08                 a1 = a1 - ra
  6663: 33 0c 0a                 a5 = 0xa
  6666: 82 1b 50                 a4 = u64 [sp + 0x50]
  6669: 01                       fallthrough
      :                          @471
  6670: c8 a6 09                 a2 = s1 + a3
  6673: 7c 99                    a2 = u8 [a2]
  6675: aa c9 0b                 jump @474 if a2 == a5
      :                          @472
  6678: 95 aa 01                 a3 = a3 + 0x1
  6681: ab a8 f5                 jump @471 if a1 != a3
      :                          @473
  6684: 28 2d                    jump @480
      :                          @474
  6686: c8 7a 0a                 a3 = a3 + a0
  6689: 01                       fallthrough
      :                          @475
  6690: c8 0a 0a                 a3 = a3 + ra
  6693: 95 a0 01                 ra = a3 + 0x1
  6696: ae 2a 38 ff              jump @453 if a3 >=u t0
      :                          @476
  6700: 82 17 58                 a0 = u64 [sp + 0x58]
  6703: c8 7a 0a                 a3 = a3 + a0
  6706: 7c a7                    a0 = u8 [a3]
  6708: ab c7 2c ff              jump @453 if a0 != a5
      :                          @477
  6712: 28 62                    jump @488
      :                          @478
  6714: 82 1b 50                 a4 = u64 [sp + 0x50]
  6717: c8 0a 0a                 a3 = a3 + ra
  6720: 95 a0 01                 ra = a3 + 0x1
  6723: ac 2a e9                 jump @476 if a3 <u t0
      :                          @479
  6726: 28 1a ff                 jump @453
      :                          @480
  6729: 64 20                    ra = t0
  6731: 01                       fallthrough
      :                          @481
  6732: 49 11 40 01              u64 [sp + 64] = 0x1
  6736: 64 b5                    s0 = a4
  6738: 64 26                    s1 = t0
  6740: aa 2b 57                 jump @490 if a4 == t0
      :                          @482
  6743: 82 17 48                 a0 = u64 [sp + 0x48]
  6746: 7c 77                    a0 = u8 [a0]
  6748: 51 07 23                 jump @485 if a0 == 0
      :                          @483
  6751: 82 17 30                 a0 = u64 [sp + 0x30]
  6754: 82 7a 18                 a3 = u64 [a0 + 0x18]
  6757: 33 09 04                 a2 = 0x4
  6760: 82 17 38                 a0 = u64 [sp + 0x38]
  6763: 82 18 08                 a1 = u64 [sp + 0x8]
  6766: 7b 10 28                 u64 [sp + 0x28] = ra
  6769: b4 a0 02 84 00           ra = 132, jump [a3]
      :                          @484 [@dyn 66]
  6774: 82 1b 50                 a4 = u64 [sp + 0x50]
  6777: 82 10 28                 ra = u64 [sp + 0x28]
  6780: 52 07 33                 jump @491 if a0 != 0
      :                          @485
  6783: c9 b6 09                 a2 = s1 - a4
  6786: 82 18 58                 a1 = u64 [sp + 0x58]
  6789: c8 b8 08                 a1 = a1 + a4
  6792: ab b6 8e fe              jump @447 if s1 != a4
      :                          @486
  6796: 64 06                    s1 = ra
  6798: 33 07                    a0 = 0
  6800: 28 95 fe                 jump @448
      :                          @487
  6803: 64 20                    ra = t0
  6805: 82 1b 50                 a4 = u64 [sp + 0x50]
  6808: 28 b4                    jump @481
      :                          @488
  6810: 49 11 40                 u64 [sp + 64] = 0
  6813: 64 05                    s0 = ra
  6815: 64 06                    s1 = ra
  6817: 82 17 48                 a0 = u64 [sp + 0x48]
  6820: 7c 77                    a0 = u8 [a0]
  6822: 52 07 b9                 jump @483 if a0 != 0
      :                          @489
  6825: 28 d6                    jump @485
      :                          @490
  6827: 33 07                    a0 = 0
  6829: 28 06                    jump @492
      :                          @491
  6831: 33 07 01                 a0 = 0x1
  6834: 01                       fallthrough
      :                          @492
  6835: 82 10 78                 ra = u64 [sp + 0x78]
  6838: 82 15 70                 s0 = u64 [sp + 0x70]
  6841: 82 16 68                 s1 = u64 [sp + 0x68]
  6844: 95 11 80 00              sp = sp + 0x80
  6848: 32 00                    ret
      :                          @493 [@dyn 67]
  6850: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  6853: 7b 10 20                 u64 [sp + 0x20] = ra
  6856: 7b 15 18                 u64 [sp + 0x18] = s0
  6859: 7b 16 10                 u64 [sp + 0x10] = s1
  6862: 82 75 10                 s0 = u64 [a0 + 0x10]
  6865: 7c 59                    a2 = u8 [s0]
  6867: 82 7b                    a4 = u64 [a0]
  6869: 82 76 08                 s1 = u64 [a0 + 0x8]
  6872: 51 09 33                 jump @497 if a2 == 0
      :                          @494
  6875: 82 6a 18                 a3 = u64 [s1 + 0x18]
  6878: 7b 18 08                 u64 [sp + 0x8] = a1
  6881: 33 08 0c 00 01           a1 = 0x1000c
  6886: 33 09 04                 a2 = 0x4
  6889: 64 b7                    a0 = a4
  6891: 7b 1b                    u64 [sp] = a4
  6893: b4 a0 02 88 00           ra = 136, jump [a3]
      :                          @495 [@dyn 68]
  6898: 82 18 08                 a1 = u64 [sp + 0x8]
  6901: 82 1b                    a4 = u64 [sp]
  6903: 51 07 14                 jump @497 if a0 == 0
      :                          @496
  6906: 33 07 01                 a0 = 0x1
  6909: 82 10 20                 ra = u64 [sp + 0x20]
  6912: 82 15 18                 s0 = u64 [sp + 0x18]
  6915: 82 16 10                 s1 = u64 [sp + 0x10]
  6918: 95 11 28                 sp = sp + 0x28
  6921: 32 00                    ret
      :                          @497
  6923: 83 87                    i32 a0 = a1 + 0
  6925: 95 77 f6                 a0 = a0 + 0xfffffffffffffff6
  6928: 88 77 01                 a0 = a0 <u 0x1
  6931: 78 57                    u8 [s0] = a0
  6933: 82 6c 20                 a5 = u64 [s1 + 0x20]
  6936: 64 b7                    a0 = a4
  6938: 82 10 20                 ra = u64 [sp + 0x20]
  6941: 82 15 18                 s0 = u64 [sp + 0x18]
  6944: 82 16 10                 s1 = u64 [sp + 0x10]
  6947: 95 11 28                 sp = sp + 0x28
  6950: 32 0c                    jump [a5]
      :                          @498 [@dyn 69]
  6952: 64 8a                    a3 = a1
  6954: 33 08 48 02 01           a1 = 0x10248
  6959: 64 a9                    a2 = a3
  6961: 28 9f fb                 jump @407
      :                          @499
  6964: 51 08 9b 00              jump @520 if a1 == 0
      :                          @500
  6968: 64 79                    a2 = a0
  6970: 7c 77                    a0 = u8 [a0]
  6972: 51 07 91 00              jump @519 if a0 == 0
      :                          @501
  6976: 51 27 ff 00 90 00        jump @521 if a0 == 255
      :                          @502
  6982: 6c 7a                    a3 = sext.b a0
  6984: 57 0a 09                 jump @504 if a3 <s 0
      :                          @503
  6987: 33 0a                    a3 = 0
  6989: 33 08                    a1 = 0
  6991: 28 73                    jump @518
      :                          @504
  6993: 55 27 c0 00 0d           jump @506 if a0 >=u 192
      :                          @505
  6998: 33 0a 01                 a3 = 0x1
  7001: 33 0b 80                 a4 = 0xffffffffffffff80
  7004: 28 4a                    jump @515
      :                          @506
  7006: 55 27 e0 00 0e           jump @508 if a0 >=u 224
      :                          @507
  7011: 33 0a 02                 a3 = 0x2
  7014: 33 0b 40 ff              a4 = 0xffffffffffffff40
  7018: 28 3c                    jump @515
      :                          @508
  7020: 55 27 f0 00 0e           jump @510 if a0 >=u 240
      :                          @509
  7025: 33 0a 03                 a3 = 0x3
  7028: 33 0b 20 ff              a4 = 0xffffffffffffff20
  7032: 28 2e                    jump @515
      :                          @510
  7034: 55 27 f8 00 0e           jump @512 if a0 >=u 248
      :                          @511
  7039: 33 0a 04                 a3 = 0x4
  7042: 33 0b 10 ff              a4 = 0xffffffffffffff10
  7046: 28 20                    jump @515
      :                          @512
  7048: 55 27 fc 00 0e           jump @514 if a0 >=u 252
      :                          @513
  7053: 33 0a 05                 a3 = 0x5
  7056: 33 0b 08 ff              a4 = 0xffffffffffffff08
  7060: 28 12                    jump @515
      :                          @514
  7062: 88 7a fe 00              a3 = a0 <u 0xfe
  7066: 33 0b 04 ff              a4 = 0xffffffffffffff04
  7070: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  7074: 85 aa 07                 a3 = a3 ^ 0x7
  7077: 01                       fallthrough
      :                          @515
  7078: ae 8a 2b                 jump @522 if a3 >=u a1
      :                          @516
  7081: 33 08                    a1 = 0
  7083: c8 b7 07                 a0 = a0 + a4
  7086: 64 ab                    a4 = a3
  7088: 01                       fallthrough
      :                          @517
  7089: c8 b9 0c                 a5 = a2 + a4
  7092: 7c cc                    a5 = u8 [a5]
  7094: 97 88 08                 a1 = a1 << 0x8
  7097: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  7100: d4 c8 08                 a1 = a1 | a5
  7103: 52 0b f2                 jump @517 if a4 != 0
      :                          @518
  7106: 8a a9 03                 i32 a2 = a3 << 0x3
  7109: cf 97 07                 a0 = a0 << a2
  7112: c8 87 07                 a0 = a0 + a1
  7115: 32 00                    ret
      :                          @519
  7117: 32 00                    ret
      :                          @520
  7119: 00                       trap
      :                          @521
  7120: 00                       trap
      :                          @522
  7121: 00                       trap
      :                          @523 [@dyn 70]
  7122: 95 11 68 ff              sp = sp + 0xffffffffffffff68
  7126: 7b 10 90 00              u64 [sp + 0x90] = ra
  7130: 7b 15 88 00              u64 [sp + 0x88] = s0
  7134: 7b 16 80 00              u64 [sp + 0x80] = s1
  7138: 64 85                    s0 = a1
  7140: 82 86 28                 s1 = u64 [a1 + 0x28]
  7143: 82 8a 20                 a3 = u64 [a1 + 0x20]
  7146: 82 6b 18                 a4 = u64 [s1 + 0x18]
  7149: 7b 17 10                 u64 [sp + 0x10] = a0
  7152: 33 08 40 02 01           a1 = 0x10240
  7157: 33 09 01                 a2 = 0x1
  7160: 7b 1a 18                 u64 [sp + 0x18] = a3
  7163: 64 a7                    a0 = a3
  7165: 7b 1b 08                 u64 [sp + 0x8] = a4
  7168: b4 b0 02 8e 00           ra = 142, jump [a4]
      :                          @524 [@dyn 71]
  7173: 51 07 09                 jump @526 if a0 == 0
      :                          @525
  7176: 33 09 01                 a2 = 0x1
  7179: 28 d2 00                 jump @538
      :                          @526
  7182: 80 58 34                 a1 = u32 [s0 + 0x34]
  7185: 84 87 04                 a0 = a1 & 0x4
  7188: 52 07 21                 jump @530 if a0 != 0
      :                          @527
  7191: 82 17 10                 a0 = u64 [sp + 0x10]
  7194: 64 58                    a1 = s0
  7196: 50 20 90 00 d5 00        ra = 144, jump @539
      :                          @528 [@dyn 72]
  7202: 33 09 01                 a2 = 0x1
  7205: 52 07 b8 00              jump @538 if a0 != 0
      :                          @529
  7209: 82 57 28                 a0 = u64 [s0 + 0x28]
  7212: 82 5a 20                 a3 = u64 [s0 + 0x20]
  7215: 82 7b 18                 a4 = u64 [a0 + 0x18]
  7218: 28 99 00                 jump @536
      :                          @530
  7221: 7b 18                    u64 [sp] = a1
  7223: 33 08 7a 02 01           a1 = 0x1027a
  7228: 33 09 01                 a2 = 0x1
  7231: 82 17 18                 a0 = u64 [sp + 0x18]
  7234: 82 1a 08                 a3 = u64 [sp + 0x8]
  7237: b4 a0 02 92 00           ra = 146, jump [a3]
      :                          @531 [@dyn 73]
  7242: 33 09 01                 a2 = 0x1
  7245: 82 18 18                 a1 = u64 [sp + 0x18]
  7248: 52 07 8d 00              jump @538 if a0 != 0
      :                          @532
  7252: 46 11 3f 01              u8 [sp + 63] = 0x1
  7256: 7b 18 20                 u64 [sp + 0x20] = a1
  7259: 7b 16 28                 u64 [sp + 0x28] = s1
  7262: 95 17 3f                 a0 = sp + 0x3f
  7265: 7b 17 30                 u64 [sp + 0x30] = a0
  7268: 81 57 30                 a0 = i32 [s0 + 0x30]
  7271: 7c 58 38                 a1 = u8 [s0 + 0x38]
  7274: 82 59                    a2 = u64 [s0]
  7276: 82 5a 08                 a3 = u64 [s0 + 0x8]
  7279: 82 5b 10                 a4 = u64 [s0 + 0x10]
  7282: 82 5c 18                 a5 = u64 [s0 + 0x18]
  7285: 82 16                    s1 = u64 [sp]
  7287: 7a 16 74                 u32 [sp + 0x74] = s1
  7290: 7a 17 70                 u32 [sp + 0x70] = a0
  7293: 78 18 78                 u8 [sp + 0x78] = a1
  7296: 7b 19 40                 u64 [sp + 0x40] = a2
  7299: 7b 1a 48                 u64 [sp + 0x48] = a3
  7302: 7b 1b 50                 u64 [sp + 0x50] = a4
  7305: 7b 1c 58                 u64 [sp + 0x58] = a5
  7308: 95 17 20                 a0 = sp + 0x20
  7311: 7b 17 60                 u64 [sp + 0x60] = a0
  7314: 33 07 48 02 01           a0 = 0x10248
  7319: 7b 17 68                 u64 [sp + 0x68] = a0
  7322: 95 18 40                 a1 = sp + 0x40
  7325: 82 17 10                 a0 = u64 [sp + 0x10]
  7328: 50 20 94 00 51           ra = 148, jump @539
      :                          @533 [@dyn 74]
  7333: 52 07 63 ff              jump @525 if a0 != 0
      :                          @534
  7337: 82 18 68                 a1 = u64 [sp + 0x68]
  7340: 82 17 60                 a0 = u64 [sp + 0x60]
  7343: 82 8a 18                 a3 = u64 [a1 + 0x18]
  7346: 33 08 78 02 01           a1 = 0x10278
  7351: 33 09 02                 a2 = 0x2
  7354: b4 a0 02 96 00           ra = 150, jump [a3]
      :                          @535 [@dyn 75]
  7359: 82 1a 18                 a3 = u64 [sp + 0x18]
  7362: 82 1b 08                 a4 = u64 [sp + 0x8]
  7365: 33 09 01                 a2 = 0x1
  7368: 52 07 15                 jump @538 if a0 != 0
      :                          @536
  7371: 33 08 7b 02 01           a1 = 0x1027b
  7376: 33 09 01                 a2 = 0x1
  7379: 64 a7                    a0 = a3
  7381: b4 b0 02 98 00           ra = 152, jump [a4]
      :                          @537 [@dyn 76]
  7386: 64 79                    a2 = a0
  7388: 01                       fallthrough
      :                          @538
  7389: 64 97                    a0 = a2
  7391: 82 10 90 00              ra = u64 [sp + 0x90]
  7395: 82 15 88 00              s0 = u64 [sp + 0x88]
  7399: 82 16 80 00              s1 = u64 [sp + 0x80]
  7403: 95 11 98 00              sp = sp + 0x98
  7407: 32 00                    ret
      :                          @539
  7409: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  7413: 7b 10 80 00              u64 [sp + 0x80] = ra
  7417: 64 82                    t0 = a1
  7419: 80 88 34                 a1 = u32 [a1 + 0x34]
  7422: 84 89 10                 a2 = a1 & 0x10
  7425: 52 09 1b                 jump @542 if a2 != 0
      :                          @540
  7428: 84 88 20                 a1 = a1 & 0x20
  7431: 52 08 46                 jump @545 if a1 != 0
      :                          @541
  7434: 7c 77                    a0 = u8 [a0]
  7436: 33 08 01                 a1 = 0x1
  7439: 64 29                    a2 = t0
  7441: 82 10 80 00              ra = u64 [sp + 0x80]
  7445: 95 11 88 00              sp = sp + 0x88
  7449: 28 09 f6                 jump @343
      :                          @542
  7452: 7c 77                    a0 = u8 [a0]
  7454: 33 0a 81 00              a3 = 0x81
  7458: 95 18 7f                 a1 = sp + 0x7f
  7461: 33 03 57                 t1 = 0x57
  7464: 01                       fallthrough
      :                          @543
  7465: 64 ab                    a4 = a3
  7467: 84 7a 0f                 a3 = a0 & 0xf
  7470: 97 77 38                 a0 = a0 << 0x38
  7473: 98 77 3c                 a0 = a0 >> 0x3c
  7476: 88 ac 0a                 a5 = a3 <u 0xa
  7479: 33 09 30                 a2 = 0x30
  7482: da c3 09                 a2 = t1 if a5 == 0
  7485: be a9 09                 i32 a2 = a2 + a3
  7488: 78 89                    u8 [a1] = a2
  7490: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
  7493: 95 ba ff                 a3 = a4 + 0xffffffffffffffff
  7496: 52 07 e1                 jump @543 if a0 != 0
      :                          @544
  7499: 28 31                    jump @547
      :                          @545
  7501: 7c 77                    a0 = u8 [a0]
  7503: 33 0a 81 00              a3 = 0x81
  7507: 95 18 7f                 a1 = sp + 0x7f
  7510: 33 03 37                 t1 = 0x37
  7513: 01                       fallthrough
      :                          @546
  7514: 64 ab                    a4 = a3
  7516: 84 7a 0f                 a3 = a0 & 0xf
  7519: 97 77 38                 a0 = a0 << 0x38
  7522: 98 77 3c                 a0 = a0 >> 0x3c
  7525: 88 ac 0a                 a5 = a3 <u 0xa
  7528: 33 09 30                 a2 = 0x30
  7531: da c3 09                 a2 = t1 if a5 == 0
  7534: be a9 09                 i32 a2 = a2 + a3
  7537: 78 89                    u8 [a1] = a2
  7539: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
  7542: 95 ba ff                 a3 = a4 + 0xffffffffffffffff
  7545: 52 07 e1                 jump @546 if a0 != 0
      :                          @547
  7548: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
  7551: 56 27 80 00 2b           jump @550 if a0 >u 128
      :                          @548
  7556: 9a ac 81 00              a5 = 0x81 - a3
  7560: 64 1b                    a4 = sp
  7562: c8 7b 0b                 a4 = a4 + a0
  7565: 33 09 7c 02 01           a2 = 0x1027c
  7570: 33 08 01                 a1 = 0x1
  7573: 33 0a 02                 a3 = 0x2
  7576: 64 27                    a0 = t0
  7578: 50 20 9a 00 b5 f6        ra = 154, jump @353
      :                          @549 [@dyn 77]
  7584: 82 10 80 00              ra = u64 [sp + 0x80]
  7588: 95 11 88 00              sp = sp + 0x88
  7592: 32 00                    ret
      :                          @550
  7594: 00                       trap
