// RO data = 888/888 bytes
// RW data = 16/65776 bytes
// Stack size = 65536 bytes
// RO data = [109, 101, 103, 40, 109, 101, 103, 32, 114, 101, 97, 100, 32, 32, 32, 32, 32, 114, 101, 97, 100, 32, 102, 114, 111, 109, 32, 115, 101, 114, 118, 105, 99, 101, 32, 32, 102, 105, 98, 40, 110, 61, 41, 61, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 16, 0, 1, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 35, 0, 1, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 42, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 32, 116, 114, 105, 98, 40, 110, 61, 116, 114, 97, 110, 115, 102, 101, 114, 4, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 16, 0, 1, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 112, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 42, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 42, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 32, 119, 114, 105, 116, 101, 40, 110, 61, 41, 32, 110, 117, 109, 95, 116, 114, 97, 110, 115, 102, 101, 114, 115, 61, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 224, 0, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 233, 0, 1, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 32, 116, 114, 97, 110, 115, 102, 101, 114, 40, 100, 101, 115, 116, 58, 44, 32, 97, 109, 111, 117, 110, 116, 61, 44, 32, 103, 97, 115, 95, 97, 118, 97, 105, 108, 61, 41, 32, 82, 101, 115, 117, 108, 116, 58, 32, 0, 0, 56, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 1, 1, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 63, 1, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 72, 1, 1, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 84, 1, 1, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 77, 101, 103, 97, 116, 114, 111, 110, 32, 111, 110, 95, 116, 114, 97, 110, 115, 102, 101, 114, 32, 103, 97, 115, 58, 32, 103, 111, 116, 32, 32, 40, 114, 101, 99, 111, 114, 100, 101, 100, 32, 97, 116, 32, 107, 101, 121, 32, 52, 41, 0, 0, 0, 0, 0, 0, 176, 1, 1, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 206, 1, 1, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 130, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 44, 10, 10, 93, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 119, 114, 105, 116, 101, 95, 114, 101, 115, 117, 108, 116, 32, 107, 101, 121, 61, 44, 32, 114, 101, 115, 117, 108, 116, 61, 62, 3, 1, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 79, 3, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0]
// RW data = [75, 89, 134, 56, 214, 197, 109, 52, 128, 128, 128, 128, 128, 128, 128, 128]
// Instructions = 2481
// Code size = 7534 bytes

      :                          @0
     0: 28 3f 02 00 00           jump @39
      :                          @1
     5: 28 33 03 00 00           jump @67
      :                          @2
    10: 28 e7 0b                 jump @204
      :                          @3 [@dyn 1]
    13: 95 11 78 ff              sp = sp + 0xffffffffffffff78
    17: 7b 10 80 00              u64 [sp + 0x80] = ra
    21: 64 82                    t0 = a1
    23: 80 88 34                 a1 = u32 [a1 + 0x34]
    26: 84 89 10                 a2 = a1 & 0x10
    29: 52 09 28                 jump @6 if a2 != 0
      :                          @4
    32: 84 88 20                 a1 = a1 & 0x20
    35: 52 08 52                 jump @9 if a1 != 0
      :                          @5
    38: 81 77                    a0 = i32 [a0]
    40: 89 79                    a2 = a0 <s 0
    42: 85 98 01                 a1 = a2 ^ 0x1
    45: 97 7a 20                 a3 = a0 << 0x20
    48: 98 aa 20                 a3 = a3 >> 0x20
    51: 9a 77                    a0 = -a0
    53: da 9a 07                 a0 = a3 if a2 == 0
    56: 64 29                    a2 = t0
    58: 82 10 80 00              ra = u64 [sp + 0x80]
    62: 95 11 88 00              sp = sp + 0x88
    66: 28 a4 12                 jump @347
      :                          @6
    69: 81 7a                    a3 = i32 [a0]
    71: 33 08 81 00              a1 = 0x81
    75: 95 17 7f                 a0 = sp + 0x7f
    78: 33 03 57                 t1 = 0x57
    81: 01                       fallthrough
      :                          @7
    82: 64 8b                    a4 = a1
    84: 8b ac 04                 i32 a5 = a3 >> 0x4
    87: 84 aa 0f                 a3 = a3 & 0xf
    90: 88 a8 0a                 a1 = a3 <u 0xa
    93: 33 09 30                 a2 = 0x30
    96: da 83 09                 a2 = t1 if a1 == 0
    99: be a9 09                 i32 a2 = a2 + a3
   102: 78 79                    u8 [a0] = a2
   104: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   107: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   110: 64 ca                    a3 = a5
   112: 52 0c e2                 jump @7 if a5 != 0
      :                          @8
   115: 28 30                    jump @11
      :                          @9
   117: 81 7a                    a3 = i32 [a0]
   119: 33 08 81 00              a1 = 0x81
   123: 95 17 7f                 a0 = sp + 0x7f
   126: 33 03 37                 t1 = 0x37
   129: 01                       fallthrough
      :                          @10
   130: 64 8b                    a4 = a1
   132: 8b ac 04                 i32 a5 = a3 >> 0x4
   135: 84 aa 0f                 a3 = a3 & 0xf
   138: 88 a8 0a                 a1 = a3 <u 0xa
   141: 33 09 30                 a2 = 0x30
   144: da 83 09                 a2 = t1 if a1 == 0
   147: be a9 09                 i32 a2 = a2 + a3
   150: 78 79                    u8 [a0] = a2
   152: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   155: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   158: 64 ca                    a3 = a5
   160: 52 0c e2                 jump @10 if a5 != 0
      :                          @11
   163: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   166: 56 27 80 00 2a           jump @14 if a0 >u 128
      :                          @12
   171: 9a 8c 81 00              a5 = 0x81 - a1
   175: 64 1b                    a4 = sp
   177: c8 7b 0b                 a4 = a4 + a0
   180: 33 09 74 02 01           a2 = 0x10274
   185: 33 08 01                 a1 = 0x1
   188: 33 0a 02                 a3 = 0x2
   191: 64 27                    a0 = t0
   193: 50 10 04 52 13           ra = 4, jump @357
      :                          @13 [@dyn 2]
   198: 82 10 80 00              ra = u64 [sp + 0x80]
   202: 95 11 88 00              sp = sp + 0x88
   206: 32 00                    ret
      :                          @14
   208: 00                       trap
      :                          @15 [@dyn 3]
   209: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   213: 7b 10 80 00              u64 [sp + 0x80] = ra
   217: 64 82                    t0 = a1
   219: 80 88 34                 a1 = u32 [a1 + 0x34]
   222: 84 89 10                 a2 = a1 & 0x10
   225: 52 09 1b                 jump @18 if a2 != 0
      :                          @16
   228: 84 88 20                 a1 = a1 & 0x20
   231: 52 08 45                 jump @21 if a1 != 0
      :                          @17
   234: 80 77                    a0 = u32 [a0]
   236: 33 08 01                 a1 = 0x1
   239: 64 29                    a2 = t0
   241: 82 10 80 00              ra = u64 [sp + 0x80]
   245: 95 11 88 00              sp = sp + 0x88
   249: 28 ed 11                 jump @347
      :                          @18
   252: 81 7a                    a3 = i32 [a0]
   254: 33 08 81 00              a1 = 0x81
   258: 95 17 7f                 a0 = sp + 0x7f
   261: 33 03 57                 t1 = 0x57
   264: 01                       fallthrough
      :                          @19
   265: 64 8b                    a4 = a1
   267: 8b ac 04                 i32 a5 = a3 >> 0x4
   270: 84 aa 0f                 a3 = a3 & 0xf
   273: 88 a8 0a                 a1 = a3 <u 0xa
   276: 33 09 30                 a2 = 0x30
   279: da 83 09                 a2 = t1 if a1 == 0
   282: be a9 09                 i32 a2 = a2 + a3
   285: 78 79                    u8 [a0] = a2
   287: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   290: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   293: 64 ca                    a3 = a5
   295: 52 0c e2                 jump @19 if a5 != 0
      :                          @20
   298: 28 30                    jump @23
      :                          @21
   300: 81 7a                    a3 = i32 [a0]
   302: 33 08 81 00              a1 = 0x81
   306: 95 17 7f                 a0 = sp + 0x7f
   309: 33 03 37                 t1 = 0x37
   312: 01                       fallthrough
      :                          @22
   313: 64 8b                    a4 = a1
   315: 8b ac 04                 i32 a5 = a3 >> 0x4
   318: 84 aa 0f                 a3 = a3 & 0xf
   321: 88 a8 0a                 a1 = a3 <u 0xa
   324: 33 09 30                 a2 = 0x30
   327: da 83 09                 a2 = t1 if a1 == 0
   330: be a9 09                 i32 a2 = a2 + a3
   333: 78 79                    u8 [a0] = a2
   335: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   338: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   341: 64 ca                    a3 = a5
   343: 52 0c e2                 jump @22 if a5 != 0
      :                          @23
   346: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   349: 56 27 80 00 2a           jump @26 if a0 >u 128
      :                          @24
   354: 9a 8c 81 00              a5 = 0x81 - a1
   358: 64 1b                    a4 = sp
   360: c8 7b 0b                 a4 = a4 + a0
   363: 33 09 74 02 01           a2 = 0x10274
   368: 33 08 01                 a1 = 0x1
   371: 33 0a 02                 a3 = 0x2
   374: 64 27                    a0 = t0
   376: 50 10 08 9b 12           ra = 8, jump @357
      :                          @25 [@dyn 4]
   381: 82 10 80 00              ra = u64 [sp + 0x80]
   385: 95 11 88 00              sp = sp + 0x88
   389: 32 00                    ret
      :                          @26
   391: 00                       trap
      :                          @27 [@dyn 5]
   392: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   396: 7b 10 80 00              u64 [sp + 0x80] = ra
   400: 64 82                    t0 = a1
   402: 80 88 34                 a1 = u32 [a1 + 0x34]
   405: 84 89 10                 a2 = a1 & 0x10
   408: 52 09 1b                 jump @30 if a2 != 0
      :                          @28
   411: 84 88 20                 a1 = a1 & 0x20
   414: 52 08 45                 jump @33 if a1 != 0
      :                          @29
   417: 82 77                    a0 = u64 [a0]
   419: 33 08 01                 a1 = 0x1
   422: 64 29                    a2 = t0
   424: 82 10 80 00              ra = u64 [sp + 0x80]
   428: 95 11 88 00              sp = sp + 0x88
   432: 28 36 11                 jump @347
      :                          @30
   435: 82 7a                    a3 = u64 [a0]
   437: 33 08 81 00              a1 = 0x81
   441: 95 17 7f                 a0 = sp + 0x7f
   444: 33 03 57                 t1 = 0x57
   447: 01                       fallthrough
      :                          @31
   448: 64 8b                    a4 = a1
   450: 98 ac 04                 a5 = a3 >> 0x4
   453: 84 aa 0f                 a3 = a3 & 0xf
   456: 88 a8 0a                 a1 = a3 <u 0xa
   459: 33 09 30                 a2 = 0x30
   462: da 83 09                 a2 = t1 if a1 == 0
   465: be a9 09                 i32 a2 = a2 + a3
   468: 78 79                    u8 [a0] = a2
   470: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   473: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   476: 64 ca                    a3 = a5
   478: 52 0c e2                 jump @31 if a5 != 0
      :                          @32
   481: 28 30                    jump @35
      :                          @33
   483: 82 7a                    a3 = u64 [a0]
   485: 33 08 81 00              a1 = 0x81
   489: 95 17 7f                 a0 = sp + 0x7f
   492: 33 03 37                 t1 = 0x37
   495: 01                       fallthrough
      :                          @34
   496: 64 8b                    a4 = a1
   498: 98 ac 04                 a5 = a3 >> 0x4
   501: 84 aa 0f                 a3 = a3 & 0xf
   504: 88 a8 0a                 a1 = a3 <u 0xa
   507: 33 09 30                 a2 = 0x30
   510: da 83 09                 a2 = t1 if a1 == 0
   513: be a9 09                 i32 a2 = a2 + a3
   516: 78 79                    u8 [a0] = a2
   518: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   521: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
   524: 64 ca                    a3 = a5
   526: 52 0c e2                 jump @34 if a5 != 0
      :                          @35
   529: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   532: 56 27 80 00 2a           jump @38 if a0 >u 128
      :                          @36
   537: 9a 8c 81 00              a5 = 0x81 - a1
   541: 64 1b                    a4 = sp
   543: c8 7b 0b                 a4 = a4 + a0
   546: 33 09 74 02 01           a2 = 0x10274
   551: 33 08 01                 a1 = 0x1
   554: 33 0a 02                 a3 = 0x2
   557: 64 27                    a0 = t0
   559: 50 10 0c e4 11           ra = 12, jump @357
      :                          @37 [@dyn 6]
   564: 82 10 80 00              ra = u64 [sp + 0x80]
   568: 95 11 88 00              sp = sp + 0x88
   572: 32 00                    ret
      :                          @38
   574: 00                       trap
      :                          @39 [export #0: 'refine']
   575: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   578: 7b 10 18                 u64 [sp + 0x18] = ra
   581: 7b 15 10                 u64 [sp + 0x10] = s0
   584: 7b 16 08                 u64 [sp + 0x8] = s1
   587: 64 86                    s1 = a1
   589: 64 7a                    a3 = a0
   591: 33 07 00 00 01           a0 = 0x10000
   596: 53 16 04 43              jump @48 if s1 <u 4
      :                          @40
   600: 7d a8                    a1 = i8 [a3]
   602: 33 05 01                 s0 = 0x1
   605: 59 08 37                 jump @47 if a1 >=s 0
      :                          @41
   608: 84 89 ff 00              a2 = a1 & 0xff
   612: 33 05 02                 s0 = 0x2
   615: 53 29 c0 00 2d           jump @47 if a2 <u 192
      :                          @42
   620: 33 05 03                 s0 = 0x3
   623: 53 29 e0 00 25           jump @47 if a2 <u 224
      :                          @43
   628: 33 05 04                 s0 = 0x4
   631: 53 29 f0 00 1d           jump @47 if a2 <u 240
      :                          @44
   636: 33 05 05                 s0 = 0x5
   639: 53 29 f8 00 15           jump @47 if a2 <u 248
      :                          @45
   644: 33 05 06                 s0 = 0x6
   647: 53 29 fc 00 0d           jump @47 if a2 <u 252
      :                          @46
   652: 88 98 fe 00              a1 = a2 <u 0xfe
   656: 9a 85 08                 s0 = 0x8 - a1
   659: 01                       fallthrough
      :                          @47
   660: ae 56 14                 jump @50 if s1 >=u s0
      :                          @48
   663: 33 08                    a1 = 0
   665: 01                       fallthrough
      :                          @49
   666: 82 10 18                 ra = u64 [sp + 0x18]
   669: 82 15 10                 s0 = u64 [sp + 0x10]
   672: 82 16 08                 s1 = u64 [sp + 0x8]
   675: 95 11 20                 sp = sp + 0x20
   678: 32 00                    ret
      :                          @50
   680: 64 a7                    a0 = a3
   682: 64 58                    a1 = s0
   684: 7b 1a                    u64 [sp] = a3
   686: 50 10 0e 49 18           ra = 14, jump @503
      :                          @51 [@dyn 7]
   691: 82 17                    a0 = u64 [sp]
   693: c8 57 07                 a0 = a0 + s0
   696: 7b 17                    u64 [sp] = a0
   698: ab 56 0b                 jump @53 if s1 != s0
      :                          @52
   701: 33 09                    a2 = 0
   703: 33 05                    s0 = 0
   705: 33 08                    a1 = 0
   707: 28 56                    jump @63
      :                          @53
   709: 7d 78                    a1 = i8 [a0]
   711: c9 56 06                 s1 = s1 - s0
   714: 33 05 01                 s0 = 0x1
   717: 59 08 37                 jump @60 if a1 >=s 0
      :                          @54
   720: 84 89 ff 00              a2 = a1 & 0xff
   724: 33 05 02                 s0 = 0x2
   727: 53 29 c0 00 2d           jump @60 if a2 <u 192
      :                          @55
   732: 33 05 03                 s0 = 0x3
   735: 53 29 e0 00 25           jump @60 if a2 <u 224
      :                          @56
   740: 33 05 04                 s0 = 0x4
   743: 53 29 f0 00 1d           jump @60 if a2 <u 240
      :                          @57
   748: 33 05 05                 s0 = 0x5
   751: 53 29 f8 00 15           jump @60 if a2 <u 248
      :                          @58
   756: 33 05 06                 s0 = 0x6
   759: 53 29 fc 00 0d           jump @60 if a2 <u 252
      :                          @59
   764: 88 98 fe 00              a1 = a2 <u 0xfe
   768: 9a 85 08                 s0 = 0x8 - a1
   771: 01                       fallthrough
      :                          @60
   772: ac 56 33                 jump @66 if s1 <u s0
      :                          @61
   775: 64 58                    a1 = s0
   777: 50 10 10 ee 17           ra = 16, jump @503
      :                          @62 [@dyn 8]
   782: e4 56 09                 a2 = maxu(s1, s0)
   785: c9 59 09                 a2 = a2 - s0
   788: 64 78                    a1 = a0
   790: ac 79 0f                 jump @64 if a2 <u a0
      :                          @63
   793: e4 89 07                 a0 = maxu(a2, a1)
   796: c9 87 07                 a0 = a0 - a1
   799: 33 09 20                 a2 = 0x20
   802: ae 97 0d                 jump @65 if a0 >=u a2
      :                          @64
   805: 33 08                    a1 = 0
   807: 33 07 00 00 01           a0 = 0x10000
   812: 28 6e ff                 jump @49
      :                          @65
   815: 82 17                    a0 = u64 [sp]
   817: c8 57 07                 a0 = a0 + s0
   820: 28 66 ff                 jump @49
      :                          @66
   823: 00                       trap
      :                          @67 [export #1: 'accumulate']
   824: 95 11 a0 fe              sp = sp + 0xfffffffffffffea0
   828: 7b 10 58 01              u64 [sp + 0x158] = ra
   832: 7b 15 50 01              u64 [sp + 0x150] = s0
   836: 7b 16 48 01              u64 [sp + 0x148] = s1
   840: 33 09 00 00 01           a2 = 0x10000
   845: 51 08 82 01              jump @113 if a1 == 0
      :                          @68
   849: 64 86                    s1 = a1
   851: 7d 78                    a1 = i8 [a0]
   853: 33 05 01                 s0 = 0x1
   856: 59 08 37                 jump @75 if a1 >=s 0
      :                          @69
   859: 84 8a ff 00              a3 = a1 & 0xff
   863: 33 05 02                 s0 = 0x2
   866: 53 2a c0 00 2d           jump @75 if a3 <u 192
      :                          @70
   871: 33 05 03                 s0 = 0x3
   874: 53 2a e0 00 25           jump @75 if a3 <u 224
      :                          @71
   879: 33 05 04                 s0 = 0x4
   882: 53 2a f0 00 1d           jump @75 if a3 <u 240
      :                          @72
   887: 33 05 05                 s0 = 0x5
   890: 53 2a f8 00 15           jump @75 if a3 <u 248
      :                          @73
   895: 33 05 06                 s0 = 0x6
   898: 53 2a fc 00 0d           jump @75 if a3 <u 252
      :                          @74
   903: 88 a8 fe 00              a1 = a3 <u 0xfe
   907: 9a 85 08                 s0 = 0x8 - a1
   910: 01                       fallthrough
      :                          @75
   911: ae 56 08                 jump @77 if s1 >=u s0
      :                          @76
   914: 33 08                    a1 = 0
   916: 28 3b 01                 jump @113
      :                          @77
   919: 64 58                    a1 = s0
   921: 7b 17 60                 u64 [sp + 0x60] = a0
   924: 50 10 12 5b 17           ra = 18, jump @503
      :                          @78 [@dyn 9]
   929: aa 56 26 01              jump @112 if s1 == s0
      :                          @79
   933: 82 17 60                 a0 = u64 [sp + 0x60]
   936: c8 57 07                 a0 = a0 + s0
   939: 7d 78                    a1 = i8 [a0]
   941: c9 56 06                 s1 = s1 - s0
   944: 33 05 01                 s0 = 0x1
   947: 59 08 37                 jump @86 if a1 >=s 0
      :                          @80
   950: 84 89 ff 00              a2 = a1 & 0xff
   954: 33 05 02                 s0 = 0x2
   957: 53 29 c0 00 2d           jump @86 if a2 <u 192
      :                          @81
   962: 33 05 03                 s0 = 0x3
   965: 53 29 e0 00 25           jump @86 if a2 <u 224
      :                          @82
   970: 33 05 04                 s0 = 0x4
   973: 53 29 f0 00 1d           jump @86 if a2 <u 240
      :                          @83
   978: 33 05 05                 s0 = 0x5
   981: 53 29 f8 00 15           jump @86 if a2 <u 248
      :                          @84
   986: 33 05 06                 s0 = 0x6
   989: 53 29 fc 00 0d           jump @86 if a2 <u 252
      :                          @85
   994: 88 98 fe 00              a1 = a2 <u 0xfe
   998: 9a 85 08                 s0 = 0x8 - a1
  1001: 01                       fallthrough
      :                          @86
  1002: ac 56 dd 00              jump @112 if s1 <u s0
      :                          @87
  1006: 64 58                    a1 = s0
  1008: 7b 17 60                 u64 [sp + 0x60] = a0
  1011: 50 10 14 04 17           ra = 20, jump @503
      :                          @88 [@dyn 10]
  1016: 82 17 60                 a0 = u64 [sp + 0x60]
  1019: c8 57 07                 a0 = a0 + s0
  1022: c9 56 0a                 a3 = s1 - s0
  1025: ab 56 07                 jump @90 if s1 != s0
      :                          @89
  1028: 33 05                    s0 = 0
  1030: 28 42                    jump @98
      :                          @90
  1032: 7d 78                    a1 = i8 [a0]
  1034: 33 05 01                 s0 = 0x1
  1037: 59 08 37                 jump @97 if a1 >=s 0
      :                          @91
  1040: 84 89 ff 00              a2 = a1 & 0xff
  1044: 33 05 02                 s0 = 0x2
  1047: 53 29 c0 00 2d           jump @97 if a2 <u 192
      :                          @92
  1052: 33 05 03                 s0 = 0x3
  1055: 53 29 e0 00 25           jump @97 if a2 <u 224
      :                          @93
  1060: 33 05 04                 s0 = 0x4
  1063: 53 29 f0 00 1d           jump @97 if a2 <u 240
      :                          @94
  1068: 33 05 05                 s0 = 0x5
  1071: 53 29 f8 00 15           jump @97 if a2 <u 248
      :                          @95
  1076: 33 05 06                 s0 = 0x6
  1079: 53 29 fc 00 0d           jump @97 if a2 <u 252
      :                          @96
  1084: 88 98 fe 00              a1 = a2 <u 0xfe
  1088: 9a 85 08                 s0 = 0x8 - a1
  1091: 01                       fallthrough
      :                          @97
  1092: ac 5a 83 00              jump @112 if a3 <u s0
      :                          @98
  1096: 64 a6                    s1 = a3
  1098: 7b 17 60                 u64 [sp + 0x60] = a0
  1101: 64 58                    a1 = s0
  1103: 50 10 16 a8 16           ra = 22, jump @503
      :                          @99 [@dyn 11]
  1108: 51 07 73                 jump @112 if a0 == 0
      :                          @100
  1111: e4 56 07                 a0 = maxu(s1, s0)
  1114: c9 57 07                 a0 = a0 - s0
  1117: 33 09 00 00 01           a2 = 0x10000
  1122: 53 17 60 30 ff           jump @76 if a0 <u 96
      :                          @101
  1127: 82 18 60                 a1 = u64 [sp + 0x60]
  1130: c8 85 05                 s0 = s0 + a1
  1133: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
  1136: 95 57 60                 a0 = s0 + 0x60
  1139: 7b 17 60                 u64 [sp + 0x60] = a0
  1142: 51 06 6d                 jump @114 if s1 == 0
      :                          @102
  1145: 7d 78                    a1 = i8 [a0]
  1147: 33 05 01                 s0 = 0x1
  1150: 59 08 37                 jump @109 if a1 >=s 0
      :                          @103
  1153: 84 89 ff 00              a2 = a1 & 0xff
  1157: 33 05 02                 s0 = 0x2
  1160: 53 29 c0 00 2d           jump @109 if a2 <u 192
      :                          @104
  1165: 33 05 03                 s0 = 0x3
  1168: 53 29 e0 00 25           jump @109 if a2 <u 224
      :                          @105
  1173: 33 05 04                 s0 = 0x4
  1176: 53 29 f0 00 1d           jump @109 if a2 <u 240
      :                          @106
  1181: 33 05 05                 s0 = 0x5
  1184: 53 29 f8 00 15           jump @109 if a2 <u 248
      :                          @107
  1189: 33 05 06                 s0 = 0x6
  1192: 53 29 fc 00 0d           jump @109 if a2 <u 252
      :                          @108
  1197: 88 98 fe 00              a1 = a2 <u 0xfe
  1201: 9a 85 08                 s0 = 0x8 - a1
  1204: 01                       fallthrough
      :                          @109
  1205: ac 56 3a 07              jump @202 if s1 <u s0
      :                          @110
  1209: 64 58                    a1 = s0
  1211: 50 10 18 3c 16           ra = 24, jump @503
      :                          @111 [@dyn 12]
  1216: 33 09 00 00 01           a2 = 0x10000
  1221: 28 23                    jump @115
      :                          @112
  1223: 33 08                    a1 = 0
  1225: 33 09 00 00 01           a2 = 0x10000
  1230: 01                       fallthrough
      :                          @113
  1231: 64 97                    a0 = a2
  1233: 82 10 58 01              ra = u64 [sp + 0x158]
  1237: 82 15 50 01              s0 = u64 [sp + 0x150]
  1241: 82 16 48 01              s1 = u64 [sp + 0x148]
  1245: 95 11 60 01              sp = sp + 0x160
  1249: 32 00                    ret
      :                          @114
  1251: 33 05                    s0 = 0
  1253: 33 07                    a0 = 0
  1255: 01                       fallthrough
      :                          @115
  1256: e4 56 08                 a1 = maxu(s1, s0)
  1259: c9 58 08                 a1 = a1 - s0
  1262: e4 78 06                 s1 = maxu(a1, a0)
  1265: c9 76 06                 s1 = s1 - a0
  1268: 53 16 20 9e fe           jump @76 if s1 <u 32
      :                          @116
  1273: 82 18 60                 a1 = u64 [sp + 0x60]
  1276: c8 85 05                 s0 = s0 + a1
  1279: c8 57 07                 a0 = a0 + s0
  1282: 95 66 e0                 s1 = s1 + 0xffffffffffffffe0
  1285: 95 77 20                 a0 = a0 + 0x20
  1288: 7b 17 60                 u64 [sp + 0x60] = a0
  1291: 51 06 51                 jump @127 if s1 == 0
      :                          @117
  1294: 7d 78                    a1 = i8 [a0]
  1296: 33 05 01                 s0 = 0x1
  1299: 59 08 37                 jump @124 if a1 >=s 0
      :                          @118
  1302: 84 89 ff 00              a2 = a1 & 0xff
  1306: 33 05 02                 s0 = 0x2
  1309: 53 29 c0 00 2d           jump @124 if a2 <u 192
      :                          @119
  1314: 33 05 03                 s0 = 0x3
  1317: 53 29 e0 00 25           jump @124 if a2 <u 224
      :                          @120
  1322: 33 05 04                 s0 = 0x4
  1325: 53 29 f0 00 1d           jump @124 if a2 <u 240
      :                          @121
  1330: 33 05 05                 s0 = 0x5
  1333: 53 29 f8 00 15           jump @124 if a2 <u 248
      :                          @122
  1338: 33 05 06                 s0 = 0x6
  1341: 53 29 fc 00 0d           jump @124 if a2 <u 252
      :                          @123
  1346: 88 98 fe 00              a1 = a2 <u 0xfe
  1350: 9a 85 08                 s0 = 0x8 - a1
  1353: 01                       fallthrough
      :                          @124
  1354: ac 56 a5 06              jump @202 if s1 <u s0
      :                          @125
  1358: 64 58                    a1 = s0
  1360: 50 10 1a a7 15           ra = 26, jump @503
      :                          @126 [@dyn 13]
  1365: 33 09 00 00 01           a2 = 0x10000
  1370: 28 05                    jump @128
      :                          @127
  1372: 33 05                    s0 = 0
  1374: 01                       fallthrough
      :                          @128
  1375: ae 65 33 fe              jump @76 if s0 >=u s1
      :                          @129
  1379: 82 17 60                 a0 = u64 [sp + 0x60]
  1382: c8 57 07                 a0 = a0 + s0
  1385: 7c 78                    a1 = u8 [a0]
  1387: 51 08 09                 jump @131 if a1 == 0
      :                          @130
  1390: 33 08                    a1 = 0
  1392: 33 05                    s0 = 0
  1394: 28 7d                    jump @144
      :                          @131
  1396: e4 56 08                 a1 = maxu(s1, s0)
  1399: c9 58 08                 a1 = a1 - s0
  1402: 95 75 01                 s0 = a0 + 0x1
  1405: 33 07 01                 a0 = 0x1
  1408: e4 78 07                 a0 = maxu(a1, a0)
  1411: 33 09 02                 a2 = 0x2
  1414: 95 7a ff                 a3 = a0 + 0xffffffffffffffff
  1417: ae 98 09                 jump @133 if a1 >=u a2
      :                          @132
  1420: 33 06                    s1 = 0
  1422: 33 07                    a0 = 0
  1424: 28 52                    jump @143
      :                          @133
  1426: 7d 57                    a0 = i8 [s0]
  1428: 33 06 01                 s1 = 0x1
  1431: 59 07 37                 jump @140 if a0 >=s 0
      :                          @134
  1434: 84 77 ff 00              a0 = a0 & 0xff
  1438: 33 06 02                 s1 = 0x2
  1441: 53 27 c0 00 2d           jump @140 if a0 <u 192
      :                          @135
  1446: 33 06 03                 s1 = 0x3
  1449: 53 27 e0 00 25           jump @140 if a0 <u 224
      :                          @136
  1454: 33 06 04                 s1 = 0x4
  1457: 53 27 f0 00 1d           jump @140 if a0 <u 240
      :                          @137
  1462: 33 06 05                 s1 = 0x5
  1465: 53 27 f8 00 15           jump @140 if a0 <u 248
      :                          @138
  1470: 33 06 06                 s1 = 0x6
  1473: 53 27 fc 00 0d           jump @140 if a0 <u 252
      :                          @139
  1478: 88 77 fe 00              a0 = a0 <u 0xfe
  1482: 9a 76 08                 s1 = 0x8 - a0
  1485: 01                       fallthrough
      :                          @140
  1486: 7b 1a 60                 u64 [sp + 0x60] = a3
  1489: ac 6a 1f 06              jump @203 if a3 <u s1
      :                          @141
  1493: 64 57                    a0 = s0
  1495: 64 68                    a1 = s1
  1497: 50 10 1c 1e 15           ra = 28, jump @503
      :                          @142 [@dyn 14]
  1502: 82 1a 60                 a3 = u64 [sp + 0x60]
  1505: 01                       fallthrough
      :                          @143
  1506: c8 65 05                 s0 = s0 + s1
  1509: e4 6a 08                 a1 = maxu(a3, s1)
  1512: c9 68 08                 a1 = a1 - s1
  1515: e6 78 08                 a1 = minu(a1, a0)
  1518: 01                       fallthrough
      :                          @144
  1519: 80 57                    a0 = u32 [s0]
  1521: c8 58 08                 a1 = a1 + s0
  1524: 7b 17 68                 u64 [sp + 0x68] = a0
  1527: 80 88 fc                 a1 = u32 [a1 + 0xfffffffffffffffc]
  1530: 7b 18 60                 u64 [sp + 0x60] = a1
  1533: 7b 18 70                 u64 [sp + 0x70] = a1
  1536: 33 08 10 00 03           a1 = 0x30010
  1541: 7b 18 58                 u64 [sp + 0x58] = a1
  1544: 33 06 34 00 03           s1 = 0x30034
  1549: 33 09 01                 a2 = 0x1
  1552: 33 0c 0c                 a5 = 0xc
  1555: 33 0a 34 00 03           a3 = 0x30034
  1560: 33 0b                    a4 = 0
  1562: 0a 03                    ecalli 3 // 'read'
  1564: 33 05 40 00 03           s0 = 0x30040
  1569: 33 09 01                 a2 = 0x1
  1572: 33 0c 0c                 a5 = 0xc
  1575: 82 17 60                 a0 = u64 [sp + 0x60]
  1578: 82 18 58                 a1 = u64 [sp + 0x58]
  1581: 33 0a 40 00 03           a3 = 0x30040
  1586: 33 0b                    a4 = 0
  1588: 0a 03                    ecalli 3 // 'read'
  1590: 39 07 38 00 03           a0 = i32 [0x30038]
  1595: 49 11 50 ff ff fe        u64 [sp + 80] = 0xfffffffffffeffff
  1601: 39 08 34 00 03           a1 = i32 [0x30034]
  1606: 7a 17 78                 u32 [sp + 0x78] = a0
  1609: 39 07 3c 00 03           a0 = i32 [0x3003c]
  1614: 7b 17 60                 u64 [sp + 0x60] = a0
  1617: 34 07 45 00 03           a0 = u8 [0x30045]
  1622: 34 09 44 00 03           a2 = u8 [0x30044]
  1627: 34 0a 46 00 03           a3 = u8 [0x30046]
  1632: 35 0b 47 00 03           a4 = i8 [0x30047]
  1637: 8a 77 08                 i32 a0 = a0 << 0x8
  1640: d4 97 07                 a0 = a0 | a2
  1643: 8a a9 10                 i32 a2 = a3 << 0x10
  1646: 8a ba 18                 i32 a3 = a4 << 0x18
  1649: d4 a9 09                 a2 = a2 | a3
  1652: d4 97 07                 a0 = a0 | a2
  1655: 7a 17 7c                 u32 [sp + 0x7c] = a0
  1658: 34 07 49 00 03           a0 = u8 [0x30049]
  1663: 34 09 48 00 03           a2 = u8 [0x30048]
  1668: 34 0a 4a 00 03           a3 = u8 [0x3004a]
  1673: 34 0b 4b 00 03           a4 = u8 [0x3004b]
  1678: 97 77 08                 a0 = a0 << 0x8
  1681: d4 97 07                 a0 = a0 | a2
  1684: 7b 17 48                 u64 [sp + 0x48] = a0
  1687: 97 aa 10                 a3 = a3 << 0x10
  1690: 97 bb 18                 a4 = a4 << 0x18
  1693: d4 ba 0a                 a3 = a3 | a4
  1696: 7b 1a 40                 u64 [sp + 0x40] = a3
  1699: 7a 18 80 00              u32 [sp + 0x80] = a1
  1703: 95 19 80 00              a2 = sp + 0x80
  1707: 7b 19 b0 00              u64 [sp + 0xb0] = a2
  1711: 33 08 06                 a1 = 0x6
  1714: 7b 18 b8 00              u64 [sp + 0xb8] = a1
  1718: 95 17 68                 a0 = sp + 0x68
  1721: 7b 17 c0 00              u64 [sp + 0xc0] = a0
  1725: 33 07 0a                 a0 = 0xa
  1728: 7b 17 38                 u64 [sp + 0x38] = a0
  1731: 7b 17 c8 00              u64 [sp + 0xc8] = a0
  1735: 7b 19 d0 00              u64 [sp + 0xd0] = a2
  1739: 7b 18 d8 00              u64 [sp + 0xd8] = a1
  1743: 95 17 78                 a0 = sp + 0x78
  1746: 7b 17 e0 00              u64 [sp + 0xe0] = a0
  1750: 7b 18 58                 u64 [sp + 0x58] = a1
  1753: 7b 18 e8 00              u64 [sp + 0xe8] = a1
  1757: 33 07 30 00 01           a0 = 0x10030
  1762: 7b 17 18 01              u64 [sp + 0x118] = a0
  1766: 49 21 20 01 04           u64 [sp + 288] = 0x4
  1771: 49 21 38 01              u64 [sp + 312] = 0
  1775: 95 18 b0 00              a1 = sp + 0xb0
  1779: 7b 18 28 01              u64 [sp + 0x128] = a1
  1783: 49 21 30 01 04           u64 [sp + 304] = 0x4
  1788: 95 17 00 01              a0 = sp + 0x100
  1792: 95 18 18 01              a1 = sp + 0x118
  1796: 50 10 1e b8 08           ra = 30, jump @277
      :                          @145 [@dyn 15]
  1801: 82 15 08 01              s0 = u64 [sp + 0x108]
  1805: 82 1b 10 01              a4 = u64 [sp + 0x110]
  1809: 82 16 00 01              s1 = u64 [sp + 0x100]
  1813: 33 07 02                 a0 = 0x2
  1816: 33 08                    a1 = 0
  1818: 33 09                    a2 = 0
  1820: 64 5a                    a3 = s0
  1822: 33 00 20                 ra = 0x20
  1825: 0a 64                    ecalli 100 // 'log'
  1827: 01                       fallthrough
      :                          @146 [@dyn 16]
  1828: 82 17 50                 a0 = u64 [sp + 0x50]
  1831: c8 67 07                 a0 = a0 + s1
  1834: 53 37 00 00 ff 27        jump @152 if a0 <u 4294901760
      :                          @147
  1840: 33 07 e0 00 03           a0 = 0x300e0
  1845: 95 77 00 00 01           a0 = a0 + 0x10000
  1850: 01                       fallthrough
      :                          @148
  1851: 82 78                    a1 = u64 [a0]
  1853: c9 87 09                 a2 = a0 - a1
  1856: ab 59 11                 jump @152 if a2 != s0
      :                          @149
  1859: c9 68 09                 a2 = a1 - s1
  1862: 01                       fallthrough
      :                          @150
  1863: 82 7a                    a3 = u64 [a0]
  1865: ab 8a f2                 jump @148 if a3 != a1
      :                          @151
  1868: 7b 79                    u64 [a0] = a2
  1870: 33 0b                    a4 = 0
  1872: 01                       fallthrough
      :                          @152
  1873: 82 17 48                 a0 = u64 [sp + 0x48]
  1876: 82 18 40                 a1 = u64 [sp + 0x40]
  1879: d4 87 07                 a0 = a0 | a1
  1882: 7b 17 48                 u64 [sp + 0x48] = a0
  1885: 95 19 80 00              a2 = sp + 0x80
  1889: 7b 19 b0 00              u64 [sp + 0xb0] = a2
  1893: 82 18 58                 a1 = u64 [sp + 0x58]
  1896: 7b 18 b8 00              u64 [sp + 0xb8] = a1
  1900: 95 17 70                 a0 = sp + 0x70
  1903: 7b 17 c0 00              u64 [sp + 0xc0] = a0
  1907: 82 17 38                 a0 = u64 [sp + 0x38]
  1910: 7b 17 c8 00              u64 [sp + 0xc8] = a0
  1914: 7b 19 d0 00              u64 [sp + 0xd0] = a2
  1918: 7b 18 d8 00              u64 [sp + 0xd8] = a1
  1922: 95 17 7c                 a0 = sp + 0x7c
  1925: 7b 17 e0 00              u64 [sp + 0xe0] = a0
  1929: 7b 18 e8 00              u64 [sp + 0xe8] = a1
  1933: 33 07 80 00 01           a0 = 0x10080
  1938: 7b 17 18 01              u64 [sp + 0x118] = a0
  1942: 49 21 20 01 04           u64 [sp + 288] = 0x4
  1947: 49 21 38 01              u64 [sp + 312] = 0
  1951: 95 18 b0 00              a1 = sp + 0xb0
  1955: 7b 18 28 01              u64 [sp + 0x128] = a1
  1959: 49 21 30 01 04           u64 [sp + 304] = 0x4
  1964: 95 17 00 01              a0 = sp + 0x100
  1968: 95 18 18 01              a1 = sp + 0x118
  1972: 50 10 22 08 08           ra = 34, jump @277
      :                          @153 [@dyn 17]
  1977: 82 15 08 01              s0 = u64 [sp + 0x108]
  1981: 82 1b 10 01              a4 = u64 [sp + 0x110]
  1985: 82 16 00 01              s1 = u64 [sp + 0x100]
  1989: 33 07 02                 a0 = 0x2
  1992: 33 08                    a1 = 0
  1994: 33 09                    a2 = 0
  1996: 64 5a                    a3 = s0
  1998: 33 00 24                 ra = 0x24
  2001: 0a 64                    ecalli 100 // 'log'
  2003: 01                       fallthrough
      :                          @154 [@dyn 18]
  2004: 82 17 50                 a0 = u64 [sp + 0x50]
  2007: c8 67 07                 a0 = a0 + s1
  2010: 53 37 00 00 ff 27        jump @160 if a0 <u 4294901760
      :                          @155
  2016: 33 07 e0 00 03           a0 = 0x300e0
  2021: 95 77 00 00 01           a0 = a0 + 0x10000
  2026: 01                       fallthrough
      :                          @156
  2027: 82 78                    a1 = u64 [a0]
  2029: c9 87 09                 a2 = a0 - a1
  2032: ab 59 11                 jump @160 if a2 != s0
      :                          @157
  2035: c9 68 09                 a2 = a1 - s1
  2038: 01                       fallthrough
      :                          @158
  2039: 82 7a                    a3 = u64 [a0]
  2041: ab 8a f2                 jump @156 if a3 != a1
      :                          @159
  2044: 7b 79                    u64 [a0] = a2
  2046: 33 0b                    a4 = 0
  2048: 01                       fallthrough
      :                          @160
  2049: 81 18 78                 a1 = i32 [sp + 0x78]
  2052: 81 19 7c                 a2 = i32 [sp + 0x7c]
  2055: 80 17 80 00              a0 = u32 [sp + 0x80]
  2059: be 89 09                 i32 a2 = a2 + a1
  2062: 7a 19 84 00              u32 [sp + 0x84] = a2
  2066: 82 18 60                 a1 = u64 [sp + 0x60]
  2069: 82 1a 48                 a3 = u64 [sp + 0x48]
  2072: be 8a 0a                 i32 a3 = a3 + a1
  2075: 7b 17 88 00              u64 [sp + 0x88] = a0
  2079: 97 78 01                 a1 = a0 << 0x1
  2082: 95 88 01                 a1 = a1 + 0x1
  2085: 97 88 20                 a1 = a1 << 0x20
  2088: 98 88 20                 a1 = a1 >> 0x20
  2091: 7b 18 90 00              u64 [sp + 0x90] = a1
  2095: 49 21 98 00 40 9c 00     u64 [sp + 152] = 0x9c40
  2102: 48 21 a0 00              u32 [sp + 160] = 0
  2106: 51 07 3d 02              jump @184 if a0 == 0
      :                          @161
  2110: 7b 1a                    u64 [sp] = a3
  2112: 7b 19 08                 u64 [sp + 0x8] = a2
  2115: 33 06                    s1 = 0
  2117: 33 0a                    a3 = 0
  2119: 14 08 ab aa aa aa 00 00 00 00 a1 = 0xaaaaaaab
  2129: ca 87 08                 a1 = a0 * a1
  2132: 98 88 21                 a1 = a1 >> 0x21
  2135: 97 89 01                 a2 = a1 << 0x1
  2138: bf 87 08                 i32 a1 = a0 - a1
  2141: bf 98 08                 i32 a1 = a1 - a2
  2144: 83 89 ff                 i32 a2 = a1 + 0xffffffffffffffff
  2147: 7b 19 20                 u64 [sp + 0x20] = a2
  2150: 86 88 02                 a1 = a1 | 0x2
  2153: 7b 18 18                 u64 [sp + 0x18] = a1
  2156: 33 08 58 00 03           a1 = 0x30058
  2161: 7b 18 40                 u64 [sp + 0x40] = a1
  2164: 33 08 06                 a1 = 0x6
  2167: 7b 18 38                 u64 [sp + 0x38] = a1
  2170: 33 08 0a                 a1 = 0xa
  2173: 7b 18 30                 u64 [sp + 0x30] = a1
  2176: 33 05 e0 00 03           s0 = 0x300e0
  2181: 95 55 00 00 01           s0 = s0 + 0x10000
  2186: 33 08 60 01 01           a1 = 0x10160
  2191: 7b 18 28                 u64 [sp + 0x28] = a1
  2194: 83 77                    i32 a0 = a0 + 0
  2196: 7b 17 10                 u64 [sp + 0x10] = a0
  2199: 28 13                    jump @164
      :                          @162
  2201: 82 16 60                 s1 = u64 [sp + 0x60]
  2204: 82 1a 58                 a3 = u64 [sp + 0x58]
  2207: 01                       fallthrough
      :                          @163
  2208: 83 aa 01                 i32 a3 = a3 + 0x1
  2211: 82 17 10                 a0 = u64 [sp + 0x10]
  2214: aa 7a c7 01              jump @183 if a3 == a0
      :                          @164
  2218: 7a 1a a4 00              u32 [sp + 0xa4] = a3
  2222: 82 17 18                 a0 = u64 [sp + 0x18]
  2225: 7b 1a 58                 u64 [sp + 0x58] = a3
  2228: 52 17 02 dd 00           jump @173 if a0 != 2
      :                          @165
  2233: 82 17 68                 a0 = u64 [sp + 0x68]
  2236: 82 18 88 00              a1 = u64 [sp + 0x88]
  2240: 82 19 98 00              a2 = u64 [sp + 0x98]
  2244: 82 1a 40                 a3 = u64 [sp + 0x40]
  2247: 0a 14                    ecalli 20 // 'transfer'
  2249: 7b 17 a8 00              u64 [sp + 0xa8] = a0
  2253: 83 66 01                 i32 s1 = s1 + 0x1
  2256: 7b 16 60                 u64 [sp + 0x60] = s1
  2259: 7a 16 a0 00              u32 [sp + 0xa0] = s1
  2263: 95 17 a4 00              a0 = sp + 0xa4
  2267: 7b 17 b0 00              u64 [sp + 0xb0] = a0
  2271: 82 17 38                 a0 = u64 [sp + 0x38]
  2274: 7b 17 b8 00              u64 [sp + 0xb8] = a0
  2278: 95 17 68                 a0 = sp + 0x68
  2281: 7b 17 c0 00              u64 [sp + 0xc0] = a0
  2285: 82 17 30                 a0 = u64 [sp + 0x30]
  2288: 7b 17 c8 00              u64 [sp + 0xc8] = a0
  2292: 95 18 88 00              a1 = sp + 0x88
  2296: 7b 18 d0 00              u64 [sp + 0xd0] = a1
  2300: 7b 17 d8 00              u64 [sp + 0xd8] = a0
  2304: 95 18 98 00              a1 = sp + 0x98
  2308: 7b 18 e0 00              u64 [sp + 0xe0] = a1
  2312: 7b 17 e8 00              u64 [sp + 0xe8] = a0
  2316: 95 18 a8 00              a1 = sp + 0xa8
  2320: 7b 18 f0 00              u64 [sp + 0xf0] = a1
  2324: 7b 17 f8 00              u64 [sp + 0xf8] = a0
  2328: 82 17 28                 a0 = u64 [sp + 0x28]
  2331: 7b 17 18 01              u64 [sp + 0x118] = a0
  2335: 49 21 20 01 05           u64 [sp + 288] = 0x5
  2340: 49 21 38 01              u64 [sp + 312] = 0
  2344: 95 18 b0 00              a1 = sp + 0xb0
  2348: 7b 18 28 01              u64 [sp + 0x128] = a1
  2352: 49 21 30 01 05           u64 [sp + 304] = 0x5
  2357: 95 17 00 01              a0 = sp + 0x100
  2361: 95 18 18 01              a1 = sp + 0x118
  2365: 50 10 26 7f 06           ra = 38, jump @277
      :                          @166 [@dyn 19]
  2370: 82 16 08 01              s1 = u64 [sp + 0x108]
  2374: 82 1b 10 01              a4 = u64 [sp + 0x110]
  2378: 82 17 00 01              a0 = u64 [sp + 0x100]
  2382: 7b 17 48                 u64 [sp + 0x48] = a0
  2385: 33 07 02                 a0 = 0x2
  2388: 33 08                    a1 = 0
  2390: 33 09                    a2 = 0
  2392: 64 6a                    a3 = s1
  2394: 33 00 28                 ra = 0x28
  2397: 0a 64                    ecalli 100 // 'log'
  2399: 01                       fallthrough
      :                          @167 [@dyn 20]
  2400: 82 1b 48                 a4 = u64 [sp + 0x48]
  2403: 82 17 50                 a0 = u64 [sp + 0x50]
  2406: c8 b7 07                 a0 = a0 + a4
  2409: 53 37 00 00 ff 21        jump @172 if a0 <u 4294901760
      :                          @168
  2415: 82 57                    a0 = u64 [s0]
  2417: c9 75 08                 a1 = s0 - a0
  2420: ab 68 16                 jump @172 if a1 != s1
      :                          @169
  2423: c9 b7 08                 a1 = a0 - a4
  2426: 01                       fallthrough
      :                          @170
  2427: 82 59                    a2 = u64 [s0]
  2429: ab 79 f2                 jump @168 if a2 != a0
      :                          @171
  2432: 7b 58                    u64 [s0] = a1
  2434: 82 16 60                 s1 = u64 [sp + 0x60]
  2437: 82 1a 58                 a3 = u64 [sp + 0x58]
  2440: 28 09                    jump @173
      :                          @172
  2442: 82 16 60                 s1 = u64 [sp + 0x60]
  2445: 82 1a 58                 a3 = u64 [sp + 0x58]
  2448: 01                       fallthrough
      :                          @173
  2449: 82 17 20                 a0 = u64 [sp + 0x20]
  2452: 55 17 02 0c ff           jump @163 if a0 >=u 2
      :                          @174
  2457: 82 17 70                 a0 = u64 [sp + 0x70]
  2460: 82 18 90 00              a1 = u64 [sp + 0x90]
  2464: 82 19 98 00              a2 = u64 [sp + 0x98]
  2468: 82 1a 40                 a3 = u64 [sp + 0x40]
  2471: 0a 14                    ecalli 20 // 'transfer'
  2473: 7b 17 a8 00              u64 [sp + 0xa8] = a0
  2477: 83 66 01                 i32 s1 = s1 + 0x1
  2480: 7b 16 60                 u64 [sp + 0x60] = s1
  2483: 7a 16 a0 00              u32 [sp + 0xa0] = s1
  2487: 95 17 a4 00              a0 = sp + 0xa4
  2491: 7b 17 b0 00              u64 [sp + 0xb0] = a0
  2495: 82 17 38                 a0 = u64 [sp + 0x38]
  2498: 7b 17 b8 00              u64 [sp + 0xb8] = a0
  2502: 95 17 70                 a0 = sp + 0x70
  2505: 7b 17 c0 00              u64 [sp + 0xc0] = a0
  2509: 82 17 30                 a0 = u64 [sp + 0x30]
  2512: 7b 17 c8 00              u64 [sp + 0xc8] = a0
  2516: 95 18 90 00              a1 = sp + 0x90
  2520: 7b 18 d0 00              u64 [sp + 0xd0] = a1
  2524: 7b 17 d8 00              u64 [sp + 0xd8] = a0
  2528: 95 18 98 00              a1 = sp + 0x98
  2532: 7b 18 e0 00              u64 [sp + 0xe0] = a1
  2536: 7b 17 e8 00              u64 [sp + 0xe8] = a0
  2540: 95 18 a8 00              a1 = sp + 0xa8
  2544: 7b 18 f0 00              u64 [sp + 0xf0] = a1
  2548: 7b 17 f8 00              u64 [sp + 0xf8] = a0
  2552: 82 17 28                 a0 = u64 [sp + 0x28]
  2555: 7b 17 18 01              u64 [sp + 0x118] = a0
  2559: 49 21 20 01 05           u64 [sp + 288] = 0x5
  2564: 49 21 38 01              u64 [sp + 312] = 0
  2568: 95 18 b0 00              a1 = sp + 0xb0
  2572: 7b 18 28 01              u64 [sp + 0x128] = a1
  2576: 49 21 30 01 05           u64 [sp + 304] = 0x5
  2581: 95 17 00 01              a0 = sp + 0x100
  2585: 95 18 18 01              a1 = sp + 0x118
  2589: 50 10 2a 9f 05           ra = 42, jump @277
      :                          @175 [@dyn 21]
  2594: 82 16 08 01              s1 = u64 [sp + 0x108]
  2598: 82 1b 10 01              a4 = u64 [sp + 0x110]
  2602: 82 17 00 01              a0 = u64 [sp + 0x100]
  2606: 7b 17 48                 u64 [sp + 0x48] = a0
  2609: 33 07 02                 a0 = 0x2
  2612: 33 08                    a1 = 0
  2614: 33 09                    a2 = 0
  2616: 64 6a                    a3 = s1
  2618: 33 00 2c                 ra = 0x2c
  2621: 0a 64                    ecalli 100 // 'log'
  2623: 01                       fallthrough
      :                          @176 [@dyn 22]
  2624: 82 1b 48                 a4 = u64 [sp + 0x48]
  2627: 82 17 50                 a0 = u64 [sp + 0x50]
  2630: c8 b7 07                 a0 = a0 + a4
  2633: 53 37 00 00 ff 50 fe     jump @162 if a0 <u 4294901760
      :                          @177
  2640: 82 57                    a0 = u64 [s0]
  2642: c9 75 08                 a1 = s0 - a0
  2645: ab 68 44 fe              jump @162 if a1 != s1
      :                          @178
  2649: c9 b7 08                 a1 = a0 - a4
  2652: 01                       fallthrough
      :                          @179
  2653: 82 59                    a2 = u64 [s0]
  2655: ab 79 f1                 jump @177 if a2 != a0
      :                          @180
  2658: 7b 58                    u64 [s0] = a1
  2660: 33 0a                    a3 = 0
  2662: 01                       fallthrough
      :                          @181
  2663: ab 79 e9                 jump @177 if a2 != a0
      :                          @182
  2666: 28 2f fe                 jump @162
      :                          @183
  2669: 81 17 80 00              a0 = i32 [sp + 0x80]
  2673: 82 19 08                 a2 = u64 [sp + 0x8]
  2676: 82 1a                    a3 = u64 [sp]
  2678: 01                       fallthrough
      :                          @184
  2679: 3d 07 4c 00 03           u32 [0x3004c] = a0
  2684: 33 07 4c 00 03           a0 = 0x3004c
  2689: 3d 09 50 00 03           u32 [0x30050] = a2
  2694: 7b 17 58                 u64 [sp + 0x58] = a0
  2697: 3d 0a 54 00 03           u32 [0x30054] = a3
  2702: 95 17 80 00              a0 = sp + 0x80
  2706: 7b 17 18 01              u64 [sp + 0x118] = a0
  2710: 33 07 06                 a0 = 0x6
  2713: 7b 17 20 01              u64 [sp + 0x120] = a0
  2717: 95 18 84 00              a1 = sp + 0x84
  2721: 7b 18 28 01              u64 [sp + 0x128] = a1
  2725: 7b 17 60                 u64 [sp + 0x60] = a0
  2728: 7b 17 30 01              u64 [sp + 0x130] = a0
  2732: 33 07 c0 00 01           a0 = 0x100c0
  2737: 7b 17 b0 00              u64 [sp + 0xb0] = a0
  2741: 49 21 b8 00 02           u64 [sp + 184] = 0x2
  2746: 49 21 d0 00              u64 [sp + 208] = 0
  2750: 95 18 18 01              a1 = sp + 0x118
  2754: 7b 18 c0 00              u64 [sp + 0xc0] = a1
  2758: 49 21 c8 00 02           u64 [sp + 200] = 0x2
  2763: 95 17 00 01              a0 = sp + 0x100
  2767: 95 18 b0 00              a1 = sp + 0xb0
  2771: 50 10 2e e9 04           ra = 46, jump @277
      :                          @185 [@dyn 23]
  2776: 82 16 08 01              s1 = u64 [sp + 0x108]
  2780: 82 1b 10 01              a4 = u64 [sp + 0x110]
  2784: 82 15 00 01              s0 = u64 [sp + 0x100]
  2788: 33 07 02                 a0 = 0x2
  2791: 33 08                    a1 = 0
  2793: 33 09                    a2 = 0
  2795: 64 6a                    a3 = s1
  2797: 33 00 30                 ra = 0x30
  2800: 0a 64                    ecalli 100 // 'log'
  2802: 01                       fallthrough
      :                          @186 [@dyn 24]
  2803: 82 17 50                 a0 = u64 [sp + 0x50]
  2806: c8 57 07                 a0 = a0 + s0
  2809: 53 37 00 00 ff 25        jump @192 if a0 <u 4294901760
      :                          @187
  2815: 33 07 e0 00 03           a0 = 0x300e0
  2820: 95 77 00 00 01           a0 = a0 + 0x10000
  2825: 01                       fallthrough
      :                          @188
  2826: 82 78                    a1 = u64 [a0]
  2828: c9 87 09                 a2 = a0 - a1
  2831: ab 69 0f                 jump @192 if a2 != s1
      :                          @189
  2834: c9 58 09                 a2 = a1 - s0
  2837: 01                       fallthrough
      :                          @190
  2838: 82 7a                    a3 = u64 [a0]
  2840: ab 8a f2                 jump @188 if a3 != a1
      :                          @191
  2843: 7b 79                    u64 [a0] = a2
  2845: 01                       fallthrough
      :                          @192
  2846: 33 07 10 00 03           a0 = 0x30010
  2851: 33 08 01                 a1 = 0x1
  2854: 33 0a 0c                 a3 = 0xc
  2857: 82 19 58                 a2 = u64 [sp + 0x58]
  2860: 0a 04                    ecalli 4 // 'write'
  2862: 95 17 80 00              a0 = sp + 0x80
  2866: 7b 17 b0 00              u64 [sp + 0xb0] = a0
  2870: 82 17 60                 a0 = u64 [sp + 0x60]
  2873: 7b 17 b8 00              u64 [sp + 0xb8] = a0
  2877: 95 18 84 00              a1 = sp + 0x84
  2881: 7b 18 c0 00              u64 [sp + 0xc0] = a1
  2885: 7b 17 c8 00              u64 [sp + 0xc8] = a0
  2889: 95 17 a0 00              a0 = sp + 0xa0
  2893: 7b 17 d0 00              u64 [sp + 0xd0] = a0
  2897: 33 07 02                 a0 = 0x2
  2900: 7b 17 d8 00              u64 [sp + 0xd8] = a0
  2904: 33 07 00 01 01           a0 = 0x10100
  2909: 7b 17 18 01              u64 [sp + 0x118] = a0
  2913: 49 21 20 01 03           u64 [sp + 288] = 0x3
  2918: 49 21 38 01              u64 [sp + 312] = 0
  2922: 95 18 b0 00              a1 = sp + 0xb0
  2926: 7b 18 28 01              u64 [sp + 0x128] = a1
  2930: 49 21 30 01 03           u64 [sp + 304] = 0x3
  2935: 95 17 00 01              a0 = sp + 0x100
  2939: 95 18 18 01              a1 = sp + 0x118
  2943: 50 10 32 3d 04           ra = 50, jump @277
      :                          @193 [@dyn 25]
  2948: 82 15 08 01              s0 = u64 [sp + 0x108]
  2952: 82 1b 10 01              a4 = u64 [sp + 0x110]
  2956: 82 16 00 01              s1 = u64 [sp + 0x100]
  2960: 33 07 02                 a0 = 0x2
  2963: 33 08                    a1 = 0
  2965: 33 09                    a2 = 0
  2967: 64 5a                    a3 = s0
  2969: 33 00 34                 ra = 0x34
  2972: 0a 64                    ecalli 100 // 'log'
  2974: 01                       fallthrough
      :                          @194 [@dyn 26]
  2975: 82 17 50                 a0 = u64 [sp + 0x50]
  2978: c8 67 07                 a0 = a0 + s1
  2981: 53 37 00 00 ff 27        jump @200 if a0 <u 4294901760
      :                          @195
  2987: 33 07 e0 00 03           a0 = 0x300e0
  2992: 95 77 00 00 01           a0 = a0 + 0x10000
  2997: 01                       fallthrough
      :                          @196
  2998: 82 78                    a1 = u64 [a0]
  3000: c9 87 09                 a2 = a0 - a1
  3003: ab 59 11                 jump @200 if a2 != s0
      :                          @197
  3006: c9 68 09                 a2 = a1 - s1
  3009: 01                       fallthrough
      :                          @198
  3010: 82 7a                    a3 = u64 [a0]
  3012: ab 8a f2                 jump @196 if a3 != a1
      :                          @199
  3015: 7b 79                    u64 [a0] = a2
  3017: 33 0b                    a4 = 0
  3019: 01                       fallthrough
      :                          @200
  3020: 33 05 12 00 03           s0 = 0x30012
  3025: 33 08 4c 00 03           a1 = 0x3004c
  3030: 33 09 0c                 a2 = 0xc
  3033: 33 07 12 00 03           a0 = 0x30012
  3038: 50 10 36 52 06           ra = 54, jump @327
      :                          @201 [@dyn 27]
  3043: 64 57                    a0 = s0
  3045: 0a 19                    ecalli 25 // 'oyield'
  3047: 64 59                    a2 = s0
  3049: 33 08 20                 a1 = 0x20
  3052: 28 e3 f8                 jump @113
      :                          @202
  3055: 00                       trap
      :                          @203
  3056: 00                       trap
      :                          @204 [export #2: 'on_transfer']
  3057: 95 11 e0 fe              sp = sp + 0xfffffffffffffee0
  3061: 7b 10 18 01              u64 [sp + 0x118] = ra
  3065: 7b 15 10 01              u64 [sp + 0x110] = s0
  3069: 7b 16 08 01              u64 [sp + 0x108] = s1
  3073: 49 11 08 ff ff fe        u64 [sp + 8] = 0xfffffffffffeffff
  3079: 0a                       ecalli 0 // 'gas'
  3080: 7b 17 10                 u64 [sp + 0x10] = a0
  3083: 7b 17 18                 u64 [sp + 0x18] = a0
  3086: 46 11 27 04              u8 [sp + 39] = 0x4
  3090: 7b 17 28                 u64 [sp + 0x28] = a0
  3093: 95 17 27                 a0 = sp + 0x27
  3096: 33 08 01                 a1 = 0x1
  3099: 95 19 28                 a2 = sp + 0x28
  3102: 33 0a 08                 a3 = 0x8
  3105: 0a 04                    ecalli 4 // 'write'
  3107: 95 17 27                 a0 = sp + 0x27
  3110: 7b 17 78                 u64 [sp + 0x78] = a0
  3113: 33 07 88 00              a0 = 0x88
  3117: 7b 17 80 00              u64 [sp + 0x80] = a0
  3121: 95 17 18                 a0 = sp + 0x18
  3124: 7b 17 88 00              u64 [sp + 0x88] = a0
  3128: 49 21 98 00 02           u64 [sp + 152] = 0x2
  3133: 49 21 a8 00 02           u64 [sp + 168] = 0x2
  3138: 49 21 b8 00              u64 [sp + 184] = 0
  3142: 14 07 20 00 00 00 10 00 00 00 a0 = 0x1000000020
  3152: 7b 17 c0 00              u64 [sp + 0xc0] = a0
  3156: 46 21 c8 00 03           u8 [sp + 200] = 0x3
  3161: 49 21 d0 00 02           u64 [sp + 208] = 0x2
  3166: 49 21 e0 00 02           u64 [sp + 224] = 0x2
  3171: 49 21 f0 00 01           u64 [sp + 240] = 0x1
  3176: 7b 17 f8 00              u64 [sp + 0xf8] = a0
  3180: 33 07 0a                 a0 = 0xa
  3183: 7b 17                    u64 [sp] = a0
  3185: 7b 17 90 00              u64 [sp + 0x90] = a0
  3189: 46 21 00 01 03           u8 [sp + 256] = 0x3
  3194: 33 07 58 03 01           a0 = 0x10358
  3199: 7b 17 48                 u64 [sp + 0x48] = a0
  3202: 49 11 50 02              u64 [sp + 80] = 0x2
  3206: 95 17 98 00              a0 = sp + 0x98
  3210: 7b 17 68                 u64 [sp + 0x68] = a0
  3213: 49 11 70 02              u64 [sp + 112] = 0x2
  3217: 95 17 78                 a0 = sp + 0x78
  3220: 7b 17 58                 u64 [sp + 0x58] = a0
  3223: 49 11 60 02              u64 [sp + 96] = 0x2
  3227: 95 17 30                 a0 = sp + 0x30
  3230: 95 18 48                 a1 = sp + 0x48
  3233: 50 10 38 1b 03           ra = 56, jump @277
      :                          @205 [@dyn 28]
  3238: 82 15 38                 s0 = u64 [sp + 0x38]
  3241: 82 1b 40                 a4 = u64 [sp + 0x40]
  3244: 82 16 30                 s1 = u64 [sp + 0x30]
  3247: 33 07 02                 a0 = 0x2
  3250: 33 08                    a1 = 0
  3252: 33 09                    a2 = 0
  3254: 64 5a                    a3 = s0
  3256: 33 00 3a                 ra = 0x3a
  3259: 0a 64                    ecalli 100 // 'log'
  3261: 01                       fallthrough
      :                          @206 [@dyn 29]
  3262: 82 17 08                 a0 = u64 [sp + 0x8]
  3265: c8 67 07                 a0 = a0 + s1
  3268: 53 37 00 00 ff 27        jump @212 if a0 <u 4294901760
      :                          @207
  3274: 33 07 e0 00 03           a0 = 0x300e0
  3279: 95 77 00 00 01           a0 = a0 + 0x10000
  3284: 01                       fallthrough
      :                          @208
  3285: 82 78                    a1 = u64 [a0]
  3287: c9 87 09                 a2 = a0 - a1
  3290: ab 59 11                 jump @212 if a2 != s0
      :                          @209
  3293: c9 68 09                 a2 = a1 - s1
  3296: 01                       fallthrough
      :                          @210
  3297: 82 7a                    a3 = u64 [a0]
  3299: ab 8a f2                 jump @208 if a3 != a1
      :                          @211
  3302: 7b 79                    u64 [a0] = a2
  3304: 33 0b                    a4 = 0
  3306: 01                       fallthrough
      :                          @212
  3307: 95 17 10                 a0 = sp + 0x10
  3310: 7b 17 78                 u64 [sp + 0x78] = a0
  3313: 82 17                    a0 = u64 [sp]
  3315: 7b 17 80 00              u64 [sp + 0x80] = a0
  3319: 33 07 e8 01 01           a0 = 0x101e8
  3324: 7b 17 98 00              u64 [sp + 0x98] = a0
  3328: 49 21 a0 00 02           u64 [sp + 160] = 0x2
  3333: 49 21 b8 00              u64 [sp + 184] = 0
  3337: 95 17 78                 a0 = sp + 0x78
  3340: 7b 17 a8 00              u64 [sp + 0xa8] = a0
  3344: 49 21 b0 00 01           u64 [sp + 176] = 0x1
  3349: 95 17 48                 a0 = sp + 0x48
  3352: 95 18 98 00              a1 = sp + 0x98
  3356: 50 10 3c a0 02           ra = 60, jump @277
      :                          @213 [@dyn 30]
  3361: 82 15 50                 s0 = u64 [sp + 0x50]
  3364: 82 1b 58                 a4 = u64 [sp + 0x58]
  3367: 82 16 48                 s1 = u64 [sp + 0x48]
  3370: 33 07 02                 a0 = 0x2
  3373: 33 08                    a1 = 0
  3375: 33 09                    a2 = 0
  3377: 64 5a                    a3 = s0
  3379: 33 00 3e                 ra = 0x3e
  3382: 0a 64                    ecalli 100 // 'log'
  3384: 01                       fallthrough
      :                          @214 [@dyn 31]
  3385: 82 17 08                 a0 = u64 [sp + 0x8]
  3388: c8 67 07                 a0 = a0 + s1
  3391: 53 37 00 00 ff 27        jump @220 if a0 <u 4294901760
      :                          @215
  3397: 33 07 e0 00 03           a0 = 0x300e0
  3402: 95 77 00 00 01           a0 = a0 + 0x10000
  3407: 01                       fallthrough
      :                          @216
  3408: 82 78                    a1 = u64 [a0]
  3410: c9 87 09                 a2 = a0 - a1
  3413: ab 59 11                 jump @220 if a2 != s0
      :                          @217
  3416: c9 68 09                 a2 = a1 - s1
  3419: 01                       fallthrough
      :                          @218
  3420: 82 7a                    a3 = u64 [a0]
  3422: ab 8a f2                 jump @216 if a3 != a1
      :                          @219
  3425: 7b 79                    u64 [a0] = a2
  3427: 33 0b                    a4 = 0
  3429: 01                       fallthrough
      :                          @220
  3430: 33 07 00 00 01           a0 = 0x10000
  3435: 33 08                    a1 = 0
  3437: 82 10 18 01              ra = u64 [sp + 0x118]
  3441: 82 15 10 01              s0 = u64 [sp + 0x110]
  3445: 82 16 08 01              s1 = u64 [sp + 0x108]
  3449: 95 11 20 01              sp = sp + 0x120
  3453: 32 00                    ret
      :                          @221
  3455: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  3458: 7b 10 40                 u64 [sp + 0x40] = ra
  3461: 7b 15 38                 u64 [sp + 0x38] = s0
  3464: 7b 16 30                 u64 [sp + 0x30] = s1
  3467: c8 89 09                 a2 = a2 + a1
  3470: ac 89 52                 jump @229 if a2 <u a1
      :                          @222
  3473: 64 75                    s0 = a0
  3475: 82 77                    a0 = u64 [a0]
  3477: 97 78 01                 a1 = a0 << 0x1
  3480: 33 0a 08                 a3 = 0x8
  3483: e4 a9 09                 a2 = maxu(a2, a3)
  3486: e4 98 06                 s1 = maxu(a1, a2)
  3489: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  3492: 98 88 3f                 a1 = a1 >> 0x3f
  3495: 51 07 12                 jump @224 if a0 == 0
      :                          @223
  3498: 82 59 08                 a2 = u64 [s0 + 0x8]
  3501: 7b 19 18                 u64 [sp + 0x18] = a2
  3504: 49 11 20 01              u64 [sp + 32] = 0x1
  3508: 7b 17 28                 u64 [sp + 0x28] = a0
  3511: 28 06                    jump @225
      :                          @224
  3513: 49 11 20                 u64 [sp + 32] = 0
  3516: 01                       fallthrough
      :                          @225
  3517: 64 17                    a0 = sp
  3519: 95 1a 18                 a3 = sp + 0x18
  3522: 64 69                    a2 = s1
  3524: 50 10 40 32              ra = 64, jump @233
      :                          @226 [@dyn 32]
  3528: 82 18                    a1 = u64 [sp]
  3530: 82 17 08                 a0 = u64 [sp + 0x8]
  3533: 51 08 14                 jump @230 if a1 == 0
      :                          @227
  3536: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  3546: aa 87 0d                 jump @231 if a0 == a1
      :                          @228
  3549: 52 07 18                 jump @232 if a0 != 0
      :                          @229
  3552: 00                       trap
      :                          @230
  3553: 7b 57 08                 u64 [s0 + 0x8] = a0
  3556: 7b 56                    u64 [s0] = s1
  3558: 01                       fallthrough
      :                          @231
  3559: 82 10 40                 ra = u64 [sp + 0x40]
  3562: 82 15 38                 s0 = u64 [sp + 0x38]
  3565: 82 16 30                 s1 = u64 [sp + 0x30]
  3568: 95 11 48                 sp = sp + 0x48
  3571: 32 00                    ret
      :                          @232
  3573: 00                       trap
      :                          @233
  3574: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  3577: 7b 10 30                 u64 [sp + 0x30] = ra
  3580: 7b 15 28                 u64 [sp + 0x28] = s0
  3583: 7b 16 20                 u64 [sp + 0x20] = s1
  3586: 64 95                    s0 = a2
  3588: 64 72                    t0 = a0
  3590: 51 08 79                 jump @243 if a1 == 0
      :                          @234
  3593: 82 a7 08                 a0 = u64 [a3 + 0x8]
  3596: 51 07 7c                 jump @244 if a0 == 0
      :                          @235
  3599: 82 a9 10                 a2 = u64 [a3 + 0x10]
  3602: 51 09 aa 00              jump @251 if a2 == 0
      :                          @236
  3606: 82 a8                    a1 = u64 [a3]
  3608: 33 06 e0 00 03           s1 = 0x300e0
  3613: 33 03 00 00 01           t1 = 0x10000
  3618: c8 36 06                 s1 = s1 + t1
  3621: 01                       fallthrough
      :                          @237
  3622: 82 6a                    a3 = u64 [s1]
  3624: c8 5a 07                 a0 = a3 + s0
  3627: ac a7 cf 00              jump @257 if a0 <u a3
      :                          @238
  3631: 95 7b 01                 a4 = a0 + 0x1
  3634: 88 bc 01                 a5 = a4 <u 0x1
  3637: d8 b3 0b                 a4 = t1 <u a4
  3640: d4 cb 0b                 a4 = a4 | a5
  3643: 52 0b bf 00              jump @257 if a4 != 0
      :                          @239
  3647: 82 6b                    a4 = u64 [s1]
  3649: ab ab e5                 jump @237 if a4 != a3
      :                          @240
  3652: 7b 67                    u64 [s1] = a0
  3654: 33 0c                    a5 = 0
  3656: 7b 12 18                 u64 [sp + 0x18] = t0
  3659: 33 0a e0 00 03           a3 = 0x300e0
  3664: 33 0b 00 00 01           a4 = 0x10000
  3669: 7b 1a                    u64 [sp] = a3
  3671: c8 ba 0a                 a3 = a3 + a4
  3674: c9 7a 07                 a0 = a3 - a0
  3677: 7b 17 10                 u64 [sp + 0x10] = a0
  3680: 7b 18 08                 u64 [sp + 0x8] = a1
  3683: 64 96                    s1 = a2
  3685: 50 10 42 cb 03           ra = 66, jump @327
      :                          @241 [@dyn 33]
  3690: 54 36 00 00 01 98 00     jump @258 if s1 <=u 65536
      :                          @242
  3697: 82 12 18                 t0 = u64 [sp + 0x18]
  3700: 82 18 10                 a1 = u64 [sp + 0x10]
  3703: 33 07                    a0 = 0
  3705: 7b 28 08                 u64 [t0 + 0x8] = a1
  3708: 28 b5 00                 jump @264
      :                          @243
  3711: 49 12 08                 u64 [t0 + 8] = 0
  3714: 33 07 01                 a0 = 0x1
  3717: 28 ac 00                 jump @264
      :                          @244
  3720: 33 09 e0 00 03           a2 = 0x300e0
  3725: 33 07 00 00 01           a0 = 0x10000
  3730: c8 79 09                 a2 = a2 + a0
  3733: 01                       fallthrough
      :                          @245
  3734: 82 9a                    a3 = u64 [a2]
  3736: c8 5a 08                 a1 = a3 + s0
  3739: ac a8 5f                 jump @257 if a1 <u a3
      :                          @246
  3742: 95 8b 01                 a4 = a1 + 0x1
  3745: 88 bc 01                 a5 = a4 <u 0x1
  3748: d8 b7 0b                 a4 = a0 <u a4
  3751: d4 cb 0b                 a4 = a4 | a5
  3754: 52 0b 50                 jump @257 if a4 != 0
      :                          @247
  3757: 82 9b                    a4 = u64 [a2]
  3759: ab ab e7                 jump @245 if a4 != a3
      :                          @248
  3762: 7b 98                    u64 [a2] = a1
  3764: 33 0c                    a5 = 0
  3766: 01                       fallthrough
      :                          @249
  3767: ab ab df                 jump @245 if a4 != a3
      :                          @250
  3770: 28 31                    jump @256
      :                          @251
  3772: 33 09 e0 00 03           a2 = 0x300e0
  3777: 33 07 00 00 01           a0 = 0x10000
  3782: c8 79 09                 a2 = a2 + a0
  3785: 01                       fallthrough
      :                          @252
  3786: 82 9a                    a3 = u64 [a2]
  3788: c8 5a 08                 a1 = a3 + s0
  3791: ac a8 2b                 jump @257 if a1 <u a3
      :                          @253
  3794: 95 8b 01                 a4 = a1 + 0x1
  3797: 88 bc 01                 a5 = a4 <u 0x1
  3800: d8 b7 0b                 a4 = a0 <u a4
  3803: d4 cb 0b                 a4 = a4 | a5
  3806: 52 0b 1c                 jump @257 if a4 != 0
      :                          @254
  3809: 82 9b                    a4 = u64 [a2]
  3811: ab ab e7                 jump @252 if a4 != a3
      :                          @255
  3814: 7b 98                    u64 [a2] = a1
  3816: 33 0c                    a5 = 0
  3818: 01                       fallthrough
      :                          @256
  3819: 33 07 e0 00 04           a0 = 0x400e0
  3824: c9 87 08                 a1 = a0 - a1
  3827: 33 07                    a0 = 0
  3829: 7b 28 08                 u64 [t0 + 0x8] = a1
  3832: 28 39                    jump @264
      :                          @257
  3834: 33 07 01                 a0 = 0x1
  3837: 7b 27 08                 u64 [t0 + 0x8] = a0
  3840: 28 31                    jump @264
      :                          @258
  3842: 64 6c                    a5 = s1
  3844: 82 17                    a0 = u64 [sp]
  3846: 95 77 00 00 01           a0 = a0 + 0x10000
  3851: 82 12 18                 t0 = u64 [sp + 0x18]
  3854: 82 16 08                 s1 = u64 [sp + 0x8]
  3857: 01                       fallthrough
      :                          @259
  3858: 82 78                    a1 = u64 [a0]
  3860: c9 87 09                 a2 = a0 - a1
  3863: ab 69 11                 jump @263 if a2 != s1
      :                          @260
  3866: c9 c8 09                 a2 = a1 - a5
  3869: 01                       fallthrough
      :                          @261
  3870: 82 7a                    a3 = u64 [a0]
  3872: ab 8a f2                 jump @259 if a3 != a1
      :                          @262
  3875: 7b 79                    u64 [a0] = a2
  3877: 33 0b                    a4 = 0
  3879: 01                       fallthrough
      :                          @263
  3880: 82 18 10                 a1 = u64 [sp + 0x10]
  3883: 33 07                    a0 = 0
  3885: 7b 28 08                 u64 [t0 + 0x8] = a1
  3888: 01                       fallthrough
      :                          @264
  3889: 7b 25 10                 u64 [t0 + 0x10] = s0
  3892: 7b 27                    u64 [t0] = a0
  3894: 82 10 30                 ra = u64 [sp + 0x30]
  3897: 82 15 28                 s0 = u64 [sp + 0x28]
  3900: 82 16 20                 s1 = u64 [sp + 0x20]
  3903: 95 11 38                 sp = sp + 0x38
  3906: 32 00                    ret
      :                          @265
  3908: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  3911: 7b 10 40                 u64 [sp + 0x40] = ra
  3914: 7b 15 38                 u64 [sp + 0x38] = s0
  3917: 7b 16 30                 u64 [sp + 0x30] = s1
  3920: 95 88 01                 a1 = a1 + 0x1
  3923: 51 08 53                 jump @273 if a1 == 0
      :                          @266
  3926: 64 75                    s0 = a0
  3928: 82 77                    a0 = u64 [a0]
  3930: 97 79 01                 a2 = a0 << 0x1
  3933: 33 0a 08                 a3 = 0x8
  3936: e4 a8 08                 a1 = maxu(a1, a3)
  3939: e4 89 06                 s1 = maxu(a2, a1)
  3942: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  3945: 98 88 3f                 a1 = a1 >> 0x3f
  3948: 51 07 12                 jump @268 if a0 == 0
      :                          @267
  3951: 82 59 08                 a2 = u64 [s0 + 0x8]
  3954: 7b 19 18                 u64 [sp + 0x18] = a2
  3957: 49 11 20 01              u64 [sp + 32] = 0x1
  3961: 7b 17 28                 u64 [sp + 0x28] = a0
  3964: 28 06                    jump @269
      :                          @268
  3966: 49 11 20                 u64 [sp + 32] = 0
  3969: 01                       fallthrough
      :                          @269
  3970: 64 17                    a0 = sp
  3972: 95 1a 18                 a3 = sp + 0x18
  3975: 64 69                    a2 = s1
  3977: 50 10 44 6d fe           ra = 68, jump @233
      :                          @270 [@dyn 34]
  3982: 82 18                    a1 = u64 [sp]
  3984: 82 17 08                 a0 = u64 [sp + 0x8]
  3987: 51 08 14                 jump @274 if a1 == 0
      :                          @271
  3990: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  4000: aa 87 0d                 jump @275 if a0 == a1
      :                          @272
  4003: 52 07 18                 jump @276 if a0 != 0
      :                          @273
  4006: 00                       trap
      :                          @274
  4007: 7b 57 08                 u64 [s0 + 0x8] = a0
  4010: 7b 56                    u64 [s0] = s1
  4012: 01                       fallthrough
      :                          @275
  4013: 82 10 40                 ra = u64 [sp + 0x40]
  4016: 82 15 38                 s0 = u64 [sp + 0x38]
  4019: 82 16 30                 s1 = u64 [sp + 0x30]
  4022: 95 11 48                 sp = sp + 0x48
  4025: 32 00                    ret
      :                          @276
  4027: 00                       trap
      :                          @277
  4028: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  4031: 7b 10 30                 u64 [sp + 0x30] = ra
  4034: 7b 15 28                 u64 [sp + 0x28] = s0
  4037: 7b 16 20                 u64 [sp + 0x20] = s1
  4040: 64 89                    a2 = a1
  4042: 82 8a 08                 a3 = u64 [a1 + 0x8]
  4045: 64 75                    s0 = a0
  4047: 51 0a 35                 jump @282 if a3 == 0
      :                          @278
  4050: 82 98                    a1 = u64 [a2]
  4052: 33 07                    a0 = 0
  4054: 95 8b 08                 a4 = a1 + 0x8
  4057: 01                       fallthrough
      :                          @279
  4058: 82 bc                    a5 = u64 [a4]
  4060: c8 c7 07                 a0 = a0 + a5
  4063: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  4066: 95 bb 10                 a4 = a4 + 0x10
  4069: 52 0a f5                 jump @279 if a3 != 0
      :                          @280
  4072: 82 9a 18                 a3 = u64 [a2 + 0x18]
  4075: 51 0a 24                 jump @284 if a3 == 0
      :                          @281
  4078: 82 88 08                 a1 = u64 [a1 + 0x8]
  4081: 8e 88                    a1 = a1 >u 0
  4083: 88 7a 10                 a3 = a0 <u 0x10
  4086: 85 aa 01                 a3 = a3 ^ 0x1
  4089: d4 a8 08                 a1 = a1 | a3
  4092: 89 7a                    a3 = a0 <s 0
  4094: e0 a8 08                 a1 = a1 & ~a3
  4097: 52 08 0a                 jump @283 if a1 != 0
      :                          @282
  4100: 33 07                    a0 = 0
  4102: 33 08 01                 a1 = 0x1
  4105: 28 4a                    jump @292
      :                          @283
  4107: 97 77 01                 a0 = a0 << 0x1
  4110: 01                       fallthrough
      :                          @284
  4111: 51 07 40                 jump @291 if a0 == 0
      :                          @285
  4114: 57 07 78                 jump @297 if a0 <s 0
      :                          @286
  4117: 64 52                    t0 = s0
  4119: 33 0b e0 00 03           a4 = 0x300e0
  4124: 33 08 00 00 01           a1 = 0x10000
  4129: c8 8b 0b                 a4 = a4 + a1
  4132: 01                       fallthrough
      :                          @287
  4133: 82 bc                    a5 = u64 [a4]
  4135: c8 7c 0a                 a3 = a5 + a0
  4138: ac ca 5e                 jump @295 if a3 <u a5
      :                          @288
  4141: 95 a5 01                 s0 = a3 + 0x1
  4144: 88 56 01                 s1 = s0 <u 0x1
  4147: d8 58 05                 s0 = a1 <u s0
  4150: d4 65 05                 s0 = s0 | s1
  4153: 52 05 4f                 jump @295 if s0 != 0
      :                          @289
  4156: 82 b6                    s1 = u64 [a4]
  4158: ab c6 e7                 jump @287 if s1 != a5
      :                          @290
  4161: 7b ba                    u64 [a4] = a3
  4163: 33 08 e0 00 04           a1 = 0x400e0
  4168: c9 a8 08                 a1 = a1 - a3
  4171: 64 25                    s0 = t0
  4173: 28 06                    jump @292
      :                          @291
  4175: 33 08 01                 a1 = 0x1
  4178: 01                       fallthrough
      :                          @292
  4179: 7b 17                    u64 [sp] = a0
  4181: 7b 18 08                 u64 [sp + 0x8] = a1
  4184: 49 11 10                 u64 [sp + 16] = 0
  4187: 33 08 08 02 01           a1 = 0x10208
  4192: 64 17                    a0 = sp
  4194: 50 10 46 32 06           ra = 70, jump @411
      :                          @293 [@dyn 35]
  4199: 52 07 22                 jump @296 if a0 != 0
      :                          @294
  4202: 82 17 10                 a0 = u64 [sp + 0x10]
  4205: 82 18 08                 a1 = u64 [sp + 0x8]
  4208: 82 19                    a2 = u64 [sp]
  4210: 7b 57 10                 u64 [s0 + 0x10] = a0
  4213: 7b 58 08                 u64 [s0 + 0x8] = a1
  4216: 7b 59                    u64 [s0] = a2
  4218: 82 10 30                 ra = u64 [sp + 0x30]
  4221: 82 15 28                 s0 = u64 [sp + 0x28]
  4224: 82 16 20                 s1 = u64 [sp + 0x20]
  4227: 95 11 38                 sp = sp + 0x38
  4230: 32 00                    ret
      :                          @295
  4232: 00                       trap
      :                          @296
  4233: 00                       trap
      :                          @297
  4234: 00                       trap
      :                          @298 [@dyn 36]
  4235: 82 72                    t0 = u64 [a0]
  4237: 33 09 00 00 ff           a2 = 0xffffffffffff0000
  4242: 95 2a ff ff fe           a3 = t0 + 0xfffffffffffeffff
  4247: ac 9a 28                 jump @304 if a3 <u a2
      :                          @299
  4250: 82 77 08                 a0 = u64 [a0 + 0x8]
  4253: 33 09 e0 00 03           a2 = 0x300e0
  4258: 95 99 00 00 01           a2 = a2 + 0x10000
  4263: 01                       fallthrough
      :                          @300
  4264: 82 9a                    a3 = u64 [a2]
  4266: c9 a9 0b                 a4 = a2 - a3
  4269: ab 7b 12                 jump @304 if a4 != a0
      :                          @301
  4272: c9 2a 0b                 a4 = a3 - t0
  4275: 01                       fallthrough
      :                          @302
  4276: 82 9c                    a5 = u64 [a2]
  4278: ab ac f2                 jump @300 if a5 != a3
      :                          @303
  4281: 7b 9b                    u64 [a2] = a4
  4283: 33 08                    a1 = 0
  4285: 32 00                    ret
      :                          @304
  4287: 32 00                    ret
      :                          @305 [@dyn 37]
  4289: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  4292: 7b 10 18                 u64 [sp + 0x18] = ra
  4295: 7b 15 10                 u64 [sp + 0x10] = s0
  4298: 7b 16 08                 u64 [sp + 0x8] = s1
  4301: 64 75                    s0 = a0
  4303: 82 7a 10                 a3 = u64 [a0 + 0x10]
  4306: 82 77                    a0 = u64 [a0]
  4308: c9 a7 07                 a0 = a0 - a3
  4311: 64 96                    s1 = a2
  4313: ac 97 2a                 jump @308 if a0 <u a2
      :                          @306
  4316: 7b 1a                    u64 [sp] = a3
  4318: 82 57 08                 a0 = u64 [s0 + 0x8]
  4321: c8 a7 07                 a0 = a0 + a3
  4324: 64 69                    a2 = s1
  4326: 50 10 4c 4a 01           ra = 76, jump @327
      :                          @307 [@dyn 38]
  4331: 82 17                    a0 = u64 [sp]
  4333: c8 76 06                 s1 = s1 + a0
  4336: 7b 56 10                 u64 [s0 + 0x10] = s1
  4339: 33 07                    a0 = 0
  4341: 82 10 18                 ra = u64 [sp + 0x18]
  4344: 82 15 10                 s0 = u64 [sp + 0x10]
  4347: 82 16 08                 s1 = u64 [sp + 0x8]
  4350: 95 11 20                 sp = sp + 0x20
  4353: 32 00                    ret
      :                          @308
  4355: 64 57                    a0 = s0
  4357: 7b 18                    u64 [sp] = a1
  4359: 64 a8                    a1 = a3
  4361: 64 69                    a2 = s1
  4363: 50 10 4e 74 fc           ra = 78, jump @221
      :                          @309 [@dyn 39]
  4368: 82 18                    a1 = u64 [sp]
  4370: 82 5a 10                 a3 = u64 [s0 + 0x10]
  4373: 28 c7                    jump @306
      :                          @310 [@dyn 40]
  4375: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  4378: 7b 10 20                 u64 [sp + 0x20] = ra
  4381: 7b 15 18                 u64 [sp + 0x18] = s0
  4384: 7b 16 10                 u64 [sp + 0x10] = s1
  4387: 64 86                    s1 = a1
  4389: 83 88                    i32 a1 = a1 + 0
  4391: 33 09 80 00              a2 = 0x80
  4395: 64 7a                    a3 = a0
  4397: ae 98 2b                 jump @315 if a1 >=u a2
      :                          @311
  4400: 82 a8 10                 a1 = u64 [a3 + 0x10]
  4403: 82 a7                    a0 = u64 [a3]
  4405: ab 78 12                 jump @314 if a1 != a0
      :                          @312
  4408: 64 a7                    a0 = a3
  4410: 64 a5                    s0 = a3
  4412: 50 10 52 08 fe           ra = 82, jump @265
      :                          @313 [@dyn 41]
  4417: 64 5a                    a3 = s0
  4419: 82 58 10                 a1 = u64 [s0 + 0x10]
  4422: 01                       fallthrough
      :                          @314
  4423: 82 a7 08                 a0 = u64 [a3 + 0x8]
  4426: c8 87 07                 a0 = a0 + a1
  4429: 78 76                    u8 [a0] = s1
  4431: 95 88 01                 a1 = a1 + 0x1
  4434: 7b a8 10                 u64 [a3 + 0x10] = a1
  4437: 28 ab 00                 jump @323
      :                          @315
  4440: 8b 67 0b                 i32 a0 = s1 >> 0xb
  4443: 48 11 0c                 u32 [sp + 12] = 0
  4446: 52 07 1c                 jump @317 if a0 != 0
      :                          @316
  4449: 98 67 06                 a0 = s1 >> 0x6
  4452: 86 77 c0 00              a0 = a0 | 0xc0
  4456: 78 17 0c                 u8 [sp + 0xc] = a0
  4459: 84 67 3f                 a0 = s1 & 0x3f
  4462: 86 77 80 00              a0 = a0 | 0x80
  4466: 78 17 0d                 u8 [sp + 0xd] = a0
  4469: 33 06 02                 s1 = 0x2
  4472: 28 63                    jump @320
      :                          @317
  4474: 8b 67 10                 i32 a0 = s1 >> 0x10
  4477: 52 07 29                 jump @319 if a0 != 0
      :                          @318
  4480: 98 67 0c                 a0 = s1 >> 0xc
  4483: 86 77 e0 00              a0 = a0 | 0xe0
  4487: 78 17 0c                 u8 [sp + 0xc] = a0
  4490: 97 67 34                 a0 = s1 << 0x34
  4493: 98 77 3a                 a0 = a0 >> 0x3a
  4496: 95 77 80 00              a0 = a0 + 0x80
  4500: 78 17 0d                 u8 [sp + 0xd] = a0
  4503: 84 67 3f                 a0 = s1 & 0x3f
  4506: 86 77 80 00              a0 = a0 | 0x80
  4510: 78 17 0e                 u8 [sp + 0xe] = a0
  4513: 33 06 03                 s1 = 0x3
  4516: 28 37                    jump @320
      :                          @319
  4518: 97 67 2b                 a0 = s1 << 0x2b
  4521: 98 77 3d                 a0 = a0 >> 0x3d
  4524: 95 77 f0 00              a0 = a0 + 0xf0
  4528: 78 17 0c                 u8 [sp + 0xc] = a0
  4531: 97 67 2e                 a0 = s1 << 0x2e
  4534: 98 77 3a                 a0 = a0 >> 0x3a
  4537: 95 77 80 00              a0 = a0 + 0x80
  4541: 78 17 0d                 u8 [sp + 0xd] = a0
  4544: 97 67 34                 a0 = s1 << 0x34
  4547: 98 77 3a                 a0 = a0 >> 0x3a
  4550: 95 77 80 00              a0 = a0 + 0x80
  4554: 78 17 0e                 u8 [sp + 0xe] = a0
  4557: 84 67 3f                 a0 = s1 & 0x3f
  4560: 86 77 80 00              a0 = a0 | 0x80
  4564: 78 17 0f                 u8 [sp + 0xf] = a0
  4567: 33 06 04                 s1 = 0x4
  4570: 01                       fallthrough
      :                          @320
  4571: 82 a5 10                 s0 = u64 [a3 + 0x10]
  4574: 82 a7                    a0 = u64 [a3]
  4576: c9 57 07                 a0 = a0 - s0
  4579: ac 67 2d                 jump @324 if a0 <u s1
      :                          @321
  4582: 7b 1a                    u64 [sp] = a3
  4584: 82 a7 08                 a0 = u64 [a3 + 0x8]
  4587: c8 57 07                 a0 = a0 + s0
  4590: 95 18 0c                 a1 = sp + 0xc
  4593: 64 69                    a2 = s1
  4595: 50 10 54 3d              ra = 84, jump @327
      :                          @322 [@dyn 42]
  4599: c8 56 06                 s1 = s1 + s0
  4602: 82 17                    a0 = u64 [sp]
  4604: 7b 76 10                 u64 [a0 + 0x10] = s1
  4607: 01                       fallthrough
      :                          @323
  4608: 33 07                    a0 = 0
  4610: 82 10 20                 ra = u64 [sp + 0x20]
  4613: 82 15 18                 s0 = u64 [sp + 0x18]
  4616: 82 16 10                 s1 = u64 [sp + 0x10]
  4619: 95 11 28                 sp = sp + 0x28
  4622: 32 00                    ret
      :                          @324
  4624: 64 a7                    a0 = a3
  4626: 64 58                    a1 = s0
  4628: 64 69                    a2 = s1
  4630: 64 a5                    s0 = a3
  4632: 50 10 56 67 fb           ra = 86, jump @221
      :                          @325 [@dyn 43]
  4637: 64 5a                    a3 = s0
  4639: 82 55 10                 s0 = u64 [s0 + 0x10]
  4642: 28 c4                    jump @321
      :                          @326 [@dyn 44]
  4644: 64 8a                    a3 = a1
  4646: 33 08 08 02 01           a1 = 0x10208
  4651: 64 a9                    a2 = a3
  4653: 28 67 04                 jump @411
      :                          @327
  4656: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  4659: 7b 10 18                 u64 [sp + 0x18] = ra
  4662: 7b 15 10                 u64 [sp + 0x10] = s0
  4665: 7b 16 08                 u64 [sp + 0x8] = s1
  4668: 53 19 10 64              jump @336 if a2 <u 16
      :                          @328
  4672: 8d 7a                    i32 a3 = -a0
  4674: 84 a2 07                 t0 = a3 & 0x7
  4677: c8 27 0b                 a4 = a0 + t0
  4680: 51 02 15                 jump @331 if t0 == 0
      :                          @329
  4683: 64 8c                    a5 = a1
  4685: 64 75                    s0 = a0
  4687: 01                       fallthrough
      :                          @330
  4688: 7c ca                    a3 = u8 [a5]
  4690: 78 5a                    u8 [s0] = a3
  4692: 95 55 01                 s0 = s0 + 0x1
  4695: 95 cc 01                 a5 = a5 + 0x1
  4698: ac b5 f6                 jump @330 if s0 <u a4
      :                          @331
  4701: c8 28 03                 t1 = a1 + t0
  4704: c9 29 02                 t0 = a2 - t0
  4707: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  4710: 84 38 07                 a1 = t1 & 0x7
  4713: c8 4b 0a                 a3 = a4 + t2
  4716: 51 08 3b                 jump @338 if a1 == 0
      :                          @332
  4719: 58 04 4b                 jump @341 if t2 <=s 0
      :                          @333
  4722: 97 38 03                 a1 = t1 << 0x3
  4725: 84 80 38                 ra = a1 & 0x38
  4728: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  4731: 82 c5                    s0 = u64 [a5]
  4733: 8d 88                    i32 a1 = -a1
  4735: 84 88 38                 a1 = a1 & 0x38
  4738: 95 cc 08                 a5 = a5 + 0x8
  4741: 01                       fallthrough
      :                          @334
  4742: 82 c6                    s1 = u64 [a5]
  4744: d0 05 05                 s0 = s0 >> ra
  4747: cf 86 09                 a2 = s1 << a1
  4750: d4 59 09                 a2 = a2 | s0
  4753: 7b b9                    u64 [a4] = a2
  4755: 95 bb 08                 a4 = a4 + 0x8
  4758: 95 cc 08                 a5 = a5 + 0x8
  4761: 64 65                    s0 = s1
  4763: ac ab eb                 jump @334 if a4 <u a3
      :                          @335
  4766: 28 1c                    jump @341
      :                          @336
  4768: 64 7a                    a3 = a0
  4770: 52 09 21                 jump @342 if a2 != 0
      :                          @337
  4773: 28 2f                    jump @344
      :                          @338
  4775: 58 04 13                 jump @341 if t2 <=s 0
      :                          @339
  4778: 64 38                    a1 = t1
  4780: 01                       fallthrough
      :                          @340
  4781: 82 89                    a2 = u64 [a1]
  4783: 7b b9                    u64 [a4] = a2
  4785: 95 bb 08                 a4 = a4 + 0x8
  4788: 95 88 08                 a1 = a1 + 0x8
  4791: ac ab f6                 jump @340 if a4 <u a3
      :                          @341
  4794: c8 43 08                 a1 = t1 + t2
  4797: 84 29 07                 a2 = t0 & 0x7
  4800: 51 09 14                 jump @344 if a2 == 0
      :                          @342
  4803: c8 a9 09                 a2 = a2 + a3
  4806: 01                       fallthrough
      :                          @343
  4807: 7c 8b                    a4 = u8 [a1]
  4809: 78 ab                    u8 [a3] = a4
  4811: 95 aa 01                 a3 = a3 + 0x1
  4814: 95 88 01                 a1 = a1 + 0x1
  4817: ac 9a f6                 jump @343 if a3 <u a2
      :                          @344
  4820: 82 10 18                 ra = u64 [sp + 0x18]
  4823: 82 15 10                 s0 = u64 [sp + 0x10]
  4826: 82 16 08                 s1 = u64 [sp + 0x8]
  4829: 95 11 20                 sp = sp + 0x20
  4832: 32 00                    ret
      :                          @345 [@dyn 45]
  4834: 82 77                    a0 = u64 [a0]
  4836: 01                       fallthrough
      :                          @346
  4837: 28                       jump @346
      :                          @347
  4838: 95 11 a0                 sp = sp + 0xffffffffffffffa0
  4841: 7b 10 58                 u64 [sp + 0x58] = ra
  4844: 7b 15 50                 u64 [sp + 0x50] = s0
  4847: 7b 16 48                 u64 [sp + 0x48] = s1
  4850: 7b 19 08                 u64 [sp + 0x8] = a2
  4853: 7b 18                    u64 [sp] = a1
  4855: 98 7a 04                 a3 = a0 >> 0x4
  4858: 33 09 27                 a2 = 0x27
  4861: 53 2a 71 02 81 00        jump @350 if a3 <u 625
      :                          @348
  4867: 33 09 27                 a2 = 0x27
  4870: 95 1b 46                 a4 = sp + 0x46
  4873: 3a 08 00 00 03           a1 = u64 [0x30000]
  4878: 7b 18 18                 u64 [sp + 0x18] = a1
  4881: 49 11 10 f0 d8 00        u64 [sp + 16] = 0xd8f0
  4887: 33 03 7b 14              t1 = 0x147b
  4891: 33 05 76 02 01           s0 = 0x10276
  4896: 33 00 ff e0 f5 05        ra = 0x5f5e0ff
  4902: 01                       fallthrough
      :                          @349
  4903: 64 74                    t2 = a0
  4905: 82 17 18                 a0 = u64 [sp + 0x18]
  4908: d6 74 07                 a0 = t2 mulhu a0
  4911: 98 77 0b                 a0 = a0 >> 0xb
  4914: 82 18 10                 a1 = u64 [sp + 0x10]
  4917: c0 87 02                 i32 t0 = a0 * a1
  4920: c8 42 0a                 a3 = t0 + t2
  4923: 97 a2 30                 t0 = a3 << 0x30
  4926: 98 28 32                 a1 = t0 >> 0x32
  4929: ca 38 08                 a1 = a1 * t1
  4932: 98 8c 11                 a5 = a1 >> 0x11
  4935: 98 88 10                 a1 = a1 >> 0x10
  4938: 84 88 fe 07              a1 = a1 & 0x7fe
  4942: 96 cc 9c                 a5 = a5 * 0xffffffffffffff9c
  4945: c8 ca 0a                 a3 = a3 + a5
  4948: 97 aa 31                 a3 = a3 << 0x31
  4951: 98 aa 30                 a3 = a3 >> 0x30
  4954: c8 58 08                 a1 = a1 + s0
  4957: 7c 8c                    a5 = u8 [a1]
  4959: 7c 88 01                 a1 = u8 [a1 + 0x1]
  4962: c8 5a 0a                 a3 = a3 + s0
  4965: 7c a6 01                 s1 = u8 [a3 + 0x1]
  4968: 7c aa                    a3 = u8 [a3]
  4970: 78 b8 ff                 u8 [a4 + 0xffffffffffffffff] = a1
  4973: 78 bc fe                 u8 [a4 + 0xfffffffffffffffe] = a5
  4976: 78 b6 01                 u8 [a4 + 0x1] = s1
  4979: 78 ba                    u8 [a4] = a3
  4981: 95 99 fc                 a2 = a2 + 0xfffffffffffffffc
  4984: 95 bb fc                 a4 = a4 + 0xfffffffffffffffc
  4987: ac 40 ac                 jump @349 if ra <u t2
      :                          @350
  4990: 54 17 63 3b              jump @352 if a0 <=u 99
      :                          @351
  4994: 97 78 30                 a1 = a0 << 0x30
  4997: 98 88 32                 a1 = a1 >> 0x32
  5000: 96 88 7b 14              a1 = a1 * 0x147b
  5004: 98 88 11                 a1 = a1 >> 0x11
  5007: 96 8a 9c                 a3 = a1 * 0xffffffffffffff9c
  5010: c8 a7 07                 a0 = a0 + a3
  5013: 97 77 31                 a0 = a0 << 0x31
  5016: 98 77 30                 a0 = a0 >> 0x30
  5019: 95 99 fe                 a2 = a2 + 0xfffffffffffffffe
  5022: 33 0a 76 02 01           a3 = 0x10276
  5027: c8 a7 07                 a0 = a0 + a3
  5030: 7c 7a 01                 a3 = u8 [a0 + 0x1]
  5033: 7c 77                    a0 = u8 [a0]
  5035: 95 1b 21                 a4 = sp + 0x21
  5038: c8 9b 0b                 a4 = a4 + a2
  5041: 78 ba 01                 u8 [a4 + 0x1] = a3
  5044: 78 b7                    u8 [a4] = a0
  5046: 64 87                    a0 = a1
  5048: 01                       fallthrough
      :                          @352
  5049: 55 17 0a 14              jump @354 if a0 >=u 10
      :                          @353
  5053: 95 99 ff                 a2 = a2 + 0xffffffffffffffff
  5056: 95 18 21                 a1 = sp + 0x21
  5059: c8 98 08                 a1 = a1 + a2
  5062: 83 77 30                 i32 a0 = a0 + 0x30
  5065: 78 87                    u8 [a1] = a0
  5067: 28 21                    jump @355
      :                          @354
  5069: 97 77 01                 a0 = a0 << 0x1
  5072: 95 99 fe                 a2 = a2 + 0xfffffffffffffffe
  5075: 33 08 76 02 01           a1 = 0x10276
  5080: c8 87 07                 a0 = a0 + a1
  5083: 7c 78 01                 a1 = u8 [a0 + 0x1]
  5086: 7c 77                    a0 = u8 [a0]
  5088: 95 1a 21                 a3 = sp + 0x21
  5091: c8 9a 0a                 a3 = a3 + a2
  5094: 78 a8 01                 u8 [a3 + 0x1] = a1
  5097: 78 a7                    u8 [a3] = a0
  5099: 01                       fallthrough
      :                          @355
  5100: 95 1b 21                 a4 = sp + 0x21
  5103: c8 9b 0b                 a4 = a4 + a2
  5106: 9a 9c 27                 a5 = 0x27 - a2
  5109: 33 09 38 02 01           a2 = 0x10238
  5114: 82 17 08                 a0 = u64 [sp + 0x8]
  5117: 82 18                    a1 = u64 [sp]
  5119: 33 0a                    a3 = 0
  5121: 50 10 5c 12              ra = 92, jump @357
      :                          @356 [@dyn 46]
  5125: 82 10 58                 ra = u64 [sp + 0x58]
  5128: 82 15 50                 s0 = u64 [sp + 0x50]
  5131: 82 16 48                 s1 = u64 [sp + 0x48]
  5134: 95 11 60                 sp = sp + 0x60
  5137: 32 00                    ret
      :                          @357
  5139: 95 11 98                 sp = sp + 0xffffffffffffff98
  5142: 7b 10 60                 u64 [sp + 0x60] = ra
  5145: 7b 15 58                 u64 [sp + 0x58] = s0
  5148: 7b 16 50                 u64 [sp + 0x50] = s1
  5151: 7b 1b 18                 u64 [sp + 0x18] = a4
  5154: 51 08 4f                 jump @364 if a1 == 0
      :                          @358
  5157: 80 76 34                 s1 = u32 [a0 + 0x34]
  5160: 84 68 01                 a1 = s1 & 0x1
  5163: 33 0b 2b                 a4 = 0x2b
  5166: 33 05 00 00 11           s0 = 0x110000
  5171: db 8b 05                 s0 = a4 if a1 != 0
  5174: 7b 15 28                 u64 [sp + 0x28] = s0
  5177: c8 c8 02                 t0 = a1 + a5
  5180: 84 68 04                 a1 = s1 & 0x4
  5183: 51 08 42                 jump @365 if a1 == 0
      :                          @359
  5186: 7b 19 30                 u64 [sp + 0x30] = a2
  5189: 33 08                    a1 = 0
  5191: 51 0a 1a                 jump @362 if a3 == 0
      :                          @360
  5194: 64 a5                    s0 = a3
  5196: 01                       fallthrough
      :                          @361
  5197: 7d 9b                    a4 = i8 [a2]
  5199: 89 bb c0                 a4 = a4 <s 0xffffffffffffffc0
  5202: 85 bb 01                 a4 = a4 ^ 0x1
  5205: c8 b8 08                 a1 = a1 + a4
  5208: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  5211: 95 99 01                 a2 = a2 + 0x1
  5214: 52 05 ef                 jump @361 if s0 != 0
      :                          @362
  5217: c8 82 02                 t0 = t0 + a1
  5220: 7b 1a 38                 u64 [sp + 0x38] = a3
  5223: 82 78                    a1 = u64 [a0]
  5225: 7b 1c 20                 u64 [sp + 0x20] = a5
  5228: 52 08 23                 jump @366 if a1 != 0
      :                          @363
  5231: 28 41                    jump @371
      :                          @364
  5233: 81 76 34                 s1 = i32 [a0 + 0x34]
  5236: 95 c2 01                 t0 = a5 + 0x1
  5239: 49 11 28 2d              u64 [sp + 40] = 0x2d
  5243: 84 68 04                 a1 = s1 & 0x4
  5246: 52 08 c4                 jump @359 if a1 != 0
      :                          @365
  5249: 49 11 30                 u64 [sp + 48] = 0
  5252: 7b 1a 38                 u64 [sp + 0x38] = a3
  5255: 82 78                    a1 = u64 [a0]
  5257: 7b 1c 20                 u64 [sp + 0x20] = a5
  5260: 51 08 24                 jump @371 if a1 == 0
      :                          @366
  5263: 82 75 08                 s0 = u64 [a0 + 0x8]
  5266: ae 52 1e                 jump @371 if t0 >=u s0
      :                          @367
  5269: 84 66 08                 s1 = s1 & 0x8
  5272: 52 06 50                 jump @374 if s1 != 0
      :                          @368
  5275: 7c 79 38                 a2 = u8 [a0 + 0x38]
  5278: c9 25 0a                 a3 = s0 - t0
  5281: 5a 19 01 a1 00           jump @381 if a2 >s 1
      :                          @369
  5286: 52 09 ae 00              jump @383 if a2 != 0
      :                          @370
  5290: 7b 1a 10                 u64 [sp + 0x10] = a3
  5293: 28 ad 00                 jump @384
      :                          @371
  5296: 82 75 20                 s0 = u64 [a0 + 0x20]
  5299: 82 76 28                 s1 = u64 [a0 + 0x28]
  5302: 64 57                    a0 = s0
  5304: 64 68                    a1 = s1
  5306: 82 19 28                 a2 = u64 [sp + 0x28]
  5309: 82 1a 30                 a3 = u64 [sp + 0x30]
  5312: 82 1b 38                 a4 = u64 [sp + 0x38]
  5315: 50 10 5e 6d 01           ra = 94, jump @404
      :                          @372 [@dyn 47]
  5320: 33 08 01                 a1 = 0x1
  5323: 52 07 bc 00              jump @389 if a0 != 0
      :                          @373
  5327: 82 6c 18                 a5 = u64 [s1 + 0x18]
  5330: 64 57                    a0 = s0
  5332: 82 18 18                 a1 = u64 [sp + 0x18]
  5335: 82 19 20                 a2 = u64 [sp + 0x20]
  5338: 82 10 60                 ra = u64 [sp + 0x60]
  5341: 82 15 58                 s0 = u64 [sp + 0x58]
  5344: 82 16 50                 s1 = u64 [sp + 0x50]
  5347: 95 11 68                 sp = sp + 0x68
  5350: 32 0c                    jump [a5]
      :                          @374
  5352: 7b 12 40                 u64 [sp + 0x40] = t0
  5355: 81 78 30                 a1 = i32 [a0 + 0x30]
  5358: 7b 18 08                 u64 [sp + 0x8] = a1
  5361: 7c 79 38                 a2 = u8 [a0 + 0x38]
  5364: 7b 19                    u64 [sp] = a2
  5366: 82 79 20                 a2 = u64 [a0 + 0x20]
  5369: 82 76 28                 s1 = u64 [a0 + 0x28]
  5372: 48 17 30 30              u32 [a0 + 48] = 0x30
  5376: 7b 17 10                 u64 [sp + 0x10] = a0
  5379: 46 17 38 01              u8 [a0 + 56] = 0x1
  5383: 7b 19 48                 u64 [sp + 0x48] = a2
  5386: 64 97                    a0 = a2
  5388: 64 68                    a1 = s1
  5390: 82 19 28                 a2 = u64 [sp + 0x28]
  5393: 82 1a 30                 a3 = u64 [sp + 0x30]
  5396: 82 1b 38                 a4 = u64 [sp + 0x38]
  5399: 50 10 60 19 01           ra = 96, jump @404
      :                          @375 [@dyn 48]
  5404: 52 07 67                 jump @388 if a0 != 0
      :                          @376
  5407: 82 17 40                 a0 = u64 [sp + 0x40]
  5410: c9 75 05                 s0 = s0 - a0
  5413: 95 55 01                 s0 = s0 + 0x1
  5416: 01                       fallthrough
      :                          @377
  5417: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  5420: 51 05 c6 00              jump @399 if s0 == 0
      :                          @378
  5424: 82 69 20                 a2 = u64 [s1 + 0x20]
  5427: 33 08 30                 a1 = 0x30
  5430: 82 17 48                 a0 = u64 [sp + 0x48]
  5433: b4 90 01 62              ra = 98, jump [a2]
      :                          @379 [@dyn 49]
  5437: 51 07 ec                 jump @377 if a0 == 0
      :                          @380
  5440: 28 43                    jump @388
      :                          @381
  5442: 52 19 02 12              jump @383 if a2 != 2
      :                          @382
  5446: 98 a9 01                 a2 = a3 >> 0x1
  5449: 95 a8 01                 a1 = a3 + 0x1
  5452: 98 88 01                 a1 = a1 >> 0x1
  5455: 7b 18 10                 u64 [sp + 0x10] = a1
  5458: 28 08                    jump @384
      :                          @383
  5460: 64 a9                    a2 = a3
  5462: 49 11 10                 u64 [sp + 16] = 0
  5465: 01                       fallthrough
      :                          @384
  5466: 82 78 20                 a1 = u64 [a0 + 0x20]
  5469: 7b 18 48                 u64 [sp + 0x48] = a1
  5472: 82 76 28                 s1 = u64 [a0 + 0x28]
  5475: 81 77 30                 a0 = i32 [a0 + 0x30]
  5478: 7b 17 40                 u64 [sp + 0x40] = a0
  5481: 95 95 01                 s0 = a2 + 0x1
  5484: 01                       fallthrough
      :                          @385
  5485: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  5488: 51 05 27                 jump @390 if s0 == 0
      :                          @386
  5491: 82 69 20                 a2 = u64 [s1 + 0x20]
  5494: 82 17 48                 a0 = u64 [sp + 0x48]
  5497: 82 18 40                 a1 = u64 [sp + 0x40]
  5500: b4 90 01 64              ra = 100, jump [a2]
      :                          @387 [@dyn 50]
  5504: 51 07 ed                 jump @385 if a0 == 0
      :                          @388
  5507: 33 08 01                 a1 = 0x1
  5510: 01                       fallthrough
      :                          @389
  5511: 64 87                    a0 = a1
  5513: 82 10 60                 ra = u64 [sp + 0x60]
  5516: 82 15 58                 s0 = u64 [sp + 0x58]
  5519: 82 16 50                 s1 = u64 [sp + 0x50]
  5522: 95 11 68                 sp = sp + 0x68
  5525: 32 00                    ret
      :                          @390
  5527: 82 15 48                 s0 = u64 [sp + 0x48]
  5530: 64 57                    a0 = s0
  5532: 64 68                    a1 = s1
  5534: 82 19 28                 a2 = u64 [sp + 0x28]
  5537: 82 1a 30                 a3 = u64 [sp + 0x30]
  5540: 82 1b 38                 a4 = u64 [sp + 0x38]
  5543: 50 10 66 89 00           ra = 102, jump @404
      :                          @391 [@dyn 51]
  5548: 33 08 01                 a1 = 0x1
  5551: 52 07 d8                 jump @389 if a0 != 0
      :                          @392
  5554: 82 6a 18                 a3 = u64 [s1 + 0x18]
  5557: 64 57                    a0 = s0
  5559: 82 18 18                 a1 = u64 [sp + 0x18]
  5562: 82 19 20                 a2 = u64 [sp + 0x20]
  5565: b4 a0 01 68              ra = 104, jump [a3]
      :                          @393 [@dyn 52]
  5569: 33 08 01                 a1 = 0x1
  5572: 52 07 c3                 jump @389 if a0 != 0
      :                          @394
  5575: 82 17 10                 a0 = u64 [sp + 0x10]
  5578: 9a 77                    a0 = -a0
  5580: 7b 17 38                 u64 [sp + 0x38] = a0
  5583: 33 05 ff                 s0 = 0xffffffffffffffff
  5586: 01                       fallthrough
      :                          @395
  5587: 82 17 38                 a0 = u64 [sp + 0x38]
  5590: c8 57 07                 a0 = a0 + s0
  5593: 51 17 ff 42              jump @402 if a0 == 4294967295
      :                          @396
  5597: 82 69 20                 a2 = u64 [s1 + 0x20]
  5600: 82 17 48                 a0 = u64 [sp + 0x48]
  5603: 82 18 40                 a1 = u64 [sp + 0x40]
  5606: b4 90 01 6a              ra = 106, jump [a2]
      :                          @397 [@dyn 53]
  5610: 95 55 01                 s0 = s0 + 0x1
  5613: 51 07 e6                 jump @395 if a0 == 0
      :                          @398
  5616: 28 37                    jump @403
      :                          @399
  5618: 82 6a 18                 a3 = u64 [s1 + 0x18]
  5621: 82 17 48                 a0 = u64 [sp + 0x48]
  5624: 82 18 18                 a1 = u64 [sp + 0x18]
  5627: 82 19 20                 a2 = u64 [sp + 0x20]
  5630: b4 a0 01 6c              ra = 108, jump [a3]
      :                          @400 [@dyn 54]
  5634: 33 08 01                 a1 = 0x1
  5637: 52 07 82                 jump @389 if a0 != 0
      :                          @401
  5640: 33 08                    a1 = 0
  5642: 82 17 10                 a0 = u64 [sp + 0x10]
  5645: 82 19 08                 a2 = u64 [sp + 0x8]
  5648: 7a 79 30                 u32 [a0 + 0x30] = a2
  5651: 82 19                    a2 = u64 [sp]
  5653: 78 79 38                 u8 [a0 + 0x38] = a2
  5656: 28 6f ff                 jump @389
      :                          @402
  5659: 82 15 10                 s0 = u64 [sp + 0x10]
  5662: 82 17 10                 a0 = u64 [sp + 0x10]
  5665: d8 75 08                 a1 = s0 <u a0
  5668: 28 63 ff                 jump @389
      :                          @403
  5671: 82 17 10                 a0 = u64 [sp + 0x10]
  5674: d8 75 08                 a1 = s0 <u a0
  5677: 28 5a ff                 jump @389
      :                          @404
  5680: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  5683: 7b 10 20                 u64 [sp + 0x20] = ra
  5686: 7b 15 18                 u64 [sp + 0x18] = s0
  5689: 7b 16 10                 u64 [sp + 0x10] = s1
  5692: 83 9c                    i32 a5 = a2 + 0
  5694: 33 02 00 00 11           t0 = 0x110000
  5699: 64 a6                    s1 = a3
  5701: 64 85                    s0 = a1
  5703: 64 7a                    a3 = a0
  5705: aa 2c 20                 jump @407 if a5 == t0
      :                          @405
  5708: 82 5c 20                 a5 = u64 [s0 + 0x20]
  5711: 64 a7                    a0 = a3
  5713: 64 98                    a1 = a2
  5715: 7b 1b 08                 u64 [sp + 0x8] = a4
  5718: 7b 1a                    u64 [sp] = a3
  5720: b4 c0 01 6e              ra = 110, jump [a5]
      :                          @406 [@dyn 55]
  5724: 82 1a                    a3 = u64 [sp]
  5726: 82 1b 08                 a4 = u64 [sp + 0x8]
  5729: 64 78                    a1 = a0
  5731: 33 07 01                 a0 = 0x1
  5734: 52 08 20                 jump @410 if a1 != 0
      :                          @407
  5737: 51 06 1a                 jump @409 if s1 == 0
      :                          @408
  5740: 82 5c 18                 a5 = u64 [s0 + 0x18]
  5743: 64 a7                    a0 = a3
  5745: 64 68                    a1 = s1
  5747: 64 b9                    a2 = a4
  5749: 82 10 20                 ra = u64 [sp + 0x20]
  5752: 82 15 18                 s0 = u64 [sp + 0x18]
  5755: 82 16 10                 s1 = u64 [sp + 0x10]
  5758: 95 11 28                 sp = sp + 0x28
  5761: 32 0c                    jump [a5]
      :                          @409
  5763: 33 07                    a0 = 0
  5765: 01                       fallthrough
      :                          @410
  5766: 82 10 20                 ra = u64 [sp + 0x20]
  5769: 82 15 18                 s0 = u64 [sp + 0x18]
  5772: 82 16 10                 s1 = u64 [sp + 0x10]
  5775: 95 11 28                 sp = sp + 0x28
  5778: 32 00                    ret
      :                          @411
  5780: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  5784: 7b 10 80 00              u64 [sp + 0x80] = ra
  5788: 7b 15 78                 u64 [sp + 0x78] = s0
  5791: 7b 16 70                 u64 [sp + 0x70] = s1
  5794: 49 11 60 20              u64 [sp + 96] = 0x20
  5798: 33 0a 03                 a3 = 0x3
  5801: 78 1a 68                 u8 [sp + 0x68] = a3
  5804: 82 96 20                 s1 = u64 [a2 + 0x20]
  5807: 49 11 30                 u64 [sp + 48] = 0
  5810: 49 11 40                 u64 [sp + 64] = 0
  5813: 7b 17 50                 u64 [sp + 0x50] = a0
  5816: 7b 18 58                 u64 [sp + 0x58] = a1
  5819: 51 06 07 01              jump @433 if s1 == 0
      :                          @412
  5823: 82 97 28                 a0 = u64 [a2 + 0x28]
  5826: 51 07 74 01              jump @443 if a0 == 0
      :                          @413
  5830: 49 11 28                 u64 [sp + 40] = 0
  5833: 82 95                    s0 = u64 [a2]
  5835: 7b 19 08                 u64 [sp + 0x8] = a2
  5838: 82 98 10                 a1 = u64 [a2 + 0x10]
  5841: 7b 18 18                 u64 [sp + 0x18] = a1
  5844: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  5847: 97 88 03                 a1 = a1 << 0x3
  5850: 98 88 03                 a1 = a1 >> 0x3
  5853: 95 88 01                 a1 = a1 + 0x1
  5856: 7b 18                    u64 [sp] = a1
  5858: 95 55 08                 s0 = s0 + 0x8
  5861: 96 78 38                 a1 = a0 * 0x38
  5864: 95 66 18                 s1 = s1 + 0x18
  5867: 33 07 5a                 a0 = 0x5a
  5870: 7b 17 10                 u64 [sp + 0x10] = a0
  5873: 01                       fallthrough
      :                          @414
  5874: 7b 18 20                 u64 [sp + 0x20] = a1
  5877: 82 59                    a2 = u64 [s0]
  5879: 51 09 17                 jump @417 if a2 == 0
      :                          @415
  5882: 82 1a 58                 a3 = u64 [sp + 0x58]
  5885: 82 17 50                 a0 = u64 [sp + 0x50]
  5888: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  5891: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5894: b4 a0 01 70              ra = 112, jump [a3]
      :                          @416 [@dyn 56]
  5898: 52 07 51 01              jump @446 if a0 != 0
      :                          @417
  5902: 81 67 10                 a0 = i32 [s1 + 0x10]
  5905: 7a 17 60                 u32 [sp + 0x60] = a0
  5908: 7c 67 18                 a0 = u8 [s1 + 0x18]
  5911: 78 17 68                 u8 [sp + 0x68] = a0
  5914: 81 67 14                 a0 = i32 [s1 + 0x14]
  5917: 7a 17 64                 u32 [sp + 0x64] = a0
  5920: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  5923: 82 67                    a0 = u64 [s1]
  5925: 51 08 26                 jump @422 if a1 == 0
      :                          @418
  5928: 52 18 01 16              jump @420 if a1 != 1
      :                          @419
  5932: 97 77 04                 a0 = a0 << 0x4
  5935: 82 18 18                 a1 = u64 [sp + 0x18]
  5938: c8 87 07                 a0 = a0 + a1
  5941: 82 78 08                 a1 = u64 [a0 + 0x8]
  5944: 82 19 10                 a2 = u64 [sp + 0x10]
  5947: aa 98 07                 jump @421 if a1 == a2
      :                          @420
  5950: 33 08                    a1 = 0
  5952: 28 0f                    jump @423
      :                          @421
  5954: 82 77                    a0 = u64 [a0]
  5956: 82 77                    a0 = u64 [a0]
  5958: 33 08 01                 a1 = 0x1
  5961: 28 06                    jump @423
      :                          @422
  5963: 33 08 01                 a1 = 0x1
  5966: 01                       fallthrough
      :                          @423
  5967: 7b 18 30                 u64 [sp + 0x30] = a1
  5970: 7b 17 38                 u64 [sp + 0x38] = a0
  5973: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  5976: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  5979: 51 08 26                 jump @428 if a1 == 0
      :                          @424
  5982: 52 18 01 16              jump @426 if a1 != 1
      :                          @425
  5986: 97 77 04                 a0 = a0 << 0x4
  5989: 82 18 18                 a1 = u64 [sp + 0x18]
  5992: c8 87 07                 a0 = a0 + a1
  5995: 82 78 08                 a1 = u64 [a0 + 0x8]
  5998: 82 19 10                 a2 = u64 [sp + 0x10]
  6001: aa 98 07                 jump @427 if a1 == a2
      :                          @426
  6004: 33 08                    a1 = 0
  6006: 28 0f                    jump @429
      :                          @427
  6008: 82 77                    a0 = u64 [a0]
  6010: 82 77                    a0 = u64 [a0]
  6012: 33 08 01                 a1 = 0x1
  6015: 28 06                    jump @429
      :                          @428
  6017: 33 08 01                 a1 = 0x1
  6020: 01                       fallthrough
      :                          @429
  6021: 7b 18 40                 u64 [sp + 0x40] = a1
  6024: 7b 17 48                 u64 [sp + 0x48] = a0
  6027: 82 67 08                 a0 = u64 [s1 + 0x8]
  6030: 97 77 04                 a0 = a0 << 0x4
  6033: 82 18 18                 a1 = u64 [sp + 0x18]
  6036: c8 78 08                 a1 = a1 + a0
  6039: 82 87                    a0 = u64 [a1]
  6041: 82 89 08                 a2 = u64 [a1 + 0x8]
  6044: 95 18 30                 a1 = sp + 0x30
  6047: b4 90 01 72              ra = 114, jump [a2]
      :                          @430 [@dyn 57]
  6051: 52 07 b8 00              jump @446 if a0 != 0
      :                          @431
  6055: 95 55 10                 s0 = s0 + 0x10
  6058: 82 18 20                 a1 = u64 [sp + 0x20]
  6061: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  6064: 95 66 38                 s1 = s1 + 0x38
  6067: 82 17 28                 a0 = u64 [sp + 0x28]
  6070: 95 77 01                 a0 = a0 + 0x1
  6073: 7b 17 28                 u64 [sp + 0x28] = a0
  6076: 52 08 36 ff              jump @414 if a1 != 0
      :                          @432
  6080: 28 69                    jump @441
      :                          @433
  6082: 82 97 18                 a0 = u64 [a2 + 0x18]
  6085: 51 07 71                 jump @443 if a0 == 0
      :                          @434
  6088: 82 95 10                 s0 = u64 [a2 + 0x10]
  6091: 33 0a                    a3 = 0
  6093: 97 78 04                 a1 = a0 << 0x4
  6096: c8 58 08                 a1 = a1 + s0
  6099: 7b 18 20                 u64 [sp + 0x20] = a1
  6102: 7b 19 08                 u64 [sp + 0x8] = a2
  6105: 82 96                    s1 = u64 [a2]
  6107: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  6110: 97 77 04                 a0 = a0 << 0x4
  6113: 98 77 04                 a0 = a0 >> 0x4
  6116: 95 77 01                 a0 = a0 + 0x1
  6119: 7b 17                    u64 [sp] = a0
  6121: 95 66 08                 s1 = s1 + 0x8
  6124: 01                       fallthrough
      :                          @435
  6125: 7b 1a 28                 u64 [sp + 0x28] = a3
  6128: 82 69                    a2 = u64 [s1]
  6130: 51 09 16                 jump @438 if a2 == 0
      :                          @436
  6133: 82 1a 58                 a3 = u64 [sp + 0x58]
  6136: 82 17 50                 a0 = u64 [sp + 0x50]
  6139: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  6142: 82 aa 18                 a3 = u64 [a3 + 0x18]
  6145: b4 a0 01 74              ra = 116, jump [a3]
      :                          @437 [@dyn 58]
  6149: 52 07 56                 jump @446 if a0 != 0
      :                          @438
  6152: 82 57                    a0 = u64 [s0]
  6154: 82 59 08                 a2 = u64 [s0 + 0x8]
  6157: 95 18 30                 a1 = sp + 0x30
  6160: b4 90 01 76              ra = 118, jump [a2]
      :                          @439 [@dyn 59]
  6164: 52 07 47                 jump @446 if a0 != 0
      :                          @440
  6167: 95 66 10                 s1 = s1 + 0x10
  6170: 95 55 10                 s0 = s0 + 0x10
  6173: 82 1a 28                 a3 = u64 [sp + 0x28]
  6176: 95 aa 01                 a3 = a3 + 0x1
  6179: 82 17 20                 a0 = u64 [sp + 0x20]
  6182: ab 75 c7                 jump @435 if s0 != a0
      :                          @441
  6185: 82 19 08                 a2 = u64 [sp + 0x8]
  6188: 82 1a                    a3 = u64 [sp]
  6190: 82 97 08                 a0 = u64 [a2 + 0x8]
  6193: ac 7a 0d                 jump @444 if a3 <u a0
      :                          @442
  6196: 28 2c                    jump @447
      :                          @443
  6198: 33 0a                    a3 = 0
  6200: 82 97 08                 a0 = u64 [a2 + 0x8]
  6203: 54 07 25                 jump @447 if a0 <=u 0
      :                          @444
  6206: 82 97                    a0 = u64 [a2]
  6208: 97 a8 04                 a1 = a3 << 0x4
  6211: c8 87 09                 a2 = a0 + a1
  6214: 82 1a 58                 a3 = u64 [sp + 0x58]
  6217: 82 17 50                 a0 = u64 [sp + 0x50]
  6220: 82 98                    a1 = u64 [a2]
  6222: 82 99 08                 a2 = u64 [a2 + 0x8]
  6225: 82 aa 18                 a3 = u64 [a3 + 0x18]
  6228: b4 a0 01 78              ra = 120, jump [a3]
      :                          @445 [@dyn 60]
  6232: 51 07 08                 jump @447 if a0 == 0
      :                          @446
  6235: 33 07 01                 a0 = 0x1
  6238: 28 05                    jump @448
      :                          @447
  6240: 33 07                    a0 = 0
  6242: 01                       fallthrough
      :                          @448
  6243: 82 10 80 00              ra = u64 [sp + 0x80]
  6247: 82 15 78                 s0 = u64 [sp + 0x78]
  6250: 82 16 70                 s1 = u64 [sp + 0x70]
  6253: 95 11 88 00              sp = sp + 0x88
  6257: 32 00                    ret
      :                          @449 [@dyn 61]
  6259: 32 00                    ret
      :                          @450 [@dyn 62]
  6261: 95 11 80                 sp = sp + 0xffffffffffffff80
  6264: 7b 10 78                 u64 [sp + 0x78] = ra
  6267: 7b 15 70                 u64 [sp + 0x70] = s0
  6270: 7b 16 68                 u64 [sp + 0x68] = s1
  6273: 64 92                    t0 = a2
  6275: 33 00                    ra = 0
  6277: 33 0b                    a4 = 0
  6279: 33 05                    s0 = 0
  6281: 14 03 ff fe fe fe fe fe fe fe t1 = 0xfefefefefefefeff
  6291: 33 0a 0a 0a 0a 0a        a3 = 0xa0a0a0a
  6297: 14 04 0a 0a 0a 0a 0a 0a 0a 0a t2 = 0xa0a0a0a0a0a0a0a
  6307: 82 79 10                 a2 = u64 [a0 + 0x10]
  6310: 7b 19 48                 u64 [sp + 0x48] = a2
  6313: 82 79                    a2 = u64 [a0]
  6315: 7b 19 38                 u64 [sp + 0x38] = a2
  6318: 82 77 08                 a0 = u64 [a0 + 0x8]
  6321: 7b 17 30                 u64 [sp + 0x30] = a0
  6324: 33 07 0c 00 01           a0 = 0x1000c
  6329: 7b 17 08                 u64 [sp + 0x8] = a0
  6332: 3a 07 08 00 03           a0 = u64 [0x30008]
  6337: 7b 17 60                 u64 [sp + 0x60] = a0
  6340: 7b 18 58                 u64 [sp + 0x58] = a1
  6343: 95 88 08                 a1 = a1 + 0x8
  6346: 7b 18                    u64 [sp] = a1
  6348: 33 0c 0a                 a5 = 0xa
  6351: 7b 12 20                 u64 [sp + 0x20] = t0
  6354: 7b 13 18                 u64 [sp + 0x18] = t1
  6357: 7b 14 10                 u64 [sp + 0x10] = t2
  6360: 28 3a                    jump @454
      :                          @451
  6362: 64 06                    s1 = ra
  6364: c8 89 07                 a0 = a2 + a1
  6367: 7c 77 ff                 a0 = u8 [a0 + 0xffffffffffffffff]
  6370: 95 77 f6                 a0 = a0 + 0xfffffffffffffff6
  6373: 88 77 01                 a0 = a0 <u 0x1
  6376: 01                       fallthrough
      :                          @452
  6377: 82 1a 48                 a3 = u64 [sp + 0x48]
  6380: 78 a7                    u8 [a3] = a0
  6382: 82 17 30                 a0 = u64 [sp + 0x30]
  6385: 82 7a 18                 a3 = u64 [a0 + 0x18]
  6388: 82 17 38                 a0 = u64 [sp + 0x38]
  6391: b4 a0 01 7e              ra = 126, jump [a3]
      :                          @453 [@dyn 63]
  6395: 64 5b                    a4 = s0
  6397: 82 12 20                 t0 = u64 [sp + 0x20]
  6400: 82 13 18                 t1 = u64 [sp + 0x18]
  6403: 82 14 10                 t2 = u64 [sp + 0x10]
  6406: 64 60                    ra = s1
  6408: 33 0c 0a                 a5 = 0xa
  6411: 82 15 40                 s0 = u64 [sp + 0x40]
  6414: 52 07 64 01              jump @495 if a0 != 0
      :                          @454
  6418: 84 57 ff 00              a0 = s0 & 0xff
  6422: 52 07 58 01              jump @494 if a0 != 0
      :                          @455
  6426: 7b 1b 50                 u64 [sp + 0x50] = a4
  6429: ae 02 0a                 jump @458 if t0 >=u ra
      :                          @456
  6432: 28 ef 00                 jump @485
      :                          @457
  6435: ac 02 ec 00              jump @485 if t0 <u ra
      :                          @458
  6439: c9 02 08                 a1 = t0 - ra
  6442: 82 16 58                 s1 = u64 [sp + 0x58]
  6445: c8 06 06                 s1 = s1 + ra
  6448: 55 18 10 1d              jump @464 if a1 >=u 16
      :                          @459
  6452: aa 02 d8 00              jump @484 if t0 == ra
      :                          @460
  6456: 33 0a                    a3 = 0
  6458: 01                       fallthrough
      :                          @461
  6459: c8 a6 07                 a0 = s1 + a3
  6462: 7c 77                    a0 = u8 [a0]
  6464: aa c7 a5 00              jump @479 if a0 == a5
      :                          @462
  6468: 95 aa 01                 a3 = a3 + 0x1
  6471: ab a8 f4                 jump @461 if a1 != a3
      :                          @463
  6474: 28 c2 00                 jump @484
      :                          @464
  6477: 95 69 07                 a2 = s1 + 0x7
  6480: 84 9a f8                 a3 = a2 & 0xfffffffffffffff8
  6483: c9 6a 07                 a0 = a3 - s1
  6486: d3 6a 0a                 a3 = a3 ^ s1
  6489: 88 aa 01                 a3 = a3 <u 0x1
  6492: 88 7b 01                 a4 = a0 <u 0x1
  6495: d4 ba 0a                 a3 = a3 | a4
  6498: 51 0a 45                 jump @470 if a3 == 0
      :                          @465
  6501: 33 07                    a0 = 0
  6503: 95 8a f0                 a3 = a1 + 0xfffffffffffffff0
  6506: 82 1b                    a4 = u64 [sp]
  6508: c8 0b 0b                 a4 = a4 + ra
  6511: 28 08                    jump @467
      :                          @466
  6513: 82 1b                    a4 = u64 [sp]
  6515: c8 0b 0b                 a4 = a4 + ra
  6518: 01                       fallthrough
      :                          @467
  6519: c8 76 0c                 a5 = s1 + a0
  6522: 82 cc                    a5 = u64 [a5]
  6524: c8 7b 09                 a2 = a4 + a0
  6527: 82 99                    a2 = u64 [a2]
  6529: d3 4c 05                 s0 = a5 ^ t2
  6532: c8 35 05                 s0 = s0 + t1
  6535: e0 c5 0c                 a5 = s0 & ~a5
  6538: d3 49 05                 s0 = a2 ^ t2
  6541: c8 35 05                 s0 = s0 + t1
  6544: e0 95 09                 a2 = s0 & ~a2
  6547: d4 c9 09                 a2 = a2 | a5
  6550: 82 1c 60                 a5 = u64 [sp + 0x60]
  6553: d2 c9 09                 a2 = a2 & a5
  6556: 52 09 1f                 jump @473 if a2 != 0
      :                          @468
  6559: 95 77 10                 a0 = a0 + 0x10
  6562: ae 7a d5                 jump @467 if a3 >=u a0
      :                          @469
  6565: 28 16                    jump @473
      :                          @470
  6567: c8 a6 0b                 a4 = s1 + a3
  6570: 7c bb                    a4 = u8 [a4]
  6572: aa cb 51                 jump @482 if a4 == a5
      :                          @471
  6575: 95 aa 01                 a3 = a3 + 0x1
  6578: ab a7 f5                 jump @470 if a0 != a3
      :                          @472
  6581: 95 8a f0                 a3 = a1 + 0xfffffffffffffff0
  6584: ae 7a b9                 jump @466 if a3 >=u a0
      :                          @473
  6587: aa 87 9b 00              jump @491 if a0 == a1
      :                          @474
  6591: 33 0a                    a3 = 0
  6593: c8 76 06                 s1 = s1 + a0
  6596: c9 72 08                 a1 = t0 - a0
  6599: c9 08 08                 a1 = a1 - ra
  6602: 33 0c 0a                 a5 = 0xa
  6605: 82 1b 50                 a4 = u64 [sp + 0x50]
  6608: 01                       fallthrough
      :                          @475
  6609: c8 a6 09                 a2 = s1 + a3
  6612: 7c 99                    a2 = u8 [a2]
  6614: aa c9 0b                 jump @478 if a2 == a5
      :                          @476
  6617: 95 aa 01                 a3 = a3 + 0x1
  6620: ab a8 f5                 jump @475 if a1 != a3
      :                          @477
  6623: 28 2d                    jump @484
      :                          @478
  6625: c8 7a 0a                 a3 = a3 + a0
  6628: 01                       fallthrough
      :                          @479
  6629: c8 0a 0a                 a3 = a3 + ra
  6632: 95 a0 01                 ra = a3 + 0x1
  6635: ae 2a 38 ff              jump @457 if a3 >=u t0
      :                          @480
  6639: 82 17 58                 a0 = u64 [sp + 0x58]
  6642: c8 7a 0a                 a3 = a3 + a0
  6645: 7c a7                    a0 = u8 [a3]
  6647: ab c7 2c ff              jump @457 if a0 != a5
      :                          @481
  6651: 28 62                    jump @492
      :                          @482
  6653: 82 1b 50                 a4 = u64 [sp + 0x50]
  6656: c8 0a 0a                 a3 = a3 + ra
  6659: 95 a0 01                 ra = a3 + 0x1
  6662: ac 2a e9                 jump @480 if a3 <u t0
      :                          @483
  6665: 28 1a ff                 jump @457
      :                          @484
  6668: 64 20                    ra = t0
  6670: 01                       fallthrough
      :                          @485
  6671: 49 11 40 01              u64 [sp + 64] = 0x1
  6675: 64 b5                    s0 = a4
  6677: 64 26                    s1 = t0
  6679: aa 2b 57                 jump @494 if a4 == t0
      :                          @486
  6682: 82 17 48                 a0 = u64 [sp + 0x48]
  6685: 7c 77                    a0 = u8 [a0]
  6687: 51 07 23                 jump @489 if a0 == 0
      :                          @487
  6690: 82 17 30                 a0 = u64 [sp + 0x30]
  6693: 82 7a 18                 a3 = u64 [a0 + 0x18]
  6696: 33 09 04                 a2 = 0x4
  6699: 82 17 38                 a0 = u64 [sp + 0x38]
  6702: 82 18 08                 a1 = u64 [sp + 0x8]
  6705: 7b 10 28                 u64 [sp + 0x28] = ra
  6708: b4 a0 02 80 00           ra = 128, jump [a3]
      :                          @488 [@dyn 64]
  6713: 82 1b 50                 a4 = u64 [sp + 0x50]
  6716: 82 10 28                 ra = u64 [sp + 0x28]
  6719: 52 07 33                 jump @495 if a0 != 0
      :                          @489
  6722: c9 b6 09                 a2 = s1 - a4
  6725: 82 18 58                 a1 = u64 [sp + 0x58]
  6728: c8 b8 08                 a1 = a1 + a4
  6731: ab b6 8f fe              jump @451 if s1 != a4
      :                          @490
  6735: 64 06                    s1 = ra
  6737: 33 07                    a0 = 0
  6739: 28 96 fe                 jump @452
      :                          @491
  6742: 64 20                    ra = t0
  6744: 82 1b 50                 a4 = u64 [sp + 0x50]
  6747: 28 b4                    jump @485
      :                          @492
  6749: 49 11 40                 u64 [sp + 64] = 0
  6752: 64 05                    s0 = ra
  6754: 64 06                    s1 = ra
  6756: 82 17 48                 a0 = u64 [sp + 0x48]
  6759: 7c 77                    a0 = u8 [a0]
  6761: 52 07 b9                 jump @487 if a0 != 0
      :                          @493
  6764: 28 d6                    jump @489
      :                          @494
  6766: 33 07                    a0 = 0
  6768: 28 06                    jump @496
      :                          @495
  6770: 33 07 01                 a0 = 0x1
  6773: 01                       fallthrough
      :                          @496
  6774: 82 10 78                 ra = u64 [sp + 0x78]
  6777: 82 15 70                 s0 = u64 [sp + 0x70]
  6780: 82 16 68                 s1 = u64 [sp + 0x68]
  6783: 95 11 80 00              sp = sp + 0x80
  6787: 32 00                    ret
      :                          @497 [@dyn 65]
  6789: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  6792: 7b 10 20                 u64 [sp + 0x20] = ra
  6795: 7b 15 18                 u64 [sp + 0x18] = s0
  6798: 7b 16 10                 u64 [sp + 0x10] = s1
  6801: 82 75 10                 s0 = u64 [a0 + 0x10]
  6804: 7c 59                    a2 = u8 [s0]
  6806: 82 7b                    a4 = u64 [a0]
  6808: 82 76 08                 s1 = u64 [a0 + 0x8]
  6811: 51 09 33                 jump @501 if a2 == 0
      :                          @498
  6814: 82 6a 18                 a3 = u64 [s1 + 0x18]
  6817: 7b 18 08                 u64 [sp + 0x8] = a1
  6820: 33 08 0c 00 01           a1 = 0x1000c
  6825: 33 09 04                 a2 = 0x4
  6828: 64 b7                    a0 = a4
  6830: 7b 1b                    u64 [sp] = a4
  6832: b4 a0 02 84 00           ra = 132, jump [a3]
      :                          @499 [@dyn 66]
  6837: 82 18 08                 a1 = u64 [sp + 0x8]
  6840: 82 1b                    a4 = u64 [sp]
  6842: 51 07 14                 jump @501 if a0 == 0
      :                          @500
  6845: 33 07 01                 a0 = 0x1
  6848: 82 10 20                 ra = u64 [sp + 0x20]
  6851: 82 15 18                 s0 = u64 [sp + 0x18]
  6854: 82 16 10                 s1 = u64 [sp + 0x10]
  6857: 95 11 28                 sp = sp + 0x28
  6860: 32 00                    ret
      :                          @501
  6862: 83 87                    i32 a0 = a1 + 0
  6864: 95 77 f6                 a0 = a0 + 0xfffffffffffffff6
  6867: 88 77 01                 a0 = a0 <u 0x1
  6870: 78 57                    u8 [s0] = a0
  6872: 82 6c 20                 a5 = u64 [s1 + 0x20]
  6875: 64 b7                    a0 = a4
  6877: 82 10 20                 ra = u64 [sp + 0x20]
  6880: 82 15 18                 s0 = u64 [sp + 0x18]
  6883: 82 16 10                 s1 = u64 [sp + 0x10]
  6886: 95 11 28                 sp = sp + 0x28
  6889: 32 0c                    jump [a5]
      :                          @502 [@dyn 67]
  6891: 64 8a                    a3 = a1
  6893: 33 08 40 02 01           a1 = 0x10240
  6898: 64 a9                    a2 = a3
  6900: 28 a0 fb                 jump @411
      :                          @503
  6903: 51 08 9b 00              jump @524 if a1 == 0
      :                          @504
  6907: 64 79                    a2 = a0
  6909: 7c 77                    a0 = u8 [a0]
  6911: 51 07 91 00              jump @523 if a0 == 0
      :                          @505
  6915: 51 27 ff 00 90 00        jump @525 if a0 == 255
      :                          @506
  6921: 6c 7a                    a3 = sext.b a0
  6923: 57 0a 09                 jump @508 if a3 <s 0
      :                          @507
  6926: 33 0a                    a3 = 0
  6928: 33 08                    a1 = 0
  6930: 28 73                    jump @522
      :                          @508
  6932: 55 27 c0 00 0d           jump @510 if a0 >=u 192
      :                          @509
  6937: 33 0a 01                 a3 = 0x1
  6940: 33 0b 80                 a4 = 0xffffffffffffff80
  6943: 28 4a                    jump @519
      :                          @510
  6945: 55 27 e0 00 0e           jump @512 if a0 >=u 224
      :                          @511
  6950: 33 0a 02                 a3 = 0x2
  6953: 33 0b 40 ff              a4 = 0xffffffffffffff40
  6957: 28 3c                    jump @519
      :                          @512
  6959: 55 27 f0 00 0e           jump @514 if a0 >=u 240
      :                          @513
  6964: 33 0a 03                 a3 = 0x3
  6967: 33 0b 20 ff              a4 = 0xffffffffffffff20
  6971: 28 2e                    jump @519
      :                          @514
  6973: 55 27 f8 00 0e           jump @516 if a0 >=u 248
      :                          @515
  6978: 33 0a 04                 a3 = 0x4
  6981: 33 0b 10 ff              a4 = 0xffffffffffffff10
  6985: 28 20                    jump @519
      :                          @516
  6987: 55 27 fc 00 0e           jump @518 if a0 >=u 252
      :                          @517
  6992: 33 0a 05                 a3 = 0x5
  6995: 33 0b 08 ff              a4 = 0xffffffffffffff08
  6999: 28 12                    jump @519
      :                          @518
  7001: 88 7a fe 00              a3 = a0 <u 0xfe
  7005: 33 0b 04 ff              a4 = 0xffffffffffffff04
  7009: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  7013: 85 aa 07                 a3 = a3 ^ 0x7
  7016: 01                       fallthrough
      :                          @519
  7017: ae 8a 2b                 jump @526 if a3 >=u a1
      :                          @520
  7020: 33 08                    a1 = 0
  7022: c8 b7 07                 a0 = a0 + a4
  7025: 64 ab                    a4 = a3
  7027: 01                       fallthrough
      :                          @521
  7028: c8 b9 0c                 a5 = a2 + a4
  7031: 7c cc                    a5 = u8 [a5]
  7033: 97 88 08                 a1 = a1 << 0x8
  7036: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  7039: d4 c8 08                 a1 = a1 | a5
  7042: 52 0b f2                 jump @521 if a4 != 0
      :                          @522
  7045: 8a a9 03                 i32 a2 = a3 << 0x3
  7048: cf 97 07                 a0 = a0 << a2
  7051: c8 87 07                 a0 = a0 + a1
  7054: 32 00                    ret
      :                          @523
  7056: 32 00                    ret
      :                          @524
  7058: 00                       trap
      :                          @525
  7059: 00                       trap
      :                          @526
  7060: 00                       trap
      :                          @527 [@dyn 68]
  7061: 95 11 68 ff              sp = sp + 0xffffffffffffff68
  7065: 7b 10 90 00              u64 [sp + 0x90] = ra
  7069: 7b 15 88 00              u64 [sp + 0x88] = s0
  7073: 7b 16 80 00              u64 [sp + 0x80] = s1
  7077: 64 85                    s0 = a1
  7079: 82 86 28                 s1 = u64 [a1 + 0x28]
  7082: 82 8a 20                 a3 = u64 [a1 + 0x20]
  7085: 82 6b 18                 a4 = u64 [s1 + 0x18]
  7088: 7b 17 10                 u64 [sp + 0x10] = a0
  7091: 33 08 38 02 01           a1 = 0x10238
  7096: 33 09 01                 a2 = 0x1
  7099: 7b 1a 18                 u64 [sp + 0x18] = a3
  7102: 64 a7                    a0 = a3
  7104: 7b 1b 08                 u64 [sp + 0x8] = a4
  7107: b4 b0 02 8a 00           ra = 138, jump [a4]
      :                          @528 [@dyn 69]
  7112: 51 07 09                 jump @530 if a0 == 0
      :                          @529
  7115: 33 09 01                 a2 = 0x1
  7118: 28 d2 00                 jump @542
      :                          @530
  7121: 80 58 34                 a1 = u32 [s0 + 0x34]
  7124: 84 87 04                 a0 = a1 & 0x4
  7127: 52 07 21                 jump @534 if a0 != 0
      :                          @531
  7130: 82 17 10                 a0 = u64 [sp + 0x10]
  7133: 64 58                    a1 = s0
  7135: 50 20 8c 00 d5 00        ra = 140, jump @543
      :                          @532 [@dyn 70]
  7141: 33 09 01                 a2 = 0x1
  7144: 52 07 b8 00              jump @542 if a0 != 0
      :                          @533
  7148: 82 57 28                 a0 = u64 [s0 + 0x28]
  7151: 82 5a 20                 a3 = u64 [s0 + 0x20]
  7154: 82 7b 18                 a4 = u64 [a0 + 0x18]
  7157: 28 99 00                 jump @540
      :                          @534
  7160: 7b 18                    u64 [sp] = a1
  7162: 33 08 72 02 01           a1 = 0x10272
  7167: 33 09 01                 a2 = 0x1
  7170: 82 17 18                 a0 = u64 [sp + 0x18]
  7173: 82 1a 08                 a3 = u64 [sp + 0x8]
  7176: b4 a0 02 8e 00           ra = 142, jump [a3]
      :                          @535 [@dyn 71]
  7181: 33 09 01                 a2 = 0x1
  7184: 82 18 18                 a1 = u64 [sp + 0x18]
  7187: 52 07 8d 00              jump @542 if a0 != 0
      :                          @536
  7191: 46 11 3f 01              u8 [sp + 63] = 0x1
  7195: 7b 18 20                 u64 [sp + 0x20] = a1
  7198: 7b 16 28                 u64 [sp + 0x28] = s1
  7201: 95 17 3f                 a0 = sp + 0x3f
  7204: 7b 17 30                 u64 [sp + 0x30] = a0
  7207: 81 57 30                 a0 = i32 [s0 + 0x30]
  7210: 7c 58 38                 a1 = u8 [s0 + 0x38]
  7213: 82 59                    a2 = u64 [s0]
  7215: 82 5a 08                 a3 = u64 [s0 + 0x8]
  7218: 82 5b 10                 a4 = u64 [s0 + 0x10]
  7221: 82 5c 18                 a5 = u64 [s0 + 0x18]
  7224: 82 16                    s1 = u64 [sp]
  7226: 7a 16 74                 u32 [sp + 0x74] = s1
  7229: 7a 17 70                 u32 [sp + 0x70] = a0
  7232: 78 18 78                 u8 [sp + 0x78] = a1
  7235: 7b 19 40                 u64 [sp + 0x40] = a2
  7238: 7b 1a 48                 u64 [sp + 0x48] = a3
  7241: 7b 1b 50                 u64 [sp + 0x50] = a4
  7244: 7b 1c 58                 u64 [sp + 0x58] = a5
  7247: 95 17 20                 a0 = sp + 0x20
  7250: 7b 17 60                 u64 [sp + 0x60] = a0
  7253: 33 07 40 02 01           a0 = 0x10240
  7258: 7b 17 68                 u64 [sp + 0x68] = a0
  7261: 95 18 40                 a1 = sp + 0x40
  7264: 82 17 10                 a0 = u64 [sp + 0x10]
  7267: 50 20 90 00 51           ra = 144, jump @543
      :                          @537 [@dyn 72]
  7272: 52 07 63 ff              jump @529 if a0 != 0
      :                          @538
  7276: 82 18 68                 a1 = u64 [sp + 0x68]
  7279: 82 17 60                 a0 = u64 [sp + 0x60]
  7282: 82 8a 18                 a3 = u64 [a1 + 0x18]
  7285: 33 08 70 02 01           a1 = 0x10270
  7290: 33 09 02                 a2 = 0x2
  7293: b4 a0 02 92 00           ra = 146, jump [a3]
      :                          @539 [@dyn 73]
  7298: 82 1a 18                 a3 = u64 [sp + 0x18]
  7301: 82 1b 08                 a4 = u64 [sp + 0x8]
  7304: 33 09 01                 a2 = 0x1
  7307: 52 07 15                 jump @542 if a0 != 0
      :                          @540
  7310: 33 08 73 02 01           a1 = 0x10273
  7315: 33 09 01                 a2 = 0x1
  7318: 64 a7                    a0 = a3
  7320: b4 b0 02 94 00           ra = 148, jump [a4]
      :                          @541 [@dyn 74]
  7325: 64 79                    a2 = a0
  7327: 01                       fallthrough
      :                          @542
  7328: 64 97                    a0 = a2
  7330: 82 10 90 00              ra = u64 [sp + 0x90]
  7334: 82 15 88 00              s0 = u64 [sp + 0x88]
  7338: 82 16 80 00              s1 = u64 [sp + 0x80]
  7342: 95 11 98 00              sp = sp + 0x98
  7346: 32 00                    ret
      :                          @543
  7348: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  7352: 7b 10 80 00              u64 [sp + 0x80] = ra
  7356: 64 82                    t0 = a1
  7358: 80 88 34                 a1 = u32 [a1 + 0x34]
  7361: 84 89 10                 a2 = a1 & 0x10
  7364: 52 09 1b                 jump @546 if a2 != 0
      :                          @544
  7367: 84 88 20                 a1 = a1 & 0x20
  7370: 52 08 46                 jump @549 if a1 != 0
      :                          @545
  7373: 7c 77                    a0 = u8 [a0]
  7375: 33 08 01                 a1 = 0x1
  7378: 64 29                    a2 = t0
  7380: 82 10 80 00              ra = u64 [sp + 0x80]
  7384: 95 11 88 00              sp = sp + 0x88
  7388: 28 0a f6                 jump @347
      :                          @546
  7391: 7c 77                    a0 = u8 [a0]
  7393: 33 0a 81 00              a3 = 0x81
  7397: 95 18 7f                 a1 = sp + 0x7f
  7400: 33 03 57                 t1 = 0x57
  7403: 01                       fallthrough
      :                          @547
  7404: 64 ab                    a4 = a3
  7406: 84 7a 0f                 a3 = a0 & 0xf
  7409: 97 77 38                 a0 = a0 << 0x38
  7412: 98 77 3c                 a0 = a0 >> 0x3c
  7415: 88 ac 0a                 a5 = a3 <u 0xa
  7418: 33 09 30                 a2 = 0x30
  7421: da c3 09                 a2 = t1 if a5 == 0
  7424: be a9 09                 i32 a2 = a2 + a3
  7427: 78 89                    u8 [a1] = a2
  7429: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
  7432: 95 ba ff                 a3 = a4 + 0xffffffffffffffff
  7435: 52 07 e1                 jump @547 if a0 != 0
      :                          @548
  7438: 28 31                    jump @551
      :                          @549
  7440: 7c 77                    a0 = u8 [a0]
  7442: 33 0a 81 00              a3 = 0x81
  7446: 95 18 7f                 a1 = sp + 0x7f
  7449: 33 03 37                 t1 = 0x37
  7452: 01                       fallthrough
      :                          @550
  7453: 64 ab                    a4 = a3
  7455: 84 7a 0f                 a3 = a0 & 0xf
  7458: 97 77 38                 a0 = a0 << 0x38
  7461: 98 77 3c                 a0 = a0 >> 0x3c
  7464: 88 ac 0a                 a5 = a3 <u 0xa
  7467: 33 09 30                 a2 = 0x30
  7470: da c3 09                 a2 = t1 if a5 == 0
  7473: be a9 09                 i32 a2 = a2 + a3
  7476: 78 89                    u8 [a1] = a2
  7478: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
  7481: 95 ba ff                 a3 = a4 + 0xffffffffffffffff
  7484: 52 07 e1                 jump @550 if a0 != 0
      :                          @551
  7487: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
  7490: 56 27 80 00 2b           jump @554 if a0 >u 128
      :                          @552
  7495: 9a ac 81 00              a5 = 0x81 - a3
  7499: 64 1b                    a4 = sp
  7501: c8 7b 0b                 a4 = a4 + a0
  7504: 33 09 74 02 01           a2 = 0x10274
  7509: 33 08 01                 a1 = 0x1
  7512: 33 0a 02                 a3 = 0x2
  7515: 64 27                    a0 = t0
  7517: 50 20 96 00 b6 f6        ra = 150, jump @357
      :                          @553 [@dyn 75]
  7523: 82 10 80 00              ra = u64 [sp + 0x80]
  7527: 95 11 88 00              sp = sp + 0x88
  7531: 32 00                    ret
      :                          @554
  7533: 00                       trap
