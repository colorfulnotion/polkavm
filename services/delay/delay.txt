// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 65536 bytes
// RO data = []
// RW data = []
// Instructions = 107
// Code size = 323 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 2c 01 00 00           jump @38
      :                          @2
    10: 28 30 01                 jump @39
      :                          @3 [export #0: 'refine']
    13: 95 11 f8                 sp = sp + 0xfffffffffffffff8
    16: 7b 10                    u64 [sp] = ra
    18: 33 09 04                 a2 = 0x4
    21: ac 98 0b 01              jump @34 if a1 <u a2
      :                          @4
    25: 95 88 fc                 a1 = a1 + 0xfffffffffffffffc
    28: 51 08 04 01              jump @34 if a1 == 0
      :                          @5
    32: 95 79 04                 a2 = a0 + 0x4
    35: 7d 9a                    a3 = i8 [a2]
    37: 84 ac ff 00              a5 = a3 & 0xff
    41: 33 04 01                 t2 = 0x1
    44: 59 0a 44                 jump @13 if a3 >=s 0
      :                          @6
    47: 33 0a c0 00              a3 = 0xc0
    51: 33 04 02                 t2 = 0x2
    54: ac ac 36                 jump @12 if a5 <u a3
      :                          @7
    57: 33 0a e0 00              a3 = 0xe0
    61: 33 04 03                 t2 = 0x3
    64: ac ac 2c                 jump @12 if a5 <u a3
      :                          @8
    67: 33 0a f0 00              a3 = 0xf0
    71: 33 04 04                 t2 = 0x4
    74: ac ac 22                 jump @12 if a5 <u a3
      :                          @9
    77: 33 0a f8 00              a3 = 0xf8
    81: 33 04 05                 t2 = 0x5
    84: ac ac 18                 jump @12 if a5 <u a3
      :                          @10
    87: 33 0a fc 00              a3 = 0xfc
    91: 33 04 06                 t2 = 0x6
    94: ac ac 0e                 jump @12 if a5 <u a3
      :                          @11
    97: 88 c7 fe 00              a0 = a5 <u 0xfe
   101: 33 0a 08                 a3 = 0x8
   104: c9 7a 04                 t2 = a3 - a0
   107: 01                       fallthrough
      :                          @12
   108: ac 48 c3 00              jump @36 if a1 <u t2
      :                          @13
   112: 51 0c 90 00              jump @32 if a5 == 0
      :                          @14
   116: 51 2c ff 00 ba 00        jump @35 if a5 == 255
      :                          @15
   122: 6c ca                    a3 = sext.b a5
   124: 57 0a 09                 jump @17 if a3 <s 0
      :                          @16
   127: 33 03                    t1 = 0
   129: 33 0a                    a3 = 0
   131: 28 73                    jump @31
      :                          @17
   133: 55 2c c0 00 0d           jump @19 if a5 >=u 192
      :                          @18
   138: 33 03 01                 t1 = 0x1
   141: 33 02 80                 t0 = 0xffffffffffffff80
   144: 28 4a                    jump @28
      :                          @19
   146: 55 2c e0 00 0e           jump @21 if a5 >=u 224
      :                          @20
   151: 33 03 02                 t1 = 0x2
   154: 33 02 40 ff              t0 = 0xffffffffffffff40
   158: 28 3c                    jump @28
      :                          @21
   160: 55 2c f0 00 0e           jump @23 if a5 >=u 240
      :                          @22
   165: 33 03 03                 t1 = 0x3
   168: 33 02 20 ff              t0 = 0xffffffffffffff20
   172: 28 2e                    jump @28
      :                          @23
   174: 55 2c f8 00 0e           jump @25 if a5 >=u 248
      :                          @24
   179: 33 03 04                 t1 = 0x4
   182: 33 02 10 ff              t0 = 0xffffffffffffff10
   186: 28 20                    jump @28
      :                          @25
   188: 55 2c fc 00 0e           jump @27 if a5 >=u 252
      :                          @26
   193: 33 03 05                 t1 = 0x5
   196: 33 02 08 ff              t0 = 0xffffffffffffff08
   200: 28 12                    jump @28
      :                          @27
   202: 88 ca fe 00              a3 = a5 <u 0xfe
   206: 33 02 04 ff              t0 = 0xffffffffffffff04
   210: 93 a2 02 ff              t0 = 0xffffffffffffff02 if a3 == 0
   214: 85 a3 07                 t1 = a3 ^ 0x7
   217: 01                       fallthrough
      :                          @28
   218: ae 43 56                 jump @37 if t1 >=u t2
      :                          @29
   221: 33 0a                    a3 = 0
   223: c8 2c 0c                 a5 = a5 + t0
   226: 64 3b                    a4 = t1
   228: 01                       fallthrough
      :                          @30
   229: c8 b9 07                 a0 = a2 + a4
   232: 7c 77                    a0 = u8 [a0]
   234: 97 aa 08                 a3 = a3 << 0x8
   237: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
   240: d4 7a 0a                 a3 = a3 | a0
   243: 52 0b f2                 jump @30 if a4 != 0
      :                          @31
   246: 8a 37 03                 i32 a0 = t1 << 0x3
   249: cf 7c 0c                 a5 = a5 << a0
   252: c8 ac 0c                 a5 = a5 + a3
   255: 01                       fallthrough
      :                          @32
   256: e4 48 07                 a0 = maxu(a1, t2)
   259: c9 47 07                 a0 = a0 - t2
   262: d8 c7 08                 a1 = a0 <u a5
   265: e4 c7 07                 a0 = maxu(a0, a5)
   268: c9 c7 07                 a0 = a0 - a5
   271: 88 77 20                 a0 = a0 <u 0x20
   274: d4 87 07                 a0 = a0 | a1
   277: 52 07 0b                 jump @34 if a0 != 0
      :                          @33
   280: c8 49 09                 a2 = a2 + t2
   283: 80 97                    a0 = u32 [a2]
   285: 0a 63                    ecalli 99 // 'delay'
   287: 01                       fallthrough
      :                          @34
   288: 33 07 00 00 01           a0 = 0x10000
   293: 33 08                    a1 = 0
   295: 82 10                    ra = u64 [sp]
   297: 95 11 08                 sp = sp + 0x8
   300: 32 00                    ret
      :                          @35
   302: 00                       trap
      :                          @36
   303: 00                       trap
      :                          @37
   304: 00                       trap
      :                          @38 [export #1: 'accumulate']
   305: 33 07 00 00 01           a0 = 0x10000
   310: 33 08                    a1 = 0
   312: 32 00                    ret
      :                          @39 [export #2: 'on_transfer']
   314: 33 07 00 00 01           a0 = 0x10000
   319: 33 08                    a1 = 0
   321: 32 00                    ret
