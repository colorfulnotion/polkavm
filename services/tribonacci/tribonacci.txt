// RO data = 328/328 bytes
// RW data = 16/4176 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 2 bytes
// RO data = [116, 114, 105, 98, 32, 111, 110, 95, 116, 114, 97, 110, 115, 102, 101, 114, 58, 32, 115, 116, 97, 114, 116, 95, 97, 100, 100, 114, 101, 115, 115, 61, 32, 108, 101, 110, 103, 116, 104, 61, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 32, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0]
// RW data = [75, 89, 134, 56, 214, 197, 109, 52, 128, 128, 128, 128, 128, 128, 128, 128]
// Instructions = 1300
// Code size = 3719 bytes

      :                          @0
     0: 28 ca 00 00 00           jump @17
      :                          @1
     5: 28 32 01 00 00           jump @22
      :                          @2
    10: 28 f8 02                 jump @78
      :                          @3 [@dyn 1]
    13: 95 11 78 ff              sp = sp + 0xffffffffffffff78
    17: 7b 10 80 00              u64 [sp + 0x80] = ra
    21: 80 89 34                 a2 = u32 [a1 + 0x34]
    24: 84 9a 10                 a3 = a2 & 0x10
    27: 52 0a 14                 jump @6 if a3 != 0
      :                          @4
    30: 84 99 20                 a2 = a2 & 0x20
    33: 52 09 4f                 jump @10 if a2 != 0
      :                          @5
    36: 82 10 80 00              ra = u64 [sp + 0x80]
    40: 95 11 88 00              sp = sp + 0x88
    44: 28 4e 08                 jump @199
      :                          @6
    47: 82 7b                    a4 = u64 [a0]
    49: 33 09 81 00              a2 = 0x81
    53: 95 17 7f                 a0 = sp + 0x7f
    56: 33 02 57                 t0 = 0x57
    59: 01                       fallthrough
      :                          @7
    60: 64 9c                    a5 = a2
    62: 98 ba 04                 a3 = a4 >> 0x4
    65: 84 bb 0f                 a4 = a4 & 0xf
    68: 88 b3 0a                 t1 = a4 <u 0xa
    71: 33 09 30                 a2 = 0x30
    74: da 32 09                 a2 = t0 if t1 == 0
    77: be b9 09                 i32 a2 = a2 + a4
    80: 78 79                    u8 [a0] = a2
    82: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
    85: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
    88: 64 ab                    a4 = a3
    90: 52 0a e2                 jump @7 if a3 != 0
      :                          @8
    93: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
    96: 56 27 80 00 69           jump @16 if a0 >u 128
      :                          @9
   101: 9a 9b 81 00              a4 = 0x81 - a2
   105: 64 1a                    a3 = sp
   107: c8 7a 0a                 a3 = a3 + a0
   110: 28 42                    jump @14
      :                          @10
   112: 82 7b                    a4 = u64 [a0]
   114: 33 09 81 00              a2 = 0x81
   118: 95 17 7f                 a0 = sp + 0x7f
   121: 33 02 37                 t0 = 0x37
   124: 01                       fallthrough
      :                          @11
   125: 64 9c                    a5 = a2
   127: 98 ba 04                 a3 = a4 >> 0x4
   130: 84 bb 0f                 a4 = a4 & 0xf
   133: 88 b3 0a                 t1 = a4 <u 0xa
   136: 33 09 30                 a2 = 0x30
   139: da 32 09                 a2 = t0 if t1 == 0
   142: be b9 09                 i32 a2 = a2 + a4
   145: 78 79                    u8 [a0] = a2
   147: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   150: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   153: 64 ab                    a4 = a3
   155: 52 0a e2                 jump @11 if a3 != 0
      :                          @12
   158: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
   161: 56 27 80 00 28           jump @16 if a0 >u 128
      :                          @13
   166: 9a 9b 81 00              a4 = 0x81 - a2
   170: 64 1a                    a3 = sp
   172: c8 7a 0a                 a3 = a3 + a0
   175: 01                       fallthrough
      :                          @14
   176: 33 09 02                 a2 = 0x2
   179: 64 87                    a0 = a1
   181: 33 08 28 00 01           a1 = 0x10028
   186: 50 10 04 e1 08           ra = 4, jump @209
      :                          @15 [@dyn 2]
   191: 82 10 80 00              ra = u64 [sp + 0x80]
   195: 95 11 88 00              sp = sp + 0x88
   199: 32 00                    ret
      :                          @16
   201: 00                       trap
      :                          @17 [export #0: 'refine']
   202: 95 11 d8                 sp = sp + 0xffffffffffffffd8
   205: 7b 10 20                 u64 [sp + 0x20] = ra
   208: 7b 15 18                 u64 [sp + 0x18] = s0
   211: 7b 16 10                 u64 [sp + 0x10] = s1
   214: 49 11 08                 u64 [sp + 8] = 0
   217: 49 01                    u64 [sp + 0] = 0
   219: 33 05 01                 s0 = 0x1
   222: 64 17                    a0 = sp
   224: 33 09 10                 a2 = 0x10
   227: 33 0a 05                 a3 = 0x5
   230: 33 0b 01                 a4 = 0x1
   233: 33 08                    a1 = 0
   235: 33 0c                    a5 = 0
   237: 0a 12                    ecalli 18 // 'fetch'
   239: 01                       fallthrough
      :                          @18
   240: 51 17 ff 1a              jump @20 if a0 == 4294967295
      :                          @19
   244: 81 17 04                 a0 = i32 [sp + 0x4]
   247: 81 18 08                 a1 = i32 [sp + 0x8]
   250: 81 19 0c                 a2 = i32 [sp + 0xc]
   253: 81 15                    s0 = i32 [sp]
   255: c8 78 0a                 a3 = a1 + a0
   258: be a9 09                 i32 a2 = a2 + a3
   261: 83 55 01                 i32 s0 = s0 + 0x1
   264: 28 0a                    jump @21
      :                          @20
   266: 33 07                    a0 = 0
   268: 33 08                    a1 = 0
   270: 33 09 01                 a2 = 0x1
   273: 01                       fallthrough
      :                          @21
   274: 7a 15                    u32 [sp] = s0
   276: 7a 19 04                 u32 [sp + 0x4] = a2
   279: 7a 17 08                 u32 [sp + 0x8] = a0
   282: 7a 18 0c                 u32 [sp + 0xc] = a1
   285: 64 17                    a0 = sp
   287: 33 08 10                 a1 = 0x10
   290: 0a 13                    ecalli 19 // 'export'
   292: 64 17                    a0 = sp
   294: 33 08 10                 a1 = 0x10
   297: 82 10 20                 ra = u64 [sp + 0x20]
   300: 82 15 18                 s0 = u64 [sp + 0x18]
   303: 82 16 10                 s1 = u64 [sp + 0x10]
   306: 95 11 28                 sp = sp + 0x28
   309: 32 00                    ret
      :                          @22 [export #1: 'accumulate']
   311: 95 11 d8                 sp = sp + 0xffffffffffffffd8
   314: 7b 10 20                 u64 [sp + 0x20] = ra
   317: 7b 15 18                 u64 [sp + 0x18] = s0
   320: 7b 16 10                 u64 [sp + 0x10] = s1
   323: 33 09 08                 a2 = 0x8
   326: ac 98 e5 00              jump @52 if a1 <u a2
      :                          @23
   330: 51 17 fc b3 01           jump @73 if a0 == 4294967292
      :                          @24
   335: 51 07 af 01              jump @74 if a0 == 0
      :                          @25
   339: 95 8a f8                 a3 = a1 + 0xfffffffffffffff8
   342: 95 75 08                 s0 = a0 + 0x8
   345: 51 0a 45                 jump @35 if a3 == 0
      :                          @26
   348: 7d 58                    a1 = i8 [s0]
   350: 33 06 01                 s1 = 0x1
   353: 59 08 40                 jump @36 if a1 >=s 0
      :                          @27
   356: 84 89 ff 00              a2 = a1 & 0xff
   360: 33 06 02                 s1 = 0x2
   363: 53 29 c0 00 2d           jump @33 if a2 <u 192
      :                          @28
   368: 33 06 03                 s1 = 0x3
   371: 53 29 e0 00 25           jump @33 if a2 <u 224
      :                          @29
   376: 33 06 04                 s1 = 0x4
   379: 53 29 f0 00 1d           jump @33 if a2 <u 240
      :                          @30
   384: 33 06 05                 s1 = 0x5
   387: 53 29 f8 00 15           jump @33 if a2 <u 248
      :                          @31
   392: 33 06 06                 s1 = 0x6
   395: 53 29 fc 00 0d           jump @33 if a2 <u 252
      :                          @32
   400: 88 98 fe 00              a1 = a2 <u 0xfe
   404: 9a 86 08                 s1 = 0x8 - a1
   407: 01                       fallthrough
      :                          @33
   408: ae 6a 09                 jump @36 if a3 >=u s1
      :                          @34
   411: 28 90 00                 jump @52
      :                          @35
   414: 33 06                    s1 = 0
   416: 01                       fallthrough
      :                          @36
   417: 7b 16                    u64 [sp] = s1
   419: 64 57                    a0 = s0
   421: 64 68                    a1 = s1
   423: 64 a6                    s1 = a3
   425: 50 10 06 40 0c           ra = 6, jump @299
      :                          @37 [@dyn 3]
   430: 82 1a                    a3 = u64 [sp]
   432: 51 07 7b                 jump @52 if a0 == 0
      :                          @38
   435: e4 a6 07                 a0 = maxu(s1, a3)
   438: c9 a7 07                 a0 = a0 - a3
   441: 53 17 60 72              jump @52 if a0 <u 96
      :                          @39
   445: c8 5a 08                 a1 = a3 + s0
   448: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   451: 95 87 60                 a0 = a1 + 0x60
   454: 7b 17                    u64 [sp] = a0
   456: 51 06 4c                 jump @50 if s1 == 0
      :                          @40
   459: 7d 78                    a1 = i8 [a0]
   461: 33 05 01                 s0 = 0x1
   464: 59 08 37                 jump @47 if a1 >=s 0
      :                          @41
   467: 84 89 ff 00              a2 = a1 & 0xff
   471: 33 05 02                 s0 = 0x2
   474: 53 29 c0 00 2d           jump @47 if a2 <u 192
      :                          @42
   479: 33 05 03                 s0 = 0x3
   482: 53 29 e0 00 25           jump @47 if a2 <u 224
      :                          @43
   487: 33 05 04                 s0 = 0x4
   490: 53 29 f0 00 1d           jump @47 if a2 <u 240
      :                          @44
   495: 33 05 05                 s0 = 0x5
   498: 53 29 f8 00 15           jump @47 if a2 <u 248
      :                          @45
   503: 33 05 06                 s0 = 0x6
   506: 53 29 fc 00 0d           jump @47 if a2 <u 252
      :                          @46
   511: 88 98 fe 00              a1 = a2 <u 0xfe
   515: 9a 85 08                 s0 = 0x8 - a1
   518: 01                       fallthrough
      :                          @47
   519: ac 56 f8 00              jump @75 if s1 <u s0
      :                          @48
   523: 64 58                    a1 = s0
   525: 50 10 08 dc 0b           ra = 8, jump @299
      :                          @49 [@dyn 4]
   530: 28 07                    jump @51
      :                          @50
   532: 33 05                    s0 = 0
   534: 33 07                    a0 = 0
   536: 01                       fallthrough
      :                          @51
   537: e4 56 08                 a1 = maxu(s1, s0)
   540: c9 58 08                 a1 = a1 - s0
   543: e4 78 08                 a1 = maxu(a1, a0)
   546: c9 78 08                 a1 = a1 - a0
   549: 33 09 21                 a2 = 0x21
   552: ae 98 1b                 jump @54 if a1 >=u a2
      :                          @52
   555: 33 08                    a1 = 0
   557: 33 06 00 00 01           s1 = 0x10000
   562: 01                       fallthrough
      :                          @53
   563: 64 67                    a0 = s1
   565: 82 10 20                 ra = u64 [sp + 0x20]
   568: 82 15 18                 s0 = u64 [sp + 0x18]
   571: 82 16 10                 s1 = u64 [sp + 0x10]
   574: 95 11 28                 sp = sp + 0x28
   577: 32 00                    ret
      :                          @54
   579: 82 19                    a2 = u64 [sp]
   581: c8 95 05                 s0 = s0 + a2
   584: c8 57 07                 a0 = a0 + s0
   587: 7c 79 20                 a2 = u8 [a0 + 0x20]
   590: 51 09 19                 jump @56 if a2 == 0
      :                          @55
   593: 46 11 0e                 u8 [sp + 14] = 0
   596: 95 17 0e                 a0 = sp + 0xe
   599: 33 08 01                 a1 = 0x1
   602: 33 09                    a2 = 0
   604: 33 0a                    a3 = 0
   606: 0a 03                    ecalli 3 // 'write'
   608: 33 08                    a1 = 0
   610: 33 05                    s0 = 0
   612: 28 82 00                 jump @71
      :                          @56
   615: 95 8a df                 a3 = a1 + 0xffffffffffffffdf
   618: 95 76 21                 s1 = a0 + 0x21
   621: 51 0a 51                 jump @67 if a3 == 0
      :                          @57
   624: 7d 67                    a0 = i8 [s1]
   626: 33 05 01                 s0 = 0x1
   629: 59 07 37                 jump @64 if a0 >=s 0
      :                          @58
   632: 84 77 ff 00              a0 = a0 & 0xff
   636: 33 05 02                 s0 = 0x2
   639: 53 27 c0 00 2d           jump @64 if a0 <u 192
      :                          @59
   644: 33 05 03                 s0 = 0x3
   647: 53 27 e0 00 25           jump @64 if a0 <u 224
      :                          @60
   652: 33 05 04                 s0 = 0x4
   655: 53 27 f0 00 1d           jump @64 if a0 <u 240
      :                          @61
   660: 33 05 05                 s0 = 0x5
   663: 53 27 f8 00 15           jump @64 if a0 <u 248
      :                          @62
   668: 33 05 06                 s0 = 0x6
   671: 53 27 fc 00 0d           jump @64 if a0 <u 252
      :                          @63
   676: 88 77 fe 00              a0 = a0 <u 0xfe
   680: 9a 75 08                 s0 = 0x8 - a0
   683: 01                       fallthrough
      :                          @64
   684: 7b 1a                    u64 [sp] = a3
   686: ac 5a 53                 jump @77 if a3 <u s0
      :                          @65
   689: 64 67                    a0 = s1
   691: 64 58                    a1 = s0
   693: 50 10 0a 34 0b           ra = 10, jump @299
      :                          @66 [@dyn 5]
   698: 82 1a                    a3 = u64 [sp]
   700: 28 07                    jump @68
      :                          @67
   702: 33 05                    s0 = 0
   704: 33 07                    a0 = 0
   706: 01                       fallthrough
      :                          @68
   707: c8 56 09                 a2 = s1 + s0
   710: e4 5a 08                 a1 = maxu(a3, s0)
   713: c9 58 08                 a1 = a1 - s0
   716: e6 78 05                 s0 = minu(a1, a0)
   719: 46 11 0e                 u8 [sp + 14] = 0
   722: 95 17 0e                 a0 = sp + 0xe
   725: 33 08 01                 a1 = 0x1
   728: 64 96                    s1 = a2
   730: 64 5a                    a3 = s0
   732: 0a 03                    ecalli 3 // 'write'
   734: 01                       fallthrough
      :                          @69
   735: 55 15 21 21              jump @76 if s0 >=u 33
      :                          @70
   739: 64 68                    a1 = s1
   741: 01                       fallthrough
      :                          @71
   742: 33 06 11 00 03           s1 = 0x30011
   747: 33 07 11 00 03           a0 = 0x30011
   752: 64 59                    a2 = s0
   754: 50 10 0c d2 04           ra = 12, jump @179
      :                          @72 [@dyn 6]
   759: 33 08 20                 a1 = 0x20
   762: 28 39 ff                 jump @53
      :                          @73
   765: 00                       trap
      :                          @74
   766: 00                       trap
      :                          @75
   767: 00                       trap
      :                          @76
   768: 00                       trap
      :                          @77
   769: 00                       trap
      :                          @78 [export #2: 'on_transfer']
   770: 95 11 60 ff              sp = sp + 0xffffffffffffff60
   774: 7b 10 98 00              u64 [sp + 0x98] = ra
   778: 7b 15 90 00              u64 [sp + 0x90] = s0
   782: 7b 16 88 00              u64 [sp + 0x88] = s1
   786: 7b 17 08                 u64 [sp + 0x8] = a0
   789: 7b 18 10                 u64 [sp + 0x10] = a1
   792: 95 17 08                 a0 = sp + 0x8
   795: 7b 17 48                 u64 [sp + 0x48] = a0
   798: 33 07 02                 a0 = 0x2
   801: 7b 17 50                 u64 [sp + 0x50] = a0
   804: 95 18 10                 a1 = sp + 0x10
   807: 7b 18 58                 u64 [sp + 0x58] = a1
   810: 7b 17 60                 u64 [sp + 0x60] = a0
   813: 33 07 f8 00 01           a0 = 0x100f8
   818: 7b 17 18                 u64 [sp + 0x18] = a0
   821: 49 11 20 02              u64 [sp + 32] = 0x2
   825: 49 11 38                 u64 [sp + 56] = 0
   828: 95 18 48                 a1 = sp + 0x48
   831: 7b 18 28                 u64 [sp + 0x28] = a1
   834: 49 11 30 02              u64 [sp + 48] = 0x2
   838: 33 07 00 10              a0 = 0x1000
   842: 33 06 40 00 03           s1 = 0x30040
   847: c8 76 08                 a1 = s1 + a0
   850: 01                       fallthrough
      :                          @79
   851: 82 8a                    a3 = u64 [a1]
   853: 95 a9 50                 a2 = a3 + 0x50
   856: ac a9 9a 00              jump @92 if a2 <u a3
      :                          @80
   860: 95 9b 01                 a4 = a2 + 0x1
   863: 88 bc 01                 a5 = a4 <u 0x1
   866: d8 b7 0b                 a4 = a0 <u a4
   869: d4 cb 0b                 a4 = a4 | a5
   872: 52 0b 8a 00              jump @92 if a4 != 0
      :                          @81
   876: 82 8b                    a4 = u64 [a1]
   878: ab ab e5                 jump @79 if a4 != a3
      :                          @82
   881: 7b 89                    u64 [a1] = a2
   883: 33 0c                    a5 = 0
   885: 7b 16                    u64 [sp] = s1
   887: c9 96 07                 a0 = s1 - a2
   890: 95 77 00 10              a0 = a0 + 0x1000
   894: 49 11 68 50              u64 [sp + 104] = 0x50
   898: 7b 17 70                 u64 [sp + 0x70] = a0
   901: 49 11 78                 u64 [sp + 120] = 0
   904: 33 08 18 01 01           a1 = 0x10118
   909: 95 17 68                 a0 = sp + 0x68
   912: 95 19 18                 a2 = sp + 0x18
   915: 50 10 0e 77 08           ra = 14, jump @261
      :                          @83 [@dyn 7]
   920: 52 07 5b                 jump @93 if a0 != 0
      :                          @84
   923: 82 15 70                 s0 = u64 [sp + 0x70]
   926: 82 1b 78                 a4 = u64 [sp + 0x78]
   929: 82 16 68                 s1 = u64 [sp + 0x68]
   932: 33 07 02                 a0 = 0x2
   935: 33 08                    a1 = 0
   937: 33 09                    a2 = 0
   939: 64 5a                    a3 = s0
   941: 33 00 10                 ra = 0x10
   944: 0a 64                    ecalli 100 // 'log'
   946: 01                       fallthrough
      :                          @85 [@dyn 8]
   947: 95 68 ff ef              a1 = s1 + 0xffffffffffffefff
   951: 53 28 00 f0 22           jump @91 if a1 <u 4294963200
      :                          @86
   956: 82 18                    a1 = u64 [sp]
   958: 95 87 00 10              a0 = a1 + 0x1000
   962: 01                       fallthrough
      :                          @87
   963: 82 78                    a1 = u64 [a0]
   965: c9 87 09                 a2 = a0 - a1
   968: ab 59 11                 jump @91 if a2 != s0
      :                          @88
   971: c9 68 09                 a2 = a1 - s1
   974: 01                       fallthrough
      :                          @89
   975: 82 7a                    a3 = u64 [a0]
   977: ab 8a f2                 jump @87 if a3 != a1
      :                          @90
   980: 7b 79                    u64 [a0] = a2
   982: 33 0b                    a4 = 0
   984: 01                       fallthrough
      :                          @91
   985: 33 07 00 00 01           a0 = 0x10000
   990: 33 08                    a1 = 0
   992: 82 10 98 00              ra = u64 [sp + 0x98]
   996: 82 15 90 00              s0 = u64 [sp + 0x90]
  1000: 82 16 88 00              s1 = u64 [sp + 0x88]
  1004: 95 11 a0 00              sp = sp + 0xa0
  1008: 32 00                    ret
      :                          @92
  1010: 00                       trap
      :                          @93
  1011: 00                       trap
      :                          @94
  1012: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1015: 7b 10 40                 u64 [sp + 0x40] = ra
  1018: 7b 15 38                 u64 [sp + 0x38] = s0
  1021: 7b 16 30                 u64 [sp + 0x30] = s1
  1024: c8 89 09                 a2 = a2 + a1
  1027: ac 89 52                 jump @102 if a2 <u a1
      :                          @95
  1030: 64 75                    s0 = a0
  1032: 82 77                    a0 = u64 [a0]
  1034: 97 78 01                 a1 = a0 << 0x1
  1037: 33 0a 08                 a3 = 0x8
  1040: e4 a9 09                 a2 = maxu(a2, a3)
  1043: e4 98 06                 s1 = maxu(a1, a2)
  1046: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1049: 98 88 3f                 a1 = a1 >> 0x3f
  1052: 51 07 12                 jump @97 if a0 == 0
      :                          @96
  1055: 82 59 08                 a2 = u64 [s0 + 0x8]
  1058: 7b 19 18                 u64 [sp + 0x18] = a2
  1061: 49 11 20 01              u64 [sp + 32] = 0x1
  1065: 7b 17 28                 u64 [sp + 0x28] = a0
  1068: 28 06                    jump @98
      :                          @97
  1070: 49 11 20                 u64 [sp + 32] = 0
  1073: 01                       fallthrough
      :                          @98
  1074: 64 17                    a0 = sp
  1076: 95 1a 18                 a3 = sp + 0x18
  1079: 64 69                    a2 = s1
  1081: 50 10 12 32              ra = 18, jump @106
      :                          @99 [@dyn 9]
  1085: 82 18                    a1 = u64 [sp]
  1087: 82 17 08                 a0 = u64 [sp + 0x8]
  1090: 51 08 14                 jump @103 if a1 == 0
      :                          @100
  1093: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1103: aa 87 0d                 jump @104 if a0 == a1
      :                          @101
  1106: 52 07 18                 jump @105 if a0 != 0
      :                          @102
  1109: 00                       trap
      :                          @103
  1110: 7b 57 08                 u64 [s0 + 0x8] = a0
  1113: 7b 56                    u64 [s0] = s1
  1115: 01                       fallthrough
      :                          @104
  1116: 82 10 40                 ra = u64 [sp + 0x40]
  1119: 82 15 38                 s0 = u64 [sp + 0x38]
  1122: 82 16 30                 s1 = u64 [sp + 0x30]
  1125: 95 11 48                 sp = sp + 0x48
  1128: 32 00                    ret
      :                          @105
  1130: 00                       trap
      :                          @106
  1131: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  1134: 7b 10 30                 u64 [sp + 0x30] = ra
  1137: 7b 15 28                 u64 [sp + 0x28] = s0
  1140: 7b 16 20                 u64 [sp + 0x20] = s1
  1143: 64 96                    s1 = a2
  1145: 64 73                    t1 = a0
  1147: 51 08 6e                 jump @116 if a1 == 0
      :                          @107
  1150: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1153: 51 07 71                 jump @117 if a0 == 0
      :                          @108
  1156: 82 a9 10                 a2 = u64 [a3 + 0x10]
  1159: 51 09 9e 00              jump @124 if a2 == 0
      :                          @109
  1163: 82 a8                    a1 = u64 [a3]
  1165: 33 02 00 10              t0 = 0x1000
  1169: 33 04 40 00 03           t2 = 0x30040
  1174: c8 24 07                 a0 = t2 + t0
  1177: 01                       fallthrough
      :                          @110
  1178: 82 7a                    a3 = u64 [a0]
  1180: c8 6a 05                 s0 = a3 + s1
  1183: ac a5 c2 00              jump @130 if s0 <u a3
      :                          @111
  1187: 95 5b 01                 a4 = s0 + 0x1
  1190: 88 bc 01                 a5 = a4 <u 0x1
  1193: d8 b2 0b                 a4 = t0 <u a4
  1196: d4 cb 0b                 a4 = a4 | a5
  1199: 52 0b b2 00              jump @130 if a4 != 0
      :                          @112
  1203: 82 7b                    a4 = u64 [a0]
  1205: ab ab e5                 jump @110 if a4 != a3
      :                          @113
  1208: 7b 75                    u64 [a0] = s0
  1210: 33 0c                    a5 = 0
  1212: 7b 13 18                 u64 [sp + 0x18] = t1
  1215: c9 54 07                 a0 = t2 - s0
  1218: 95 77 00 10              a0 = a0 + 0x1000
  1222: 7b 17 10                 u64 [sp + 0x10] = a0
  1225: 7b 18 08                 u64 [sp + 0x8] = a1
  1228: 64 95                    s0 = a2
  1230: 7b 14                    u64 [sp] = t2
  1232: 50 10 14 f4 02           ra = 20, jump @179
      :                          @114 [@dyn 10]
  1237: 54 25 00 10 94 00        jump @131 if s0 <=u 4096
      :                          @115
  1243: 82 13 18                 t1 = u64 [sp + 0x18]
  1246: 82 18 10                 a1 = u64 [sp + 0x10]
  1249: 33 07                    a0 = 0
  1251: 7b 38 08                 u64 [t1 + 0x8] = a1
  1254: 28 b1 00                 jump @137
      :                          @116
  1257: 49 13 08                 u64 [t1 + 8] = 0
  1260: 33 07 01                 a0 = 0x1
  1263: 28 a8 00                 jump @137
      :                          @117
  1266: 33 07 00 10              a0 = 0x1000
  1270: 33 02 40 00 03           t0 = 0x30040
  1275: c8 72 09                 a2 = t0 + a0
  1278: 01                       fallthrough
      :                          @118
  1279: 82 9b                    a4 = u64 [a2]
  1281: c8 6b 0a                 a3 = a4 + s1
  1284: ac ba 5d                 jump @130 if a3 <u a4
      :                          @119
  1287: 95 ac 01                 a5 = a3 + 0x1
  1290: 88 c8 01                 a1 = a5 <u 0x1
  1293: d8 c7 0c                 a5 = a0 <u a5
  1296: d4 c8 08                 a1 = a1 | a5
  1299: 52 08 4e                 jump @130 if a1 != 0
      :                          @120
  1302: 82 98                    a1 = u64 [a2]
  1304: ab b8 e7                 jump @118 if a1 != a4
      :                          @121
  1307: 7b 9a                    u64 [a2] = a3
  1309: 33 0c                    a5 = 0
  1311: 01                       fallthrough
      :                          @122
  1312: ab b8 df                 jump @118 if a1 != a4
      :                          @123
  1315: 28 30                    jump @129
      :                          @124
  1317: 33 07 00 10              a0 = 0x1000
  1321: 33 02 40 00 03           t0 = 0x30040
  1326: c8 72 09                 a2 = t0 + a0
  1329: 01                       fallthrough
      :                          @125
  1330: 82 9b                    a4 = u64 [a2]
  1332: c8 6b 0a                 a3 = a4 + s1
  1335: ac ba 2a                 jump @130 if a3 <u a4
      :                          @126
  1338: 95 ac 01                 a5 = a3 + 0x1
  1341: 88 c8 01                 a1 = a5 <u 0x1
  1344: d8 c7 0c                 a5 = a0 <u a5
  1347: d4 c8 08                 a1 = a1 | a5
  1350: 52 08 1b                 jump @130 if a1 != 0
      :                          @127
  1353: 82 98                    a1 = u64 [a2]
  1355: ab b8 e7                 jump @125 if a1 != a4
      :                          @128
  1358: 7b 9a                    u64 [a2] = a3
  1360: 33 0c                    a5 = 0
  1362: 01                       fallthrough
      :                          @129
  1363: c9 a2 07                 a0 = t0 - a3
  1366: 95 78 00 10              a1 = a0 + 0x1000
  1370: 33 07                    a0 = 0
  1372: 7b 38 08                 u64 [t1 + 0x8] = a1
  1375: 28 38                    jump @137
      :                          @130
  1377: 33 07 01                 a0 = 0x1
  1380: 7b 37 08                 u64 [t1 + 0x8] = a0
  1383: 28 30                    jump @137
      :                          @131
  1385: 64 5c                    a5 = s0
  1387: 82 18                    a1 = u64 [sp]
  1389: 95 87 00 10              a0 = a1 + 0x1000
  1393: 82 13 18                 t1 = u64 [sp + 0x18]
  1396: 82 15 08                 s0 = u64 [sp + 0x8]
  1399: 01                       fallthrough
      :                          @132
  1400: 82 78                    a1 = u64 [a0]
  1402: c9 87 09                 a2 = a0 - a1
  1405: ab 59 11                 jump @136 if a2 != s0
      :                          @133
  1408: c9 c8 09                 a2 = a1 - a5
  1411: 01                       fallthrough
      :                          @134
  1412: 82 7a                    a3 = u64 [a0]
  1414: ab 8a f2                 jump @132 if a3 != a1
      :                          @135
  1417: 7b 79                    u64 [a0] = a2
  1419: 33 0b                    a4 = 0
  1421: 01                       fallthrough
      :                          @136
  1422: 82 18 10                 a1 = u64 [sp + 0x10]
  1425: 33 07                    a0 = 0
  1427: 7b 38 08                 u64 [t1 + 0x8] = a1
  1430: 01                       fallthrough
      :                          @137
  1431: 7b 36 10                 u64 [t1 + 0x10] = s1
  1434: 7b 37                    u64 [t1] = a0
  1436: 82 10 30                 ra = u64 [sp + 0x30]
  1439: 82 15 28                 s0 = u64 [sp + 0x28]
  1442: 82 16 20                 s1 = u64 [sp + 0x20]
  1445: 95 11 38                 sp = sp + 0x38
  1448: 32 00                    ret
      :                          @138
  1450: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1453: 7b 10 40                 u64 [sp + 0x40] = ra
  1456: 7b 15 38                 u64 [sp + 0x38] = s0
  1459: 7b 16 30                 u64 [sp + 0x30] = s1
  1462: 95 88 01                 a1 = a1 + 0x1
  1465: 51 08 53                 jump @146 if a1 == 0
      :                          @139
  1468: 64 75                    s0 = a0
  1470: 82 77                    a0 = u64 [a0]
  1472: 97 79 01                 a2 = a0 << 0x1
  1475: 33 0a 08                 a3 = 0x8
  1478: e4 a8 08                 a1 = maxu(a1, a3)
  1481: e4 89 06                 s1 = maxu(a2, a1)
  1484: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1487: 98 88 3f                 a1 = a1 >> 0x3f
  1490: 51 07 12                 jump @141 if a0 == 0
      :                          @140
  1493: 82 59 08                 a2 = u64 [s0 + 0x8]
  1496: 7b 19 18                 u64 [sp + 0x18] = a2
  1499: 49 11 20 01              u64 [sp + 32] = 0x1
  1503: 7b 17 28                 u64 [sp + 0x28] = a0
  1506: 28 06                    jump @142
      :                          @141
  1508: 49 11 20                 u64 [sp + 32] = 0
  1511: 01                       fallthrough
      :                          @142
  1512: 64 17                    a0 = sp
  1514: 95 1a 18                 a3 = sp + 0x18
  1517: 64 69                    a2 = s1
  1519: 50 10 16 7c fe           ra = 22, jump @106
      :                          @143 [@dyn 11]
  1524: 82 18                    a1 = u64 [sp]
  1526: 82 17 08                 a0 = u64 [sp + 0x8]
  1529: 51 08 14                 jump @147 if a1 == 0
      :                          @144
  1532: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1542: aa 87 0d                 jump @148 if a0 == a1
      :                          @145
  1545: 52 07 18                 jump @149 if a0 != 0
      :                          @146
  1548: 00                       trap
      :                          @147
  1549: 7b 57 08                 u64 [s0 + 0x8] = a0
  1552: 7b 56                    u64 [s0] = s1
  1554: 01                       fallthrough
      :                          @148
  1555: 82 10 40                 ra = u64 [sp + 0x40]
  1558: 82 15 38                 s0 = u64 [sp + 0x38]
  1561: 82 16 30                 s1 = u64 [sp + 0x30]
  1564: 95 11 48                 sp = sp + 0x48
  1567: 32 00                    ret
      :                          @149
  1569: 00                       trap
      :                          @150 [@dyn 12]
  1570: 82 72                    t0 = u64 [a0]
  1572: 33 09 00 f0              a2 = 0xfffffffffffff000
  1576: 95 2a ff ef              a3 = t0 + 0xffffffffffffefff
  1580: ac 9a 27                 jump @156 if a3 <u a2
      :                          @151
  1583: 82 77 08                 a0 = u64 [a0 + 0x8]
  1586: 33 09 40 00 03           a2 = 0x30040
  1591: 95 99 00 10              a2 = a2 + 0x1000
  1595: 01                       fallthrough
      :                          @152
  1596: 82 9a                    a3 = u64 [a2]
  1598: c9 a9 0b                 a4 = a2 - a3
  1601: ab 7b 12                 jump @156 if a4 != a0
      :                          @153
  1604: c9 2a 0b                 a4 = a3 - t0
  1607: 01                       fallthrough
      :                          @154
  1608: 82 9c                    a5 = u64 [a2]
  1610: ab ac f2                 jump @152 if a5 != a3
      :                          @155
  1613: 7b 9b                    u64 [a2] = a4
  1615: 33 08                    a1 = 0
  1617: 32 00                    ret
      :                          @156
  1619: 32 00                    ret
      :                          @157 [@dyn 13]
  1621: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  1624: 7b 10 18                 u64 [sp + 0x18] = ra
  1627: 7b 15 10                 u64 [sp + 0x10] = s0
  1630: 7b 16 08                 u64 [sp + 0x8] = s1
  1633: 64 75                    s0 = a0
  1635: 82 7a 10                 a3 = u64 [a0 + 0x10]
  1638: 82 77                    a0 = u64 [a0]
  1640: c9 a7 07                 a0 = a0 - a3
  1643: 64 96                    s1 = a2
  1645: ac 97 2a                 jump @160 if a0 <u a2
      :                          @158
  1648: 7b 1a                    u64 [sp] = a3
  1650: 82 57 08                 a0 = u64 [s0 + 0x8]
  1653: c8 a7 07                 a0 = a0 + a3
  1656: 64 69                    a2 = s1
  1658: 50 10 1c 4a 01           ra = 28, jump @179
      :                          @159 [@dyn 14]
  1663: 82 17                    a0 = u64 [sp]
  1665: c8 76 06                 s1 = s1 + a0
  1668: 7b 56 10                 u64 [s0 + 0x10] = s1
  1671: 33 07                    a0 = 0
  1673: 82 10 18                 ra = u64 [sp + 0x18]
  1676: 82 15 10                 s0 = u64 [sp + 0x10]
  1679: 82 16 08                 s1 = u64 [sp + 0x8]
  1682: 95 11 20                 sp = sp + 0x20
  1685: 32 00                    ret
      :                          @160
  1687: 64 57                    a0 = s0
  1689: 7b 18                    u64 [sp] = a1
  1691: 64 a8                    a1 = a3
  1693: 64 69                    a2 = s1
  1695: 50 10 1e 55 fd           ra = 30, jump @94
      :                          @161 [@dyn 15]
  1700: 82 18                    a1 = u64 [sp]
  1702: 82 5a 10                 a3 = u64 [s0 + 0x10]
  1705: 28 c7                    jump @158
      :                          @162 [@dyn 16]
  1707: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  1710: 7b 10 20                 u64 [sp + 0x20] = ra
  1713: 7b 15 18                 u64 [sp + 0x18] = s0
  1716: 7b 16 10                 u64 [sp + 0x10] = s1
  1719: 64 86                    s1 = a1
  1721: 83 88                    i32 a1 = a1 + 0
  1723: 33 09 80 00              a2 = 0x80
  1727: 64 7a                    a3 = a0
  1729: ae 98 2b                 jump @167 if a1 >=u a2
      :                          @163
  1732: 82 a8 10                 a1 = u64 [a3 + 0x10]
  1735: 82 a7                    a0 = u64 [a3]
  1737: ab 78 12                 jump @166 if a1 != a0
      :                          @164
  1740: 64 a7                    a0 = a3
  1742: 64 a5                    s0 = a3
  1744: 50 10 22 da fe           ra = 34, jump @138
      :                          @165 [@dyn 17]
  1749: 64 5a                    a3 = s0
  1751: 82 58 10                 a1 = u64 [s0 + 0x10]
  1754: 01                       fallthrough
      :                          @166
  1755: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1758: c8 87 07                 a0 = a0 + a1
  1761: 78 76                    u8 [a0] = s1
  1763: 95 88 01                 a1 = a1 + 0x1
  1766: 7b a8 10                 u64 [a3 + 0x10] = a1
  1769: 28 ab 00                 jump @175
      :                          @167
  1772: 8b 67 0b                 i32 a0 = s1 >> 0xb
  1775: 48 11 0c                 u32 [sp + 12] = 0
  1778: 52 07 1c                 jump @169 if a0 != 0
      :                          @168
  1781: 98 67 06                 a0 = s1 >> 0x6
  1784: 86 77 c0 00              a0 = a0 | 0xc0
  1788: 78 17 0c                 u8 [sp + 0xc] = a0
  1791: 84 67 3f                 a0 = s1 & 0x3f
  1794: 86 77 80 00              a0 = a0 | 0x80
  1798: 78 17 0d                 u8 [sp + 0xd] = a0
  1801: 33 06 02                 s1 = 0x2
  1804: 28 63                    jump @172
      :                          @169
  1806: 8b 67 10                 i32 a0 = s1 >> 0x10
  1809: 52 07 29                 jump @171 if a0 != 0
      :                          @170
  1812: 98 67 0c                 a0 = s1 >> 0xc
  1815: 86 77 e0 00              a0 = a0 | 0xe0
  1819: 78 17 0c                 u8 [sp + 0xc] = a0
  1822: 97 67 34                 a0 = s1 << 0x34
  1825: 98 77 3a                 a0 = a0 >> 0x3a
  1828: 95 77 80 00              a0 = a0 + 0x80
  1832: 78 17 0d                 u8 [sp + 0xd] = a0
  1835: 84 67 3f                 a0 = s1 & 0x3f
  1838: 86 77 80 00              a0 = a0 | 0x80
  1842: 78 17 0e                 u8 [sp + 0xe] = a0
  1845: 33 06 03                 s1 = 0x3
  1848: 28 37                    jump @172
      :                          @171
  1850: 97 67 2b                 a0 = s1 << 0x2b
  1853: 98 77 3d                 a0 = a0 >> 0x3d
  1856: 95 77 f0 00              a0 = a0 + 0xf0
  1860: 78 17 0c                 u8 [sp + 0xc] = a0
  1863: 97 67 2e                 a0 = s1 << 0x2e
  1866: 98 77 3a                 a0 = a0 >> 0x3a
  1869: 95 77 80 00              a0 = a0 + 0x80
  1873: 78 17 0d                 u8 [sp + 0xd] = a0
  1876: 97 67 34                 a0 = s1 << 0x34
  1879: 98 77 3a                 a0 = a0 >> 0x3a
  1882: 95 77 80 00              a0 = a0 + 0x80
  1886: 78 17 0e                 u8 [sp + 0xe] = a0
  1889: 84 67 3f                 a0 = s1 & 0x3f
  1892: 86 77 80 00              a0 = a0 | 0x80
  1896: 78 17 0f                 u8 [sp + 0xf] = a0
  1899: 33 06 04                 s1 = 0x4
  1902: 01                       fallthrough
      :                          @172
  1903: 82 a5 10                 s0 = u64 [a3 + 0x10]
  1906: 82 a7                    a0 = u64 [a3]
  1908: c9 57 07                 a0 = a0 - s0
  1911: ac 67 2d                 jump @176 if a0 <u s1
      :                          @173
  1914: 7b 1a                    u64 [sp] = a3
  1916: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1919: c8 57 07                 a0 = a0 + s0
  1922: 95 18 0c                 a1 = sp + 0xc
  1925: 64 69                    a2 = s1
  1927: 50 10 24 3d              ra = 36, jump @179
      :                          @174 [@dyn 18]
  1931: c8 56 06                 s1 = s1 + s0
  1934: 82 17                    a0 = u64 [sp]
  1936: 7b 76 10                 u64 [a0 + 0x10] = s1
  1939: 01                       fallthrough
      :                          @175
  1940: 33 07                    a0 = 0
  1942: 82 10 20                 ra = u64 [sp + 0x20]
  1945: 82 15 18                 s0 = u64 [sp + 0x18]
  1948: 82 16 10                 s1 = u64 [sp + 0x10]
  1951: 95 11 28                 sp = sp + 0x28
  1954: 32 00                    ret
      :                          @176
  1956: 64 a7                    a0 = a3
  1958: 64 58                    a1 = s0
  1960: 64 69                    a2 = s1
  1962: 64 a5                    s0 = a3
  1964: 50 10 26 48 fc           ra = 38, jump @94
      :                          @177 [@dyn 19]
  1969: 64 5a                    a3 = s0
  1971: 82 55 10                 s0 = u64 [s0 + 0x10]
  1974: 28 c4                    jump @173
      :                          @178 [@dyn 20]
  1976: 64 8a                    a3 = a1
  1978: 33 08 18 01 01           a1 = 0x10118
  1983: 64 a9                    a2 = a3
  1985: 28 49 04                 jump @261
      :                          @179
  1988: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  1991: 7b 10 18                 u64 [sp + 0x18] = ra
  1994: 7b 15 10                 u64 [sp + 0x10] = s0
  1997: 7b 16 08                 u64 [sp + 0x8] = s1
  2000: 53 19 10 64              jump @188 if a2 <u 16
      :                          @180
  2004: 8d 7a                    i32 a3 = -a0
  2006: 84 a2 07                 t0 = a3 & 0x7
  2009: c8 27 0b                 a4 = a0 + t0
  2012: 51 02 15                 jump @183 if t0 == 0
      :                          @181
  2015: 64 8c                    a5 = a1
  2017: 64 75                    s0 = a0
  2019: 01                       fallthrough
      :                          @182
  2020: 7c ca                    a3 = u8 [a5]
  2022: 78 5a                    u8 [s0] = a3
  2024: 95 55 01                 s0 = s0 + 0x1
  2027: 95 cc 01                 a5 = a5 + 0x1
  2030: ac b5 f6                 jump @182 if s0 <u a4
      :                          @183
  2033: c8 28 03                 t1 = a1 + t0
  2036: c9 29 02                 t0 = a2 - t0
  2039: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  2042: 84 38 07                 a1 = t1 & 0x7
  2045: c8 4b 0a                 a3 = a4 + t2
  2048: 51 08 3b                 jump @190 if a1 == 0
      :                          @184
  2051: 58 04 4b                 jump @193 if t2 <=s 0
      :                          @185
  2054: 97 38 03                 a1 = t1 << 0x3
  2057: 84 80 38                 ra = a1 & 0x38
  2060: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  2063: 82 c5                    s0 = u64 [a5]
  2065: 8d 88                    i32 a1 = -a1
  2067: 84 88 38                 a1 = a1 & 0x38
  2070: 95 cc 08                 a5 = a5 + 0x8
  2073: 01                       fallthrough
      :                          @186
  2074: 82 c6                    s1 = u64 [a5]
  2076: d0 05 05                 s0 = s0 >> ra
  2079: cf 86 09                 a2 = s1 << a1
  2082: d4 59 09                 a2 = a2 | s0
  2085: 7b b9                    u64 [a4] = a2
  2087: 95 bb 08                 a4 = a4 + 0x8
  2090: 95 cc 08                 a5 = a5 + 0x8
  2093: 64 65                    s0 = s1
  2095: ac ab eb                 jump @186 if a4 <u a3
      :                          @187
  2098: 28 1c                    jump @193
      :                          @188
  2100: 64 7a                    a3 = a0
  2102: 52 09 21                 jump @194 if a2 != 0
      :                          @189
  2105: 28 2f                    jump @196
      :                          @190
  2107: 58 04 13                 jump @193 if t2 <=s 0
      :                          @191
  2110: 64 38                    a1 = t1
  2112: 01                       fallthrough
      :                          @192
  2113: 82 89                    a2 = u64 [a1]
  2115: 7b b9                    u64 [a4] = a2
  2117: 95 bb 08                 a4 = a4 + 0x8
  2120: 95 88 08                 a1 = a1 + 0x8
  2123: ac ab f6                 jump @192 if a4 <u a3
      :                          @193
  2126: c8 43 08                 a1 = t1 + t2
  2129: 84 29 07                 a2 = t0 & 0x7
  2132: 51 09 14                 jump @196 if a2 == 0
      :                          @194
  2135: c8 a9 09                 a2 = a2 + a3
  2138: 01                       fallthrough
      :                          @195
  2139: 7c 8b                    a4 = u8 [a1]
  2141: 78 ab                    u8 [a3] = a4
  2143: 95 aa 01                 a3 = a3 + 0x1
  2146: 95 88 01                 a1 = a1 + 0x1
  2149: ac 9a f6                 jump @195 if a3 <u a2
      :                          @196
  2152: 82 10 18                 ra = u64 [sp + 0x18]
  2155: 82 15 10                 s0 = u64 [sp + 0x10]
  2158: 82 16 08                 s1 = u64 [sp + 0x8]
  2161: 95 11 20                 sp = sp + 0x20
  2164: 32 00                    ret
      :                          @197 [@dyn 21]
  2166: 82 77                    a0 = u64 [a0]
  2168: 01                       fallthrough
      :                          @198
  2169: 28                       jump @198
      :                          @199
  2170: 95 11 a8                 sp = sp + 0xffffffffffffffa8
  2173: 7b 10 50                 u64 [sp + 0x50] = ra
  2176: 7b 15 48                 u64 [sp + 0x48] = s0
  2179: 7b 16 40                 u64 [sp + 0x40] = s1
  2182: 82 7a                    a3 = u64 [a0]
  2184: 7b 18                    u64 [sp] = a1
  2186: 98 ab 04                 a4 = a3 >> 0x4
  2189: 33 08 27                 a1 = 0x27
  2192: 33 09 2a 00 01           a2 = 0x1002a
  2197: 53 2b 71 02 7e           jump @202 if a4 <u 625
      :                          @200
  2202: 33 08 27                 a1 = 0x27
  2205: 95 1b 3e                 a4 = sp + 0x3e
  2208: 3a 07 00 00 03           a0 = u64 [0x30000]
  2213: 7b 17 10                 u64 [sp + 0x10] = a0
  2216: 49 11 08 f0 d8 00        u64 [sp + 8] = 0xd8f0
  2222: 33 00 7b 14              ra = 0x147b
  2226: 33 03 ff e0 f5 05        t1 = 0x5f5e0ff
  2232: 33 05 9c                 s0 = 0xffffffffffffff9c
  2235: 01                       fallthrough
      :                          @201
  2236: 64 a4                    t2 = a3
  2238: 82 17 10                 a0 = u64 [sp + 0x10]
  2241: d6 7a 0a                 a3 = a3 mulhu a0
  2244: 98 aa 0b                 a3 = a3 >> 0xb
  2247: 82 17 08                 a0 = u64 [sp + 0x8]
  2250: c0 7a 0c                 i32 a5 = a3 * a0
  2253: c8 4c 06                 s1 = a5 + t2
  2256: 97 6c 30                 a5 = s1 << 0x30
  2259: 98 cc 32                 a5 = a5 >> 0x32
  2262: ca 0c 0c                 a5 = a5 * ra
  2265: 98 c7 11                 a0 = a5 >> 0x11
  2268: 98 cc 10                 a5 = a5 >> 0x10
  2271: 84 cc fe 07              a5 = a5 & 0x7fe
  2275: ca 57 07                 a0 = a0 * s0
  2278: c8 67 07                 a0 = a0 + s1
  2281: 97 77 31                 a0 = a0 << 0x31
  2284: 98 77 30                 a0 = a0 >> 0x30
  2287: c8 9c 0c                 a5 = a5 + a2
  2290: 7c c6                    s1 = u8 [a5]
  2292: 7c cc 01                 a5 = u8 [a5 + 0x1]
  2295: c8 97 07                 a0 = a0 + a2
  2298: 7c 72 01                 t0 = u8 [a0 + 0x1]
  2301: 7c 77                    a0 = u8 [a0]
  2303: 78 bc ff                 u8 [a4 + 0xffffffffffffffff] = a5
  2306: 78 b6 fe                 u8 [a4 + 0xfffffffffffffffe] = s1
  2309: 78 b2 01                 u8 [a4 + 0x1] = t0
  2312: 78 b7                    u8 [a4] = a0
  2314: 95 88 fc                 a1 = a1 + 0xfffffffffffffffc
  2317: 95 bb fc                 a4 = a4 + 0xfffffffffffffffc
  2320: ac 43 ac                 jump @201 if t1 <u t2
      :                          @202
  2323: 54 1a 63 36              jump @204 if a3 <=u 99
      :                          @203
  2327: 97 a7 30                 a0 = a3 << 0x30
  2330: 98 77 32                 a0 = a0 >> 0x32
  2333: 96 77 7b 14              a0 = a0 * 0x147b
  2337: 98 77 11                 a0 = a0 >> 0x11
  2340: 96 7b 9c                 a4 = a0 * 0xffffffffffffff9c
  2343: c8 ba 0a                 a3 = a3 + a4
  2346: 97 aa 31                 a3 = a3 << 0x31
  2349: 98 aa 30                 a3 = a3 >> 0x30
  2352: 95 88 fe                 a1 = a1 + 0xfffffffffffffffe
  2355: c8 9a 0a                 a3 = a3 + a2
  2358: 7c ab 01                 a4 = u8 [a3 + 0x1]
  2361: 7c aa                    a3 = u8 [a3]
  2363: 95 1c 19                 a5 = sp + 0x19
  2366: c8 8c 0c                 a5 = a5 + a1
  2369: 78 cb 01                 u8 [a5 + 0x1] = a4
  2372: 78 ca                    u8 [a5] = a3
  2374: 64 7a                    a3 = a0
  2376: 01                       fallthrough
      :                          @204
  2377: 55 1a 0a 14              jump @206 if a3 >=u 10
      :                          @205
  2381: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
  2384: 95 17 19                 a0 = sp + 0x19
  2387: c8 87 07                 a0 = a0 + a1
  2390: 83 a9 30                 i32 a2 = a3 + 0x30
  2393: 78 79                    u8 [a0] = a2
  2395: 28 1c                    jump @207
      :                          @206
  2397: 97 aa 01                 a3 = a3 << 0x1
  2400: 95 88 fe                 a1 = a1 + 0xfffffffffffffffe
  2403: c8 a9 09                 a2 = a2 + a3
  2406: 7c 97 01                 a0 = u8 [a2 + 0x1]
  2409: 7c 99                    a2 = u8 [a2]
  2411: 95 1a 19                 a3 = sp + 0x19
  2414: c8 8a 0a                 a3 = a3 + a1
  2417: 78 a7 01                 u8 [a3 + 0x1] = a0
  2420: 78 a9                    u8 [a3] = a2
  2422: 01                       fallthrough
      :                          @207
  2423: 95 1a 19                 a3 = sp + 0x19
  2426: c8 8a 0a                 a3 = a3 + a1
  2429: 9a 8b 27                 a4 = 0x27 - a1
  2432: 33 08 28 00 01           a1 = 0x10028
  2437: 82 17                    a0 = u64 [sp]
  2439: 33 09                    a2 = 0
  2441: 50 10 2c 12              ra = 44, jump @209
      :                          @208 [@dyn 22]
  2445: 82 10 50                 ra = u64 [sp + 0x50]
  2448: 82 15 48                 s0 = u64 [sp + 0x48]
  2451: 82 16 40                 s1 = u64 [sp + 0x40]
  2454: 95 11 58                 sp = sp + 0x58
  2457: 32 00                    ret
      :                          @209
  2459: 95 11 98                 sp = sp + 0xffffffffffffff98
  2462: 7b 10 60                 u64 [sp + 0x60] = ra
  2465: 7b 15 58                 u64 [sp + 0x58] = s0
  2468: 7b 16 50                 u64 [sp + 0x50] = s1
  2471: 80 73 34                 t1 = u32 [a0 + 0x34]
  2474: 7b 1a 20                 u64 [sp + 0x20] = a3
  2477: 64 9c                    a5 = a2
  2479: 84 36 01                 s1 = t1 & 0x1
  2482: 33 02 2b                 t0 = 0x2b
  2485: 33 09 00 00 11           a2 = 0x110000
  2490: 84 3a 04                 a3 = t1 & 0x4
  2493: 7b 1b 28                 u64 [sp + 0x28] = a4
  2496: c8 b6 04                 t2 = s1 + a4
  2499: 7b 1c 30                 u64 [sp + 0x30] = a5
  2502: 52 0a 10                 jump @212 if a3 != 0
      :                          @210
  2505: 49 11 38                 u64 [sp + 56] = 0
  2508: 82 78                    a1 = u64 [a0]
  2510: 94 69 2b                 a2 = 0x2b if s1 != 0
  2513: 52 08 35                 jump @216 if a1 != 0
      :                          @211
  2516: 28 56                    jump @221
      :                          @212
  2518: 7b 18 38                 u64 [sp + 0x38] = a1
  2521: 33 09                    a2 = 0
  2523: 51 0c 1b                 jump @215 if a5 == 0
      :                          @213
  2526: 82 1b 38                 a4 = u64 [sp + 0x38]
  2529: 01                       fallthrough
      :                          @214
  2530: 7d b5                    s0 = i8 [a4]
  2532: 89 55 c0                 s0 = s0 <s 0xffffffffffffffc0
  2535: 85 5a 01                 a3 = s0 ^ 0x1
  2538: c8 a9 09                 a2 = a2 + a3
  2541: 95 cc ff                 a5 = a5 + 0xffffffffffffffff
  2544: 95 bb 01                 a4 = a4 + 0x1
  2547: 52 0c ef                 jump @214 if a5 != 0
      :                          @215
  2550: c8 94 04                 t2 = t2 + a2
  2553: 33 09 00 00 11           a2 = 0x110000
  2558: 82 78                    a1 = u64 [a0]
  2560: db 62 09                 a2 = t0 if s1 != 0
  2563: 51 08 27                 jump @221 if a1 == 0
      :                          @216
  2566: 82 7a 08                 a3 = u64 [a0 + 0x8]
  2569: ae a4 21                 jump @221 if t2 >=u a3
      :                          @217
  2572: 84 38 08                 a1 = t1 & 0x8
  2575: 52 08 50                 jump @224 if a1 != 0
      :                          @218
  2578: 7c 76 38                 s1 = u8 [a0 + 0x38]
  2581: c9 4a 0a                 a3 = a3 - t2
  2584: 7b 19 18                 u64 [sp + 0x18] = a2
  2587: 5a 16 01 9d 00           jump @231 if s1 >s 1
      :                          @219
  2592: 52 06 aa 00              jump @233 if s1 != 0
      :                          @220
  2596: 7b 1a 10                 u64 [sp + 0x10] = a3
  2599: 28 a9 00                 jump @234
      :                          @221
  2602: 82 75 20                 s0 = u64 [a0 + 0x20]
  2605: 82 76 28                 s1 = u64 [a0 + 0x28]
  2608: 64 57                    a0 = s0
  2610: 64 68                    a1 = s1
  2612: 82 1a 38                 a3 = u64 [sp + 0x38]
  2615: 82 1b 30                 a4 = u64 [sp + 0x30]
  2618: 50 10 2e 6c 01           ra = 46, jump @254
      :                          @222 [@dyn 23]
  2623: 33 08 01                 a1 = 0x1
  2626: 52 07 bb 00              jump @239 if a0 != 0
      :                          @223
  2630: 82 6c 18                 a5 = u64 [s1 + 0x18]
  2633: 64 57                    a0 = s0
  2635: 82 18 20                 a1 = u64 [sp + 0x20]
  2638: 82 19 28                 a2 = u64 [sp + 0x28]
  2641: 82 10 60                 ra = u64 [sp + 0x60]
  2644: 82 15 58                 s0 = u64 [sp + 0x58]
  2647: 82 16 50                 s1 = u64 [sp + 0x50]
  2650: 95 11 68                 sp = sp + 0x68
  2653: 32 0c                    jump [a5]
      :                          @224
  2655: 7b 1a 40                 u64 [sp + 0x40] = a3
  2658: 64 45                    s0 = t2
  2660: 81 78 30                 a1 = i32 [a0 + 0x30]
  2663: 7b 18 10                 u64 [sp + 0x10] = a1
  2666: 7c 7a 38                 a3 = u8 [a0 + 0x38]
  2669: 7b 1a 08                 u64 [sp + 0x8] = a3
  2672: 82 7a 20                 a3 = u64 [a0 + 0x20]
  2675: 82 78 28                 a1 = u64 [a0 + 0x28]
  2678: 48 17 30 30              u32 [a0 + 48] = 0x30
  2682: 7b 17                    u64 [sp] = a0
  2684: 46 17 38 01              u8 [a0 + 56] = 0x1
  2688: 7b 1a 48                 u64 [sp + 0x48] = a3
  2691: 64 a7                    a0 = a3
  2693: 64 86                    s1 = a1
  2695: 82 1a 38                 a3 = u64 [sp + 0x38]
  2698: 82 1b 30                 a4 = u64 [sp + 0x30]
  2701: 50 10 30 19 01           ra = 48, jump @254
      :                          @225 [@dyn 24]
  2706: 52 07 67                 jump @238 if a0 != 0
      :                          @226
  2709: 82 17 40                 a0 = u64 [sp + 0x40]
  2712: c9 57 05                 s0 = a0 - s0
  2715: 95 55 01                 s0 = s0 + 0x1
  2718: 01                       fallthrough
      :                          @227
  2719: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  2722: 51 05 c6 00              jump @249 if s0 == 0
      :                          @228
  2726: 82 69 20                 a2 = u64 [s1 + 0x20]
  2729: 33 08 30                 a1 = 0x30
  2732: 82 17 48                 a0 = u64 [sp + 0x48]
  2735: b4 90 01 32              ra = 50, jump [a2]
      :                          @229 [@dyn 25]
  2739: 51 07 ec                 jump @227 if a0 == 0
      :                          @230
  2742: 28 43                    jump @238
      :                          @231
  2744: 52 16 02 12              jump @233 if s1 != 2
      :                          @232
  2748: 98 a6 01                 s1 = a3 >> 0x1
  2751: 95 a8 01                 a1 = a3 + 0x1
  2754: 98 88 01                 a1 = a1 >> 0x1
  2757: 7b 18 10                 u64 [sp + 0x10] = a1
  2760: 28 08                    jump @234
      :                          @233
  2762: 64 a6                    s1 = a3
  2764: 49 11 10                 u64 [sp + 16] = 0
  2767: 01                       fallthrough
      :                          @234
  2768: 82 78 20                 a1 = u64 [a0 + 0x20]
  2771: 7b 18 48                 u64 [sp + 0x48] = a1
  2774: 82 75 28                 s0 = u64 [a0 + 0x28]
  2777: 81 77 30                 a0 = i32 [a0 + 0x30]
  2780: 7b 17 40                 u64 [sp + 0x40] = a0
  2783: 95 66 01                 s1 = s1 + 0x1
  2786: 01                       fallthrough
      :                          @235
  2787: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
  2790: 51 06 27                 jump @240 if s1 == 0
      :                          @236
  2793: 82 59 20                 a2 = u64 [s0 + 0x20]
  2796: 82 17 48                 a0 = u64 [sp + 0x48]
  2799: 82 18 40                 a1 = u64 [sp + 0x40]
  2802: b4 90 01 34              ra = 52, jump [a2]
      :                          @237 [@dyn 26]
  2806: 51 07 ed                 jump @235 if a0 == 0
      :                          @238
  2809: 33 08 01                 a1 = 0x1
  2812: 01                       fallthrough
      :                          @239
  2813: 64 87                    a0 = a1
  2815: 82 10 60                 ra = u64 [sp + 0x60]
  2818: 82 15 58                 s0 = u64 [sp + 0x58]
  2821: 82 16 50                 s1 = u64 [sp + 0x50]
  2824: 95 11 68                 sp = sp + 0x68
  2827: 32 00                    ret
      :                          @240
  2829: 82 16 48                 s1 = u64 [sp + 0x48]
  2832: 64 67                    a0 = s1
  2834: 64 58                    a1 = s0
  2836: 82 19 18                 a2 = u64 [sp + 0x18]
  2839: 82 1a 38                 a3 = u64 [sp + 0x38]
  2842: 82 1b 30                 a4 = u64 [sp + 0x30]
  2845: 50 10 36 89 00           ra = 54, jump @254
      :                          @241 [@dyn 27]
  2850: 33 08 01                 a1 = 0x1
  2853: 52 07 d8                 jump @239 if a0 != 0
      :                          @242
  2856: 82 5a 18                 a3 = u64 [s0 + 0x18]
  2859: 64 67                    a0 = s1
  2861: 82 18 20                 a1 = u64 [sp + 0x20]
  2864: 82 19 28                 a2 = u64 [sp + 0x28]
  2867: b4 a0 01 38              ra = 56, jump [a3]
      :                          @243 [@dyn 28]
  2871: 33 08 01                 a1 = 0x1
  2874: 52 07 c3                 jump @239 if a0 != 0
      :                          @244
  2877: 82 17 10                 a0 = u64 [sp + 0x10]
  2880: 9a 77                    a0 = -a0
  2882: 7b 17 38                 u64 [sp + 0x38] = a0
  2885: 33 06 ff                 s1 = 0xffffffffffffffff
  2888: 01                       fallthrough
      :                          @245
  2889: 82 17 38                 a0 = u64 [sp + 0x38]
  2892: c8 67 07                 a0 = a0 + s1
  2895: 51 17 ff 42              jump @252 if a0 == 4294967295
      :                          @246
  2899: 82 59 20                 a2 = u64 [s0 + 0x20]
  2902: 82 17 48                 a0 = u64 [sp + 0x48]
  2905: 82 18 40                 a1 = u64 [sp + 0x40]
  2908: b4 90 01 3a              ra = 58, jump [a2]
      :                          @247 [@dyn 29]
  2912: 95 66 01                 s1 = s1 + 0x1
  2915: 51 07 e6                 jump @245 if a0 == 0
      :                          @248
  2918: 28 37                    jump @253
      :                          @249
  2920: 82 6a 18                 a3 = u64 [s1 + 0x18]
  2923: 82 17 48                 a0 = u64 [sp + 0x48]
  2926: 82 18 20                 a1 = u64 [sp + 0x20]
  2929: 82 19 28                 a2 = u64 [sp + 0x28]
  2932: b4 a0 01 3c              ra = 60, jump [a3]
      :                          @250 [@dyn 30]
  2936: 33 08 01                 a1 = 0x1
  2939: 52 07 82                 jump @239 if a0 != 0
      :                          @251
  2942: 33 08                    a1 = 0
  2944: 82 16                    s1 = u64 [sp]
  2946: 82 17 10                 a0 = u64 [sp + 0x10]
  2949: 7a 67 30                 u32 [s1 + 0x30] = a0
  2952: 82 17 08                 a0 = u64 [sp + 0x8]
  2955: 78 67 38                 u8 [s1 + 0x38] = a0
  2958: 28 6f ff                 jump @239
      :                          @252
  2961: 82 16 10                 s1 = u64 [sp + 0x10]
  2964: 82 17 10                 a0 = u64 [sp + 0x10]
  2967: d8 76 08                 a1 = s1 <u a0
  2970: 28 63 ff                 jump @239
      :                          @253
  2973: 82 17 10                 a0 = u64 [sp + 0x10]
  2976: d8 76 08                 a1 = s1 <u a0
  2979: 28 5a ff                 jump @239
      :                          @254
  2982: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  2985: 7b 10 20                 u64 [sp + 0x20] = ra
  2988: 7b 15 18                 u64 [sp + 0x18] = s0
  2991: 7b 16 10                 u64 [sp + 0x10] = s1
  2994: 83 9c                    i32 a5 = a2 + 0
  2996: 33 02 00 00 11           t0 = 0x110000
  3001: 64 a6                    s1 = a3
  3003: 64 85                    s0 = a1
  3005: 64 7a                    a3 = a0
  3007: aa 2c 20                 jump @257 if a5 == t0
      :                          @255
  3010: 82 5c 20                 a5 = u64 [s0 + 0x20]
  3013: 64 a7                    a0 = a3
  3015: 64 98                    a1 = a2
  3017: 7b 1b 08                 u64 [sp + 0x8] = a4
  3020: 7b 1a                    u64 [sp] = a3
  3022: b4 c0 01 3e              ra = 62, jump [a5]
      :                          @256 [@dyn 31]
  3026: 82 1a                    a3 = u64 [sp]
  3028: 82 1b 08                 a4 = u64 [sp + 0x8]
  3031: 64 78                    a1 = a0
  3033: 33 07 01                 a0 = 0x1
  3036: 52 08 20                 jump @260 if a1 != 0
      :                          @257
  3039: 51 06 1a                 jump @259 if s1 == 0
      :                          @258
  3042: 82 5c 18                 a5 = u64 [s0 + 0x18]
  3045: 64 a7                    a0 = a3
  3047: 64 68                    a1 = s1
  3049: 64 b9                    a2 = a4
  3051: 82 10 20                 ra = u64 [sp + 0x20]
  3054: 82 15 18                 s0 = u64 [sp + 0x18]
  3057: 82 16 10                 s1 = u64 [sp + 0x10]
  3060: 95 11 28                 sp = sp + 0x28
  3063: 32 0c                    jump [a5]
      :                          @259
  3065: 33 07                    a0 = 0
  3067: 01                       fallthrough
      :                          @260
  3068: 82 10 20                 ra = u64 [sp + 0x20]
  3071: 82 15 18                 s0 = u64 [sp + 0x18]
  3074: 82 16 10                 s1 = u64 [sp + 0x10]
  3077: 95 11 28                 sp = sp + 0x28
  3080: 32 00                    ret
      :                          @261
  3082: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  3086: 7b 10 80 00              u64 [sp + 0x80] = ra
  3090: 7b 15 78                 u64 [sp + 0x78] = s0
  3093: 7b 16 70                 u64 [sp + 0x70] = s1
  3096: 49 11 60 20              u64 [sp + 96] = 0x20
  3100: 33 0a 03                 a3 = 0x3
  3103: 78 1a 68                 u8 [sp + 0x68] = a3
  3106: 82 96 20                 s1 = u64 [a2 + 0x20]
  3109: 49 11 30                 u64 [sp + 48] = 0
  3112: 49 11 40                 u64 [sp + 64] = 0
  3115: 7b 17 50                 u64 [sp + 0x50] = a0
  3118: 7b 18 58                 u64 [sp + 0x58] = a1
  3121: 51 06 07 01              jump @283 if s1 == 0
      :                          @262
  3125: 82 97 28                 a0 = u64 [a2 + 0x28]
  3128: 51 07 74 01              jump @293 if a0 == 0
      :                          @263
  3132: 49 11 28                 u64 [sp + 40] = 0
  3135: 82 95                    s0 = u64 [a2]
  3137: 7b 19 08                 u64 [sp + 0x8] = a2
  3140: 82 98 10                 a1 = u64 [a2 + 0x10]
  3143: 7b 18 18                 u64 [sp + 0x18] = a1
  3146: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  3149: 97 88 03                 a1 = a1 << 0x3
  3152: 98 88 03                 a1 = a1 >> 0x3
  3155: 95 88 01                 a1 = a1 + 0x1
  3158: 7b 18                    u64 [sp] = a1
  3160: 95 55 08                 s0 = s0 + 0x8
  3163: 96 78 38                 a1 = a0 * 0x38
  3166: 95 66 18                 s1 = s1 + 0x18
  3169: 33 07 2a                 a0 = 0x2a
  3172: 7b 17 10                 u64 [sp + 0x10] = a0
  3175: 01                       fallthrough
      :                          @264
  3176: 7b 18 20                 u64 [sp + 0x20] = a1
  3179: 82 59                    a2 = u64 [s0]
  3181: 51 09 17                 jump @267 if a2 == 0
      :                          @265
  3184: 82 1a 58                 a3 = u64 [sp + 0x58]
  3187: 82 17 50                 a0 = u64 [sp + 0x50]
  3190: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  3193: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3196: b4 a0 01 40              ra = 64, jump [a3]
      :                          @266 [@dyn 32]
  3200: 52 07 51 01              jump @296 if a0 != 0
      :                          @267
  3204: 81 67 10                 a0 = i32 [s1 + 0x10]
  3207: 7a 17 60                 u32 [sp + 0x60] = a0
  3210: 7c 67 18                 a0 = u8 [s1 + 0x18]
  3213: 78 17 68                 u8 [sp + 0x68] = a0
  3216: 81 67 14                 a0 = i32 [s1 + 0x14]
  3219: 7a 17 64                 u32 [sp + 0x64] = a0
  3222: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3225: 82 67                    a0 = u64 [s1]
  3227: 51 08 26                 jump @272 if a1 == 0
      :                          @268
  3230: 52 18 01 16              jump @270 if a1 != 1
      :                          @269
  3234: 97 77 04                 a0 = a0 << 0x4
  3237: 82 18 18                 a1 = u64 [sp + 0x18]
  3240: c8 87 07                 a0 = a0 + a1
  3243: 82 78 08                 a1 = u64 [a0 + 0x8]
  3246: 82 19 10                 a2 = u64 [sp + 0x10]
  3249: aa 98 07                 jump @271 if a1 == a2
      :                          @270
  3252: 33 08                    a1 = 0
  3254: 28 0f                    jump @273
      :                          @271
  3256: 82 77                    a0 = u64 [a0]
  3258: 82 77                    a0 = u64 [a0]
  3260: 33 08 01                 a1 = 0x1
  3263: 28 06                    jump @273
      :                          @272
  3265: 33 08 01                 a1 = 0x1
  3268: 01                       fallthrough
      :                          @273
  3269: 7b 18 30                 u64 [sp + 0x30] = a1
  3272: 7b 17 38                 u64 [sp + 0x38] = a0
  3275: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  3278: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  3281: 51 08 26                 jump @278 if a1 == 0
      :                          @274
  3284: 52 18 01 16              jump @276 if a1 != 1
      :                          @275
  3288: 97 77 04                 a0 = a0 << 0x4
  3291: 82 18 18                 a1 = u64 [sp + 0x18]
  3294: c8 87 07                 a0 = a0 + a1
  3297: 82 78 08                 a1 = u64 [a0 + 0x8]
  3300: 82 19 10                 a2 = u64 [sp + 0x10]
  3303: aa 98 07                 jump @277 if a1 == a2
      :                          @276
  3306: 33 08                    a1 = 0
  3308: 28 0f                    jump @279
      :                          @277
  3310: 82 77                    a0 = u64 [a0]
  3312: 82 77                    a0 = u64 [a0]
  3314: 33 08 01                 a1 = 0x1
  3317: 28 06                    jump @279
      :                          @278
  3319: 33 08 01                 a1 = 0x1
  3322: 01                       fallthrough
      :                          @279
  3323: 7b 18 40                 u64 [sp + 0x40] = a1
  3326: 7b 17 48                 u64 [sp + 0x48] = a0
  3329: 82 67 08                 a0 = u64 [s1 + 0x8]
  3332: 97 77 04                 a0 = a0 << 0x4
  3335: 82 18 18                 a1 = u64 [sp + 0x18]
  3338: c8 78 08                 a1 = a1 + a0
  3341: 82 87                    a0 = u64 [a1]
  3343: 82 89 08                 a2 = u64 [a1 + 0x8]
  3346: 95 18 30                 a1 = sp + 0x30
  3349: b4 90 01 42              ra = 66, jump [a2]
      :                          @280 [@dyn 33]
  3353: 52 07 b8 00              jump @296 if a0 != 0
      :                          @281
  3357: 95 55 10                 s0 = s0 + 0x10
  3360: 82 18 20                 a1 = u64 [sp + 0x20]
  3363: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  3366: 95 66 38                 s1 = s1 + 0x38
  3369: 82 17 28                 a0 = u64 [sp + 0x28]
  3372: 95 77 01                 a0 = a0 + 0x1
  3375: 7b 17 28                 u64 [sp + 0x28] = a0
  3378: 52 08 36 ff              jump @264 if a1 != 0
      :                          @282
  3382: 28 69                    jump @291
      :                          @283
  3384: 82 97 18                 a0 = u64 [a2 + 0x18]
  3387: 51 07 71                 jump @293 if a0 == 0
      :                          @284
  3390: 82 95 10                 s0 = u64 [a2 + 0x10]
  3393: 33 0a                    a3 = 0
  3395: 97 78 04                 a1 = a0 << 0x4
  3398: c8 58 08                 a1 = a1 + s0
  3401: 7b 18 20                 u64 [sp + 0x20] = a1
  3404: 7b 19 08                 u64 [sp + 0x8] = a2
  3407: 82 96                    s1 = u64 [a2]
  3409: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  3412: 97 77 04                 a0 = a0 << 0x4
  3415: 98 77 04                 a0 = a0 >> 0x4
  3418: 95 77 01                 a0 = a0 + 0x1
  3421: 7b 17                    u64 [sp] = a0
  3423: 95 66 08                 s1 = s1 + 0x8
  3426: 01                       fallthrough
      :                          @285
  3427: 7b 1a 28                 u64 [sp + 0x28] = a3
  3430: 82 69                    a2 = u64 [s1]
  3432: 51 09 16                 jump @288 if a2 == 0
      :                          @286
  3435: 82 1a 58                 a3 = u64 [sp + 0x58]
  3438: 82 17 50                 a0 = u64 [sp + 0x50]
  3441: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3444: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3447: b4 a0 01 44              ra = 68, jump [a3]
      :                          @287 [@dyn 34]
  3451: 52 07 56                 jump @296 if a0 != 0
      :                          @288
  3454: 82 57                    a0 = u64 [s0]
  3456: 82 59 08                 a2 = u64 [s0 + 0x8]
  3459: 95 18 30                 a1 = sp + 0x30
  3462: b4 90 01 46              ra = 70, jump [a2]
      :                          @289 [@dyn 35]
  3466: 52 07 47                 jump @296 if a0 != 0
      :                          @290
  3469: 95 66 10                 s1 = s1 + 0x10
  3472: 95 55 10                 s0 = s0 + 0x10
  3475: 82 1a 28                 a3 = u64 [sp + 0x28]
  3478: 95 aa 01                 a3 = a3 + 0x1
  3481: 82 17 20                 a0 = u64 [sp + 0x20]
  3484: ab 75 c7                 jump @285 if s0 != a0
      :                          @291
  3487: 82 19 08                 a2 = u64 [sp + 0x8]
  3490: 82 1a                    a3 = u64 [sp]
  3492: 82 97 08                 a0 = u64 [a2 + 0x8]
  3495: ac 7a 0d                 jump @294 if a3 <u a0
      :                          @292
  3498: 28 2c                    jump @297
      :                          @293
  3500: 33 0a                    a3 = 0
  3502: 82 97 08                 a0 = u64 [a2 + 0x8]
  3505: 54 07 25                 jump @297 if a0 <=u 0
      :                          @294
  3508: 82 97                    a0 = u64 [a2]
  3510: 97 a8 04                 a1 = a3 << 0x4
  3513: c8 87 09                 a2 = a0 + a1
  3516: 82 1a 58                 a3 = u64 [sp + 0x58]
  3519: 82 17 50                 a0 = u64 [sp + 0x50]
  3522: 82 98                    a1 = u64 [a2]
  3524: 82 99 08                 a2 = u64 [a2 + 0x8]
  3527: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3530: b4 a0 01 48              ra = 72, jump [a3]
      :                          @295 [@dyn 36]
  3534: 51 07 08                 jump @297 if a0 == 0
      :                          @296
  3537: 33 07 01                 a0 = 0x1
  3540: 28 05                    jump @298
      :                          @297
  3542: 33 07                    a0 = 0
  3544: 01                       fallthrough
      :                          @298
  3545: 82 10 80 00              ra = u64 [sp + 0x80]
  3549: 82 15 78                 s0 = u64 [sp + 0x78]
  3552: 82 16 70                 s1 = u64 [sp + 0x70]
  3555: 95 11 88 00              sp = sp + 0x88
  3559: 32 00                    ret
      :                          @299
  3561: 51 08 9b 00              jump @320 if a1 == 0
      :                          @300
  3565: 64 79                    a2 = a0
  3567: 7c 77                    a0 = u8 [a0]
  3569: 51 07 91 00              jump @319 if a0 == 0
      :                          @301
  3573: 51 27 ff 00 90 00        jump @321 if a0 == 255
      :                          @302
  3579: 6c 7a                    a3 = sext.b a0
  3581: 57 0a 09                 jump @304 if a3 <s 0
      :                          @303
  3584: 33 0a                    a3 = 0
  3586: 33 08                    a1 = 0
  3588: 28 73                    jump @318
      :                          @304
  3590: 55 27 c0 00 0d           jump @306 if a0 >=u 192
      :                          @305
  3595: 33 0a 01                 a3 = 0x1
  3598: 33 0b 80                 a4 = 0xffffffffffffff80
  3601: 28 4a                    jump @315
      :                          @306
  3603: 55 27 e0 00 0e           jump @308 if a0 >=u 224
      :                          @307
  3608: 33 0a 02                 a3 = 0x2
  3611: 33 0b 40 ff              a4 = 0xffffffffffffff40
  3615: 28 3c                    jump @315
      :                          @308
  3617: 55 27 f0 00 0e           jump @310 if a0 >=u 240
      :                          @309
  3622: 33 0a 03                 a3 = 0x3
  3625: 33 0b 20 ff              a4 = 0xffffffffffffff20
  3629: 28 2e                    jump @315
      :                          @310
  3631: 55 27 f8 00 0e           jump @312 if a0 >=u 248
      :                          @311
  3636: 33 0a 04                 a3 = 0x4
  3639: 33 0b 10 ff              a4 = 0xffffffffffffff10
  3643: 28 20                    jump @315
      :                          @312
  3645: 55 27 fc 00 0e           jump @314 if a0 >=u 252
      :                          @313
  3650: 33 0a 05                 a3 = 0x5
  3653: 33 0b 08 ff              a4 = 0xffffffffffffff08
  3657: 28 12                    jump @315
      :                          @314
  3659: 88 7a fe 00              a3 = a0 <u 0xfe
  3663: 33 0b 04 ff              a4 = 0xffffffffffffff04
  3667: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  3671: 85 aa 07                 a3 = a3 ^ 0x7
  3674: 01                       fallthrough
      :                          @315
  3675: ae 8a 2b                 jump @322 if a3 >=u a1
      :                          @316
  3678: 33 08                    a1 = 0
  3680: c8 b7 07                 a0 = a0 + a4
  3683: 64 ab                    a4 = a3
  3685: 01                       fallthrough
      :                          @317
  3686: c8 b9 0c                 a5 = a2 + a4
  3689: 7c cc                    a5 = u8 [a5]
  3691: 97 88 08                 a1 = a1 << 0x8
  3694: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  3697: d4 c8 08                 a1 = a1 | a5
  3700: 52 0b f2                 jump @317 if a4 != 0
      :                          @318
  3703: 8a a9 03                 i32 a2 = a3 << 0x3
  3706: cf 97 07                 a0 = a0 << a2
  3709: c8 87 07                 a0 = a0 + a1
  3712: 32 00                    ret
      :                          @319
  3714: 32 00                    ret
      :                          @320
  3716: 00                       trap
      :                          @321
  3717: 00                       trap
      :                          @322
  3718: 00                       trap
