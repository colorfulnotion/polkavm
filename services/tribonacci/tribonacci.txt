// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 2 bytes
// RO data = []
// RW data = []
// Instructions = 336
// Code size = 986 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 6e 00 00 00           jump @8
      :                          @2
    10: 28 31 03                 jump @93
      :                          @3 [export #0: 'refine']
    13: 95 11 e0                 sp = sp + 0xffffffffffffffe0
    16: 7b 10 18                 u64 [sp + 0x18] = ra
    19: 7b 15 10                 u64 [sp + 0x10] = s0
    22: 49 11 08                 u64 [sp + 8] = 0
    25: 49 01                    u64 [sp + 0] = 0
    27: 64 17                    a0 = sp
    29: 33 09 10                 a2 = 0x10
    32: 33 0a 05                 a3 = 0x5
    35: 33 08                    a1 = 0
    37: 33 0b                    a4 = 0
    39: 33 0c                    a5 = 0
    41: 0a 12                    ecalli 18 // 'fetch'
    43: 01                       fallthrough
      :                          @4
    44: 51 17 ff 1a              jump @6 if a0 == 4294967295
      :                          @5
    48: 81 17 04                 a0 = i32 [sp + 0x4]
    51: 81 18 08                 a1 = i32 [sp + 0x8]
    54: 81 19 0c                 a2 = i32 [sp + 0xc]
    57: 81 1a                    a3 = i32 [sp]
    59: c8 78 0b                 a4 = a1 + a0
    62: be b9 09                 i32 a2 = a2 + a4
    65: 83 aa 01                 i32 a3 = a3 + 0x1
    68: 28 0d                    jump @7
      :                          @6
    70: 33 07                    a0 = 0
    72: 33 08                    a1 = 0
    74: 33 0a 01                 a3 = 0x1
    77: 33 09 01                 a2 = 0x1
    80: 01                       fallthrough
      :                          @7
    81: 7a 1a                    u32 [sp] = a3
    83: 7a 19 04                 u32 [sp + 0x4] = a2
    86: 7a 17 08                 u32 [sp + 0x8] = a0
    89: 7a 18 0c                 u32 [sp + 0xc] = a1
    92: 64 17                    a0 = sp
    94: 33 08 10                 a1 = 0x10
    97: 0a 13                    ecalli 19 // 'export'
    99: 64 17                    a0 = sp
   101: 33 08 10                 a1 = 0x10
   104: 82 10 18                 ra = u64 [sp + 0x18]
   107: 82 15 10                 s0 = u64 [sp + 0x10]
   110: 95 11 20                 sp = sp + 0x20
   113: 32 00                    ret
      :                          @8 [export #1: 'accumulate']
   115: 95 11 b8                 sp = sp + 0xffffffffffffffb8
   118: 7b 10 40                 u64 [sp + 0x40] = ra
   121: 7b 15 38                 u64 [sp + 0x38] = s0
   124: 7b 16 30                 u64 [sp + 0x30] = s1
   127: 64 79                    a2 = a0
   129: 95 8b f8                 a4 = a1 + 0xfffffffffffffff8
   132: 33 07 00 00 01           a0 = 0x10000
   137: 51 0b 52                 jump @17 if a4 == 0
      :                          @9
   140: 95 99 08                 a2 = a2 + 0x8
   143: 7d 9c                    a5 = i8 [a2]
   145: 84 c8 ff 00              a1 = a5 & 0xff
   149: 33 06 01                 s1 = 0x1
   152: 59 0c 40                 jump @16 if a5 >=s 0
      :                          @10
   155: 33 0c c0 00              a5 = 0xc0
   159: 33 06 02                 s1 = 0x2
   162: ac c8 36                 jump @16 if a1 <u a5
      :                          @11
   165: 33 0c e0 00              a5 = 0xe0
   169: 33 06 03                 s1 = 0x3
   172: ac c8 2c                 jump @16 if a1 <u a5
      :                          @12
   175: 33 0c f0 00              a5 = 0xf0
   179: 33 06 04                 s1 = 0x4
   182: ac c8 22                 jump @16 if a1 <u a5
      :                          @13
   185: 33 0c f8 00              a5 = 0xf8
   189: 33 06 05                 s1 = 0x5
   192: ac c8 18                 jump @16 if a1 <u a5
      :                          @14
   195: 33 0c fc 00              a5 = 0xfc
   199: 33 06 06                 s1 = 0x6
   202: ac c8 0e                 jump @16 if a1 <u a5
      :                          @15
   205: 88 8a fe 00              a3 = a1 <u 0xfe
   209: 33 0c 08                 a5 = 0x8
   212: c9 ac 06                 s1 = a5 - a3
   215: 01                       fallthrough
      :                          @16
   216: ae 6b 14                 jump @19 if a4 >=u s1
      :                          @17
   219: 33 08                    a1 = 0
   221: 01                       fallthrough
      :                          @18
   222: 82 10 40                 ra = u64 [sp + 0x40]
   225: 82 15 38                 s0 = u64 [sp + 0x38]
   228: 82 16 30                 s1 = u64 [sp + 0x30]
   231: 95 11 48                 sp = sp + 0x48
   234: 32 00                    ret
      :                          @19
   236: 51 08 f2                 jump @18 if a1 == 0
      :                          @20
   239: 51 28 ff 00 45 02        jump @86 if a1 == 255
      :                          @21
   245: 6c 8c                    a5 = sext.b a1
   247: 57 0c 09                 jump @23 if a5 <s 0
      :                          @22
   250: 33 02                    t0 = 0
   252: 33 05                    s0 = 0
   254: 28 74                    jump @37
      :                          @23
   256: 55 28 c0 00 0d           jump @25 if a1 >=u 192
      :                          @24
   261: 33 02 01                 t0 = 0x1
   264: 33 0c 80                 a5 = 0xffffffffffffff80
   267: 28 4a                    jump @34
      :                          @25
   269: 55 28 e0 00 0e           jump @27 if a1 >=u 224
      :                          @26
   274: 33 02 02                 t0 = 0x2
   277: 33 0c 40 ff              a5 = 0xffffffffffffff40
   281: 28 3c                    jump @34
      :                          @27
   283: 55 28 f0 00 0e           jump @29 if a1 >=u 240
      :                          @28
   288: 33 02 03                 t0 = 0x3
   291: 33 0c 20 ff              a5 = 0xffffffffffffff20
   295: 28 2e                    jump @34
      :                          @29
   297: 55 28 f8 00 0e           jump @31 if a1 >=u 248
      :                          @30
   302: 33 02 04                 t0 = 0x4
   305: 33 0c 10 ff              a5 = 0xffffffffffffff10
   309: 28 20                    jump @34
      :                          @31
   311: 55 28 fc 00 0e           jump @33 if a1 >=u 252
      :                          @32
   316: 33 02 05                 t0 = 0x5
   319: 33 0c 08 ff              a5 = 0xffffffffffffff08
   323: 28 12                    jump @34
      :                          @33
   325: 88 8a fe 00              a3 = a1 <u 0xfe
   329: 33 0c 04 ff              a5 = 0xffffffffffffff04
   333: 93 ac 02 ff              a5 = 0xffffffffffffff02 if a3 == 0
   337: 85 a2 07                 t0 = a3 ^ 0x7
   340: 01                       fallthrough
      :                          @34
   341: ae 62 e0 01              jump @87 if t0 >=u s1
      :                          @35
   345: 33 05                    s0 = 0
   347: c8 c8 08                 a1 = a1 + a5
   350: 64 2c                    a5 = t0
   352: 01                       fallthrough
      :                          @36
   353: c8 c9 0a                 a3 = a2 + a5
   356: 7c aa                    a3 = u8 [a3]
   358: 97 55 08                 s0 = s0 << 0x8
   361: 95 cc ff                 a5 = a5 + 0xffffffffffffffff
   364: d4 a5 05                 s0 = s0 | a3
   367: 52 0c f2                 jump @36 if a5 != 0
      :                          @37
   370: 8a 2a 03                 i32 a3 = t0 << 0x3
   373: cf a8 08                 a1 = a1 << a3
   376: 9a 8a                    a3 = -a1
   378: aa a5 61 ff              jump @17 if s0 == a3
      :                          @38
   382: e4 6b 08                 a1 = maxu(a4, s1)
   385: c9 68 08                 a1 = a1 - s1
   388: 33 0a 60                 a3 = 0x60
   391: ac a8 54 ff              jump @17 if a1 <u a3
      :                          @39
   395: c8 69 09                 a2 = a2 + s1
   398: 95 88 a0                 a1 = a1 + 0xffffffffffffffa0
   401: 95 95 60                 s0 = a2 + 0x60
   404: 51 08 65                 jump @52 if a1 == 0
      :                          @40
   407: 7d 5b                    a4 = i8 [s0]
   409: 84 b6 ff 00              s1 = a4 & 0xff
   413: 33 09 01                 a2 = 0x1
   416: 59 0b 40                 jump @47 if a4 >=s 0
      :                          @41
   419: 33 0b c0 00              a4 = 0xc0
   423: 33 09 02                 a2 = 0x2
   426: ac b6 36                 jump @47 if s1 <u a4
      :                          @42
   429: 33 0b e0 00              a4 = 0xe0
   433: 33 09 03                 a2 = 0x3
   436: ac b6 2c                 jump @47 if s1 <u a4
      :                          @43
   439: 33 0b f0 00              a4 = 0xf0
   443: 33 09 04                 a2 = 0x4
   446: ac b6 22                 jump @47 if s1 <u a4
      :                          @44
   449: 33 0b f8 00              a4 = 0xf8
   453: 33 09 05                 a2 = 0x5
   456: ac b6 18                 jump @47 if s1 <u a4
      :                          @45
   459: 33 0b fc 00              a4 = 0xfc
   463: 33 09 06                 a2 = 0x6
   466: ac b6 0e                 jump @47 if s1 <u a4
      :                          @46
   469: 88 69 fe 00              a2 = s1 <u 0xfe
   473: 33 0b 08                 a4 = 0x8
   476: c9 9b 09                 a2 = a4 - a2
   479: 01                       fallthrough
      :                          @47
   480: ac 98 56 01              jump @88 if a1 <u a2
      :                          @48
   484: 51 06 97 00              jump @68 if s1 == 0
      :                          @49
   488: 51 26 ff 00 4f 01        jump @89 if s1 == 255
      :                          @50
   494: 6c 6b                    a4 = sext.b s1
   496: 57 0b 0f                 jump @53 if a4 <s 0
      :                          @51
   499: 33 02                    t0 = 0
   501: 33 0b                    a4 = 0
   503: 28 7a                    jump @67
      :                          @52
   505: 33 09                    a2 = 0
   507: 33 06                    s1 = 0
   509: 28 7e                    jump @68
      :                          @53
   511: 55 26 c0 00 0d           jump @55 if s1 >=u 192
      :                          @54
   516: 33 02 01                 t0 = 0x1
   519: 33 0c 80                 a5 = 0xffffffffffffff80
   522: 28 4a                    jump @64
      :                          @55
   524: 55 26 e0 00 0e           jump @57 if s1 >=u 224
      :                          @56
   529: 33 02 02                 t0 = 0x2
   532: 33 0c 40 ff              a5 = 0xffffffffffffff40
   536: 28 3c                    jump @64
      :                          @57
   538: 55 26 f0 00 0e           jump @59 if s1 >=u 240
      :                          @58
   543: 33 02 03                 t0 = 0x3
   546: 33 0c 20 ff              a5 = 0xffffffffffffff20
   550: 28 2e                    jump @64
      :                          @59
   552: 55 26 f8 00 0e           jump @61 if s1 >=u 248
      :                          @60
   557: 33 02 04                 t0 = 0x4
   560: 33 0c 10 ff              a5 = 0xffffffffffffff10
   564: 28 20                    jump @64
      :                          @61
   566: 55 26 fc 00 0e           jump @63 if s1 >=u 252
      :                          @62
   571: 33 02 05                 t0 = 0x5
   574: 33 0c 08 ff              a5 = 0xffffffffffffff08
   578: 28 12                    jump @64
      :                          @63
   580: 88 6b fe 00              a4 = s1 <u 0xfe
   584: 33 0c 04 ff              a5 = 0xffffffffffffff04
   588: 93 bc 02 ff              a5 = 0xffffffffffffff02 if a4 == 0
   592: 85 b2 07                 t0 = a4 ^ 0x7
   595: 01                       fallthrough
      :                          @64
   596: ae 92 e5 00              jump @91 if t0 >=u a2
      :                          @65
   600: 33 0b                    a4 = 0
   602: c8 c6 06                 s1 = s1 + a5
   605: 64 2c                    a5 = t0
   607: 01                       fallthrough
      :                          @66
   608: c8 c5 0a                 a3 = s0 + a5
   611: 7c aa                    a3 = u8 [a3]
   613: 97 bb 08                 a4 = a4 << 0x8
   616: 95 cc ff                 a5 = a5 + 0xffffffffffffffff
   619: d4 ab 0b                 a4 = a4 | a3
   622: 52 0c f2                 jump @66 if a5 != 0
      :                          @67
   625: 8a 2a 03                 i32 a3 = t0 << 0x3
   628: cf a6 06                 s1 = s1 << a3
   631: c8 b6 06                 s1 = s1 + a4
   634: 01                       fallthrough
      :                          @68
   635: e4 98 08                 a1 = maxu(a1, a2)
   638: c9 98 08                 a1 = a1 - a2
   641: e4 68 08                 a1 = maxu(a1, s1)
   644: c9 68 08                 a1 = a1 - s1
   647: 33 0a 21                 a3 = 0x21
   650: ac a8 51 fe              jump @17 if a1 <u a3
      :                          @69
   654: c8 59 09                 a2 = a2 + s0
   657: c8 96 06                 s1 = s1 + a2
   660: 7c 67 20                 a0 = u8 [s1 + 0x20]
   663: 51 07 1b                 jump @71 if a0 == 0
      :                          @70
   666: 46 11 0f                 u8 [sp + 15] = 0
   669: 95 17 0f                 a0 = sp + 0xf
   672: 33 08 01                 a1 = 0x1
   675: 33 09                    a2 = 0
   677: 33 0a                    a3 = 0
   679: 0a 03                    ecalli 3 // 'write'
   681: 95 17 10                 a0 = sp + 0x10
   684: 33 08 20                 a1 = 0x20
   687: 28 2f fe                 jump @18
      :                          @71
   690: 95 8a df                 a3 = a1 + 0xffffffffffffffdf
   693: 95 65 21                 s0 = s1 + 0x21
   696: 51 0a 50                 jump @82 if a3 == 0
      :                          @72
   699: 7d 57                    a0 = i8 [s0]
   701: 33 06 01                 s1 = 0x1
   704: 59 07 37                 jump @79 if a0 >=s 0
      :                          @73
   707: 84 77 ff 00              a0 = a0 & 0xff
   711: 33 06 02                 s1 = 0x2
   714: 53 27 c0 00 2d           jump @79 if a0 <u 192
      :                          @74
   719: 33 06 03                 s1 = 0x3
   722: 53 27 e0 00 25           jump @79 if a0 <u 224
      :                          @75
   727: 33 06 04                 s1 = 0x4
   730: 53 27 f0 00 1d           jump @79 if a0 <u 240
      :                          @76
   735: 33 06 05                 s1 = 0x5
   738: 53 27 f8 00 15           jump @79 if a0 <u 248
      :                          @77
   743: 33 06 06                 s1 = 0x6
   746: 53 27 fc 00 0d           jump @79 if a0 <u 252
      :                          @78
   751: 88 77 fe 00              a0 = a0 <u 0xfe
   755: 9a 76 08                 s1 = 0x8 - a0
   758: 01                       fallthrough
      :                          @79
   759: 7b 1a                    u64 [sp] = a3
   761: ac 6a 41                 jump @92 if a3 <u s1
      :                          @80
   764: 64 57                    a0 = s0
   766: 64 68                    a1 = s1
   768: 50 10 02 44              ra = 2, jump @94
      :                          @81 [@dyn 1]
   772: 82 1a                    a3 = u64 [sp]
   774: 28 07                    jump @83
      :                          @82
   776: 33 06                    s1 = 0
   778: 33 07                    a0 = 0
   780: 01                       fallthrough
      :                          @83
   781: c8 65 09                 a2 = s0 + s1
   784: e4 6a 08                 a1 = maxu(a3, s1)
   787: c9 68 08                 a1 = a1 - s1
   790: e6 78 05                 s0 = minu(a1, a0)
   793: 46 11 0f                 u8 [sp + 15] = 0
   796: 95 17 0f                 a0 = sp + 0xf
   799: 33 08 01                 a1 = 0x1
   802: 64 5a                    a3 = s0
   804: 0a 03                    ecalli 3 // 'write'
   806: 01                       fallthrough
      :                          @84
   807: 55 15 21 11              jump @90 if s0 >=u 33
      :                          @85
   811: 95 17 10                 a0 = sp + 0x10
   814: 33 08 20                 a1 = 0x20
   817: 28 ad fd                 jump @18
      :                          @86
   820: 00                       trap
      :                          @87
   821: 00                       trap
      :                          @88
   822: 00                       trap
      :                          @89
   823: 00                       trap
      :                          @90
   824: 00                       trap
      :                          @91
   825: 00                       trap
      :                          @92
   826: 00                       trap
      :                          @93 [export #2: 'on_transfer']
   827: 33 07 00 00 01           a0 = 0x10000
   832: 33 08                    a1 = 0
   834: 32 00                    ret
      :                          @94
   836: 64 79                    a2 = a0
   838: 7c 77                    a0 = u8 [a0]
   840: 51 07 bc                 jump @81 if a0 == 0
      :                          @95
   843: 51 27 ff 00 8d 00        jump @113 if a0 == 255
      :                          @96
   849: 6c 7a                    a3 = sext.b a0
   851: 57 0a 09                 jump @98 if a3 <s 0
      :                          @97
   854: 33 0a                    a3 = 0
   856: 33 08                    a1 = 0
   858: 28 73                    jump @112
      :                          @98
   860: 55 27 c0 00 0d           jump @100 if a0 >=u 192
      :                          @99
   865: 33 0a 01                 a3 = 0x1
   868: 33 0b 80                 a4 = 0xffffffffffffff80
   871: 28 4a                    jump @109
      :                          @100
   873: 55 27 e0 00 0e           jump @102 if a0 >=u 224
      :                          @101
   878: 33 0a 02                 a3 = 0x2
   881: 33 0b 40 ff              a4 = 0xffffffffffffff40
   885: 28 3c                    jump @109
      :                          @102
   887: 55 27 f0 00 0e           jump @104 if a0 >=u 240
      :                          @103
   892: 33 0a 03                 a3 = 0x3
   895: 33 0b 20 ff              a4 = 0xffffffffffffff20
   899: 28 2e                    jump @109
      :                          @104
   901: 55 27 f8 00 0e           jump @106 if a0 >=u 248
      :                          @105
   906: 33 0a 04                 a3 = 0x4
   909: 33 0b 10 ff              a4 = 0xffffffffffffff10
   913: 28 20                    jump @109
      :                          @106
   915: 55 27 fc 00 0e           jump @108 if a0 >=u 252
      :                          @107
   920: 33 0a 05                 a3 = 0x5
   923: 33 0b 08 ff              a4 = 0xffffffffffffff08
   927: 28 12                    jump @109
      :                          @108
   929: 88 7a fe 00              a3 = a0 <u 0xfe
   933: 33 0b 04 ff              a4 = 0xffffffffffffff04
   937: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
   941: 85 aa 07                 a3 = a3 ^ 0x7
   944: 01                       fallthrough
      :                          @109
   945: ae 8a 28                 jump @114 if a3 >=u a1
      :                          @110
   948: 33 08                    a1 = 0
   950: c8 b7 07                 a0 = a0 + a4
   953: 64 ab                    a4 = a3
   955: 01                       fallthrough
      :                          @111
   956: c8 b9 0c                 a5 = a2 + a4
   959: 7c cc                    a5 = u8 [a5]
   961: 97 88 08                 a1 = a1 << 0x8
   964: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
   967: d4 c8 08                 a1 = a1 | a5
   970: 52 0b f2                 jump @111 if a4 != 0
      :                          @112
   973: 8a a9 03                 i32 a2 = a3 << 0x3
   976: cf 97 07                 a0 = a0 << a2
   979: c8 87 07                 a0 = a0 + a1
   982: 32 00                    ret
      :                          @113
   984: 00                       trap
      :                          @114
   985: 00                       trap
