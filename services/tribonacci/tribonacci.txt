// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 0 bytes
// RO data = []
// RW data = []
// Instructions = 65
// Code size = 180 bytes

      :                          @0
     0: 28 12 00 00 00           jump @4
      :                          @1
     5: 28 11 00 00 00           jump @5
      :                          @2
    10: 28 78 00 00 00           jump @10
      :                          @3
    15: 28 a1 00                 jump @11
      :                          @4 [export #0: 'is_authorized']
    18: 33 07                    a0 = 0x0
    20: 32 00                    ret
      :                          @5 [export #1: 'refine']
    22: 95 11 d8                 sp = sp - 40
    25: 7b 10 20                 u64 [sp + 32] = ra
    28: 7b 15 18                 u64 [sp + 24] = s0
    31: 7b 16 10                 u64 [sp + 16] = s1
    34: 49 11 08                 u64 [sp + 8] = 0
    37: 49 01                    u64 [sp + 0] = 0
    39: 64 18                    a1 = sp
    41: 33 09 10                 a2 = 0x10
    44: 33 07                    a0 = 0x0
    46: 0a 12                    ecalli 18 // 'import'
    48: 01                       fallthrough
      :                          @6
    49: 83 77                    i32 a0 = a0 + 0x0
    51: 51 07 0f                 jump @8 if a0 == 0
      :                          @7
    54: 33 07                    a0 = 0x0
    56: 33 08                    a1 = 0x0
    58: 33 0a 01                 a3 = 0x1
    61: 33 09 01                 a2 = 0x1
    64: 28 17                    jump @9
      :                          @8
    66: 81 17 04                 a0 = i32 [sp + 4]
    69: 81 18 08                 a1 = i32 [sp + 8]
    72: 81 19 0c                 a2 = i32 [sp + 12]
    75: 81 1a                    a3 = i32 [sp]
    77: c8 78 0b                 a4 = a1 + a0
    80: be b9 09                 i32 a2 = a2 + a4
    83: 83 aa 01                 i32 a3 = a3 + 0x1
    86: 01                       fallthrough
      :                          @9
    87: 7a 1a                    u32 [sp] = a3
    89: 7a 19 04                 u32 [sp + 4] = a2
    92: 7a 17 08                 u32 [sp + 8] = a0
    95: 7a 18 0c                 u32 [sp + 12] = a1
    98: 64 15                    s0 = sp
   100: 33 06 10                 s1 = 0x10
   103: 64 17                    a0 = sp
   105: 33 08 10                 a1 = 0x10
   108: 0a 13                    ecalli 19 // 'export'
   110: 64 5a                    a3 = s0
   112: 64 6b                    a4 = s1
   114: 33 07                    a0 = 0x0
   116: 82 10 20                 ra = u64 [sp + 32]
   119: 82 15 18                 s0 = u64 [sp + 24]
   122: 82 16 10                 s1 = u64 [sp + 16]
   125: 95 11 28                 sp = sp + 0x28
   128: 32 00                    ret
      :                          @10 [export #2: 'accumulate']
   130: 95 11 f0                 sp = sp - 16
   133: 7b 10 08                 u64 [sp + 8] = ra
   136: 46 11 07                 u8 [sp + 7] = 0
   139: 95 17 07                 a0 = sp + 0x7
   142: 97 77 20                 a0 = a0 << 32
   145: 98 77 20                 a0 = a0 >> 32
   148: 14 09 00 00 ff fe 00 00 00 00 a2 = 0xfeff0000
   158: 33 08 01                 a1 = 0x1
   161: 33 0a 0c                 a3 = 0xc
   164: 0a 03                    ecalli 3 // 'write'
   166: 33 07                    a0 = 0x0
   168: 82 10 08                 ra = u64 [sp + 8]
   171: 95 11 10                 sp = sp + 0x10
   174: 32 00                    ret
      :                          @11 [export #3: 'on_transfer']
   176: 33 07                    a0 = 0x0
   178: 32 00                    ret