// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 2 bytes
// RO data = []
// RW data = []
// Instructions = 372
// Code size = 1075 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 9f 00 00 00           jump @13
      :                          @2
    10: 28 d5 02                 jump @62
      :                          @3 [export #0: 'refine']
    13: 95 11 d0                 sp = sp + 0xffffffffffffffd0
    16: 7b 10 28                 u64 [sp + 0x28] = ra
    19: 7b 15 20                 u64 [sp + 0x20] = s0
    22: 7b 16 18                 u64 [sp + 0x18] = s1
    25: 48 11 10                 u32 [sp + 16] = 0
    28: 49 11 08                 u64 [sp + 8] = 0
    31: 49 01                    u64 [sp + 0] = 0
    33: 64 17                    a0 = sp
    35: 33 09 14                 a2 = 0x14
    38: 33 0a 05                 a3 = 0x5
    41: 33 08                    a1 = 0
    43: 33 0b                    a4 = 0
    45: 33 0c                    a5 = 0
    47: 0a 12                    ecalli 18 // 'fetch'
    49: 01                       fallthrough
      :                          @4
    50: 51 17 ff 1a              jump @6 if a0 == 4294967295
      :                          @5
    54: 81 17 04                 a0 = i32 [sp + 0x4]
    57: 81 18 08                 a1 = i32 [sp + 0x8]
    60: 81 19 0c                 a2 = i32 [sp + 0xc]
    63: 81 15                    s0 = i32 [sp]
    65: c8 78 0a                 a3 = a1 + a0
    68: be a9 09                 i32 a2 = a2 + a3
    71: 83 5a 01                 i32 a3 = s0 + 0x1
    74: 28 0f                    jump @7
      :                          @6
    76: 33 07                    a0 = 0
    78: 33 08                    a1 = 0
    80: 33 05                    s0 = 0
    82: 33 0a 01                 a3 = 0x1
    85: 33 09 01                 a2 = 0x1
    88: 01                       fallthrough
      :                          @7
    89: 7a 1a                    u32 [sp] = a3
    91: 7a 19 04                 u32 [sp + 0x4] = a2
    94: 7a 17 08                 u32 [sp + 0x8] = a0
    97: 7a 18 0c                 u32 [sp + 0xc] = a1
   100: 64 17                    a0 = sp
   102: 33 08 14                 a1 = 0x14
   105: 0a 13                    ecalli 19 // 'export'
   107: 64 17                    a0 = sp
   109: 33 08 14                 a1 = 0x14
   112: 0a 13                    ecalli 19 // 'export'
   114: 01                       fallthrough
      :                          @8
   115: 51 05 1e                 jump @12 if s0 == 0
      :                          @9
   118: 8d 55                    i32 s0 = -s0
   120: 33 06 01                 s1 = 0x1
   123: 01                       fallthrough
      :                          @10
   124: 7a 16 10                 u32 [sp + 0x10] = s1
   127: 64 17                    a0 = sp
   129: 33 08 14                 a1 = 0x14
   132: 0a 13                    ecalli 19 // 'export'
   134: 01                       fallthrough
      :                          @11
   135: 83 66 01                 i32 s1 = s1 + 0x1
   138: be 65 07                 i32 a0 = s0 + s1
   141: 52 17 01 ef              jump @10 if a0 != 1
      :                          @12
   145: 33 08 14                 a1 = 0x14
   148: 64 17                    a0 = sp
   150: 82 10 28                 ra = u64 [sp + 0x28]
   153: 82 15 20                 s0 = u64 [sp + 0x20]
   156: 82 16 18                 s1 = u64 [sp + 0x18]
   159: 95 11 30                 sp = sp + 0x30
   162: 32 00                    ret
      :                          @13 [export #1: 'accumulate']
   164: 95 11 b8                 sp = sp + 0xffffffffffffffb8
   167: 7b 10 40                 u64 [sp + 0x40] = ra
   170: 7b 15 38                 u64 [sp + 0x38] = s0
   173: 7b 16 30                 u64 [sp + 0x30] = s1
   176: 64 86                    s1 = a1
   178: 95 66 f8                 s1 = s1 + 0xfffffffffffffff8
   181: 33 0a ff                 a3 = 0xffffffffffffffff
   184: 51 06 14 02              jump @58 if s1 == 0
      :                          @14
   188: 95 77 08                 a0 = a0 + 0x8
   191: 7d 78                    a1 = i8 [a0]
   193: 33 05 01                 s0 = 0x1
   196: 5a 08 69                 jump @22 if a1 >s 0
      :                          @15
   199: 84 8b ff 00              a4 = a1 & 0xff
   203: 83 b8 ff                 i32 a1 = a4 + 0xffffffffffffffff
   206: 84 88 ff 00              a1 = a1 & 0xff
   210: 33 09 bf 00              a2 = 0xbf
   214: 33 05 02                 s0 = 0x2
   217: ac 98 54                 jump @22 if a1 <u a2
      :                          @16
   220: 84 b8 e0 00              a1 = a4 & 0xe0
   224: 33 09 c0 00              a2 = 0xc0
   228: 33 05 03                 s0 = 0x3
   231: aa 98 46                 jump @22 if a1 == a2
      :                          @17
   234: 84 b8 f0 00              a1 = a4 & 0xf0
   238: 33 09 e0 00              a2 = 0xe0
   242: 33 05 04                 s0 = 0x4
   245: aa 98 38                 jump @22 if a1 == a2
      :                          @18
   248: 84 b8 f8 00              a1 = a4 & 0xf8
   252: 33 09 f0 00              a2 = 0xf0
   256: 33 05 05                 s0 = 0x5
   259: aa 98 2a                 jump @22 if a1 == a2
      :                          @19
   262: 84 b8 fc 00              a1 = a4 & 0xfc
   266: 33 09 f8 00              a2 = 0xf8
   270: 33 05 06                 s0 = 0x6
   273: aa 98 1c                 jump @22 if a1 == a2
      :                          @20
   276: 84 b8 fe 00              a1 = a4 & 0xfe
   280: 33 09 fc 00              a2 = 0xfc
   284: 33 05 07                 s0 = 0x7
   287: aa 98 0e                 jump @22 if a1 == a2
      :                          @21
   290: 88 b8 fe 00              a1 = a4 <u 0xfe
   294: 85 85 01                 s0 = a1 ^ 0x1
   297: 97 55 03                 s0 = s0 << 0x3
   300: 01                       fallthrough
      :                          @22
   301: ac 56 9f 01              jump @58 if s1 <u s0
      :                          @23
   305: 64 58                    a1 = s0
   307: 7b 17                    u64 [sp] = a0
   309: 50 10 02 60 02           ra = 2, jump @81
      :                          @24 [@dyn 1]
   314: 8e 77                    a0 = a0 >u 0
   316: d8 65 08                 a1 = s0 <u s1
   319: d2 87 07                 a0 = a0 & a1
   322: 51 07 28                 jump @28 if a0 == 0
      :                          @25
   325: 82 17                    a0 = u64 [sp]
   327: c8 57 07                 a0 = a0 + s0
   330: 7c 78                    a1 = u8 [a0]
   332: e4 56 06                 s1 = maxu(s1, s0)
   335: 95 7b 01                 a4 = a0 + 0x1
   338: 85 57 ff                 a0 = s0 ^ 0xffffffffffffffff
   341: c8 76 06                 s1 = s1 + a0
   344: 33 0a ff                 a3 = 0xffffffffffffffff
   347: 51 08 15                 jump @29 if a1 == 0
      :                          @26
   350: 33 05                    s0 = 0
   352: 33 09                    a2 = 0
   354: 55 16 40 b6 00           jump @43 if s1 >=u 64
      :                          @27
   359: 28 65 01                 jump @58
      :                          @28
   362: 33 0a ff                 a3 = 0xffffffffffffffff
   365: 28 5f 01                 jump @58
      :                          @29
   368: 51 06 87 00              jump @41 if s1 == 0
      :                          @30
   372: 7d b7                    a0 = i8 [a4]
   374: 33 05 01                 s0 = 0x1
   377: 5a 07 68                 jump @38 if a0 >s 0
      :                          @31
   380: 84 77 ff 00              a0 = a0 & 0xff
   384: 83 78 ff                 i32 a1 = a0 + 0xffffffffffffffff
   387: 84 8c ff 00              a5 = a1 & 0xff
   391: 33 09 bf 00              a2 = 0xbf
   395: 33 05 02                 s0 = 0x2
   398: ac 9c 53                 jump @38 if a5 <u a2
      :                          @32
   401: 84 7c e0 00              a5 = a0 & 0xe0
   405: 33 09 c0 00              a2 = 0xc0
   409: 33 05 03                 s0 = 0x3
   412: aa 9c 45                 jump @38 if a5 == a2
      :                          @33
   415: 84 7c f0 00              a5 = a0 & 0xf0
   419: 33 09 e0 00              a2 = 0xe0
   423: 33 05 04                 s0 = 0x4
   426: aa 9c 37                 jump @38 if a5 == a2
      :                          @34
   429: 84 7c f8 00              a5 = a0 & 0xf8
   433: 33 09 f0 00              a2 = 0xf0
   437: 33 05 05                 s0 = 0x5
   440: aa 9c 29                 jump @38 if a5 == a2
      :                          @35
   443: 84 7c fc 00              a5 = a0 & 0xfc
   447: 33 09 f8 00              a2 = 0xf8
   451: 33 05 06                 s0 = 0x6
   454: aa 9c 1b                 jump @38 if a5 == a2
      :                          @36
   457: 84 7c fe 00              a5 = a0 & 0xfe
   461: 33 09 fc 00              a2 = 0xfc
   465: 33 05 07                 s0 = 0x7
   468: aa 9c 0d                 jump @38 if a5 == a2
      :                          @37
   471: 33 09 fd 00              a2 = 0xfd
   475: 33 05 08                 s0 = 0x8
   478: ae 79 19                 jump @41 if a2 >=u a0
      :                          @38
   481: ac 56 fc 00              jump @60 if s1 <u s0
      :                          @39
   485: 64 b7                    a0 = a4
   487: 64 58                    a1 = s0
   489: 7b 1b                    u64 [sp] = a4
   491: 50 10 04 aa 01           ra = 4, jump @81
      :                          @40 [@dyn 2]
   496: 82 1b                    a4 = u64 [sp]
   498: 33 0a ff                 a3 = 0xffffffffffffffff
   501: 28 07                    jump @42
      :                          @41
   503: 33 05                    s0 = 0
   505: 33 07                    a0 = 0
   507: 01                       fallthrough
      :                          @42
   508: c8 5b 0b                 a4 = a4 + s0
   511: e4 56 08                 a1 = maxu(s1, s0)
   514: c9 58 08                 a1 = a1 - s0
   517: e6 78 05                 s0 = minu(a1, a0)
   520: 64 b9                    a2 = a4
   522: c8 7b 0b                 a4 = a4 + a0
   525: e4 78 06                 s1 = maxu(a1, a0)
   528: c9 76 06                 s1 = s1 - a0
   531: 53 16 40 b9 00           jump @58 if s1 <u 64
      :                          @43
   536: 95 68 c0                 a1 = s1 + 0xffffffffffffffc0
   539: 64 96                    s1 = a2
   541: 51 08 7d                 jump @54 if a1 == 0
      :                          @44
   544: 95 b7 40                 a0 = a4 + 0x40
   547: 7d 7a                    a3 = i8 [a0]
   549: 33 09 01                 a2 = 0x1
   552: 5a 0a 6b                 jump @53 if a3 >s 0
      :                          @45
   555: 84 aa ff 00              a3 = a3 & 0xff
   559: 83 a9 ff                 i32 a2 = a3 + 0xffffffffffffffff
   562: 84 9b ff 00              a4 = a2 & 0xff
   566: 33 0c bf 00              a5 = 0xbf
   570: 33 09 02                 a2 = 0x2
   573: ac cb 53                 jump @52 if a4 <u a5
      :                          @46
   576: 84 ab e0 00              a4 = a3 & 0xe0
   580: 33 0c c0 00              a5 = 0xc0
   584: 33 09 03                 a2 = 0x3
   587: aa cb 45                 jump @52 if a4 == a5
      :                          @47
   590: 84 ab f0 00              a4 = a3 & 0xf0
   594: 33 0c e0 00              a5 = 0xe0
   598: 33 09 04                 a2 = 0x4
   601: aa cb 37                 jump @52 if a4 == a5
      :                          @48
   604: 84 ab f8 00              a4 = a3 & 0xf8
   608: 33 0c f0 00              a5 = 0xf0
   612: 33 09 05                 a2 = 0x5
   615: aa cb 29                 jump @52 if a4 == a5
      :                          @49
   618: 84 ab fc 00              a4 = a3 & 0xfc
   622: 33 0c f8 00              a5 = 0xf8
   626: 33 09 06                 a2 = 0x6
   629: aa cb 1b                 jump @52 if a4 == a5
      :                          @50
   632: 84 ab fe 00              a4 = a3 & 0xfe
   636: 33 0c fc 00              a5 = 0xfc
   640: 33 09 07                 a2 = 0x7
   643: aa cb 0d                 jump @52 if a4 == a5
      :                          @51
   646: 33 0b fe 00              a4 = 0xfe
   650: 33 09 08                 a2 = 0x8
   653: ac ba 0d                 jump @54 if a3 <u a4
      :                          @52
   656: ac 98 4e                 jump @61 if a1 <u a2
      :                          @53
   659: 64 98                    a1 = a2
   661: 50 10 06 00 01           ra = 6, jump @81
      :                          @54 [@dyn 3]
   666: 46 11 0f                 u8 [sp + 15] = 0
   669: 95 17 0f                 a0 = sp + 0xf
   672: 33 08 01                 a1 = 0x1
   675: 64 69                    a2 = s1
   677: 64 5a                    a3 = s0
   679: 0a 03                    ecalli 3 // 'write'
   681: 01                       fallthrough
      :                          @55
   682: 49 11 28                 u64 [sp + 40] = 0
   685: 49 11 20                 u64 [sp + 32] = 0
   688: 49 11 18                 u64 [sp + 24] = 0
   691: 49 11 10                 u64 [sp + 16] = 0
   694: 55 15 21 26              jump @59 if s0 >=u 33
      :                          @56
   698: 95 17 10                 a0 = sp + 0x10
   701: 64 68                    a1 = s1
   703: 64 59                    a2 = s0
   705: 50 10 08 22              ra = 8, jump @63
      :                          @57 [@dyn 4]
   709: 95 1a 10                 a3 = sp + 0x10
   712: 33 08 20                 a1 = 0x20
   715: 01                       fallthrough
      :                          @58
   716: 64 a7                    a0 = a3
   718: 82 10 40                 ra = u64 [sp + 0x40]
   721: 82 15 38                 s0 = u64 [sp + 0x38]
   724: 82 16 30                 s1 = u64 [sp + 0x30]
   727: 95 11 48                 sp = sp + 0x48
   730: 32 00                    ret
      :                          @59
   732: 00                       trap
      :                          @60
   733: 00                       trap
      :                          @61
   734: 00                       trap
      :                          @62 [export #2: 'on_transfer']
   735: 33 07                    a0 = 0
   737: 32 00                    ret
      :                          @63
   739: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   742: 7b 10 18                 u64 [sp + 0x18] = ra
   745: 7b 15 10                 u64 [sp + 0x10] = s0
   748: 7b 16 08                 u64 [sp + 0x8] = s1
   751: 53 19 10 64              jump @72 if a2 <u 16
      :                          @64
   755: 8d 7a                    i32 a3 = -a0
   757: 84 a2 07                 t0 = a3 & 0x7
   760: c8 27 0b                 a4 = a0 + t0
   763: 51 02 15                 jump @67 if t0 == 0
      :                          @65
   766: 64 8c                    a5 = a1
   768: 64 75                    s0 = a0
   770: 01                       fallthrough
      :                          @66
   771: 7c ca                    a3 = u8 [a5]
   773: 78 5a                    u8 [s0] = a3
   775: 95 55 01                 s0 = s0 + 0x1
   778: 95 cc 01                 a5 = a5 + 0x1
   781: ac b5 f6                 jump @66 if s0 <u a4
      :                          @67
   784: c8 28 03                 t1 = a1 + t0
   787: c9 29 02                 t0 = a2 - t0
   790: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
   793: 84 38 07                 a1 = t1 & 0x7
   796: c8 4b 0a                 a3 = a4 + t2
   799: 51 08 3b                 jump @74 if a1 == 0
      :                          @68
   802: 58 04 4b                 jump @77 if t2 <=s 0
      :                          @69
   805: 97 38 03                 a1 = t1 << 0x3
   808: 84 80 38                 ra = a1 & 0x38
   811: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
   814: 82 c5                    s0 = u64 [a5]
   816: 8d 88                    i32 a1 = -a1
   818: 84 88 38                 a1 = a1 & 0x38
   821: 95 cc 08                 a5 = a5 + 0x8
   824: 01                       fallthrough
      :                          @70
   825: 82 c6                    s1 = u64 [a5]
   827: d0 05 05                 s0 = s0 >> ra
   830: cf 86 09                 a2 = s1 << a1
   833: d4 59 09                 a2 = a2 | s0
   836: 7b b9                    u64 [a4] = a2
   838: 95 bb 08                 a4 = a4 + 0x8
   841: 95 cc 08                 a5 = a5 + 0x8
   844: 64 65                    s0 = s1
   846: ac ab eb                 jump @70 if a4 <u a3
      :                          @71
   849: 28 1c                    jump @77
      :                          @72
   851: 64 7a                    a3 = a0
   853: 52 09 21                 jump @78 if a2 != 0
      :                          @73
   856: 28 2f                    jump @80
      :                          @74
   858: 58 04 13                 jump @77 if t2 <=s 0
      :                          @75
   861: 64 38                    a1 = t1
   863: 01                       fallthrough
      :                          @76
   864: 82 89                    a2 = u64 [a1]
   866: 7b b9                    u64 [a4] = a2
   868: 95 bb 08                 a4 = a4 + 0x8
   871: 95 88 08                 a1 = a1 + 0x8
   874: ac ab f6                 jump @76 if a4 <u a3
      :                          @77
   877: c8 43 08                 a1 = t1 + t2
   880: 84 29 07                 a2 = t0 & 0x7
   883: 51 09 14                 jump @80 if a2 == 0
      :                          @78
   886: c8 a9 09                 a2 = a2 + a3
   889: 01                       fallthrough
      :                          @79
   890: 7c 8b                    a4 = u8 [a1]
   892: 78 ab                    u8 [a3] = a4
   894: 95 aa 01                 a3 = a3 + 0x1
   897: 95 88 01                 a1 = a1 + 0x1
   900: ac 9a f6                 jump @79 if a3 <u a2
      :                          @80
   903: 82 10 18                 ra = u64 [sp + 0x18]
   906: 82 15 10                 s0 = u64 [sp + 0x10]
   909: 82 16 08                 s1 = u64 [sp + 0x8]
   912: 95 11 20                 sp = sp + 0x20
   915: 32 00                    ret
      :                          @81
   917: 51 08 9b 00              jump @102 if a1 == 0
      :                          @82
   921: 64 79                    a2 = a0
   923: 7c 77                    a0 = u8 [a0]
   925: 51 07 91 00              jump @101 if a0 == 0
      :                          @83
   929: 51 27 ff 00 90 00        jump @103 if a0 == 255
      :                          @84
   935: 6c 7a                    a3 = sext.b a0
   937: 57 0a 09                 jump @86 if a3 <s 0
      :                          @85
   940: 33 0a                    a3 = 0
   942: 33 08                    a1 = 0
   944: 28 73                    jump @100
      :                          @86
   946: 55 27 c0 00 0d           jump @88 if a0 >=u 192
      :                          @87
   951: 33 0a 01                 a3 = 0x1
   954: 33 0b 80                 a4 = 0xffffffffffffff80
   957: 28 4a                    jump @97
      :                          @88
   959: 55 27 e0 00 0e           jump @90 if a0 >=u 224
      :                          @89
   964: 33 0a 02                 a3 = 0x2
   967: 33 0b 40 ff              a4 = 0xffffffffffffff40
   971: 28 3c                    jump @97
      :                          @90
   973: 55 27 f0 00 0e           jump @92 if a0 >=u 240
      :                          @91
   978: 33 0a 03                 a3 = 0x3
   981: 33 0b 20 ff              a4 = 0xffffffffffffff20
   985: 28 2e                    jump @97
      :                          @92
   987: 55 27 f8 00 0e           jump @94 if a0 >=u 248
      :                          @93
   992: 33 0a 04                 a3 = 0x4
   995: 33 0b 10 ff              a4 = 0xffffffffffffff10
   999: 28 20                    jump @97
      :                          @94
  1001: 55 27 fc 00 0e           jump @96 if a0 >=u 252
      :                          @95
  1006: 33 0a 05                 a3 = 0x5
  1009: 33 0b 08 ff              a4 = 0xffffffffffffff08
  1013: 28 12                    jump @97
      :                          @96
  1015: 88 7a fe 00              a3 = a0 <u 0xfe
  1019: 33 0b 04 ff              a4 = 0xffffffffffffff04
  1023: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  1027: 85 aa 07                 a3 = a3 ^ 0x7
  1030: 01                       fallthrough
      :                          @97
  1031: ae 8a 2b                 jump @104 if a3 >=u a1
      :                          @98
  1034: 33 08                    a1 = 0
  1036: c8 b7 07                 a0 = a0 + a4
  1039: 64 ab                    a4 = a3
  1041: 01                       fallthrough
      :                          @99
  1042: c8 b9 0c                 a5 = a2 + a4
  1045: 7c cc                    a5 = u8 [a5]
  1047: 97 88 08                 a1 = a1 << 0x8
  1050: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  1053: d4 c8 08                 a1 = a1 | a5
  1056: 52 0b f2                 jump @99 if a4 != 0
      :                          @100
  1059: 8a a9 03                 i32 a2 = a3 << 0x3
  1062: cf 97 07                 a0 = a0 << a2
  1065: c8 87 07                 a0 = a0 + a1
  1068: 32 00                    ret
      :                          @101
  1070: 32 00                    ret
      :                          @102
  1072: 00                       trap
      :                          @103
  1073: 00                       trap
      :                          @104
  1074: 00                       trap
