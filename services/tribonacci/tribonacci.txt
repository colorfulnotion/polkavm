// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 2 bytes
// RO data = []
// RW data = []
// Instructions = 354
// Code size = 1026 bytes

      :                          @0
     0: 28 ab 00 00 00           jump @27
      :                          @1
     5: 28 3d 01 00 00           jump @37
      :                          @2
    10: 28 42 03                 jump @87
      :                          @3
    13: 51 08 9b 00              jump @24 if a1 == 0
      :                          @4
    17: 64 79                    a2 = a0
    19: 7c 77                    a0 = u8 [a0]
    21: 51 07 91 00              jump @23 if a0 == 0
      :                          @5
    25: 51 27 ff 00 90 00        jump @25 if a0 == 255
      :                          @6
    31: 6c 7a                    a3 = sext.b a0
    33: 57 0a 09                 jump @8 if a3 <s 0
      :                          @7
    36: 33 0a                    a3 = 0
    38: 33 08                    a1 = 0
    40: 28 73                    jump @22
      :                          @8
    42: 55 27 c0 00 0d           jump @10 if a0 >=u 192
      :                          @9
    47: 33 0a 01                 a3 = 0x1
    50: 33 0b 80                 a4 = 0xffffffffffffff80
    53: 28 4a                    jump @19
      :                          @10
    55: 55 27 e0 00 0e           jump @12 if a0 >=u 224
      :                          @11
    60: 33 0a 02                 a3 = 0x2
    63: 33 0b 40 ff              a4 = 0xffffffffffffff40
    67: 28 3c                    jump @19
      :                          @12
    69: 55 27 f0 00 0e           jump @14 if a0 >=u 240
      :                          @13
    74: 33 0a 03                 a3 = 0x3
    77: 33 0b 20 ff              a4 = 0xffffffffffffff20
    81: 28 2e                    jump @19
      :                          @14
    83: 55 27 f8 00 0e           jump @16 if a0 >=u 248
      :                          @15
    88: 33 0a 04                 a3 = 0x4
    91: 33 0b 10 ff              a4 = 0xffffffffffffff10
    95: 28 20                    jump @19
      :                          @16
    97: 55 27 fc 00 0e           jump @18 if a0 >=u 252
      :                          @17
   102: 33 0a 05                 a3 = 0x5
   105: 33 0b 08 ff              a4 = 0xffffffffffffff08
   109: 28 12                    jump @19
      :                          @18
   111: 88 7a fe 00              a3 = a0 <u 0xfe
   115: 33 0b 04 ff              a4 = 0xffffffffffffff04
   119: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
   123: 85 aa 07                 a3 = a3 ^ 0x7
   126: 01                       fallthrough
      :                          @19
   127: ae 8a 2b                 jump @26 if a3 >=u a1
      :                          @20
   130: 33 08                    a1 = 0
   132: c8 b7 07                 a0 = a0 + a4
   135: 64 ab                    a4 = a3
   137: 01                       fallthrough
      :                          @21
   138: c8 b9 0c                 a5 = a2 + a4
   141: 7c cc                    a5 = u8 [a5]
   143: 97 88 08                 a1 = a1 << 0x8
   146: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
   149: d4 c8 08                 a1 = a1 | a5
   152: 52 0b f2                 jump @21 if a4 != 0
      :                          @22
   155: 8a a9 03                 i32 a2 = a3 << 0x3
   158: cf 97 07                 a0 = a0 << a2
   161: c8 87 07                 a0 = a0 + a1
   164: 32 00                    ret
      :                          @23
   166: 32 00                    ret
      :                          @24
   168: 00                       trap
      :                          @25
   169: 00                       trap
      :                          @26
   170: 00                       trap
      :                          @27 [export #0: 'refine']
   171: 95 11 d0                 sp = sp + 0xffffffffffffffd0
   174: 7b 10 28                 u64 [sp + 0x28] = ra
   177: 7b 15 20                 u64 [sp + 0x20] = s0
   180: 7b 16 18                 u64 [sp + 0x18] = s1
   183: 48 11 10                 u32 [sp + 16] = 0
   186: 49 11 08                 u64 [sp + 8] = 0
   189: 49 01                    u64 [sp + 0] = 0
   191: 64 17                    a0 = sp
   193: 33 09 14                 a2 = 0x14
   196: 33 0a 05                 a3 = 0x5
   199: 33 08                    a1 = 0
   201: 33 0b                    a4 = 0
   203: 33 0c                    a5 = 0
   205: 0a 12                    ecalli 18 // 'fetch'
   207: 01                       fallthrough
      :                          @28
   208: 51 17 ff 1a              jump @30 if a0 == 4294967295
      :                          @29
   212: 81 17 04                 a0 = i32 [sp + 0x4]
   215: 81 18 08                 a1 = i32 [sp + 0x8]
   218: 81 19 0c                 a2 = i32 [sp + 0xc]
   221: 81 15                    s0 = i32 [sp]
   223: c8 78 0a                 a3 = a1 + a0
   226: be a9 09                 i32 a2 = a2 + a3
   229: 83 5a 01                 i32 a3 = s0 + 0x1
   232: 28 0f                    jump @31
      :                          @30
   234: 33 07                    a0 = 0
   236: 33 08                    a1 = 0
   238: 33 05                    s0 = 0
   240: 33 0a 01                 a3 = 0x1
   243: 33 09 01                 a2 = 0x1
   246: 01                       fallthrough
      :                          @31
   247: 7a 1a                    u32 [sp] = a3
   249: 7a 19 04                 u32 [sp + 0x4] = a2
   252: 7a 17 08                 u32 [sp + 0x8] = a0
   255: 7a 18 0c                 u32 [sp + 0xc] = a1
   258: 64 17                    a0 = sp
   260: 33 08 14                 a1 = 0x14
   263: 0a 13                    ecalli 19 // 'export'
   265: 64 17                    a0 = sp
   267: 33 08 14                 a1 = 0x14
   270: 0a 13                    ecalli 19 // 'export'
   272: 01                       fallthrough
      :                          @32
   273: 51 05 1e                 jump @36 if s0 == 0
      :                          @33
   276: 8d 55                    i32 s0 = -s0
   278: 33 06 01                 s1 = 0x1
   281: 01                       fallthrough
      :                          @34
   282: 7a 16 10                 u32 [sp + 0x10] = s1
   285: 64 17                    a0 = sp
   287: 33 08 14                 a1 = 0x14
   290: 0a 13                    ecalli 19 // 'export'
   292: 01                       fallthrough
      :                          @35
   293: 83 66 01                 i32 s1 = s1 + 0x1
   296: be 65 07                 i32 a0 = s0 + s1
   299: 52 17 01 ef              jump @34 if a0 != 1
      :                          @36
   303: 33 08 14                 a1 = 0x14
   306: 64 17                    a0 = sp
   308: 82 10 28                 ra = u64 [sp + 0x28]
   311: 82 15 20                 s0 = u64 [sp + 0x20]
   314: 82 16 18                 s1 = u64 [sp + 0x18]
   317: 95 11 30                 sp = sp + 0x30
   320: 32 00                    ret
      :                          @37 [export #1: 'accumulate']
   322: 95 11 b8                 sp = sp + 0xffffffffffffffb8
   325: 7b 10 40                 u64 [sp + 0x40] = ra
   328: 7b 15 38                 u64 [sp + 0x38] = s0
   331: 7b 16 30                 u64 [sp + 0x30] = s1
   334: 64 85                    s0 = a1
   336: 95 55 f8                 s0 = s0 + 0xfffffffffffffff8
   339: 51 05 f5 01              jump @83 if s0 == 0
      :                          @38
   343: 95 77 08                 a0 = a0 + 0x8
   346: 7d 78                    a1 = i8 [a0]
   348: 33 06 01                 s1 = 0x1
   351: 5a 08 5d                 jump @46 if a1 >s 0
      :                          @39
   354: 84 8a ff 00              a3 = a1 & 0xff
   358: 83 a8 ff                 i32 a1 = a3 + 0xffffffffffffffff
   361: 84 88 ff 00              a1 = a1 & 0xff
   365: 33 06 02                 s1 = 0x2
   368: 53 28 bf 00 4c           jump @46 if a1 <u 191
      :                          @40
   373: 84 a8 e0 00              a1 = a3 & 0xe0
   377: 33 06 03                 s1 = 0x3
   380: 51 28 c0 00 40           jump @46 if a1 == 192
      :                          @41
   385: 84 a8 f0 00              a1 = a3 & 0xf0
   389: 33 06 04                 s1 = 0x4
   392: 51 28 e0 00 34           jump @46 if a1 == 224
      :                          @42
   397: 84 a8 f8 00              a1 = a3 & 0xf8
   401: 33 06 05                 s1 = 0x5
   404: 51 28 f0 00 28           jump @46 if a1 == 240
      :                          @43
   409: 84 a8 fc 00              a1 = a3 & 0xfc
   413: 33 06 06                 s1 = 0x6
   416: 51 28 f8 00 1c           jump @46 if a1 == 248
      :                          @44
   421: 84 a8 fe 00              a1 = a3 & 0xfe
   425: 33 06 07                 s1 = 0x7
   428: 51 28 fc 00 10           jump @46 if a1 == 252
      :                          @45
   433: 88 a8 fe 00              a1 = a3 <u 0xfe
   437: 85 86 01                 s1 = a1 ^ 0x1
   440: 97 66 03                 s1 = s1 << 0x3
   443: 01                       fallthrough
      :                          @46
   444: 7b 15                    u64 [sp] = s0
   446: ac 65 89 01              jump @82 if s0 <u s1
      :                          @47
   450: 64 75                    s0 = a0
   452: 64 68                    a1 = s1
   454: 50 10 02 47 fe           ra = 2, jump @3
      :                          @48 [@dyn 1]
   459: 51 07 28                 jump @53 if a0 == 0
      :                          @49
   462: 82 1a                    a3 = u64 [sp]
   464: aa 6a 7a 01              jump @85 if a3 == s1
      :                          @50
   468: c8 56 07                 a0 = s1 + s0
   471: 7c 78                    a1 = u8 [a0]
   473: 95 7b 01                 a4 = a0 + 0x1
   476: 85 67 ff                 a0 = s1 ^ 0xffffffffffffffff
   479: c8 7a 0a                 a3 = a3 + a0
   482: 51 08 18                 jump @54 if a1 == 0
      :                          @51
   485: 33 05                    s0 = 0
   487: 33 06                    s1 = 0
   489: 95 a8 c0                 a1 = a3 + 0xffffffffffffffc0
   492: 52 08 a2 00              jump @68 if a1 != 0
      :                          @52
   496: 28 18 01                 jump @78
      :                          @53
   499: 33 05                    s0 = 0
   501: 33 06                    s1 = 0
   503: 28 11 01                 jump @78
      :                          @54
   506: 51 0a 7d                 jump @66 if a3 == 0
      :                          @55
   509: 7d b7                    a0 = i8 [a4]
   511: 33 06 01                 s1 = 0x1
   514: 5a 07 5a                 jump @63 if a0 >s 0
      :                          @56
   517: 84 77 ff 00              a0 = a0 & 0xff
   521: 83 78 ff                 i32 a1 = a0 + 0xffffffffffffffff
   524: 84 8c ff 00              a5 = a1 & 0xff
   528: 33 06 02                 s1 = 0x2
   531: 53 2c bf 00 49           jump @63 if a5 <u 191
      :                          @57
   536: 84 7c e0 00              a5 = a0 & 0xe0
   540: 33 06 03                 s1 = 0x3
   543: 51 2c c0 00 3d           jump @63 if a5 == 192
      :                          @58
   548: 84 7c f0 00              a5 = a0 & 0xf0
   552: 33 06 04                 s1 = 0x4
   555: 51 2c e0 00 31           jump @63 if a5 == 224
      :                          @59
   560: 84 7c f8 00              a5 = a0 & 0xf8
   564: 33 06 05                 s1 = 0x5
   567: 51 2c f0 00 25           jump @63 if a5 == 240
      :                          @60
   572: 84 7c fc 00              a5 = a0 & 0xfc
   576: 33 06 06                 s1 = 0x6
   579: 51 2c f8 00 19           jump @63 if a5 == 248
      :                          @61
   584: 84 7c fe 00              a5 = a0 & 0xfe
   588: 33 06 07                 s1 = 0x7
   591: 51 2c fc 00 0d           jump @63 if a5 == 252
      :                          @62
   596: 33 06 08                 s1 = 0x8
   599: 53 27 fe 00 20           jump @66 if a0 <u 254
      :                          @63
   604: 7b 1a                    u64 [sp] = a3
   606: ac 6a e9 00              jump @82 if a3 <u s1
      :                          @64
   610: 64 b7                    a0 = a4
   612: 64 68                    a1 = s1
   614: 64 b5                    s0 = a4
   616: 50 10 04 a5 fd           ra = 4, jump @3
      :                          @65 [@dyn 2]
   621: 64 68                    a1 = s1
   623: 64 5b                    a4 = s0
   625: 64 75                    s0 = a0
   627: 82 1a                    a3 = u64 [sp]
   629: 28 07                    jump @67
      :                          @66
   631: 33 08                    a1 = 0
   633: 33 05                    s0 = 0
   635: 01                       fallthrough
      :                          @67
   636: c8 8b 06                 s1 = a4 + a1
   639: c8 56 0b                 a4 = s1 + s0
   642: c8 85 07                 a0 = s0 + a1
   645: c9 7a 0a                 a3 = a3 - a0
   648: 95 a8 c0                 a1 = a3 + 0xffffffffffffffc0
   651: 51 08 7d                 jump @78 if a1 == 0
      :                          @68
   654: 95 b7 40                 a0 = a4 + 0x40
   657: 7d 7a                    a3 = i8 [a0]
   659: 33 09 01                 a2 = 0x1
   662: 5a 0a 6b                 jump @77 if a3 >s 0
      :                          @69
   665: 84 aa ff 00              a3 = a3 & 0xff
   669: 83 a9 ff                 i32 a2 = a3 + 0xffffffffffffffff
   672: 84 9b ff 00              a4 = a2 & 0xff
   676: 33 0c bf 00              a5 = 0xbf
   680: 33 09 02                 a2 = 0x2
   683: ac cb 53                 jump @76 if a4 <u a5
      :                          @70
   686: 84 ab e0 00              a4 = a3 & 0xe0
   690: 33 0c c0 00              a5 = 0xc0
   694: 33 09 03                 a2 = 0x3
   697: aa cb 45                 jump @76 if a4 == a5
      :                          @71
   700: 84 ab f0 00              a4 = a3 & 0xf0
   704: 33 0c e0 00              a5 = 0xe0
   708: 33 09 04                 a2 = 0x4
   711: aa cb 37                 jump @76 if a4 == a5
      :                          @72
   714: 84 ab f8 00              a4 = a3 & 0xf8
   718: 33 0c f0 00              a5 = 0xf0
   722: 33 09 05                 a2 = 0x5
   725: aa cb 29                 jump @76 if a4 == a5
      :                          @73
   728: 84 ab fc 00              a4 = a3 & 0xfc
   732: 33 0c f8 00              a5 = 0xf8
   736: 33 09 06                 a2 = 0x6
   739: aa cb 1b                 jump @76 if a4 == a5
      :                          @74
   742: 84 ab fe 00              a4 = a3 & 0xfe
   746: 33 0c fc 00              a5 = 0xfc
   750: 33 09 07                 a2 = 0x7
   753: aa cb 0d                 jump @76 if a4 == a5
      :                          @75
   756: 33 0b fe 00              a4 = 0xfe
   760: 33 09 08                 a2 = 0x8
   763: ac ba 0d                 jump @78 if a3 <u a4
      :                          @76
   766: ac 98 4d                 jump @86 if a1 <u a2
      :                          @77
   769: 64 98                    a1 = a2
   771: 50 10 06 0a fd           ra = 6, jump @3
      :                          @78 [@dyn 3]
   776: 46 11 0f                 u8 [sp + 15] = 0
   779: 95 17 0f                 a0 = sp + 0xf
   782: 33 08 01                 a1 = 0x1
   785: 64 69                    a2 = s1
   787: 64 5a                    a3 = s0
   789: 0a 03                    ecalli 3 // 'write'
   791: 01                       fallthrough
      :                          @79
   792: 49 11 28                 u64 [sp + 40] = 0
   795: 49 11 20                 u64 [sp + 32] = 0
   798: 49 11 18                 u64 [sp + 24] = 0
   801: 49 11 10                 u64 [sp + 16] = 0
   804: 55 15 21 25              jump @84 if s0 >=u 33
      :                          @80
   808: 95 17 10                 a0 = sp + 0x10
   811: 64 68                    a1 = s1
   813: 64 59                    a2 = s0
   815: 50 10 08 21              ra = 8, jump @88
      :                          @81 [@dyn 4]
   819: 33 08 20                 a1 = 0x20
   822: 95 17 10                 a0 = sp + 0x10
   825: 82 10 40                 ra = u64 [sp + 0x40]
   828: 82 15 38                 s0 = u64 [sp + 0x38]
   831: 82 16 30                 s1 = u64 [sp + 0x30]
   834: 95 11 48                 sp = sp + 0x48
   837: 32 00                    ret
      :                          @82
   839: 00                       trap
      :                          @83
   840: 00                       trap
      :                          @84
   841: 00                       trap
      :                          @85
   842: 00                       trap
      :                          @86
   843: 00                       trap
      :                          @87 [export #2: 'on_transfer']
   844: 33 07                    a0 = 0
   846: 32 00                    ret
      :                          @88
   848: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   851: 7b 10 18                 u64 [sp + 0x18] = ra
   854: 7b 15 10                 u64 [sp + 0x10] = s0
   857: 7b 16 08                 u64 [sp + 0x8] = s1
   860: 53 19 10 64              jump @97 if a2 <u 16
      :                          @89
   864: 8d 7a                    i32 a3 = -a0
   866: 84 a2 07                 t0 = a3 & 0x7
   869: c8 27 0b                 a4 = a0 + t0
   872: 51 02 15                 jump @92 if t0 == 0
      :                          @90
   875: 64 8c                    a5 = a1
   877: 64 75                    s0 = a0
   879: 01                       fallthrough
      :                          @91
   880: 7c ca                    a3 = u8 [a5]
   882: 78 5a                    u8 [s0] = a3
   884: 95 55 01                 s0 = s0 + 0x1
   887: 95 cc 01                 a5 = a5 + 0x1
   890: ac b5 f6                 jump @91 if s0 <u a4
      :                          @92
   893: c8 28 03                 t1 = a1 + t0
   896: c9 29 02                 t0 = a2 - t0
   899: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
   902: 84 38 07                 a1 = t1 & 0x7
   905: c8 4b 0a                 a3 = a4 + t2
   908: 51 08 3b                 jump @99 if a1 == 0
      :                          @93
   911: 58 04 4b                 jump @102 if t2 <=s 0
      :                          @94
   914: 97 38 03                 a1 = t1 << 0x3
   917: 84 80 38                 ra = a1 & 0x38
   920: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
   923: 82 c5                    s0 = u64 [a5]
   925: 8d 88                    i32 a1 = -a1
   927: 84 88 38                 a1 = a1 & 0x38
   930: 95 cc 08                 a5 = a5 + 0x8
   933: 01                       fallthrough
      :                          @95
   934: 82 c6                    s1 = u64 [a5]
   936: d0 05 05                 s0 = s0 >> ra
   939: cf 86 09                 a2 = s1 << a1
   942: d4 59 09                 a2 = a2 | s0
   945: 7b b9                    u64 [a4] = a2
   947: 95 bb 08                 a4 = a4 + 0x8
   950: 95 cc 08                 a5 = a5 + 0x8
   953: 64 65                    s0 = s1
   955: ac ab eb                 jump @95 if a4 <u a3
      :                          @96
   958: 28 1c                    jump @102
      :                          @97
   960: 64 7a                    a3 = a0
   962: 52 09 21                 jump @103 if a2 != 0
      :                          @98
   965: 28 2f                    jump @105
      :                          @99
   967: 58 04 13                 jump @102 if t2 <=s 0
      :                          @100
   970: 64 38                    a1 = t1
   972: 01                       fallthrough
      :                          @101
   973: 82 89                    a2 = u64 [a1]
   975: 7b b9                    u64 [a4] = a2
   977: 95 bb 08                 a4 = a4 + 0x8
   980: 95 88 08                 a1 = a1 + 0x8
   983: ac ab f6                 jump @101 if a4 <u a3
      :                          @102
   986: c8 43 08                 a1 = t1 + t2
   989: 84 29 07                 a2 = t0 & 0x7
   992: 51 09 14                 jump @105 if a2 == 0
      :                          @103
   995: c8 a9 09                 a2 = a2 + a3
   998: 01                       fallthrough
      :                          @104
   999: 7c 8b                    a4 = u8 [a1]
  1001: 78 ab                    u8 [a3] = a4
  1003: 95 aa 01                 a3 = a3 + 0x1
  1006: 95 88 01                 a1 = a1 + 0x1
  1009: ac 9a f6                 jump @104 if a3 <u a2
      :                          @105
  1012: 82 10 18                 ra = u64 [sp + 0x18]
  1015: 82 15 10                 s0 = u64 [sp + 0x10]
  1018: 82 16 08                 s1 = u64 [sp + 0x8]
  1021: 95 11 20                 sp = sp + 0x20
  1024: 32 00                    ret
