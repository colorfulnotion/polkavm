// RO data = 572/572 bytes
// RW data = 24/136982576 bytes
// Stack size = 1048576 bytes
// RO data = [64, 37, 35, 42, 43, 61, 45, 32, 46, 32, 114, 101, 102, 105, 110, 101, 58, 32, 115, 116, 97, 114, 116, 95, 97, 100, 100, 114, 101, 115, 115, 58, 32, 44, 32, 108, 101, 110, 103, 116, 104, 58, 32, 0, 0, 0, 0, 0, 10, 0, 1, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 33, 0, 1, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 102, 101, 116, 99, 104, 95, 114, 101, 115, 117, 108, 116, 58, 32, 44, 32, 102, 105, 114, 115, 116, 32, 98, 121, 116, 101, 115, 58, 32, 0, 0, 0, 80, 0, 1, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 94, 0, 1, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 114, 101, 102, 105, 110, 101, 58, 32, 65, 83, 67, 73, 73, 32, 97, 114, 116, 32, 103, 101, 110, 101, 114, 97, 116, 101, 100, 44, 32, 108, 101, 110, 103, 116, 104, 58, 32, 44, 32, 101, 120, 112, 101, 99, 116, 101, 100, 58, 32, 0, 0, 0, 0, 0, 0, 0, 144, 0, 1, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 181, 0, 1, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 114, 101, 102, 105, 110, 101, 58, 32, 102, 101, 116, 99, 104, 32, 102, 97, 105, 108, 101, 100, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 130, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 44, 32, 44, 10, 10, 93, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57]
// RW data = [143, 227, 56, 142, 227, 56, 142, 3, 75, 89, 134, 56, 214, 197, 109, 52, 128, 128, 128, 128, 128, 128, 128, 128]
// Instructions = 2282
// Code size = 6745 bytes

      :                          @0
     0: 28 12 05 00 00           jump @101
      :                          @1
     5: 28 33 0c 00 00           jump @222
      :                          @2
    10: 28 37 0c                 jump @223
      :                          @3
    13: 95 11 78 ff              sp = sp + 0xffffffffffffff78
    17: 7b 10 80 00              u64 [sp + 0x80] = ra
    21: 64 82                    t0 = a1
    23: 80 88 34                 a1 = u32 [a1 + 0x34]
    26: 84 89 10                 a2 = a1 & 0x10
    29: 52 09 1b                 jump @6 if a2 != 0
      :                          @4
    32: 84 88 20                 a1 = a1 & 0x20
    35: 52 08 46                 jump @9 if a1 != 0
      :                          @5
    38: 7c 77                    a0 = u8 [a0]
    40: 33 08 01                 a1 = 0x1
    43: 64 29                    a2 = t0
    45: 82 10 80 00              ra = u64 [sp + 0x80]
    49: 95 11 88 00              sp = sp + 0x88
    53: 28 90 11                 jump @351
      :                          @6
    56: 7c 77                    a0 = u8 [a0]
    58: 33 0a 81 00              a3 = 0x81
    62: 95 18 7f                 a1 = sp + 0x7f
    65: 33 03 57                 t1 = 0x57
    68: 01                       fallthrough
      :                          @7
    69: 64 ab                    a4 = a3
    71: 84 7a 0f                 a3 = a0 & 0xf
    74: 97 77 38                 a0 = a0 << 0x38
    77: 98 77 3c                 a0 = a0 >> 0x3c
    80: 88 ac 0a                 a5 = a3 <u 0xa
    83: 33 09 30                 a2 = 0x30
    86: da c3 09                 a2 = t1 if a5 == 0
    89: be a9 09                 i32 a2 = a2 + a3
    92: 78 89                    u8 [a1] = a2
    94: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
    97: 95 ba ff                 a3 = a4 + 0xffffffffffffffff
   100: 52 07 e1                 jump @7 if a0 != 0
      :                          @8
   103: 28 31                    jump @11
      :                          @9
   105: 7c 77                    a0 = u8 [a0]
   107: 33 0a 81 00              a3 = 0x81
   111: 95 18 7f                 a1 = sp + 0x7f
   114: 33 03 37                 t1 = 0x37
   117: 01                       fallthrough
      :                          @10
   118: 64 ab                    a4 = a3
   120: 84 7a 0f                 a3 = a0 & 0xf
   123: 97 77 38                 a0 = a0 << 0x38
   126: 98 77 3c                 a0 = a0 >> 0x3c
   129: 88 ac 0a                 a5 = a3 <u 0xa
   132: 33 09 30                 a2 = 0x30
   135: da c3 09                 a2 = t1 if a5 == 0
   138: be a9 09                 i32 a2 = a2 + a3
   141: 78 89                    u8 [a1] = a2
   143: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
   146: 95 ba ff                 a3 = a4 + 0xffffffffffffffff
   149: 52 07 e1                 jump @10 if a0 != 0
      :                          @11
   152: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
   155: 56 27 80 00 2a           jump @14 if a0 >u 128
      :                          @12
   160: 9a ac 81 00              a5 = 0x81 - a3
   164: 64 1b                    a4 = sp
   166: c8 7b 0b                 a4 = a4 + a0
   169: 33 09 72 01 01           a2 = 0x10172
   174: 33 08 01                 a1 = 0x1
   177: 33 0a 02                 a3 = 0x2
   180: 64 27                    a0 = t0
   182: 50 10 02 3c 12           ra = 2, jump @361
      :                          @13 [@dyn 1]
   187: 82 10 80 00              ra = u64 [sp + 0x80]
   191: 95 11 88 00              sp = sp + 0x88
   195: 32 00                    ret
      :                          @14
   197: 00                       trap
      :                          @15 [@dyn 2]
   198: 95 11 60 ff              sp = sp + 0xffffffffffffff60
   202: 7b 10 98 00              u64 [sp + 0x98] = ra
   206: 7b 15 90 00              u64 [sp + 0x90] = s0
   210: 7b 16 88 00              u64 [sp + 0x88] = s1
   214: 82 89 28                 a2 = u64 [a1 + 0x28]
   217: 82 7a                    a3 = u64 [a0]
   219: 7b 1a 18                 u64 [sp + 0x18] = a3
   222: 82 76 08                 s1 = u64 [a0 + 0x8]
   225: 7b 18 20                 u64 [sp + 0x20] = a1
   228: 82 87 20                 a0 = u64 [a1 + 0x20]
   231: 82 9a 18                 a3 = u64 [a2 + 0x18]
   234: 33 08 30 01 01           a1 = 0x10130
   239: 33 09 01                 a2 = 0x1
   242: 33 05 01                 s0 = 0x1
   245: b4 a0 01 06              ra = 6, jump [a3]
      :                          @16 [@dyn 3]
   249: 51 06 1e                 jump @21 if s1 == 0
      :                          @17
   252: 52 07 be 00              jump @28 if a0 != 0
      :                          @18
   256: 82 18 20                 a1 = u64 [sp + 0x20]
   259: 80 89 34                 a2 = u32 [a1 + 0x34]
   262: 84 97 04                 a0 = a2 & 0x4
   265: 52 07 16                 jump @22 if a0 != 0
      :                          @19
   268: 82 17 18                 a0 = u64 [sp + 0x18]
   271: 50 10 08 fe fe           ra = 8, jump @3
      :                          @20 [@dyn 4]
   276: 28 a3 00                 jump @27
      :                          @21
   279: 64 79                    a2 = a0
   281: 82 18 20                 a1 = u64 [sp + 0x20]
   284: 28 84 01                 jump @42
      :                          @22
   287: 7b 19 10                 u64 [sp + 0x10] = a2
   290: 82 89 28                 a2 = u64 [a1 + 0x28]
   293: 82 87 20                 a0 = u64 [a1 + 0x20]
   296: 7b 19 08                 u64 [sp + 0x8] = a2
   299: 82 9a 18                 a3 = u64 [a2 + 0x18]
   302: 33 08 70 01 01           a1 = 0x10170
   307: 33 09 01                 a2 = 0x1
   310: 33 05 01                 s0 = 0x1
   313: 7b 17                    u64 [sp] = a0
   315: b4 a0 01 0a              ra = 10, jump [a3]
      :                          @23 [@dyn 5]
   319: 52 07 7b                 jump @28 if a0 != 0
      :                          @24
   322: 33 05 01                 s0 = 0x1
   325: 78 15 47                 u8 [sp + 0x47] = s0
   328: 82 17                    a0 = u64 [sp]
   330: 7b 17 28                 u64 [sp + 0x28] = a0
   333: 82 17 08                 a0 = u64 [sp + 0x8]
   336: 7b 17 30                 u64 [sp + 0x30] = a0
   339: 95 17 47                 a0 = sp + 0x47
   342: 7b 17 38                 u64 [sp + 0x38] = a0
   345: 82 1c 20                 a5 = u64 [sp + 0x20]
   348: 81 c2 30                 t0 = i32 [a5 + 0x30]
   351: 7c c8 38                 a1 = u8 [a5 + 0x38]
   354: 82 c9                    a2 = u64 [a5]
   356: 82 ca 08                 a3 = u64 [a5 + 0x8]
   359: 82 cb 10                 a4 = u64 [a5 + 0x10]
   362: 82 cc 18                 a5 = u64 [a5 + 0x18]
   365: 82 17 10                 a0 = u64 [sp + 0x10]
   368: 7a 17 7c                 u32 [sp + 0x7c] = a0
   371: 7a 12 78                 u32 [sp + 0x78] = t0
   374: 78 18 80 00              u8 [sp + 0x80] = a1
   378: 7b 19 48                 u64 [sp + 0x48] = a2
   381: 7b 1a 50                 u64 [sp + 0x50] = a3
   384: 7b 1b 58                 u64 [sp + 0x58] = a4
   387: 7b 1c 60                 u64 [sp + 0x60] = a5
   390: 95 17 28                 a0 = sp + 0x28
   393: 7b 17 68                 u64 [sp + 0x68] = a0
   396: 33 07 38 01 01           a0 = 0x10138
   401: 7b 17 70                 u64 [sp + 0x70] = a0
   404: 95 18 48                 a1 = sp + 0x48
   407: 82 17 18                 a0 = u64 [sp + 0x18]
   410: 50 10 0c 73 fe           ra = 12, jump @3
      :                          @25 [@dyn 6]
   415: 52 07 1b                 jump @28 if a0 != 0
      :                          @26
   418: 82 18 70                 a1 = u64 [sp + 0x70]
   421: 82 17 68                 a0 = u64 [sp + 0x68]
   424: 82 8a 18                 a3 = u64 [a1 + 0x18]
   427: 33 08 6e 01 01           a1 = 0x1016e
   432: 33 09 02                 a2 = 0x2
   435: b4 a0 01 0e              ra = 14, jump [a3]
      :                          @27 [@dyn 7]
   439: 64 75                    s0 = a0
   441: 01                       fallthrough
      :                          @28
   442: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
   445: 82 18 20                 a1 = u64 [sp + 0x20]
   448: 64 59                    a2 = s0
   450: 51 06 de 00              jump @42 if s1 == 0
      :                          @29
   454: 82 15 18                 s0 = u64 [sp + 0x18]
   457: 95 55 01                 s0 = s0 + 0x1
   460: 33 07 6c 01 01           a0 = 0x1016c
   465: 7b 17 18                 u64 [sp + 0x18] = a0
   468: 33 07 38 01 01           a0 = 0x10138
   473: 7b 17 10                 u64 [sp + 0x10] = a0
   476: 33 07 6e 01 01           a0 = 0x1016e
   481: 7b 17 08                 u64 [sp + 0x8] = a0
   484: 28 13                    jump @32
      :                          @30
   486: 33 09 01                 a2 = 0x1
   489: 82 18 20                 a1 = u64 [sp + 0x20]
   492: 01                       fallthrough
      :                          @31
   493: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
   496: 95 55 01                 s0 = s0 + 0x1
   499: 51 06 ad 00              jump @42 if s1 == 0
      :                          @32
   503: 84 97 ff 00              a0 = a2 & 0xff
   507: 33 09 01                 a2 = 0x1
   510: 52 07 ef                 jump @31 if a0 != 0
      :                          @33
   513: 80 8b 34                 a4 = u32 [a1 + 0x34]
   516: 82 87 20                 a0 = u64 [a1 + 0x20]
   519: 82 89 28                 a2 = u64 [a1 + 0x28]
   522: 84 ba 04                 a3 = a4 & 0x4
   525: 52 0a 27                 jump @38 if a3 != 0
      :                          @34
   528: 82 9a 18                 a3 = u64 [a2 + 0x18]
   531: 33 09 02                 a2 = 0x2
   534: 82 18 18                 a1 = u64 [sp + 0x18]
   537: b4 a0 01 10              ra = 16, jump [a3]
      :                          @35 [@dyn 8]
   541: 82 18 20                 a1 = u64 [sp + 0x20]
   544: 33 09 01                 a2 = 0x1
   547: 52 07 ca                 jump @31 if a0 != 0
      :                          @36
   550: 64 57                    a0 = s0
   552: 50 10 12 e5 fd           ra = 18, jump @3
      :                          @37 [@dyn 9]
   557: 82 18 20                 a1 = u64 [sp + 0x20]
   560: 64 79                    a2 = a0
   562: 28 bb                    jump @31
      :                          @38
   564: 46 11 47 01              u8 [sp + 71] = 0x1
   568: 7b 17 28                 u64 [sp + 0x28] = a0
   571: 7b 19 30                 u64 [sp + 0x30] = a2
   574: 95 17 47                 a0 = sp + 0x47
   577: 7b 17 38                 u64 [sp + 0x38] = a0
   580: 81 87 30                 a0 = i32 [a1 + 0x30]
   583: 7c 89 38                 a2 = u8 [a1 + 0x38]
   586: 82 8a                    a3 = u64 [a1]
   588: 82 83 08                 t1 = u64 [a1 + 0x8]
   591: 82 8c 10                 a5 = u64 [a1 + 0x10]
   594: 82 82 18                 t0 = u64 [a1 + 0x18]
   597: 7a 1b 7c                 u32 [sp + 0x7c] = a4
   600: 7a 17 78                 u32 [sp + 0x78] = a0
   603: 78 19 80 00              u8 [sp + 0x80] = a2
   607: 7b 1a 48                 u64 [sp + 0x48] = a3
   610: 7b 13 50                 u64 [sp + 0x50] = t1
   613: 7b 1c 58                 u64 [sp + 0x58] = a5
   616: 7b 12 60                 u64 [sp + 0x60] = t0
   619: 95 17 28                 a0 = sp + 0x28
   622: 7b 17 68                 u64 [sp + 0x68] = a0
   625: 82 17 10                 a0 = u64 [sp + 0x10]
   628: 7b 17 70                 u64 [sp + 0x70] = a0
   631: 95 18 48                 a1 = sp + 0x48
   634: 64 57                    a0 = s0
   636: 50 10 14 91 fd           ra = 20, jump @3
      :                          @39 [@dyn 10]
   641: 52 07 65 ff              jump @30 if a0 != 0
      :                          @40
   645: 82 18 70                 a1 = u64 [sp + 0x70]
   648: 82 17 68                 a0 = u64 [sp + 0x68]
   651: 82 8a 18                 a3 = u64 [a1 + 0x18]
   654: 33 09 02                 a2 = 0x2
   657: 82 18 08                 a1 = u64 [sp + 0x8]
   660: b4 a0 01 16              ra = 22, jump [a3]
      :                          @41 [@dyn 11]
   664: 64 79                    a2 = a0
   666: 82 18 20                 a1 = u64 [sp + 0x20]
   669: 28 50 ff                 jump @31
      :                          @42
   672: 33 07 01                 a0 = 0x1
   675: 52 09 18                 jump @44 if a2 != 0
      :                          @43
   678: 82 89 28                 a2 = u64 [a1 + 0x28]
   681: 82 87 20                 a0 = u64 [a1 + 0x20]
   684: 82 9a 18                 a3 = u64 [a2 + 0x18]
   687: 33 08 71 01 01           a1 = 0x10171
   692: 33 09 01                 a2 = 0x1
   695: b4 a0 01 18              ra = 24, jump [a3]
      :                          @44 [@dyn 12]
   699: 82 10 98 00              ra = u64 [sp + 0x98]
   703: 82 15 90 00              s0 = u64 [sp + 0x90]
   707: 82 16 88 00              s1 = u64 [sp + 0x88]
   711: 95 11 a0 00              sp = sp + 0xa0
   715: 32 00                    ret
      :                          @45
   717: 95 11 c8                 sp = sp + 0xffffffffffffffc8
   720: 7b 10 30                 u64 [sp + 0x30] = ra
   723: 7b 15 28                 u64 [sp + 0x28] = s0
   726: 7b 16 20                 u64 [sp + 0x20] = s1
   729: 64 95                    s0 = a2
   731: 64 72                    t0 = a0
   733: 51 08 7c                 jump @55 if a1 == 0
      :                          @46
   736: 82 a7 08                 a0 = u64 [a3 + 0x8]
   739: 51 07 7f                 jump @56 if a0 == 0
      :                          @47
   742: 82 a9 10                 a2 = u64 [a3 + 0x10]
   745: 51 09 ae 00              jump @63 if a2 == 0
      :                          @48
   749: 82 a8                    a1 = u64 [a3]
   751: 33 06 20 30 2d           s1 = 0x2d3020
   756: 33 03 00 00 00 08        t1 = 0x8000000
   762: c8 36 06                 s1 = s1 + t1
   765: 01                       fallthrough
      :                          @49
   766: 82 6a                    a3 = u64 [s1]
   768: c8 5a 07                 a0 = a3 + s0
   771: ac a7 d4 00              jump @69 if a0 <u a3
      :                          @50
   775: 95 7b 01                 a4 = a0 + 0x1
   778: 88 bc 01                 a5 = a4 <u 0x1
   781: d8 b3 0b                 a4 = t1 <u a4
   784: d4 cb 0b                 a4 = a4 | a5
   787: 52 0b c4 00              jump @69 if a4 != 0
      :                          @51
   791: 82 6b                    a4 = u64 [s1]
   793: ab ab e5                 jump @49 if a4 != a3
      :                          @52
   796: 7b 67                    u64 [s1] = a0
   798: 33 0c                    a5 = 0
   800: 7b 12 18                 u64 [sp + 0x18] = t0
   803: 33 0a 20 30 2d           a3 = 0x2d3020
   808: 33 0b 00 00 00 08        a4 = 0x8000000
   814: 7b 1a                    u64 [sp] = a3
   816: c8 ba 0a                 a3 = a3 + a4
   819: c9 7a 07                 a0 = a3 - a0
   822: 7b 17 10                 u64 [sp + 0x10] = a0
   825: 7b 18 08                 u64 [sp + 0x8] = a1
   828: 64 96                    s1 = a2
   830: 50 10 1a c9 0d           ra = 26, jump @330
      :                          @53 [@dyn 13]
   835: 54 46 00 00 00 08 9c 00  jump @70 if s1 <=u 134217728
      :                          @54
   843: 82 12 18                 t0 = u64 [sp + 0x18]
   846: 82 18 10                 a1 = u64 [sp + 0x10]
   849: 33 07                    a0 = 0
   851: 7b 28 08                 u64 [t0 + 0x8] = a1
   854: 28 b9 00                 jump @76
      :                          @55
   857: 49 12 08                 u64 [t0 + 8] = 0
   860: 33 07 01                 a0 = 0x1
   863: 28 b0 00                 jump @76
      :                          @56
   866: 33 09 20 30 2d           a2 = 0x2d3020
   871: 33 07 00 00 00 08        a0 = 0x8000000
   877: c8 79 09                 a2 = a2 + a0
   880: 01                       fallthrough
      :                          @57
   881: 82 9a                    a3 = u64 [a2]
   883: c8 5a 08                 a1 = a3 + s0
   886: ac a8 61                 jump @69 if a1 <u a3
      :                          @58
   889: 95 8b 01                 a4 = a1 + 0x1
   892: 88 bc 01                 a5 = a4 <u 0x1
   895: d8 b7 0b                 a4 = a0 <u a4
   898: d4 cb 0b                 a4 = a4 | a5
   901: 52 0b 52                 jump @69 if a4 != 0
      :                          @59
   904: 82 9b                    a4 = u64 [a2]
   906: ab ab e7                 jump @57 if a4 != a3
      :                          @60
   909: 7b 98                    u64 [a2] = a1
   911: 33 0c                    a5 = 0
   913: 01                       fallthrough
      :                          @61
   914: ab ab df                 jump @57 if a4 != a3
      :                          @62
   917: 28 32                    jump @68
      :                          @63
   919: 33 09 20 30 2d           a2 = 0x2d3020
   924: 33 07 00 00 00 08        a0 = 0x8000000
   930: c8 79 09                 a2 = a2 + a0
   933: 01                       fallthrough
      :                          @64
   934: 82 9a                    a3 = u64 [a2]
   936: c8 5a 08                 a1 = a3 + s0
   939: ac a8 2c                 jump @69 if a1 <u a3
      :                          @65
   942: 95 8b 01                 a4 = a1 + 0x1
   945: 88 bc 01                 a5 = a4 <u 0x1
   948: d8 b7 0b                 a4 = a0 <u a4
   951: d4 cb 0b                 a4 = a4 | a5
   954: 52 0b 1d                 jump @69 if a4 != 0
      :                          @66
   957: 82 9b                    a4 = u64 [a2]
   959: ab ab e7                 jump @64 if a4 != a3
      :                          @67
   962: 7b 98                    u64 [a2] = a1
   964: 33 0c                    a5 = 0
   966: 01                       fallthrough
      :                          @68
   967: 33 07 20 30 2d 08        a0 = 0x82d3020
   973: c9 87 08                 a1 = a0 - a1
   976: 33 07                    a0 = 0
   978: 7b 28 08                 u64 [t0 + 0x8] = a1
   981: 28 3a                    jump @76
      :                          @69
   983: 33 07 01                 a0 = 0x1
   986: 7b 27 08                 u64 [t0 + 0x8] = a0
   989: 28 32                    jump @76
      :                          @70
   991: 64 6c                    a5 = s1
   993: 82 17                    a0 = u64 [sp]
   995: 95 77 00 00 00 08        a0 = a0 + 0x8000000
  1001: 82 12 18                 t0 = u64 [sp + 0x18]
  1004: 82 16 08                 s1 = u64 [sp + 0x8]
  1007: 01                       fallthrough
      :                          @71
  1008: 82 78                    a1 = u64 [a0]
  1010: c9 87 09                 a2 = a0 - a1
  1013: ab 69 11                 jump @75 if a2 != s1
      :                          @72
  1016: c9 c8 09                 a2 = a1 - a5
  1019: 01                       fallthrough
      :                          @73
  1020: 82 7a                    a3 = u64 [a0]
  1022: ab 8a f2                 jump @71 if a3 != a1
      :                          @74
  1025: 7b 79                    u64 [a0] = a2
  1027: 33 0b                    a4 = 0
  1029: 01                       fallthrough
      :                          @75
  1030: 82 18 10                 a1 = u64 [sp + 0x10]
  1033: 33 07                    a0 = 0
  1035: 7b 28 08                 u64 [t0 + 0x8] = a1
  1038: 01                       fallthrough
      :                          @76
  1039: 7b 25 10                 u64 [t0 + 0x10] = s0
  1042: 7b 27                    u64 [t0] = a0
  1044: 82 10 30                 ra = u64 [sp + 0x30]
  1047: 82 15 28                 s0 = u64 [sp + 0x28]
  1050: 82 16 20                 s1 = u64 [sp + 0x20]
  1053: 95 11 38                 sp = sp + 0x38
  1056: 32 00                    ret
      :                          @77
  1058: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1061: 7b 10 40                 u64 [sp + 0x40] = ra
  1064: 7b 15 38                 u64 [sp + 0x38] = s0
  1067: 7b 16 30                 u64 [sp + 0x30] = s1
  1070: 95 88 01                 a1 = a1 + 0x1
  1073: 51 08 53                 jump @85 if a1 == 0
      :                          @78
  1076: 64 75                    s0 = a0
  1078: 82 77                    a0 = u64 [a0]
  1080: 97 79 01                 a2 = a0 << 0x1
  1083: 33 0a 08                 a3 = 0x8
  1086: e4 a8 08                 a1 = maxu(a1, a3)
  1089: e4 89 06                 s1 = maxu(a2, a1)
  1092: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1095: 98 88 3f                 a1 = a1 >> 0x3f
  1098: 51 07 12                 jump @80 if a0 == 0
      :                          @79
  1101: 82 59 08                 a2 = u64 [s0 + 0x8]
  1104: 7b 19 18                 u64 [sp + 0x18] = a2
  1107: 49 11 20 01              u64 [sp + 32] = 0x1
  1111: 7b 17 28                 u64 [sp + 0x28] = a0
  1114: 28 06                    jump @81
      :                          @80
  1116: 49 11 20                 u64 [sp + 32] = 0
  1119: 01                       fallthrough
      :                          @81
  1120: 64 17                    a0 = sp
  1122: 95 1a 18                 a3 = sp + 0x18
  1125: 64 69                    a2 = s1
  1127: 50 10 1c 66 fe           ra = 28, jump @45
      :                          @82 [@dyn 14]
  1132: 82 18                    a1 = u64 [sp]
  1134: 82 17 08                 a0 = u64 [sp + 0x8]
  1137: 51 08 14                 jump @86 if a1 == 0
      :                          @83
  1140: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1150: aa 87 0d                 jump @87 if a0 == a1
      :                          @84
  1153: 52 07 18                 jump @88 if a0 != 0
      :                          @85
  1156: 00                       trap
      :                          @86
  1157: 7b 57 08                 u64 [s0 + 0x8] = a0
  1160: 7b 56                    u64 [s0] = s1
  1162: 01                       fallthrough
      :                          @87
  1163: 82 10 40                 ra = u64 [sp + 0x40]
  1166: 82 15 38                 s0 = u64 [sp + 0x38]
  1169: 82 16 30                 s1 = u64 [sp + 0x30]
  1172: 95 11 48                 sp = sp + 0x48
  1175: 32 00                    ret
      :                          @88
  1177: 00                       trap
      :                          @89
  1178: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1181: 7b 10 40                 u64 [sp + 0x40] = ra
  1184: 7b 15 38                 u64 [sp + 0x38] = s0
  1187: 7b 16 30                 u64 [sp + 0x30] = s1
  1190: c8 89 09                 a2 = a2 + a1
  1193: ac 89 53                 jump @97 if a2 <u a1
      :                          @90
  1196: 64 75                    s0 = a0
  1198: 82 77                    a0 = u64 [a0]
  1200: 97 78 01                 a1 = a0 << 0x1
  1203: 33 0a 08                 a3 = 0x8
  1206: e4 a9 09                 a2 = maxu(a2, a3)
  1209: e4 98 06                 s1 = maxu(a1, a2)
  1212: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1215: 98 88 3f                 a1 = a1 >> 0x3f
  1218: 51 07 12                 jump @92 if a0 == 0
      :                          @91
  1221: 82 59 08                 a2 = u64 [s0 + 0x8]
  1224: 7b 19 18                 u64 [sp + 0x18] = a2
  1227: 49 11 20 01              u64 [sp + 32] = 0x1
  1231: 7b 17 28                 u64 [sp + 0x28] = a0
  1234: 28 06                    jump @93
      :                          @92
  1236: 49 11 20                 u64 [sp + 32] = 0
  1239: 01                       fallthrough
      :                          @93
  1240: 64 17                    a0 = sp
  1242: 95 1a 18                 a3 = sp + 0x18
  1245: 64 69                    a2 = s1
  1247: 50 10 1e ee fd           ra = 30, jump @45
      :                          @94 [@dyn 15]
  1252: 82 18                    a1 = u64 [sp]
  1254: 82 17 08                 a0 = u64 [sp + 0x8]
  1257: 51 08 14                 jump @98 if a1 == 0
      :                          @95
  1260: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1270: aa 87 0d                 jump @99 if a0 == a1
      :                          @96
  1273: 52 07 18                 jump @100 if a0 != 0
      :                          @97
  1276: 00                       trap
      :                          @98
  1277: 7b 57 08                 u64 [s0 + 0x8] = a0
  1280: 7b 56                    u64 [s0] = s1
  1282: 01                       fallthrough
      :                          @99
  1283: 82 10 40                 ra = u64 [sp + 0x40]
  1286: 82 15 38                 s0 = u64 [sp + 0x38]
  1289: 82 16 30                 s1 = u64 [sp + 0x30]
  1292: 95 11 48                 sp = sp + 0x48
  1295: 32 00                    ret
      :                          @100
  1297: 00                       trap
      :                          @101 [export #0: 'refine']
  1298: 95 11 10 ff              sp = sp + 0xffffffffffffff10
  1302: 7b 10 e8 00              u64 [sp + 0xe8] = ra
  1306: 7b 15 e0 00              u64 [sp + 0xe0] = s0
  1310: 7b 16 d8 00              u64 [sp + 0xd8] = s1
  1314: 49 01 ff ff ff f7        u64 [sp + 0] = 0xfffffffff7ffffff
  1320: 7b 17 40                 u64 [sp + 0x40] = a0
  1323: 7b 18 48                 u64 [sp + 0x48] = a1
  1326: 95 17 40                 a0 = sp + 0x40
  1329: 7b 17 98 00              u64 [sp + 0x98] = a0
  1333: 33 07 8e 00              a0 = 0x8e
  1337: 7b 17 38                 u64 [sp + 0x38] = a0
  1340: 7b 17 a0 00              u64 [sp + 0xa0] = a0
  1344: 95 17 48                 a0 = sp + 0x48
  1347: 7b 17 a8 00              u64 [sp + 0xa8] = a0
  1351: 33 07 60                 a0 = 0x60
  1354: 7b 17 30                 u64 [sp + 0x30] = a0
  1357: 7b 17 b0 00              u64 [sp + 0xb0] = a0
  1361: 33 07 30 00 01           a0 = 0x10030
  1366: 7b 17 28                 u64 [sp + 0x28] = a0
  1369: 7b 17 68                 u64 [sp + 0x68] = a0
  1372: 49 11 70 02              u64 [sp + 112] = 0x2
  1376: 49 21 88 00              u64 [sp + 136] = 0
  1380: 95 18 98 00              a1 = sp + 0x98
  1384: 7b 18 78                 u64 [sp + 0x78] = a1
  1387: 49 21 80 00 02           u64 [sp + 128] = 0x2
  1392: 95 17 c0 00              a0 = sp + 0xc0
  1396: 95 18 68                 a1 = sp + 0x68
  1399: 50 10 20 17 09           ra = 32, jump @280
      :                          @102 [@dyn 16]
  1404: 82 15 c8 00              s0 = u64 [sp + 0xc8]
  1408: 82 1b d0 00              a4 = u64 [sp + 0xd0]
  1412: 82 16 c0 00              s1 = u64 [sp + 0xc0]
  1416: 33 07 01                 a0 = 0x1
  1419: 33 08                    a1 = 0
  1421: 33 09                    a2 = 0
  1423: 64 5a                    a3 = s0
  1425: 33 00 22                 ra = 0x22
  1428: 0a 64                    ecalli 100 // 'log'
  1430: 01                       fallthrough
      :                          @103 [@dyn 17]
  1431: 82 17                    a0 = u64 [sp]
  1433: c8 67 07                 a0 = a0 + s1
  1436: 53 47 00 00 00 f8 29     jump @109 if a0 <u 4160749568
      :                          @104
  1443: 33 07 20 30 2d           a0 = 0x2d3020
  1448: 95 77 00 00 00 08        a0 = a0 + 0x8000000
  1454: 01                       fallthrough
      :                          @105
  1455: 82 78                    a1 = u64 [a0]
  1457: c9 87 09                 a2 = a0 - a1
  1460: ab 59 11                 jump @109 if a2 != s0
      :                          @106
  1463: c9 68 09                 a2 = a1 - s1
  1466: 01                       fallthrough
      :                          @107
  1467: 82 7a                    a3 = u64 [a0]
  1469: ab 8a f2                 jump @105 if a3 != a1
      :                          @108
  1472: 7b 79                    u64 [a0] = a2
  1474: 33 0b                    a4 = 0
  1476: 01                       fallthrough
      :                          @109
  1477: 95 17 40                 a0 = sp + 0x40
  1480: 7b 17 98 00              u64 [sp + 0x98] = a0
  1484: 82 17 38                 a0 = u64 [sp + 0x38]
  1487: 7b 17 a0 00              u64 [sp + 0xa0] = a0
  1491: 95 17 48                 a0 = sp + 0x48
  1494: 7b 17 a8 00              u64 [sp + 0xa8] = a0
  1498: 82 17 30                 a0 = u64 [sp + 0x30]
  1501: 7b 17 b0 00              u64 [sp + 0xb0] = a0
  1505: 82 17 28                 a0 = u64 [sp + 0x28]
  1508: 7b 17 68                 u64 [sp + 0x68] = a0
  1511: 49 11 70 02              u64 [sp + 112] = 0x2
  1515: 49 21 88 00              u64 [sp + 136] = 0
  1519: 95 18 98 00              a1 = sp + 0x98
  1523: 7b 18 78                 u64 [sp + 0x78] = a1
  1526: 49 21 80 00 02           u64 [sp + 128] = 0x2
  1531: 95 17 c0 00              a0 = sp + 0xc0
  1535: 95 18 68                 a1 = sp + 0x68
  1538: 50 10 24 8c 08           ra = 36, jump @280
      :                          @110 [@dyn 18]
  1543: 82 15 c8 00              s0 = u64 [sp + 0xc8]
  1547: 82 1b d0 00              a4 = u64 [sp + 0xd0]
  1551: 82 16 c0 00              s1 = u64 [sp + 0xc0]
  1555: 33 07 01                 a0 = 0x1
  1558: 33 08                    a1 = 0
  1560: 33 09                    a2 = 0
  1562: 64 5a                    a3 = s0
  1564: 33 00 26                 ra = 0x26
  1567: 0a 64                    ecalli 100 // 'log'
  1569: 01                       fallthrough
      :                          @111 [@dyn 19]
  1570: 82 17                    a0 = u64 [sp]
  1572: c8 67 07                 a0 = a0 + s1
  1575: 53 47 00 00 00 f8 27     jump @117 if a0 <u 4160749568
      :                          @112
  1582: 33 07 20 30 2d           a0 = 0x2d3020
  1587: 95 77 00 00 00 08        a0 = a0 + 0x8000000
  1593: 01                       fallthrough
      :                          @113
  1594: 82 78                    a1 = u64 [a0]
  1596: c9 87 09                 a2 = a0 - a1
  1599: ab 59 0f                 jump @117 if a2 != s0
      :                          @114
  1602: c9 68 09                 a2 = a1 - s1
  1605: 01                       fallthrough
      :                          @115
  1606: 82 7a                    a3 = u64 [a0]
  1608: ab 8a f2                 jump @113 if a3 != a1
      :                          @116
  1611: 7b 79                    u64 [a0] = a2
  1613: 01                       fallthrough
      :                          @117
  1614: 33 07 19 00 03           a0 = 0x30019
  1619: 33 09 00 30 2a           a2 = 0x2a3000
  1624: 33 0a 1e                 a3 = 0x1e
  1627: 33 08                    a1 = 0
  1629: 33 0b                    a4 = 0
  1631: 33 0c                    a5 = 0
  1633: 33 00 28                 ra = 0x28
  1636: 0a 01                    ecalli 1 // 'fetch'
  1638: 01                       fallthrough
      :                          @118 [@dyn 20]
  1639: 7b 17 50                 u64 [sp + 0x50] = a0
  1642: 51 17 ff b0 02           jump @155 if a0 == 4294967295
      :                          @119
  1647: 33 09 20 30 2d           a2 = 0x2d3020
  1652: 33 08 00 00 00 08        a1 = 0x8000000
  1658: c8 89 09                 a2 = a2 + a1
  1661: 33 0a 00 10 0e           a3 = 0xe1000
  1666: 01                       fallthrough
      :                          @120
  1667: 82 9b                    a4 = u64 [a2]
  1669: c8 ab 07                 a0 = a4 + a3
  1672: ac b7 ad 05              jump @219 if a0 <u a4
      :                          @121
  1676: 95 7c 01                 a5 = a0 + 0x1
  1679: 88 c6 01                 s1 = a5 <u 0x1
  1682: d8 c8 0c                 a5 = a1 <u a5
  1685: d4 6c 0c                 a5 = a5 | s1
  1688: 52 0c 9d 05              jump @219 if a5 != 0
      :                          @122
  1692: 82 9c                    a5 = u64 [a2]
  1694: ab bc e5                 jump @120 if a5 != a4
      :                          @123
  1697: 7b 97                    u64 [a2] = a0
  1699: 33 04                    t2 = 0
  1701: 33 08 20 30 2d 08        a1 = 0x82d3020
  1707: c9 78 07                 a0 = a1 - a0
  1710: 49 21 c0 00 00 10 0e     u64 [sp + 192] = 0xe1000
  1717: 7b 17 c8 00              u64 [sp + 0xc8] = a0
  1721: 49 21 d0 00              u64 [sp + 208] = 0
  1725: 33 05 19 00 03           s0 = 0x30019
  1730: 33 06 00 30 2a           s1 = 0x2a3000
  1735: 33 0b 3b                 a4 = 0x3b
  1738: 33 00 0b                 ra = 0xb
  1741: 33 0a 7b 14              a3 = 0x147b
  1745: 33 03 03                 t1 = 0x3
  1748: 7b 1a 20                 u64 [sp + 0x20] = a3
  1751: 28 32                    jump @125
      :                          @124
  1753: 95 66 fd                 s1 = s1 + 0xfffffffffffffffd
  1756: 96 98 1e                 a1 = a2 * 0x1e
  1759: ca bc 09                 a2 = a5 * a4
  1762: c8 98 08                 a1 = a1 + a2
  1765: 82 19 38                 a2 = u64 [sp + 0x38]
  1768: ca 09 09                 a2 = a2 * ra
  1771: c8 98 08                 a1 = a1 + a2
  1774: ca a8 08                 a1 = a1 * a3
  1777: 98 88 13                 a1 = a1 >> 0x13
  1780: c8 47 09                 a2 = a0 + t2
  1783: 78 98                    u8 [a2] = a1
  1785: 95 44 01                 t2 = t2 + 0x1
  1788: 7b 14 d0 00              u64 [sp + 0xd0] = t2
  1792: 95 55 03                 s0 = s0 + 0x3
  1795: 7b 14 30                 u64 [sp + 0x30] = t2
  1798: ac 36 42                 jump @128 if s1 <u t1
      :                          @125
  1801: 7c 59                    a2 = u8 [s0]
  1803: 7c 5c 01                 a5 = u8 [s0 + 0x1]
  1806: 82 18 c0 00              a1 = u64 [sp + 0xc0]
  1810: 7c 52 02                 t0 = u8 [s0 + 0x2]
  1813: 7b 12 38                 u64 [sp + 0x38] = t0
  1816: ab 84 c1                 jump @124 if t2 != a1
      :                          @126
  1819: 95 17 c0 00              a0 = sp + 0xc0
  1823: 64 48                    a1 = t2
  1825: 7b 19 30                 u64 [sp + 0x30] = a2
  1828: 7b 1c 28                 u64 [sp + 0x28] = a5
  1831: 50 10 2a fb fc           ra = 42, jump @77
      :                          @127 [@dyn 21]
  1836: 82 1c 28                 a5 = u64 [sp + 0x28]
  1839: 82 19 30                 a2 = u64 [sp + 0x30]
  1842: 33 03 03                 t1 = 0x3
  1845: 82 1a 20                 a3 = u64 [sp + 0x20]
  1848: 33 00 0b                 ra = 0xb
  1851: 33 0b 3b                 a4 = 0x3b
  1854: 82 14 d0 00              t2 = u64 [sp + 0xd0]
  1858: 82 17 c8 00              a0 = u64 [sp + 0xc8]
  1862: 28 93                    jump @124
      :                          @128
  1864: 33 09 20 30 2d           a2 = 0x2d3020
  1869: 33 08 00 00 00 08        a1 = 0x8000000
  1875: c8 89 09                 a2 = a2 + a1
  1878: 33 0a 00 24              a3 = 0x2400
  1882: 01                       fallthrough
      :                          @129
  1883: 82 97                    a0 = u64 [a2]
  1885: c8 a7 05                 s0 = a0 + a3
  1888: ac 75 d6 04              jump @220 if s0 <u a0
      :                          @130
  1892: 95 5c 01                 a5 = s0 + 0x1
  1895: 88 c6 01                 s1 = a5 <u 0x1
  1898: d8 c8 0c                 a5 = a1 <u a5
  1901: d4 6c 0c                 a5 = a5 | s1
  1904: 52 0c c6 04              jump @220 if a5 != 0
      :                          @131
  1908: 82 9c                    a5 = u64 [a2]
  1910: ab 7c e5                 jump @129 if a5 != a0
      :                          @132
  1913: 7b 95                    u64 [a2] = s0
  1915: 33 09                    a2 = 0
  1917: 33 0a                    a3 = 0
  1919: 33 06                    s1 = 0
  1921: 33 08 20 30 2d 08        a1 = 0x82d3020
  1927: c9 58 07                 a0 = a1 - s0
  1930: 49 21 98 00 00 24        u64 [sp + 152] = 0x2400
  1936: 7b 17 a0 00              u64 [sp + 0xa0] = a0
  1940: 82 1c c8 00              a5 = u64 [sp + 0xc8]
  1944: 3a 08 00 00 03           a1 = u64 [0x30000]
  1949: 7b 18 10                 u64 [sp + 0x10] = a1
  1952: 49 21 a8 00              u64 [sp + 168] = 0
  1956: 7b 1c 28                 u64 [sp + 0x28] = a5
  1959: 28 10                    jump @134
      :                          @133
  1961: 82 19 20                 a2 = u64 [sp + 0x20]
  1964: 95 99 d0 02              a2 = a2 + 0x2d0
  1968: 82 16 18                 s1 = u64 [sp + 0x18]
  1971: 51 16 48 65              jump @140 if s1 == 72
      :                          @134
  1975: 7b 19 20                 u64 [sp + 0x20] = a2
  1978: 6e 98                    a1 = zext.h a2
  1980: 82 19 10                 a2 = u64 [sp + 0x10]
  1983: d6 98 08                 a1 = a1 mulhu a2
  1986: 96 85 00 05              s0 = a1 * 0x500
  1990: 83 66 01                 i32 s1 = s1 + 0x1
  1993: 7b 16 18                 u64 [sp + 0x18] = s1
  1996: 33 06 80 00              s1 = 0x80
  2000: 28 17                    jump @136
      :                          @135
  2002: c8 a7 08                 a1 = a0 + a3
  2005: 78 8b                    u8 [a1] = a4
  2007: 95 aa 01                 a3 = a3 + 0x1
  2010: 7b 1a a8 00              u64 [sp + 0xa8] = a3
  2014: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
  2017: 95 55 0a                 s0 = s0 + 0xa
  2020: 51 06 c5                 jump @133 if s1 == 0
      :                          @136
  2023: ae 45 30 03              jump @190 if s0 >=u t2
      :                          @137
  2027: c8 5c 08                 a1 = a5 + s0
  2030: 82 19 98 00              a2 = u64 [sp + 0x98]
  2034: 7c 8b                    a4 = u8 [a1]
  2036: ab 9a de                 jump @135 if a3 != a2
      :                          @138
  2039: 95 17 98 00              a0 = sp + 0x98
  2043: 64 a8                    a1 = a3
  2045: 7b 1b 38                 u64 [sp + 0x38] = a4
  2048: 50 10 2c 22 fc           ra = 44, jump @77
      :                          @139 [@dyn 22]
  2053: 82 1b 38                 a4 = u64 [sp + 0x38]
  2056: 82 1c 28                 a5 = u64 [sp + 0x28]
  2059: 82 14 30                 t2 = u64 [sp + 0x30]
  2062: 82 1a a8 00              a3 = u64 [sp + 0xa8]
  2066: 82 17 a0 00              a0 = u64 [sp + 0xa0]
  2070: 28 bc                    jump @135
      :                          @140
  2072: 33 09 20 30 2d           a2 = 0x2d3020
  2077: 33 08 00 00 00 08        a1 = 0x8000000
  2083: c8 89 09                 a2 = a2 + a1
  2086: 33 05 48 24              s0 = 0x2448
  2090: 01                       fallthrough
      :                          @141
  2091: 82 9b                    a4 = u64 [a2]
  2093: c8 5b 07                 a0 = a4 + s0
  2096: ac b7 07 04              jump @221 if a0 <u a4
      :                          @142
  2100: 95 7c 01                 a5 = a0 + 0x1
  2103: 88 c6 01                 s1 = a5 <u 0x1
  2106: d8 c8 0c                 a5 = a1 <u a5
  2109: d4 6c 0c                 a5 = a5 | s1
  2112: 52 0c f7 03              jump @221 if a5 != 0
      :                          @143
  2116: 82 9c                    a5 = u64 [a2]
  2118: ab bc e5                 jump @141 if a5 != a4
      :                          @144
  2121: 7b 97                    u64 [a2] = a0
  2123: 33 05                    s0 = 0
  2125: 33 08                    a1 = 0
  2127: 33 0b                    a4 = 0
  2129: 33 09 20 30 2d 08        a2 = 0x82d3020
  2135: c9 79 02                 t0 = a2 - a0
  2138: 49 11 68 48 24           u64 [sp + 104] = 0x2448
  2143: 7b 12 70                 u64 [sp + 0x70] = t0
  2146: 82 17 a0 00              a0 = u64 [sp + 0xa0]
  2150: 7b 17 38                 u64 [sp + 0x38] = a0
  2153: 49 11 78                 u64 [sp + 120] = 0
  2156: 49 11 30 11 10           u64 [sp + 48] = 0x1011
  2161: 33 07 00 00 01           a0 = 0x10000
  2166: 7b 17 28                 u64 [sp + 0x28] = a0
  2169: 28 20                    jump @146
      :                          @145
  2171: 82 15 10                 s0 = u64 [sp + 0x10]
  2174: 82 1b 08                 a4 = u64 [sp + 0x8]
  2177: 82 12 70                 t0 = u64 [sp + 0x70]
  2180: c8 82 07                 a0 = t0 + a1
  2183: 46 07 0a                 u8 [a0 + 0] = 0xa
  2186: 95 88 01                 a1 = a1 + 0x1
  2189: 7b 18 78                 u64 [sp + 0x78] = a1
  2192: 95 55 80 00              s0 = s0 + 0x80
  2196: 51 1b 48 a1 00           jump @156 if a4 == 72
      :                          @146
  2201: 95 bb 01                 a4 = a4 + 0x1
  2204: 7b 1b 08                 u64 [sp + 0x8] = a4
  2207: 33 06 80 00              s1 = 0x80
  2211: 7b 15 10                 u64 [sp + 0x10] = s0
  2214: 28 16                    jump @148
      :                          @147
  2216: c8 82 07                 a0 = t0 + a1
  2219: 78 7b                    u8 [a0] = a4
  2221: 95 88 01                 a1 = a1 + 0x1
  2224: 7b 18 78                 u64 [sp + 0x78] = a1
  2227: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
  2230: 95 55 01                 s0 = s0 + 0x1
  2233: 51 06 48                 jump @152 if s1 == 0
      :                          @148
  2236: ae a5 5c 02              jump @191 if s0 >=u a3
      :                          @149
  2240: 82 17 38                 a0 = u64 [sp + 0x38]
  2243: c8 57 07                 a0 = a0 + s0
  2246: 7c 77                    a0 = u8 [a0]
  2248: 97 79 03                 a2 = a0 << 0x3
  2251: c8 97 07                 a0 = a0 + a2
  2254: 82 19 30                 a2 = u64 [sp + 0x30]
  2257: ca 97 07                 a0 = a0 * a2
  2260: 98 77 14                 a0 = a0 >> 0x14
  2263: 82 19 28                 a2 = u64 [sp + 0x28]
  2266: c8 97 07                 a0 = a0 + a2
  2269: 82 19 68                 a2 = u64 [sp + 0x68]
  2272: 7c 7b                    a4 = u8 [a0]
  2274: ab 98 c6                 jump @147 if a1 != a2
      :                          @150
  2277: 95 17 68                 a0 = sp + 0x68
  2280: 7b 1a 20                 u64 [sp + 0x20] = a3
  2283: 7b 1b 18                 u64 [sp + 0x18] = a4
  2286: 50 10 2e 34 fb           ra = 46, jump @77
      :                          @151 [@dyn 23]
  2291: 82 1b 18                 a4 = u64 [sp + 0x18]
  2294: 82 1a 20                 a3 = u64 [sp + 0x20]
  2297: 82 18 78                 a1 = u64 [sp + 0x78]
  2300: 82 12 70                 t0 = u64 [sp + 0x70]
  2303: 28 a9                    jump @147
      :                          @152
  2305: 82 17 68                 a0 = u64 [sp + 0x68]
  2308: ab 78 77 ff              jump @145 if a1 != a0
      :                          @153
  2312: 95 17 68                 a0 = sp + 0x68
  2315: 64 a5                    s0 = a3
  2317: 50 10 30 15 fb           ra = 48, jump @77
      :                          @154 [@dyn 24]
  2322: 64 5a                    a3 = s0
  2324: 82 18 78                 a1 = u64 [sp + 0x78]
  2327: 28 64 ff                 jump @145
      :                          @155
  2330: 33 0a e8 00 01           a3 = 0x100e8
  2335: 33 07 02                 a0 = 0x2
  2338: 33 0b 14                 a4 = 0x14
  2341: 33 08                    a1 = 0
  2343: 33 09                    a2 = 0
  2345: 0a 64                    ecalli 100 // 'log'
  2347: 33 08                    a1 = 0
  2349: 33 07 00 00 01           a0 = 0x10000
  2354: 28 0f 02                 jump @197
      :                          @156
  2357: 7b 18 38                 u64 [sp + 0x38] = a1
  2360: 82 17 98 00              a0 = u64 [sp + 0x98]
  2364: 82 18 68                 a1 = u64 [sp + 0x68]
  2367: 7b 18 28                 u64 [sp + 0x28] = a1
  2370: 51 07 30                 jump @163 if a0 == 0
      :                          @157
  2373: 56 47 00 00 00 08 2d     jump @163 if a0 >u 134217728
      :                          @158
  2380: 82 18 a0 00              a1 = u64 [sp + 0xa0]
  2384: 33 0a 20 30 2d           a3 = 0x2d3020
  2389: 95 a9 00 00 00 08        a2 = a3 + 0x8000000
  2395: 01                       fallthrough
      :                          @159
  2396: 82 9a                    a3 = u64 [a2]
  2398: c9 a9 0b                 a4 = a2 - a3
  2401: ab 8b 11                 jump @163 if a4 != a1
      :                          @160
  2404: c9 7a 0b                 a4 = a3 - a0
  2407: 01                       fallthrough
      :                          @161
  2408: 82 9c                    a5 = u64 [a2]
  2410: ab ac f2                 jump @159 if a5 != a3
      :                          @162
  2413: 7b 9b                    u64 [a2] = a4
  2415: 33 06                    s1 = 0
  2417: 01                       fallthrough
      :                          @163
  2418: 7b 12 30                 u64 [sp + 0x30] = t0
  2421: 82 17 c0 00              a0 = u64 [sp + 0xc0]
  2425: 51 07 30                 jump @170 if a0 == 0
      :                          @164
  2428: 56 47 00 00 00 08 2d     jump @170 if a0 >u 134217728
      :                          @165
  2435: 82 18 c8 00              a1 = u64 [sp + 0xc8]
  2439: 33 0a 20 30 2d           a3 = 0x2d3020
  2444: 95 a9 00 00 00 08        a2 = a3 + 0x8000000
  2450: 01                       fallthrough
      :                          @166
  2451: 82 9a                    a3 = u64 [a2]
  2453: c9 a9 0b                 a4 = a2 - a3
  2456: ab 8b 11                 jump @170 if a4 != a1
      :                          @167
  2459: c9 7a 0b                 a4 = a3 - a0
  2462: 01                       fallthrough
      :                          @168
  2463: 82 9c                    a5 = u64 [a2]
  2465: ab ac f2                 jump @166 if a5 != a3
      :                          @169
  2468: 7b 9b                    u64 [a2] = a4
  2470: 33 06                    s1 = 0
  2472: 01                       fallthrough
      :                          @170
  2473: 33 07 19 00 03           a0 = 0x30019
  2478: 7b 17 58                 u64 [sp + 0x58] = a0
  2481: 49 11 60 10              u64 [sp + 96] = 0x10
  2485: 95 17 50                 a0 = sp + 0x50
  2488: 7b 17 98 00              u64 [sp + 0x98] = a0
  2492: 33 07 8e 00              a0 = 0x8e
  2496: 7b 17 a0 00              u64 [sp + 0xa0] = a0
  2500: 95 17 58                 a0 = sp + 0x58
  2503: 7b 17 a8 00              u64 [sp + 0xa8] = a0
  2507: 33 07 04                 a0 = 0x4
  2510: 7b 17 b0 00              u64 [sp + 0xb0] = a0
  2514: 33 07 70 00 01           a0 = 0x10070
  2519: 7b 17 68                 u64 [sp + 0x68] = a0
  2522: 49 11 70 02              u64 [sp + 112] = 0x2
  2526: 49 21 88 00              u64 [sp + 136] = 0
  2530: 95 18 98 00              a1 = sp + 0x98
  2534: 7b 18 78                 u64 [sp + 0x78] = a1
  2537: 49 21 80 00 02           u64 [sp + 128] = 0x2
  2542: 95 17 c0 00              a0 = sp + 0xc0
  2546: 95 18 68                 a1 = sp + 0x68
  2549: 50 10 32 99 04           ra = 50, jump @280
      :                          @171 [@dyn 25]
  2554: 82 15 c8 00              s0 = u64 [sp + 0xc8]
  2558: 82 1b d0 00              a4 = u64 [sp + 0xd0]
  2562: 82 16 c0 00              s1 = u64 [sp + 0xc0]
  2566: 33 07 01                 a0 = 0x1
  2569: 33 08                    a1 = 0
  2571: 33 09                    a2 = 0
  2573: 64 5a                    a3 = s0
  2575: 33 00 34                 ra = 0x34
  2578: 0a 64                    ecalli 100 // 'log'
  2580: 01                       fallthrough
      :                          @172 [@dyn 26]
  2581: 82 17                    a0 = u64 [sp]
  2583: c8 67 07                 a0 = a0 + s1
  2586: 53 47 00 00 00 f8 29     jump @178 if a0 <u 4160749568
      :                          @173
  2593: 33 07 20 30 2d           a0 = 0x2d3020
  2598: 95 77 00 00 00 08        a0 = a0 + 0x8000000
  2604: 01                       fallthrough
      :                          @174
  2605: 82 78                    a1 = u64 [a0]
  2607: c9 87 09                 a2 = a0 - a1
  2610: ab 59 11                 jump @178 if a2 != s0
      :                          @175
  2613: c9 68 09                 a2 = a1 - s1
  2616: 01                       fallthrough
      :                          @176
  2617: 82 7a                    a3 = u64 [a0]
  2619: ab 8a f2                 jump @174 if a3 != a1
      :                          @177
  2622: 7b 79                    u64 [a0] = a2
  2624: 33 0b                    a4 = 0
  2626: 01                       fallthrough
      :                          @178
  2627: 82 17 38                 a0 = u64 [sp + 0x38]
  2630: 7b 17 58                 u64 [sp + 0x58] = a0
  2633: 48 21 bc 00 48 24        u32 [sp + 188] = 0x2448
  2639: 95 17 58                 a0 = sp + 0x58
  2642: 7b 17 98 00              u64 [sp + 0x98] = a0
  2646: 33 07 60                 a0 = 0x60
  2649: 7b 17 a0 00              u64 [sp + 0xa0] = a0
  2653: 95 17 bc 00              a0 = sp + 0xbc
  2657: 7b 17 a8 00              u64 [sp + 0xa8] = a0
  2661: 33 07 92 00              a0 = 0x92
  2665: 7b 17 b0 00              u64 [sp + 0xb0] = a0
  2669: 33 07 c8 00 01           a0 = 0x100c8
  2674: 7b 17 68                 u64 [sp + 0x68] = a0
  2677: 49 11 70 02              u64 [sp + 112] = 0x2
  2681: 49 21 88 00              u64 [sp + 136] = 0
  2685: 95 18 98 00              a1 = sp + 0x98
  2689: 7b 18 78                 u64 [sp + 0x78] = a1
  2692: 49 21 80 00 02           u64 [sp + 128] = 0x2
  2697: 95 17 c0 00              a0 = sp + 0xc0
  2701: 95 18 68                 a1 = sp + 0x68
  2704: 50 10 36 fe 03           ra = 54, jump @280
      :                          @179 [@dyn 27]
  2709: 82 15 c8 00              s0 = u64 [sp + 0xc8]
  2713: 82 1b d0 00              a4 = u64 [sp + 0xd0]
  2717: 82 16 c0 00              s1 = u64 [sp + 0xc0]
  2721: 33 07 01                 a0 = 0x1
  2724: 33 08                    a1 = 0
  2726: 33 09                    a2 = 0
  2728: 64 5a                    a3 = s0
  2730: 33 00 38                 ra = 0x38
  2733: 0a 64                    ecalli 100 // 'log'
  2735: 01                       fallthrough
      :                          @180 [@dyn 28]
  2736: 82 18                    a1 = u64 [sp]
  2738: c8 68 08                 a1 = a1 + s1
  2741: 33 07 01                 a0 = 0x1
  2744: 53 48 00 00 00 f8 29     jump @186 if a1 <u 4160749568
      :                          @181
  2751: 33 08 20 30 2d           a1 = 0x2d3020
  2756: 95 88 00 00 00 08        a1 = a1 + 0x8000000
  2762: 01                       fallthrough
      :                          @182
  2763: 82 89                    a2 = u64 [a1]
  2765: c9 98 0a                 a3 = a1 - a2
  2768: ab 5a 11                 jump @186 if a3 != s0
      :                          @183
  2771: c9 69 0a                 a3 = a2 - s1
  2774: 01                       fallthrough
      :                          @184
  2775: 82 8b                    a4 = u64 [a1]
  2777: ab 9b f2                 jump @182 if a4 != a2
      :                          @185
  2780: 7b 8a                    u64 [a1] = a3
  2782: 33 0c                    a5 = 0
  2784: 01                       fallthrough
      :                          @186
  2785: 49 11 68                 u64 [sp + 104] = 0
  2788: 7b 17 70                 u64 [sp + 0x70] = a0
  2791: 49 11 78                 u64 [sp + 120] = 0
  2794: 82 19 38                 a2 = u64 [sp + 0x38]
  2797: 52 09 66                 jump @198 if a2 != 0
      :                          @187
  2800: 33 07 0a                 a0 = 0xa
  2803: 33 0a 01                 a3 = 0x1
  2806: 33 08                    a1 = 0
  2808: 33 0b                    a4 = 0
  2810: 33 00 3a                 ra = 0x3a
  2813: 0a 64                    ecalli 100 // 'log'
  2815: 01                       fallthrough
      :                          @188 [@dyn 29]
  2816: 82 17                    a0 = u64 [sp]
  2818: 82 15 28                 s0 = u64 [sp + 0x28]
  2821: c8 57 07                 a0 = a0 + s0
  2824: 55 47 00 00 00 f8 11     jump @192 if a0 >=u 4160749568
      :                          @189
  2831: 82 18 38                 a1 = u64 [sp + 0x38]
  2834: 82 17 30                 a0 = u64 [sp + 0x30]
  2837: 28 2c                    jump @197
      :                          @190
  2839: 00                       trap
      :                          @191
  2840: 00                       trap
      :                          @192
  2841: 33 07 20 30 2d           a0 = 0x2d3020
  2846: 95 76 00 00 00 08        s1 = a0 + 0x8000000
  2852: 82 18 38                 a1 = u64 [sp + 0x38]
  2855: 82 17 30                 a0 = u64 [sp + 0x30]
  2858: 01                       fallthrough
      :                          @193
  2859: 82 6c                    a5 = u64 [s1]
  2861: c9 c6 09                 a2 = s1 - a5
  2864: ab 79 11                 jump @197 if a2 != a0
      :                          @194
  2867: c9 5c 09                 a2 = a5 - s0
  2870: 01                       fallthrough
      :                          @195
  2871: 82 6a                    a3 = u64 [s1]
  2873: ab ca f2                 jump @193 if a3 != a5
      :                          @196
  2876: 7b 69                    u64 [s1] = a2
  2878: 33 0b                    a4 = 0
  2880: 01                       fallthrough
      :                          @197
  2881: 82 10 e8 00              ra = u64 [sp + 0xe8]
  2885: 82 15 e0 00              s0 = u64 [sp + 0xe0]
  2889: 82 16 d8 00              s1 = u64 [sp + 0xd8]
  2893: 95 11 f0 00              sp = sp + 0xf0
  2897: 32 00                    ret
      :                          @198
  2899: 95 17 68                 a0 = sp + 0x68
  2902: 33 08                    a1 = 0
  2904: 50 10 3c 42 f9           ra = 60, jump @89
      :                          @199 [@dyn 30]
  2909: 82 15 30                 s0 = u64 [sp + 0x30]
  2912: 82 16 38                 s1 = u64 [sp + 0x38]
  2915: 28 19                    jump @201
      :                          @200
  2917: 82 1a 70                 a3 = u64 [sp + 0x70]
  2920: c8 8a 07                 a0 = a3 + a1
  2923: 78 7b                    u8 [a0] = a4
  2925: 95 8b 01                 a4 = a1 + 0x1
  2928: 7b 1b 78                 u64 [sp + 0x78] = a4
  2931: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
  2934: 95 55 01                 s0 = s0 + 0x1
  2937: 51 06 72                 jump @210 if s1 == 0
      :                          @201
  2940: 7d 5b                    a4 = i8 [s0]
  2942: 57 0b 1f                 jump @205 if a4 <s 0
      :                          @202
  2945: 82 18 78                 a1 = u64 [sp + 0x78]
  2948: 82 17 68                 a0 = u64 [sp + 0x68]
  2951: ab 78 de                 jump @200 if a1 != a0
      :                          @203
  2954: 95 17 68                 a0 = sp + 0x68
  2957: 7b 1b 20                 u64 [sp + 0x20] = a4
  2960: 50 10 3e 92 f8           ra = 62, jump @77
      :                          @204 [@dyn 31]
  2965: 82 1b 20                 a4 = u64 [sp + 0x20]
  2968: 82 18 78                 a1 = u64 [sp + 0x78]
  2971: 28 ca                    jump @200
      :                          @205
  2973: 82 18 78                 a1 = u64 [sp + 0x78]
  2976: 82 17 68                 a0 = u64 [sp + 0x68]
  2979: c9 87 07                 a0 = a0 - a1
  2982: 54 17 01 2f              jump @208 if a0 <=u 1
      :                          @206
  2986: 97 b7 38                 a0 = a4 << 0x38
  2989: 98 77 3e                 a0 = a0 >> 0x3e
  2992: 82 1a 70                 a3 = u64 [sp + 0x70]
  2995: 95 77 c0                 a0 = a0 + 0xffffffffffffffc0
  2998: 84 b9 3f                 a2 = a4 & 0x3f
  3001: 86 99 80                 a2 = a2 | 0xffffffffffffff80
  3004: c8 8a 0b                 a4 = a3 + a1
  3007: 78 b7                    u8 [a4] = a0
  3009: 78 b9 01                 u8 [a4 + 0x1] = a2
  3012: 95 8b 02                 a4 = a1 + 0x2
  3015: 7b 1b 78                 u64 [sp + 0x78] = a4
  3018: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
  3021: 95 55 01                 s0 = s0 + 0x1
  3024: 52 06 ac                 jump @201 if s1 != 0
      :                          @207
  3027: 28 18                    jump @210
      :                          @208
  3029: 95 17 68                 a0 = sp + 0x68
  3032: 33 09 02                 a2 = 0x2
  3035: 7b 1b 20                 u64 [sp + 0x20] = a4
  3038: 50 10 40 bc f8           ra = 64, jump @89
      :                          @209 [@dyn 32]
  3043: 82 1b 20                 a4 = u64 [sp + 0x20]
  3046: 82 18 78                 a1 = u64 [sp + 0x78]
  3049: 28 c1                    jump @206
      :                          @210
  3051: 82 15 68                 s0 = u64 [sp + 0x68]
  3054: 33 07 0a                 a0 = 0xa
  3057: 33 08                    a1 = 0
  3059: 33 09                    a2 = 0
  3061: 64 a6                    s1 = a3
  3063: 33 00 42                 ra = 0x42
  3066: 0a 64                    ecalli 100 // 'log'
  3068: 01                       fallthrough
      :                          @211 [@dyn 33]
  3069: 82 17                    a0 = u64 [sp]
  3071: c8 57 07                 a0 = a0 + s0
  3074: 53 47 00 00 00 f8 fe fe  jump @188 if a0 <u 4160749568
      :                          @212
  3082: 64 6c                    a5 = s1
  3084: 33 07 20 30 2d           a0 = 0x2d3020
  3089: 95 77 00 00 00 08        a0 = a0 + 0x8000000
  3095: 01                       fallthrough
      :                          @213
  3096: 82 78                    a1 = u64 [a0]
  3098: c9 87 09                 a2 = a0 - a1
  3101: ab c9 e3 fe              jump @188 if a2 != a5
      :                          @214
  3105: c9 58 09                 a2 = a1 - s0
  3108: 01                       fallthrough
      :                          @215
  3109: 82 7a                    a3 = u64 [a0]
  3111: ab 8a f1                 jump @213 if a3 != a1
      :                          @216
  3114: 7b 79                    u64 [a0] = a2
  3116: 33 0b                    a4 = 0
  3118: 01                       fallthrough
      :                          @217
  3119: ab 8a e9                 jump @213 if a3 != a1
      :                          @218
  3122: 28 ce fe                 jump @188
      :                          @219
  3125: 00                       trap
      :                          @220
  3126: 00                       trap
      :                          @221
  3127: 00                       trap
      :                          @222 [export #1: 'accumulate']
  3128: 33 07 00 00 01           a0 = 0x10000
  3133: 33 08                    a1 = 0
  3135: 32 00                    ret
      :                          @223 [export #2: 'on_transfer']
  3137: 33 07 00 00 01           a0 = 0x10000
  3142: 33 08                    a1 = 0
  3144: 32 00                    ret
      :                          @224
  3146: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  3149: 7b 10 40                 u64 [sp + 0x40] = ra
  3152: 7b 15 38                 u64 [sp + 0x38] = s0
  3155: 7b 16 30                 u64 [sp + 0x30] = s1
  3158: c8 89 09                 a2 = a2 + a1
  3161: ac 89 52                 jump @232 if a2 <u a1
      :                          @225
  3164: 64 75                    s0 = a0
  3166: 82 77                    a0 = u64 [a0]
  3168: 97 78 01                 a1 = a0 << 0x1
  3171: 33 0a 08                 a3 = 0x8
  3174: e4 a9 09                 a2 = maxu(a2, a3)
  3177: e4 98 06                 s1 = maxu(a1, a2)
  3180: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  3183: 98 88 3f                 a1 = a1 >> 0x3f
  3186: 51 07 12                 jump @227 if a0 == 0
      :                          @226
  3189: 82 59 08                 a2 = u64 [s0 + 0x8]
  3192: 7b 19 18                 u64 [sp + 0x18] = a2
  3195: 49 11 20 01              u64 [sp + 32] = 0x1
  3199: 7b 17 28                 u64 [sp + 0x28] = a0
  3202: 28 06                    jump @228
      :                          @227
  3204: 49 11 20                 u64 [sp + 32] = 0
  3207: 01                       fallthrough
      :                          @228
  3208: 64 17                    a0 = sp
  3210: 95 1a 18                 a3 = sp + 0x18
  3213: 64 69                    a2 = s1
  3215: 50 10 44 32              ra = 68, jump @236
      :                          @229 [@dyn 34]
  3219: 82 18                    a1 = u64 [sp]
  3221: 82 17 08                 a0 = u64 [sp + 0x8]
  3224: 51 08 14                 jump @233 if a1 == 0
      :                          @230
  3227: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  3237: aa 87 0d                 jump @234 if a0 == a1
      :                          @231
  3240: 52 07 18                 jump @235 if a0 != 0
      :                          @232
  3243: 00                       trap
      :                          @233
  3244: 7b 57 08                 u64 [s0 + 0x8] = a0
  3247: 7b 56                    u64 [s0] = s1
  3249: 01                       fallthrough
      :                          @234
  3250: 82 10 40                 ra = u64 [sp + 0x40]
  3253: 82 15 38                 s0 = u64 [sp + 0x38]
  3256: 82 16 30                 s1 = u64 [sp + 0x30]
  3259: 95 11 48                 sp = sp + 0x48
  3262: 32 00                    ret
      :                          @235
  3264: 00                       trap
      :                          @236
  3265: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  3268: 7b 10 30                 u64 [sp + 0x30] = ra
  3271: 7b 15 28                 u64 [sp + 0x28] = s0
  3274: 7b 16 20                 u64 [sp + 0x20] = s1
  3277: 64 95                    s0 = a2
  3279: 64 72                    t0 = a0
  3281: 51 08 7c                 jump @246 if a1 == 0
      :                          @237
  3284: 82 a7 08                 a0 = u64 [a3 + 0x8]
  3287: 51 07 7f                 jump @247 if a0 == 0
      :                          @238
  3290: 82 a9 10                 a2 = u64 [a3 + 0x10]
  3293: 51 09 ae 00              jump @254 if a2 == 0
      :                          @239
  3297: 82 a8                    a1 = u64 [a3]
  3299: 33 06 20 30 2d           s1 = 0x2d3020
  3304: 33 03 00 00 00 08        t1 = 0x8000000
  3310: c8 36 06                 s1 = s1 + t1
  3313: 01                       fallthrough
      :                          @240
  3314: 82 6a                    a3 = u64 [s1]
  3316: c8 5a 07                 a0 = a3 + s0
  3319: ac a7 d4 00              jump @260 if a0 <u a3
      :                          @241
  3323: 95 7b 01                 a4 = a0 + 0x1
  3326: 88 bc 01                 a5 = a4 <u 0x1
  3329: d8 b3 0b                 a4 = t1 <u a4
  3332: d4 cb 0b                 a4 = a4 | a5
  3335: 52 0b c4 00              jump @260 if a4 != 0
      :                          @242
  3339: 82 6b                    a4 = u64 [s1]
  3341: ab ab e5                 jump @240 if a4 != a3
      :                          @243
  3344: 7b 67                    u64 [s1] = a0
  3346: 33 0c                    a5 = 0
  3348: 7b 12 18                 u64 [sp + 0x18] = t0
  3351: 33 0a 20 30 2d           a3 = 0x2d3020
  3356: 33 0b 00 00 00 08        a4 = 0x8000000
  3362: 7b 1a                    u64 [sp] = a3
  3364: c8 ba 0a                 a3 = a3 + a4
  3367: c9 7a 07                 a0 = a3 - a0
  3370: 7b 17 10                 u64 [sp + 0x10] = a0
  3373: 7b 18 08                 u64 [sp + 0x8] = a1
  3376: 64 96                    s1 = a2
  3378: 50 10 46 d5 03           ra = 70, jump @330
      :                          @244 [@dyn 35]
  3383: 54 46 00 00 00 08 9c 00  jump @261 if s1 <=u 134217728
      :                          @245
  3391: 82 12 18                 t0 = u64 [sp + 0x18]
  3394: 82 18 10                 a1 = u64 [sp + 0x10]
  3397: 33 07                    a0 = 0
  3399: 7b 28 08                 u64 [t0 + 0x8] = a1
  3402: 28 b9 00                 jump @267
      :                          @246
  3405: 49 12 08                 u64 [t0 + 8] = 0
  3408: 33 07 01                 a0 = 0x1
  3411: 28 b0 00                 jump @267
      :                          @247
  3414: 33 09 20 30 2d           a2 = 0x2d3020
  3419: 33 07 00 00 00 08        a0 = 0x8000000
  3425: c8 79 09                 a2 = a2 + a0
  3428: 01                       fallthrough
      :                          @248
  3429: 82 9a                    a3 = u64 [a2]
  3431: c8 5a 08                 a1 = a3 + s0
  3434: ac a8 61                 jump @260 if a1 <u a3
      :                          @249
  3437: 95 8b 01                 a4 = a1 + 0x1
  3440: 88 bc 01                 a5 = a4 <u 0x1
  3443: d8 b7 0b                 a4 = a0 <u a4
  3446: d4 cb 0b                 a4 = a4 | a5
  3449: 52 0b 52                 jump @260 if a4 != 0
      :                          @250
  3452: 82 9b                    a4 = u64 [a2]
  3454: ab ab e7                 jump @248 if a4 != a3
      :                          @251
  3457: 7b 98                    u64 [a2] = a1
  3459: 33 0c                    a5 = 0
  3461: 01                       fallthrough
      :                          @252
  3462: ab ab df                 jump @248 if a4 != a3
      :                          @253
  3465: 28 32                    jump @259
      :                          @254
  3467: 33 09 20 30 2d           a2 = 0x2d3020
  3472: 33 07 00 00 00 08        a0 = 0x8000000
  3478: c8 79 09                 a2 = a2 + a0
  3481: 01                       fallthrough
      :                          @255
  3482: 82 9a                    a3 = u64 [a2]
  3484: c8 5a 08                 a1 = a3 + s0
  3487: ac a8 2c                 jump @260 if a1 <u a3
      :                          @256
  3490: 95 8b 01                 a4 = a1 + 0x1
  3493: 88 bc 01                 a5 = a4 <u 0x1
  3496: d8 b7 0b                 a4 = a0 <u a4
  3499: d4 cb 0b                 a4 = a4 | a5
  3502: 52 0b 1d                 jump @260 if a4 != 0
      :                          @257
  3505: 82 9b                    a4 = u64 [a2]
  3507: ab ab e7                 jump @255 if a4 != a3
      :                          @258
  3510: 7b 98                    u64 [a2] = a1
  3512: 33 0c                    a5 = 0
  3514: 01                       fallthrough
      :                          @259
  3515: 33 07 20 30 2d 08        a0 = 0x82d3020
  3521: c9 87 08                 a1 = a0 - a1
  3524: 33 07                    a0 = 0
  3526: 7b 28 08                 u64 [t0 + 0x8] = a1
  3529: 28 3a                    jump @267
      :                          @260
  3531: 33 07 01                 a0 = 0x1
  3534: 7b 27 08                 u64 [t0 + 0x8] = a0
  3537: 28 32                    jump @267
      :                          @261
  3539: 64 6c                    a5 = s1
  3541: 82 17                    a0 = u64 [sp]
  3543: 95 77 00 00 00 08        a0 = a0 + 0x8000000
  3549: 82 12 18                 t0 = u64 [sp + 0x18]
  3552: 82 16 08                 s1 = u64 [sp + 0x8]
  3555: 01                       fallthrough
      :                          @262
  3556: 82 78                    a1 = u64 [a0]
  3558: c9 87 09                 a2 = a0 - a1
  3561: ab 69 11                 jump @266 if a2 != s1
      :                          @263
  3564: c9 c8 09                 a2 = a1 - a5
  3567: 01                       fallthrough
      :                          @264
  3568: 82 7a                    a3 = u64 [a0]
  3570: ab 8a f2                 jump @262 if a3 != a1
      :                          @265
  3573: 7b 79                    u64 [a0] = a2
  3575: 33 0b                    a4 = 0
  3577: 01                       fallthrough
      :                          @266
  3578: 82 18 10                 a1 = u64 [sp + 0x10]
  3581: 33 07                    a0 = 0
  3583: 7b 28 08                 u64 [t0 + 0x8] = a1
  3586: 01                       fallthrough
      :                          @267
  3587: 7b 25 10                 u64 [t0 + 0x10] = s0
  3590: 7b 27                    u64 [t0] = a0
  3592: 82 10 30                 ra = u64 [sp + 0x30]
  3595: 82 15 28                 s0 = u64 [sp + 0x28]
  3598: 82 16 20                 s1 = u64 [sp + 0x20]
  3601: 95 11 38                 sp = sp + 0x38
  3604: 32 00                    ret
      :                          @268
  3606: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  3609: 7b 10 40                 u64 [sp + 0x40] = ra
  3612: 7b 15 38                 u64 [sp + 0x38] = s0
  3615: 7b 16 30                 u64 [sp + 0x30] = s1
  3618: 95 88 01                 a1 = a1 + 0x1
  3621: 51 08 53                 jump @276 if a1 == 0
      :                          @269
  3624: 64 75                    s0 = a0
  3626: 82 77                    a0 = u64 [a0]
  3628: 97 79 01                 a2 = a0 << 0x1
  3631: 33 0a 08                 a3 = 0x8
  3634: e4 a8 08                 a1 = maxu(a1, a3)
  3637: e4 89 06                 s1 = maxu(a2, a1)
  3640: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  3643: 98 88 3f                 a1 = a1 >> 0x3f
  3646: 51 07 12                 jump @271 if a0 == 0
      :                          @270
  3649: 82 59 08                 a2 = u64 [s0 + 0x8]
  3652: 7b 19 18                 u64 [sp + 0x18] = a2
  3655: 49 11 20 01              u64 [sp + 32] = 0x1
  3659: 7b 17 28                 u64 [sp + 0x28] = a0
  3662: 28 06                    jump @272
      :                          @271
  3664: 49 11 20                 u64 [sp + 32] = 0
  3667: 01                       fallthrough
      :                          @272
  3668: 64 17                    a0 = sp
  3670: 95 1a 18                 a3 = sp + 0x18
  3673: 64 69                    a2 = s1
  3675: 50 10 48 66 fe           ra = 72, jump @236
      :                          @273 [@dyn 36]
  3680: 82 18                    a1 = u64 [sp]
  3682: 82 17 08                 a0 = u64 [sp + 0x8]
  3685: 51 08 14                 jump @277 if a1 == 0
      :                          @274
  3688: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  3698: aa 87 0d                 jump @278 if a0 == a1
      :                          @275
  3701: 52 07 18                 jump @279 if a0 != 0
      :                          @276
  3704: 00                       trap
      :                          @277
  3705: 7b 57 08                 u64 [s0 + 0x8] = a0
  3708: 7b 56                    u64 [s0] = s1
  3710: 01                       fallthrough
      :                          @278
  3711: 82 10 40                 ra = u64 [sp + 0x40]
  3714: 82 15 38                 s0 = u64 [sp + 0x38]
  3717: 82 16 30                 s1 = u64 [sp + 0x30]
  3720: 95 11 48                 sp = sp + 0x48
  3723: 32 00                    ret
      :                          @279
  3725: 00                       trap
      :                          @280
  3726: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  3729: 7b 10 30                 u64 [sp + 0x30] = ra
  3732: 7b 15 28                 u64 [sp + 0x28] = s0
  3735: 7b 16 20                 u64 [sp + 0x20] = s1
  3738: 64 89                    a2 = a1
  3740: 82 8a 08                 a3 = u64 [a1 + 0x8]
  3743: 64 75                    s0 = a0
  3745: 51 0a 35                 jump @285 if a3 == 0
      :                          @281
  3748: 82 98                    a1 = u64 [a2]
  3750: 33 07                    a0 = 0
  3752: 95 8b 08                 a4 = a1 + 0x8
  3755: 01                       fallthrough
      :                          @282
  3756: 82 bc                    a5 = u64 [a4]
  3758: c8 c7 07                 a0 = a0 + a5
  3761: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  3764: 95 bb 10                 a4 = a4 + 0x10
  3767: 52 0a f5                 jump @282 if a3 != 0
      :                          @283
  3770: 82 9a 18                 a3 = u64 [a2 + 0x18]
  3773: 51 0a 24                 jump @287 if a3 == 0
      :                          @284
  3776: 82 88 08                 a1 = u64 [a1 + 0x8]
  3779: 8e 88                    a1 = a1 >u 0
  3781: 88 7a 10                 a3 = a0 <u 0x10
  3784: 85 aa 01                 a3 = a3 ^ 0x1
  3787: d4 a8 08                 a1 = a1 | a3
  3790: 89 7a                    a3 = a0 <s 0
  3792: e0 a8 08                 a1 = a1 & ~a3
  3795: 52 08 0a                 jump @286 if a1 != 0
      :                          @285
  3798: 33 07                    a0 = 0
  3800: 33 08 01                 a1 = 0x1
  3803: 28 4c                    jump @295
      :                          @286
  3805: 97 77 01                 a0 = a0 << 0x1
  3808: 01                       fallthrough
      :                          @287
  3809: 51 07 42                 jump @294 if a0 == 0
      :                          @288
  3812: 57 07 7a                 jump @300 if a0 <s 0
      :                          @289
  3815: 64 52                    t0 = s0
  3817: 33 0b 20 30 2d           a4 = 0x2d3020
  3822: 33 08 00 00 00 08        a1 = 0x8000000
  3828: c8 8b 0b                 a4 = a4 + a1
  3831: 01                       fallthrough
      :                          @290
  3832: 82 bc                    a5 = u64 [a4]
  3834: c8 7c 0a                 a3 = a5 + a0
  3837: ac ca 5f                 jump @298 if a3 <u a5
      :                          @291
  3840: 95 a5 01                 s0 = a3 + 0x1
  3843: 88 56 01                 s1 = s0 <u 0x1
  3846: d8 58 05                 s0 = a1 <u s0
  3849: d4 65 05                 s0 = s0 | s1
  3852: 52 05 50                 jump @298 if s0 != 0
      :                          @292
  3855: 82 b6                    s1 = u64 [a4]
  3857: ab c6 e7                 jump @290 if s1 != a5
      :                          @293
  3860: 7b ba                    u64 [a4] = a3
  3862: 33 08 20 30 2d 08        a1 = 0x82d3020
  3868: c9 a8 08                 a1 = a1 - a3
  3871: 64 25                    s0 = t0
  3873: 28 06                    jump @295
      :                          @294
  3875: 33 08 01                 a1 = 0x1
  3878: 01                       fallthrough
      :                          @295
  3879: 7b 17                    u64 [sp] = a0
  3881: 7b 18 08                 u64 [sp + 0x8] = a1
  3884: 49 11 10                 u64 [sp + 16] = 0
  3887: 33 08 00 01 01           a1 = 0x10100
  3892: 64 17                    a0 = sp
  3894: 50 10 4a 3d 06           ra = 74, jump @415
      :                          @296 [@dyn 37]
  3899: 52 07 22                 jump @299 if a0 != 0
      :                          @297
  3902: 82 17 10                 a0 = u64 [sp + 0x10]
  3905: 82 18 08                 a1 = u64 [sp + 0x8]
  3908: 82 19                    a2 = u64 [sp]
  3910: 7b 57 10                 u64 [s0 + 0x10] = a0
  3913: 7b 58 08                 u64 [s0 + 0x8] = a1
  3916: 7b 59                    u64 [s0] = a2
  3918: 82 10 30                 ra = u64 [sp + 0x30]
  3921: 82 15 28                 s0 = u64 [sp + 0x28]
  3924: 82 16 20                 s1 = u64 [sp + 0x20]
  3927: 95 11 38                 sp = sp + 0x38
  3930: 32 00                    ret
      :                          @298
  3932: 00                       trap
      :                          @299
  3933: 00                       trap
      :                          @300
  3934: 00                       trap
      :                          @301 [@dyn 38]
  3935: 82 72                    t0 = u64 [a0]
  3937: 33 09 00 00 00 f8        a2 = 0xfffffffff8000000
  3943: 95 2a ff ff ff f7        a3 = t0 + 0xfffffffff7ffffff
  3949: ac 9a 29                 jump @307 if a3 <u a2
      :                          @302
  3952: 82 77 08                 a0 = u64 [a0 + 0x8]
  3955: 33 09 20 30 2d           a2 = 0x2d3020
  3960: 95 99 00 00 00 08        a2 = a2 + 0x8000000
  3966: 01                       fallthrough
      :                          @303
  3967: 82 9a                    a3 = u64 [a2]
  3969: c9 a9 0b                 a4 = a2 - a3
  3972: ab 7b 12                 jump @307 if a4 != a0
      :                          @304
  3975: c9 2a 0b                 a4 = a3 - t0
  3978: 01                       fallthrough
      :                          @305
  3979: 82 9c                    a5 = u64 [a2]
  3981: ab ac f2                 jump @303 if a5 != a3
      :                          @306
  3984: 7b 9b                    u64 [a2] = a4
  3986: 33 08                    a1 = 0
  3988: 32 00                    ret
      :                          @307
  3990: 32 00                    ret
      :                          @308 [@dyn 39]
  3992: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  3995: 7b 10 18                 u64 [sp + 0x18] = ra
  3998: 7b 15 10                 u64 [sp + 0x10] = s0
  4001: 7b 16 08                 u64 [sp + 0x8] = s1
  4004: 64 75                    s0 = a0
  4006: 82 7a 10                 a3 = u64 [a0 + 0x10]
  4009: 82 77                    a0 = u64 [a0]
  4011: c9 a7 07                 a0 = a0 - a3
  4014: 64 96                    s1 = a2
  4016: ac 97 2a                 jump @311 if a0 <u a2
      :                          @309
  4019: 7b 1a                    u64 [sp] = a3
  4021: 82 57 08                 a0 = u64 [s0 + 0x8]
  4024: c8 a7 07                 a0 = a0 + a3
  4027: 64 69                    a2 = s1
  4029: 50 10 50 4a 01           ra = 80, jump @330
      :                          @310 [@dyn 40]
  4034: 82 17                    a0 = u64 [sp]
  4036: c8 76 06                 s1 = s1 + a0
  4039: 7b 56 10                 u64 [s0 + 0x10] = s1
  4042: 33 07                    a0 = 0
  4044: 82 10 18                 ra = u64 [sp + 0x18]
  4047: 82 15 10                 s0 = u64 [sp + 0x10]
  4050: 82 16 08                 s1 = u64 [sp + 0x8]
  4053: 95 11 20                 sp = sp + 0x20
  4056: 32 00                    ret
      :                          @311
  4058: 64 57                    a0 = s0
  4060: 7b 18                    u64 [sp] = a1
  4062: 64 a8                    a1 = a3
  4064: 64 69                    a2 = s1
  4066: 50 10 52 68 fc           ra = 82, jump @224
      :                          @312 [@dyn 41]
  4071: 82 18                    a1 = u64 [sp]
  4073: 82 5a 10                 a3 = u64 [s0 + 0x10]
  4076: 28 c7                    jump @309
      :                          @313 [@dyn 42]
  4078: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  4081: 7b 10 20                 u64 [sp + 0x20] = ra
  4084: 7b 15 18                 u64 [sp + 0x18] = s0
  4087: 7b 16 10                 u64 [sp + 0x10] = s1
  4090: 64 86                    s1 = a1
  4092: 83 88                    i32 a1 = a1 + 0
  4094: 33 09 80 00              a2 = 0x80
  4098: 64 7a                    a3 = a0
  4100: ae 98 2b                 jump @318 if a1 >=u a2
      :                          @314
  4103: 82 a8 10                 a1 = u64 [a3 + 0x10]
  4106: 82 a7                    a0 = u64 [a3]
  4108: ab 78 12                 jump @317 if a1 != a0
      :                          @315
  4111: 64 a7                    a0 = a3
  4113: 64 a5                    s0 = a3
  4115: 50 10 56 03 fe           ra = 86, jump @268
      :                          @316 [@dyn 43]
  4120: 64 5a                    a3 = s0
  4122: 82 58 10                 a1 = u64 [s0 + 0x10]
  4125: 01                       fallthrough
      :                          @317
  4126: 82 a7 08                 a0 = u64 [a3 + 0x8]
  4129: c8 87 07                 a0 = a0 + a1
  4132: 78 76                    u8 [a0] = s1
  4134: 95 88 01                 a1 = a1 + 0x1
  4137: 7b a8 10                 u64 [a3 + 0x10] = a1
  4140: 28 ab 00                 jump @326
      :                          @318
  4143: 8b 67 0b                 i32 a0 = s1 >> 0xb
  4146: 48 11 0c                 u32 [sp + 12] = 0
  4149: 52 07 1c                 jump @320 if a0 != 0
      :                          @319
  4152: 98 67 06                 a0 = s1 >> 0x6
  4155: 86 77 c0 00              a0 = a0 | 0xc0
  4159: 78 17 0c                 u8 [sp + 0xc] = a0
  4162: 84 67 3f                 a0 = s1 & 0x3f
  4165: 86 77 80 00              a0 = a0 | 0x80
  4169: 78 17 0d                 u8 [sp + 0xd] = a0
  4172: 33 06 02                 s1 = 0x2
  4175: 28 63                    jump @323
      :                          @320
  4177: 8b 67 10                 i32 a0 = s1 >> 0x10
  4180: 52 07 29                 jump @322 if a0 != 0
      :                          @321
  4183: 98 67 0c                 a0 = s1 >> 0xc
  4186: 86 77 e0 00              a0 = a0 | 0xe0
  4190: 78 17 0c                 u8 [sp + 0xc] = a0
  4193: 97 67 34                 a0 = s1 << 0x34
  4196: 98 77 3a                 a0 = a0 >> 0x3a
  4199: 95 77 80 00              a0 = a0 + 0x80
  4203: 78 17 0d                 u8 [sp + 0xd] = a0
  4206: 84 67 3f                 a0 = s1 & 0x3f
  4209: 86 77 80 00              a0 = a0 | 0x80
  4213: 78 17 0e                 u8 [sp + 0xe] = a0
  4216: 33 06 03                 s1 = 0x3
  4219: 28 37                    jump @323
      :                          @322
  4221: 97 67 2b                 a0 = s1 << 0x2b
  4224: 98 77 3d                 a0 = a0 >> 0x3d
  4227: 95 77 f0 00              a0 = a0 + 0xf0
  4231: 78 17 0c                 u8 [sp + 0xc] = a0
  4234: 97 67 2e                 a0 = s1 << 0x2e
  4237: 98 77 3a                 a0 = a0 >> 0x3a
  4240: 95 77 80 00              a0 = a0 + 0x80
  4244: 78 17 0d                 u8 [sp + 0xd] = a0
  4247: 97 67 34                 a0 = s1 << 0x34
  4250: 98 77 3a                 a0 = a0 >> 0x3a
  4253: 95 77 80 00              a0 = a0 + 0x80
  4257: 78 17 0e                 u8 [sp + 0xe] = a0
  4260: 84 67 3f                 a0 = s1 & 0x3f
  4263: 86 77 80 00              a0 = a0 | 0x80
  4267: 78 17 0f                 u8 [sp + 0xf] = a0
  4270: 33 06 04                 s1 = 0x4
  4273: 01                       fallthrough
      :                          @323
  4274: 82 a5 10                 s0 = u64 [a3 + 0x10]
  4277: 82 a7                    a0 = u64 [a3]
  4279: c9 57 07                 a0 = a0 - s0
  4282: ac 67 2d                 jump @327 if a0 <u s1
      :                          @324
  4285: 7b 1a                    u64 [sp] = a3
  4287: 82 a7 08                 a0 = u64 [a3 + 0x8]
  4290: c8 57 07                 a0 = a0 + s0
  4293: 95 18 0c                 a1 = sp + 0xc
  4296: 64 69                    a2 = s1
  4298: 50 10 58 3d              ra = 88, jump @330
      :                          @325 [@dyn 44]
  4302: c8 56 06                 s1 = s1 + s0
  4305: 82 17                    a0 = u64 [sp]
  4307: 7b 76 10                 u64 [a0 + 0x10] = s1
  4310: 01                       fallthrough
      :                          @326
  4311: 33 07                    a0 = 0
  4313: 82 10 20                 ra = u64 [sp + 0x20]
  4316: 82 15 18                 s0 = u64 [sp + 0x18]
  4319: 82 16 10                 s1 = u64 [sp + 0x10]
  4322: 95 11 28                 sp = sp + 0x28
  4325: 32 00                    ret
      :                          @327
  4327: 64 a7                    a0 = a3
  4329: 64 58                    a1 = s0
  4331: 64 69                    a2 = s1
  4333: 64 a5                    s0 = a3
  4335: 50 10 5a 5b fb           ra = 90, jump @224
      :                          @328 [@dyn 45]
  4340: 64 5a                    a3 = s0
  4342: 82 55 10                 s0 = u64 [s0 + 0x10]
  4345: 28 c4                    jump @324
      :                          @329 [@dyn 46]
  4347: 64 8a                    a3 = a1
  4349: 33 08 00 01 01           a1 = 0x10100
  4354: 64 a9                    a2 = a3
  4356: 28 6f 04                 jump @415
      :                          @330
  4359: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  4362: 7b 10 18                 u64 [sp + 0x18] = ra
  4365: 7b 15 10                 u64 [sp + 0x10] = s0
  4368: 7b 16 08                 u64 [sp + 0x8] = s1
  4371: 53 19 10 64              jump @339 if a2 <u 16
      :                          @331
  4375: 8d 7a                    i32 a3 = -a0
  4377: 84 a2 07                 t0 = a3 & 0x7
  4380: c8 27 0b                 a4 = a0 + t0
  4383: 51 02 15                 jump @334 if t0 == 0
      :                          @332
  4386: 64 8c                    a5 = a1
  4388: 64 75                    s0 = a0
  4390: 01                       fallthrough
      :                          @333
  4391: 7c ca                    a3 = u8 [a5]
  4393: 78 5a                    u8 [s0] = a3
  4395: 95 55 01                 s0 = s0 + 0x1
  4398: 95 cc 01                 a5 = a5 + 0x1
  4401: ac b5 f6                 jump @333 if s0 <u a4
      :                          @334
  4404: c8 28 03                 t1 = a1 + t0
  4407: c9 29 02                 t0 = a2 - t0
  4410: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  4413: 84 38 07                 a1 = t1 & 0x7
  4416: c8 4b 0a                 a3 = a4 + t2
  4419: 51 08 3b                 jump @341 if a1 == 0
      :                          @335
  4422: 58 04 4b                 jump @344 if t2 <=s 0
      :                          @336
  4425: 97 38 03                 a1 = t1 << 0x3
  4428: 84 80 38                 ra = a1 & 0x38
  4431: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  4434: 82 c5                    s0 = u64 [a5]
  4436: 8d 88                    i32 a1 = -a1
  4438: 84 88 38                 a1 = a1 & 0x38
  4441: 95 cc 08                 a5 = a5 + 0x8
  4444: 01                       fallthrough
      :                          @337
  4445: 82 c6                    s1 = u64 [a5]
  4447: d0 05 05                 s0 = s0 >> ra
  4450: cf 86 09                 a2 = s1 << a1
  4453: d4 59 09                 a2 = a2 | s0
  4456: 7b b9                    u64 [a4] = a2
  4458: 95 bb 08                 a4 = a4 + 0x8
  4461: 95 cc 08                 a5 = a5 + 0x8
  4464: 64 65                    s0 = s1
  4466: ac ab eb                 jump @337 if a4 <u a3
      :                          @338
  4469: 28 1c                    jump @344
      :                          @339
  4471: 64 7a                    a3 = a0
  4473: 52 09 21                 jump @345 if a2 != 0
      :                          @340
  4476: 28 2f                    jump @347
      :                          @341
  4478: 58 04 13                 jump @344 if t2 <=s 0
      :                          @342
  4481: 64 38                    a1 = t1
  4483: 01                       fallthrough
      :                          @343
  4484: 82 89                    a2 = u64 [a1]
  4486: 7b b9                    u64 [a4] = a2
  4488: 95 bb 08                 a4 = a4 + 0x8
  4491: 95 88 08                 a1 = a1 + 0x8
  4494: ac ab f6                 jump @343 if a4 <u a3
      :                          @344
  4497: c8 43 08                 a1 = t1 + t2
  4500: 84 29 07                 a2 = t0 & 0x7
  4503: 51 09 14                 jump @347 if a2 == 0
      :                          @345
  4506: c8 a9 09                 a2 = a2 + a3
  4509: 01                       fallthrough
      :                          @346
  4510: 7c 8b                    a4 = u8 [a1]
  4512: 78 ab                    u8 [a3] = a4
  4514: 95 aa 01                 a3 = a3 + 0x1
  4517: 95 88 01                 a1 = a1 + 0x1
  4520: ac 9a f6                 jump @346 if a3 <u a2
      :                          @347
  4523: 82 10 18                 ra = u64 [sp + 0x18]
  4526: 82 15 10                 s0 = u64 [sp + 0x10]
  4529: 82 16 08                 s1 = u64 [sp + 0x8]
  4532: 95 11 20                 sp = sp + 0x20
  4535: 32 00                    ret
      :                          @348 [@dyn 47]
  4537: 82 77                    a0 = u64 [a0]
  4539: 01                       fallthrough
      :                          @349
  4540: 28                       jump @349
      :                          @350 [@dyn 48]
  4541: 82 77                    a0 = u64 [a0]
  4543: 64 89                    a2 = a1
  4545: 33 08 01                 a1 = 0x1
  4548: 01                       fallthrough
      :                          @351
  4549: 95 11 a0                 sp = sp + 0xffffffffffffffa0
  4552: 7b 10 58                 u64 [sp + 0x58] = ra
  4555: 7b 15 50                 u64 [sp + 0x50] = s0
  4558: 7b 16 48                 u64 [sp + 0x48] = s1
  4561: 7b 19 08                 u64 [sp + 0x8] = a2
  4564: 7b 18                    u64 [sp] = a1
  4566: 98 7a 04                 a3 = a0 >> 0x4
  4569: 33 09 27                 a2 = 0x27
  4572: 53 2a 71 02 81 00        jump @354 if a3 <u 625
      :                          @352
  4578: 33 09 27                 a2 = 0x27
  4581: 95 1b 46                 a4 = sp + 0x46
  4584: 3a 08 08 00 03           a1 = u64 [0x30008]
  4589: 7b 18 18                 u64 [sp + 0x18] = a1
  4592: 49 11 10 f0 d8 00        u64 [sp + 16] = 0xd8f0
  4598: 33 03 7b 14              t1 = 0x147b
  4602: 33 05 74 01 01           s0 = 0x10174
  4607: 33 00 ff e0 f5 05        ra = 0x5f5e0ff
  4613: 01                       fallthrough
      :                          @353
  4614: 64 74                    t2 = a0
  4616: 82 17 18                 a0 = u64 [sp + 0x18]
  4619: d6 74 07                 a0 = t2 mulhu a0
  4622: 98 77 0b                 a0 = a0 >> 0xb
  4625: 82 18 10                 a1 = u64 [sp + 0x10]
  4628: c0 87 02                 i32 t0 = a0 * a1
  4631: c8 42 0a                 a3 = t0 + t2
  4634: 97 a2 30                 t0 = a3 << 0x30
  4637: 98 28 32                 a1 = t0 >> 0x32
  4640: ca 38 08                 a1 = a1 * t1
  4643: 98 8c 11                 a5 = a1 >> 0x11
  4646: 98 88 10                 a1 = a1 >> 0x10
  4649: 84 88 fe 07              a1 = a1 & 0x7fe
  4653: 96 cc 9c                 a5 = a5 * 0xffffffffffffff9c
  4656: c8 ca 0a                 a3 = a3 + a5
  4659: 97 aa 31                 a3 = a3 << 0x31
  4662: 98 aa 30                 a3 = a3 >> 0x30
  4665: c8 58 08                 a1 = a1 + s0
  4668: 7c 8c                    a5 = u8 [a1]
  4670: 7c 88 01                 a1 = u8 [a1 + 0x1]
  4673: c8 5a 0a                 a3 = a3 + s0
  4676: 7c a6 01                 s1 = u8 [a3 + 0x1]
  4679: 7c aa                    a3 = u8 [a3]
  4681: 78 b8 ff                 u8 [a4 + 0xffffffffffffffff] = a1
  4684: 78 bc fe                 u8 [a4 + 0xfffffffffffffffe] = a5
  4687: 78 b6 01                 u8 [a4 + 0x1] = s1
  4690: 78 ba                    u8 [a4] = a3
  4692: 95 99 fc                 a2 = a2 + 0xfffffffffffffffc
  4695: 95 bb fc                 a4 = a4 + 0xfffffffffffffffc
  4698: ac 40 ac                 jump @353 if ra <u t2
      :                          @354
  4701: 54 17 63 3b              jump @356 if a0 <=u 99
      :                          @355
  4705: 97 78 30                 a1 = a0 << 0x30
  4708: 98 88 32                 a1 = a1 >> 0x32
  4711: 96 88 7b 14              a1 = a1 * 0x147b
  4715: 98 88 11                 a1 = a1 >> 0x11
  4718: 96 8a 9c                 a3 = a1 * 0xffffffffffffff9c
  4721: c8 a7 07                 a0 = a0 + a3
  4724: 97 77 31                 a0 = a0 << 0x31
  4727: 98 77 30                 a0 = a0 >> 0x30
  4730: 95 99 fe                 a2 = a2 + 0xfffffffffffffffe
  4733: 33 0a 74 01 01           a3 = 0x10174
  4738: c8 a7 07                 a0 = a0 + a3
  4741: 7c 7a 01                 a3 = u8 [a0 + 0x1]
  4744: 7c 77                    a0 = u8 [a0]
  4746: 95 1b 21                 a4 = sp + 0x21
  4749: c8 9b 0b                 a4 = a4 + a2
  4752: 78 ba 01                 u8 [a4 + 0x1] = a3
  4755: 78 b7                    u8 [a4] = a0
  4757: 64 87                    a0 = a1
  4759: 01                       fallthrough
      :                          @356
  4760: 55 17 0a 14              jump @358 if a0 >=u 10
      :                          @357
  4764: 95 99 ff                 a2 = a2 + 0xffffffffffffffff
  4767: 95 18 21                 a1 = sp + 0x21
  4770: c8 98 08                 a1 = a1 + a2
  4773: 83 77 30                 i32 a0 = a0 + 0x30
  4776: 78 87                    u8 [a1] = a0
  4778: 28 21                    jump @359
      :                          @358
  4780: 97 77 01                 a0 = a0 << 0x1
  4783: 95 99 fe                 a2 = a2 + 0xfffffffffffffffe
  4786: 33 08 74 01 01           a1 = 0x10174
  4791: c8 87 07                 a0 = a0 + a1
  4794: 7c 78 01                 a1 = u8 [a0 + 0x1]
  4797: 7c 77                    a0 = u8 [a0]
  4799: 95 1a 21                 a3 = sp + 0x21
  4802: c8 9a 0a                 a3 = a3 + a2
  4805: 78 a8 01                 u8 [a3 + 0x1] = a1
  4808: 78 a7                    u8 [a3] = a0
  4810: 01                       fallthrough
      :                          @359
  4811: 95 1b 21                 a4 = sp + 0x21
  4814: c8 9b 0b                 a4 = a4 + a2
  4817: 9a 9c 27                 a5 = 0x27 - a2
  4820: 33 09 30 01 01           a2 = 0x10130
  4825: 82 17 08                 a0 = u64 [sp + 0x8]
  4828: 82 18                    a1 = u64 [sp]
  4830: 33 0a                    a3 = 0
  4832: 50 10 62 12              ra = 98, jump @361
      :                          @360 [@dyn 49]
  4836: 82 10 58                 ra = u64 [sp + 0x58]
  4839: 82 15 50                 s0 = u64 [sp + 0x50]
  4842: 82 16 48                 s1 = u64 [sp + 0x48]
  4845: 95 11 60                 sp = sp + 0x60
  4848: 32 00                    ret
      :                          @361
  4850: 95 11 98                 sp = sp + 0xffffffffffffff98
  4853: 7b 10 60                 u64 [sp + 0x60] = ra
  4856: 7b 15 58                 u64 [sp + 0x58] = s0
  4859: 7b 16 50                 u64 [sp + 0x50] = s1
  4862: 7b 1b 18                 u64 [sp + 0x18] = a4
  4865: 51 08 4f                 jump @368 if a1 == 0
      :                          @362
  4868: 80 76 34                 s1 = u32 [a0 + 0x34]
  4871: 84 68 01                 a1 = s1 & 0x1
  4874: 33 0b 2b                 a4 = 0x2b
  4877: 33 05 00 00 11           s0 = 0x110000
  4882: db 8b 05                 s0 = a4 if a1 != 0
  4885: 7b 15 28                 u64 [sp + 0x28] = s0
  4888: c8 c8 02                 t0 = a1 + a5
  4891: 84 68 04                 a1 = s1 & 0x4
  4894: 51 08 42                 jump @369 if a1 == 0
      :                          @363
  4897: 7b 19 30                 u64 [sp + 0x30] = a2
  4900: 33 08                    a1 = 0
  4902: 51 0a 1a                 jump @366 if a3 == 0
      :                          @364
  4905: 64 a5                    s0 = a3
  4907: 01                       fallthrough
      :                          @365
  4908: 7d 9b                    a4 = i8 [a2]
  4910: 89 bb c0                 a4 = a4 <s 0xffffffffffffffc0
  4913: 85 bb 01                 a4 = a4 ^ 0x1
  4916: c8 b8 08                 a1 = a1 + a4
  4919: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  4922: 95 99 01                 a2 = a2 + 0x1
  4925: 52 05 ef                 jump @365 if s0 != 0
      :                          @366
  4928: c8 82 02                 t0 = t0 + a1
  4931: 7b 1a 38                 u64 [sp + 0x38] = a3
  4934: 82 78                    a1 = u64 [a0]
  4936: 7b 1c 20                 u64 [sp + 0x20] = a5
  4939: 52 08 23                 jump @370 if a1 != 0
      :                          @367
  4942: 28 41                    jump @375
      :                          @368
  4944: 81 76 34                 s1 = i32 [a0 + 0x34]
  4947: 95 c2 01                 t0 = a5 + 0x1
  4950: 49 11 28 2d              u64 [sp + 40] = 0x2d
  4954: 84 68 04                 a1 = s1 & 0x4
  4957: 52 08 c4                 jump @363 if a1 != 0
      :                          @369
  4960: 49 11 30                 u64 [sp + 48] = 0
  4963: 7b 1a 38                 u64 [sp + 0x38] = a3
  4966: 82 78                    a1 = u64 [a0]
  4968: 7b 1c 20                 u64 [sp + 0x20] = a5
  4971: 51 08 24                 jump @375 if a1 == 0
      :                          @370
  4974: 82 75 08                 s0 = u64 [a0 + 0x8]
  4977: ae 52 1e                 jump @375 if t0 >=u s0
      :                          @371
  4980: 84 66 08                 s1 = s1 & 0x8
  4983: 52 06 50                 jump @378 if s1 != 0
      :                          @372
  4986: 7c 79 38                 a2 = u8 [a0 + 0x38]
  4989: c9 25 0a                 a3 = s0 - t0
  4992: 5a 19 01 a1 00           jump @385 if a2 >s 1
      :                          @373
  4997: 52 09 ae 00              jump @387 if a2 != 0
      :                          @374
  5001: 7b 1a 10                 u64 [sp + 0x10] = a3
  5004: 28 ad 00                 jump @388
      :                          @375
  5007: 82 75 20                 s0 = u64 [a0 + 0x20]
  5010: 82 76 28                 s1 = u64 [a0 + 0x28]
  5013: 64 57                    a0 = s0
  5015: 64 68                    a1 = s1
  5017: 82 19 28                 a2 = u64 [sp + 0x28]
  5020: 82 1a 30                 a3 = u64 [sp + 0x30]
  5023: 82 1b 38                 a4 = u64 [sp + 0x38]
  5026: 50 10 64 6d 01           ra = 100, jump @408
      :                          @376 [@dyn 50]
  5031: 33 08 01                 a1 = 0x1
  5034: 52 07 bc 00              jump @393 if a0 != 0
      :                          @377
  5038: 82 6c 18                 a5 = u64 [s1 + 0x18]
  5041: 64 57                    a0 = s0
  5043: 82 18 18                 a1 = u64 [sp + 0x18]
  5046: 82 19 20                 a2 = u64 [sp + 0x20]
  5049: 82 10 60                 ra = u64 [sp + 0x60]
  5052: 82 15 58                 s0 = u64 [sp + 0x58]
  5055: 82 16 50                 s1 = u64 [sp + 0x50]
  5058: 95 11 68                 sp = sp + 0x68
  5061: 32 0c                    jump [a5]
      :                          @378
  5063: 7b 12 40                 u64 [sp + 0x40] = t0
  5066: 81 78 30                 a1 = i32 [a0 + 0x30]
  5069: 7b 18 08                 u64 [sp + 0x8] = a1
  5072: 7c 79 38                 a2 = u8 [a0 + 0x38]
  5075: 7b 19                    u64 [sp] = a2
  5077: 82 79 20                 a2 = u64 [a0 + 0x20]
  5080: 82 76 28                 s1 = u64 [a0 + 0x28]
  5083: 48 17 30 30              u32 [a0 + 48] = 0x30
  5087: 7b 17 10                 u64 [sp + 0x10] = a0
  5090: 46 17 38 01              u8 [a0 + 56] = 0x1
  5094: 7b 19 48                 u64 [sp + 0x48] = a2
  5097: 64 97                    a0 = a2
  5099: 64 68                    a1 = s1
  5101: 82 19 28                 a2 = u64 [sp + 0x28]
  5104: 82 1a 30                 a3 = u64 [sp + 0x30]
  5107: 82 1b 38                 a4 = u64 [sp + 0x38]
  5110: 50 10 66 19 01           ra = 102, jump @408
      :                          @379 [@dyn 51]
  5115: 52 07 67                 jump @392 if a0 != 0
      :                          @380
  5118: 82 17 40                 a0 = u64 [sp + 0x40]
  5121: c9 75 05                 s0 = s0 - a0
  5124: 95 55 01                 s0 = s0 + 0x1
  5127: 01                       fallthrough
      :                          @381
  5128: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  5131: 51 05 c6 00              jump @403 if s0 == 0
      :                          @382
  5135: 82 69 20                 a2 = u64 [s1 + 0x20]
  5138: 33 08 30                 a1 = 0x30
  5141: 82 17 48                 a0 = u64 [sp + 0x48]
  5144: b4 90 01 68              ra = 104, jump [a2]
      :                          @383 [@dyn 52]
  5148: 51 07 ec                 jump @381 if a0 == 0
      :                          @384
  5151: 28 43                    jump @392
      :                          @385
  5153: 52 19 02 12              jump @387 if a2 != 2
      :                          @386
  5157: 98 a9 01                 a2 = a3 >> 0x1
  5160: 95 a8 01                 a1 = a3 + 0x1
  5163: 98 88 01                 a1 = a1 >> 0x1
  5166: 7b 18 10                 u64 [sp + 0x10] = a1
  5169: 28 08                    jump @388
      :                          @387
  5171: 64 a9                    a2 = a3
  5173: 49 11 10                 u64 [sp + 16] = 0
  5176: 01                       fallthrough
      :                          @388
  5177: 82 78 20                 a1 = u64 [a0 + 0x20]
  5180: 7b 18 48                 u64 [sp + 0x48] = a1
  5183: 82 76 28                 s1 = u64 [a0 + 0x28]
  5186: 81 77 30                 a0 = i32 [a0 + 0x30]
  5189: 7b 17 40                 u64 [sp + 0x40] = a0
  5192: 95 95 01                 s0 = a2 + 0x1
  5195: 01                       fallthrough
      :                          @389
  5196: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  5199: 51 05 27                 jump @394 if s0 == 0
      :                          @390
  5202: 82 69 20                 a2 = u64 [s1 + 0x20]
  5205: 82 17 48                 a0 = u64 [sp + 0x48]
  5208: 82 18 40                 a1 = u64 [sp + 0x40]
  5211: b4 90 01 6a              ra = 106, jump [a2]
      :                          @391 [@dyn 53]
  5215: 51 07 ed                 jump @389 if a0 == 0
      :                          @392
  5218: 33 08 01                 a1 = 0x1
  5221: 01                       fallthrough
      :                          @393
  5222: 64 87                    a0 = a1
  5224: 82 10 60                 ra = u64 [sp + 0x60]
  5227: 82 15 58                 s0 = u64 [sp + 0x58]
  5230: 82 16 50                 s1 = u64 [sp + 0x50]
  5233: 95 11 68                 sp = sp + 0x68
  5236: 32 00                    ret
      :                          @394
  5238: 82 15 48                 s0 = u64 [sp + 0x48]
  5241: 64 57                    a0 = s0
  5243: 64 68                    a1 = s1
  5245: 82 19 28                 a2 = u64 [sp + 0x28]
  5248: 82 1a 30                 a3 = u64 [sp + 0x30]
  5251: 82 1b 38                 a4 = u64 [sp + 0x38]
  5254: 50 10 6c 89 00           ra = 108, jump @408
      :                          @395 [@dyn 54]
  5259: 33 08 01                 a1 = 0x1
  5262: 52 07 d8                 jump @393 if a0 != 0
      :                          @396
  5265: 82 6a 18                 a3 = u64 [s1 + 0x18]
  5268: 64 57                    a0 = s0
  5270: 82 18 18                 a1 = u64 [sp + 0x18]
  5273: 82 19 20                 a2 = u64 [sp + 0x20]
  5276: b4 a0 01 6e              ra = 110, jump [a3]
      :                          @397 [@dyn 55]
  5280: 33 08 01                 a1 = 0x1
  5283: 52 07 c3                 jump @393 if a0 != 0
      :                          @398
  5286: 82 17 10                 a0 = u64 [sp + 0x10]
  5289: 9a 77                    a0 = -a0
  5291: 7b 17 38                 u64 [sp + 0x38] = a0
  5294: 33 05 ff                 s0 = 0xffffffffffffffff
  5297: 01                       fallthrough
      :                          @399
  5298: 82 17 38                 a0 = u64 [sp + 0x38]
  5301: c8 57 07                 a0 = a0 + s0
  5304: 51 17 ff 42              jump @406 if a0 == 4294967295
      :                          @400
  5308: 82 69 20                 a2 = u64 [s1 + 0x20]
  5311: 82 17 48                 a0 = u64 [sp + 0x48]
  5314: 82 18 40                 a1 = u64 [sp + 0x40]
  5317: b4 90 01 70              ra = 112, jump [a2]
      :                          @401 [@dyn 56]
  5321: 95 55 01                 s0 = s0 + 0x1
  5324: 51 07 e6                 jump @399 if a0 == 0
      :                          @402
  5327: 28 37                    jump @407
      :                          @403
  5329: 82 6a 18                 a3 = u64 [s1 + 0x18]
  5332: 82 17 48                 a0 = u64 [sp + 0x48]
  5335: 82 18 18                 a1 = u64 [sp + 0x18]
  5338: 82 19 20                 a2 = u64 [sp + 0x20]
  5341: b4 a0 01 72              ra = 114, jump [a3]
      :                          @404 [@dyn 57]
  5345: 33 08 01                 a1 = 0x1
  5348: 52 07 82                 jump @393 if a0 != 0
      :                          @405
  5351: 33 08                    a1 = 0
  5353: 82 17 10                 a0 = u64 [sp + 0x10]
  5356: 82 19 08                 a2 = u64 [sp + 0x8]
  5359: 7a 79 30                 u32 [a0 + 0x30] = a2
  5362: 82 19                    a2 = u64 [sp]
  5364: 78 79 38                 u8 [a0 + 0x38] = a2
  5367: 28 6f ff                 jump @393
      :                          @406
  5370: 82 15 10                 s0 = u64 [sp + 0x10]
  5373: 82 17 10                 a0 = u64 [sp + 0x10]
  5376: d8 75 08                 a1 = s0 <u a0
  5379: 28 63 ff                 jump @393
      :                          @407
  5382: 82 17 10                 a0 = u64 [sp + 0x10]
  5385: d8 75 08                 a1 = s0 <u a0
  5388: 28 5a ff                 jump @393
      :                          @408
  5391: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  5394: 7b 10 20                 u64 [sp + 0x20] = ra
  5397: 7b 15 18                 u64 [sp + 0x18] = s0
  5400: 7b 16 10                 u64 [sp + 0x10] = s1
  5403: 83 9c                    i32 a5 = a2 + 0
  5405: 33 02 00 00 11           t0 = 0x110000
  5410: 64 a6                    s1 = a3
  5412: 64 85                    s0 = a1
  5414: 64 7a                    a3 = a0
  5416: aa 2c 20                 jump @411 if a5 == t0
      :                          @409
  5419: 82 5c 20                 a5 = u64 [s0 + 0x20]
  5422: 64 a7                    a0 = a3
  5424: 64 98                    a1 = a2
  5426: 7b 1b 08                 u64 [sp + 0x8] = a4
  5429: 7b 1a                    u64 [sp] = a3
  5431: b4 c0 01 74              ra = 116, jump [a5]
      :                          @410 [@dyn 58]
  5435: 82 1a                    a3 = u64 [sp]
  5437: 82 1b 08                 a4 = u64 [sp + 0x8]
  5440: 64 78                    a1 = a0
  5442: 33 07 01                 a0 = 0x1
  5445: 52 08 20                 jump @414 if a1 != 0
      :                          @411
  5448: 51 06 1a                 jump @413 if s1 == 0
      :                          @412
  5451: 82 5c 18                 a5 = u64 [s0 + 0x18]
  5454: 64 a7                    a0 = a3
  5456: 64 68                    a1 = s1
  5458: 64 b9                    a2 = a4
  5460: 82 10 20                 ra = u64 [sp + 0x20]
  5463: 82 15 18                 s0 = u64 [sp + 0x18]
  5466: 82 16 10                 s1 = u64 [sp + 0x10]
  5469: 95 11 28                 sp = sp + 0x28
  5472: 32 0c                    jump [a5]
      :                          @413
  5474: 33 07                    a0 = 0
  5476: 01                       fallthrough
      :                          @414
  5477: 82 10 20                 ra = u64 [sp + 0x20]
  5480: 82 15 18                 s0 = u64 [sp + 0x18]
  5483: 82 16 10                 s1 = u64 [sp + 0x10]
  5486: 95 11 28                 sp = sp + 0x28
  5489: 32 00                    ret
      :                          @415
  5491: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  5495: 7b 10 80 00              u64 [sp + 0x80] = ra
  5499: 7b 15 78                 u64 [sp + 0x78] = s0
  5502: 7b 16 70                 u64 [sp + 0x70] = s1
  5505: 49 11 60 20              u64 [sp + 96] = 0x20
  5509: 33 0a 03                 a3 = 0x3
  5512: 78 1a 68                 u8 [sp + 0x68] = a3
  5515: 82 96 20                 s1 = u64 [a2 + 0x20]
  5518: 49 11 30                 u64 [sp + 48] = 0
  5521: 49 11 40                 u64 [sp + 64] = 0
  5524: 7b 17 50                 u64 [sp + 0x50] = a0
  5527: 7b 18 58                 u64 [sp + 0x58] = a1
  5530: 51 06 07 01              jump @437 if s1 == 0
      :                          @416
  5534: 82 97 28                 a0 = u64 [a2 + 0x28]
  5537: 51 07 74 01              jump @447 if a0 == 0
      :                          @417
  5541: 49 11 28                 u64 [sp + 40] = 0
  5544: 82 95                    s0 = u64 [a2]
  5546: 7b 19 08                 u64 [sp + 0x8] = a2
  5549: 82 98 10                 a1 = u64 [a2 + 0x10]
  5552: 7b 18 18                 u64 [sp + 0x18] = a1
  5555: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  5558: 97 88 03                 a1 = a1 << 0x3
  5561: 98 88 03                 a1 = a1 >> 0x3
  5564: 95 88 01                 a1 = a1 + 0x1
  5567: 7b 18                    u64 [sp] = a1
  5569: 95 55 08                 s0 = s0 + 0x8
  5572: 96 78 38                 a1 = a0 * 0x38
  5575: 95 66 18                 s1 = s1 + 0x18
  5578: 33 07 5e                 a0 = 0x5e
  5581: 7b 17 10                 u64 [sp + 0x10] = a0
  5584: 01                       fallthrough
      :                          @418
  5585: 7b 18 20                 u64 [sp + 0x20] = a1
  5588: 82 59                    a2 = u64 [s0]
  5590: 51 09 17                 jump @421 if a2 == 0
      :                          @419
  5593: 82 1a 58                 a3 = u64 [sp + 0x58]
  5596: 82 17 50                 a0 = u64 [sp + 0x50]
  5599: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  5602: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5605: b4 a0 01 76              ra = 118, jump [a3]
      :                          @420 [@dyn 59]
  5609: 52 07 51 01              jump @450 if a0 != 0
      :                          @421
  5613: 81 67 10                 a0 = i32 [s1 + 0x10]
  5616: 7a 17 60                 u32 [sp + 0x60] = a0
  5619: 7c 67 18                 a0 = u8 [s1 + 0x18]
  5622: 78 17 68                 u8 [sp + 0x68] = a0
  5625: 81 67 14                 a0 = i32 [s1 + 0x14]
  5628: 7a 17 64                 u32 [sp + 0x64] = a0
  5631: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  5634: 82 67                    a0 = u64 [s1]
  5636: 51 08 26                 jump @426 if a1 == 0
      :                          @422
  5639: 52 18 01 16              jump @424 if a1 != 1
      :                          @423
  5643: 97 77 04                 a0 = a0 << 0x4
  5646: 82 18 18                 a1 = u64 [sp + 0x18]
  5649: c8 87 07                 a0 = a0 + a1
  5652: 82 78 08                 a1 = u64 [a0 + 0x8]
  5655: 82 19 10                 a2 = u64 [sp + 0x10]
  5658: aa 98 07                 jump @425 if a1 == a2
      :                          @424
  5661: 33 08                    a1 = 0
  5663: 28 0f                    jump @427
      :                          @425
  5665: 82 77                    a0 = u64 [a0]
  5667: 82 77                    a0 = u64 [a0]
  5669: 33 08 01                 a1 = 0x1
  5672: 28 06                    jump @427
      :                          @426
  5674: 33 08 01                 a1 = 0x1
  5677: 01                       fallthrough
      :                          @427
  5678: 7b 18 30                 u64 [sp + 0x30] = a1
  5681: 7b 17 38                 u64 [sp + 0x38] = a0
  5684: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  5687: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  5690: 51 08 26                 jump @432 if a1 == 0
      :                          @428
  5693: 52 18 01 16              jump @430 if a1 != 1
      :                          @429
  5697: 97 77 04                 a0 = a0 << 0x4
  5700: 82 18 18                 a1 = u64 [sp + 0x18]
  5703: c8 87 07                 a0 = a0 + a1
  5706: 82 78 08                 a1 = u64 [a0 + 0x8]
  5709: 82 19 10                 a2 = u64 [sp + 0x10]
  5712: aa 98 07                 jump @431 if a1 == a2
      :                          @430
  5715: 33 08                    a1 = 0
  5717: 28 0f                    jump @433
      :                          @431
  5719: 82 77                    a0 = u64 [a0]
  5721: 82 77                    a0 = u64 [a0]
  5723: 33 08 01                 a1 = 0x1
  5726: 28 06                    jump @433
      :                          @432
  5728: 33 08 01                 a1 = 0x1
  5731: 01                       fallthrough
      :                          @433
  5732: 7b 18 40                 u64 [sp + 0x40] = a1
  5735: 7b 17 48                 u64 [sp + 0x48] = a0
  5738: 82 67 08                 a0 = u64 [s1 + 0x8]
  5741: 97 77 04                 a0 = a0 << 0x4
  5744: 82 18 18                 a1 = u64 [sp + 0x18]
  5747: c8 78 08                 a1 = a1 + a0
  5750: 82 87                    a0 = u64 [a1]
  5752: 82 89 08                 a2 = u64 [a1 + 0x8]
  5755: 95 18 30                 a1 = sp + 0x30
  5758: b4 90 01 78              ra = 120, jump [a2]
      :                          @434 [@dyn 60]
  5762: 52 07 b8 00              jump @450 if a0 != 0
      :                          @435
  5766: 95 55 10                 s0 = s0 + 0x10
  5769: 82 18 20                 a1 = u64 [sp + 0x20]
  5772: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  5775: 95 66 38                 s1 = s1 + 0x38
  5778: 82 17 28                 a0 = u64 [sp + 0x28]
  5781: 95 77 01                 a0 = a0 + 0x1
  5784: 7b 17 28                 u64 [sp + 0x28] = a0
  5787: 52 08 36 ff              jump @418 if a1 != 0
      :                          @436
  5791: 28 69                    jump @445
      :                          @437
  5793: 82 97 18                 a0 = u64 [a2 + 0x18]
  5796: 51 07 71                 jump @447 if a0 == 0
      :                          @438
  5799: 82 95 10                 s0 = u64 [a2 + 0x10]
  5802: 33 0a                    a3 = 0
  5804: 97 78 04                 a1 = a0 << 0x4
  5807: c8 58 08                 a1 = a1 + s0
  5810: 7b 18 20                 u64 [sp + 0x20] = a1
  5813: 7b 19 08                 u64 [sp + 0x8] = a2
  5816: 82 96                    s1 = u64 [a2]
  5818: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  5821: 97 77 04                 a0 = a0 << 0x4
  5824: 98 77 04                 a0 = a0 >> 0x4
  5827: 95 77 01                 a0 = a0 + 0x1
  5830: 7b 17                    u64 [sp] = a0
  5832: 95 66 08                 s1 = s1 + 0x8
  5835: 01                       fallthrough
      :                          @439
  5836: 7b 1a 28                 u64 [sp + 0x28] = a3
  5839: 82 69                    a2 = u64 [s1]
  5841: 51 09 16                 jump @442 if a2 == 0
      :                          @440
  5844: 82 1a 58                 a3 = u64 [sp + 0x58]
  5847: 82 17 50                 a0 = u64 [sp + 0x50]
  5850: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  5853: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5856: b4 a0 01 7a              ra = 122, jump [a3]
      :                          @441 [@dyn 61]
  5860: 52 07 56                 jump @450 if a0 != 0
      :                          @442
  5863: 82 57                    a0 = u64 [s0]
  5865: 82 59 08                 a2 = u64 [s0 + 0x8]
  5868: 95 18 30                 a1 = sp + 0x30
  5871: b4 90 01 7c              ra = 124, jump [a2]
      :                          @443 [@dyn 62]
  5875: 52 07 47                 jump @450 if a0 != 0
      :                          @444
  5878: 95 66 10                 s1 = s1 + 0x10
  5881: 95 55 10                 s0 = s0 + 0x10
  5884: 82 1a 28                 a3 = u64 [sp + 0x28]
  5887: 95 aa 01                 a3 = a3 + 0x1
  5890: 82 17 20                 a0 = u64 [sp + 0x20]
  5893: ab 75 c7                 jump @439 if s0 != a0
      :                          @445
  5896: 82 19 08                 a2 = u64 [sp + 0x8]
  5899: 82 1a                    a3 = u64 [sp]
  5901: 82 97 08                 a0 = u64 [a2 + 0x8]
  5904: ac 7a 0d                 jump @448 if a3 <u a0
      :                          @446
  5907: 28 2c                    jump @451
      :                          @447
  5909: 33 0a                    a3 = 0
  5911: 82 97 08                 a0 = u64 [a2 + 0x8]
  5914: 54 07 25                 jump @451 if a0 <=u 0
      :                          @448
  5917: 82 97                    a0 = u64 [a2]
  5919: 97 a8 04                 a1 = a3 << 0x4
  5922: c8 87 09                 a2 = a0 + a1
  5925: 82 1a 58                 a3 = u64 [sp + 0x58]
  5928: 82 17 50                 a0 = u64 [sp + 0x50]
  5931: 82 98                    a1 = u64 [a2]
  5933: 82 99 08                 a2 = u64 [a2 + 0x8]
  5936: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5939: b4 a0 01 7e              ra = 126, jump [a3]
      :                          @449 [@dyn 63]
  5943: 51 07 08                 jump @451 if a0 == 0
      :                          @450
  5946: 33 07 01                 a0 = 0x1
  5949: 28 05                    jump @452
      :                          @451
  5951: 33 07                    a0 = 0
  5953: 01                       fallthrough
      :                          @452
  5954: 82 10 80 00              ra = u64 [sp + 0x80]
  5958: 82 15 78                 s0 = u64 [sp + 0x78]
  5961: 82 16 70                 s1 = u64 [sp + 0x70]
  5964: 95 11 88 00              sp = sp + 0x88
  5968: 32 00                    ret
      :                          @453 [@dyn 64]
  5970: 32 00                    ret
      :                          @454 [@dyn 65]
  5972: 95 11 80                 sp = sp + 0xffffffffffffff80
  5975: 7b 10 78                 u64 [sp + 0x78] = ra
  5978: 7b 15 70                 u64 [sp + 0x70] = s0
  5981: 7b 16 68                 u64 [sp + 0x68] = s1
  5984: 64 92                    t0 = a2
  5986: 33 00                    ra = 0
  5988: 33 0b                    a4 = 0
  5990: 33 05                    s0 = 0
  5992: 14 03 ff fe fe fe fe fe fe fe t1 = 0xfefefefefefefeff
  6002: 33 0a 0a 0a 0a 0a        a3 = 0xa0a0a0a
  6008: 14 04 0a 0a 0a 0a 0a 0a 0a 0a t2 = 0xa0a0a0a0a0a0a0a
  6018: 82 79 10                 a2 = u64 [a0 + 0x10]
  6021: 7b 19 48                 u64 [sp + 0x48] = a2
  6024: 82 79                    a2 = u64 [a0]
  6026: 7b 19 38                 u64 [sp + 0x38] = a2
  6029: 82 77 08                 a0 = u64 [a0 + 0x8]
  6032: 7b 17 30                 u64 [sp + 0x30] = a0
  6035: 33 07 68 01 01           a0 = 0x10168
  6040: 7b 17 08                 u64 [sp + 0x8] = a0
  6043: 3a 07 10 00 03           a0 = u64 [0x30010]
  6048: 7b 17 60                 u64 [sp + 0x60] = a0
  6051: 7b 18 58                 u64 [sp + 0x58] = a1
  6054: 95 88 08                 a1 = a1 + 0x8
  6057: 7b 18                    u64 [sp] = a1
  6059: 33 0c 0a                 a5 = 0xa
  6062: 7b 12 20                 u64 [sp + 0x20] = t0
  6065: 7b 13 18                 u64 [sp + 0x18] = t1
  6068: 7b 14 10                 u64 [sp + 0x10] = t2
  6071: 28 3b                    jump @458
      :                          @455
  6073: 64 06                    s1 = ra
  6075: c8 89 07                 a0 = a2 + a1
  6078: 7c 77 ff                 a0 = u8 [a0 + 0xffffffffffffffff]
  6081: 95 77 f6                 a0 = a0 + 0xfffffffffffffff6
  6084: 88 77 01                 a0 = a0 <u 0x1
  6087: 01                       fallthrough
      :                          @456
  6088: 82 1a 48                 a3 = u64 [sp + 0x48]
  6091: 78 a7                    u8 [a3] = a0
  6093: 82 17 30                 a0 = u64 [sp + 0x30]
  6096: 82 7a 18                 a3 = u64 [a0 + 0x18]
  6099: 82 17 38                 a0 = u64 [sp + 0x38]
  6102: b4 a0 02 84 00           ra = 132, jump [a3]
      :                          @457 [@dyn 66]
  6107: 64 5b                    a4 = s0
  6109: 82 12 20                 t0 = u64 [sp + 0x20]
  6112: 82 13 18                 t1 = u64 [sp + 0x18]
  6115: 82 14 10                 t2 = u64 [sp + 0x10]
  6118: 64 60                    ra = s1
  6120: 33 0c 0a                 a5 = 0xa
  6123: 82 15 40                 s0 = u64 [sp + 0x40]
  6126: 52 07 64 01              jump @499 if a0 != 0
      :                          @458
  6130: 84 57 ff 00              a0 = s0 & 0xff
  6134: 52 07 58 01              jump @498 if a0 != 0
      :                          @459
  6138: 7b 1b 50                 u64 [sp + 0x50] = a4
  6141: ae 02 0a                 jump @462 if t0 >=u ra
      :                          @460
  6144: 28 ef 00                 jump @489
      :                          @461
  6147: ac 02 ec 00              jump @489 if t0 <u ra
      :                          @462
  6151: c9 02 08                 a1 = t0 - ra
  6154: 82 16 58                 s1 = u64 [sp + 0x58]
  6157: c8 06 06                 s1 = s1 + ra
  6160: 55 18 10 1d              jump @468 if a1 >=u 16
      :                          @463
  6164: aa 02 d8 00              jump @488 if t0 == ra
      :                          @464
  6168: 33 0a                    a3 = 0
  6170: 01                       fallthrough
      :                          @465
  6171: c8 a6 07                 a0 = s1 + a3
  6174: 7c 77                    a0 = u8 [a0]
  6176: aa c7 a5 00              jump @483 if a0 == a5
      :                          @466
  6180: 95 aa 01                 a3 = a3 + 0x1
  6183: ab a8 f4                 jump @465 if a1 != a3
      :                          @467
  6186: 28 c2 00                 jump @488
      :                          @468
  6189: 95 69 07                 a2 = s1 + 0x7
  6192: 84 9a f8                 a3 = a2 & 0xfffffffffffffff8
  6195: c9 6a 07                 a0 = a3 - s1
  6198: d3 6a 0a                 a3 = a3 ^ s1
  6201: 88 aa 01                 a3 = a3 <u 0x1
  6204: 88 7b 01                 a4 = a0 <u 0x1
  6207: d4 ba 0a                 a3 = a3 | a4
  6210: 51 0a 45                 jump @474 if a3 == 0
      :                          @469
  6213: 33 07                    a0 = 0
  6215: 95 8a f0                 a3 = a1 + 0xfffffffffffffff0
  6218: 82 1b                    a4 = u64 [sp]
  6220: c8 0b 0b                 a4 = a4 + ra
  6223: 28 08                    jump @471
      :                          @470
  6225: 82 1b                    a4 = u64 [sp]
  6227: c8 0b 0b                 a4 = a4 + ra
  6230: 01                       fallthrough
      :                          @471
  6231: c8 76 0c                 a5 = s1 + a0
  6234: 82 cc                    a5 = u64 [a5]
  6236: c8 7b 09                 a2 = a4 + a0
  6239: 82 99                    a2 = u64 [a2]
  6241: d3 4c 05                 s0 = a5 ^ t2
  6244: c8 35 05                 s0 = s0 + t1
  6247: e0 c5 0c                 a5 = s0 & ~a5
  6250: d3 49 05                 s0 = a2 ^ t2
  6253: c8 35 05                 s0 = s0 + t1
  6256: e0 95 09                 a2 = s0 & ~a2
  6259: d4 c9 09                 a2 = a2 | a5
  6262: 82 1c 60                 a5 = u64 [sp + 0x60]
  6265: d2 c9 09                 a2 = a2 & a5
  6268: 52 09 1f                 jump @477 if a2 != 0
      :                          @472
  6271: 95 77 10                 a0 = a0 + 0x10
  6274: ae 7a d5                 jump @471 if a3 >=u a0
      :                          @473
  6277: 28 16                    jump @477
      :                          @474
  6279: c8 a6 0b                 a4 = s1 + a3
  6282: 7c bb                    a4 = u8 [a4]
  6284: aa cb 51                 jump @486 if a4 == a5
      :                          @475
  6287: 95 aa 01                 a3 = a3 + 0x1
  6290: ab a7 f5                 jump @474 if a0 != a3
      :                          @476
  6293: 95 8a f0                 a3 = a1 + 0xfffffffffffffff0
  6296: ae 7a b9                 jump @470 if a3 >=u a0
      :                          @477
  6299: aa 87 9b 00              jump @495 if a0 == a1
      :                          @478
  6303: 33 0a                    a3 = 0
  6305: c8 76 06                 s1 = s1 + a0
  6308: c9 72 08                 a1 = t0 - a0
  6311: c9 08 08                 a1 = a1 - ra
  6314: 33 0c 0a                 a5 = 0xa
  6317: 82 1b 50                 a4 = u64 [sp + 0x50]
  6320: 01                       fallthrough
      :                          @479
  6321: c8 a6 09                 a2 = s1 + a3
  6324: 7c 99                    a2 = u8 [a2]
  6326: aa c9 0b                 jump @482 if a2 == a5
      :                          @480
  6329: 95 aa 01                 a3 = a3 + 0x1
  6332: ab a8 f5                 jump @479 if a1 != a3
      :                          @481
  6335: 28 2d                    jump @488
      :                          @482
  6337: c8 7a 0a                 a3 = a3 + a0
  6340: 01                       fallthrough
      :                          @483
  6341: c8 0a 0a                 a3 = a3 + ra
  6344: 95 a0 01                 ra = a3 + 0x1
  6347: ae 2a 38 ff              jump @461 if a3 >=u t0
      :                          @484
  6351: 82 17 58                 a0 = u64 [sp + 0x58]
  6354: c8 7a 0a                 a3 = a3 + a0
  6357: 7c a7                    a0 = u8 [a3]
  6359: ab c7 2c ff              jump @461 if a0 != a5
      :                          @485
  6363: 28 62                    jump @496
      :                          @486
  6365: 82 1b 50                 a4 = u64 [sp + 0x50]
  6368: c8 0a 0a                 a3 = a3 + ra
  6371: 95 a0 01                 ra = a3 + 0x1
  6374: ac 2a e9                 jump @484 if a3 <u t0
      :                          @487
  6377: 28 1a ff                 jump @461
      :                          @488
  6380: 64 20                    ra = t0
  6382: 01                       fallthrough
      :                          @489
  6383: 49 11 40 01              u64 [sp + 64] = 0x1
  6387: 64 b5                    s0 = a4
  6389: 64 26                    s1 = t0
  6391: aa 2b 57                 jump @498 if a4 == t0
      :                          @490
  6394: 82 17 48                 a0 = u64 [sp + 0x48]
  6397: 7c 77                    a0 = u8 [a0]
  6399: 51 07 23                 jump @493 if a0 == 0
      :                          @491
  6402: 82 17 30                 a0 = u64 [sp + 0x30]
  6405: 82 7a 18                 a3 = u64 [a0 + 0x18]
  6408: 33 09 04                 a2 = 0x4
  6411: 82 17 38                 a0 = u64 [sp + 0x38]
  6414: 82 18 08                 a1 = u64 [sp + 0x8]
  6417: 7b 10 28                 u64 [sp + 0x28] = ra
  6420: b4 a0 02 86 00           ra = 134, jump [a3]
      :                          @492 [@dyn 67]
  6425: 82 1b 50                 a4 = u64 [sp + 0x50]
  6428: 82 10 28                 ra = u64 [sp + 0x28]
  6431: 52 07 33                 jump @499 if a0 != 0
      :                          @493
  6434: c9 b6 09                 a2 = s1 - a4
  6437: 82 18 58                 a1 = u64 [sp + 0x58]
  6440: c8 b8 08                 a1 = a1 + a4
  6443: ab b6 8e fe              jump @455 if s1 != a4
      :                          @494
  6447: 64 06                    s1 = ra
  6449: 33 07                    a0 = 0
  6451: 28 95 fe                 jump @456
      :                          @495
  6454: 64 20                    ra = t0
  6456: 82 1b 50                 a4 = u64 [sp + 0x50]
  6459: 28 b4                    jump @489
      :                          @496
  6461: 49 11 40                 u64 [sp + 64] = 0
  6464: 64 05                    s0 = ra
  6466: 64 06                    s1 = ra
  6468: 82 17 48                 a0 = u64 [sp + 0x48]
  6471: 7c 77                    a0 = u8 [a0]
  6473: 52 07 b9                 jump @491 if a0 != 0
      :                          @497
  6476: 28 d6                    jump @493
      :                          @498
  6478: 33 07                    a0 = 0
  6480: 28 06                    jump @500
      :                          @499
  6482: 33 07 01                 a0 = 0x1
  6485: 01                       fallthrough
      :                          @500
  6486: 82 10 78                 ra = u64 [sp + 0x78]
  6489: 82 15 70                 s0 = u64 [sp + 0x70]
  6492: 82 16 68                 s1 = u64 [sp + 0x68]
  6495: 95 11 80 00              sp = sp + 0x80
  6499: 32 00                    ret
      :                          @501 [@dyn 68]
  6501: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  6504: 7b 10 20                 u64 [sp + 0x20] = ra
  6507: 7b 15 18                 u64 [sp + 0x18] = s0
  6510: 7b 16 10                 u64 [sp + 0x10] = s1
  6513: 82 75 10                 s0 = u64 [a0 + 0x10]
  6516: 7c 59                    a2 = u8 [s0]
  6518: 82 7b                    a4 = u64 [a0]
  6520: 82 76 08                 s1 = u64 [a0 + 0x8]
  6523: 51 09 33                 jump @505 if a2 == 0
      :                          @502
  6526: 82 6a 18                 a3 = u64 [s1 + 0x18]
  6529: 7b 18 08                 u64 [sp + 0x8] = a1
  6532: 33 08 68 01 01           a1 = 0x10168
  6537: 33 09 04                 a2 = 0x4
  6540: 64 b7                    a0 = a4
  6542: 7b 1b                    u64 [sp] = a4
  6544: b4 a0 02 8a 00           ra = 138, jump [a3]
      :                          @503 [@dyn 69]
  6549: 82 18 08                 a1 = u64 [sp + 0x8]
  6552: 82 1b                    a4 = u64 [sp]
  6554: 51 07 14                 jump @505 if a0 == 0
      :                          @504
  6557: 33 07 01                 a0 = 0x1
  6560: 82 10 20                 ra = u64 [sp + 0x20]
  6563: 82 15 18                 s0 = u64 [sp + 0x18]
  6566: 82 16 10                 s1 = u64 [sp + 0x10]
  6569: 95 11 28                 sp = sp + 0x28
  6572: 32 00                    ret
      :                          @505
  6574: 83 87                    i32 a0 = a1 + 0
  6576: 95 77 f6                 a0 = a0 + 0xfffffffffffffff6
  6579: 88 77 01                 a0 = a0 <u 0x1
  6582: 78 57                    u8 [s0] = a0
  6584: 82 6c 20                 a5 = u64 [s1 + 0x20]
  6587: 64 b7                    a0 = a4
  6589: 82 10 20                 ra = u64 [sp + 0x20]
  6592: 82 15 18                 s0 = u64 [sp + 0x18]
  6595: 82 16 10                 s1 = u64 [sp + 0x10]
  6598: 95 11 28                 sp = sp + 0x28
  6601: 32 0c                    jump [a5]
      :                          @506 [@dyn 70]
  6603: 64 8a                    a3 = a1
  6605: 33 08 38 01 01           a1 = 0x10138
  6610: 64 a9                    a2 = a3
  6612: 28 9f fb                 jump @415
      :                          @507 [@dyn 71]
  6615: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  6619: 7b 10 80 00              u64 [sp + 0x80] = ra
  6623: 64 82                    t0 = a1
  6625: 82 7a                    a3 = u64 [a0]
  6627: 33 08 81 00              a1 = 0x81
  6631: 95 17 7f                 a0 = sp + 0x7f
  6634: 33 03 57                 t1 = 0x57
  6637: 01                       fallthrough
      :                          @508
  6638: 64 8b                    a4 = a1
  6640: 98 ac 04                 a5 = a3 >> 0x4
  6643: 84 aa 0f                 a3 = a3 & 0xf
  6646: 88 a8 0a                 a1 = a3 <u 0xa
  6649: 33 09 30                 a2 = 0x30
  6652: da 83 09                 a2 = t1 if a1 == 0
  6655: be a9 09                 i32 a2 = a2 + a3
  6658: 78 79                    u8 [a0] = a2
  6660: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  6663: 95 b8 ff                 a1 = a4 + 0xffffffffffffffff
  6666: 64 ca                    a3 = a5
  6668: 52 0c e2                 jump @508 if a5 != 0
      :                          @509
  6671: 95 b7 fe                 a0 = a4 + 0xfffffffffffffffe
  6674: 56 27 80 00 2b           jump @512 if a0 >u 128
      :                          @510
  6679: 9a 8c 81 00              a5 = 0x81 - a1
  6683: 64 1b                    a4 = sp
  6685: c8 7b 0b                 a4 = a4 + a0
  6688: 33 09 72 01 01           a2 = 0x10172
  6693: 33 08 01                 a1 = 0x1
  6696: 33 0a 02                 a3 = 0x2
  6699: 64 27                    a0 = t0
  6701: 50 20 90 00 c5 f8        ra = 144, jump @361
      :                          @511 [@dyn 72]
  6707: 82 10 80 00              ra = u64 [sp + 0x80]
  6711: 95 11 88 00              sp = sp + 0x88
  6715: 32 00                    ret
      :                          @512
  6717: 00                       trap
      :                          @513 [@dyn 73]
  6718: 81 77                    a0 = i32 [a0]
  6720: 89 7a                    a3 = a0 <s 0
  6722: 85 a9 01                 a2 = a3 ^ 0x1
  6725: 97 7b 20                 a4 = a0 << 0x20
  6728: 98 bb 20                 a4 = a4 >> 0x20
  6731: 9a 77                    a0 = -a0
  6733: da ab 07                 a0 = a4 if a3 == 0
  6736: 64 8a                    a3 = a1
  6738: 64 98                    a1 = a2
  6740: 64 a9                    a2 = a3
  6742: 28 6f f7                 jump @351
