// RO data = 656/656 bytes
// RW data = 16/4176 bytes
// Stack size = 8192 bytes
// RO data = [70, 73, 66, 32, 111, 110, 95, 116, 114, 97, 110, 115, 102, 101, 114, 58, 32, 116, 105, 109, 101, 115, 108, 111, 116, 61, 32, 115, 101, 114, 118, 105, 99, 101, 95, 105, 110, 100, 101, 120, 61, 32, 115, 101, 110, 100, 101, 114, 61, 32, 97, 109, 111, 117, 110, 116, 61, 32, 114, 101, 99, 101, 105, 118, 101, 114, 61, 32, 109, 101, 109, 111, 61, 32, 103, 97, 115, 95, 108, 105, 109, 105, 116, 61, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 26, 0, 1, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 41, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 57, 0, 1, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 49, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 67, 0, 1, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 73, 0, 1, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 70, 73, 66, 32, 111, 110, 95, 116, 114, 97, 110, 115, 102, 101, 114, 32, 103, 97, 115, 58, 32, 103, 111, 116, 32, 32, 40, 114, 101, 99, 111, 114, 100, 101, 100, 32, 97, 116, 32, 107, 101, 121, 32, 52, 41, 0, 0, 0, 200, 0, 1, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 225, 0, 1, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 44, 32, 44, 10, 10, 93, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 119, 114, 105, 116, 101, 95, 114, 101, 115, 117, 108, 116, 32, 107, 101, 121, 61, 44, 32, 114, 101, 115, 117, 108, 116, 61, 0, 0, 84, 2, 1, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 101, 2, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0]
// RW data = [75, 89, 134, 56, 214, 197, 109, 52, 128, 128, 128, 128, 128, 128, 128, 128]
// Instructions = 2220
// Code size = 6592 bytes

      :                          @0
     0: 28 9a 02 00 00           jump @46
      :                          @1
     5: 28 f0 02 00 00           jump @51
      :                          @2
    10: 28 c2 04                 jump @108
      :                          @3 [@dyn 1]
    13: 95 11 78 ff              sp = sp + 0xffffffffffffff78
    17: 7b 10 80 00              u64 [sp + 0x80] = ra
    21: 80 89 34                 a2 = u32 [a1 + 0x34]
    24: 82 77                    a0 = u64 [a0]
    26: 84 9a 10                 a3 = a2 & 0x10
    29: 52 0a 16                 jump @6 if a3 != 0
      :                          @4
    32: 84 99 20                 a2 = a2 & 0x20
    35: 52 09 41                 jump @9 if a2 != 0
      :                          @5
    38: 7c 77                    a0 = u8 [a0]
    40: 82 10 80 00              ra = u64 [sp + 0x80]
    44: 95 11 88 00              sp = sp + 0x88
    48: 28 50 0f                 jump @284
      :                          @6
    51: 7c 77                    a0 = u8 [a0]
    53: 33 0b 81 00              a4 = 0x81
    57: 95 19 7f                 a2 = sp + 0x7f
    60: 33 02 57                 t0 = 0x57
    63: 01                       fallthrough
      :                          @7
    64: 64 bc                    a5 = a4
    66: 84 7b 0f                 a4 = a0 & 0xf
    69: 97 77 38                 a0 = a0 << 0x38
    72: 98 77 3c                 a0 = a0 >> 0x3c
    75: 88 b3 0a                 t1 = a4 <u 0xa
    78: 33 0a 30                 a3 = 0x30
    81: da 32 0a                 a3 = t0 if t1 == 0
    84: be ba 0a                 i32 a3 = a3 + a4
    87: 78 9a                    u8 [a2] = a3
    89: 95 99 ff                 a2 = a2 + 0xffffffffffffffff
    92: 95 cb ff                 a4 = a5 + 0xffffffffffffffff
    95: 52 07 e1                 jump @7 if a0 != 0
      :                          @8
    98: 28 31                    jump @11
      :                          @9
   100: 7c 77                    a0 = u8 [a0]
   102: 33 0b 81 00              a4 = 0x81
   106: 95 19 7f                 a2 = sp + 0x7f
   109: 33 02 37                 t0 = 0x37
   112: 01                       fallthrough
      :                          @10
   113: 64 bc                    a5 = a4
   115: 84 7b 0f                 a4 = a0 & 0xf
   118: 97 77 38                 a0 = a0 << 0x38
   121: 98 77 3c                 a0 = a0 >> 0x3c
   124: 88 b3 0a                 t1 = a4 <u 0xa
   127: 33 0a 30                 a3 = 0x30
   130: da 32 0a                 a3 = t0 if t1 == 0
   133: be ba 0a                 i32 a3 = a3 + a4
   136: 78 9a                    u8 [a2] = a3
   138: 95 99 ff                 a2 = a2 + 0xffffffffffffffff
   141: 95 cb ff                 a4 = a5 + 0xffffffffffffffff
   144: 52 07 e1                 jump @10 if a0 != 0
      :                          @11
   147: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
   150: 56 27 80 00 27           jump @14 if a0 >u 128
      :                          @12
   155: 9a bb 81 00              a4 = 0x81 - a4
   159: 64 1a                    a3 = sp
   161: c8 7a 0a                 a3 = a3 + a0
   164: 33 09 02                 a2 = 0x2
   167: 64 87                    a0 = a1
   169: 33 08 8a 01 01           a1 = 0x1018a
   174: 50 10 04 f9 0f           ra = 4, jump @294
      :                          @13 [@dyn 2]
   179: 82 10 80 00              ra = u64 [sp + 0x80]
   183: 95 11 88 00              sp = sp + 0x88
   187: 32 00                    ret
      :                          @14
   189: 00                       trap
      :                          @15 [@dyn 3]
   190: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   194: 7b 10 80 00              u64 [sp + 0x80] = ra
   198: 80 89 34                 a2 = u32 [a1 + 0x34]
   201: 84 9a 10                 a3 = a2 & 0x10
   204: 52 0a 16                 jump @18 if a3 != 0
      :                          @16
   207: 84 99 20                 a2 = a2 & 0x20
   210: 52 09 40                 jump @21 if a2 != 0
      :                          @17
   213: 80 77                    a0 = u32 [a0]
   215: 82 10 80 00              ra = u64 [sp + 0x80]
   219: 95 11 88 00              sp = sp + 0x88
   223: 28 a1 0e                 jump @284
      :                          @18
   226: 81 7b                    a4 = i32 [a0]
   228: 33 09 81 00              a2 = 0x81
   232: 95 17 7f                 a0 = sp + 0x7f
   235: 33 02 57                 t0 = 0x57
   238: 01                       fallthrough
      :                          @19
   239: 64 9c                    a5 = a2
   241: 8b ba 04                 i32 a3 = a4 >> 0x4
   244: 84 bb 0f                 a4 = a4 & 0xf
   247: 88 b3 0a                 t1 = a4 <u 0xa
   250: 33 09 30                 a2 = 0x30
   253: da 32 09                 a2 = t0 if t1 == 0
   256: be b9 09                 i32 a2 = a2 + a4
   259: 78 79                    u8 [a0] = a2
   261: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   264: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   267: 64 ab                    a4 = a3
   269: 52 0a e2                 jump @19 if a3 != 0
      :                          @20
   272: 28 30                    jump @23
      :                          @21
   274: 81 7b                    a4 = i32 [a0]
   276: 33 09 81 00              a2 = 0x81
   280: 95 17 7f                 a0 = sp + 0x7f
   283: 33 02 37                 t0 = 0x37
   286: 01                       fallthrough
      :                          @22
   287: 64 9c                    a5 = a2
   289: 8b ba 04                 i32 a3 = a4 >> 0x4
   292: 84 bb 0f                 a4 = a4 & 0xf
   295: 88 b3 0a                 t1 = a4 <u 0xa
   298: 33 09 30                 a2 = 0x30
   301: da 32 09                 a2 = t0 if t1 == 0
   304: be b9 09                 i32 a2 = a2 + a4
   307: 78 79                    u8 [a0] = a2
   309: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   312: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   315: 64 ab                    a4 = a3
   317: 52 0a e2                 jump @22 if a3 != 0
      :                          @23
   320: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
   323: 56 27 80 00 27           jump @26 if a0 >u 128
      :                          @24
   328: 9a 9b 81 00              a4 = 0x81 - a2
   332: 64 1a                    a3 = sp
   334: c8 7a 0a                 a3 = a3 + a0
   337: 33 09 02                 a2 = 0x2
   340: 64 87                    a0 = a1
   342: 33 08 8a 01 01           a1 = 0x1018a
   347: 50 10 08 4c 0f           ra = 8, jump @294
      :                          @25 [@dyn 4]
   352: 82 10 80 00              ra = u64 [sp + 0x80]
   356: 95 11 88 00              sp = sp + 0x88
   360: 32 00                    ret
      :                          @26
   362: 00                       trap
      :                          @27 [@dyn 5]
   363: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   367: 7b 10 80 00              u64 [sp + 0x80] = ra
   371: 80 89 34                 a2 = u32 [a1 + 0x34]
   374: 84 9a 10                 a3 = a2 & 0x10
   377: 52 0a 16                 jump @30 if a3 != 0
      :                          @28
   380: 84 99 20                 a2 = a2 & 0x20
   383: 52 09 40                 jump @33 if a2 != 0
      :                          @29
   386: 82 77                    a0 = u64 [a0]
   388: 82 10 80 00              ra = u64 [sp + 0x80]
   392: 95 11 88 00              sp = sp + 0x88
   396: 28 f4 0d                 jump @284
      :                          @30
   399: 82 7b                    a4 = u64 [a0]
   401: 33 09 81 00              a2 = 0x81
   405: 95 17 7f                 a0 = sp + 0x7f
   408: 33 02 57                 t0 = 0x57
   411: 01                       fallthrough
      :                          @31
   412: 64 9c                    a5 = a2
   414: 98 ba 04                 a3 = a4 >> 0x4
   417: 84 bb 0f                 a4 = a4 & 0xf
   420: 88 b3 0a                 t1 = a4 <u 0xa
   423: 33 09 30                 a2 = 0x30
   426: da 32 09                 a2 = t0 if t1 == 0
   429: be b9 09                 i32 a2 = a2 + a4
   432: 78 79                    u8 [a0] = a2
   434: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   437: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   440: 64 ab                    a4 = a3
   442: 52 0a e2                 jump @31 if a3 != 0
      :                          @32
   445: 28 30                    jump @35
      :                          @33
   447: 82 7b                    a4 = u64 [a0]
   449: 33 09 81 00              a2 = 0x81
   453: 95 17 7f                 a0 = sp + 0x7f
   456: 33 02 37                 t0 = 0x37
   459: 01                       fallthrough
      :                          @34
   460: 64 9c                    a5 = a2
   462: 98 ba 04                 a3 = a4 >> 0x4
   465: 84 bb 0f                 a4 = a4 & 0xf
   468: 88 b3 0a                 t1 = a4 <u 0xa
   471: 33 09 30                 a2 = 0x30
   474: da 32 09                 a2 = t0 if t1 == 0
   477: be b9 09                 i32 a2 = a2 + a4
   480: 78 79                    u8 [a0] = a2
   482: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   485: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   488: 64 ab                    a4 = a3
   490: 52 0a e2                 jump @34 if a3 != 0
      :                          @35
   493: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
   496: 56 27 80 00 27           jump @38 if a0 >u 128
      :                          @36
   501: 9a 9b 81 00              a4 = 0x81 - a2
   505: 64 1a                    a3 = sp
   507: c8 7a 0a                 a3 = a3 + a0
   510: 33 09 02                 a2 = 0x2
   513: 64 87                    a0 = a1
   515: 33 08 8a 01 01           a1 = 0x1018a
   520: 50 10 0c 9f 0e           ra = 12, jump @294
      :                          @37 [@dyn 6]
   525: 82 10 80 00              ra = u64 [sp + 0x80]
   529: 95 11 88 00              sp = sp + 0x88
   533: 32 00                    ret
      :                          @38
   535: 00                       trap
      :                          @39 [@dyn 7]
   536: 95 11 c8                 sp = sp + 0xffffffffffffffc8
   539: 7b 10 30                 u64 [sp + 0x30] = ra
   542: 7b 15 28                 u64 [sp + 0x28] = s0
   545: 7b 16 20                 u64 [sp + 0x20] = s1
   548: 64 86                    s1 = a1
   550: 82 88 28                 a1 = u64 [a1 + 0x28]
   553: 82 6a 20                 a3 = u64 [s1 + 0x20]
   556: 82 8b 18                 a4 = u64 [a1 + 0x18]
   559: 64 75                    s0 = a0
   561: 33 08 48 01 01           a1 = 0x10148
   566: 33 09 01                 a2 = 0x1
   569: 64 a7                    a0 = a3
   571: b4 b0 01 10              ra = 16, jump [a4]
      :                          @40 [@dyn 8]
   575: 7b 16 08                 u64 [sp + 0x8] = s1
   578: 78 17 10                 u8 [sp + 0x10] = a0
   581: 46 11 11                 u8 [sp + 17] = 0
   584: 33 06 80 00              s1 = 0x80
   588: 33 07 02                 a0 = 0x2
   591: 7b 17                    u64 [sp] = a0
   593: 01                       fallthrough
      :                          @41
   594: 7b 15 18                 u64 [sp + 0x18] = s0
   597: 95 17 08                 a0 = sp + 0x8
   600: 95 18 18                 a1 = sp + 0x18
   603: 82 19                    a2 = u64 [sp]
   605: 50 10 12 1a 15           ra = 18, jump @438
      :                          @42 [@dyn 9]
   610: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
   613: 95 55 01                 s0 = s0 + 0x1
   616: 52 06 ea                 jump @41 if s1 != 0
      :                          @43
   619: 7c 18 10                 a1 = u8 [sp + 0x10]
   622: 33 07 01                 a0 = 0x1
   625: 52 08 1b                 jump @45 if a1 != 0
      :                          @44
   628: 82 17 08                 a0 = u64 [sp + 0x8]
   631: 82 78 28                 a1 = u64 [a0 + 0x28]
   634: 82 77 20                 a0 = u64 [a0 + 0x20]
   637: 82 8a 18                 a3 = u64 [a1 + 0x18]
   640: 33 08 89 01 01           a1 = 0x10189
   645: 33 09 01                 a2 = 0x1
   648: b4 a0 01 14              ra = 20, jump [a3]
      :                          @45 [@dyn 10]
   652: 82 10 30                 ra = u64 [sp + 0x30]
   655: 82 15 28                 s0 = u64 [sp + 0x28]
   658: 82 16 20                 s1 = u64 [sp + 0x20]
   661: 95 11 38                 sp = sp + 0x38
   664: 32 00                    ret
      :                          @46 [export #0: 'refine']
   666: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   669: 7b 10 18                 u64 [sp + 0x18] = ra
   672: 7b 15 10                 u64 [sp + 0x10] = s0
   675: 48 11 08                 u32 [sp + 8] = 0
   678: 49 01                    u64 [sp + 0] = 0
   680: 64 17                    a0 = sp
   682: 33 09 0c                 a2 = 0xc
   685: 33 0a 05                 a3 = 0x5
   688: 33 08                    a1 = 0
   690: 33 0b                    a4 = 0
   692: 33 0c                    a5 = 0
   694: 0a 12                    ecalli 18 // 'fetch'
   696: 01                       fallthrough
      :                          @47
   697: 51 17 ff 14              jump @49 if a0 == 4294967295
      :                          @48
   701: 81 17 04                 a0 = i32 [sp + 0x4]
   704: 81 18 08                 a1 = i32 [sp + 0x8]
   707: 81 19                    a2 = i32 [sp]
   709: be 78 08                 i32 a1 = a1 + a0
   712: 83 99 01                 i32 a2 = a2 + 0x1
   715: 28 0b                    jump @50
      :                          @49
   717: 33 07                    a0 = 0
   719: 33 09 01                 a2 = 0x1
   722: 33 08 01                 a1 = 0x1
   725: 01                       fallthrough
      :                          @50
   726: 7a 19                    u32 [sp] = a2
   728: 7a 18 04                 u32 [sp + 0x4] = a1
   731: 7a 17 08                 u32 [sp + 0x8] = a0
   734: 64 17                    a0 = sp
   736: 33 08 0c                 a1 = 0xc
   739: 0a 13                    ecalli 19 // 'export'
   741: 64 17                    a0 = sp
   743: 33 08 0c                 a1 = 0xc
   746: 82 10 18                 ra = u64 [sp + 0x18]
   749: 82 15 10                 s0 = u64 [sp + 0x10]
   752: 95 11 20                 sp = sp + 0x20
   755: 32 00                    ret
      :                          @51 [export #1: 'accumulate']
   757: 95 11 d8                 sp = sp + 0xffffffffffffffd8
   760: 7b 10 20                 u64 [sp + 0x20] = ra
   763: 7b 15 18                 u64 [sp + 0x18] = s0
   766: 7b 16 10                 u64 [sp + 0x10] = s1
   769: 33 09 08                 a2 = 0x8
   772: ac 98 fa 00              jump @83 if a1 <u a2
      :                          @52
   776: 51 17 fc c0 01           jump @104 if a0 == 4294967292
      :                          @53
   781: 51 07 bb 01              jump @104 if a0 == 0
      :                          @54
   785: 95 8a f8                 a3 = a1 + 0xfffffffffffffff8
   788: 95 75 08                 s0 = a0 + 0x8
   791: 51 0a 45                 jump @64 if a3 == 0
      :                          @55
   794: 7d 58                    a1 = i8 [s0]
   796: 33 06 01                 s1 = 0x1
   799: 59 08 40                 jump @65 if a1 >=s 0
      :                          @56
   802: 84 89 ff 00              a2 = a1 & 0xff
   806: 33 06 02                 s1 = 0x2
   809: 53 29 c0 00 2d           jump @62 if a2 <u 192
      :                          @57
   814: 33 06 03                 s1 = 0x3
   817: 53 29 e0 00 25           jump @62 if a2 <u 224
      :                          @58
   822: 33 06 04                 s1 = 0x4
   825: 53 29 f0 00 1d           jump @62 if a2 <u 240
      :                          @59
   830: 33 06 05                 s1 = 0x5
   833: 53 29 f8 00 15           jump @62 if a2 <u 248
      :                          @60
   838: 33 06 06                 s1 = 0x6
   841: 53 29 fc 00 0d           jump @62 if a2 <u 252
      :                          @61
   846: 88 98 fe 00              a1 = a2 <u 0xfe
   850: 9a 86 08                 s1 = 0x8 - a1
   853: 01                       fallthrough
      :                          @62
   854: ae 6a 09                 jump @65 if a3 >=u s1
      :                          @63
   857: 28 a5 00                 jump @83
      :                          @64
   860: 33 06                    s1 = 0
   862: 01                       fallthrough
      :                          @65
   863: 7b 16                    u64 [sp] = s1
   865: 64 57                    a0 = s0
   867: 64 68                    a1 = s1
   869: 64 a6                    s1 = a3
   871: 50 10 16 4b 15           ra = 22, jump @455
      :                          @66 [@dyn 11]
   876: 82 1a                    a3 = u64 [sp]
   878: 51 07 90 00              jump @83 if a0 == 0
      :                          @67
   882: e4 a6 07                 a0 = maxu(s1, a3)
   885: c9 a7 07                 a0 = a0 - a3
   888: 53 17 60 86 00           jump @83 if a0 <u 96
      :                          @68
   893: c8 5a 08                 a1 = a3 + s0
   896: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   899: 95 87 60                 a0 = a1 + 0x60
   902: 7b 17                    u64 [sp] = a0
   904: 51 06 4c                 jump @79 if s1 == 0
      :                          @69
   907: 7d 78                    a1 = i8 [a0]
   909: 33 05 01                 s0 = 0x1
   912: 59 08 37                 jump @76 if a1 >=s 0
      :                          @70
   915: 84 89 ff 00              a2 = a1 & 0xff
   919: 33 05 02                 s0 = 0x2
   922: 53 29 c0 00 2d           jump @76 if a2 <u 192
      :                          @71
   927: 33 05 03                 s0 = 0x3
   930: 53 29 e0 00 25           jump @76 if a2 <u 224
      :                          @72
   935: 33 05 04                 s0 = 0x4
   938: 53 29 f0 00 1d           jump @76 if a2 <u 240
      :                          @73
   943: 33 05 05                 s0 = 0x5
   946: 53 29 f8 00 15           jump @76 if a2 <u 248
      :                          @74
   951: 33 05 06                 s0 = 0x6
   954: 53 29 fc 00 0d           jump @76 if a2 <u 252
      :                          @75
   959: 88 98 fe 00              a1 = a2 <u 0xfe
   963: 9a 85 08                 s0 = 0x8 - a1
   966: 01                       fallthrough
      :                          @76
   967: ac 56 02 01              jump @105 if s1 <u s0
      :                          @77
   971: 64 58                    a1 = s0
   973: 50 10 18 e5 14           ra = 24, jump @455
      :                          @78 [@dyn 12]
   978: 28 07                    jump @80
      :                          @79
   980: 33 05                    s0 = 0
   982: 33 07                    a0 = 0
   984: 01                       fallthrough
      :                          @80
   985: e4 56 08                 a1 = maxu(s1, s0)
   988: c9 58 08                 a1 = a1 - s0
   991: e4 78 08                 a1 = maxu(a1, a0)
   994: c9 78 08                 a1 = a1 - a0
   997: 33 09 20                 a2 = 0x20
  1000: ac 98 16                 jump @83 if a1 <u a2
      :                          @81
  1003: 82 19                    a2 = u64 [sp]
  1005: c8 95 05                 s0 = s0 + a2
  1008: c8 57 07                 a0 = a0 + s0
  1011: 51 17 e0 d5 00           jump @104 if a0 == 4294967264
      :                          @82
  1016: 33 09 29                 a2 = 0x29
  1019: ae 98 1b                 jump @85 if a1 >=u a2
      :                          @83
  1022: 33 08                    a1 = 0
  1024: 33 06 00 00 01           s1 = 0x10000
  1029: 01                       fallthrough
      :                          @84
  1030: 64 67                    a0 = s1
  1032: 82 10 20                 ra = u64 [sp + 0x20]
  1035: 82 15 18                 s0 = u64 [sp + 0x18]
  1038: 82 16 10                 s1 = u64 [sp + 0x10]
  1041: 95 11 28                 sp = sp + 0x28
  1044: 32 00                    ret
      :                          @85
  1046: 7c 79 28                 a2 = u8 [a0 + 0x28]
  1049: 51 09 19                 jump @87 if a2 == 0
      :                          @86
  1052: 46 11 0e                 u8 [sp + 14] = 0
  1055: 95 17 0e                 a0 = sp + 0xe
  1058: 33 08 01                 a1 = 0x1
  1061: 33 09                    a2 = 0
  1063: 33 0a                    a3 = 0
  1065: 0a 03                    ecalli 3 // 'write'
  1067: 33 08                    a1 = 0
  1069: 33 05                    s0 = 0
  1071: 28 82 00                 jump @102
      :                          @87
  1074: 95 8a d7                 a3 = a1 + 0xffffffffffffffd7
  1077: 95 76 29                 s1 = a0 + 0x29
  1080: 51 0a 51                 jump @98 if a3 == 0
      :                          @88
  1083: 7d 67                    a0 = i8 [s1]
  1085: 33 05 01                 s0 = 0x1
  1088: 59 07 37                 jump @95 if a0 >=s 0
      :                          @89
  1091: 84 77 ff 00              a0 = a0 & 0xff
  1095: 33 05 02                 s0 = 0x2
  1098: 53 27 c0 00 2d           jump @95 if a0 <u 192
      :                          @90
  1103: 33 05 03                 s0 = 0x3
  1106: 53 27 e0 00 25           jump @95 if a0 <u 224
      :                          @91
  1111: 33 05 04                 s0 = 0x4
  1114: 53 27 f0 00 1d           jump @95 if a0 <u 240
      :                          @92
  1119: 33 05 05                 s0 = 0x5
  1122: 53 27 f8 00 15           jump @95 if a0 <u 248
      :                          @93
  1127: 33 05 06                 s0 = 0x6
  1130: 53 27 fc 00 0d           jump @95 if a0 <u 252
      :                          @94
  1135: 88 77 fe 00              a0 = a0 <u 0xfe
  1139: 9a 75 08                 s0 = 0x8 - a0
  1142: 01                       fallthrough
      :                          @95
  1143: 7b 1a                    u64 [sp] = a3
  1145: ac 5a 52                 jump @107 if a3 <u s0
      :                          @96
  1148: 64 67                    a0 = s1
  1150: 64 58                    a1 = s0
  1152: 50 10 1a 32 14           ra = 26, jump @455
      :                          @97 [@dyn 13]
  1157: 82 1a                    a3 = u64 [sp]
  1159: 28 07                    jump @99
      :                          @98
  1161: 33 05                    s0 = 0
  1163: 33 07                    a0 = 0
  1165: 01                       fallthrough
      :                          @99
  1166: c8 56 09                 a2 = s1 + s0
  1169: e4 5a 08                 a1 = maxu(a3, s0)
  1172: c9 58 08                 a1 = a1 - s0
  1175: e6 78 05                 s0 = minu(a1, a0)
  1178: 46 11 0e                 u8 [sp + 14] = 0
  1181: 95 17 0e                 a0 = sp + 0xe
  1184: 33 08 01                 a1 = 0x1
  1187: 64 96                    s1 = a2
  1189: 64 5a                    a3 = s0
  1191: 0a 03                    ecalli 3 // 'write'
  1193: 01                       fallthrough
      :                          @100
  1194: 55 15 21 20              jump @106 if s0 >=u 33
      :                          @101
  1198: 64 68                    a1 = s1
  1200: 01                       fallthrough
      :                          @102
  1201: 33 06 11 00 03           s1 = 0x30011
  1206: 33 07 11 00 03           a0 = 0x30011
  1211: 64 59                    a2 = s0
  1213: 50 10 1c 0d 0a           ra = 28, jump @264
      :                          @103 [@dyn 14]
  1218: 33 08 20                 a1 = 0x20
  1221: 28 41 ff                 jump @84
      :                          @104
  1224: 00                       trap
      :                          @105
  1225: 00                       trap
      :                          @106
  1226: 00                       trap
      :                          @107
  1227: 00                       trap
      :                          @108 [export #2: 'on_transfer']
  1228: 95 11 70 fd              sp = sp + 0xfffffffffffffd70
  1232: 7b 10 88 02              u64 [sp + 0x288] = ra
  1236: 7b 15 80 02              u64 [sp + 0x280] = s0
  1240: 7b 16 78 02              u64 [sp + 0x278] = s1
  1244: 64 8c                    a5 = a1
  1246: 64 79                    a2 = a0
  1248: 33 02                    t0 = 0
  1250: 95 7b 04                 a4 = a0 + 0x4
  1253: 33 07 06                 a0 = 0x6
  1256: 7b 17 28                 u64 [sp + 0x28] = a0
  1259: 33 07 0a                 a0 = 0xa
  1262: 7b 17 58                 u64 [sp + 0x58] = a0
  1265: 33 07 0e                 a0 = 0xe
  1268: 7b 17 20                 u64 [sp + 0x20] = a0
  1271: 33 07 58 00 01           a0 = 0x10058
  1276: 7b 17 18                 u64 [sp + 0x18] = a0
  1279: 33 07 82 00              a0 = 0x82
  1283: 7b 17 10                 u64 [sp + 0x10] = a0
  1286: 33 07 70 02 01           a0 = 0x10270
  1291: 7b 17 08                 u64 [sp + 0x8] = a0
  1294: 33 07 40 00 03           a0 = 0x30040
  1299: 95 77 00 10              a0 = a0 + 0x1000
  1303: 7b 17 50                 u64 [sp + 0x50] = a0
  1306: 33 07 f8 00 01           a0 = 0x100f8
  1311: 7b 17                    u64 [sp] = a0
  1313: 95 97 08                 a0 = a2 + 0x8
  1316: 95 ca f8                 a3 = a5 + 0xfffffffffffffff8
  1319: 95 98 0c                 a1 = a2 + 0xc
  1322: 7b 18 60                 u64 [sp + 0x60] = a1
  1325: 33 08 08                 a1 = 0x8
  1328: 33 06 ff ef              s1 = 0xffffffffffffefff
  1332: 7b 16 48                 u64 [sp + 0x48] = s1
  1335: 7b 17 c0 00              u64 [sp + 0xc0] = a0
  1339: 7b 17 b8 00              u64 [sp + 0xb8] = a0
  1343: 7b 1c 40                 u64 [sp + 0x40] = a5
  1346: 7b 19 38                 u64 [sp + 0x38] = a2
  1349: 7b 1b 30                 u64 [sp + 0x30] = a4
  1352: 7b 1a a8 00              u64 [sp + 0xa8] = a3
  1356: ac 8c bd 04              jump @156 if a5 <u a1
      :                          @109
  1360: 51 09 d2 04              jump @157 if a2 == 0
      :                          @110
  1364: 51 0b ce 04              jump @157 if a4 == 0
      :                          @111
  1368: 7c 97                    a0 = u8 [a2]
  1370: 7b 17 78                 u64 [sp + 0x78] = a0
  1373: 7c 97 01                 a0 = u8 [a2 + 0x1]
  1376: 7b 17 68                 u64 [sp + 0x68] = a0
  1379: 7c 97 02                 a0 = u8 [a2 + 0x2]
  1382: 7b 17 70                 u64 [sp + 0x70] = a0
  1385: 7c 97 03                 a0 = u8 [a2 + 0x3]
  1388: 7b 17 80 00              u64 [sp + 0x80] = a0
  1392: 7c b7                    a0 = u8 [a4]
  1394: 7b 17 98 00              u64 [sp + 0x98] = a0
  1398: 7c b7 01                 a0 = u8 [a4 + 0x1]
  1401: 7b 17 88 00              u64 [sp + 0x88] = a0
  1405: 7c b7 02                 a0 = u8 [a4 + 0x2]
  1408: 7b 17 90 00              u64 [sp + 0x90] = a0
  1412: 7c b7 03                 a0 = u8 [a4 + 0x3]
  1415: 7b 17 a0 00              u64 [sp + 0xa0] = a0
  1419: 51 0a 53                 jump @121 if a3 == 0
      :                          @112
  1422: 82 17 c0 00              a0 = u64 [sp + 0xc0]
  1426: 7d 77                    a0 = i8 [a0]
  1428: 33 05 01                 s0 = 0x1
  1431: 59 07 4a                 jump @122 if a0 >=s 0
      :                          @113
  1434: 84 77 ff 00              a0 = a0 & 0xff
  1438: 33 05 02                 s0 = 0x2
  1441: 33 06 c0 00              s1 = 0xc0
  1445: ac 67 33                 jump @119 if a0 <u s1
      :                          @114
  1448: 33 05 03                 s0 = 0x3
  1451: 33 06 e0 00              s1 = 0xe0
  1455: ac 67 29                 jump @119 if a0 <u s1
      :                          @115
  1458: 33 05 04                 s0 = 0x4
  1461: 33 06 f0 00              s1 = 0xf0
  1465: ac 67 1f                 jump @119 if a0 <u s1
      :                          @116
  1468: 33 05 05                 s0 = 0x5
  1471: 33 06 f8 00              s1 = 0xf8
  1475: ac 67 15                 jump @119 if a0 <u s1
      :                          @117
  1478: 33 05 06                 s0 = 0x6
  1481: 33 06 fc 00              s1 = 0xfc
  1485: ac 67 0b                 jump @119 if a0 <u s1
      :                          @118
  1488: 88 77 fe 00              a0 = a0 <u 0xfe
  1492: 9a 75 08                 s0 = 0x8 - a0
  1495: 01                       fallthrough
      :                          @119
  1496: ae 5a 09                 jump @122 if a3 >=u s0
      :                          @120
  1499: 28 2e 04                 jump @156
      :                          @121
  1502: 33 05                    s0 = 0
  1504: 01                       fallthrough
      :                          @122
  1505: 82 17 c0 00              a0 = u64 [sp + 0xc0]
  1509: 64 58                    a1 = s0
  1511: 7b 12 b0 00              u64 [sp + 0xb0] = t0
  1515: 50 10 1e c7 12           ra = 30, jump @455
      :                          @123 [@dyn 15]
  1520: 33 03 98 00              t1 = 0x98
  1524: 33 02 04                 t0 = 0x4
  1527: 33 06 08                 s1 = 0x8
  1530: 82 1c a8 00              a5 = u64 [sp + 0xa8]
  1534: 82 1b b0 00              a4 = u64 [sp + 0xb0]
  1538: ae 7b 07 04              jump @156 if a4 >=u a0
      :                          @124
  1542: 82 18 68                 a1 = u64 [sp + 0x68]
  1545: 97 88 08                 a1 = a1 << 0x8
  1548: 82 19 78                 a2 = u64 [sp + 0x78]
  1551: d4 98 08                 a1 = a1 | a2
  1554: 82 19 70                 a2 = u64 [sp + 0x70]
  1557: 97 99 10                 a2 = a2 << 0x10
  1560: 82 1a 80 00              a3 = u64 [sp + 0x80]
  1564: 97 aa 18                 a3 = a3 << 0x18
  1567: d4 a9 09                 a2 = a2 | a3
  1570: d4 89 04                 t2 = a2 | a1
  1573: 82 18 88 00              a1 = u64 [sp + 0x88]
  1577: 97 88 08                 a1 = a1 << 0x8
  1580: 82 19 98 00              a2 = u64 [sp + 0x98]
  1584: d4 98 08                 a1 = a1 | a2
  1587: 82 19 90 00              a2 = u64 [sp + 0x90]
  1591: 97 99 10                 a2 = a2 << 0x10
  1594: 82 1a a0 00              a3 = u64 [sp + 0xa0]
  1598: 97 aa 18                 a3 = a3 << 0x18
  1601: d4 a9 09                 a2 = a2 | a3
  1604: d4 89 00                 ra = a2 | a1
  1607: e4 5c 08                 a1 = maxu(a5, s0)
  1610: c9 58 08                 a1 = a1 - s0
  1613: 82 19 b8 00              a2 = u64 [sp + 0xb8]
  1617: c8 59 09                 a2 = a2 + s0
  1620: 82 1a 60                 a3 = u64 [sp + 0x60]
  1623: c8 a5 05                 s0 = s0 + a3
  1626: 64 ba                    a3 = a4
  1628: 01                       fallthrough
      :                          @125
  1629: ac 68 ac 03              jump @156 if a1 <u s1
      :                          @126
  1633: aa 25 c1 03              jump @157 if s0 == t0
      :                          @127
  1637: 51 05 bd 03              jump @157 if s0 == 0
      :                          @128
  1641: ac 38 a0 03              jump @156 if a1 <u t1
      :                          @129
  1645: 51 0a 17                 jump @132 if a3 == 0
      :                          @130
  1648: 95 88 68 ff              a1 = a1 + 0xffffffffffffff68
  1652: 95 55 98 00              s0 = s0 + 0x98
  1656: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  1659: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  1662: 52 07 df                 jump @125 if a0 != 0
      :                          @131
  1665: 28 88 03                 jump @156
      :                          @132
  1668: 7c 97 01                 a0 = u8 [a2 + 0x1]
  1671: 7c 98                    a1 = u8 [a2]
  1673: 7c 9a 02                 a3 = u8 [a2 + 0x2]
  1676: 7d 9b 03                 a4 = i8 [a2 + 0x3]
  1679: 8a 77 08                 i32 a0 = a0 << 0x8
  1682: d4 87 07                 a0 = a0 | a1
  1685: 8a a8 10                 i32 a1 = a3 << 0x10
  1688: 8a ba 18                 i32 a3 = a4 << 0x18
  1691: d4 a8 08                 a1 = a1 | a3
  1694: d4 87 07                 a0 = a0 | a1
  1697: 7b 17 a0 00              u64 [sp + 0xa0] = a0
  1701: 7c 57 01                 a0 = u8 [s0 + 0x1]
  1704: 7c 58                    a1 = u8 [s0]
  1706: 7c 5a 02                 a3 = u8 [s0 + 0x2]
  1709: 7d 5b 03                 a4 = i8 [s0 + 0x3]
  1712: 8a 77 08                 i32 a0 = a0 << 0x8
  1715: d4 87 07                 a0 = a0 | a1
  1718: 8a a8 10                 i32 a1 = a3 << 0x10
  1721: 8a ba 18                 i32 a3 = a4 << 0x18
  1724: d4 a8 08                 a1 = a1 | a3
  1727: 7c 9a 0f                 a3 = u8 [a2 + 0xf]
  1730: 7c 9b 0e                 a4 = u8 [a2 + 0xe]
  1733: d4 87 07                 a0 = a0 | a1
  1736: 7b 17 98 00              u64 [sp + 0x98] = a0
  1740: 7c 97 0d                 a0 = u8 [a2 + 0xd]
  1743: 97 aa 10                 a3 = a3 << 0x10
  1746: 97 bb 08                 a4 = a4 << 0x8
  1749: d4 ba 0a                 a3 = a3 | a4
  1752: 7c 98 0c                 a1 = u8 [a2 + 0xc]
  1755: 7c 9b 0b                 a4 = u8 [a2 + 0xb]
  1758: d4 a7 07                 a0 = a0 | a3
  1761: 97 77 10                 a0 = a0 << 0x10
  1764: 97 88 08                 a1 = a1 << 0x8
  1767: d4 b8 08                 a1 = a1 | a4
  1770: 7c 9a 0a                 a3 = u8 [a2 + 0xa]
  1773: 7c 9b 09                 a4 = u8 [a2 + 0x9]
  1776: d4 87 07                 a0 = a0 | a1
  1779: 97 77 10                 a0 = a0 << 0x10
  1782: 97 aa 08                 a3 = a3 << 0x8
  1785: d4 ba 0a                 a3 = a3 | a4
  1788: d4 a7 07                 a0 = a0 | a3
  1791: 7c 98 08                 a1 = u8 [a2 + 0x8]
  1794: 97 77 08                 a0 = a0 << 0x8
  1797: 7c 9a 97 00              a3 = u8 [a2 + 0x97]
  1801: 7c 9b 96 00              a4 = u8 [a2 + 0x96]
  1805: d4 87 07                 a0 = a0 | a1
  1808: 7b 17 90 00              u64 [sp + 0x90] = a0
  1812: 7c 97 95 00              a0 = u8 [a2 + 0x95]
  1816: 97 aa 10                 a3 = a3 << 0x10
  1819: 97 bb 08                 a4 = a4 << 0x8
  1822: d4 ba 0a                 a3 = a3 | a4
  1825: d4 a7 07                 a0 = a0 | a3
  1828: 7c 9a 94 00              a3 = u8 [a2 + 0x94]
  1832: 7c 9b 93 00              a4 = u8 [a2 + 0x93]
  1836: 95 98 10                 a1 = a2 + 0x10
  1839: 97 77 10                 a0 = a0 << 0x10
  1842: 97 aa 08                 a3 = a3 << 0x8
  1845: d4 ba 0a                 a3 = a3 | a4
  1848: 7c 9b 92 00              a4 = u8 [a2 + 0x92]
  1852: d4 a7 07                 a0 = a0 | a3
  1855: 7c 9a 91 00              a3 = u8 [a2 + 0x91]
  1859: 97 77 10                 a0 = a0 << 0x10
  1862: 97 bb 08                 a4 = a4 << 0x8
  1865: 7c 99 90 00              a2 = u8 [a2 + 0x90]
  1869: d4 ba 0a                 a3 = a3 | a4
  1872: d4 a7 07                 a0 = a0 | a3
  1875: 97 77 08                 a0 = a0 << 0x8
  1878: d4 97 07                 a0 = a0 | a2
  1881: 7b 17 88 00              u64 [sp + 0x88] = a0
  1885: 95 17 68 01              a0 = sp + 0x168
  1889: 33 09 80 00              a2 = 0x80
  1893: 64 45                    s0 = t2
  1895: 64 06                    s1 = ra
  1897: 50 10 20 61 07           ra = 32, jump @264
      :                          @133 [@dyn 16]
  1902: 95 17 e0 00              a0 = sp + 0xe0
  1906: 95 18 68 01              a1 = sp + 0x168
  1910: 33 09 80 00              a2 = 0x80
  1914: 50 10 22 50 07           ra = 34, jump @264
      :                          @134 [@dyn 17]
  1919: 7a 15 c8 00              u32 [sp + 0xc8] = s0
  1923: 7a 16 cc 00              u32 [sp + 0xcc] = s1
  1927: 82 17 a0 00              a0 = u64 [sp + 0xa0]
  1931: 7a 17 d0 00              u32 [sp + 0xd0] = a0
  1935: 82 17 98 00              a0 = u64 [sp + 0x98]
  1939: 7a 17 d4 00              u32 [sp + 0xd4] = a0
  1943: 82 17 90 00              a0 = u64 [sp + 0x90]
  1947: 7b 17 d8 00              u64 [sp + 0xd8] = a0
  1951: 82 17 88 00              a0 = u64 [sp + 0x88]
  1955: 7b 17 60 01              u64 [sp + 0x160] = a0
  1959: 95 17 c8 00              a0 = sp + 0xc8
  1963: 7b 17 68 01              u64 [sp + 0x168] = a0
  1967: 82 17 28                 a0 = u64 [sp + 0x28]
  1970: 7b 17 70 01              u64 [sp + 0x170] = a0
  1974: 95 18 cc 00              a1 = sp + 0xcc
  1978: 7b 18 78 01              u64 [sp + 0x178] = a1
  1982: 7b 17 80 01              u64 [sp + 0x180] = a0
  1986: 95 18 d0 00              a1 = sp + 0xd0
  1990: 7b 18 88 01              u64 [sp + 0x188] = a1
  1994: 7b 17 90 01              u64 [sp + 0x190] = a0
  1998: 95 18 d4 00              a1 = sp + 0xd4
  2002: 7b 18 98 01              u64 [sp + 0x198] = a1
  2006: 7b 17 a0 01              u64 [sp + 0x1a0] = a0
  2010: 95 17 d8 00              a0 = sp + 0xd8
  2014: 7b 17 a8 01              u64 [sp + 0x1a8] = a0
  2018: 82 17 58                 a0 = u64 [sp + 0x58]
  2021: 7b 17 b0 01              u64 [sp + 0x1b0] = a0
  2025: 95 18 e0 00              a1 = sp + 0xe0
  2029: 7b 18 b8 01              u64 [sp + 0x1b8] = a1
  2033: 82 18 20                 a1 = u64 [sp + 0x20]
  2036: 7b 18 c0 01              u64 [sp + 0x1c0] = a1
  2040: 95 18 60 01              a1 = sp + 0x160
  2044: 7b 18 c8 01              u64 [sp + 0x1c8] = a1
  2048: 7b 17 d0 01              u64 [sp + 0x1d0] = a0
  2052: 82 17 18                 a0 = u64 [sp + 0x18]
  2055: 7b 17 28 02              u64 [sp + 0x228] = a0
  2059: 49 21 30 02 07           u64 [sp + 560] = 0x7
  2064: 49 21 48 02              u64 [sp + 584] = 0
  2068: 95 17 68 01              a0 = sp + 0x168
  2072: 7b 17 38 02              u64 [sp + 0x238] = a0
  2076: 49 21 40 02 07           u64 [sp + 576] = 0x7
  2081: 95 17 58 02              a0 = sp + 0x258
  2085: 95 18 28 02              a1 = sp + 0x228
  2089: 50 10 24 31 04           ra = 36, jump @214
      :                          @135 [@dyn 18]
  2094: 82 15 60 02              s0 = u64 [sp + 0x260]
  2098: 82 1b 68 02              a4 = u64 [sp + 0x268]
  2102: 82 16 58 02              s1 = u64 [sp + 0x258]
  2106: 33 07 02                 a0 = 0x2
  2109: 33 08                    a1 = 0
  2111: 33 09                    a2 = 0
  2113: 64 5a                    a3 = s0
  2115: 33 00 26                 ra = 0x26
  2118: 0a 64                    ecalli 100 // 'log'
  2120: 01                       fallthrough
      :                          @136 [@dyn 19]
  2121: 82 17 48                 a0 = u64 [sp + 0x48]
  2124: c8 67 07                 a0 = a0 + s1
  2127: 82 1b 50                 a4 = u64 [sp + 0x50]
  2130: 53 27 00 f0 19           jump @141 if a0 <u 4294963200
      :                          @137
  2135: 82 b7                    a0 = u64 [a4]
  2137: c9 7b 08                 a1 = a4 - a0
  2140: ab 58 0f                 jump @141 if a1 != s0
      :                          @138
  2143: c9 67 08                 a1 = a0 - s1
  2146: 01                       fallthrough
      :                          @139
  2147: 82 b9                    a2 = u64 [a4]
  2149: ab 79 f2                 jump @137 if a2 != a0
      :                          @140
  2152: 7b b8                    u64 [a4] = a1
  2154: 01                       fallthrough
      :                          @141
  2155: 81 17 cc 00              a0 = i32 [sp + 0xcc]
  2159: 7a 17 ec 01              u32 [sp + 0x1ec] = a0
  2163: 95 17 ec 01              a0 = sp + 0x1ec
  2167: 33 08 04                 a1 = 0x4
  2170: 95 19 e0 00              a2 = sp + 0xe0
  2174: 33 0a 80 00              a3 = 0x80
  2178: 0a 03                    ecalli 3 // 'write'
  2180: 0a                       ecalli 0 // 'gas'
  2181: 7b 17 f0 01              u64 [sp + 0x1f0] = a0
  2185: 7b 17 f8 01              u64 [sp + 0x1f8] = a0
  2189: 46 21 07 02 04           u8 [sp + 519] = 0x4
  2194: 7b 17 08 02              u64 [sp + 0x208] = a0
  2198: 95 17 07 02              a0 = sp + 0x207
  2202: 33 08 01                 a1 = 0x1
  2205: 95 19 08 02              a2 = sp + 0x208
  2209: 33 0a 08                 a3 = 0x8
  2212: 0a 03                    ecalli 3 // 'write'
  2214: 49 21 68 01 02           u64 [sp + 360] = 0x2
  2219: 49 21 78 01 02           u64 [sp + 376] = 0x2
  2224: 49 21 88 01              u64 [sp + 392] = 0
  2228: 14 07 20 00 00 00 10 00 00 00 a0 = 0x1000000020
  2238: 7b 17 90 01              u64 [sp + 0x190] = a0
  2242: 46 21 98 01 03           u8 [sp + 408] = 0x3
  2247: 49 21 a0 01 02           u64 [sp + 416] = 0x2
  2252: 49 21 b0 01 02           u64 [sp + 432] = 0x2
  2257: 49 21 c0 01 01           u64 [sp + 448] = 0x1
  2262: 7b 17 c8 01              u64 [sp + 0x1c8] = a0
  2266: 95 17 07 02              a0 = sp + 0x207
  2270: 7b 17 58 02              u64 [sp + 0x258] = a0
  2274: 82 17 10                 a0 = u64 [sp + 0x10]
  2277: 7b 17 60 02              u64 [sp + 0x260] = a0
  2281: 95 17 f8 01              a0 = sp + 0x1f8
  2285: 7b 17 68 02              u64 [sp + 0x268] = a0
  2289: 82 17 58                 a0 = u64 [sp + 0x58]
  2292: 7b 17 70 02              u64 [sp + 0x270] = a0
  2296: 46 21 d0 01 03           u8 [sp + 464] = 0x3
  2301: 82 17 08                 a0 = u64 [sp + 0x8]
  2304: 7b 17 28 02              u64 [sp + 0x228] = a0
  2308: 49 21 30 02 02           u64 [sp + 560] = 0x2
  2313: 95 17 68 01              a0 = sp + 0x168
  2317: 7b 17 48 02              u64 [sp + 0x248] = a0
  2321: 49 21 50 02 02           u64 [sp + 592] = 0x2
  2326: 95 17 58 02              a0 = sp + 0x258
  2330: 7b 17 38 02              u64 [sp + 0x238] = a0
  2334: 49 21 40 02 02           u64 [sp + 576] = 0x2
  2339: 95 17 10 02              a0 = sp + 0x210
  2343: 95 18 28 02              a1 = sp + 0x228
  2347: 50 10 28 2f 03           ra = 40, jump @214
      :                          @142 [@dyn 20]
  2352: 82 15 18 02              s0 = u64 [sp + 0x218]
  2356: 82 1b 20 02              a4 = u64 [sp + 0x220]
  2360: 82 16 10 02              s1 = u64 [sp + 0x210]
  2364: 33 07 02                 a0 = 0x2
  2367: 33 08                    a1 = 0
  2369: 33 09                    a2 = 0
  2371: 64 5a                    a3 = s0
  2373: 33 00 2a                 ra = 0x2a
  2376: 0a 64                    ecalli 100 // 'log'
  2378: 01                       fallthrough
      :                          @143 [@dyn 21]
  2379: 82 1b 50                 a4 = u64 [sp + 0x50]
  2382: 82 17 48                 a0 = u64 [sp + 0x48]
  2385: c8 67 07                 a0 = a0 + s1
  2388: 53 27 00 f0 19           jump @148 if a0 <u 4294963200
      :                          @144
  2393: 82 b7                    a0 = u64 [a4]
  2395: c9 7b 08                 a1 = a4 - a0
  2398: ab 58 0f                 jump @148 if a1 != s0
      :                          @145
  2401: c9 67 08                 a1 = a0 - s1
  2404: 01                       fallthrough
      :                          @146
  2405: 82 b9                    a2 = u64 [a4]
  2407: ab 79 f2                 jump @144 if a2 != a0
      :                          @147
  2410: 7b b8                    u64 [a4] = a1
  2412: 01                       fallthrough
      :                          @148
  2413: 95 17 f0 01              a0 = sp + 0x1f0
  2417: 7b 17 58 02              u64 [sp + 0x258] = a0
  2421: 82 17 58                 a0 = u64 [sp + 0x58]
  2424: 7b 17 60 02              u64 [sp + 0x260] = a0
  2428: 82 17                    a0 = u64 [sp]
  2430: 7b 17 68 01              u64 [sp + 0x168] = a0
  2434: 49 21 70 01 02           u64 [sp + 368] = 0x2
  2439: 49 21 88 01              u64 [sp + 392] = 0
  2443: 95 17 58 02              a0 = sp + 0x258
  2447: 7b 17 78 01              u64 [sp + 0x178] = a0
  2451: 49 21 80 01 01           u64 [sp + 384] = 0x1
  2456: 95 17 28 02              a0 = sp + 0x228
  2460: 95 18 68 01              a1 = sp + 0x168
  2464: 50 10 2c ba 02           ra = 44, jump @214
      :                          @149 [@dyn 22]
  2469: 82 15 30 02              s0 = u64 [sp + 0x230]
  2473: 82 1b 38 02              a4 = u64 [sp + 0x238]
  2477: 82 16 28 02              s1 = u64 [sp + 0x228]
  2481: 33 07 02                 a0 = 0x2
  2484: 33 08                    a1 = 0
  2486: 33 09                    a2 = 0
  2488: 64 5a                    a3 = s0
  2490: 33 00 2e                 ra = 0x2e
  2493: 0a 64                    ecalli 100 // 'log'
  2495: 01                       fallthrough
      :                          @150 [@dyn 23]
  2496: 82 1b 50                 a4 = u64 [sp + 0x50]
  2499: 82 17 48                 a0 = u64 [sp + 0x48]
  2502: c8 67 07                 a0 = a0 + s1
  2505: 53 27 00 f0 19           jump @155 if a0 <u 4294963200
      :                          @151
  2510: 82 b7                    a0 = u64 [a4]
  2512: c9 7b 08                 a1 = a4 - a0
  2515: ab 58 0f                 jump @155 if a1 != s0
      :                          @152
  2518: c9 67 08                 a1 = a0 - s1
  2521: 01                       fallthrough
      :                          @153
  2522: 82 b9                    a2 = u64 [a4]
  2524: ab 79 f2                 jump @151 if a2 != a0
      :                          @154
  2527: 7b b8                    u64 [a4] = a1
  2529: 01                       fallthrough
      :                          @155
  2530: 82 12 b0 00              t0 = u64 [sp + 0xb0]
  2534: 95 22 01                 t0 = t0 + 0x1
  2537: 82 17 b8 00              a0 = u64 [sp + 0xb8]
  2541: 95 77 98 00              a0 = a0 + 0x98
  2545: 7b 17 b8 00              u64 [sp + 0xb8] = a0
  2549: 82 1c 40                 a5 = u64 [sp + 0x40]
  2552: 82 19 38                 a2 = u64 [sp + 0x38]
  2555: 82 1b 30                 a4 = u64 [sp + 0x30]
  2558: 82 1a a8 00              a3 = u64 [sp + 0xa8]
  2562: 33 08 08                 a1 = 0x8
  2565: ae 8c 4b fb              jump @109 if a5 >=u a1
      :                          @156
  2569: 33 07 00 00 01           a0 = 0x10000
  2574: 33 08                    a1 = 0
  2576: 82 10 88 02              ra = u64 [sp + 0x288]
  2580: 82 15 80 02              s0 = u64 [sp + 0x280]
  2584: 82 16 78 02              s1 = u64 [sp + 0x278]
  2588: 95 11 90 02              sp = sp + 0x290
  2592: 32 00                    ret
      :                          @157
  2594: 00                       trap
      :                          @158
  2595: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  2598: 7b 10 40                 u64 [sp + 0x40] = ra
  2601: 7b 15 38                 u64 [sp + 0x38] = s0
  2604: 7b 16 30                 u64 [sp + 0x30] = s1
  2607: c8 89 09                 a2 = a2 + a1
  2610: ac 89 52                 jump @166 if a2 <u a1
      :                          @159
  2613: 64 75                    s0 = a0
  2615: 82 77                    a0 = u64 [a0]
  2617: 97 78 01                 a1 = a0 << 0x1
  2620: 33 0a 08                 a3 = 0x8
  2623: e4 a9 09                 a2 = maxu(a2, a3)
  2626: e4 98 06                 s1 = maxu(a1, a2)
  2629: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  2632: 98 88 3f                 a1 = a1 >> 0x3f
  2635: 51 07 12                 jump @161 if a0 == 0
      :                          @160
  2638: 82 59 08                 a2 = u64 [s0 + 0x8]
  2641: 7b 19 18                 u64 [sp + 0x18] = a2
  2644: 49 11 20 01              u64 [sp + 32] = 0x1
  2648: 7b 17 28                 u64 [sp + 0x28] = a0
  2651: 28 06                    jump @162
      :                          @161
  2653: 49 11 20                 u64 [sp + 32] = 0
  2656: 01                       fallthrough
      :                          @162
  2657: 64 17                    a0 = sp
  2659: 95 1a 18                 a3 = sp + 0x18
  2662: 64 69                    a2 = s1
  2664: 50 10 30 32              ra = 48, jump @170
      :                          @163 [@dyn 24]
  2668: 82 18                    a1 = u64 [sp]
  2670: 82 17 08                 a0 = u64 [sp + 0x8]
  2673: 51 08 14                 jump @167 if a1 == 0
      :                          @164
  2676: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  2686: aa 87 0d                 jump @168 if a0 == a1
      :                          @165
  2689: 52 07 18                 jump @169 if a0 != 0
      :                          @166
  2692: 00                       trap
      :                          @167
  2693: 7b 57 08                 u64 [s0 + 0x8] = a0
  2696: 7b 56                    u64 [s0] = s1
  2698: 01                       fallthrough
      :                          @168
  2699: 82 10 40                 ra = u64 [sp + 0x40]
  2702: 82 15 38                 s0 = u64 [sp + 0x38]
  2705: 82 16 30                 s1 = u64 [sp + 0x30]
  2708: 95 11 48                 sp = sp + 0x48
  2711: 32 00                    ret
      :                          @169
  2713: 00                       trap
      :                          @170
  2714: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  2717: 7b 10 30                 u64 [sp + 0x30] = ra
  2720: 7b 15 28                 u64 [sp + 0x28] = s0
  2723: 7b 16 20                 u64 [sp + 0x20] = s1
  2726: 64 95                    s0 = a2
  2728: 64 72                    t0 = a0
  2730: 51 08 76                 jump @180 if a1 == 0
      :                          @171
  2733: 82 a7 08                 a0 = u64 [a3 + 0x8]
  2736: 51 07 79                 jump @181 if a0 == 0
      :                          @172
  2739: 82 a9 10                 a2 = u64 [a3 + 0x10]
  2742: 51 09 a6 00              jump @188 if a2 == 0
      :                          @173
  2746: 82 a8                    a1 = u64 [a3]
  2748: 33 06 40 00 03           s1 = 0x30040
  2753: 33 03 00 10              t1 = 0x1000
  2757: c8 36 06                 s1 = s1 + t1
  2760: 01                       fallthrough
      :                          @174
  2761: 82 6a                    a3 = u64 [s1]
  2763: c8 5a 07                 a0 = a3 + s0
  2766: ac a7 cb 00              jump @194 if a0 <u a3
      :                          @175
  2770: 95 7b 01                 a4 = a0 + 0x1
  2773: 88 bc 01                 a5 = a4 <u 0x1
  2776: d8 b3 0b                 a4 = t1 <u a4
  2779: d4 cb 0b                 a4 = a4 | a5
  2782: 52 0b bb 00              jump @194 if a4 != 0
      :                          @176
  2786: 82 6b                    a4 = u64 [s1]
  2788: ab ab e5                 jump @174 if a4 != a3
      :                          @177
  2791: 7b 67                    u64 [s1] = a0
  2793: 33 0c                    a5 = 0
  2795: 7b 12 18                 u64 [sp + 0x18] = t0
  2798: 33 0a 40 00 03           a3 = 0x30040
  2803: 33 0b 00 10              a4 = 0x1000
  2807: 7b 1a                    u64 [sp] = a3
  2809: c8 ba 0a                 a3 = a3 + a4
  2812: c9 7a 07                 a0 = a3 - a0
  2815: 7b 17 10                 u64 [sp + 0x10] = a0
  2818: 7b 18 08                 u64 [sp + 0x8] = a1
  2821: 64 96                    s1 = a2
  2823: 50 10 32 c3 03           ra = 50, jump @264
      :                          @178 [@dyn 25]
  2828: 54 26 00 10 95 00        jump @195 if s1 <=u 4096
      :                          @179
  2834: 82 12 18                 t0 = u64 [sp + 0x18]
  2837: 82 18 10                 a1 = u64 [sp + 0x10]
  2840: 33 07                    a0 = 0
  2842: 7b 28 08                 u64 [t0 + 0x8] = a1
  2845: 28 b2 00                 jump @201
      :                          @180
  2848: 49 12 08                 u64 [t0 + 8] = 0
  2851: 33 07 01                 a0 = 0x1
  2854: 28 a9 00                 jump @201
      :                          @181
  2857: 33 09 40 00 03           a2 = 0x30040
  2862: 33 07 00 10              a0 = 0x1000
  2866: c8 79 09                 a2 = a2 + a0
  2869: 01                       fallthrough
      :                          @182
  2870: 82 9a                    a3 = u64 [a2]
  2872: c8 5a 08                 a1 = a3 + s0
  2875: ac a8 5e                 jump @194 if a1 <u a3
      :                          @183
  2878: 95 8b 01                 a4 = a1 + 0x1
  2881: 88 bc 01                 a5 = a4 <u 0x1
  2884: d8 b7 0b                 a4 = a0 <u a4
  2887: d4 cb 0b                 a4 = a4 | a5
  2890: 52 0b 4f                 jump @194 if a4 != 0
      :                          @184
  2893: 82 9b                    a4 = u64 [a2]
  2895: ab ab e7                 jump @182 if a4 != a3
      :                          @185
  2898: 7b 98                    u64 [a2] = a1
  2900: 33 0c                    a5 = 0
  2902: 01                       fallthrough
      :                          @186
  2903: ab ab df                 jump @182 if a4 != a3
      :                          @187
  2906: 28 30                    jump @193
      :                          @188
  2908: 33 09 40 00 03           a2 = 0x30040
  2913: 33 07 00 10              a0 = 0x1000
  2917: c8 79 09                 a2 = a2 + a0
  2920: 01                       fallthrough
      :                          @189
  2921: 82 9a                    a3 = u64 [a2]
  2923: c8 5a 08                 a1 = a3 + s0
  2926: ac a8 2b                 jump @194 if a1 <u a3
      :                          @190
  2929: 95 8b 01                 a4 = a1 + 0x1
  2932: 88 bc 01                 a5 = a4 <u 0x1
  2935: d8 b7 0b                 a4 = a0 <u a4
  2938: d4 cb 0b                 a4 = a4 | a5
  2941: 52 0b 1c                 jump @194 if a4 != 0
      :                          @191
  2944: 82 9b                    a4 = u64 [a2]
  2946: ab ab e7                 jump @189 if a4 != a3
      :                          @192
  2949: 7b 98                    u64 [a2] = a1
  2951: 33 0c                    a5 = 0
  2953: 01                       fallthrough
      :                          @193
  2954: 33 07 40 10 03           a0 = 0x31040
  2959: c9 87 08                 a1 = a0 - a1
  2962: 33 07                    a0 = 0
  2964: 7b 28 08                 u64 [t0 + 0x8] = a1
  2967: 28 38                    jump @201
      :                          @194
  2969: 33 07 01                 a0 = 0x1
  2972: 7b 27 08                 u64 [t0 + 0x8] = a0
  2975: 28 30                    jump @201
      :                          @195
  2977: 64 6c                    a5 = s1
  2979: 82 17                    a0 = u64 [sp]
  2981: 95 77 00 10              a0 = a0 + 0x1000
  2985: 82 12 18                 t0 = u64 [sp + 0x18]
  2988: 82 16 08                 s1 = u64 [sp + 0x8]
  2991: 01                       fallthrough
      :                          @196
  2992: 82 78                    a1 = u64 [a0]
  2994: c9 87 09                 a2 = a0 - a1
  2997: ab 69 11                 jump @200 if a2 != s1
      :                          @197
  3000: c9 c8 09                 a2 = a1 - a5
  3003: 01                       fallthrough
      :                          @198
  3004: 82 7a                    a3 = u64 [a0]
  3006: ab 8a f2                 jump @196 if a3 != a1
      :                          @199
  3009: 7b 79                    u64 [a0] = a2
  3011: 33 0b                    a4 = 0
  3013: 01                       fallthrough
      :                          @200
  3014: 82 18 10                 a1 = u64 [sp + 0x10]
  3017: 33 07                    a0 = 0
  3019: 7b 28 08                 u64 [t0 + 0x8] = a1
  3022: 01                       fallthrough
      :                          @201
  3023: 7b 25 10                 u64 [t0 + 0x10] = s0
  3026: 7b 27                    u64 [t0] = a0
  3028: 82 10 30                 ra = u64 [sp + 0x30]
  3031: 82 15 28                 s0 = u64 [sp + 0x28]
  3034: 82 16 20                 s1 = u64 [sp + 0x20]
  3037: 95 11 38                 sp = sp + 0x38
  3040: 32 00                    ret
      :                          @202
  3042: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  3045: 7b 10 40                 u64 [sp + 0x40] = ra
  3048: 7b 15 38                 u64 [sp + 0x38] = s0
  3051: 7b 16 30                 u64 [sp + 0x30] = s1
  3054: 95 88 01                 a1 = a1 + 0x1
  3057: 51 08 53                 jump @210 if a1 == 0
      :                          @203
  3060: 64 75                    s0 = a0
  3062: 82 77                    a0 = u64 [a0]
  3064: 97 79 01                 a2 = a0 << 0x1
  3067: 33 0a 08                 a3 = 0x8
  3070: e4 a8 08                 a1 = maxu(a1, a3)
  3073: e4 89 06                 s1 = maxu(a2, a1)
  3076: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  3079: 98 88 3f                 a1 = a1 >> 0x3f
  3082: 51 07 12                 jump @205 if a0 == 0
      :                          @204
  3085: 82 59 08                 a2 = u64 [s0 + 0x8]
  3088: 7b 19 18                 u64 [sp + 0x18] = a2
  3091: 49 11 20 01              u64 [sp + 32] = 0x1
  3095: 7b 17 28                 u64 [sp + 0x28] = a0
  3098: 28 06                    jump @206
      :                          @205
  3100: 49 11 20                 u64 [sp + 32] = 0
  3103: 01                       fallthrough
      :                          @206
  3104: 64 17                    a0 = sp
  3106: 95 1a 18                 a3 = sp + 0x18
  3109: 64 69                    a2 = s1
  3111: 50 10 34 73 fe           ra = 52, jump @170
      :                          @207 [@dyn 26]
  3116: 82 18                    a1 = u64 [sp]
  3118: 82 17 08                 a0 = u64 [sp + 0x8]
  3121: 51 08 14                 jump @211 if a1 == 0
      :                          @208
  3124: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  3134: aa 87 0d                 jump @212 if a0 == a1
      :                          @209
  3137: 52 07 18                 jump @213 if a0 != 0
      :                          @210
  3140: 00                       trap
      :                          @211
  3141: 7b 57 08                 u64 [s0 + 0x8] = a0
  3144: 7b 56                    u64 [s0] = s1
  3146: 01                       fallthrough
      :                          @212
  3147: 82 10 40                 ra = u64 [sp + 0x40]
  3150: 82 15 38                 s0 = u64 [sp + 0x38]
  3153: 82 16 30                 s1 = u64 [sp + 0x30]
  3156: 95 11 48                 sp = sp + 0x48
  3159: 32 00                    ret
      :                          @213
  3161: 00                       trap
      :                          @214
  3162: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  3165: 7b 10 30                 u64 [sp + 0x30] = ra
  3168: 7b 15 28                 u64 [sp + 0x28] = s0
  3171: 7b 16 20                 u64 [sp + 0x20] = s1
  3174: 64 89                    a2 = a1
  3176: 82 8a 08                 a3 = u64 [a1 + 0x8]
  3179: 64 75                    s0 = a0
  3181: 51 0a 35                 jump @219 if a3 == 0
      :                          @215
  3184: 82 98                    a1 = u64 [a2]
  3186: 33 07                    a0 = 0
  3188: 95 8b 08                 a4 = a1 + 0x8
  3191: 01                       fallthrough
      :                          @216
  3192: 82 bc                    a5 = u64 [a4]
  3194: c8 c7 07                 a0 = a0 + a5
  3197: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  3200: 95 bb 10                 a4 = a4 + 0x10
  3203: 52 0a f5                 jump @216 if a3 != 0
      :                          @217
  3206: 82 9a 18                 a3 = u64 [a2 + 0x18]
  3209: 51 0a 24                 jump @221 if a3 == 0
      :                          @218
  3212: 82 88 08                 a1 = u64 [a1 + 0x8]
  3215: 8e 88                    a1 = a1 >u 0
  3217: 88 7a 10                 a3 = a0 <u 0x10
  3220: 85 aa 01                 a3 = a3 ^ 0x1
  3223: d4 a8 08                 a1 = a1 | a3
  3226: 89 7a                    a3 = a0 <s 0
  3228: e0 a8 08                 a1 = a1 & ~a3
  3231: 52 08 0a                 jump @220 if a1 != 0
      :                          @219
  3234: 33 07                    a0 = 0
  3236: 33 08 01                 a1 = 0x1
  3239: 28 49                    jump @229
      :                          @220
  3241: 97 77 01                 a0 = a0 << 0x1
  3244: 01                       fallthrough
      :                          @221
  3245: 51 07 3f                 jump @228 if a0 == 0
      :                          @222
  3248: 57 07 77                 jump @234 if a0 <s 0
      :                          @223
  3251: 64 52                    t0 = s0
  3253: 33 0b 40 00 03           a4 = 0x30040
  3258: 33 08 00 10              a1 = 0x1000
  3262: c8 8b 0b                 a4 = a4 + a1
  3265: 01                       fallthrough
      :                          @224
  3266: 82 bc                    a5 = u64 [a4]
  3268: c8 7c 0a                 a3 = a5 + a0
  3271: ac ca 5e                 jump @232 if a3 <u a5
      :                          @225
  3274: 95 a5 01                 s0 = a3 + 0x1
  3277: 88 56 01                 s1 = s0 <u 0x1
  3280: d8 58 05                 s0 = a1 <u s0
  3283: d4 65 05                 s0 = s0 | s1
  3286: 52 05 4f                 jump @232 if s0 != 0
      :                          @226
  3289: 82 b6                    s1 = u64 [a4]
  3291: ab c6 e7                 jump @224 if s1 != a5
      :                          @227
  3294: 7b ba                    u64 [a4] = a3
  3296: 33 08 40 10 03           a1 = 0x31040
  3301: c9 a8 08                 a1 = a1 - a3
  3304: 64 25                    s0 = t0
  3306: 28 06                    jump @229
      :                          @228
  3308: 33 08 01                 a1 = 0x1
  3311: 01                       fallthrough
      :                          @229
  3312: 7b 17                    u64 [sp] = a0
  3314: 7b 18 08                 u64 [sp + 0x8] = a1
  3317: 49 11 10                 u64 [sp + 16] = 0
  3320: 33 08 18 01 01           a1 = 0x10118
  3325: 64 17                    a0 = sp
  3327: 50 10 36 17 06           ra = 54, jump @346
      :                          @230 [@dyn 27]
  3332: 52 07 22                 jump @233 if a0 != 0
      :                          @231
  3335: 82 17 10                 a0 = u64 [sp + 0x10]
  3338: 82 18 08                 a1 = u64 [sp + 0x8]
  3341: 82 19                    a2 = u64 [sp]
  3343: 7b 57 10                 u64 [s0 + 0x10] = a0
  3346: 7b 58 08                 u64 [s0 + 0x8] = a1
  3349: 7b 59                    u64 [s0] = a2
  3351: 82 10 30                 ra = u64 [sp + 0x30]
  3354: 82 15 28                 s0 = u64 [sp + 0x28]
  3357: 82 16 20                 s1 = u64 [sp + 0x20]
  3360: 95 11 38                 sp = sp + 0x38
  3363: 32 00                    ret
      :                          @232
  3365: 00                       trap
      :                          @233
  3366: 00                       trap
      :                          @234
  3367: 00                       trap
      :                          @235 [@dyn 28]
  3368: 82 72                    t0 = u64 [a0]
  3370: 33 09 00 f0              a2 = 0xfffffffffffff000
  3374: 95 2a ff ef              a3 = t0 + 0xffffffffffffefff
  3378: ac 9a 27                 jump @241 if a3 <u a2
      :                          @236
  3381: 82 77 08                 a0 = u64 [a0 + 0x8]
  3384: 33 09 40 00 03           a2 = 0x30040
  3389: 95 99 00 10              a2 = a2 + 0x1000
  3393: 01                       fallthrough
      :                          @237
  3394: 82 9a                    a3 = u64 [a2]
  3396: c9 a9 0b                 a4 = a2 - a3
  3399: ab 7b 12                 jump @241 if a4 != a0
      :                          @238
  3402: c9 2a 0b                 a4 = a3 - t0
  3405: 01                       fallthrough
      :                          @239
  3406: 82 9c                    a5 = u64 [a2]
  3408: ab ac f2                 jump @237 if a5 != a3
      :                          @240
  3411: 7b 9b                    u64 [a2] = a4
  3413: 33 08                    a1 = 0
  3415: 32 00                    ret
      :                          @241
  3417: 32 00                    ret
      :                          @242 [@dyn 29]
  3419: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  3422: 7b 10 18                 u64 [sp + 0x18] = ra
  3425: 7b 15 10                 u64 [sp + 0x10] = s0
  3428: 7b 16 08                 u64 [sp + 0x8] = s1
  3431: 64 75                    s0 = a0
  3433: 82 7a 10                 a3 = u64 [a0 + 0x10]
  3436: 82 77                    a0 = u64 [a0]
  3438: c9 a7 07                 a0 = a0 - a3
  3441: 64 96                    s1 = a2
  3443: ac 97 2a                 jump @245 if a0 <u a2
      :                          @243
  3446: 7b 1a                    u64 [sp] = a3
  3448: 82 57 08                 a0 = u64 [s0 + 0x8]
  3451: c8 a7 07                 a0 = a0 + a3
  3454: 64 69                    a2 = s1
  3456: 50 10 3c 4a 01           ra = 60, jump @264
      :                          @244 [@dyn 30]
  3461: 82 17                    a0 = u64 [sp]
  3463: c8 76 06                 s1 = s1 + a0
  3466: 7b 56 10                 u64 [s0 + 0x10] = s1
  3469: 33 07                    a0 = 0
  3471: 82 10 18                 ra = u64 [sp + 0x18]
  3474: 82 15 10                 s0 = u64 [sp + 0x10]
  3477: 82 16 08                 s1 = u64 [sp + 0x8]
  3480: 95 11 20                 sp = sp + 0x20
  3483: 32 00                    ret
      :                          @245
  3485: 64 57                    a0 = s0
  3487: 7b 18                    u64 [sp] = a1
  3489: 64 a8                    a1 = a3
  3491: 64 69                    a2 = s1
  3493: 50 10 3e 7e fc           ra = 62, jump @158
      :                          @246 [@dyn 31]
  3498: 82 18                    a1 = u64 [sp]
  3500: 82 5a 10                 a3 = u64 [s0 + 0x10]
  3503: 28 c7                    jump @243
      :                          @247 [@dyn 32]
  3505: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  3508: 7b 10 20                 u64 [sp + 0x20] = ra
  3511: 7b 15 18                 u64 [sp + 0x18] = s0
  3514: 7b 16 10                 u64 [sp + 0x10] = s1
  3517: 64 86                    s1 = a1
  3519: 83 88                    i32 a1 = a1 + 0
  3521: 33 09 80 00              a2 = 0x80
  3525: 64 7a                    a3 = a0
  3527: ae 98 2b                 jump @252 if a1 >=u a2
      :                          @248
  3530: 82 a8 10                 a1 = u64 [a3 + 0x10]
  3533: 82 a7                    a0 = u64 [a3]
  3535: ab 78 12                 jump @251 if a1 != a0
      :                          @249
  3538: 64 a7                    a0 = a3
  3540: 64 a5                    s0 = a3
  3542: 50 10 42 0c fe           ra = 66, jump @202
      :                          @250 [@dyn 33]
  3547: 64 5a                    a3 = s0
  3549: 82 58 10                 a1 = u64 [s0 + 0x10]
  3552: 01                       fallthrough
      :                          @251
  3553: 82 a7 08                 a0 = u64 [a3 + 0x8]
  3556: c8 87 07                 a0 = a0 + a1
  3559: 78 76                    u8 [a0] = s1
  3561: 95 88 01                 a1 = a1 + 0x1
  3564: 7b a8 10                 u64 [a3 + 0x10] = a1
  3567: 28 ab 00                 jump @260
      :                          @252
  3570: 8b 67 0b                 i32 a0 = s1 >> 0xb
  3573: 48 11 0c                 u32 [sp + 12] = 0
  3576: 52 07 1c                 jump @254 if a0 != 0
      :                          @253
  3579: 98 67 06                 a0 = s1 >> 0x6
  3582: 86 77 c0 00              a0 = a0 | 0xc0
  3586: 78 17 0c                 u8 [sp + 0xc] = a0
  3589: 84 67 3f                 a0 = s1 & 0x3f
  3592: 86 77 80 00              a0 = a0 | 0x80
  3596: 78 17 0d                 u8 [sp + 0xd] = a0
  3599: 33 06 02                 s1 = 0x2
  3602: 28 63                    jump @257
      :                          @254
  3604: 8b 67 10                 i32 a0 = s1 >> 0x10
  3607: 52 07 29                 jump @256 if a0 != 0
      :                          @255
  3610: 98 67 0c                 a0 = s1 >> 0xc
  3613: 86 77 e0 00              a0 = a0 | 0xe0
  3617: 78 17 0c                 u8 [sp + 0xc] = a0
  3620: 97 67 34                 a0 = s1 << 0x34
  3623: 98 77 3a                 a0 = a0 >> 0x3a
  3626: 95 77 80 00              a0 = a0 + 0x80
  3630: 78 17 0d                 u8 [sp + 0xd] = a0
  3633: 84 67 3f                 a0 = s1 & 0x3f
  3636: 86 77 80 00              a0 = a0 | 0x80
  3640: 78 17 0e                 u8 [sp + 0xe] = a0
  3643: 33 06 03                 s1 = 0x3
  3646: 28 37                    jump @257
      :                          @256
  3648: 97 67 2b                 a0 = s1 << 0x2b
  3651: 98 77 3d                 a0 = a0 >> 0x3d
  3654: 95 77 f0 00              a0 = a0 + 0xf0
  3658: 78 17 0c                 u8 [sp + 0xc] = a0
  3661: 97 67 2e                 a0 = s1 << 0x2e
  3664: 98 77 3a                 a0 = a0 >> 0x3a
  3667: 95 77 80 00              a0 = a0 + 0x80
  3671: 78 17 0d                 u8 [sp + 0xd] = a0
  3674: 97 67 34                 a0 = s1 << 0x34
  3677: 98 77 3a                 a0 = a0 >> 0x3a
  3680: 95 77 80 00              a0 = a0 + 0x80
  3684: 78 17 0e                 u8 [sp + 0xe] = a0
  3687: 84 67 3f                 a0 = s1 & 0x3f
  3690: 86 77 80 00              a0 = a0 | 0x80
  3694: 78 17 0f                 u8 [sp + 0xf] = a0
  3697: 33 06 04                 s1 = 0x4
  3700: 01                       fallthrough
      :                          @257
  3701: 82 a5 10                 s0 = u64 [a3 + 0x10]
  3704: 82 a7                    a0 = u64 [a3]
  3706: c9 57 07                 a0 = a0 - s0
  3709: ac 67 2d                 jump @261 if a0 <u s1
      :                          @258
  3712: 7b 1a                    u64 [sp] = a3
  3714: 82 a7 08                 a0 = u64 [a3 + 0x8]
  3717: c8 57 07                 a0 = a0 + s0
  3720: 95 18 0c                 a1 = sp + 0xc
  3723: 64 69                    a2 = s1
  3725: 50 10 44 3d              ra = 68, jump @264
      :                          @259 [@dyn 34]
  3729: c8 56 06                 s1 = s1 + s0
  3732: 82 17                    a0 = u64 [sp]
  3734: 7b 76 10                 u64 [a0 + 0x10] = s1
  3737: 01                       fallthrough
      :                          @260
  3738: 33 07                    a0 = 0
  3740: 82 10 20                 ra = u64 [sp + 0x20]
  3743: 82 15 18                 s0 = u64 [sp + 0x18]
  3746: 82 16 10                 s1 = u64 [sp + 0x10]
  3749: 95 11 28                 sp = sp + 0x28
  3752: 32 00                    ret
      :                          @261
  3754: 64 a7                    a0 = a3
  3756: 64 58                    a1 = s0
  3758: 64 69                    a2 = s1
  3760: 64 a5                    s0 = a3
  3762: 50 10 46 71 fb           ra = 70, jump @158
      :                          @262 [@dyn 35]
  3767: 64 5a                    a3 = s0
  3769: 82 55 10                 s0 = u64 [s0 + 0x10]
  3772: 28 c4                    jump @258
      :                          @263 [@dyn 36]
  3774: 64 8a                    a3 = a1
  3776: 33 08 18 01 01           a1 = 0x10118
  3781: 64 a9                    a2 = a3
  3783: 28 4f 04                 jump @346
      :                          @264
  3786: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  3789: 7b 10 18                 u64 [sp + 0x18] = ra
  3792: 7b 15 10                 u64 [sp + 0x10] = s0
  3795: 7b 16 08                 u64 [sp + 0x8] = s1
  3798: 53 19 10 64              jump @273 if a2 <u 16
      :                          @265
  3802: 8d 7a                    i32 a3 = -a0
  3804: 84 a2 07                 t0 = a3 & 0x7
  3807: c8 27 0b                 a4 = a0 + t0
  3810: 51 02 15                 jump @268 if t0 == 0
      :                          @266
  3813: 64 8c                    a5 = a1
  3815: 64 75                    s0 = a0
  3817: 01                       fallthrough
      :                          @267
  3818: 7c ca                    a3 = u8 [a5]
  3820: 78 5a                    u8 [s0] = a3
  3822: 95 55 01                 s0 = s0 + 0x1
  3825: 95 cc 01                 a5 = a5 + 0x1
  3828: ac b5 f6                 jump @267 if s0 <u a4
      :                          @268
  3831: c8 28 03                 t1 = a1 + t0
  3834: c9 29 02                 t0 = a2 - t0
  3837: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  3840: 84 38 07                 a1 = t1 & 0x7
  3843: c8 4b 0a                 a3 = a4 + t2
  3846: 51 08 3b                 jump @275 if a1 == 0
      :                          @269
  3849: 58 04 4b                 jump @278 if t2 <=s 0
      :                          @270
  3852: 97 38 03                 a1 = t1 << 0x3
  3855: 84 80 38                 ra = a1 & 0x38
  3858: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  3861: 82 c5                    s0 = u64 [a5]
  3863: 8d 88                    i32 a1 = -a1
  3865: 84 88 38                 a1 = a1 & 0x38
  3868: 95 cc 08                 a5 = a5 + 0x8
  3871: 01                       fallthrough
      :                          @271
  3872: 82 c6                    s1 = u64 [a5]
  3874: d0 05 05                 s0 = s0 >> ra
  3877: cf 86 09                 a2 = s1 << a1
  3880: d4 59 09                 a2 = a2 | s0
  3883: 7b b9                    u64 [a4] = a2
  3885: 95 bb 08                 a4 = a4 + 0x8
  3888: 95 cc 08                 a5 = a5 + 0x8
  3891: 64 65                    s0 = s1
  3893: ac ab eb                 jump @271 if a4 <u a3
      :                          @272
  3896: 28 1c                    jump @278
      :                          @273
  3898: 64 7a                    a3 = a0
  3900: 52 09 21                 jump @279 if a2 != 0
      :                          @274
  3903: 28 2f                    jump @281
      :                          @275
  3905: 58 04 13                 jump @278 if t2 <=s 0
      :                          @276
  3908: 64 38                    a1 = t1
  3910: 01                       fallthrough
      :                          @277
  3911: 82 89                    a2 = u64 [a1]
  3913: 7b b9                    u64 [a4] = a2
  3915: 95 bb 08                 a4 = a4 + 0x8
  3918: 95 88 08                 a1 = a1 + 0x8
  3921: ac ab f6                 jump @277 if a4 <u a3
      :                          @278
  3924: c8 43 08                 a1 = t1 + t2
  3927: 84 29 07                 a2 = t0 & 0x7
  3930: 51 09 14                 jump @281 if a2 == 0
      :                          @279
  3933: c8 a9 09                 a2 = a2 + a3
  3936: 01                       fallthrough
      :                          @280
  3937: 7c 8b                    a4 = u8 [a1]
  3939: 78 ab                    u8 [a3] = a4
  3941: 95 aa 01                 a3 = a3 + 0x1
  3944: 95 88 01                 a1 = a1 + 0x1
  3947: ac 9a f6                 jump @280 if a3 <u a2
      :                          @281
  3950: 82 10 18                 ra = u64 [sp + 0x18]
  3953: 82 15 10                 s0 = u64 [sp + 0x10]
  3956: 82 16 08                 s1 = u64 [sp + 0x8]
  3959: 95 11 20                 sp = sp + 0x20
  3962: 32 00                    ret
      :                          @282 [@dyn 37]
  3964: 82 77                    a0 = u64 [a0]
  3966: 01                       fallthrough
      :                          @283
  3967: 28                       jump @283
      :                          @284
  3968: 95 11 a8                 sp = sp + 0xffffffffffffffa8
  3971: 7b 10 50                 u64 [sp + 0x50] = ra
  3974: 7b 15 48                 u64 [sp + 0x48] = s0
  3977: 7b 16 40                 u64 [sp + 0x40] = s1
  3980: 7b 18                    u64 [sp] = a1
  3982: 98 79 04                 a2 = a0 >> 0x4
  3985: 33 08 27                 a1 = 0x27
  3988: 53 29 71 02 81 00        jump @287 if a2 <u 625
      :                          @285
  3994: 33 08 27                 a1 = 0x27
  3997: 95 1a 3e                 a3 = sp + 0x3e
  4000: 3a 09 00 00 03           a2 = u64 [0x30000]
  4005: 7b 19 10                 u64 [sp + 0x10] = a2
  4008: 49 11 08 f0 d8 00        u64 [sp + 8] = 0xd8f0
  4014: 33 04 7b 14              t2 = 0x147b
  4018: 33 0b 8c 01 01           a4 = 0x1018c
  4023: 33 00 ff e0 f5 05        ra = 0x5f5e0ff
  4029: 01                       fallthrough
      :                          @286
  4030: 64 72                    t0 = a0
  4032: 82 17 10                 a0 = u64 [sp + 0x10]
  4035: d6 72 07                 a0 = t0 mulhu a0
  4038: 98 77 0b                 a0 = a0 >> 0xb
  4041: 82 19 08                 a2 = u64 [sp + 0x8]
  4044: c0 97 0c                 i32 a5 = a0 * a2
  4047: c8 2c 06                 s1 = a5 + t0
  4050: 97 6c 30                 a5 = s1 << 0x30
  4053: 98 cc 32                 a5 = a5 >> 0x32
  4056: ca 4c 0c                 a5 = a5 * t2
  4059: 98 c3 11                 t1 = a5 >> 0x11
  4062: 98 cc 10                 a5 = a5 >> 0x10
  4065: 84 cc fe 07              a5 = a5 & 0x7fe
  4069: 96 39 9c                 a2 = t1 * 0xffffffffffffff9c
  4072: c8 69 09                 a2 = a2 + s1
  4075: 97 99 31                 a2 = a2 << 0x31
  4078: 98 99 30                 a2 = a2 >> 0x30
  4081: c8 bc 0c                 a5 = a5 + a4
  4084: 7c c6                    s1 = u8 [a5]
  4086: 7c cc 01                 a5 = u8 [a5 + 0x1]
  4089: c8 b9 09                 a2 = a2 + a4
  4092: 7c 95 01                 s0 = u8 [a2 + 0x1]
  4095: 7c 99                    a2 = u8 [a2]
  4097: 78 ac ff                 u8 [a3 + 0xffffffffffffffff] = a5
  4100: 78 a6 fe                 u8 [a3 + 0xfffffffffffffffe] = s1
  4103: 78 a5 01                 u8 [a3 + 0x1] = s0
  4106: 78 a9                    u8 [a3] = a2
  4108: 95 88 fc                 a1 = a1 + 0xfffffffffffffffc
  4111: 95 aa fc                 a3 = a3 + 0xfffffffffffffffc
  4114: ac 20 ac                 jump @286 if ra <u t0
      :                          @287
  4117: 54 17 63 3b              jump @289 if a0 <=u 99
      :                          @288
  4121: 97 79 30                 a2 = a0 << 0x30
  4124: 98 99 32                 a2 = a2 >> 0x32
  4127: 96 99 7b 14              a2 = a2 * 0x147b
  4131: 98 99 11                 a2 = a2 >> 0x11
  4134: 96 9a 9c                 a3 = a2 * 0xffffffffffffff9c
  4137: c8 a7 07                 a0 = a0 + a3
  4140: 97 77 31                 a0 = a0 << 0x31
  4143: 98 77 30                 a0 = a0 >> 0x30
  4146: 95 88 fe                 a1 = a1 + 0xfffffffffffffffe
  4149: 33 0a 8c 01 01           a3 = 0x1018c
  4154: c8 a7 07                 a0 = a0 + a3
  4157: 7c 7a 01                 a3 = u8 [a0 + 0x1]
  4160: 7c 77                    a0 = u8 [a0]
  4162: 95 1b 19                 a4 = sp + 0x19
  4165: c8 8b 0b                 a4 = a4 + a1
  4168: 78 ba 01                 u8 [a4 + 0x1] = a3
  4171: 78 b7                    u8 [a4] = a0
  4173: 64 97                    a0 = a2
  4175: 01                       fallthrough
      :                          @289
  4176: 55 17 0a 14              jump @291 if a0 >=u 10
      :                          @290
  4180: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
  4183: 95 19 19                 a2 = sp + 0x19
  4186: c8 89 09                 a2 = a2 + a1
  4189: 83 77 30                 i32 a0 = a0 + 0x30
  4192: 78 97                    u8 [a2] = a0
  4194: 28 21                    jump @292
      :                          @291
  4196: 97 77 01                 a0 = a0 << 0x1
  4199: 95 88 fe                 a1 = a1 + 0xfffffffffffffffe
  4202: 33 09 8c 01 01           a2 = 0x1018c
  4207: c8 97 07                 a0 = a0 + a2
  4210: 7c 79 01                 a2 = u8 [a0 + 0x1]
  4213: 7c 77                    a0 = u8 [a0]
  4215: 95 1a 19                 a3 = sp + 0x19
  4218: c8 8a 0a                 a3 = a3 + a1
  4221: 78 a9 01                 u8 [a3 + 0x1] = a2
  4224: 78 a7                    u8 [a3] = a0
  4226: 01                       fallthrough
      :                          @292
  4227: 95 1a 19                 a3 = sp + 0x19
  4230: c8 8a 0a                 a3 = a3 + a1
  4233: 9a 8b 27                 a4 = 0x27 - a1
  4236: 33 08 48 01 01           a1 = 0x10148
  4241: 82 17                    a0 = u64 [sp]
  4243: 33 09                    a2 = 0
  4245: 50 10 4c 12              ra = 76, jump @294
      :                          @293 [@dyn 38]
  4249: 82 10 50                 ra = u64 [sp + 0x50]
  4252: 82 15 48                 s0 = u64 [sp + 0x48]
  4255: 82 16 40                 s1 = u64 [sp + 0x40]
  4258: 95 11 58                 sp = sp + 0x58
  4261: 32 00                    ret
      :                          @294
  4263: 95 11 98                 sp = sp + 0xffffffffffffff98
  4266: 7b 10 60                 u64 [sp + 0x60] = ra
  4269: 7b 15 58                 u64 [sp + 0x58] = s0
  4272: 7b 16 50                 u64 [sp + 0x50] = s1
  4275: 80 73 34                 t1 = u32 [a0 + 0x34]
  4278: 7b 1a 20                 u64 [sp + 0x20] = a3
  4281: 64 9c                    a5 = a2
  4283: 84 36 01                 s1 = t1 & 0x1
  4286: 33 02 2b                 t0 = 0x2b
  4289: 33 09 00 00 11           a2 = 0x110000
  4294: 84 3a 04                 a3 = t1 & 0x4
  4297: 7b 1b 28                 u64 [sp + 0x28] = a4
  4300: c8 b6 04                 t2 = s1 + a4
  4303: 7b 1c 30                 u64 [sp + 0x30] = a5
  4306: 52 0a 10                 jump @297 if a3 != 0
      :                          @295
  4309: 49 11 38                 u64 [sp + 56] = 0
  4312: 82 78                    a1 = u64 [a0]
  4314: 94 69 2b                 a2 = 0x2b if s1 != 0
  4317: 52 08 35                 jump @301 if a1 != 0
      :                          @296
  4320: 28 56                    jump @306
      :                          @297
  4322: 7b 18 38                 u64 [sp + 0x38] = a1
  4325: 33 09                    a2 = 0
  4327: 51 0c 1b                 jump @300 if a5 == 0
      :                          @298
  4330: 82 1b 38                 a4 = u64 [sp + 0x38]
  4333: 01                       fallthrough
      :                          @299
  4334: 7d b5                    s0 = i8 [a4]
  4336: 89 55 c0                 s0 = s0 <s 0xffffffffffffffc0
  4339: 85 5a 01                 a3 = s0 ^ 0x1
  4342: c8 a9 09                 a2 = a2 + a3
  4345: 95 cc ff                 a5 = a5 + 0xffffffffffffffff
  4348: 95 bb 01                 a4 = a4 + 0x1
  4351: 52 0c ef                 jump @299 if a5 != 0
      :                          @300
  4354: c8 94 04                 t2 = t2 + a2
  4357: 33 09 00 00 11           a2 = 0x110000
  4362: 82 78                    a1 = u64 [a0]
  4364: db 62 09                 a2 = t0 if s1 != 0
  4367: 51 08 27                 jump @306 if a1 == 0
      :                          @301
  4370: 82 7a 08                 a3 = u64 [a0 + 0x8]
  4373: ae a4 21                 jump @306 if t2 >=u a3
      :                          @302
  4376: 84 38 08                 a1 = t1 & 0x8
  4379: 52 08 50                 jump @309 if a1 != 0
      :                          @303
  4382: 7c 76 38                 s1 = u8 [a0 + 0x38]
  4385: c9 4a 0a                 a3 = a3 - t2
  4388: 7b 19 18                 u64 [sp + 0x18] = a2
  4391: 5a 16 01 9d 00           jump @316 if s1 >s 1
      :                          @304
  4396: 52 06 aa 00              jump @318 if s1 != 0
      :                          @305
  4400: 7b 1a 10                 u64 [sp + 0x10] = a3
  4403: 28 a9 00                 jump @319
      :                          @306
  4406: 82 75 20                 s0 = u64 [a0 + 0x20]
  4409: 82 76 28                 s1 = u64 [a0 + 0x28]
  4412: 64 57                    a0 = s0
  4414: 64 68                    a1 = s1
  4416: 82 1a 38                 a3 = u64 [sp + 0x38]
  4419: 82 1b 30                 a4 = u64 [sp + 0x30]
  4422: 50 10 4e 6c 01           ra = 78, jump @339
      :                          @307 [@dyn 39]
  4427: 33 08 01                 a1 = 0x1
  4430: 52 07 bb 00              jump @324 if a0 != 0
      :                          @308
  4434: 82 6c 18                 a5 = u64 [s1 + 0x18]
  4437: 64 57                    a0 = s0
  4439: 82 18 20                 a1 = u64 [sp + 0x20]
  4442: 82 19 28                 a2 = u64 [sp + 0x28]
  4445: 82 10 60                 ra = u64 [sp + 0x60]
  4448: 82 15 58                 s0 = u64 [sp + 0x58]
  4451: 82 16 50                 s1 = u64 [sp + 0x50]
  4454: 95 11 68                 sp = sp + 0x68
  4457: 32 0c                    jump [a5]
      :                          @309
  4459: 7b 1a 40                 u64 [sp + 0x40] = a3
  4462: 64 45                    s0 = t2
  4464: 81 78 30                 a1 = i32 [a0 + 0x30]
  4467: 7b 18 10                 u64 [sp + 0x10] = a1
  4470: 7c 7a 38                 a3 = u8 [a0 + 0x38]
  4473: 7b 1a 08                 u64 [sp + 0x8] = a3
  4476: 82 7a 20                 a3 = u64 [a0 + 0x20]
  4479: 82 78 28                 a1 = u64 [a0 + 0x28]
  4482: 48 17 30 30              u32 [a0 + 48] = 0x30
  4486: 7b 17                    u64 [sp] = a0
  4488: 46 17 38 01              u8 [a0 + 56] = 0x1
  4492: 7b 1a 48                 u64 [sp + 0x48] = a3
  4495: 64 a7                    a0 = a3
  4497: 64 86                    s1 = a1
  4499: 82 1a 38                 a3 = u64 [sp + 0x38]
  4502: 82 1b 30                 a4 = u64 [sp + 0x30]
  4505: 50 10 50 19 01           ra = 80, jump @339
      :                          @310 [@dyn 40]
  4510: 52 07 67                 jump @323 if a0 != 0
      :                          @311
  4513: 82 17 40                 a0 = u64 [sp + 0x40]
  4516: c9 57 05                 s0 = a0 - s0
  4519: 95 55 01                 s0 = s0 + 0x1
  4522: 01                       fallthrough
      :                          @312
  4523: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  4526: 51 05 c6 00              jump @334 if s0 == 0
      :                          @313
  4530: 82 69 20                 a2 = u64 [s1 + 0x20]
  4533: 33 08 30                 a1 = 0x30
  4536: 82 17 48                 a0 = u64 [sp + 0x48]
  4539: b4 90 01 52              ra = 82, jump [a2]
      :                          @314 [@dyn 41]
  4543: 51 07 ec                 jump @312 if a0 == 0
      :                          @315
  4546: 28 43                    jump @323
      :                          @316
  4548: 52 16 02 12              jump @318 if s1 != 2
      :                          @317
  4552: 98 a6 01                 s1 = a3 >> 0x1
  4555: 95 a8 01                 a1 = a3 + 0x1
  4558: 98 88 01                 a1 = a1 >> 0x1
  4561: 7b 18 10                 u64 [sp + 0x10] = a1
  4564: 28 08                    jump @319
      :                          @318
  4566: 64 a6                    s1 = a3
  4568: 49 11 10                 u64 [sp + 16] = 0
  4571: 01                       fallthrough
      :                          @319
  4572: 82 78 20                 a1 = u64 [a0 + 0x20]
  4575: 7b 18 48                 u64 [sp + 0x48] = a1
  4578: 82 75 28                 s0 = u64 [a0 + 0x28]
  4581: 81 77 30                 a0 = i32 [a0 + 0x30]
  4584: 7b 17 40                 u64 [sp + 0x40] = a0
  4587: 95 66 01                 s1 = s1 + 0x1
  4590: 01                       fallthrough
      :                          @320
  4591: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
  4594: 51 06 27                 jump @325 if s1 == 0
      :                          @321
  4597: 82 59 20                 a2 = u64 [s0 + 0x20]
  4600: 82 17 48                 a0 = u64 [sp + 0x48]
  4603: 82 18 40                 a1 = u64 [sp + 0x40]
  4606: b4 90 01 54              ra = 84, jump [a2]
      :                          @322 [@dyn 42]
  4610: 51 07 ed                 jump @320 if a0 == 0
      :                          @323
  4613: 33 08 01                 a1 = 0x1
  4616: 01                       fallthrough
      :                          @324
  4617: 64 87                    a0 = a1
  4619: 82 10 60                 ra = u64 [sp + 0x60]
  4622: 82 15 58                 s0 = u64 [sp + 0x58]
  4625: 82 16 50                 s1 = u64 [sp + 0x50]
  4628: 95 11 68                 sp = sp + 0x68
  4631: 32 00                    ret
      :                          @325
  4633: 82 16 48                 s1 = u64 [sp + 0x48]
  4636: 64 67                    a0 = s1
  4638: 64 58                    a1 = s0
  4640: 82 19 18                 a2 = u64 [sp + 0x18]
  4643: 82 1a 38                 a3 = u64 [sp + 0x38]
  4646: 82 1b 30                 a4 = u64 [sp + 0x30]
  4649: 50 10 56 89 00           ra = 86, jump @339
      :                          @326 [@dyn 43]
  4654: 33 08 01                 a1 = 0x1
  4657: 52 07 d8                 jump @324 if a0 != 0
      :                          @327
  4660: 82 5a 18                 a3 = u64 [s0 + 0x18]
  4663: 64 67                    a0 = s1
  4665: 82 18 20                 a1 = u64 [sp + 0x20]
  4668: 82 19 28                 a2 = u64 [sp + 0x28]
  4671: b4 a0 01 58              ra = 88, jump [a3]
      :                          @328 [@dyn 44]
  4675: 33 08 01                 a1 = 0x1
  4678: 52 07 c3                 jump @324 if a0 != 0
      :                          @329
  4681: 82 17 10                 a0 = u64 [sp + 0x10]
  4684: 9a 77                    a0 = -a0
  4686: 7b 17 38                 u64 [sp + 0x38] = a0
  4689: 33 06 ff                 s1 = 0xffffffffffffffff
  4692: 01                       fallthrough
      :                          @330
  4693: 82 17 38                 a0 = u64 [sp + 0x38]
  4696: c8 67 07                 a0 = a0 + s1
  4699: 51 17 ff 42              jump @337 if a0 == 4294967295
      :                          @331
  4703: 82 59 20                 a2 = u64 [s0 + 0x20]
  4706: 82 17 48                 a0 = u64 [sp + 0x48]
  4709: 82 18 40                 a1 = u64 [sp + 0x40]
  4712: b4 90 01 5a              ra = 90, jump [a2]
      :                          @332 [@dyn 45]
  4716: 95 66 01                 s1 = s1 + 0x1
  4719: 51 07 e6                 jump @330 if a0 == 0
      :                          @333
  4722: 28 37                    jump @338
      :                          @334
  4724: 82 6a 18                 a3 = u64 [s1 + 0x18]
  4727: 82 17 48                 a0 = u64 [sp + 0x48]
  4730: 82 18 20                 a1 = u64 [sp + 0x20]
  4733: 82 19 28                 a2 = u64 [sp + 0x28]
  4736: b4 a0 01 5c              ra = 92, jump [a3]
      :                          @335 [@dyn 46]
  4740: 33 08 01                 a1 = 0x1
  4743: 52 07 82                 jump @324 if a0 != 0
      :                          @336
  4746: 33 08                    a1 = 0
  4748: 82 16                    s1 = u64 [sp]
  4750: 82 17 10                 a0 = u64 [sp + 0x10]
  4753: 7a 67 30                 u32 [s1 + 0x30] = a0
  4756: 82 17 08                 a0 = u64 [sp + 0x8]
  4759: 78 67 38                 u8 [s1 + 0x38] = a0
  4762: 28 6f ff                 jump @324
      :                          @337
  4765: 82 16 10                 s1 = u64 [sp + 0x10]
  4768: 82 17 10                 a0 = u64 [sp + 0x10]
  4771: d8 76 08                 a1 = s1 <u a0
  4774: 28 63 ff                 jump @324
      :                          @338
  4777: 82 17 10                 a0 = u64 [sp + 0x10]
  4780: d8 76 08                 a1 = s1 <u a0
  4783: 28 5a ff                 jump @324
      :                          @339
  4786: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  4789: 7b 10 20                 u64 [sp + 0x20] = ra
  4792: 7b 15 18                 u64 [sp + 0x18] = s0
  4795: 7b 16 10                 u64 [sp + 0x10] = s1
  4798: 83 9c                    i32 a5 = a2 + 0
  4800: 33 02 00 00 11           t0 = 0x110000
  4805: 64 a6                    s1 = a3
  4807: 64 85                    s0 = a1
  4809: 64 7a                    a3 = a0
  4811: aa 2c 20                 jump @342 if a5 == t0
      :                          @340
  4814: 82 5c 20                 a5 = u64 [s0 + 0x20]
  4817: 64 a7                    a0 = a3
  4819: 64 98                    a1 = a2
  4821: 7b 1b 08                 u64 [sp + 0x8] = a4
  4824: 7b 1a                    u64 [sp] = a3
  4826: b4 c0 01 5e              ra = 94, jump [a5]
      :                          @341 [@dyn 47]
  4830: 82 1a                    a3 = u64 [sp]
  4832: 82 1b 08                 a4 = u64 [sp + 0x8]
  4835: 64 78                    a1 = a0
  4837: 33 07 01                 a0 = 0x1
  4840: 52 08 20                 jump @345 if a1 != 0
      :                          @342
  4843: 51 06 1a                 jump @344 if s1 == 0
      :                          @343
  4846: 82 5c 18                 a5 = u64 [s0 + 0x18]
  4849: 64 a7                    a0 = a3
  4851: 64 68                    a1 = s1
  4853: 64 b9                    a2 = a4
  4855: 82 10 20                 ra = u64 [sp + 0x20]
  4858: 82 15 18                 s0 = u64 [sp + 0x18]
  4861: 82 16 10                 s1 = u64 [sp + 0x10]
  4864: 95 11 28                 sp = sp + 0x28
  4867: 32 0c                    jump [a5]
      :                          @344
  4869: 33 07                    a0 = 0
  4871: 01                       fallthrough
      :                          @345
  4872: 82 10 20                 ra = u64 [sp + 0x20]
  4875: 82 15 18                 s0 = u64 [sp + 0x18]
  4878: 82 16 10                 s1 = u64 [sp + 0x10]
  4881: 95 11 28                 sp = sp + 0x28
  4884: 32 00                    ret
      :                          @346
  4886: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  4890: 7b 10 80 00              u64 [sp + 0x80] = ra
  4894: 7b 15 78                 u64 [sp + 0x78] = s0
  4897: 7b 16 70                 u64 [sp + 0x70] = s1
  4900: 49 11 60 20              u64 [sp + 96] = 0x20
  4904: 33 0a 03                 a3 = 0x3
  4907: 78 1a 68                 u8 [sp + 0x68] = a3
  4910: 82 96 20                 s1 = u64 [a2 + 0x20]
  4913: 49 11 30                 u64 [sp + 48] = 0
  4916: 49 11 40                 u64 [sp + 64] = 0
  4919: 7b 17 50                 u64 [sp + 0x50] = a0
  4922: 7b 18 58                 u64 [sp + 0x58] = a1
  4925: 51 06 07 01              jump @368 if s1 == 0
      :                          @347
  4929: 82 97 28                 a0 = u64 [a2 + 0x28]
  4932: 51 07 74 01              jump @378 if a0 == 0
      :                          @348
  4936: 49 11 28                 u64 [sp + 40] = 0
  4939: 82 95                    s0 = u64 [a2]
  4941: 7b 19 08                 u64 [sp + 0x8] = a2
  4944: 82 98 10                 a1 = u64 [a2 + 0x10]
  4947: 7b 18 18                 u64 [sp + 0x18] = a1
  4950: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  4953: 97 88 03                 a1 = a1 << 0x3
  4956: 98 88 03                 a1 = a1 >> 0x3
  4959: 95 88 01                 a1 = a1 + 0x1
  4962: 7b 18                    u64 [sp] = a1
  4964: 95 55 08                 s0 = s0 + 0x8
  4967: 96 78 38                 a1 = a0 * 0x38
  4970: 95 66 18                 s1 = s1 + 0x18
  4973: 33 07 4a                 a0 = 0x4a
  4976: 7b 17 10                 u64 [sp + 0x10] = a0
  4979: 01                       fallthrough
      :                          @349
  4980: 7b 18 20                 u64 [sp + 0x20] = a1
  4983: 82 59                    a2 = u64 [s0]
  4985: 51 09 17                 jump @352 if a2 == 0
      :                          @350
  4988: 82 1a 58                 a3 = u64 [sp + 0x58]
  4991: 82 17 50                 a0 = u64 [sp + 0x50]
  4994: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  4997: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5000: b4 a0 01 60              ra = 96, jump [a3]
      :                          @351 [@dyn 48]
  5004: 52 07 51 01              jump @381 if a0 != 0
      :                          @352
  5008: 81 67 10                 a0 = i32 [s1 + 0x10]
  5011: 7a 17 60                 u32 [sp + 0x60] = a0
  5014: 7c 67 18                 a0 = u8 [s1 + 0x18]
  5017: 78 17 68                 u8 [sp + 0x68] = a0
  5020: 81 67 14                 a0 = i32 [s1 + 0x14]
  5023: 7a 17 64                 u32 [sp + 0x64] = a0
  5026: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  5029: 82 67                    a0 = u64 [s1]
  5031: 51 08 26                 jump @357 if a1 == 0
      :                          @353
  5034: 52 18 01 16              jump @355 if a1 != 1
      :                          @354
  5038: 97 77 04                 a0 = a0 << 0x4
  5041: 82 18 18                 a1 = u64 [sp + 0x18]
  5044: c8 87 07                 a0 = a0 + a1
  5047: 82 78 08                 a1 = u64 [a0 + 0x8]
  5050: 82 19 10                 a2 = u64 [sp + 0x10]
  5053: aa 98 07                 jump @356 if a1 == a2
      :                          @355
  5056: 33 08                    a1 = 0
  5058: 28 0f                    jump @358
      :                          @356
  5060: 82 77                    a0 = u64 [a0]
  5062: 82 77                    a0 = u64 [a0]
  5064: 33 08 01                 a1 = 0x1
  5067: 28 06                    jump @358
      :                          @357
  5069: 33 08 01                 a1 = 0x1
  5072: 01                       fallthrough
      :                          @358
  5073: 7b 18 30                 u64 [sp + 0x30] = a1
  5076: 7b 17 38                 u64 [sp + 0x38] = a0
  5079: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  5082: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  5085: 51 08 26                 jump @363 if a1 == 0
      :                          @359
  5088: 52 18 01 16              jump @361 if a1 != 1
      :                          @360
  5092: 97 77 04                 a0 = a0 << 0x4
  5095: 82 18 18                 a1 = u64 [sp + 0x18]
  5098: c8 87 07                 a0 = a0 + a1
  5101: 82 78 08                 a1 = u64 [a0 + 0x8]
  5104: 82 19 10                 a2 = u64 [sp + 0x10]
  5107: aa 98 07                 jump @362 if a1 == a2
      :                          @361
  5110: 33 08                    a1 = 0
  5112: 28 0f                    jump @364
      :                          @362
  5114: 82 77                    a0 = u64 [a0]
  5116: 82 77                    a0 = u64 [a0]
  5118: 33 08 01                 a1 = 0x1
  5121: 28 06                    jump @364
      :                          @363
  5123: 33 08 01                 a1 = 0x1
  5126: 01                       fallthrough
      :                          @364
  5127: 7b 18 40                 u64 [sp + 0x40] = a1
  5130: 7b 17 48                 u64 [sp + 0x48] = a0
  5133: 82 67 08                 a0 = u64 [s1 + 0x8]
  5136: 97 77 04                 a0 = a0 << 0x4
  5139: 82 18 18                 a1 = u64 [sp + 0x18]
  5142: c8 78 08                 a1 = a1 + a0
  5145: 82 87                    a0 = u64 [a1]
  5147: 82 89 08                 a2 = u64 [a1 + 0x8]
  5150: 95 18 30                 a1 = sp + 0x30
  5153: b4 90 01 62              ra = 98, jump [a2]
      :                          @365 [@dyn 49]
  5157: 52 07 b8 00              jump @381 if a0 != 0
      :                          @366
  5161: 95 55 10                 s0 = s0 + 0x10
  5164: 82 18 20                 a1 = u64 [sp + 0x20]
  5167: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  5170: 95 66 38                 s1 = s1 + 0x38
  5173: 82 17 28                 a0 = u64 [sp + 0x28]
  5176: 95 77 01                 a0 = a0 + 0x1
  5179: 7b 17 28                 u64 [sp + 0x28] = a0
  5182: 52 08 36 ff              jump @349 if a1 != 0
      :                          @367
  5186: 28 69                    jump @376
      :                          @368
  5188: 82 97 18                 a0 = u64 [a2 + 0x18]
  5191: 51 07 71                 jump @378 if a0 == 0
      :                          @369
  5194: 82 95 10                 s0 = u64 [a2 + 0x10]
  5197: 33 0a                    a3 = 0
  5199: 97 78 04                 a1 = a0 << 0x4
  5202: c8 58 08                 a1 = a1 + s0
  5205: 7b 18 20                 u64 [sp + 0x20] = a1
  5208: 7b 19 08                 u64 [sp + 0x8] = a2
  5211: 82 96                    s1 = u64 [a2]
  5213: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  5216: 97 77 04                 a0 = a0 << 0x4
  5219: 98 77 04                 a0 = a0 >> 0x4
  5222: 95 77 01                 a0 = a0 + 0x1
  5225: 7b 17                    u64 [sp] = a0
  5227: 95 66 08                 s1 = s1 + 0x8
  5230: 01                       fallthrough
      :                          @370
  5231: 7b 1a 28                 u64 [sp + 0x28] = a3
  5234: 82 69                    a2 = u64 [s1]
  5236: 51 09 16                 jump @373 if a2 == 0
      :                          @371
  5239: 82 1a 58                 a3 = u64 [sp + 0x58]
  5242: 82 17 50                 a0 = u64 [sp + 0x50]
  5245: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  5248: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5251: b4 a0 01 64              ra = 100, jump [a3]
      :                          @372 [@dyn 50]
  5255: 52 07 56                 jump @381 if a0 != 0
      :                          @373
  5258: 82 57                    a0 = u64 [s0]
  5260: 82 59 08                 a2 = u64 [s0 + 0x8]
  5263: 95 18 30                 a1 = sp + 0x30
  5266: b4 90 01 66              ra = 102, jump [a2]
      :                          @374 [@dyn 51]
  5270: 52 07 47                 jump @381 if a0 != 0
      :                          @375
  5273: 95 66 10                 s1 = s1 + 0x10
  5276: 95 55 10                 s0 = s0 + 0x10
  5279: 82 1a 28                 a3 = u64 [sp + 0x28]
  5282: 95 aa 01                 a3 = a3 + 0x1
  5285: 82 17 20                 a0 = u64 [sp + 0x20]
  5288: ab 75 c7                 jump @370 if s0 != a0
      :                          @376
  5291: 82 19 08                 a2 = u64 [sp + 0x8]
  5294: 82 1a                    a3 = u64 [sp]
  5296: 82 97 08                 a0 = u64 [a2 + 0x8]
  5299: ac 7a 0d                 jump @379 if a3 <u a0
      :                          @377
  5302: 28 2c                    jump @382
      :                          @378
  5304: 33 0a                    a3 = 0
  5306: 82 97 08                 a0 = u64 [a2 + 0x8]
  5309: 54 07 25                 jump @382 if a0 <=u 0
      :                          @379
  5312: 82 97                    a0 = u64 [a2]
  5314: 97 a8 04                 a1 = a3 << 0x4
  5317: c8 87 09                 a2 = a0 + a1
  5320: 82 1a 58                 a3 = u64 [sp + 0x58]
  5323: 82 17 50                 a0 = u64 [sp + 0x50]
  5326: 82 98                    a1 = u64 [a2]
  5328: 82 99 08                 a2 = u64 [a2 + 0x8]
  5331: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5334: b4 a0 01 68              ra = 104, jump [a3]
      :                          @380 [@dyn 52]
  5338: 51 07 08                 jump @382 if a0 == 0
      :                          @381
  5341: 33 07 01                 a0 = 0x1
  5344: 28 05                    jump @383
      :                          @382
  5346: 33 07                    a0 = 0
  5348: 01                       fallthrough
      :                          @383
  5349: 82 10 80 00              ra = u64 [sp + 0x80]
  5353: 82 15 78                 s0 = u64 [sp + 0x78]
  5356: 82 16 70                 s1 = u64 [sp + 0x70]
  5359: 95 11 88 00              sp = sp + 0x88
  5363: 32 00                    ret
      :                          @384 [@dyn 53]
  5365: 32 00                    ret
      :                          @385 [@dyn 54]
  5367: 95 11 80                 sp = sp + 0xffffffffffffff80
  5370: 7b 10 78                 u64 [sp + 0x78] = ra
  5373: 7b 15 70                 u64 [sp + 0x70] = s0
  5376: 7b 16 68                 u64 [sp + 0x68] = s1
  5379: 64 92                    t0 = a2
  5381: 33 00                    ra = 0
  5383: 33 0b                    a4 = 0
  5385: 33 05                    s0 = 0
  5387: 14 03 ff fe fe fe fe fe fe fe t1 = 0xfefefefefefefeff
  5397: 33 0a 0a 0a 0a 0a        a3 = 0xa0a0a0a
  5403: 14 04 0a 0a 0a 0a 0a 0a 0a 0a t2 = 0xa0a0a0a0a0a0a0a
  5413: 82 79 10                 a2 = u64 [a0 + 0x10]
  5416: 7b 19 48                 u64 [sp + 0x48] = a2
  5419: 82 79                    a2 = u64 [a0]
  5421: 7b 19 38                 u64 [sp + 0x38] = a2
  5424: 82 77 08                 a0 = u64 [a0 + 0x8]
  5427: 7b 17 30                 u64 [sp + 0x30] = a0
  5430: 33 07 80 01 01           a0 = 0x10180
  5435: 7b 17 08                 u64 [sp + 0x8] = a0
  5438: 3a 07 08 00 03           a0 = u64 [0x30008]
  5443: 7b 17 60                 u64 [sp + 0x60] = a0
  5446: 7b 18 58                 u64 [sp + 0x58] = a1
  5449: 95 88 08                 a1 = a1 + 0x8
  5452: 7b 18                    u64 [sp] = a1
  5454: 33 0c 0a                 a5 = 0xa
  5457: 7b 12 20                 u64 [sp + 0x20] = t0
  5460: 7b 13 18                 u64 [sp + 0x18] = t1
  5463: 7b 14 10                 u64 [sp + 0x10] = t2
  5466: 28 3a                    jump @389
      :                          @386
  5468: 64 06                    s1 = ra
  5470: c8 89 07                 a0 = a2 + a1
  5473: 7c 77 ff                 a0 = u8 [a0 + 0xffffffffffffffff]
  5476: 95 77 f6                 a0 = a0 + 0xfffffffffffffff6
  5479: 88 77 01                 a0 = a0 <u 0x1
  5482: 01                       fallthrough
      :                          @387
  5483: 82 1a 48                 a3 = u64 [sp + 0x48]
  5486: 78 a7                    u8 [a3] = a0
  5488: 82 17 30                 a0 = u64 [sp + 0x30]
  5491: 82 7a 18                 a3 = u64 [a0 + 0x18]
  5494: 82 17 38                 a0 = u64 [sp + 0x38]
  5497: b4 a0 01 6e              ra = 110, jump [a3]
      :                          @388 [@dyn 55]
  5501: 64 5b                    a4 = s0
  5503: 82 12 20                 t0 = u64 [sp + 0x20]
  5506: 82 13 18                 t1 = u64 [sp + 0x18]
  5509: 82 14 10                 t2 = u64 [sp + 0x10]
  5512: 64 60                    ra = s1
  5514: 33 0c 0a                 a5 = 0xa
  5517: 82 15 40                 s0 = u64 [sp + 0x40]
  5520: 52 07 63 01              jump @430 if a0 != 0
      :                          @389
  5524: 84 57 ff 00              a0 = s0 & 0xff
  5528: 52 07 57 01              jump @429 if a0 != 0
      :                          @390
  5532: 7b 1b 50                 u64 [sp + 0x50] = a4
  5535: ae 02 0a                 jump @393 if t0 >=u ra
      :                          @391
  5538: 28 ef 00                 jump @420
      :                          @392
  5541: ac 02 ec 00              jump @420 if t0 <u ra
      :                          @393
  5545: c9 02 08                 a1 = t0 - ra
  5548: 82 16 58                 s1 = u64 [sp + 0x58]
  5551: c8 06 06                 s1 = s1 + ra
  5554: 55 18 10 1d              jump @399 if a1 >=u 16
      :                          @394
  5558: aa 02 d8 00              jump @419 if t0 == ra
      :                          @395
  5562: 33 0a                    a3 = 0
  5564: 01                       fallthrough
      :                          @396
  5565: c8 a6 07                 a0 = s1 + a3
  5568: 7c 77                    a0 = u8 [a0]
  5570: aa c7 a5 00              jump @414 if a0 == a5
      :                          @397
  5574: 95 aa 01                 a3 = a3 + 0x1
  5577: ab a8 f4                 jump @396 if a1 != a3
      :                          @398
  5580: 28 c2 00                 jump @419
      :                          @399
  5583: 95 69 07                 a2 = s1 + 0x7
  5586: 84 9a f8                 a3 = a2 & 0xfffffffffffffff8
  5589: c9 6a 07                 a0 = a3 - s1
  5592: d3 6a 0a                 a3 = a3 ^ s1
  5595: 88 aa 01                 a3 = a3 <u 0x1
  5598: 88 7b 01                 a4 = a0 <u 0x1
  5601: d4 ba 0a                 a3 = a3 | a4
  5604: 51 0a 45                 jump @405 if a3 == 0
      :                          @400
  5607: 33 07                    a0 = 0
  5609: 95 8a f0                 a3 = a1 + 0xfffffffffffffff0
  5612: 82 1b                    a4 = u64 [sp]
  5614: c8 0b 0b                 a4 = a4 + ra
  5617: 28 08                    jump @402
      :                          @401
  5619: 82 1b                    a4 = u64 [sp]
  5621: c8 0b 0b                 a4 = a4 + ra
  5624: 01                       fallthrough
      :                          @402
  5625: c8 76 0c                 a5 = s1 + a0
  5628: 82 cc                    a5 = u64 [a5]
  5630: c8 7b 09                 a2 = a4 + a0
  5633: 82 99                    a2 = u64 [a2]
  5635: d3 4c 05                 s0 = a5 ^ t2
  5638: c8 35 05                 s0 = s0 + t1
  5641: e0 c5 0c                 a5 = s0 & ~a5
  5644: d3 49 05                 s0 = a2 ^ t2
  5647: c8 35 05                 s0 = s0 + t1
  5650: e0 95 09                 a2 = s0 & ~a2
  5653: d4 c9 09                 a2 = a2 | a5
  5656: 82 1c 60                 a5 = u64 [sp + 0x60]
  5659: d2 c9 09                 a2 = a2 & a5
  5662: 52 09 1f                 jump @408 if a2 != 0
      :                          @403
  5665: 95 77 10                 a0 = a0 + 0x10
  5668: ae 7a d5                 jump @402 if a3 >=u a0
      :                          @404
  5671: 28 16                    jump @408
      :                          @405
  5673: c8 a6 0b                 a4 = s1 + a3
  5676: 7c bb                    a4 = u8 [a4]
  5678: aa cb 51                 jump @417 if a4 == a5
      :                          @406
  5681: 95 aa 01                 a3 = a3 + 0x1
  5684: ab a7 f5                 jump @405 if a0 != a3
      :                          @407
  5687: 95 8a f0                 a3 = a1 + 0xfffffffffffffff0
  5690: ae 7a b9                 jump @401 if a3 >=u a0
      :                          @408
  5693: aa 87 9a 00              jump @426 if a0 == a1
      :                          @409
  5697: 33 0a                    a3 = 0
  5699: c8 76 06                 s1 = s1 + a0
  5702: c9 72 08                 a1 = t0 - a0
  5705: c9 08 08                 a1 = a1 - ra
  5708: 33 0c 0a                 a5 = 0xa
  5711: 82 1b 50                 a4 = u64 [sp + 0x50]
  5714: 01                       fallthrough
      :                          @410
  5715: c8 a6 09                 a2 = s1 + a3
  5718: 7c 99                    a2 = u8 [a2]
  5720: aa c9 0b                 jump @413 if a2 == a5
      :                          @411
  5723: 95 aa 01                 a3 = a3 + 0x1
  5726: ab a8 f5                 jump @410 if a1 != a3
      :                          @412
  5729: 28 2d                    jump @419
      :                          @413
  5731: c8 7a 0a                 a3 = a3 + a0
  5734: 01                       fallthrough
      :                          @414
  5735: c8 0a 0a                 a3 = a3 + ra
  5738: 95 a0 01                 ra = a3 + 0x1
  5741: ae 2a 38 ff              jump @392 if a3 >=u t0
      :                          @415
  5745: 82 17 58                 a0 = u64 [sp + 0x58]
  5748: c8 7a 0a                 a3 = a3 + a0
  5751: 7c a7                    a0 = u8 [a3]
  5753: ab c7 2c ff              jump @392 if a0 != a5
      :                          @416
  5757: 28 61                    jump @427
      :                          @417
  5759: 82 1b 50                 a4 = u64 [sp + 0x50]
  5762: c8 0a 0a                 a3 = a3 + ra
  5765: 95 a0 01                 ra = a3 + 0x1
  5768: ac 2a e9                 jump @415 if a3 <u t0
      :                          @418
  5771: 28 1a ff                 jump @392
      :                          @419
  5774: 64 20                    ra = t0
  5776: 01                       fallthrough
      :                          @420
  5777: 49 11 40 01              u64 [sp + 64] = 0x1
  5781: 64 b5                    s0 = a4
  5783: 64 26                    s1 = t0
  5785: aa 2b 56                 jump @429 if a4 == t0
      :                          @421
  5788: 82 17 48                 a0 = u64 [sp + 0x48]
  5791: 7c 77                    a0 = u8 [a0]
  5793: 51 07 22                 jump @424 if a0 == 0
      :                          @422
  5796: 82 17 30                 a0 = u64 [sp + 0x30]
  5799: 82 7a 18                 a3 = u64 [a0 + 0x18]
  5802: 33 09 04                 a2 = 0x4
  5805: 82 17 38                 a0 = u64 [sp + 0x38]
  5808: 82 18 08                 a1 = u64 [sp + 0x8]
  5811: 7b 10 28                 u64 [sp + 0x28] = ra
  5814: b4 a0 01 70              ra = 112, jump [a3]
      :                          @423 [@dyn 56]
  5818: 82 1b 50                 a4 = u64 [sp + 0x50]
  5821: 82 10 28                 ra = u64 [sp + 0x28]
  5824: 52 07 33                 jump @430 if a0 != 0
      :                          @424
  5827: c9 b6 09                 a2 = s1 - a4
  5830: 82 18 58                 a1 = u64 [sp + 0x58]
  5833: c8 b8 08                 a1 = a1 + a4
  5836: ab b6 90 fe              jump @386 if s1 != a4
      :                          @425
  5840: 64 06                    s1 = ra
  5842: 33 07                    a0 = 0
  5844: 28 97 fe                 jump @387
      :                          @426
  5847: 64 20                    ra = t0
  5849: 82 1b 50                 a4 = u64 [sp + 0x50]
  5852: 28 b5                    jump @420
      :                          @427
  5854: 49 11 40                 u64 [sp + 64] = 0
  5857: 64 05                    s0 = ra
  5859: 64 06                    s1 = ra
  5861: 82 17 48                 a0 = u64 [sp + 0x48]
  5864: 7c 77                    a0 = u8 [a0]
  5866: 52 07 ba                 jump @422 if a0 != 0
      :                          @428
  5869: 28 d6                    jump @424
      :                          @429
  5871: 33 07                    a0 = 0
  5873: 28 06                    jump @431
      :                          @430
  5875: 33 07 01                 a0 = 0x1
  5878: 01                       fallthrough
      :                          @431
  5879: 82 10 78                 ra = u64 [sp + 0x78]
  5882: 82 15 70                 s0 = u64 [sp + 0x70]
  5885: 82 16 68                 s1 = u64 [sp + 0x68]
  5888: 95 11 80 00              sp = sp + 0x80
  5892: 32 00                    ret
      :                          @432 [@dyn 57]
  5894: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  5897: 7b 10 20                 u64 [sp + 0x20] = ra
  5900: 7b 15 18                 u64 [sp + 0x18] = s0
  5903: 7b 16 10                 u64 [sp + 0x10] = s1
  5906: 82 75 10                 s0 = u64 [a0 + 0x10]
  5909: 7c 59                    a2 = u8 [s0]
  5911: 82 7b                    a4 = u64 [a0]
  5913: 82 76 08                 s1 = u64 [a0 + 0x8]
  5916: 51 09 32                 jump @436 if a2 == 0
      :                          @433
  5919: 82 6a 18                 a3 = u64 [s1 + 0x18]
  5922: 7b 18 08                 u64 [sp + 0x8] = a1
  5925: 33 08 80 01 01           a1 = 0x10180
  5930: 33 09 04                 a2 = 0x4
  5933: 64 b7                    a0 = a4
  5935: 7b 1b                    u64 [sp] = a4
  5937: b4 a0 01 74              ra = 116, jump [a3]
      :                          @434 [@dyn 58]
  5941: 82 18 08                 a1 = u64 [sp + 0x8]
  5944: 82 1b                    a4 = u64 [sp]
  5946: 51 07 14                 jump @436 if a0 == 0
      :                          @435
  5949: 33 07 01                 a0 = 0x1
  5952: 82 10 20                 ra = u64 [sp + 0x20]
  5955: 82 15 18                 s0 = u64 [sp + 0x18]
  5958: 82 16 10                 s1 = u64 [sp + 0x10]
  5961: 95 11 28                 sp = sp + 0x28
  5964: 32 00                    ret
      :                          @436
  5966: 83 87                    i32 a0 = a1 + 0
  5968: 95 77 f6                 a0 = a0 + 0xfffffffffffffff6
  5971: 88 77 01                 a0 = a0 <u 0x1
  5974: 78 57                    u8 [s0] = a0
  5976: 82 6c 20                 a5 = u64 [s1 + 0x20]
  5979: 64 b7                    a0 = a4
  5981: 82 10 20                 ra = u64 [sp + 0x20]
  5984: 82 15 18                 s0 = u64 [sp + 0x18]
  5987: 82 16 10                 s1 = u64 [sp + 0x10]
  5990: 95 11 28                 sp = sp + 0x28
  5993: 32 0c                    jump [a5]
      :                          @437 [@dyn 59]
  5995: 64 8a                    a3 = a1
  5997: 33 08 50 01 01           a1 = 0x10150
  6002: 64 a9                    a2 = a3
  6004: 28 a2 fb                 jump @346
      :                          @438
  6007: 95 11 70 ff              sp = sp + 0xffffffffffffff70
  6011: 7b 10 88 00              u64 [sp + 0x88] = ra
  6015: 7b 15 80 00              u64 [sp + 0x80] = s0
  6019: 7b 16 78                 u64 [sp + 0x78] = s1
  6022: 64 75                    s0 = a0
  6024: 7c 77 08                 a0 = u8 [a0 + 0x8]
  6027: 64 8b                    a4 = a1
  6029: 33 08 01                 a1 = 0x1
  6032: 33 06 01                 s1 = 0x1
  6035: 51 07 1d                 jump @440 if a0 == 0
      :                          @439
  6038: 78 56 08                 u8 [s0 + 0x8] = s1
  6041: 46 15 09 01              u8 [s0 + 9] = 0x1
  6045: 64 57                    a0 = s0
  6047: 82 10 88 00              ra = u64 [sp + 0x88]
  6051: 82 15 80 00              s0 = u64 [sp + 0x80]
  6055: 82 16 78                 s1 = u64 [sp + 0x78]
  6058: 95 11 90 00              sp = sp + 0x90
  6062: 32 00                    ret
      :                          @440
  6064: 64 9a                    a3 = a2
  6066: 82 5c                    a5 = u64 [s0]
  6068: 80 c7 34                 a0 = u32 [a5 + 0x34]
  6071: 7c 58 09                 a1 = u8 [s0 + 0x9]
  6074: 84 79 04                 a2 = a0 & 0x4
  6077: 52 09 43                 jump @446 if a2 != 0
      :                          @441
  6080: 51 08 31                 jump @444 if a1 == 0
      :                          @442
  6083: 82 c8 28                 a1 = u64 [a5 + 0x28]
  6086: 82 c7 20                 a0 = u64 [a5 + 0x20]
  6089: 82 83 18                 t1 = u64 [a1 + 0x18]
  6092: 33 08 84 01 01           a1 = 0x10184
  6097: 33 09 02                 a2 = 0x2
  6100: 64 a6                    s1 = a3
  6102: 7b 1b 10                 u64 [sp + 0x10] = a4
  6105: 7b 1c 08                 u64 [sp + 0x8] = a5
  6108: b4 30 01 78              ra = 120, jump [t1]
      :                          @443 [@dyn 60]
  6112: 82 1c 08                 a5 = u64 [sp + 0x8]
  6115: 82 1b 10                 a4 = u64 [sp + 0x10]
  6118: 64 6a                    a3 = s1
  6120: 33 08 01                 a1 = 0x1
  6123: 33 06 01                 s1 = 0x1
  6126: 52 07 a8                 jump @439 if a0 != 0
      :                          @444
  6129: 64 b7                    a0 = a4
  6131: 64 c8                    a1 = a5
  6133: b4 a0 01 7a              ra = 122, jump [a3]
      :                          @445 [@dyn 61]
  6137: 33 08 01                 a1 = 0x1
  6140: 64 76                    s1 = a0
  6142: 28 98                    jump @439
      :                          @446
  6144: 52 08 36                 jump @450 if a1 != 0
      :                          @447
  6147: 82 c8 28                 a1 = u64 [a5 + 0x28]
  6150: 82 c7 20                 a0 = u64 [a5 + 0x20]
  6153: 82 83 18                 t1 = u64 [a1 + 0x18]
  6156: 33 08 88 01 01           a1 = 0x10188
  6161: 33 09 01                 a2 = 0x1
  6164: 33 06 01                 s1 = 0x1
  6167: 7b 1a                    u64 [sp] = a3
  6169: 7b 1b 10                 u64 [sp + 0x10] = a4
  6172: 7b 1c 08                 u64 [sp + 0x8] = a5
  6175: b4 30 01 7c              ra = 124, jump [t1]
      :                          @448 [@dyn 62]
  6179: 82 1c 08                 a5 = u64 [sp + 0x8]
  6182: 82 1b 10                 a4 = u64 [sp + 0x10]
  6185: 82 1a                    a3 = u64 [sp]
  6187: 33 08 01                 a1 = 0x1
  6190: 52 07 68 ff              jump @439 if a0 != 0
      :                          @449
  6194: 81 c7 34                 a0 = i32 [a5 + 0x34]
  6197: 01                       fallthrough
      :                          @450
  6198: 33 06 01                 s1 = 0x1
  6201: 78 16 37                 u8 [sp + 0x37] = s1
  6204: 82 c8 20                 a1 = u64 [a5 + 0x20]
  6207: 82 c9 28                 a2 = u64 [a5 + 0x28]
  6210: 7b 18 18                 u64 [sp + 0x18] = a1
  6213: 7b 19 20                 u64 [sp + 0x20] = a2
  6216: 95 18 37                 a1 = sp + 0x37
  6219: 7b 18 28                 u64 [sp + 0x28] = a1
  6222: 81 c8 30                 a1 = i32 [a5 + 0x30]
  6225: 7c c9 38                 a2 = u8 [a5 + 0x38]
  6228: 82 c3                    t1 = u64 [a5]
  6230: 82 c4 08                 t2 = u64 [a5 + 0x8]
  6233: 82 c0 10                 ra = u64 [a5 + 0x10]
  6236: 82 c2 18                 t0 = u64 [a5 + 0x18]
  6239: 7a 17 6c                 u32 [sp + 0x6c] = a0
  6242: 7a 18 68                 u32 [sp + 0x68] = a1
  6245: 78 19 70                 u8 [sp + 0x70] = a2
  6248: 7b 13 38                 u64 [sp + 0x38] = t1
  6251: 7b 14 40                 u64 [sp + 0x40] = t2
  6254: 7b 10 48                 u64 [sp + 0x48] = ra
  6257: 7b 12 50                 u64 [sp + 0x50] = t0
  6260: 95 17 18                 a0 = sp + 0x18
  6263: 7b 17 58                 u64 [sp + 0x58] = a0
  6266: 33 07 50 01 01           a0 = 0x10150
  6271: 7b 17 60                 u64 [sp + 0x60] = a0
  6274: 95 18 38                 a1 = sp + 0x38
  6277: 64 b7                    a0 = a4
  6279: b4 a0 01 7e              ra = 126, jump [a3]
      :                          @451 [@dyn 63]
  6283: 52 07 21                 jump @454 if a0 != 0
      :                          @452
  6286: 82 18 60                 a1 = u64 [sp + 0x60]
  6289: 82 17 58                 a0 = u64 [sp + 0x58]
  6292: 82 8a 18                 a3 = u64 [a1 + 0x18]
  6295: 33 08 86 01 01           a1 = 0x10186
  6300: 33 09 02                 a2 = 0x2
  6303: b4 a0 02 80 00           ra = 128, jump [a3]
      :                          @453 [@dyn 64]
  6308: 64 76                    s1 = a0
  6310: 33 08 01                 a1 = 0x1
  6313: 28 ed fe                 jump @439
      :                          @454
  6316: 33 08 01                 a1 = 0x1
  6319: 28 e7 fe                 jump @439
      :                          @455
  6322: 51 08 9b 00              jump @476 if a1 == 0
      :                          @456
  6326: 64 79                    a2 = a0
  6328: 7c 77                    a0 = u8 [a0]
  6330: 51 07 91 00              jump @475 if a0 == 0
      :                          @457
  6334: 51 27 ff 00 90 00        jump @477 if a0 == 255
      :                          @458
  6340: 6c 7a                    a3 = sext.b a0
  6342: 57 0a 09                 jump @460 if a3 <s 0
      :                          @459
  6345: 33 0a                    a3 = 0
  6347: 33 08                    a1 = 0
  6349: 28 73                    jump @474
      :                          @460
  6351: 55 27 c0 00 0d           jump @462 if a0 >=u 192
      :                          @461
  6356: 33 0a 01                 a3 = 0x1
  6359: 33 0b 80                 a4 = 0xffffffffffffff80
  6362: 28 4a                    jump @471
      :                          @462
  6364: 55 27 e0 00 0e           jump @464 if a0 >=u 224
      :                          @463
  6369: 33 0a 02                 a3 = 0x2
  6372: 33 0b 40 ff              a4 = 0xffffffffffffff40
  6376: 28 3c                    jump @471
      :                          @464
  6378: 55 27 f0 00 0e           jump @466 if a0 >=u 240
      :                          @465
  6383: 33 0a 03                 a3 = 0x3
  6386: 33 0b 20 ff              a4 = 0xffffffffffffff20
  6390: 28 2e                    jump @471
      :                          @466
  6392: 55 27 f8 00 0e           jump @468 if a0 >=u 248
      :                          @467
  6397: 33 0a 04                 a3 = 0x4
  6400: 33 0b 10 ff              a4 = 0xffffffffffffff10
  6404: 28 20                    jump @471
      :                          @468
  6406: 55 27 fc 00 0e           jump @470 if a0 >=u 252
      :                          @469
  6411: 33 0a 05                 a3 = 0x5
  6414: 33 0b 08 ff              a4 = 0xffffffffffffff08
  6418: 28 12                    jump @471
      :                          @470
  6420: 88 7a fe 00              a3 = a0 <u 0xfe
  6424: 33 0b 04 ff              a4 = 0xffffffffffffff04
  6428: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  6432: 85 aa 07                 a3 = a3 ^ 0x7
  6435: 01                       fallthrough
      :                          @471
  6436: ae 8a 2b                 jump @478 if a3 >=u a1
      :                          @472
  6439: 33 08                    a1 = 0
  6441: c8 b7 07                 a0 = a0 + a4
  6444: 64 ab                    a4 = a3
  6446: 01                       fallthrough
      :                          @473
  6447: c8 b9 0c                 a5 = a2 + a4
  6450: 7c cc                    a5 = u8 [a5]
  6452: 97 88 08                 a1 = a1 << 0x8
  6455: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  6458: d4 c8 08                 a1 = a1 | a5
  6461: 52 0b f2                 jump @473 if a4 != 0
      :                          @474
  6464: 8a a9 03                 i32 a2 = a3 << 0x3
  6467: cf 97 07                 a0 = a0 << a2
  6470: c8 87 07                 a0 = a0 + a1
  6473: 32 00                    ret
      :                          @475
  6475: 32 00                    ret
      :                          @476
  6477: 00                       trap
      :                          @477
  6478: 00                       trap
      :                          @478
  6479: 00                       trap
      :                          @479 [@dyn 65]
  6480: 95 11 d0                 sp = sp + 0xffffffffffffffd0
  6483: 7b 10 28                 u64 [sp + 0x28] = ra
  6486: 7b 15 20                 u64 [sp + 0x20] = s0
  6489: 7b 16 18                 u64 [sp + 0x18] = s1
  6492: 64 86                    s1 = a1
  6494: 82 88 28                 a1 = u64 [a1 + 0x28]
  6497: 82 6a 20                 a3 = u64 [s1 + 0x20]
  6500: 82 8b 18                 a4 = u64 [a1 + 0x18]
  6503: 64 75                    s0 = a0
  6505: 33 08 48 01 01           a1 = 0x10148
  6510: 33 09 01                 a2 = 0x1
  6513: 64 a7                    a0 = a3
  6515: b4 b0 02 84 00           ra = 132, jump [a4]
      :                          @480 [@dyn 66]
  6520: 7b 16                    u64 [sp] = s1
  6522: 78 17 08                 u8 [sp + 0x8] = a0
  6525: 46 11 09                 u8 [sp + 9] = 0
  6528: 7b 15 10                 u64 [sp + 0x10] = s0
  6531: 33 09 02                 a2 = 0x2
  6534: 64 17                    a0 = sp
  6536: 95 18 10                 a1 = sp + 0x10
  6539: 50 20 86 00 ec fd        ra = 134, jump @438
      :                          @481 [@dyn 67]
  6545: 33 07 01                 a0 = 0x1
  6548: 7c 18 08                 a1 = u8 [sp + 0x8]
  6551: 52 08 1b                 jump @483 if a1 != 0
      :                          @482
  6554: 82 17                    a0 = u64 [sp]
  6556: 82 78 28                 a1 = u64 [a0 + 0x28]
  6559: 82 77 20                 a0 = u64 [a0 + 0x20]
  6562: 82 8a 18                 a3 = u64 [a1 + 0x18]
  6565: 33 08 89 01 01           a1 = 0x10189
  6570: 33 09 01                 a2 = 0x1
  6573: b4 a0 02 88 00           ra = 136, jump [a3]
      :                          @483 [@dyn 68]
  6578: 82 10 28                 ra = u64 [sp + 0x28]
  6581: 82 15 20                 s0 = u64 [sp + 0x20]
  6584: 82 16 18                 s1 = u64 [sp + 0x18]
  6587: 95 11 30                 sp = sp + 0x30
  6590: 32 00                    ret
