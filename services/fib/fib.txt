// RO data = 0/0 bytes
// RW data = 0/0 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 0 bytes
// RO data = []
// RW data = []
// Instructions = 61
// Code size = 169 bytes

      :                          @0
     0: 28 12 00 00 00           jump @4
      :                          @1
     5: 28 11 00 00 00           jump @5
      :                          @2
    10: 28 6d 00 00 00           jump @10
      :                          @3
    15: 28 96 00                 jump @11
      :                          @4 [export #0: 'is_authorized']
    18: 33 07                    a0 = 0x0
    20: 32 00                    ret
      :                          @5 [export #1: 'refine']
    22: 8b 11 d8                 i64 sp = i64 sp - i64 40
    25: 71 10 20                 u64 [sp + 32] = ra
    28: 71 15 18                 u64 [sp + 24] = s0
    31: 71 16 10                 u64 [sp + 16] = s1
    34: 48 11 08                 u32 [sp + 8] = 0
    37: 49 01                    u64 [sp + 0] = 0
    39: 64 18                    a1 = sp
    41: 33 09 0c                 a2 = 0xc
    44: 33 07                    a0 = 0x0
    46: 0a 10                    ecalli 16 // 'import'
    48: 01                       fallthrough
      :                          @6
    49: 79 77                    a0 = a0 + 0x0
    51: 51 07 0d                 jump @8 if a0 == 0
      :                          @7
    54: 33 07                    a0 = 0x0
    56: 33 09 01                 a2 = 0x1
    59: 33 08 01                 a1 = 0x1
    62: 28 11                    jump @9
      :                          @8
    64: 77 17 04                 a0 = i32 [sp + 4]
    67: 77 18 08                 a1 = i32 [sp + 8]
    70: 77 19                    a2 = i32 [sp]
    72: aa 78 08                 a1 = a1 + a0
    75: 79 99 01                 a2 = a2 + 0x1
    78: 01                       fallthrough
      :                          @9
    79: 70 19                    u32 [sp] = a2
    81: 70 18 04                 u32 [sp + 4] = a1
    84: 70 17 08                 u32 [sp + 8] = a0
    87: 64 15                    s0 = sp
    89: 33 06 0c                 s1 = 0xc
    92: 64 17                    a0 = sp
    94: 33 08 0c                 a1 = 0xc
    97: 0a 11                    ecalli 17 // 'export'
    99: 64 5a                    a3 = s0
   101: 64 6b                    a4 = s1
   103: 33 07                    a0 = 0x0
   105: 78 10 20                 ra = u64 [sp + 32]
   108: 78 15 18                 s0 = u64 [sp + 24]
   111: 78 16 10                 s1 = u64 [sp + 16]
   114: 8b 11 28                 i64 sp = i64 sp + 0x28
   117: 32 00                    ret
      :                          @10 [export #2: 'accumulate']
   119: 8b 11 f0                 i64 sp = i64 sp - i64 16
   122: 71 10 08                 u64 [sp + 8] = ra
   125: 46 11 07                 u8 [sp + 7] = 0
   128: 8b 17 07                 i64 a0 = i64 sp + 0x7
   131: 8d 77 20                 a0 = a0 <<64 32
   134: 8e 77 20                 a0 = a0 >>64 32
   137: 14 09 00 00 ff fe 00 00 00 00 a2 = 0xfeff0000
   147: 33 08 01                 a1 = 0x1
   150: 33 0a 0c                 a3 = 0xc
   153: 0a 03                    ecalli 3 // 'write'
   155: 33 07                    a0 = 0x0
   157: 78 10 08                 ra = u64 [sp + 8]
   160: 8b 11 10                 i64 sp = i64 sp + 0x10
   163: 32 00                    ret
      :                          @11 [export #3: 'on_transfer']
   165: 33 07                    a0 = 0x0
   167: 32 00                    ret