// RO data = 696/696 bytes
// RW data = 4120/73824 bytes
// Stack size = 65536 bytes
// RO data = [102, 105, 98, 78, 32, 110, 117, 109, 95, 115, 101, 103, 109, 101, 110, 116, 115, 61, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 70, 73, 66, 32, 111, 110, 95, 116, 114, 97, 110, 115, 102, 101, 114, 58, 32, 116, 105, 109, 101, 115, 108, 111, 116, 61, 32, 115, 101, 114, 118, 105, 99, 101, 95, 105, 110, 100, 101, 120, 61, 32, 115, 101, 110, 100, 101, 114, 61, 32, 97, 109, 111, 117, 110, 116, 61, 32, 114, 101, 99, 101, 105, 118, 101, 114, 61, 32, 109, 101, 109, 111, 61, 32, 103, 97, 115, 95, 108, 105, 109, 105, 116, 61, 0, 0, 0, 0, 40, 0, 1, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 66, 0, 1, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 81, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 97, 0, 1, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 89, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 107, 0, 1, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 113, 0, 1, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 70, 73, 66, 32, 111, 110, 95, 116, 114, 97, 110, 115, 102, 101, 114, 32, 103, 97, 115, 58, 32, 103, 111, 116, 32, 32, 40, 114, 101, 99, 111, 114, 100, 101, 100, 32, 97, 116, 32, 107, 101, 121, 32, 52, 41, 0, 0, 0, 240, 0, 1, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 9, 1, 1, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 44, 32, 44, 10, 10, 93, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 119, 114, 105, 116, 101, 95, 114, 101, 115, 117, 108, 116, 32, 107, 101, 121, 61, 44, 32, 114, 101, 115, 117, 108, 116, 61, 0, 0, 124, 2, 1, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 141, 2, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0]
// RW data = [235, 57, 12, 2, 231, 1, 233, 195, 88, 75, 252, 92, 228, 140, 100, 252, 128, 69, 38, 119, 143, 230, 252, 62, 81, 133, 15, 205, 157, 177, 149, 18, 213, 57, 90, 100, 2, 167, 47, 172, 60, 22, 159, 249, 186, 230, 130, 110, 237, 194, 201, 77, 201, 154, 183, 236, 96, 229, 251, 128, 0, 3, 15, 213, 76, 254, 61, 156, 41, 239, 199, 102, 170, 211, 211, 120, 30, 204, 156, 126, 208, 97, 108, 121, 159, 178, 236, 206, 224, 238, 24, 151, 201, 113, 163, 134, 245, 29, 211, 199, 14, 14, 188, 195, 5, 17, 17, 44, 125, 106, 0, 138, 100, 99, 200, 161, 187, 126, 232, 110, 104, 55, 135, 203, 250, 200, 58, 69, 22, 203, 68, 23, 227, 224, 33, 4, 225, 229, 162, 232, 28, 37, 43, 149, 238, 81, 37, 240, 241, 167, 202, 252, 49, 80, 19, 82, 108, 30, 1, 221, 31, 132, 147, 223, 172, 131, 100, 187, 96, 217, 132, 215, 110, 89, 160, 194, 34, 123, 18, 128, 80, 114, 37, 53, 233, 253, 163, 255, 49, 62, 68, 124, 254, 17, 50, 36, 88, 72, 180, 54, 247, 134, 62, 101, 32, 233, 199, 144, 157, 95, 29, 43, 172, 73, 24, 236, 38, 103, 147, 26, 210, 149, 82, 236, 204, 164, 23, 249, 235, 40, 130, 212, 44, 105, 83, 116, 210, 114, 22, 235, 64, 243, 41, 101, 103, 30, 82, 136, 67, 160, 100, 205, 47, 241, 197, 82, 7, 37, 207, 46, 87, 7, 107, 145, 23, 250, 252, 139, 168, 50, 199, 248, 135, 54, 142, 3, 182, 80, 107, 207, 28, 170, 153, 179, 155, 170, 185, 49, 84, 25, 225, 2, 92, 116, 244, 68, 84, 136, 21, 137, 106, 95, 118, 5, 95, 135, 87, 217, 202, 150, 70, 9, 229, 14, 141, 225, 96, 190, 220, 103, 170, 105, 215, 137, 92, 139, 141, 175, 140, 159, 150, 87, 133, 30, 240, 127, 2, 210, 254, 165, 189, 140, 148, 251, 116, 224, 196, 17, 92, 96, 130, 157, 1, 138, 139, 68, 91, 63, 13, 18, 98, 43, 234, 19, 38, 85, 255, 89, 183, 189, 101, 46, 38, 186, 197, 47, 31, 79, 204, 45, 214, 80, 124, 117, 179, 197, 29, 224, 189, 125, 15, 125, 65, 63, 231, 112, 161, 250, 178, 4, 72, 85, 74, 217, 70, 37, 221, 45, 96, 213, 61, 203, 198, 132, 253, 85, 122, 31, 127, 225, 155, 240, 205, 93, 15, 25, 157, 244, 3, 126, 75, 219, 200, 99, 23, 237, 152, 72, 251, 107, 61, 156, 129, 3, 192, 204, 158, 1, 180, 107, 126, 108, 2, 245, 57, 237, 229, 19, 147, 23, 246, 212, 211, 118, 223, 14, 126, 214, 223, 152, 60, 232, 142, 108, 66, 112, 236, 113, 83, 62, 136, 13, 139, 224, 182, 78, 67, 68, 232, 42, 69, 233, 166, 182, 23, 95, 200, 62, 196, 127, 211, 178, 211, 215, 30, 98, 100, 112, 255, 224, 139, 106, 207, 108, 47, 106, 190, 248, 49, 81, 245, 2, 19, 38, 79, 80, 99, 16, 3, 173, 152, 205, 86, 188, 148, 127, 130, 156, 51, 137, 129, 111, 6, 86, 100, 175, 163, 119, 16, 187, 66, 73, 47, 116, 51, 111, 179, 230, 50, 247, 245, 197, 56, 45, 89, 148, 177, 84, 129, 74, 37, 114, 197, 88, 150, 218, 87, 190, 10, 180, 167, 105, 165, 196, 95, 58, 209, 243, 214, 198, 125, 162, 175, 163, 204, 187, 196, 186, 151, 71, 221, 44, 129, 49, 238, 21, 3, 59, 75, 33, 0, 131, 62, 78, 64, 66, 158, 220, 240, 239, 20, 72, 191, 75, 228, 53, 171, 222, 209, 222, 254, 130, 219, 171, 118, 51, 39, 2, 230, 11, 189, 214, 222, 133, 19, 172, 214, 192, 188, 156, 109, 9, 26, 247, 123, 201, 119, 230, 124, 124, 213, 50, 74, 78, 107, 27, 5, 11, 106, 178, 249, 14, 169, 228, 31, 41, 112, 62, 169, 141, 153, 14, 145, 137, 216, 52, 28, 51, 143, 10, 44, 244, 137, 94, 72, 13, 148, 231, 211, 41, 176, 251, 221, 183, 111, 197, 209, 224, 145, 8, 215, 107, 225, 1, 68, 93, 230, 141, 49, 97, 73, 44, 151, 116, 42, 177, 175, 147, 134, 243, 252, 118, 246, 137, 62, 8, 127, 131, 88, 79, 23, 211, 120, 90, 193, 238, 131, 150, 100, 33, 179, 23, 2, 137, 228, 89, 161, 144, 81, 206, 221, 5, 198, 158, 122, 202, 226, 84, 124, 148, 166, 223, 94, 254, 49, 109, 212, 174, 211, 61, 176, 141, 62, 191, 240, 18, 118, 239, 223, 64, 209, 248, 47, 53, 44, 63, 34, 236, 169, 28, 147, 72, 152, 39, 28, 176, 165, 251, 77, 56, 51, 149, 42, 182, 124, 113, 30, 30, 27, 189, 174, 139, 14, 45, 114, 57, 46, 187, 230, 86, 186, 121, 92, 45, 86, 40, 155, 2, 229, 178, 139, 200, 34, 165, 58, 102, 101, 216, 94, 187, 7, 113, 18, 233, 18, 155, 185, 162, 17, 232, 49, 191, 11, 165, 3, 169, 126, 237, 33, 162, 50, 88, 148, 249, 67, 195, 3, 224, 234, 97, 176, 185, 15, 93, 75, 95, 92, 238, 23, 2, 203, 57, 213, 98, 8, 153, 151, 130, 51, 67, 33, 105, 201, 97, 80, 77, 137, 169, 249, 195, 123, 36, 255, 32, 77, 202, 186, 7, 149, 113, 75, 84, 88, 19, 130, 201, 93, 140, 114, 108, 177, 214, 82, 153, 170, 246, 145, 56, 28, 183, 171, 124, 92, 166, 252, 68, 168, 206, 4, 239, 113, 116, 138, 184, 207, 166, 8, 168, 26, 190, 26, 225, 166, 11, 207, 139, 106, 20, 231, 250, 119, 33, 207, 124, 204, 86, 19, 52, 189, 82, 60, 77, 26, 35, 43, 170, 249, 225, 72, 26, 213, 73, 173, 171, 109, 210, 76, 205, 70, 151, 37, 209, 130, 155, 183, 135, 26, 75, 20, 184, 107, 219, 198, 0, 250, 22, 164, 77, 135, 113, 183, 154, 208, 228, 11, 62, 138, 38, 137, 133, 209, 212, 18, 132, 203, 227, 251, 196, 36, 131, 228, 147, 56, 189, 180, 224, 210, 166, 8, 2, 131, 12, 233, 210, 80, 11, 233, 17, 6, 241, 118, 169, 170, 103, 129, 72, 224, 29, 113, 154, 203, 41, 149, 231, 24, 57, 191, 255, 75, 248, 185, 170, 245, 154, 31, 82, 171, 52, 7, 105, 196, 228, 74, 89, 175, 136, 28, 131, 37, 35, 146, 244, 2, 49, 147, 249, 22, 207, 194, 168, 81, 172, 136, 228, 75, 146, 85, 220, 194, 186, 83, 12, 126, 131, 96, 108, 21, 252, 119, 79, 11, 245, 46, 108, 105, 203, 218, 9, 86, 107, 129, 169, 244, 70, 229, 81, 3, 106, 98, 99, 207, 28, 145, 38, 112, 100, 90, 204, 159, 209, 106, 199, 71, 59, 208, 95, 39, 81, 55, 172, 204, 6, 165, 13, 113, 68, 79, 7, 18, 217, 44, 36, 242, 125, 75, 199, 66, 27, 6, 49, 61, 239, 40, 244, 172, 207, 47, 227, 47, 47, 141, 192, 204, 248, 224, 68, 184, 224, 62, 9, 239, 255, 219, 165, 143, 174, 232, 55, 87, 150, 63, 49, 251, 53, 205, 35, 154, 59, 7, 166, 59, 80, 0, 178, 177, 149, 191, 45, 104, 8, 39, 59, 59, 167, 251, 15, 187, 32, 159, 96, 252, 55, 204, 231, 4, 20, 168, 107, 150, 17, 165, 148, 188, 35, 22, 237, 93, 35, 200, 87, 252, 52, 8, 50, 0, 158, 112, 67, 11, 101, 78, 234, 213, 61, 163, 40, 14, 249, 77, 130, 88, 115, 145, 182, 117, 26, 183, 120, 121, 66, 10, 166, 100, 221, 148, 142, 119, 165, 49, 29, 183, 214, 25, 121, 126, 184, 224, 66, 13, 166, 122, 124, 98, 92, 86, 143, 162, 66, 176, 161, 156, 72, 189, 177, 50, 79, 240, 5, 245, 46, 167, 124, 205, 209, 139, 4, 63, 0, 142, 73, 145, 160, 206, 189, 186, 201, 167, 121, 220, 111, 228, 185, 193, 61, 173, 227, 254, 138, 173, 133, 200, 137, 177, 250, 99, 41, 122, 254, 189, 235, 139, 251, 255, 92, 156, 171, 217, 187, 54, 31, 83, 23, 225, 219, 122, 45, 252, 64, 177, 35, 118, 205, 48, 27, 64, 213, 119, 138, 182, 177, 27, 118, 30, 47, 245, 186, 71, 63, 35, 189, 129, 21, 188, 157, 247, 236, 184, 14, 36, 210, 188, 175, 75, 254, 33, 83, 236, 147, 175, 46, 35, 84, 219, 13, 240, 189, 114, 104, 253, 53, 49, 10, 127, 198, 187, 232, 247, 44, 255, 159, 2, 163, 98, 80, 79, 112, 45, 33, 88, 5, 102, 252, 193, 115, 125, 133, 187, 141, 172, 79, 58, 108, 162, 166, 36, 91, 50, 74, 42, 130, 29, 78, 90, 142, 197, 130, 222, 231, 233, 99, 100, 42, 181, 167, 224, 240, 237, 130, 243, 240, 78, 255, 118, 183, 107, 0, 206, 74, 82, 3, 249, 94, 72, 170, 197, 248, 170, 90, 217, 90, 245, 127, 186, 66, 128, 196, 108, 115, 170, 255, 238, 47, 7, 8, 181, 224, 10, 73, 18, 238, 52, 127, 209, 157, 213, 45, 209, 103, 209, 93, 45, 76, 16, 203, 8, 221, 112, 196, 13, 240, 217, 56, 14, 95, 87, 195, 160, 249, 58, 112, 85, 89, 229, 48, 232, 19, 7, 155, 163, 171, 102, 254, 192, 240, 208, 153, 71, 251, 110, 204, 80, 233, 201, 62, 170, 59, 151, 253, 1, 93, 20, 55, 119, 135, 83, 18, 190, 157, 219, 77, 77, 94, 115, 185, 232, 162, 172, 11, 194, 2, 121, 231, 26, 76, 184, 242, 62, 132, 196, 44, 75, 160, 234, 66, 115, 91, 162, 199, 19, 116, 211, 27, 87, 215, 2, 205, 73, 175, 34, 65, 20, 215, 139, 114, 21, 104, 22, 241, 51, 90, 35, 9, 75, 211, 217, 205, 219, 155, 173, 20, 117, 159, 98, 30, 104, 97, 13, 199, 17, 56, 243, 44, 234, 210, 175, 178, 35, 249, 2, 172, 184, 113, 22, 12, 0, 56, 228, 199, 168, 7, 194, 128, 136, 78, 161, 97, 37, 228, 201, 33, 90, 107, 3, 86, 78, 98, 205, 178, 120, 254, 57, 5, 78, 183, 130, 207, 225, 197, 230, 202, 3, 155, 132, 9, 36, 227, 136, 0, 185, 218, 93, 217, 152, 172, 87, 131, 65, 87, 237, 86, 91, 192, 109, 19, 48, 151, 115, 65, 217, 58, 194, 195, 173, 97, 70, 119, 169, 200, 63, 34, 214, 126, 146, 19, 149, 224, 55, 65, 63, 68, 66, 72, 119, 164, 222, 188, 56, 203, 123, 193, 46, 128, 195, 64, 137, 211, 35, 133, 204, 77, 214, 105, 78, 230, 219, 59, 26, 198, 75, 167, 65, 110, 24, 155, 81, 121, 100, 185, 200, 22, 137, 216, 108, 99, 200, 85, 170, 70, 233, 62, 44, 249, 201, 203, 135, 231, 140, 70, 220, 194, 109, 191, 204, 21, 185, 21, 149, 184, 134, 41, 206, 9, 2, 72, 242, 55, 236, 95, 23, 15, 136, 204, 116, 62, 223, 87, 111, 115, 4, 210, 169, 78, 136, 76, 211, 133, 113, 202, 5, 183, 190, 194, 54, 50, 49, 15, 100, 118, 33, 90, 24, 9, 106, 147, 215, 197, 0, 92, 6, 255, 87, 55, 120, 203, 232, 107, 38, 144, 150, 208, 241, 32, 176, 62, 5, 187, 227, 145, 67, 22, 33, 217, 24, 6, 171, 218, 85, 16, 203, 63, 10, 163, 237, 34, 220, 170, 216, 15, 151, 20, 182, 208, 165, 128, 246, 149, 182, 156, 162, 118, 179, 92, 230, 138, 254, 112, 105, 168, 221, 29, 242, 16, 140, 21, 78, 111, 53, 28, 44, 19, 228, 199, 112, 182, 227, 60, 58, 137, 62, 93, 58, 5, 94, 78, 226, 93, 192, 177, 79, 57, 149, 138, 88, 81, 92, 34, 185, 210, 31, 66, 27, 225, 192, 39, 74, 242, 26, 139, 193, 77, 109, 76, 117, 205, 217, 47, 95, 10, 230, 84, 200, 16, 135, 25, 235, 191, 65, 118, 146, 28, 184, 26, 27, 41, 162, 15, 47, 184, 224, 123, 175, 98, 122, 250, 240, 38, 23, 249, 113, 173, 227, 210, 115, 33, 96, 208, 202, 167, 84, 88, 194, 150, 65, 148, 40, 132, 102, 73, 164, 60, 230, 58, 9, 130, 167, 61, 134, 50, 203, 133, 69, 118, 87, 231, 50, 53, 150, 215, 217, 246, 123, 108, 192, 217, 243, 103, 183, 126, 136, 214, 139, 151, 231, 1, 147, 66, 67, 123, 15, 253, 232, 162, 188, 81, 251, 211, 174, 185, 34, 62, 181, 100, 115, 119, 246, 231, 12, 90, 90, 186, 88, 51, 57, 106, 202, 137, 18, 93, 205, 207, 89, 213, 228, 154, 176, 80, 218, 86, 179, 4, 64, 162, 223, 28, 75, 185, 12, 174, 8, 22, 41, 6, 182, 19, 158, 124, 99, 226, 235, 43, 109, 252, 57, 213, 137, 14, 9, 54, 13, 249, 188, 13, 255, 231, 84, 29, 135, 141, 1, 164, 129, 146, 110, 191, 242, 184, 160, 253, 180, 167, 90, 186, 15, 77, 2, 64, 155, 104, 13, 10, 237, 103, 245, 158, 206, 142, 89, 97, 235, 90, 24, 15, 124, 4, 21, 141, 194, 230, 108, 91, 94, 188, 20, 113, 80, 206, 252, 234, 51, 113, 178, 186, 60, 144, 19, 248, 212, 78, 127, 22, 138, 185, 141, 48, 202, 54, 102, 101, 157, 158, 165, 177, 176, 74, 133, 64, 62, 168, 192, 234, 83, 6, 77, 31, 179, 211, 82, 226, 3, 211, 247, 216, 93, 108, 140, 195, 215, 57, 126, 57, 106, 197, 230, 61, 204, 231, 31, 191, 94, 66, 13, 19, 43, 176, 129, 156, 50, 20, 248, 71, 196, 182, 64, 159, 106, 254, 11, 94, 119, 113, 15, 101, 47, 251, 77, 234, 140, 228, 134, 207, 255, 65, 120, 62, 191, 93, 169, 243, 100, 255, 54, 240, 27, 204, 103, 142, 68, 108, 99, 109, 16, 73, 210, 244, 254, 28, 254, 224, 85, 109, 201, 251, 68, 116, 19, 116, 32, 78, 134, 241, 111, 61, 79, 138, 171, 102, 41, 23, 50, 208, 30, 51, 132, 171, 236, 132, 255, 34, 31, 3, 174, 23, 248, 33, 195, 146, 118, 107, 43, 166, 179, 210, 111, 244, 43, 197, 40, 52, 50, 190, 83, 88, 54, 153, 24, 119, 165, 75, 229, 215, 108, 118, 33, 234, 92, 235, 87, 189, 126, 6, 98, 81, 95, 42, 223, 217, 127, 92, 123, 216, 142, 148, 48, 117, 151, 146, 91, 156, 45, 69, 231, 69, 167, 46, 70, 156, 112, 222, 98, 191, 232, 191, 203, 213, 208, 125, 238, 82, 188, 2, 164, 145, 35, 74, 119, 181, 196, 110, 24, 15, 239, 0, 189, 162, 60, 192, 74, 142, 222, 21, 175, 55, 216, 134, 246, 34, 202, 80, 186, 42, 1, 55, 45, 165, 156, 160, 99, 29, 3, 66, 47, 172, 187, 31, 80, 128, 169, 211, 235, 58, 198, 167, 81, 197, 177, 146, 153, 196, 233, 3, 67, 231, 216, 30, 150, 104, 47, 255, 60, 120, 0, 35, 247, 183, 26, 135, 14, 210, 107, 226, 59, 228, 233, 6, 188, 16, 223, 150, 222, 217, 69, 46, 30, 110, 88, 76, 200, 58, 64, 123, 9, 85, 10, 100, 94, 11, 26, 20, 78, 48, 218, 71, 68, 92, 178, 122, 17, 39, 46, 78, 167, 58, 43, 116, 88, 66, 165, 4, 182, 203, 208, 182, 63, 96, 80, 88, 215, 248, 103, 217, 198, 3, 62, 171, 204, 34, 105, 131, 72, 233, 228, 188, 55, 236, 101, 209, 129, 44, 230, 23, 13, 129, 145, 150, 30, 60, 222, 228, 228, 77, 203, 80, 247, 99, 175, 170, 241, 108, 177, 144, 67, 190, 176, 2, 149, 85, 104, 98, 217, 94, 184, 80, 221, 19, 121, 26, 50, 202, 207, 165, 31, 152, 17, 8, 43, 61, 32, 59, 246, 216, 209, 24, 207, 220, 144, 124, 94, 41, 41, 252, 230, 27, 108, 158, 163, 87, 93, 190, 58, 31, 187, 149, 166, 251, 228, 158, 166, 111, 135, 158, 91, 81, 26, 208, 202, 44, 4, 78, 249, 148, 232, 8, 132, 4, 72, 203, 180, 233, 38, 94, 91, 25, 9, 149, 195, 146, 34, 229, 134, 184, 149, 86, 119, 10, 139, 53, 153, 63, 181, 206, 0, 52, 205, 63, 21, 139, 175, 197, 43, 133, 254, 80, 154, 248, 104, 164, 7, 195, 251, 161, 12, 128, 108, 122, 109, 143, 186, 227, 75, 40, 233, 111, 105, 62, 50, 104, 33, 253, 89, 24, 198, 232, 124, 166, 216, 144, 159, 34, 38, 29, 33, 139, 96, 250, 83, 54, 165, 239, 178, 198, 255, 244, 70, 167, 164, 140, 129, 103, 217, 23, 24, 96, 89, 96, 88, 44, 117, 190, 242, 228, 180, 3, 188, 123, 21, 22, 108, 170, 154, 11, 227, 224, 166, 119, 218, 47, 28, 156, 89, 114, 89, 197, 251, 183, 3, 230, 63, 43, 165, 24, 248, 227, 98, 1, 55, 139, 232, 212, 228, 114, 41, 162, 93, 200, 247, 216, 243, 233, 254, 212, 71, 114, 141, 37, 207, 146, 228, 52, 146, 174, 10, 161, 214, 185, 142, 191, 106, 153, 145, 224, 40, 110, 135, 18, 117, 50, 91, 150, 249, 171, 24, 32, 165, 137, 173, 202, 164, 63, 158, 222, 137, 130, 81, 82, 70, 235, 214, 15, 183, 184, 77, 161, 116, 11, 209, 112, 160, 6, 43, 33, 197, 223, 8, 116, 61, 203, 87, 189, 146, 46, 9, 195, 103, 240, 120, 68, 48, 141, 18, 181, 25, 223, 236, 244, 75, 23, 244, 156, 95, 171, 203, 120, 133, 153, 50, 81, 82, 207, 132, 141, 136, 37, 21, 128, 106, 77, 95, 119, 156, 147, 50, 153, 70, 82, 178, 155, 52, 36, 249, 116, 245, 224, 234, 182, 13, 61, 177, 32, 85, 85, 63, 115, 89, 90, 60, 221, 212, 79, 175, 167, 206, 159, 106, 104, 125, 16, 159, 33, 106, 75, 159, 18, 198, 154, 175, 40, 199, 199, 29, 171, 244, 196, 31, 149, 148, 110, 150, 208, 240, 225, 161, 94, 136, 129, 70, 8, 183, 223, 10, 132, 164, 86, 183, 125, 228, 26, 10, 171, 199, 23, 106, 32, 171, 40, 246, 19, 213, 70, 172, 185, 25, 133, 255, 18, 162, 233, 249, 29, 253, 144, 212, 249, 155, 193, 162, 169, 192, 3, 91, 72, 197, 103, 243, 171, 165, 57, 152, 128, 5, 48, 154, 208, 14, 203, 160, 23, 210, 13, 19, 117, 224, 78, 184, 92, 99, 142, 92, 134, 7, 88, 122, 124, 46, 105, 28, 11, 92, 17, 66, 211, 52, 219, 117, 77, 239, 82, 161, 223, 247, 35, 71, 252, 61, 211, 79, 191, 143, 177, 218, 95, 216, 199, 75, 170, 56, 77, 151, 144, 11, 108, 3, 211, 153, 242, 187, 115, 28, 168, 130, 120, 82, 24, 198, 254, 126, 165, 40, 64, 65, 110, 222, 230, 17, 70, 63, 144, 86, 124, 195, 92, 38, 226, 123, 172, 123, 7, 253, 186, 241, 83, 1, 75, 188, 12, 153, 79, 201, 102, 36, 134, 156, 250, 64, 249, 90, 150, 219, 253, 163, 67, 169, 39, 159, 191, 131, 190, 178, 232, 152, 179, 110, 55, 166, 232, 80, 164, 106, 73, 199, 151, 121, 117, 108, 173, 219, 18, 73, 125, 155, 22, 2, 27, 195, 141, 103, 30, 36, 235, 37, 44, 84, 19, 117, 106, 176, 250, 252, 88, 48, 212, 10, 176, 54, 218, 195, 65, 84, 26, 36, 181, 56, 238, 214, 255, 247, 141, 208, 113, 210, 197, 56, 120, 233, 241, 37, 173, 139, 53, 215, 169, 94, 168, 137, 172, 218, 19, 199, 187, 96, 141, 63, 188, 236, 203, 214, 21, 244, 86, 5, 110, 147, 14, 247, 63, 65, 183, 108, 100, 121, 220, 157, 188, 11, 214, 51, 238, 220, 77, 28, 72, 232, 131, 250, 150, 207, 22, 254, 18, 119, 174, 167, 241, 159, 233, 28, 13, 195, 210, 110, 22, 154, 28, 31, 190, 3, 251, 20, 118, 83, 147, 93, 252, 155, 129, 234, 244, 152, 145, 98, 202, 119, 71, 133, 55, 96, 159, 19, 18, 36, 188, 244, 96, 177, 73, 149, 47, 103, 156, 2, 251, 78, 44, 84, 234, 212, 218, 51, 202, 249, 233, 39, 224, 148, 181, 71, 255, 56, 126, 65, 123, 183, 161, 34, 47, 209, 166, 226, 227, 60, 97, 89, 57, 65, 93, 180, 40, 19, 107, 168, 18, 97, 195, 57, 37, 7, 11, 200, 143, 79, 21, 162, 193, 182, 189, 118, 47, 107, 54, 143, 208, 142, 164, 235, 30, 225, 119, 166, 125, 173, 254, 230, 7, 24, 162, 167, 176, 44, 39, 1, 214, 95, 193, 93, 178, 88, 58, 199, 235, 0, 195, 195, 168, 67, 120, 162, 161, 67, 157, 53, 161, 20, 97, 185, 156, 133, 240, 101, 186, 111, 42, 79, 93, 207, 86, 109, 111, 69, 50, 144, 163, 2, 4, 99, 49, 136, 130, 67, 93, 61, 224, 239, 95, 159, 150, 93, 114, 35, 32, 53, 241, 144, 133, 231, 250, 0, 91, 198, 250, 84, 158, 147, 223, 191, 203, 15, 59, 247, 155, 48, 196, 94, 137, 71, 50, 197, 207, 252, 25, 171, 152, 220, 42, 223, 29, 40, 226, 180, 232, 252, 163, 7, 220, 169, 145, 4, 255, 116, 233, 204, 27, 0, 45, 6, 62, 225, 7, 88, 73, 18, 18, 223, 36, 173, 14, 20, 190, 212, 52, 220, 214, 240, 3, 147, 112, 38, 166, 249, 216, 29, 83, 30, 84, 161, 14, 242, 251, 63, 8, 222, 58, 10, 154, 12, 210, 251, 139, 198, 95, 108, 183, 228, 83, 228, 161, 20, 59, 241, 233, 122, 228, 151, 1, 37, 164, 250, 144, 67, 27, 253, 133, 236, 113, 164, 111, 121, 231, 101, 66, 132, 64, 229, 146, 72, 191, 110, 9, 48, 32, 254, 130, 84, 220, 232, 98, 129, 126, 97, 61, 73, 181, 115, 103, 78, 52, 195, 130, 94, 97, 78, 64, 70, 80, 204, 43, 116, 114, 128, 37, 86, 101, 214, 190, 138, 17, 197, 158, 7, 41, 76, 247, 44, 144, 175, 171, 156, 14, 49, 255, 248, 122, 160, 30, 250, 174, 66, 107, 28, 122, 6, 229, 193, 51, 242, 186, 186, 141, 56, 47, 151, 196, 191, 236, 44, 253, 18, 164, 250, 95, 136, 142, 200, 208, 153, 176, 116, 27, 134, 216, 10, 128, 54, 234, 200, 166, 137, 89, 247, 192, 74, 40, 41, 124, 242, 5, 43, 38, 137, 70, 33, 109, 245, 172, 229, 20, 100, 204, 121, 2, 209, 116, 10, 7, 15, 24, 49, 154, 13, 106, 58, 235, 162, 244, 150, 228, 125, 131, 34, 25, 231, 18, 86, 100, 2, 22, 51, 108, 127, 127, 49, 207, 31, 195, 86, 14, 57, 27, 98, 250, 154, 45, 118, 192, 52, 132, 166, 53, 224, 6, 137, 185, 206, 44, 180, 251, 140, 14, 94, 8, 214, 143, 60, 169, 9, 34, 31, 137, 226, 17, 38, 124, 1, 63, 40, 224, 69, 3, 189, 84, 139, 12, 242, 19, 244, 40, 8, 67, 129, 249, 236, 76, 45, 150, 227, 187, 142, 140, 244, 169, 127, 130, 157, 77, 214, 53, 100, 222, 213, 3, 152, 205, 46, 251, 29, 231, 204, 253, 192, 106, 30, 114, 143, 184, 62, 236, 95, 203, 175, 84, 146, 79, 196, 31, 2, 95, 97, 90, 244, 176, 179, 230, 134, 189, 129, 31, 169, 3, 100, 240, 66, 166, 140, 160, 148, 50, 120, 56, 237, 200, 76, 22, 18, 70, 12, 196, 133, 216, 142, 174, 2, 25, 58, 179, 227, 50, 22, 124, 135, 25, 109, 39, 247, 68, 36, 73, 57, 40, 27, 136, 65, 161, 104, 220, 6, 178, 180, 125, 68, 247, 234, 177, 195, 139, 15, 214, 125, 107, 93, 207, 42, 168, 47, 31, 232, 97, 137, 76, 8, 7, 73, 179, 111, 25, 103, 19, 214, 169, 130, 234, 70, 158, 142, 234, 233, 11, 104, 86, 116, 178, 92, 71, 125, 222, 71, 207, 13, 59, 112, 97, 81, 150, 65, 231, 31, 90, 9, 239, 148, 254, 23, 0, 55, 88, 136, 16, 156, 226, 55, 146, 48, 35, 207, 148, 45, 175, 82, 114, 77, 13, 173, 26, 120, 16, 36, 178, 75, 89, 134, 56, 214, 197, 109, 52, 128, 128, 128, 128, 128, 128, 128, 128]
// Instructions = 2435
// Code size = 7321 bytes

      :                          @0
     0: 28 ea 01 00 00           jump @34
      :                          @1
     5: 28 f6 03 00 00           jump @76
      :                          @2
    10: 28 d4 06                 jump @160
      :                          @3 [@dyn 1]
    13: 95 11 78 ff              sp = sp + 0xffffffffffffff78
    17: 7b 10 80 00              u64 [sp + 0x80] = ra
    21: 80 89 34                 a2 = u32 [a1 + 0x34]
    24: 84 9a 10                 a3 = a2 & 0x10
    27: 52 0a 16                 jump @6 if a3 != 0
      :                          @4
    30: 84 99 20                 a2 = a2 & 0x20
    33: 52 09 40                 jump @9 if a2 != 0
      :                          @5
    36: 80 77                    a0 = u32 [a0]
    38: 82 10 80 00              ra = u64 [sp + 0x80]
    42: 95 11 88 00              sp = sp + 0x88
    46: 28 73 11                 jump @336
      :                          @6
    49: 81 7b                    a4 = i32 [a0]
    51: 33 09 81 00              a2 = 0x81
    55: 95 17 7f                 a0 = sp + 0x7f
    58: 33 02 57                 t0 = 0x57
    61: 01                       fallthrough
      :                          @7
    62: 64 9c                    a5 = a2
    64: 8b ba 04                 i32 a3 = a4 >> 0x4
    67: 84 bb 0f                 a4 = a4 & 0xf
    70: 88 b3 0a                 t1 = a4 <u 0xa
    73: 33 09 30                 a2 = 0x30
    76: da 32 09                 a2 = t0 if t1 == 0
    79: be b9 09                 i32 a2 = a2 + a4
    82: 78 79                    u8 [a0] = a2
    84: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
    87: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
    90: 64 ab                    a4 = a3
    92: 52 0a e2                 jump @7 if a3 != 0
      :                          @8
    95: 28 30                    jump @11
      :                          @9
    97: 81 7b                    a4 = i32 [a0]
    99: 33 09 81 00              a2 = 0x81
   103: 95 17 7f                 a0 = sp + 0x7f
   106: 33 02 37                 t0 = 0x37
   109: 01                       fallthrough
      :                          @10
   110: 64 9c                    a5 = a2
   112: 8b ba 04                 i32 a3 = a4 >> 0x4
   115: 84 bb 0f                 a4 = a4 & 0xf
   118: 88 b3 0a                 t1 = a4 <u 0xa
   121: 33 09 30                 a2 = 0x30
   124: da 32 09                 a2 = t0 if t1 == 0
   127: be b9 09                 i32 a2 = a2 + a4
   130: 78 79                    u8 [a0] = a2
   132: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   135: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   138: 64 ab                    a4 = a3
   140: 52 0a e2                 jump @10 if a3 != 0
      :                          @11
   143: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
   146: 56 27 80 00 27           jump @14 if a0 >u 128
      :                          @12
   151: 9a 9b 81 00              a4 = 0x81 - a2
   155: 64 1a                    a3 = sp
   157: c8 7a 0a                 a3 = a3 + a0
   160: 33 09 02                 a2 = 0x2
   163: 64 87                    a0 = a1
   165: 33 08 b2 01 01           a1 = 0x101b2
   170: 50 10 04 1e 12           ra = 4, jump @346
      :                          @13 [@dyn 2]
   175: 82 10 80 00              ra = u64 [sp + 0x80]
   179: 95 11 88 00              sp = sp + 0x88
   183: 32 00                    ret
      :                          @14
   185: 00                       trap
      :                          @15 [@dyn 3]
   186: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   190: 7b 10 80 00              u64 [sp + 0x80] = ra
   194: 80 89 34                 a2 = u32 [a1 + 0x34]
   197: 84 9a 10                 a3 = a2 & 0x10
   200: 52 0a 16                 jump @18 if a3 != 0
      :                          @16
   203: 84 99 20                 a2 = a2 & 0x20
   206: 52 09 40                 jump @21 if a2 != 0
      :                          @17
   209: 82 77                    a0 = u64 [a0]
   211: 82 10 80 00              ra = u64 [sp + 0x80]
   215: 95 11 88 00              sp = sp + 0x88
   219: 28 c6 10                 jump @336
      :                          @18
   222: 82 7b                    a4 = u64 [a0]
   224: 33 09 81 00              a2 = 0x81
   228: 95 17 7f                 a0 = sp + 0x7f
   231: 33 02 57                 t0 = 0x57
   234: 01                       fallthrough
      :                          @19
   235: 64 9c                    a5 = a2
   237: 98 ba 04                 a3 = a4 >> 0x4
   240: 84 bb 0f                 a4 = a4 & 0xf
   243: 88 b3 0a                 t1 = a4 <u 0xa
   246: 33 09 30                 a2 = 0x30
   249: da 32 09                 a2 = t0 if t1 == 0
   252: be b9 09                 i32 a2 = a2 + a4
   255: 78 79                    u8 [a0] = a2
   257: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   260: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   263: 64 ab                    a4 = a3
   265: 52 0a e2                 jump @19 if a3 != 0
      :                          @20
   268: 28 30                    jump @23
      :                          @21
   270: 82 7b                    a4 = u64 [a0]
   272: 33 09 81 00              a2 = 0x81
   276: 95 17 7f                 a0 = sp + 0x7f
   279: 33 02 37                 t0 = 0x37
   282: 01                       fallthrough
      :                          @22
   283: 64 9c                    a5 = a2
   285: 98 ba 04                 a3 = a4 >> 0x4
   288: 84 bb 0f                 a4 = a4 & 0xf
   291: 88 b3 0a                 t1 = a4 <u 0xa
   294: 33 09 30                 a2 = 0x30
   297: da 32 09                 a2 = t0 if t1 == 0
   300: be b9 09                 i32 a2 = a2 + a4
   303: 78 79                    u8 [a0] = a2
   305: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   308: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   311: 64 ab                    a4 = a3
   313: 52 0a e2                 jump @22 if a3 != 0
      :                          @23
   316: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
   319: 56 27 80 00 27           jump @26 if a0 >u 128
      :                          @24
   324: 9a 9b 81 00              a4 = 0x81 - a2
   328: 64 1a                    a3 = sp
   330: c8 7a 0a                 a3 = a3 + a0
   333: 33 09 02                 a2 = 0x2
   336: 64 87                    a0 = a1
   338: 33 08 b2 01 01           a1 = 0x101b2
   343: 50 10 08 71 11           ra = 8, jump @346
      :                          @25 [@dyn 4]
   348: 82 10 80 00              ra = u64 [sp + 0x80]
   352: 95 11 88 00              sp = sp + 0x88
   356: 32 00                    ret
      :                          @26
   358: 00                       trap
      :                          @27 [@dyn 5]
   359: 95 11 c8                 sp = sp + 0xffffffffffffffc8
   362: 7b 10 30                 u64 [sp + 0x30] = ra
   365: 7b 15 28                 u64 [sp + 0x28] = s0
   368: 7b 16 20                 u64 [sp + 0x20] = s1
   371: 64 86                    s1 = a1
   373: 82 88 28                 a1 = u64 [a1 + 0x28]
   376: 82 6a 20                 a3 = u64 [s1 + 0x20]
   379: 82 8b 18                 a4 = u64 [a1 + 0x18]
   382: 64 75                    s0 = a0
   384: 33 08 70 01 01           a1 = 0x10170
   389: 33 09 01                 a2 = 0x1
   392: 64 a7                    a0 = a3
   394: b4 b0 01 0c              ra = 12, jump [a4]
      :                          @28 [@dyn 6]
   398: 7b 16 08                 u64 [sp + 0x8] = s1
   401: 78 17 10                 u8 [sp + 0x10] = a0
   404: 46 11 11                 u8 [sp + 17] = 0
   407: 33 06 80 00              s1 = 0x80
   411: 33 07 98 00              a0 = 0x98
   415: 7b 17                    u64 [sp] = a0
   417: 01                       fallthrough
      :                          @29
   418: 7b 15 18                 u64 [sp + 0x18] = s0
   421: 95 17 08                 a0 = sp + 0x8
   424: 95 18 18                 a1 = sp + 0x18
   427: 82 19                    a2 = u64 [sp]
   429: 50 10 0e ec 17           ra = 14, jump @490
      :                          @30 [@dyn 7]
   434: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
   437: 95 55 01                 s0 = s0 + 0x1
   440: 52 06 ea                 jump @29 if s1 != 0
      :                          @31
   443: 7c 18 10                 a1 = u8 [sp + 0x10]
   446: 33 07 01                 a0 = 0x1
   449: 52 08 1b                 jump @33 if a1 != 0
      :                          @32
   452: 82 17 08                 a0 = u64 [sp + 0x8]
   455: 82 78 28                 a1 = u64 [a0 + 0x28]
   458: 82 77 20                 a0 = u64 [a0 + 0x20]
   461: 82 8a 18                 a3 = u64 [a1 + 0x18]
   464: 33 08 b1 01 01           a1 = 0x101b1
   469: 33 09 01                 a2 = 0x1
   472: b4 a0 01 10              ra = 16, jump [a3]
      :                          @33 [@dyn 8]
   476: 82 10 30                 ra = u64 [sp + 0x30]
   479: 82 15 28                 s0 = u64 [sp + 0x28]
   482: 82 16 20                 s1 = u64 [sp + 0x20]
   485: 95 11 38                 sp = sp + 0x38
   488: 32 00                    ret
      :                          @34 [export #0: 'refine']
   490: 95 11 70 ff              sp = sp + 0xffffffffffffff70
   494: 7b 10 88 00              u64 [sp + 0x88] = ra
   498: 7b 15 80 00              u64 [sp + 0x80] = s0
   502: 7b 16 78                 u64 [sp + 0x78] = s1
   505: 64 86                    s1 = a1
   507: 64 7a                    a3 = a0
   509: 33 05 01                 s0 = 0x1
   512: 7a 15 1c                 u32 [sp + 0x1c] = s0
   515: 33 07 00 00 01           a0 = 0x10000
   520: 53 16 04 40              jump @43 if s1 <u 4
      :                          @35
   524: 7d a8                    a1 = i8 [a3]
   526: 59 08 37                 jump @42 if a1 >=s 0
      :                          @36
   529: 84 89 ff 00              a2 = a1 & 0xff
   533: 33 05 02                 s0 = 0x2
   536: 53 29 c0 00 2d           jump @42 if a2 <u 192
      :                          @37
   541: 33 05 03                 s0 = 0x3
   544: 53 29 e0 00 25           jump @42 if a2 <u 224
      :                          @38
   549: 33 05 04                 s0 = 0x4
   552: 53 29 f0 00 1d           jump @42 if a2 <u 240
      :                          @39
   557: 33 05 05                 s0 = 0x5
   560: 53 29 f8 00 15           jump @42 if a2 <u 248
      :                          @40
   565: 33 05 06                 s0 = 0x6
   568: 53 29 fc 00 0d           jump @42 if a2 <u 252
      :                          @41
   573: 88 98 fe 00              a1 = a2 <u 0xfe
   577: 9a 85 08                 s0 = 0x8 - a1
   580: 01                       fallthrough
      :                          @42
   581: ae 56 19                 jump @45 if s1 >=u s0
      :                          @43
   584: 33 02                    t0 = 0
   586: 01                       fallthrough
      :                          @44
   587: 64 28                    a1 = t0
   589: 82 10 88 00              ra = u64 [sp + 0x88]
   593: 82 15 80 00              s0 = u64 [sp + 0x80]
   597: 82 16 78                 s1 = u64 [sp + 0x78]
   600: 95 11 90 00              sp = sp + 0x90
   604: 32 00                    ret
      :                          @45
   606: 64 a7                    a0 = a3
   608: 64 58                    a1 = s0
   610: 7b 1a 10                 u64 [sp + 0x10] = a3
   613: 50 10 12 73 18           ra = 18, jump @507
      :                          @46 [@dyn 9]
   618: aa 56 6e                 jump @57 if s1 == s0
      :                          @47
   621: 82 17 10                 a0 = u64 [sp + 0x10]
   624: c8 57 07                 a0 = a0 + s0
   627: 7d 78                    a1 = i8 [a0]
   629: c9 56 05                 s0 = s1 - s0
   632: 33 06 01                 s1 = 0x1
   635: 59 08 37                 jump @54 if a1 >=s 0
      :                          @48
   638: 84 89 ff 00              a2 = a1 & 0xff
   642: 33 06 02                 s1 = 0x2
   645: 53 29 c0 00 2d           jump @54 if a2 <u 192
      :                          @49
   650: 33 06 03                 s1 = 0x3
   653: 53 29 e0 00 25           jump @54 if a2 <u 224
      :                          @50
   658: 33 06 04                 s1 = 0x4
   661: 53 29 f0 00 1d           jump @54 if a2 <u 240
      :                          @51
   666: 33 06 05                 s1 = 0x5
   669: 53 29 f8 00 15           jump @54 if a2 <u 248
      :                          @52
   674: 33 06 06                 s1 = 0x6
   677: 53 29 fc 00 0d           jump @54 if a2 <u 252
      :                          @53
   682: 88 98 fe 00              a1 = a2 <u 0xfe
   686: 9a 86 08                 s1 = 0x8 - a1
   689: 01                       fallthrough
      :                          @54
   690: ac 65 48 01              jump @75 if s0 <u s1
      :                          @55
   694: 7b 17 10                 u64 [sp + 0x10] = a0
   697: 64 68                    a1 = s1
   699: 50 10 14 1d 18           ra = 20, jump @507
      :                          @56 [@dyn 10]
   704: e4 65 08                 a1 = maxu(s0, s1)
   707: c9 68 08                 a1 = a1 - s1
   710: d8 78 09                 a2 = a1 <u a0
   713: e4 78 08                 a1 = maxu(a1, a0)
   716: c9 78 08                 a1 = a1 - a0
   719: 88 88 20                 a1 = a1 <u 0x20
   722: d4 98 08                 a1 = a1 | a2
   725: 51 08 0d                 jump @58 if a1 == 0
      :                          @57
   728: 33 02                    t0 = 0
   730: 33 07 00 00 01           a0 = 0x10000
   735: 28 6c ff                 jump @44
      :                          @58
   738: 54 17 03 a2 00           jump @67 if a0 <=u 3
      :                          @59
   743: 82 17 10                 a0 = u64 [sp + 0x10]
   746: c8 76 06                 s1 = s1 + a0
   749: 7c 67 01                 a0 = u8 [s1 + 0x1]
   752: 7c 68                    a1 = u8 [s1]
   754: 7c 69 02                 a2 = u8 [s1 + 0x2]
   757: 7d 6a 03                 a3 = i8 [s1 + 0x3]
   760: 97 77 08                 a0 = a0 << 0x8
   763: d4 87 07                 a0 = a0 | a1
   766: 97 99 10                 a2 = a2 << 0x10
   769: 97 aa 18                 a3 = a3 << 0x18
   772: d4 a9 09                 a2 = a2 | a3
   775: d4 97 07                 a0 = a0 | a2
   778: 3d 07 3c 10 03           u32 [0x3103c] = a0
   783: 7a 17 1c                 u32 [sp + 0x1c] = a0
   786: 95 17 1c                 a0 = sp + 0x1c
   789: 7b 17 68                 u64 [sp + 0x68] = a0
   792: 33 07 02                 a0 = 0x2
   795: 7b 17 70                 u64 [sp + 0x70] = a0
   798: 33 07 18 00 01           a0 = 0x10018
   803: 7b 17 38                 u64 [sp + 0x38] = a0
   806: 49 11 40 01              u64 [sp + 64] = 0x1
   810: 49 11 58                 u64 [sp + 88] = 0
   813: 95 18 68                 a1 = sp + 0x68
   816: 7b 18 48                 u64 [sp + 0x48] = a1
   819: 49 11 50 01              u64 [sp + 80] = 0x1
   823: 95 17 20                 a0 = sp + 0x20
   826: 95 18 38                 a1 = sp + 0x38
   829: 50 10 16 3a 0b           ra = 22, jump @266
      :                          @60 [@dyn 11]
   834: 82 15 28                 s0 = u64 [sp + 0x28]
   837: 82 1b 30                 a4 = u64 [sp + 0x30]
   840: 82 16 20                 s1 = u64 [sp + 0x20]
   843: 33 07 02                 a0 = 0x2
   846: 33 08                    a1 = 0
   848: 33 09                    a2 = 0
   850: 64 5a                    a3 = s0
   852: 33 00 18                 ra = 0x18
   855: 0a 64                    ecalli 100 // 'log'
   857: 01                       fallthrough
      :                          @61 [@dyn 12]
   858: 95 68 ff ff fe           a1 = s1 + 0xfffffffffffeffff
   863: 53 38 00 00 ff 25        jump @67 if a1 <u 4294901760
      :                          @62
   869: 33 07 50 20 03           a0 = 0x32050
   874: 95 77 00 00 01           a0 = a0 + 0x10000
   879: 01                       fallthrough
      :                          @63
   880: 82 78                    a1 = u64 [a0]
   882: c9 87 09                 a2 = a0 - a1
   885: ab 59 0f                 jump @67 if a2 != s0
      :                          @64
   888: c9 68 09                 a2 = a1 - s1
   891: 01                       fallthrough
      :                          @65
   892: 82 7a                    a3 = u64 [a0]
   894: ab 8a f2                 jump @63 if a3 != a1
      :                          @66
   897: 7b 79                    u64 [a0] = a2
   899: 01                       fallthrough
      :                          @67
   900: 33 06 00 00 03           s1 = 0x30000
   905: 33 05 08 10              s0 = 0x1008
   909: 33 07 00 00 03           a0 = 0x30000
   914: 33 08 08 10              a1 = 0x1008
   918: 33 00 1a                 ra = 0x1a
   921: 0a 13                    ecalli 19 // 'export'
   923: 01                       fallthrough
      :                          @68 [@dyn 13]
   924: 64 52                    t0 = s0
   926: 64 67                    a0 = s1
   928: 81 19 1c                 a2 = i32 [sp + 0x1c]
   931: 7b 19 10                 u64 [sp + 0x10] = a2
   934: 53 19 02 a5 fe           jump @44 if a2 <u 2
      :                          @69
   939: 33 06 01                 s1 = 0x1
   942: 33 05 3c 10 03           s0 = 0x3103c
   947: 33 07 00 00 03           a0 = 0x30000
   952: 33 02 08 10              t0 = 0x1008
   956: 7b 17 08                 u64 [sp + 0x8] = a0
   959: 7b 12                    u64 [sp] = t0
   961: 01                       fallthrough
      :                          @70
   962: 95 6c 01                 a5 = s1 + 0x1
   965: 64 28                    a1 = t0
   967: 64 79                    a2 = a0
   969: 64 5a                    a3 = s0
   971: 01                       fallthrough
      :                          @71
   972: 7c 9b                    a4 = u8 [a2]
   974: c8 cb 0b                 a4 = a4 + a5
   977: 78 ab                    u8 [a3] = a4
   979: 95 aa 01                 a3 = a3 + 0x1
   982: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
   985: 95 99 01                 a2 = a2 + 0x1
   988: 52 08 f0                 jump @71 if a1 != 0
      :                          @72
   991: 64 57                    a0 = s0
   993: 64 28                    a1 = t0
   995: 33 00 1c                 ra = 0x1c
   998: 0a 13                    ecalli 19 // 'export'
  1000: 01                       fallthrough
      :                          @73 [@dyn 14]
  1001: 82 12                    t0 = u64 [sp]
  1003: 83 66 01                 i32 s1 = s1 + 0x1
  1006: 82 17 08                 a0 = u64 [sp + 0x8]
  1009: 82 18 10                 a1 = u64 [sp + 0x10]
  1012: ab 86 ce                 jump @70 if s1 != a1
      :                          @74
  1015: 28 54 fe                 jump @44
      :                          @75
  1018: 00                       trap
      :                          @76 [export #1: 'accumulate']
  1019: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  1022: 7b 10 20                 u64 [sp + 0x20] = ra
  1025: 7b 15 18                 u64 [sp + 0x18] = s0
  1028: 7b 16 10                 u64 [sp + 0x10] = s1
  1031: 33 09 00 00 01           a2 = 0x10000
  1036: 51 08 7a 01              jump @122 if a1 == 0
      :                          @77
  1040: 64 86                    s1 = a1
  1042: 7d 78                    a1 = i8 [a0]
  1044: 33 05 01                 s0 = 0x1
  1047: 59 08 37                 jump @84 if a1 >=s 0
      :                          @78
  1050: 84 8a ff 00              a3 = a1 & 0xff
  1054: 33 05 02                 s0 = 0x2
  1057: 53 2a c0 00 2d           jump @84 if a3 <u 192
      :                          @79
  1062: 33 05 03                 s0 = 0x3
  1065: 53 2a e0 00 25           jump @84 if a3 <u 224
      :                          @80
  1070: 33 05 04                 s0 = 0x4
  1073: 53 2a f0 00 1d           jump @84 if a3 <u 240
      :                          @81
  1078: 33 05 05                 s0 = 0x5
  1081: 53 2a f8 00 15           jump @84 if a3 <u 248
      :                          @82
  1086: 33 05 06                 s0 = 0x6
  1089: 53 2a fc 00 0d           jump @84 if a3 <u 252
      :                          @83
  1094: 88 a8 fe 00              a1 = a3 <u 0xfe
  1098: 9a 85 08                 s0 = 0x8 - a1
  1101: 01                       fallthrough
      :                          @84
  1102: ae 56 08                 jump @86 if s1 >=u s0
      :                          @85
  1105: 33 08                    a1 = 0
  1107: 28 33 01                 jump @122
      :                          @86
  1110: 64 58                    a1 = s0
  1112: 7b 17                    u64 [sp] = a0
  1114: 50 10 1e 7e 16           ra = 30, jump @507
      :                          @87 [@dyn 15]
  1119: aa 56 1f 01              jump @121 if s1 == s0
      :                          @88
  1123: 82 17                    a0 = u64 [sp]
  1125: c8 57 07                 a0 = a0 + s0
  1128: 7d 78                    a1 = i8 [a0]
  1130: c9 56 06                 s1 = s1 - s0
  1133: 33 05 01                 s0 = 0x1
  1136: 59 08 37                 jump @95 if a1 >=s 0
      :                          @89
  1139: 84 89 ff 00              a2 = a1 & 0xff
  1143: 33 05 02                 s0 = 0x2
  1146: 53 29 c0 00 2d           jump @95 if a2 <u 192
      :                          @90
  1151: 33 05 03                 s0 = 0x3
  1154: 53 29 e0 00 25           jump @95 if a2 <u 224
      :                          @91
  1159: 33 05 04                 s0 = 0x4
  1162: 53 29 f0 00 1d           jump @95 if a2 <u 240
      :                          @92
  1167: 33 05 05                 s0 = 0x5
  1170: 53 29 f8 00 15           jump @95 if a2 <u 248
      :                          @93
  1175: 33 05 06                 s0 = 0x6
  1178: 53 29 fc 00 0d           jump @95 if a2 <u 252
      :                          @94
  1183: 88 98 fe 00              a1 = a2 <u 0xfe
  1187: 9a 85 08                 s0 = 0x8 - a1
  1190: 01                       fallthrough
      :                          @95
  1191: ac 56 d7 00              jump @121 if s1 <u s0
      :                          @96
  1195: 64 58                    a1 = s0
  1197: 7b 17                    u64 [sp] = a0
  1199: 50 10 20 29 16           ra = 32, jump @507
      :                          @97 [@dyn 16]
  1204: 82 17                    a0 = u64 [sp]
  1206: c8 57 07                 a0 = a0 + s0
  1209: c9 56 0a                 a3 = s1 - s0
  1212: ab 56 07                 jump @99 if s1 != s0
      :                          @98
  1215: 33 05                    s0 = 0
  1217: 28 41                    jump @107
      :                          @99
  1219: 7d 78                    a1 = i8 [a0]
  1221: 33 05 01                 s0 = 0x1
  1224: 59 08 37                 jump @106 if a1 >=s 0
      :                          @100
  1227: 84 89 ff 00              a2 = a1 & 0xff
  1231: 33 05 02                 s0 = 0x2
  1234: 53 29 c0 00 2d           jump @106 if a2 <u 192
      :                          @101
  1239: 33 05 03                 s0 = 0x3
  1242: 53 29 e0 00 25           jump @106 if a2 <u 224
      :                          @102
  1247: 33 05 04                 s0 = 0x4
  1250: 53 29 f0 00 1d           jump @106 if a2 <u 240
      :                          @103
  1255: 33 05 05                 s0 = 0x5
  1258: 53 29 f8 00 15           jump @106 if a2 <u 248
      :                          @104
  1263: 33 05 06                 s0 = 0x6
  1266: 53 29 fc 00 0d           jump @106 if a2 <u 252
      :                          @105
  1271: 88 98 fe 00              a1 = a2 <u 0xfe
  1275: 9a 85 08                 s0 = 0x8 - a1
  1278: 01                       fallthrough
      :                          @106
  1279: ac 5a 7f                 jump @121 if a3 <u s0
      :                          @107
  1282: 64 a6                    s1 = a3
  1284: 7b 17                    u64 [sp] = a0
  1286: 64 58                    a1 = s0
  1288: 50 10 22 d0 15           ra = 34, jump @507
      :                          @108 [@dyn 17]
  1293: 51 07 71                 jump @121 if a0 == 0
      :                          @109
  1296: e4 56 07                 a0 = maxu(s1, s0)
  1299: c9 57 07                 a0 = a0 - s0
  1302: 33 09 00 00 01           a2 = 0x10000
  1307: 53 17 60 36 ff           jump @85 if a0 <u 96
      :                          @110
  1312: 82 18                    a1 = u64 [sp]
  1314: c8 85 05                 s0 = s0 + a1
  1317: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
  1320: 95 57 60                 a0 = s0 + 0x60
  1323: 7b 17                    u64 [sp] = a0
  1325: 51 06 69                 jump @123 if s1 == 0
      :                          @111
  1328: 7d 78                    a1 = i8 [a0]
  1330: 33 05 01                 s0 = 0x1
  1333: 59 08 37                 jump @118 if a1 >=s 0
      :                          @112
  1336: 84 89 ff 00              a2 = a1 & 0xff
  1340: 33 05 02                 s0 = 0x2
  1343: 53 29 c0 00 2d           jump @118 if a2 <u 192
      :                          @113
  1348: 33 05 03                 s0 = 0x3
  1351: 53 29 e0 00 25           jump @118 if a2 <u 224
      :                          @114
  1356: 33 05 04                 s0 = 0x4
  1359: 53 29 f0 00 1d           jump @118 if a2 <u 240
      :                          @115
  1364: 33 05 05                 s0 = 0x5
  1367: 53 29 f8 00 15           jump @118 if a2 <u 248
      :                          @116
  1372: 33 05 06                 s0 = 0x6
  1375: 53 29 fc 00 0d           jump @118 if a2 <u 252
      :                          @117
  1380: 88 98 fe 00              a1 = a2 <u 0xfe
  1384: 9a 85 08                 s0 = 0x8 - a1
  1387: 01                       fallthrough
      :                          @118
  1388: ac 56 6f 01              jump @157 if s1 <u s0
      :                          @119
  1392: 64 58                    a1 = s0
  1394: 50 10 24 66 15           ra = 36, jump @507
      :                          @120 [@dyn 18]
  1399: 33 09 00 00 01           a2 = 0x10000
  1404: 28 1f                    jump @124
      :                          @121
  1406: 33 08                    a1 = 0
  1408: 33 09 00 00 01           a2 = 0x10000
  1413: 01                       fallthrough
      :                          @122
  1414: 64 97                    a0 = a2
  1416: 82 10 20                 ra = u64 [sp + 0x20]
  1419: 82 15 18                 s0 = u64 [sp + 0x18]
  1422: 82 16 10                 s1 = u64 [sp + 0x10]
  1425: 95 11 28                 sp = sp + 0x28
  1428: 32 00                    ret
      :                          @123
  1430: 33 05                    s0 = 0
  1432: 33 07                    a0 = 0
  1434: 01                       fallthrough
      :                          @124
  1435: e4 56 08                 a1 = maxu(s1, s0)
  1438: c9 58 08                 a1 = a1 - s0
  1441: e4 78 06                 s1 = maxu(a1, a0)
  1444: c9 76 06                 s1 = s1 - a0
  1447: 53 16 20 aa fe           jump @85 if s1 <u 32
      :                          @125
  1452: 82 18                    a1 = u64 [sp]
  1454: c8 85 05                 s0 = s0 + a1
  1457: c8 57 07                 a0 = a0 + s0
  1460: 95 66 e0                 s1 = s1 + 0xffffffffffffffe0
  1463: 95 77 20                 a0 = a0 + 0x20
  1466: 7b 17                    u64 [sp] = a0
  1468: 51 06 51                 jump @136 if s1 == 0
      :                          @126
  1471: 7d 78                    a1 = i8 [a0]
  1473: 33 05 01                 s0 = 0x1
  1476: 59 08 37                 jump @133 if a1 >=s 0
      :                          @127
  1479: 84 89 ff 00              a2 = a1 & 0xff
  1483: 33 05 02                 s0 = 0x2
  1486: 53 29 c0 00 2d           jump @133 if a2 <u 192
      :                          @128
  1491: 33 05 03                 s0 = 0x3
  1494: 53 29 e0 00 25           jump @133 if a2 <u 224
      :                          @129
  1499: 33 05 04                 s0 = 0x4
  1502: 53 29 f0 00 1d           jump @133 if a2 <u 240
      :                          @130
  1507: 33 05 05                 s0 = 0x5
  1510: 53 29 f8 00 15           jump @133 if a2 <u 248
      :                          @131
  1515: 33 05 06                 s0 = 0x6
  1518: 53 29 fc 00 0d           jump @133 if a2 <u 252
      :                          @132
  1523: 88 98 fe 00              a1 = a2 <u 0xfe
  1527: 9a 85 08                 s0 = 0x8 - a1
  1530: 01                       fallthrough
      :                          @133
  1531: ac 56 e0 00              jump @157 if s1 <u s0
      :                          @134
  1535: 64 58                    a1 = s0
  1537: 50 10 26 d7 14           ra = 38, jump @507
      :                          @135 [@dyn 19]
  1542: 33 09 00 00 01           a2 = 0x10000
  1547: 28 05                    jump @137
      :                          @136
  1549: 33 05                    s0 = 0
  1551: 01                       fallthrough
      :                          @137
  1552: ae 65 41 fe              jump @85 if s0 >=u s1
      :                          @138
  1556: 82 17                    a0 = u64 [sp]
  1558: c8 57 07                 a0 = a0 + s0
  1561: 7c 78                    a1 = u8 [a0]
  1563: 51 08 19                 jump @140 if a1 == 0
      :                          @139
  1566: 46 11 0f                 u8 [sp + 15] = 0
  1569: 95 17 0f                 a0 = sp + 0xf
  1572: 33 08 01                 a1 = 0x1
  1575: 33 09                    a2 = 0
  1577: 33 0a                    a3 = 0
  1579: 0a 03                    ecalli 3 // 'write'
  1581: 33 08                    a1 = 0
  1583: 33 05                    s0 = 0
  1585: 28 91 00                 jump @155
      :                          @140
  1588: e4 56 08                 a1 = maxu(s1, s0)
  1591: c9 58 08                 a1 = a1 - s0
  1594: 95 76 01                 s1 = a0 + 0x1
  1597: 33 07 01                 a0 = 0x1
  1600: e4 78 07                 a0 = maxu(a1, a0)
  1603: 33 09 02                 a2 = 0x2
  1606: 95 7a ff                 a3 = a0 + 0xffffffffffffffff
  1609: ae 98 09                 jump @142 if a1 >=u a2
      :                          @141
  1612: 33 05                    s0 = 0
  1614: 33 07                    a0 = 0
  1616: 28 4f                    jump @152
      :                          @142
  1618: 7d 67                    a0 = i8 [s1]
  1620: 33 05 01                 s0 = 0x1
  1623: 59 07 37                 jump @149 if a0 >=s 0
      :                          @143
  1626: 84 77 ff 00              a0 = a0 & 0xff
  1630: 33 05 02                 s0 = 0x2
  1633: 53 27 c0 00 2d           jump @149 if a0 <u 192
      :                          @144
  1638: 33 05 03                 s0 = 0x3
  1641: 53 27 e0 00 25           jump @149 if a0 <u 224
      :                          @145
  1646: 33 05 04                 s0 = 0x4
  1649: 53 27 f0 00 1d           jump @149 if a0 <u 240
      :                          @146
  1654: 33 05 05                 s0 = 0x5
  1657: 53 27 f8 00 15           jump @149 if a0 <u 248
      :                          @147
  1662: 33 05 06                 s0 = 0x6
  1665: 53 27 fc 00 0d           jump @149 if a0 <u 252
      :                          @148
  1670: 88 77 fe 00              a0 = a0 <u 0xfe
  1674: 9a 75 08                 s0 = 0x8 - a0
  1677: 01                       fallthrough
      :                          @149
  1678: 7b 1a                    u64 [sp] = a3
  1680: ac 5a 4d                 jump @159 if a3 <u s0
      :                          @150
  1683: 64 67                    a0 = s1
  1685: 64 58                    a1 = s0
  1687: 50 10 28 41 14           ra = 40, jump @507
      :                          @151 [@dyn 20]
  1692: 82 1a                    a3 = u64 [sp]
  1694: 01                       fallthrough
      :                          @152
  1695: c8 56 09                 a2 = s1 + s0
  1698: e4 5a 08                 a1 = maxu(a3, s0)
  1701: c9 58 08                 a1 = a1 - s0
  1704: e6 78 05                 s0 = minu(a1, a0)
  1707: 46 11 0f                 u8 [sp + 15] = 0
  1710: 95 17 0f                 a0 = sp + 0xf
  1713: 33 08 01                 a1 = 0x1
  1716: 64 96                    s1 = a2
  1718: 64 5a                    a3 = s0
  1720: 0a 03                    ecalli 3 // 'write'
  1722: 01                       fallthrough
      :                          @153
  1723: 55 15 21 21              jump @158 if s0 >=u 33
      :                          @154
  1727: 64 68                    a1 = s1
  1729: 01                       fallthrough
      :                          @155
  1730: 33 06 19 10 03           s1 = 0x31019
  1735: 33 07 19 10 03           a0 = 0x31019
  1740: 64 59                    a2 = s0
  1742: 50 10 2a 1d 0a           ra = 42, jump @316
      :                          @156 [@dyn 21]
  1747: 64 69                    a2 = s1
  1749: 33 08 20                 a1 = 0x20
  1752: 28 ae fe                 jump @122
      :                          @157
  1755: 00                       trap
      :                          @158
  1756: 00                       trap
      :                          @159
  1757: 00                       trap
      :                          @160 [export #2: 'on_transfer']
  1758: 95 11 70 fd              sp = sp + 0xfffffffffffffd70
  1762: 7b 10 88 02              u64 [sp + 0x288] = ra
  1766: 7b 15 80 02              u64 [sp + 0x280] = s0
  1770: 7b 16 78 02              u64 [sp + 0x278] = s1
  1774: 64 8c                    a5 = a1
  1776: 64 79                    a2 = a0
  1778: 33 02                    t0 = 0
  1780: 95 7b 04                 a4 = a0 + 0x4
  1783: 33 07 02                 a0 = 0x2
  1786: 7b 17 28                 u64 [sp + 0x28] = a0
  1789: 33 07 06                 a0 = 0x6
  1792: 7b 17 58                 u64 [sp + 0x58] = a0
  1795: 33 07 0a                 a0 = 0xa
  1798: 7b 17 20                 u64 [sp + 0x20] = a0
  1801: 33 07 80 00 01           a0 = 0x10080
  1806: 7b 17 18                 u64 [sp + 0x18] = a0
  1809: 33 07 90 00              a0 = 0x90
  1813: 7b 17 10                 u64 [sp + 0x10] = a0
  1816: 33 07 98 02 01           a0 = 0x10298
  1821: 7b 17 08                 u64 [sp + 0x8] = a0
  1824: 33 07 50 20 03           a0 = 0x32050
  1829: 95 77 00 00 01           a0 = a0 + 0x10000
  1834: 7b 17 50                 u64 [sp + 0x50] = a0
  1837: 33 07 20 01 01           a0 = 0x10120
  1842: 7b 17                    u64 [sp] = a0
  1844: 95 97 08                 a0 = a2 + 0x8
  1847: 95 ca f8                 a3 = a5 + 0xfffffffffffffff8
  1850: 95 98 0c                 a1 = a2 + 0xc
  1853: 7b 18 60                 u64 [sp + 0x60] = a1
  1856: 33 08 08                 a1 = 0x8
  1859: 33 06 ff ff fe           s1 = 0xfffffffffffeffff
  1864: 7b 16 48                 u64 [sp + 0x48] = s1
  1867: 7b 17 c0 00              u64 [sp + 0xc0] = a0
  1871: 7b 17 b8 00              u64 [sp + 0xb8] = a0
  1875: 7b 1c 40                 u64 [sp + 0x40] = a5
  1878: 7b 19 38                 u64 [sp + 0x38] = a2
  1881: 7b 1b 30                 u64 [sp + 0x30] = a4
  1884: 7b 1a a8 00              u64 [sp + 0xa8] = a3
  1888: ac 8c c0 04              jump @208 if a5 <u a1
      :                          @161
  1892: 51 09 d5 04              jump @209 if a2 == 0
      :                          @162
  1896: 51 0b d1 04              jump @209 if a4 == 0
      :                          @163
  1900: 7c 97                    a0 = u8 [a2]
  1902: 7b 17 78                 u64 [sp + 0x78] = a0
  1905: 7c 97 01                 a0 = u8 [a2 + 0x1]
  1908: 7b 17 68                 u64 [sp + 0x68] = a0
  1911: 7c 97 02                 a0 = u8 [a2 + 0x2]
  1914: 7b 17 70                 u64 [sp + 0x70] = a0
  1917: 7c 97 03                 a0 = u8 [a2 + 0x3]
  1920: 7b 17 80 00              u64 [sp + 0x80] = a0
  1924: 7c b7                    a0 = u8 [a4]
  1926: 7b 17 98 00              u64 [sp + 0x98] = a0
  1930: 7c b7 01                 a0 = u8 [a4 + 0x1]
  1933: 7b 17 88 00              u64 [sp + 0x88] = a0
  1937: 7c b7 02                 a0 = u8 [a4 + 0x2]
  1940: 7b 17 90 00              u64 [sp + 0x90] = a0
  1944: 7c b7 03                 a0 = u8 [a4 + 0x3]
  1947: 7b 17 a0 00              u64 [sp + 0xa0] = a0
  1951: 51 0a 53                 jump @173 if a3 == 0
      :                          @164
  1954: 82 17 c0 00              a0 = u64 [sp + 0xc0]
  1958: 7d 77                    a0 = i8 [a0]
  1960: 33 05 01                 s0 = 0x1
  1963: 59 07 4a                 jump @174 if a0 >=s 0
      :                          @165
  1966: 84 77 ff 00              a0 = a0 & 0xff
  1970: 33 05 02                 s0 = 0x2
  1973: 33 06 c0 00              s1 = 0xc0
  1977: ac 67 33                 jump @171 if a0 <u s1
      :                          @166
  1980: 33 05 03                 s0 = 0x3
  1983: 33 06 e0 00              s1 = 0xe0
  1987: ac 67 29                 jump @171 if a0 <u s1
      :                          @167
  1990: 33 05 04                 s0 = 0x4
  1993: 33 06 f0 00              s1 = 0xf0
  1997: ac 67 1f                 jump @171 if a0 <u s1
      :                          @168
  2000: 33 05 05                 s0 = 0x5
  2003: 33 06 f8 00              s1 = 0xf8
  2007: ac 67 15                 jump @171 if a0 <u s1
      :                          @169
  2010: 33 05 06                 s0 = 0x6
  2013: 33 06 fc 00              s1 = 0xfc
  2017: ac 67 0b                 jump @171 if a0 <u s1
      :                          @170
  2020: 88 77 fe 00              a0 = a0 <u 0xfe
  2024: 9a 75 08                 s0 = 0x8 - a0
  2027: 01                       fallthrough
      :                          @171
  2028: ae 5a 09                 jump @174 if a3 >=u s0
      :                          @172
  2031: 28 31 04                 jump @208
      :                          @173
  2034: 33 05                    s0 = 0
  2036: 01                       fallthrough
      :                          @174
  2037: 82 17 c0 00              a0 = u64 [sp + 0xc0]
  2041: 64 58                    a1 = s0
  2043: 7b 12 b0 00              u64 [sp + 0xb0] = t0
  2047: 50 10 2c d9 12           ra = 44, jump @507
      :                          @175 [@dyn 22]
  2052: 33 03 98 00              t1 = 0x98
  2056: 33 02 04                 t0 = 0x4
  2059: 33 06 08                 s1 = 0x8
  2062: 82 1c a8 00              a5 = u64 [sp + 0xa8]
  2066: 82 1b b0 00              a4 = u64 [sp + 0xb0]
  2070: ae 7b 0a 04              jump @208 if a4 >=u a0
      :                          @176
  2074: 82 18 68                 a1 = u64 [sp + 0x68]
  2077: 97 88 08                 a1 = a1 << 0x8
  2080: 82 19 78                 a2 = u64 [sp + 0x78]
  2083: d4 98 08                 a1 = a1 | a2
  2086: 82 19 70                 a2 = u64 [sp + 0x70]
  2089: 97 99 10                 a2 = a2 << 0x10
  2092: 82 1a 80 00              a3 = u64 [sp + 0x80]
  2096: 97 aa 18                 a3 = a3 << 0x18
  2099: d4 a9 09                 a2 = a2 | a3
  2102: d4 89 04                 t2 = a2 | a1
  2105: 82 18 88 00              a1 = u64 [sp + 0x88]
  2109: 97 88 08                 a1 = a1 << 0x8
  2112: 82 19 98 00              a2 = u64 [sp + 0x98]
  2116: d4 98 08                 a1 = a1 | a2
  2119: 82 19 90 00              a2 = u64 [sp + 0x90]
  2123: 97 99 10                 a2 = a2 << 0x10
  2126: 82 1a a0 00              a3 = u64 [sp + 0xa0]
  2130: 97 aa 18                 a3 = a3 << 0x18
  2133: d4 a9 09                 a2 = a2 | a3
  2136: d4 89 00                 ra = a2 | a1
  2139: e4 5c 08                 a1 = maxu(a5, s0)
  2142: c9 58 08                 a1 = a1 - s0
  2145: 82 19 b8 00              a2 = u64 [sp + 0xb8]
  2149: c8 59 09                 a2 = a2 + s0
  2152: 82 1a 60                 a3 = u64 [sp + 0x60]
  2155: c8 a5 05                 s0 = s0 + a3
  2158: 64 ba                    a3 = a4
  2160: 01                       fallthrough
      :                          @177
  2161: ac 68 af 03              jump @208 if a1 <u s1
      :                          @178
  2165: aa 25 c4 03              jump @209 if s0 == t0
      :                          @179
  2169: 51 05 c0 03              jump @209 if s0 == 0
      :                          @180
  2173: ac 38 a3 03              jump @208 if a1 <u t1
      :                          @181
  2177: 51 0a 17                 jump @184 if a3 == 0
      :                          @182
  2180: 95 88 68 ff              a1 = a1 + 0xffffffffffffff68
  2184: 95 55 98 00              s0 = s0 + 0x98
  2188: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  2191: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  2194: 52 07 df                 jump @177 if a0 != 0
      :                          @183
  2197: 28 8b 03                 jump @208
      :                          @184
  2200: 7c 97 01                 a0 = u8 [a2 + 0x1]
  2203: 7c 98                    a1 = u8 [a2]
  2205: 7c 9a 02                 a3 = u8 [a2 + 0x2]
  2208: 7d 9b 03                 a4 = i8 [a2 + 0x3]
  2211: 8a 77 08                 i32 a0 = a0 << 0x8
  2214: d4 87 07                 a0 = a0 | a1
  2217: 8a a8 10                 i32 a1 = a3 << 0x10
  2220: 8a ba 18                 i32 a3 = a4 << 0x18
  2223: d4 a8 08                 a1 = a1 | a3
  2226: d4 87 07                 a0 = a0 | a1
  2229: 7b 17 a0 00              u64 [sp + 0xa0] = a0
  2233: 7c 57 01                 a0 = u8 [s0 + 0x1]
  2236: 7c 58                    a1 = u8 [s0]
  2238: 7c 5a 02                 a3 = u8 [s0 + 0x2]
  2241: 7d 5b 03                 a4 = i8 [s0 + 0x3]
  2244: 8a 77 08                 i32 a0 = a0 << 0x8
  2247: d4 87 07                 a0 = a0 | a1
  2250: 8a a8 10                 i32 a1 = a3 << 0x10
  2253: 8a ba 18                 i32 a3 = a4 << 0x18
  2256: d4 a8 08                 a1 = a1 | a3
  2259: 7c 9a 0f                 a3 = u8 [a2 + 0xf]
  2262: 7c 9b 0e                 a4 = u8 [a2 + 0xe]
  2265: d4 87 07                 a0 = a0 | a1
  2268: 7b 17 98 00              u64 [sp + 0x98] = a0
  2272: 7c 97 0d                 a0 = u8 [a2 + 0xd]
  2275: 97 aa 10                 a3 = a3 << 0x10
  2278: 97 bb 08                 a4 = a4 << 0x8
  2281: d4 ba 0a                 a3 = a3 | a4
  2284: 7c 98 0c                 a1 = u8 [a2 + 0xc]
  2287: 7c 9b 0b                 a4 = u8 [a2 + 0xb]
  2290: d4 a7 07                 a0 = a0 | a3
  2293: 97 77 10                 a0 = a0 << 0x10
  2296: 97 88 08                 a1 = a1 << 0x8
  2299: d4 b8 08                 a1 = a1 | a4
  2302: 7c 9a 0a                 a3 = u8 [a2 + 0xa]
  2305: 7c 9b 09                 a4 = u8 [a2 + 0x9]
  2308: d4 87 07                 a0 = a0 | a1
  2311: 97 77 10                 a0 = a0 << 0x10
  2314: 97 aa 08                 a3 = a3 << 0x8
  2317: d4 ba 0a                 a3 = a3 | a4
  2320: d4 a7 07                 a0 = a0 | a3
  2323: 7c 98 08                 a1 = u8 [a2 + 0x8]
  2326: 97 77 08                 a0 = a0 << 0x8
  2329: 7c 9a 97 00              a3 = u8 [a2 + 0x97]
  2333: 7c 9b 96 00              a4 = u8 [a2 + 0x96]
  2337: d4 87 07                 a0 = a0 | a1
  2340: 7b 17 90 00              u64 [sp + 0x90] = a0
  2344: 7c 97 95 00              a0 = u8 [a2 + 0x95]
  2348: 97 aa 10                 a3 = a3 << 0x10
  2351: 97 bb 08                 a4 = a4 << 0x8
  2354: d4 ba 0a                 a3 = a3 | a4
  2357: d4 a7 07                 a0 = a0 | a3
  2360: 7c 9a 94 00              a3 = u8 [a2 + 0x94]
  2364: 7c 9b 93 00              a4 = u8 [a2 + 0x93]
  2368: 95 98 10                 a1 = a2 + 0x10
  2371: 97 77 10                 a0 = a0 << 0x10
  2374: 97 aa 08                 a3 = a3 << 0x8
  2377: d4 ba 0a                 a3 = a3 | a4
  2380: 7c 9b 92 00              a4 = u8 [a2 + 0x92]
  2384: d4 a7 07                 a0 = a0 | a3
  2387: 7c 9a 91 00              a3 = u8 [a2 + 0x91]
  2391: 97 77 10                 a0 = a0 << 0x10
  2394: 97 bb 08                 a4 = a4 << 0x8
  2397: 7c 99 90 00              a2 = u8 [a2 + 0x90]
  2401: d4 ba 0a                 a3 = a3 | a4
  2404: d4 a7 07                 a0 = a0 | a3
  2407: 97 77 08                 a0 = a0 << 0x8
  2410: d4 97 07                 a0 = a0 | a2
  2413: 7b 17 88 00              u64 [sp + 0x88] = a0
  2417: 95 17 68 01              a0 = sp + 0x168
  2421: 33 09 80 00              a2 = 0x80
  2425: 64 45                    s0 = t2
  2427: 64 06                    s1 = ra
  2429: 50 10 2e 6e 07           ra = 46, jump @316
      :                          @185 [@dyn 23]
  2434: 95 17 e0 00              a0 = sp + 0xe0
  2438: 95 18 68 01              a1 = sp + 0x168
  2442: 33 09 80 00              a2 = 0x80
  2446: 50 10 30 5d 07           ra = 48, jump @316
      :                          @186 [@dyn 24]
  2451: 7a 15 c8 00              u32 [sp + 0xc8] = s0
  2455: 7a 16 cc 00              u32 [sp + 0xcc] = s1
  2459: 82 17 a0 00              a0 = u64 [sp + 0xa0]
  2463: 7a 17 d0 00              u32 [sp + 0xd0] = a0
  2467: 82 17 98 00              a0 = u64 [sp + 0x98]
  2471: 7a 17 d4 00              u32 [sp + 0xd4] = a0
  2475: 82 17 90 00              a0 = u64 [sp + 0x90]
  2479: 7b 17 d8 00              u64 [sp + 0xd8] = a0
  2483: 82 17 88 00              a0 = u64 [sp + 0x88]
  2487: 7b 17 60 01              u64 [sp + 0x160] = a0
  2491: 95 17 c8 00              a0 = sp + 0xc8
  2495: 7b 17 68 01              u64 [sp + 0x168] = a0
  2499: 82 17 28                 a0 = u64 [sp + 0x28]
  2502: 7b 17 70 01              u64 [sp + 0x170] = a0
  2506: 95 18 cc 00              a1 = sp + 0xcc
  2510: 7b 18 78 01              u64 [sp + 0x178] = a1
  2514: 7b 17 80 01              u64 [sp + 0x180] = a0
  2518: 95 18 d0 00              a1 = sp + 0xd0
  2522: 7b 18 88 01              u64 [sp + 0x188] = a1
  2526: 7b 17 90 01              u64 [sp + 0x190] = a0
  2530: 95 18 d4 00              a1 = sp + 0xd4
  2534: 7b 18 98 01              u64 [sp + 0x198] = a1
  2538: 7b 17 a0 01              u64 [sp + 0x1a0] = a0
  2542: 95 17 d8 00              a0 = sp + 0xd8
  2546: 7b 17 a8 01              u64 [sp + 0x1a8] = a0
  2550: 82 17 58                 a0 = u64 [sp + 0x58]
  2553: 7b 17 b0 01              u64 [sp + 0x1b0] = a0
  2557: 95 18 e0 00              a1 = sp + 0xe0
  2561: 7b 18 b8 01              u64 [sp + 0x1b8] = a1
  2565: 82 18 20                 a1 = u64 [sp + 0x20]
  2568: 7b 18 c0 01              u64 [sp + 0x1c0] = a1
  2572: 95 18 60 01              a1 = sp + 0x160
  2576: 7b 18 c8 01              u64 [sp + 0x1c8] = a1
  2580: 7b 17 d0 01              u64 [sp + 0x1d0] = a0
  2584: 82 17 18                 a0 = u64 [sp + 0x18]
  2587: 7b 17 28 02              u64 [sp + 0x228] = a0
  2591: 49 21 30 02 07           u64 [sp + 560] = 0x7
  2596: 49 21 48 02              u64 [sp + 584] = 0
  2600: 95 17 68 01              a0 = sp + 0x168
  2604: 7b 17 38 02              u64 [sp + 0x238] = a0
  2608: 49 21 40 02 07           u64 [sp + 576] = 0x7
  2613: 95 17 58 02              a0 = sp + 0x258
  2617: 95 18 28 02              a1 = sp + 0x228
  2621: 50 10 32 3a 04           ra = 50, jump @266
      :                          @187 [@dyn 25]
  2626: 82 15 60 02              s0 = u64 [sp + 0x260]
  2630: 82 1b 68 02              a4 = u64 [sp + 0x268]
  2634: 82 16 58 02              s1 = u64 [sp + 0x258]
  2638: 33 07 02                 a0 = 0x2
  2641: 33 08                    a1 = 0
  2643: 33 09                    a2 = 0
  2645: 64 5a                    a3 = s0
  2647: 33 00 34                 ra = 0x34
  2650: 0a 64                    ecalli 100 // 'log'
  2652: 01                       fallthrough
      :                          @188 [@dyn 26]
  2653: 82 17 48                 a0 = u64 [sp + 0x48]
  2656: c8 67 07                 a0 = a0 + s1
  2659: 82 1b 50                 a4 = u64 [sp + 0x50]
  2662: 53 37 00 00 ff 1a        jump @193 if a0 <u 4294901760
      :                          @189
  2668: 82 b7                    a0 = u64 [a4]
  2670: c9 7b 08                 a1 = a4 - a0
  2673: ab 58 0f                 jump @193 if a1 != s0
      :                          @190
  2676: c9 67 08                 a1 = a0 - s1
  2679: 01                       fallthrough
      :                          @191
  2680: 82 b9                    a2 = u64 [a4]
  2682: ab 79 f2                 jump @189 if a2 != a0
      :                          @192
  2685: 7b b8                    u64 [a4] = a1
  2687: 01                       fallthrough
      :                          @193
  2688: 81 17 cc 00              a0 = i32 [sp + 0xcc]
  2692: 7a 17 ec 01              u32 [sp + 0x1ec] = a0
  2696: 95 17 ec 01              a0 = sp + 0x1ec
  2700: 33 08 04                 a1 = 0x4
  2703: 95 19 e0 00              a2 = sp + 0xe0
  2707: 33 0a 80 00              a3 = 0x80
  2711: 0a 03                    ecalli 3 // 'write'
  2713: 0a                       ecalli 0 // 'gas'
  2714: 7b 17 f0 01              u64 [sp + 0x1f0] = a0
  2718: 7b 17 f8 01              u64 [sp + 0x1f8] = a0
  2722: 46 21 07 02 04           u8 [sp + 519] = 0x4
  2727: 7b 17 08 02              u64 [sp + 0x208] = a0
  2731: 95 17 07 02              a0 = sp + 0x207
  2735: 33 08 01                 a1 = 0x1
  2738: 95 19 08 02              a2 = sp + 0x208
  2742: 33 0a 08                 a3 = 0x8
  2745: 0a 03                    ecalli 3 // 'write'
  2747: 49 21 68 01 02           u64 [sp + 360] = 0x2
  2752: 49 21 78 01 02           u64 [sp + 376] = 0x2
  2757: 49 21 88 01              u64 [sp + 392] = 0
  2761: 14 07 20 00 00 00 10 00 00 00 a0 = 0x1000000020
  2771: 7b 17 90 01              u64 [sp + 0x190] = a0
  2775: 46 21 98 01 03           u8 [sp + 408] = 0x3
  2780: 49 21 a0 01 02           u64 [sp + 416] = 0x2
  2785: 49 21 b0 01 02           u64 [sp + 432] = 0x2
  2790: 49 21 c0 01 01           u64 [sp + 448] = 0x1
  2795: 7b 17 c8 01              u64 [sp + 0x1c8] = a0
  2799: 95 17 07 02              a0 = sp + 0x207
  2803: 7b 17 58 02              u64 [sp + 0x258] = a0
  2807: 82 17 10                 a0 = u64 [sp + 0x10]
  2810: 7b 17 60 02              u64 [sp + 0x260] = a0
  2814: 95 17 f8 01              a0 = sp + 0x1f8
  2818: 7b 17 68 02              u64 [sp + 0x268] = a0
  2822: 82 17 58                 a0 = u64 [sp + 0x58]
  2825: 7b 17 70 02              u64 [sp + 0x270] = a0
  2829: 46 21 d0 01 03           u8 [sp + 464] = 0x3
  2834: 82 17 08                 a0 = u64 [sp + 0x8]
  2837: 7b 17 28 02              u64 [sp + 0x228] = a0
  2841: 49 21 30 02 02           u64 [sp + 560] = 0x2
  2846: 95 17 68 01              a0 = sp + 0x168
  2850: 7b 17 48 02              u64 [sp + 0x248] = a0
  2854: 49 21 50 02 02           u64 [sp + 592] = 0x2
  2859: 95 17 58 02              a0 = sp + 0x258
  2863: 7b 17 38 02              u64 [sp + 0x238] = a0
  2867: 49 21 40 02 02           u64 [sp + 576] = 0x2
  2872: 95 17 10 02              a0 = sp + 0x210
  2876: 95 18 28 02              a1 = sp + 0x228
  2880: 50 10 36 37 03           ra = 54, jump @266
      :                          @194 [@dyn 27]
  2885: 82 15 18 02              s0 = u64 [sp + 0x218]
  2889: 82 1b 20 02              a4 = u64 [sp + 0x220]
  2893: 82 16 10 02              s1 = u64 [sp + 0x210]
  2897: 33 07 02                 a0 = 0x2
  2900: 33 08                    a1 = 0
  2902: 33 09                    a2 = 0
  2904: 64 5a                    a3 = s0
  2906: 33 00 38                 ra = 0x38
  2909: 0a 64                    ecalli 100 // 'log'
  2911: 01                       fallthrough
      :                          @195 [@dyn 28]
  2912: 82 1b 50                 a4 = u64 [sp + 0x50]
  2915: 82 17 48                 a0 = u64 [sp + 0x48]
  2918: c8 67 07                 a0 = a0 + s1
  2921: 53 37 00 00 ff 1a        jump @200 if a0 <u 4294901760
      :                          @196
  2927: 82 b7                    a0 = u64 [a4]
  2929: c9 7b 08                 a1 = a4 - a0
  2932: ab 58 0f                 jump @200 if a1 != s0
      :                          @197
  2935: c9 67 08                 a1 = a0 - s1
  2938: 01                       fallthrough
      :                          @198
  2939: 82 b9                    a2 = u64 [a4]
  2941: ab 79 f2                 jump @196 if a2 != a0
      :                          @199
  2944: 7b b8                    u64 [a4] = a1
  2946: 01                       fallthrough
      :                          @200
  2947: 95 17 f0 01              a0 = sp + 0x1f0
  2951: 7b 17 58 02              u64 [sp + 0x258] = a0
  2955: 82 17 58                 a0 = u64 [sp + 0x58]
  2958: 7b 17 60 02              u64 [sp + 0x260] = a0
  2962: 82 17                    a0 = u64 [sp]
  2964: 7b 17 68 01              u64 [sp + 0x168] = a0
  2968: 49 21 70 01 02           u64 [sp + 368] = 0x2
  2973: 49 21 88 01              u64 [sp + 392] = 0
  2977: 95 17 58 02              a0 = sp + 0x258
  2981: 7b 17 78 01              u64 [sp + 0x178] = a0
  2985: 49 21 80 01 01           u64 [sp + 384] = 0x1
  2990: 95 17 28 02              a0 = sp + 0x228
  2994: 95 18 68 01              a1 = sp + 0x168
  2998: 50 10 3a c1 02           ra = 58, jump @266
      :                          @201 [@dyn 29]
  3003: 82 15 30 02              s0 = u64 [sp + 0x230]
  3007: 82 1b 38 02              a4 = u64 [sp + 0x238]
  3011: 82 16 28 02              s1 = u64 [sp + 0x228]
  3015: 33 07 02                 a0 = 0x2
  3018: 33 08                    a1 = 0
  3020: 33 09                    a2 = 0
  3022: 64 5a                    a3 = s0
  3024: 33 00 3c                 ra = 0x3c
  3027: 0a 64                    ecalli 100 // 'log'
  3029: 01                       fallthrough
      :                          @202 [@dyn 30]
  3030: 82 1b 50                 a4 = u64 [sp + 0x50]
  3033: 82 17 48                 a0 = u64 [sp + 0x48]
  3036: c8 67 07                 a0 = a0 + s1
  3039: 53 37 00 00 ff 1a        jump @207 if a0 <u 4294901760
      :                          @203
  3045: 82 b7                    a0 = u64 [a4]
  3047: c9 7b 08                 a1 = a4 - a0
  3050: ab 58 0f                 jump @207 if a1 != s0
      :                          @204
  3053: c9 67 08                 a1 = a0 - s1
  3056: 01                       fallthrough
      :                          @205
  3057: 82 b9                    a2 = u64 [a4]
  3059: ab 79 f2                 jump @203 if a2 != a0
      :                          @206
  3062: 7b b8                    u64 [a4] = a1
  3064: 01                       fallthrough
      :                          @207
  3065: 82 12 b0 00              t0 = u64 [sp + 0xb0]
  3069: 95 22 01                 t0 = t0 + 0x1
  3072: 82 17 b8 00              a0 = u64 [sp + 0xb8]
  3076: 95 77 98 00              a0 = a0 + 0x98
  3080: 7b 17 b8 00              u64 [sp + 0xb8] = a0
  3084: 82 1c 40                 a5 = u64 [sp + 0x40]
  3087: 82 19 38                 a2 = u64 [sp + 0x38]
  3090: 82 1b 30                 a4 = u64 [sp + 0x30]
  3093: 82 1a a8 00              a3 = u64 [sp + 0xa8]
  3097: 33 08 08                 a1 = 0x8
  3100: ae 8c 48 fb              jump @161 if a5 >=u a1
      :                          @208
  3104: 33 07 00 00 01           a0 = 0x10000
  3109: 33 08                    a1 = 0
  3111: 82 10 88 02              ra = u64 [sp + 0x288]
  3115: 82 15 80 02              s0 = u64 [sp + 0x280]
  3119: 82 16 78 02              s1 = u64 [sp + 0x278]
  3123: 95 11 90 02              sp = sp + 0x290
  3127: 32 00                    ret
      :                          @209
  3129: 00                       trap
      :                          @210
  3130: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  3133: 7b 10 40                 u64 [sp + 0x40] = ra
  3136: 7b 15 38                 u64 [sp + 0x38] = s0
  3139: 7b 16 30                 u64 [sp + 0x30] = s1
  3142: c8 89 09                 a2 = a2 + a1
  3145: ac 89 52                 jump @218 if a2 <u a1
      :                          @211
  3148: 64 75                    s0 = a0
  3150: 82 77                    a0 = u64 [a0]
  3152: 97 78 01                 a1 = a0 << 0x1
  3155: 33 0a 08                 a3 = 0x8
  3158: e4 a9 09                 a2 = maxu(a2, a3)
  3161: e4 98 06                 s1 = maxu(a1, a2)
  3164: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  3167: 98 88 3f                 a1 = a1 >> 0x3f
  3170: 51 07 12                 jump @213 if a0 == 0
      :                          @212
  3173: 82 59 08                 a2 = u64 [s0 + 0x8]
  3176: 7b 19 18                 u64 [sp + 0x18] = a2
  3179: 49 11 20 01              u64 [sp + 32] = 0x1
  3183: 7b 17 28                 u64 [sp + 0x28] = a0
  3186: 28 06                    jump @214
      :                          @213
  3188: 49 11 20                 u64 [sp + 32] = 0
  3191: 01                       fallthrough
      :                          @214
  3192: 64 17                    a0 = sp
  3194: 95 1a 18                 a3 = sp + 0x18
  3197: 64 69                    a2 = s1
  3199: 50 10 3e 32              ra = 62, jump @222
      :                          @215 [@dyn 31]
  3203: 82 18                    a1 = u64 [sp]
  3205: 82 17 08                 a0 = u64 [sp + 0x8]
  3208: 51 08 14                 jump @219 if a1 == 0
      :                          @216
  3211: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  3221: aa 87 0d                 jump @220 if a0 == a1
      :                          @217
  3224: 52 07 18                 jump @221 if a0 != 0
      :                          @218
  3227: 00                       trap
      :                          @219
  3228: 7b 57 08                 u64 [s0 + 0x8] = a0
  3231: 7b 56                    u64 [s0] = s1
  3233: 01                       fallthrough
      :                          @220
  3234: 82 10 40                 ra = u64 [sp + 0x40]
  3237: 82 15 38                 s0 = u64 [sp + 0x38]
  3240: 82 16 30                 s1 = u64 [sp + 0x30]
  3243: 95 11 48                 sp = sp + 0x48
  3246: 32 00                    ret
      :                          @221
  3248: 00                       trap
      :                          @222
  3249: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  3252: 7b 10 30                 u64 [sp + 0x30] = ra
  3255: 7b 15 28                 u64 [sp + 0x28] = s0
  3258: 7b 16 20                 u64 [sp + 0x20] = s1
  3261: 64 95                    s0 = a2
  3263: 64 72                    t0 = a0
  3265: 51 08 79                 jump @232 if a1 == 0
      :                          @223
  3268: 82 a7 08                 a0 = u64 [a3 + 0x8]
  3271: 51 07 7c                 jump @233 if a0 == 0
      :                          @224
  3274: 82 a9 10                 a2 = u64 [a3 + 0x10]
  3277: 51 09 aa 00              jump @240 if a2 == 0
      :                          @225
  3281: 82 a8                    a1 = u64 [a3]
  3283: 33 06 50 20 03           s1 = 0x32050
  3288: 33 03 00 00 01           t1 = 0x10000
  3293: c8 36 06                 s1 = s1 + t1
  3296: 01                       fallthrough
      :                          @226
  3297: 82 6a                    a3 = u64 [s1]
  3299: c8 5a 07                 a0 = a3 + s0
  3302: ac a7 cf 00              jump @246 if a0 <u a3
      :                          @227
  3306: 95 7b 01                 a4 = a0 + 0x1
  3309: 88 bc 01                 a5 = a4 <u 0x1
  3312: d8 b3 0b                 a4 = t1 <u a4
  3315: d4 cb 0b                 a4 = a4 | a5
  3318: 52 0b bf 00              jump @246 if a4 != 0
      :                          @228
  3322: 82 6b                    a4 = u64 [s1]
  3324: ab ab e5                 jump @226 if a4 != a3
      :                          @229
  3327: 7b 67                    u64 [s1] = a0
  3329: 33 0c                    a5 = 0
  3331: 7b 12 18                 u64 [sp + 0x18] = t0
  3334: 33 0a 50 20 03           a3 = 0x32050
  3339: 33 0b 00 00 01           a4 = 0x10000
  3344: 7b 1a                    u64 [sp] = a3
  3346: c8 ba 0a                 a3 = a3 + a4
  3349: c9 7a 07                 a0 = a3 - a0
  3352: 7b 17 10                 u64 [sp + 0x10] = a0
  3355: 7b 18 08                 u64 [sp + 0x8] = a1
  3358: 64 96                    s1 = a2
  3360: 50 10 40 cb 03           ra = 64, jump @316
      :                          @230 [@dyn 32]
  3365: 54 36 00 00 01 98 00     jump @247 if s1 <=u 65536
      :                          @231
  3372: 82 12 18                 t0 = u64 [sp + 0x18]
  3375: 82 18 10                 a1 = u64 [sp + 0x10]
  3378: 33 07                    a0 = 0
  3380: 7b 28 08                 u64 [t0 + 0x8] = a1
  3383: 28 b5 00                 jump @253
      :                          @232
  3386: 49 12 08                 u64 [t0 + 8] = 0
  3389: 33 07 01                 a0 = 0x1
  3392: 28 ac 00                 jump @253
      :                          @233
  3395: 33 09 50 20 03           a2 = 0x32050
  3400: 33 07 00 00 01           a0 = 0x10000
  3405: c8 79 09                 a2 = a2 + a0
  3408: 01                       fallthrough
      :                          @234
  3409: 82 9a                    a3 = u64 [a2]
  3411: c8 5a 08                 a1 = a3 + s0
  3414: ac a8 5f                 jump @246 if a1 <u a3
      :                          @235
  3417: 95 8b 01                 a4 = a1 + 0x1
  3420: 88 bc 01                 a5 = a4 <u 0x1
  3423: d8 b7 0b                 a4 = a0 <u a4
  3426: d4 cb 0b                 a4 = a4 | a5
  3429: 52 0b 50                 jump @246 if a4 != 0
      :                          @236
  3432: 82 9b                    a4 = u64 [a2]
  3434: ab ab e7                 jump @234 if a4 != a3
      :                          @237
  3437: 7b 98                    u64 [a2] = a1
  3439: 33 0c                    a5 = 0
  3441: 01                       fallthrough
      :                          @238
  3442: ab ab df                 jump @234 if a4 != a3
      :                          @239
  3445: 28 31                    jump @245
      :                          @240
  3447: 33 09 50 20 03           a2 = 0x32050
  3452: 33 07 00 00 01           a0 = 0x10000
  3457: c8 79 09                 a2 = a2 + a0
  3460: 01                       fallthrough
      :                          @241
  3461: 82 9a                    a3 = u64 [a2]
  3463: c8 5a 08                 a1 = a3 + s0
  3466: ac a8 2b                 jump @246 if a1 <u a3
      :                          @242
  3469: 95 8b 01                 a4 = a1 + 0x1
  3472: 88 bc 01                 a5 = a4 <u 0x1
  3475: d8 b7 0b                 a4 = a0 <u a4
  3478: d4 cb 0b                 a4 = a4 | a5
  3481: 52 0b 1c                 jump @246 if a4 != 0
      :                          @243
  3484: 82 9b                    a4 = u64 [a2]
  3486: ab ab e7                 jump @241 if a4 != a3
      :                          @244
  3489: 7b 98                    u64 [a2] = a1
  3491: 33 0c                    a5 = 0
  3493: 01                       fallthrough
      :                          @245
  3494: 33 07 50 20 04           a0 = 0x42050
  3499: c9 87 08                 a1 = a0 - a1
  3502: 33 07                    a0 = 0
  3504: 7b 28 08                 u64 [t0 + 0x8] = a1
  3507: 28 39                    jump @253
      :                          @246
  3509: 33 07 01                 a0 = 0x1
  3512: 7b 27 08                 u64 [t0 + 0x8] = a0
  3515: 28 31                    jump @253
      :                          @247
  3517: 64 6c                    a5 = s1
  3519: 82 17                    a0 = u64 [sp]
  3521: 95 77 00 00 01           a0 = a0 + 0x10000
  3526: 82 12 18                 t0 = u64 [sp + 0x18]
  3529: 82 16 08                 s1 = u64 [sp + 0x8]
  3532: 01                       fallthrough
      :                          @248
  3533: 82 78                    a1 = u64 [a0]
  3535: c9 87 09                 a2 = a0 - a1
  3538: ab 69 11                 jump @252 if a2 != s1
      :                          @249
  3541: c9 c8 09                 a2 = a1 - a5
  3544: 01                       fallthrough
      :                          @250
  3545: 82 7a                    a3 = u64 [a0]
  3547: ab 8a f2                 jump @248 if a3 != a1
      :                          @251
  3550: 7b 79                    u64 [a0] = a2
  3552: 33 0b                    a4 = 0
  3554: 01                       fallthrough
      :                          @252
  3555: 82 18 10                 a1 = u64 [sp + 0x10]
  3558: 33 07                    a0 = 0
  3560: 7b 28 08                 u64 [t0 + 0x8] = a1
  3563: 01                       fallthrough
      :                          @253
  3564: 7b 25 10                 u64 [t0 + 0x10] = s0
  3567: 7b 27                    u64 [t0] = a0
  3569: 82 10 30                 ra = u64 [sp + 0x30]
  3572: 82 15 28                 s0 = u64 [sp + 0x28]
  3575: 82 16 20                 s1 = u64 [sp + 0x20]
  3578: 95 11 38                 sp = sp + 0x38
  3581: 32 00                    ret
      :                          @254
  3583: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  3586: 7b 10 40                 u64 [sp + 0x40] = ra
  3589: 7b 15 38                 u64 [sp + 0x38] = s0
  3592: 7b 16 30                 u64 [sp + 0x30] = s1
  3595: 95 88 01                 a1 = a1 + 0x1
  3598: 51 08 53                 jump @262 if a1 == 0
      :                          @255
  3601: 64 75                    s0 = a0
  3603: 82 77                    a0 = u64 [a0]
  3605: 97 79 01                 a2 = a0 << 0x1
  3608: 33 0a 08                 a3 = 0x8
  3611: e4 a8 08                 a1 = maxu(a1, a3)
  3614: e4 89 06                 s1 = maxu(a2, a1)
  3617: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  3620: 98 88 3f                 a1 = a1 >> 0x3f
  3623: 51 07 12                 jump @257 if a0 == 0
      :                          @256
  3626: 82 59 08                 a2 = u64 [s0 + 0x8]
  3629: 7b 19 18                 u64 [sp + 0x18] = a2
  3632: 49 11 20 01              u64 [sp + 32] = 0x1
  3636: 7b 17 28                 u64 [sp + 0x28] = a0
  3639: 28 06                    jump @258
      :                          @257
  3641: 49 11 20                 u64 [sp + 32] = 0
  3644: 01                       fallthrough
      :                          @258
  3645: 64 17                    a0 = sp
  3647: 95 1a 18                 a3 = sp + 0x18
  3650: 64 69                    a2 = s1
  3652: 50 10 42 6d fe           ra = 66, jump @222
      :                          @259 [@dyn 33]
  3657: 82 18                    a1 = u64 [sp]
  3659: 82 17 08                 a0 = u64 [sp + 0x8]
  3662: 51 08 14                 jump @263 if a1 == 0
      :                          @260
  3665: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  3675: aa 87 0d                 jump @264 if a0 == a1
      :                          @261
  3678: 52 07 18                 jump @265 if a0 != 0
      :                          @262
  3681: 00                       trap
      :                          @263
  3682: 7b 57 08                 u64 [s0 + 0x8] = a0
  3685: 7b 56                    u64 [s0] = s1
  3687: 01                       fallthrough
      :                          @264
  3688: 82 10 40                 ra = u64 [sp + 0x40]
  3691: 82 15 38                 s0 = u64 [sp + 0x38]
  3694: 82 16 30                 s1 = u64 [sp + 0x30]
  3697: 95 11 48                 sp = sp + 0x48
  3700: 32 00                    ret
      :                          @265
  3702: 00                       trap
      :                          @266
  3703: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  3706: 7b 10 30                 u64 [sp + 0x30] = ra
  3709: 7b 15 28                 u64 [sp + 0x28] = s0
  3712: 7b 16 20                 u64 [sp + 0x20] = s1
  3715: 64 89                    a2 = a1
  3717: 82 8a 08                 a3 = u64 [a1 + 0x8]
  3720: 64 75                    s0 = a0
  3722: 51 0a 35                 jump @271 if a3 == 0
      :                          @267
  3725: 82 98                    a1 = u64 [a2]
  3727: 33 07                    a0 = 0
  3729: 95 8b 08                 a4 = a1 + 0x8
  3732: 01                       fallthrough
      :                          @268
  3733: 82 bc                    a5 = u64 [a4]
  3735: c8 c7 07                 a0 = a0 + a5
  3738: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  3741: 95 bb 10                 a4 = a4 + 0x10
  3744: 52 0a f5                 jump @268 if a3 != 0
      :                          @269
  3747: 82 9a 18                 a3 = u64 [a2 + 0x18]
  3750: 51 0a 24                 jump @273 if a3 == 0
      :                          @270
  3753: 82 88 08                 a1 = u64 [a1 + 0x8]
  3756: 8e 88                    a1 = a1 >u 0
  3758: 88 7a 10                 a3 = a0 <u 0x10
  3761: 85 aa 01                 a3 = a3 ^ 0x1
  3764: d4 a8 08                 a1 = a1 | a3
  3767: 89 7a                    a3 = a0 <s 0
  3769: e0 a8 08                 a1 = a1 & ~a3
  3772: 52 08 0a                 jump @272 if a1 != 0
      :                          @271
  3775: 33 07                    a0 = 0
  3777: 33 08 01                 a1 = 0x1
  3780: 28 4a                    jump @281
      :                          @272
  3782: 97 77 01                 a0 = a0 << 0x1
  3785: 01                       fallthrough
      :                          @273
  3786: 51 07 40                 jump @280 if a0 == 0
      :                          @274
  3789: 57 07 78                 jump @286 if a0 <s 0
      :                          @275
  3792: 64 52                    t0 = s0
  3794: 33 0b 50 20 03           a4 = 0x32050
  3799: 33 08 00 00 01           a1 = 0x10000
  3804: c8 8b 0b                 a4 = a4 + a1
  3807: 01                       fallthrough
      :                          @276
  3808: 82 bc                    a5 = u64 [a4]
  3810: c8 7c 0a                 a3 = a5 + a0
  3813: ac ca 5e                 jump @284 if a3 <u a5
      :                          @277
  3816: 95 a5 01                 s0 = a3 + 0x1
  3819: 88 56 01                 s1 = s0 <u 0x1
  3822: d8 58 05                 s0 = a1 <u s0
  3825: d4 65 05                 s0 = s0 | s1
  3828: 52 05 4f                 jump @284 if s0 != 0
      :                          @278
  3831: 82 b6                    s1 = u64 [a4]
  3833: ab c6 e7                 jump @276 if s1 != a5
      :                          @279
  3836: 7b ba                    u64 [a4] = a3
  3838: 33 08 50 20 04           a1 = 0x42050
  3843: c9 a8 08                 a1 = a1 - a3
  3846: 64 25                    s0 = t0
  3848: 28 06                    jump @281
      :                          @280
  3850: 33 08 01                 a1 = 0x1
  3853: 01                       fallthrough
      :                          @281
  3854: 7b 17                    u64 [sp] = a0
  3856: 7b 18 08                 u64 [sp + 0x8] = a1
  3859: 49 11 10                 u64 [sp + 16] = 0
  3862: 33 08 40 01 01           a1 = 0x10140
  3867: 64 17                    a0 = sp
  3869: 50 10 44 1a 06           ra = 68, jump @398
      :                          @282 [@dyn 34]
  3874: 52 07 22                 jump @285 if a0 != 0
      :                          @283
  3877: 82 17 10                 a0 = u64 [sp + 0x10]
  3880: 82 18 08                 a1 = u64 [sp + 0x8]
  3883: 82 19                    a2 = u64 [sp]
  3885: 7b 57 10                 u64 [s0 + 0x10] = a0
  3888: 7b 58 08                 u64 [s0 + 0x8] = a1
  3891: 7b 59                    u64 [s0] = a2
  3893: 82 10 30                 ra = u64 [sp + 0x30]
  3896: 82 15 28                 s0 = u64 [sp + 0x28]
  3899: 82 16 20                 s1 = u64 [sp + 0x20]
  3902: 95 11 38                 sp = sp + 0x38
  3905: 32 00                    ret
      :                          @284
  3907: 00                       trap
      :                          @285
  3908: 00                       trap
      :                          @286
  3909: 00                       trap
      :                          @287 [@dyn 35]
  3910: 82 72                    t0 = u64 [a0]
  3912: 33 09 00 00 ff           a2 = 0xffffffffffff0000
  3917: 95 2a ff ff fe           a3 = t0 + 0xfffffffffffeffff
  3922: ac 9a 28                 jump @293 if a3 <u a2
      :                          @288
  3925: 82 77 08                 a0 = u64 [a0 + 0x8]
  3928: 33 09 50 20 03           a2 = 0x32050
  3933: 95 99 00 00 01           a2 = a2 + 0x10000
  3938: 01                       fallthrough
      :                          @289
  3939: 82 9a                    a3 = u64 [a2]
  3941: c9 a9 0b                 a4 = a2 - a3
  3944: ab 7b 12                 jump @293 if a4 != a0
      :                          @290
  3947: c9 2a 0b                 a4 = a3 - t0
  3950: 01                       fallthrough
      :                          @291
  3951: 82 9c                    a5 = u64 [a2]
  3953: ab ac f2                 jump @289 if a5 != a3
      :                          @292
  3956: 7b 9b                    u64 [a2] = a4
  3958: 33 08                    a1 = 0
  3960: 32 00                    ret
      :                          @293
  3962: 32 00                    ret
      :                          @294 [@dyn 36]
  3964: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  3967: 7b 10 18                 u64 [sp + 0x18] = ra
  3970: 7b 15 10                 u64 [sp + 0x10] = s0
  3973: 7b 16 08                 u64 [sp + 0x8] = s1
  3976: 64 75                    s0 = a0
  3978: 82 7a 10                 a3 = u64 [a0 + 0x10]
  3981: 82 77                    a0 = u64 [a0]
  3983: c9 a7 07                 a0 = a0 - a3
  3986: 64 96                    s1 = a2
  3988: ac 97 2a                 jump @297 if a0 <u a2
      :                          @295
  3991: 7b 1a                    u64 [sp] = a3
  3993: 82 57 08                 a0 = u64 [s0 + 0x8]
  3996: c8 a7 07                 a0 = a0 + a3
  3999: 64 69                    a2 = s1
  4001: 50 10 4a 4a 01           ra = 74, jump @316
      :                          @296 [@dyn 37]
  4006: 82 17                    a0 = u64 [sp]
  4008: c8 76 06                 s1 = s1 + a0
  4011: 7b 56 10                 u64 [s0 + 0x10] = s1
  4014: 33 07                    a0 = 0
  4016: 82 10 18                 ra = u64 [sp + 0x18]
  4019: 82 15 10                 s0 = u64 [sp + 0x10]
  4022: 82 16 08                 s1 = u64 [sp + 0x8]
  4025: 95 11 20                 sp = sp + 0x20
  4028: 32 00                    ret
      :                          @297
  4030: 64 57                    a0 = s0
  4032: 7b 18                    u64 [sp] = a1
  4034: 64 a8                    a1 = a3
  4036: 64 69                    a2 = s1
  4038: 50 10 4c 74 fc           ra = 76, jump @210
      :                          @298 [@dyn 38]
  4043: 82 18                    a1 = u64 [sp]
  4045: 82 5a 10                 a3 = u64 [s0 + 0x10]
  4048: 28 c7                    jump @295
      :                          @299 [@dyn 39]
  4050: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  4053: 7b 10 20                 u64 [sp + 0x20] = ra
  4056: 7b 15 18                 u64 [sp + 0x18] = s0
  4059: 7b 16 10                 u64 [sp + 0x10] = s1
  4062: 64 86                    s1 = a1
  4064: 83 88                    i32 a1 = a1 + 0
  4066: 33 09 80 00              a2 = 0x80
  4070: 64 7a                    a3 = a0
  4072: ae 98 2b                 jump @304 if a1 >=u a2
      :                          @300
  4075: 82 a8 10                 a1 = u64 [a3 + 0x10]
  4078: 82 a7                    a0 = u64 [a3]
  4080: ab 78 12                 jump @303 if a1 != a0
      :                          @301
  4083: 64 a7                    a0 = a3
  4085: 64 a5                    s0 = a3
  4087: 50 10 50 08 fe           ra = 80, jump @254
      :                          @302 [@dyn 40]
  4092: 64 5a                    a3 = s0
  4094: 82 58 10                 a1 = u64 [s0 + 0x10]
  4097: 01                       fallthrough
      :                          @303
  4098: 82 a7 08                 a0 = u64 [a3 + 0x8]
  4101: c8 87 07                 a0 = a0 + a1
  4104: 78 76                    u8 [a0] = s1
  4106: 95 88 01                 a1 = a1 + 0x1
  4109: 7b a8 10                 u64 [a3 + 0x10] = a1
  4112: 28 ab 00                 jump @312
      :                          @304
  4115: 8b 67 0b                 i32 a0 = s1 >> 0xb
  4118: 48 11 0c                 u32 [sp + 12] = 0
  4121: 52 07 1c                 jump @306 if a0 != 0
      :                          @305
  4124: 98 67 06                 a0 = s1 >> 0x6
  4127: 86 77 c0 00              a0 = a0 | 0xc0
  4131: 78 17 0c                 u8 [sp + 0xc] = a0
  4134: 84 67 3f                 a0 = s1 & 0x3f
  4137: 86 77 80 00              a0 = a0 | 0x80
  4141: 78 17 0d                 u8 [sp + 0xd] = a0
  4144: 33 06 02                 s1 = 0x2
  4147: 28 63                    jump @309
      :                          @306
  4149: 8b 67 10                 i32 a0 = s1 >> 0x10
  4152: 52 07 29                 jump @308 if a0 != 0
      :                          @307
  4155: 98 67 0c                 a0 = s1 >> 0xc
  4158: 86 77 e0 00              a0 = a0 | 0xe0
  4162: 78 17 0c                 u8 [sp + 0xc] = a0
  4165: 97 67 34                 a0 = s1 << 0x34
  4168: 98 77 3a                 a0 = a0 >> 0x3a
  4171: 95 77 80 00              a0 = a0 + 0x80
  4175: 78 17 0d                 u8 [sp + 0xd] = a0
  4178: 84 67 3f                 a0 = s1 & 0x3f
  4181: 86 77 80 00              a0 = a0 | 0x80
  4185: 78 17 0e                 u8 [sp + 0xe] = a0
  4188: 33 06 03                 s1 = 0x3
  4191: 28 37                    jump @309
      :                          @308
  4193: 97 67 2b                 a0 = s1 << 0x2b
  4196: 98 77 3d                 a0 = a0 >> 0x3d
  4199: 95 77 f0 00              a0 = a0 + 0xf0
  4203: 78 17 0c                 u8 [sp + 0xc] = a0
  4206: 97 67 2e                 a0 = s1 << 0x2e
  4209: 98 77 3a                 a0 = a0 >> 0x3a
  4212: 95 77 80 00              a0 = a0 + 0x80
  4216: 78 17 0d                 u8 [sp + 0xd] = a0
  4219: 97 67 34                 a0 = s1 << 0x34
  4222: 98 77 3a                 a0 = a0 >> 0x3a
  4225: 95 77 80 00              a0 = a0 + 0x80
  4229: 78 17 0e                 u8 [sp + 0xe] = a0
  4232: 84 67 3f                 a0 = s1 & 0x3f
  4235: 86 77 80 00              a0 = a0 | 0x80
  4239: 78 17 0f                 u8 [sp + 0xf] = a0
  4242: 33 06 04                 s1 = 0x4
  4245: 01                       fallthrough
      :                          @309
  4246: 82 a5 10                 s0 = u64 [a3 + 0x10]
  4249: 82 a7                    a0 = u64 [a3]
  4251: c9 57 07                 a0 = a0 - s0
  4254: ac 67 2d                 jump @313 if a0 <u s1
      :                          @310
  4257: 7b 1a                    u64 [sp] = a3
  4259: 82 a7 08                 a0 = u64 [a3 + 0x8]
  4262: c8 57 07                 a0 = a0 + s0
  4265: 95 18 0c                 a1 = sp + 0xc
  4268: 64 69                    a2 = s1
  4270: 50 10 52 3d              ra = 82, jump @316
      :                          @311 [@dyn 41]
  4274: c8 56 06                 s1 = s1 + s0
  4277: 82 17                    a0 = u64 [sp]
  4279: 7b 76 10                 u64 [a0 + 0x10] = s1
  4282: 01                       fallthrough
      :                          @312
  4283: 33 07                    a0 = 0
  4285: 82 10 20                 ra = u64 [sp + 0x20]
  4288: 82 15 18                 s0 = u64 [sp + 0x18]
  4291: 82 16 10                 s1 = u64 [sp + 0x10]
  4294: 95 11 28                 sp = sp + 0x28
  4297: 32 00                    ret
      :                          @313
  4299: 64 a7                    a0 = a3
  4301: 64 58                    a1 = s0
  4303: 64 69                    a2 = s1
  4305: 64 a5                    s0 = a3
  4307: 50 10 54 67 fb           ra = 84, jump @210
      :                          @314 [@dyn 42]
  4312: 64 5a                    a3 = s0
  4314: 82 55 10                 s0 = u64 [s0 + 0x10]
  4317: 28 c4                    jump @310
      :                          @315 [@dyn 43]
  4319: 64 8a                    a3 = a1
  4321: 33 08 40 01 01           a1 = 0x10140
  4326: 64 a9                    a2 = a3
  4328: 28 4f 04                 jump @398
      :                          @316
  4331: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  4334: 7b 10 18                 u64 [sp + 0x18] = ra
  4337: 7b 15 10                 u64 [sp + 0x10] = s0
  4340: 7b 16 08                 u64 [sp + 0x8] = s1
  4343: 53 19 10 64              jump @325 if a2 <u 16
      :                          @317
  4347: 8d 7a                    i32 a3 = -a0
  4349: 84 a2 07                 t0 = a3 & 0x7
  4352: c8 27 0b                 a4 = a0 + t0
  4355: 51 02 15                 jump @320 if t0 == 0
      :                          @318
  4358: 64 8c                    a5 = a1
  4360: 64 75                    s0 = a0
  4362: 01                       fallthrough
      :                          @319
  4363: 7c ca                    a3 = u8 [a5]
  4365: 78 5a                    u8 [s0] = a3
  4367: 95 55 01                 s0 = s0 + 0x1
  4370: 95 cc 01                 a5 = a5 + 0x1
  4373: ac b5 f6                 jump @319 if s0 <u a4
      :                          @320
  4376: c8 28 03                 t1 = a1 + t0
  4379: c9 29 02                 t0 = a2 - t0
  4382: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  4385: 84 38 07                 a1 = t1 & 0x7
  4388: c8 4b 0a                 a3 = a4 + t2
  4391: 51 08 3b                 jump @327 if a1 == 0
      :                          @321
  4394: 58 04 4b                 jump @330 if t2 <=s 0
      :                          @322
  4397: 97 38 03                 a1 = t1 << 0x3
  4400: 84 80 38                 ra = a1 & 0x38
  4403: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  4406: 82 c5                    s0 = u64 [a5]
  4408: 8d 88                    i32 a1 = -a1
  4410: 84 88 38                 a1 = a1 & 0x38
  4413: 95 cc 08                 a5 = a5 + 0x8
  4416: 01                       fallthrough
      :                          @323
  4417: 82 c6                    s1 = u64 [a5]
  4419: d0 05 05                 s0 = s0 >> ra
  4422: cf 86 09                 a2 = s1 << a1
  4425: d4 59 09                 a2 = a2 | s0
  4428: 7b b9                    u64 [a4] = a2
  4430: 95 bb 08                 a4 = a4 + 0x8
  4433: 95 cc 08                 a5 = a5 + 0x8
  4436: 64 65                    s0 = s1
  4438: ac ab eb                 jump @323 if a4 <u a3
      :                          @324
  4441: 28 1c                    jump @330
      :                          @325
  4443: 64 7a                    a3 = a0
  4445: 52 09 21                 jump @331 if a2 != 0
      :                          @326
  4448: 28 2f                    jump @333
      :                          @327
  4450: 58 04 13                 jump @330 if t2 <=s 0
      :                          @328
  4453: 64 38                    a1 = t1
  4455: 01                       fallthrough
      :                          @329
  4456: 82 89                    a2 = u64 [a1]
  4458: 7b b9                    u64 [a4] = a2
  4460: 95 bb 08                 a4 = a4 + 0x8
  4463: 95 88 08                 a1 = a1 + 0x8
  4466: ac ab f6                 jump @329 if a4 <u a3
      :                          @330
  4469: c8 43 08                 a1 = t1 + t2
  4472: 84 29 07                 a2 = t0 & 0x7
  4475: 51 09 14                 jump @333 if a2 == 0
      :                          @331
  4478: c8 a9 09                 a2 = a2 + a3
  4481: 01                       fallthrough
      :                          @332
  4482: 7c 8b                    a4 = u8 [a1]
  4484: 78 ab                    u8 [a3] = a4
  4486: 95 aa 01                 a3 = a3 + 0x1
  4489: 95 88 01                 a1 = a1 + 0x1
  4492: ac 9a f6                 jump @332 if a3 <u a2
      :                          @333
  4495: 82 10 18                 ra = u64 [sp + 0x18]
  4498: 82 15 10                 s0 = u64 [sp + 0x10]
  4501: 82 16 08                 s1 = u64 [sp + 0x8]
  4504: 95 11 20                 sp = sp + 0x20
  4507: 32 00                    ret
      :                          @334 [@dyn 44]
  4509: 82 77                    a0 = u64 [a0]
  4511: 01                       fallthrough
      :                          @335
  4512: 28                       jump @335
      :                          @336
  4513: 95 11 a8                 sp = sp + 0xffffffffffffffa8
  4516: 7b 10 50                 u64 [sp + 0x50] = ra
  4519: 7b 15 48                 u64 [sp + 0x48] = s0
  4522: 7b 16 40                 u64 [sp + 0x40] = s1
  4525: 7b 18                    u64 [sp] = a1
  4527: 98 79 04                 a2 = a0 >> 0x4
  4530: 33 08 27                 a1 = 0x27
  4533: 53 29 71 02 81 00        jump @339 if a2 <u 625
      :                          @337
  4539: 33 08 27                 a1 = 0x27
  4542: 95 1a 3e                 a3 = sp + 0x3e
  4545: 3a 09 08 10 03           a2 = u64 [0x31008]
  4550: 7b 19 10                 u64 [sp + 0x10] = a2
  4553: 49 11 08 f0 d8 00        u64 [sp + 8] = 0xd8f0
  4559: 33 04 7b 14              t2 = 0x147b
  4563: 33 0b b4 01 01           a4 = 0x101b4
  4568: 33 00 ff e0 f5 05        ra = 0x5f5e0ff
  4574: 01                       fallthrough
      :                          @338
  4575: 64 72                    t0 = a0
  4577: 82 17 10                 a0 = u64 [sp + 0x10]
  4580: d6 72 07                 a0 = t0 mulhu a0
  4583: 98 77 0b                 a0 = a0 >> 0xb
  4586: 82 19 08                 a2 = u64 [sp + 0x8]
  4589: c0 97 0c                 i32 a5 = a0 * a2
  4592: c8 2c 06                 s1 = a5 + t0
  4595: 97 6c 30                 a5 = s1 << 0x30
  4598: 98 cc 32                 a5 = a5 >> 0x32
  4601: ca 4c 0c                 a5 = a5 * t2
  4604: 98 c3 11                 t1 = a5 >> 0x11
  4607: 98 cc 10                 a5 = a5 >> 0x10
  4610: 84 cc fe 07              a5 = a5 & 0x7fe
  4614: 96 39 9c                 a2 = t1 * 0xffffffffffffff9c
  4617: c8 69 09                 a2 = a2 + s1
  4620: 97 99 31                 a2 = a2 << 0x31
  4623: 98 99 30                 a2 = a2 >> 0x30
  4626: c8 bc 0c                 a5 = a5 + a4
  4629: 7c c6                    s1 = u8 [a5]
  4631: 7c cc 01                 a5 = u8 [a5 + 0x1]
  4634: c8 b9 09                 a2 = a2 + a4
  4637: 7c 95 01                 s0 = u8 [a2 + 0x1]
  4640: 7c 99                    a2 = u8 [a2]
  4642: 78 ac ff                 u8 [a3 + 0xffffffffffffffff] = a5
  4645: 78 a6 fe                 u8 [a3 + 0xfffffffffffffffe] = s1
  4648: 78 a5 01                 u8 [a3 + 0x1] = s0
  4651: 78 a9                    u8 [a3] = a2
  4653: 95 88 fc                 a1 = a1 + 0xfffffffffffffffc
  4656: 95 aa fc                 a3 = a3 + 0xfffffffffffffffc
  4659: ac 20 ac                 jump @338 if ra <u t0
      :                          @339
  4662: 54 17 63 3b              jump @341 if a0 <=u 99
      :                          @340
  4666: 97 79 30                 a2 = a0 << 0x30
  4669: 98 99 32                 a2 = a2 >> 0x32
  4672: 96 99 7b 14              a2 = a2 * 0x147b
  4676: 98 99 11                 a2 = a2 >> 0x11
  4679: 96 9a 9c                 a3 = a2 * 0xffffffffffffff9c
  4682: c8 a7 07                 a0 = a0 + a3
  4685: 97 77 31                 a0 = a0 << 0x31
  4688: 98 77 30                 a0 = a0 >> 0x30
  4691: 95 88 fe                 a1 = a1 + 0xfffffffffffffffe
  4694: 33 0a b4 01 01           a3 = 0x101b4
  4699: c8 a7 07                 a0 = a0 + a3
  4702: 7c 7a 01                 a3 = u8 [a0 + 0x1]
  4705: 7c 77                    a0 = u8 [a0]
  4707: 95 1b 19                 a4 = sp + 0x19
  4710: c8 8b 0b                 a4 = a4 + a1
  4713: 78 ba 01                 u8 [a4 + 0x1] = a3
  4716: 78 b7                    u8 [a4] = a0
  4718: 64 97                    a0 = a2
  4720: 01                       fallthrough
      :                          @341
  4721: 55 17 0a 14              jump @343 if a0 >=u 10
      :                          @342
  4725: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
  4728: 95 19 19                 a2 = sp + 0x19
  4731: c8 89 09                 a2 = a2 + a1
  4734: 83 77 30                 i32 a0 = a0 + 0x30
  4737: 78 97                    u8 [a2] = a0
  4739: 28 21                    jump @344
      :                          @343
  4741: 97 77 01                 a0 = a0 << 0x1
  4744: 95 88 fe                 a1 = a1 + 0xfffffffffffffffe
  4747: 33 09 b4 01 01           a2 = 0x101b4
  4752: c8 97 07                 a0 = a0 + a2
  4755: 7c 79 01                 a2 = u8 [a0 + 0x1]
  4758: 7c 77                    a0 = u8 [a0]
  4760: 95 1a 19                 a3 = sp + 0x19
  4763: c8 8a 0a                 a3 = a3 + a1
  4766: 78 a9 01                 u8 [a3 + 0x1] = a2
  4769: 78 a7                    u8 [a3] = a0
  4771: 01                       fallthrough
      :                          @344
  4772: 95 1a 19                 a3 = sp + 0x19
  4775: c8 8a 0a                 a3 = a3 + a1
  4778: 9a 8b 27                 a4 = 0x27 - a1
  4781: 33 08 70 01 01           a1 = 0x10170
  4786: 82 17                    a0 = u64 [sp]
  4788: 33 09                    a2 = 0
  4790: 50 10 5a 12              ra = 90, jump @346
      :                          @345 [@dyn 45]
  4794: 82 10 50                 ra = u64 [sp + 0x50]
  4797: 82 15 48                 s0 = u64 [sp + 0x48]
  4800: 82 16 40                 s1 = u64 [sp + 0x40]
  4803: 95 11 58                 sp = sp + 0x58
  4806: 32 00                    ret
      :                          @346
  4808: 95 11 98                 sp = sp + 0xffffffffffffff98
  4811: 7b 10 60                 u64 [sp + 0x60] = ra
  4814: 7b 15 58                 u64 [sp + 0x58] = s0
  4817: 7b 16 50                 u64 [sp + 0x50] = s1
  4820: 80 73 34                 t1 = u32 [a0 + 0x34]
  4823: 7b 1a 20                 u64 [sp + 0x20] = a3
  4826: 64 9c                    a5 = a2
  4828: 84 36 01                 s1 = t1 & 0x1
  4831: 33 02 2b                 t0 = 0x2b
  4834: 33 09 00 00 11           a2 = 0x110000
  4839: 84 3a 04                 a3 = t1 & 0x4
  4842: 7b 1b 28                 u64 [sp + 0x28] = a4
  4845: c8 b6 04                 t2 = s1 + a4
  4848: 7b 1c 30                 u64 [sp + 0x30] = a5
  4851: 52 0a 10                 jump @349 if a3 != 0
      :                          @347
  4854: 49 11 38                 u64 [sp + 56] = 0
  4857: 82 78                    a1 = u64 [a0]
  4859: 94 69 2b                 a2 = 0x2b if s1 != 0
  4862: 52 08 35                 jump @353 if a1 != 0
      :                          @348
  4865: 28 56                    jump @358
      :                          @349
  4867: 7b 18 38                 u64 [sp + 0x38] = a1
  4870: 33 09                    a2 = 0
  4872: 51 0c 1b                 jump @352 if a5 == 0
      :                          @350
  4875: 82 1b 38                 a4 = u64 [sp + 0x38]
  4878: 01                       fallthrough
      :                          @351
  4879: 7d b5                    s0 = i8 [a4]
  4881: 89 55 c0                 s0 = s0 <s 0xffffffffffffffc0
  4884: 85 5a 01                 a3 = s0 ^ 0x1
  4887: c8 a9 09                 a2 = a2 + a3
  4890: 95 cc ff                 a5 = a5 + 0xffffffffffffffff
  4893: 95 bb 01                 a4 = a4 + 0x1
  4896: 52 0c ef                 jump @351 if a5 != 0
      :                          @352
  4899: c8 94 04                 t2 = t2 + a2
  4902: 33 09 00 00 11           a2 = 0x110000
  4907: 82 78                    a1 = u64 [a0]
  4909: db 62 09                 a2 = t0 if s1 != 0
  4912: 51 08 27                 jump @358 if a1 == 0
      :                          @353
  4915: 82 7a 08                 a3 = u64 [a0 + 0x8]
  4918: ae a4 21                 jump @358 if t2 >=u a3
      :                          @354
  4921: 84 38 08                 a1 = t1 & 0x8
  4924: 52 08 50                 jump @361 if a1 != 0
      :                          @355
  4927: 7c 76 38                 s1 = u8 [a0 + 0x38]
  4930: c9 4a 0a                 a3 = a3 - t2
  4933: 7b 19 18                 u64 [sp + 0x18] = a2
  4936: 5a 16 01 9d 00           jump @368 if s1 >s 1
      :                          @356
  4941: 52 06 aa 00              jump @370 if s1 != 0
      :                          @357
  4945: 7b 1a 10                 u64 [sp + 0x10] = a3
  4948: 28 a9 00                 jump @371
      :                          @358
  4951: 82 75 20                 s0 = u64 [a0 + 0x20]
  4954: 82 76 28                 s1 = u64 [a0 + 0x28]
  4957: 64 57                    a0 = s0
  4959: 64 68                    a1 = s1
  4961: 82 1a 38                 a3 = u64 [sp + 0x38]
  4964: 82 1b 30                 a4 = u64 [sp + 0x30]
  4967: 50 10 5c 6c 01           ra = 92, jump @391
      :                          @359 [@dyn 46]
  4972: 33 08 01                 a1 = 0x1
  4975: 52 07 bb 00              jump @376 if a0 != 0
      :                          @360
  4979: 82 6c 18                 a5 = u64 [s1 + 0x18]
  4982: 64 57                    a0 = s0
  4984: 82 18 20                 a1 = u64 [sp + 0x20]
  4987: 82 19 28                 a2 = u64 [sp + 0x28]
  4990: 82 10 60                 ra = u64 [sp + 0x60]
  4993: 82 15 58                 s0 = u64 [sp + 0x58]
  4996: 82 16 50                 s1 = u64 [sp + 0x50]
  4999: 95 11 68                 sp = sp + 0x68
  5002: 32 0c                    jump [a5]
      :                          @361
  5004: 7b 1a 40                 u64 [sp + 0x40] = a3
  5007: 64 45                    s0 = t2
  5009: 81 78 30                 a1 = i32 [a0 + 0x30]
  5012: 7b 18 10                 u64 [sp + 0x10] = a1
  5015: 7c 7a 38                 a3 = u8 [a0 + 0x38]
  5018: 7b 1a 08                 u64 [sp + 0x8] = a3
  5021: 82 7a 20                 a3 = u64 [a0 + 0x20]
  5024: 82 78 28                 a1 = u64 [a0 + 0x28]
  5027: 48 17 30 30              u32 [a0 + 48] = 0x30
  5031: 7b 17                    u64 [sp] = a0
  5033: 46 17 38 01              u8 [a0 + 56] = 0x1
  5037: 7b 1a 48                 u64 [sp + 0x48] = a3
  5040: 64 a7                    a0 = a3
  5042: 64 86                    s1 = a1
  5044: 82 1a 38                 a3 = u64 [sp + 0x38]
  5047: 82 1b 30                 a4 = u64 [sp + 0x30]
  5050: 50 10 5e 19 01           ra = 94, jump @391
      :                          @362 [@dyn 47]
  5055: 52 07 67                 jump @375 if a0 != 0
      :                          @363
  5058: 82 17 40                 a0 = u64 [sp + 0x40]
  5061: c9 57 05                 s0 = a0 - s0
  5064: 95 55 01                 s0 = s0 + 0x1
  5067: 01                       fallthrough
      :                          @364
  5068: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  5071: 51 05 c6 00              jump @386 if s0 == 0
      :                          @365
  5075: 82 69 20                 a2 = u64 [s1 + 0x20]
  5078: 33 08 30                 a1 = 0x30
  5081: 82 17 48                 a0 = u64 [sp + 0x48]
  5084: b4 90 01 60              ra = 96, jump [a2]
      :                          @366 [@dyn 48]
  5088: 51 07 ec                 jump @364 if a0 == 0
      :                          @367
  5091: 28 43                    jump @375
      :                          @368
  5093: 52 16 02 12              jump @370 if s1 != 2
      :                          @369
  5097: 98 a6 01                 s1 = a3 >> 0x1
  5100: 95 a8 01                 a1 = a3 + 0x1
  5103: 98 88 01                 a1 = a1 >> 0x1
  5106: 7b 18 10                 u64 [sp + 0x10] = a1
  5109: 28 08                    jump @371
      :                          @370
  5111: 64 a6                    s1 = a3
  5113: 49 11 10                 u64 [sp + 16] = 0
  5116: 01                       fallthrough
      :                          @371
  5117: 82 78 20                 a1 = u64 [a0 + 0x20]
  5120: 7b 18 48                 u64 [sp + 0x48] = a1
  5123: 82 75 28                 s0 = u64 [a0 + 0x28]
  5126: 81 77 30                 a0 = i32 [a0 + 0x30]
  5129: 7b 17 40                 u64 [sp + 0x40] = a0
  5132: 95 66 01                 s1 = s1 + 0x1
  5135: 01                       fallthrough
      :                          @372
  5136: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
  5139: 51 06 27                 jump @377 if s1 == 0
      :                          @373
  5142: 82 59 20                 a2 = u64 [s0 + 0x20]
  5145: 82 17 48                 a0 = u64 [sp + 0x48]
  5148: 82 18 40                 a1 = u64 [sp + 0x40]
  5151: b4 90 01 62              ra = 98, jump [a2]
      :                          @374 [@dyn 49]
  5155: 51 07 ed                 jump @372 if a0 == 0
      :                          @375
  5158: 33 08 01                 a1 = 0x1
  5161: 01                       fallthrough
      :                          @376
  5162: 64 87                    a0 = a1
  5164: 82 10 60                 ra = u64 [sp + 0x60]
  5167: 82 15 58                 s0 = u64 [sp + 0x58]
  5170: 82 16 50                 s1 = u64 [sp + 0x50]
  5173: 95 11 68                 sp = sp + 0x68
  5176: 32 00                    ret
      :                          @377
  5178: 82 16 48                 s1 = u64 [sp + 0x48]
  5181: 64 67                    a0 = s1
  5183: 64 58                    a1 = s0
  5185: 82 19 18                 a2 = u64 [sp + 0x18]
  5188: 82 1a 38                 a3 = u64 [sp + 0x38]
  5191: 82 1b 30                 a4 = u64 [sp + 0x30]
  5194: 50 10 64 89 00           ra = 100, jump @391
      :                          @378 [@dyn 50]
  5199: 33 08 01                 a1 = 0x1
  5202: 52 07 d8                 jump @376 if a0 != 0
      :                          @379
  5205: 82 5a 18                 a3 = u64 [s0 + 0x18]
  5208: 64 67                    a0 = s1
  5210: 82 18 20                 a1 = u64 [sp + 0x20]
  5213: 82 19 28                 a2 = u64 [sp + 0x28]
  5216: b4 a0 01 66              ra = 102, jump [a3]
      :                          @380 [@dyn 51]
  5220: 33 08 01                 a1 = 0x1
  5223: 52 07 c3                 jump @376 if a0 != 0
      :                          @381
  5226: 82 17 10                 a0 = u64 [sp + 0x10]
  5229: 9a 77                    a0 = -a0
  5231: 7b 17 38                 u64 [sp + 0x38] = a0
  5234: 33 06 ff                 s1 = 0xffffffffffffffff
  5237: 01                       fallthrough
      :                          @382
  5238: 82 17 38                 a0 = u64 [sp + 0x38]
  5241: c8 67 07                 a0 = a0 + s1
  5244: 51 17 ff 42              jump @389 if a0 == 4294967295
      :                          @383
  5248: 82 59 20                 a2 = u64 [s0 + 0x20]
  5251: 82 17 48                 a0 = u64 [sp + 0x48]
  5254: 82 18 40                 a1 = u64 [sp + 0x40]
  5257: b4 90 01 68              ra = 104, jump [a2]
      :                          @384 [@dyn 52]
  5261: 95 66 01                 s1 = s1 + 0x1
  5264: 51 07 e6                 jump @382 if a0 == 0
      :                          @385
  5267: 28 37                    jump @390
      :                          @386
  5269: 82 6a 18                 a3 = u64 [s1 + 0x18]
  5272: 82 17 48                 a0 = u64 [sp + 0x48]
  5275: 82 18 20                 a1 = u64 [sp + 0x20]
  5278: 82 19 28                 a2 = u64 [sp + 0x28]
  5281: b4 a0 01 6a              ra = 106, jump [a3]
      :                          @387 [@dyn 53]
  5285: 33 08 01                 a1 = 0x1
  5288: 52 07 82                 jump @376 if a0 != 0
      :                          @388
  5291: 33 08                    a1 = 0
  5293: 82 16                    s1 = u64 [sp]
  5295: 82 17 10                 a0 = u64 [sp + 0x10]
  5298: 7a 67 30                 u32 [s1 + 0x30] = a0
  5301: 82 17 08                 a0 = u64 [sp + 0x8]
  5304: 78 67 38                 u8 [s1 + 0x38] = a0
  5307: 28 6f ff                 jump @376
      :                          @389
  5310: 82 16 10                 s1 = u64 [sp + 0x10]
  5313: 82 17 10                 a0 = u64 [sp + 0x10]
  5316: d8 76 08                 a1 = s1 <u a0
  5319: 28 63 ff                 jump @376
      :                          @390
  5322: 82 17 10                 a0 = u64 [sp + 0x10]
  5325: d8 76 08                 a1 = s1 <u a0
  5328: 28 5a ff                 jump @376
      :                          @391
  5331: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  5334: 7b 10 20                 u64 [sp + 0x20] = ra
  5337: 7b 15 18                 u64 [sp + 0x18] = s0
  5340: 7b 16 10                 u64 [sp + 0x10] = s1
  5343: 83 9c                    i32 a5 = a2 + 0
  5345: 33 02 00 00 11           t0 = 0x110000
  5350: 64 a6                    s1 = a3
  5352: 64 85                    s0 = a1
  5354: 64 7a                    a3 = a0
  5356: aa 2c 20                 jump @394 if a5 == t0
      :                          @392
  5359: 82 5c 20                 a5 = u64 [s0 + 0x20]
  5362: 64 a7                    a0 = a3
  5364: 64 98                    a1 = a2
  5366: 7b 1b 08                 u64 [sp + 0x8] = a4
  5369: 7b 1a                    u64 [sp] = a3
  5371: b4 c0 01 6c              ra = 108, jump [a5]
      :                          @393 [@dyn 54]
  5375: 82 1a                    a3 = u64 [sp]
  5377: 82 1b 08                 a4 = u64 [sp + 0x8]
  5380: 64 78                    a1 = a0
  5382: 33 07 01                 a0 = 0x1
  5385: 52 08 20                 jump @397 if a1 != 0
      :                          @394
  5388: 51 06 1a                 jump @396 if s1 == 0
      :                          @395
  5391: 82 5c 18                 a5 = u64 [s0 + 0x18]
  5394: 64 a7                    a0 = a3
  5396: 64 68                    a1 = s1
  5398: 64 b9                    a2 = a4
  5400: 82 10 20                 ra = u64 [sp + 0x20]
  5403: 82 15 18                 s0 = u64 [sp + 0x18]
  5406: 82 16 10                 s1 = u64 [sp + 0x10]
  5409: 95 11 28                 sp = sp + 0x28
  5412: 32 0c                    jump [a5]
      :                          @396
  5414: 33 07                    a0 = 0
  5416: 01                       fallthrough
      :                          @397
  5417: 82 10 20                 ra = u64 [sp + 0x20]
  5420: 82 15 18                 s0 = u64 [sp + 0x18]
  5423: 82 16 10                 s1 = u64 [sp + 0x10]
  5426: 95 11 28                 sp = sp + 0x28
  5429: 32 00                    ret
      :                          @398
  5431: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  5435: 7b 10 80 00              u64 [sp + 0x80] = ra
  5439: 7b 15 78                 u64 [sp + 0x78] = s0
  5442: 7b 16 70                 u64 [sp + 0x70] = s1
  5445: 49 11 60 20              u64 [sp + 96] = 0x20
  5449: 33 0a 03                 a3 = 0x3
  5452: 78 1a 68                 u8 [sp + 0x68] = a3
  5455: 82 96 20                 s1 = u64 [a2 + 0x20]
  5458: 49 11 30                 u64 [sp + 48] = 0
  5461: 49 11 40                 u64 [sp + 64] = 0
  5464: 7b 17 50                 u64 [sp + 0x50] = a0
  5467: 7b 18 58                 u64 [sp + 0x58] = a1
  5470: 51 06 07 01              jump @420 if s1 == 0
      :                          @399
  5474: 82 97 28                 a0 = u64 [a2 + 0x28]
  5477: 51 07 74 01              jump @430 if a0 == 0
      :                          @400
  5481: 49 11 28                 u64 [sp + 40] = 0
  5484: 82 95                    s0 = u64 [a2]
  5486: 7b 19 08                 u64 [sp + 0x8] = a2
  5489: 82 98 10                 a1 = u64 [a2 + 0x10]
  5492: 7b 18 18                 u64 [sp + 0x18] = a1
  5495: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  5498: 97 88 03                 a1 = a1 << 0x3
  5501: 98 88 03                 a1 = a1 >> 0x3
  5504: 95 88 01                 a1 = a1 + 0x1
  5507: 7b 18                    u64 [sp] = a1
  5509: 95 55 08                 s0 = s0 + 0x8
  5512: 96 78 38                 a1 = a0 * 0x38
  5515: 95 66 18                 s1 = s1 + 0x18
  5518: 33 07 58                 a0 = 0x58
  5521: 7b 17 10                 u64 [sp + 0x10] = a0
  5524: 01                       fallthrough
      :                          @401
  5525: 7b 18 20                 u64 [sp + 0x20] = a1
  5528: 82 59                    a2 = u64 [s0]
  5530: 51 09 17                 jump @404 if a2 == 0
      :                          @402
  5533: 82 1a 58                 a3 = u64 [sp + 0x58]
  5536: 82 17 50                 a0 = u64 [sp + 0x50]
  5539: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  5542: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5545: b4 a0 01 6e              ra = 110, jump [a3]
      :                          @403 [@dyn 55]
  5549: 52 07 51 01              jump @433 if a0 != 0
      :                          @404
  5553: 81 67 10                 a0 = i32 [s1 + 0x10]
  5556: 7a 17 60                 u32 [sp + 0x60] = a0
  5559: 7c 67 18                 a0 = u8 [s1 + 0x18]
  5562: 78 17 68                 u8 [sp + 0x68] = a0
  5565: 81 67 14                 a0 = i32 [s1 + 0x14]
  5568: 7a 17 64                 u32 [sp + 0x64] = a0
  5571: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  5574: 82 67                    a0 = u64 [s1]
  5576: 51 08 26                 jump @409 if a1 == 0
      :                          @405
  5579: 52 18 01 16              jump @407 if a1 != 1
      :                          @406
  5583: 97 77 04                 a0 = a0 << 0x4
  5586: 82 18 18                 a1 = u64 [sp + 0x18]
  5589: c8 87 07                 a0 = a0 + a1
  5592: 82 78 08                 a1 = u64 [a0 + 0x8]
  5595: 82 19 10                 a2 = u64 [sp + 0x10]
  5598: aa 98 07                 jump @408 if a1 == a2
      :                          @407
  5601: 33 08                    a1 = 0
  5603: 28 0f                    jump @410
      :                          @408
  5605: 82 77                    a0 = u64 [a0]
  5607: 82 77                    a0 = u64 [a0]
  5609: 33 08 01                 a1 = 0x1
  5612: 28 06                    jump @410
      :                          @409
  5614: 33 08 01                 a1 = 0x1
  5617: 01                       fallthrough
      :                          @410
  5618: 7b 18 30                 u64 [sp + 0x30] = a1
  5621: 7b 17 38                 u64 [sp + 0x38] = a0
  5624: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  5627: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  5630: 51 08 26                 jump @415 if a1 == 0
      :                          @411
  5633: 52 18 01 16              jump @413 if a1 != 1
      :                          @412
  5637: 97 77 04                 a0 = a0 << 0x4
  5640: 82 18 18                 a1 = u64 [sp + 0x18]
  5643: c8 87 07                 a0 = a0 + a1
  5646: 82 78 08                 a1 = u64 [a0 + 0x8]
  5649: 82 19 10                 a2 = u64 [sp + 0x10]
  5652: aa 98 07                 jump @414 if a1 == a2
      :                          @413
  5655: 33 08                    a1 = 0
  5657: 28 0f                    jump @416
      :                          @414
  5659: 82 77                    a0 = u64 [a0]
  5661: 82 77                    a0 = u64 [a0]
  5663: 33 08 01                 a1 = 0x1
  5666: 28 06                    jump @416
      :                          @415
  5668: 33 08 01                 a1 = 0x1
  5671: 01                       fallthrough
      :                          @416
  5672: 7b 18 40                 u64 [sp + 0x40] = a1
  5675: 7b 17 48                 u64 [sp + 0x48] = a0
  5678: 82 67 08                 a0 = u64 [s1 + 0x8]
  5681: 97 77 04                 a0 = a0 << 0x4
  5684: 82 18 18                 a1 = u64 [sp + 0x18]
  5687: c8 78 08                 a1 = a1 + a0
  5690: 82 87                    a0 = u64 [a1]
  5692: 82 89 08                 a2 = u64 [a1 + 0x8]
  5695: 95 18 30                 a1 = sp + 0x30
  5698: b4 90 01 70              ra = 112, jump [a2]
      :                          @417 [@dyn 56]
  5702: 52 07 b8 00              jump @433 if a0 != 0
      :                          @418
  5706: 95 55 10                 s0 = s0 + 0x10
  5709: 82 18 20                 a1 = u64 [sp + 0x20]
  5712: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  5715: 95 66 38                 s1 = s1 + 0x38
  5718: 82 17 28                 a0 = u64 [sp + 0x28]
  5721: 95 77 01                 a0 = a0 + 0x1
  5724: 7b 17 28                 u64 [sp + 0x28] = a0
  5727: 52 08 36 ff              jump @401 if a1 != 0
      :                          @419
  5731: 28 69                    jump @428
      :                          @420
  5733: 82 97 18                 a0 = u64 [a2 + 0x18]
  5736: 51 07 71                 jump @430 if a0 == 0
      :                          @421
  5739: 82 95 10                 s0 = u64 [a2 + 0x10]
  5742: 33 0a                    a3 = 0
  5744: 97 78 04                 a1 = a0 << 0x4
  5747: c8 58 08                 a1 = a1 + s0
  5750: 7b 18 20                 u64 [sp + 0x20] = a1
  5753: 7b 19 08                 u64 [sp + 0x8] = a2
  5756: 82 96                    s1 = u64 [a2]
  5758: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  5761: 97 77 04                 a0 = a0 << 0x4
  5764: 98 77 04                 a0 = a0 >> 0x4
  5767: 95 77 01                 a0 = a0 + 0x1
  5770: 7b 17                    u64 [sp] = a0
  5772: 95 66 08                 s1 = s1 + 0x8
  5775: 01                       fallthrough
      :                          @422
  5776: 7b 1a 28                 u64 [sp + 0x28] = a3
  5779: 82 69                    a2 = u64 [s1]
  5781: 51 09 16                 jump @425 if a2 == 0
      :                          @423
  5784: 82 1a 58                 a3 = u64 [sp + 0x58]
  5787: 82 17 50                 a0 = u64 [sp + 0x50]
  5790: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  5793: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5796: b4 a0 01 72              ra = 114, jump [a3]
      :                          @424 [@dyn 57]
  5800: 52 07 56                 jump @433 if a0 != 0
      :                          @425
  5803: 82 57                    a0 = u64 [s0]
  5805: 82 59 08                 a2 = u64 [s0 + 0x8]
  5808: 95 18 30                 a1 = sp + 0x30
  5811: b4 90 01 74              ra = 116, jump [a2]
      :                          @426 [@dyn 58]
  5815: 52 07 47                 jump @433 if a0 != 0
      :                          @427
  5818: 95 66 10                 s1 = s1 + 0x10
  5821: 95 55 10                 s0 = s0 + 0x10
  5824: 82 1a 28                 a3 = u64 [sp + 0x28]
  5827: 95 aa 01                 a3 = a3 + 0x1
  5830: 82 17 20                 a0 = u64 [sp + 0x20]
  5833: ab 75 c7                 jump @422 if s0 != a0
      :                          @428
  5836: 82 19 08                 a2 = u64 [sp + 0x8]
  5839: 82 1a                    a3 = u64 [sp]
  5841: 82 97 08                 a0 = u64 [a2 + 0x8]
  5844: ac 7a 0d                 jump @431 if a3 <u a0
      :                          @429
  5847: 28 2c                    jump @434
      :                          @430
  5849: 33 0a                    a3 = 0
  5851: 82 97 08                 a0 = u64 [a2 + 0x8]
  5854: 54 07 25                 jump @434 if a0 <=u 0
      :                          @431
  5857: 82 97                    a0 = u64 [a2]
  5859: 97 a8 04                 a1 = a3 << 0x4
  5862: c8 87 09                 a2 = a0 + a1
  5865: 82 1a 58                 a3 = u64 [sp + 0x58]
  5868: 82 17 50                 a0 = u64 [sp + 0x50]
  5871: 82 98                    a1 = u64 [a2]
  5873: 82 99 08                 a2 = u64 [a2 + 0x8]
  5876: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5879: b4 a0 01 76              ra = 118, jump [a3]
      :                          @432 [@dyn 59]
  5883: 51 07 08                 jump @434 if a0 == 0
      :                          @433
  5886: 33 07 01                 a0 = 0x1
  5889: 28 05                    jump @435
      :                          @434
  5891: 33 07                    a0 = 0
  5893: 01                       fallthrough
      :                          @435
  5894: 82 10 80 00              ra = u64 [sp + 0x80]
  5898: 82 15 78                 s0 = u64 [sp + 0x78]
  5901: 82 16 70                 s1 = u64 [sp + 0x70]
  5904: 95 11 88 00              sp = sp + 0x88
  5908: 32 00                    ret
      :                          @436 [@dyn 60]
  5910: 32 00                    ret
      :                          @437 [@dyn 61]
  5912: 95 11 80                 sp = sp + 0xffffffffffffff80
  5915: 7b 10 78                 u64 [sp + 0x78] = ra
  5918: 7b 15 70                 u64 [sp + 0x70] = s0
  5921: 7b 16 68                 u64 [sp + 0x68] = s1
  5924: 64 92                    t0 = a2
  5926: 33 00                    ra = 0
  5928: 33 0b                    a4 = 0
  5930: 33 05                    s0 = 0
  5932: 14 03 ff fe fe fe fe fe fe fe t1 = 0xfefefefefefefeff
  5942: 33 0a 0a 0a 0a 0a        a3 = 0xa0a0a0a
  5948: 14 04 0a 0a 0a 0a 0a 0a 0a 0a t2 = 0xa0a0a0a0a0a0a0a
  5958: 82 79 10                 a2 = u64 [a0 + 0x10]
  5961: 7b 19 48                 u64 [sp + 0x48] = a2
  5964: 82 79                    a2 = u64 [a0]
  5966: 7b 19 38                 u64 [sp + 0x38] = a2
  5969: 82 77 08                 a0 = u64 [a0 + 0x8]
  5972: 7b 17 30                 u64 [sp + 0x30] = a0
  5975: 33 07 a8 01 01           a0 = 0x101a8
  5980: 7b 17 08                 u64 [sp + 0x8] = a0
  5983: 3a 07 10 10 03           a0 = u64 [0x31010]
  5988: 7b 17 60                 u64 [sp + 0x60] = a0
  5991: 7b 18 58                 u64 [sp + 0x58] = a1
  5994: 95 88 08                 a1 = a1 + 0x8
  5997: 7b 18                    u64 [sp] = a1
  5999: 33 0c 0a                 a5 = 0xa
  6002: 7b 12 20                 u64 [sp + 0x20] = t0
  6005: 7b 13 18                 u64 [sp + 0x18] = t1
  6008: 7b 14 10                 u64 [sp + 0x10] = t2
  6011: 28 3a                    jump @441
      :                          @438
  6013: 64 06                    s1 = ra
  6015: c8 89 07                 a0 = a2 + a1
  6018: 7c 77 ff                 a0 = u8 [a0 + 0xffffffffffffffff]
  6021: 95 77 f6                 a0 = a0 + 0xfffffffffffffff6
  6024: 88 77 01                 a0 = a0 <u 0x1
  6027: 01                       fallthrough
      :                          @439
  6028: 82 1a 48                 a3 = u64 [sp + 0x48]
  6031: 78 a7                    u8 [a3] = a0
  6033: 82 17 30                 a0 = u64 [sp + 0x30]
  6036: 82 7a 18                 a3 = u64 [a0 + 0x18]
  6039: 82 17 38                 a0 = u64 [sp + 0x38]
  6042: b4 a0 01 7c              ra = 124, jump [a3]
      :                          @440 [@dyn 62]
  6046: 64 5b                    a4 = s0
  6048: 82 12 20                 t0 = u64 [sp + 0x20]
  6051: 82 13 18                 t1 = u64 [sp + 0x18]
  6054: 82 14 10                 t2 = u64 [sp + 0x10]
  6057: 64 60                    ra = s1
  6059: 33 0c 0a                 a5 = 0xa
  6062: 82 15 40                 s0 = u64 [sp + 0x40]
  6065: 52 07 63 01              jump @482 if a0 != 0
      :                          @441
  6069: 84 57 ff 00              a0 = s0 & 0xff
  6073: 52 07 57 01              jump @481 if a0 != 0
      :                          @442
  6077: 7b 1b 50                 u64 [sp + 0x50] = a4
  6080: ae 02 0a                 jump @445 if t0 >=u ra
      :                          @443
  6083: 28 ef 00                 jump @472
      :                          @444
  6086: ac 02 ec 00              jump @472 if t0 <u ra
      :                          @445
  6090: c9 02 08                 a1 = t0 - ra
  6093: 82 16 58                 s1 = u64 [sp + 0x58]
  6096: c8 06 06                 s1 = s1 + ra
  6099: 55 18 10 1d              jump @451 if a1 >=u 16
      :                          @446
  6103: aa 02 d8 00              jump @471 if t0 == ra
      :                          @447
  6107: 33 0a                    a3 = 0
  6109: 01                       fallthrough
      :                          @448
  6110: c8 a6 07                 a0 = s1 + a3
  6113: 7c 77                    a0 = u8 [a0]
  6115: aa c7 a5 00              jump @466 if a0 == a5
      :                          @449
  6119: 95 aa 01                 a3 = a3 + 0x1
  6122: ab a8 f4                 jump @448 if a1 != a3
      :                          @450
  6125: 28 c2 00                 jump @471
      :                          @451
  6128: 95 69 07                 a2 = s1 + 0x7
  6131: 84 9a f8                 a3 = a2 & 0xfffffffffffffff8
  6134: c9 6a 07                 a0 = a3 - s1
  6137: d3 6a 0a                 a3 = a3 ^ s1
  6140: 88 aa 01                 a3 = a3 <u 0x1
  6143: 88 7b 01                 a4 = a0 <u 0x1
  6146: d4 ba 0a                 a3 = a3 | a4
  6149: 51 0a 45                 jump @457 if a3 == 0
      :                          @452
  6152: 33 07                    a0 = 0
  6154: 95 8a f0                 a3 = a1 + 0xfffffffffffffff0
  6157: 82 1b                    a4 = u64 [sp]
  6159: c8 0b 0b                 a4 = a4 + ra
  6162: 28 08                    jump @454
      :                          @453
  6164: 82 1b                    a4 = u64 [sp]
  6166: c8 0b 0b                 a4 = a4 + ra
  6169: 01                       fallthrough
      :                          @454
  6170: c8 76 0c                 a5 = s1 + a0
  6173: 82 cc                    a5 = u64 [a5]
  6175: c8 7b 09                 a2 = a4 + a0
  6178: 82 99                    a2 = u64 [a2]
  6180: d3 4c 05                 s0 = a5 ^ t2
  6183: c8 35 05                 s0 = s0 + t1
  6186: e0 c5 0c                 a5 = s0 & ~a5
  6189: d3 49 05                 s0 = a2 ^ t2
  6192: c8 35 05                 s0 = s0 + t1
  6195: e0 95 09                 a2 = s0 & ~a2
  6198: d4 c9 09                 a2 = a2 | a5
  6201: 82 1c 60                 a5 = u64 [sp + 0x60]
  6204: d2 c9 09                 a2 = a2 & a5
  6207: 52 09 1f                 jump @460 if a2 != 0
      :                          @455
  6210: 95 77 10                 a0 = a0 + 0x10
  6213: ae 7a d5                 jump @454 if a3 >=u a0
      :                          @456
  6216: 28 16                    jump @460
      :                          @457
  6218: c8 a6 0b                 a4 = s1 + a3
  6221: 7c bb                    a4 = u8 [a4]
  6223: aa cb 51                 jump @469 if a4 == a5
      :                          @458
  6226: 95 aa 01                 a3 = a3 + 0x1
  6229: ab a7 f5                 jump @457 if a0 != a3
      :                          @459
  6232: 95 8a f0                 a3 = a1 + 0xfffffffffffffff0
  6235: ae 7a b9                 jump @453 if a3 >=u a0
      :                          @460
  6238: aa 87 9a 00              jump @478 if a0 == a1
      :                          @461
  6242: 33 0a                    a3 = 0
  6244: c8 76 06                 s1 = s1 + a0
  6247: c9 72 08                 a1 = t0 - a0
  6250: c9 08 08                 a1 = a1 - ra
  6253: 33 0c 0a                 a5 = 0xa
  6256: 82 1b 50                 a4 = u64 [sp + 0x50]
  6259: 01                       fallthrough
      :                          @462
  6260: c8 a6 09                 a2 = s1 + a3
  6263: 7c 99                    a2 = u8 [a2]
  6265: aa c9 0b                 jump @465 if a2 == a5
      :                          @463
  6268: 95 aa 01                 a3 = a3 + 0x1
  6271: ab a8 f5                 jump @462 if a1 != a3
      :                          @464
  6274: 28 2d                    jump @471
      :                          @465
  6276: c8 7a 0a                 a3 = a3 + a0
  6279: 01                       fallthrough
      :                          @466
  6280: c8 0a 0a                 a3 = a3 + ra
  6283: 95 a0 01                 ra = a3 + 0x1
  6286: ae 2a 38 ff              jump @444 if a3 >=u t0
      :                          @467
  6290: 82 17 58                 a0 = u64 [sp + 0x58]
  6293: c8 7a 0a                 a3 = a3 + a0
  6296: 7c a7                    a0 = u8 [a3]
  6298: ab c7 2c ff              jump @444 if a0 != a5
      :                          @468
  6302: 28 61                    jump @479
      :                          @469
  6304: 82 1b 50                 a4 = u64 [sp + 0x50]
  6307: c8 0a 0a                 a3 = a3 + ra
  6310: 95 a0 01                 ra = a3 + 0x1
  6313: ac 2a e9                 jump @467 if a3 <u t0
      :                          @470
  6316: 28 1a ff                 jump @444
      :                          @471
  6319: 64 20                    ra = t0
  6321: 01                       fallthrough
      :                          @472
  6322: 49 11 40 01              u64 [sp + 64] = 0x1
  6326: 64 b5                    s0 = a4
  6328: 64 26                    s1 = t0
  6330: aa 2b 56                 jump @481 if a4 == t0
      :                          @473
  6333: 82 17 48                 a0 = u64 [sp + 0x48]
  6336: 7c 77                    a0 = u8 [a0]
  6338: 51 07 22                 jump @476 if a0 == 0
      :                          @474
  6341: 82 17 30                 a0 = u64 [sp + 0x30]
  6344: 82 7a 18                 a3 = u64 [a0 + 0x18]
  6347: 33 09 04                 a2 = 0x4
  6350: 82 17 38                 a0 = u64 [sp + 0x38]
  6353: 82 18 08                 a1 = u64 [sp + 0x8]
  6356: 7b 10 28                 u64 [sp + 0x28] = ra
  6359: b4 a0 01 7e              ra = 126, jump [a3]
      :                          @475 [@dyn 63]
  6363: 82 1b 50                 a4 = u64 [sp + 0x50]
  6366: 82 10 28                 ra = u64 [sp + 0x28]
  6369: 52 07 33                 jump @482 if a0 != 0
      :                          @476
  6372: c9 b6 09                 a2 = s1 - a4
  6375: 82 18 58                 a1 = u64 [sp + 0x58]
  6378: c8 b8 08                 a1 = a1 + a4
  6381: ab b6 90 fe              jump @438 if s1 != a4
      :                          @477
  6385: 64 06                    s1 = ra
  6387: 33 07                    a0 = 0
  6389: 28 97 fe                 jump @439
      :                          @478
  6392: 64 20                    ra = t0
  6394: 82 1b 50                 a4 = u64 [sp + 0x50]
  6397: 28 b5                    jump @472
      :                          @479
  6399: 49 11 40                 u64 [sp + 64] = 0
  6402: 64 05                    s0 = ra
  6404: 64 06                    s1 = ra
  6406: 82 17 48                 a0 = u64 [sp + 0x48]
  6409: 7c 77                    a0 = u8 [a0]
  6411: 52 07 ba                 jump @474 if a0 != 0
      :                          @480
  6414: 28 d6                    jump @476
      :                          @481
  6416: 33 07                    a0 = 0
  6418: 28 06                    jump @483
      :                          @482
  6420: 33 07 01                 a0 = 0x1
  6423: 01                       fallthrough
      :                          @483
  6424: 82 10 78                 ra = u64 [sp + 0x78]
  6427: 82 15 70                 s0 = u64 [sp + 0x70]
  6430: 82 16 68                 s1 = u64 [sp + 0x68]
  6433: 95 11 80 00              sp = sp + 0x80
  6437: 32 00                    ret
      :                          @484 [@dyn 64]
  6439: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  6442: 7b 10 20                 u64 [sp + 0x20] = ra
  6445: 7b 15 18                 u64 [sp + 0x18] = s0
  6448: 7b 16 10                 u64 [sp + 0x10] = s1
  6451: 82 75 10                 s0 = u64 [a0 + 0x10]
  6454: 7c 59                    a2 = u8 [s0]
  6456: 82 7b                    a4 = u64 [a0]
  6458: 82 76 08                 s1 = u64 [a0 + 0x8]
  6461: 51 09 33                 jump @488 if a2 == 0
      :                          @485
  6464: 82 6a 18                 a3 = u64 [s1 + 0x18]
  6467: 7b 18 08                 u64 [sp + 0x8] = a1
  6470: 33 08 a8 01 01           a1 = 0x101a8
  6475: 33 09 04                 a2 = 0x4
  6478: 64 b7                    a0 = a4
  6480: 7b 1b                    u64 [sp] = a4
  6482: b4 a0 02 82 00           ra = 130, jump [a3]
      :                          @486 [@dyn 65]
  6487: 82 18 08                 a1 = u64 [sp + 0x8]
  6490: 82 1b                    a4 = u64 [sp]
  6492: 51 07 14                 jump @488 if a0 == 0
      :                          @487
  6495: 33 07 01                 a0 = 0x1
  6498: 82 10 20                 ra = u64 [sp + 0x20]
  6501: 82 15 18                 s0 = u64 [sp + 0x18]
  6504: 82 16 10                 s1 = u64 [sp + 0x10]
  6507: 95 11 28                 sp = sp + 0x28
  6510: 32 00                    ret
      :                          @488
  6512: 83 87                    i32 a0 = a1 + 0
  6514: 95 77 f6                 a0 = a0 + 0xfffffffffffffff6
  6517: 88 77 01                 a0 = a0 <u 0x1
  6520: 78 57                    u8 [s0] = a0
  6522: 82 6c 20                 a5 = u64 [s1 + 0x20]
  6525: 64 b7                    a0 = a4
  6527: 82 10 20                 ra = u64 [sp + 0x20]
  6530: 82 15 18                 s0 = u64 [sp + 0x18]
  6533: 82 16 10                 s1 = u64 [sp + 0x10]
  6536: 95 11 28                 sp = sp + 0x28
  6539: 32 0c                    jump [a5]
      :                          @489 [@dyn 66]
  6541: 64 8a                    a3 = a1
  6543: 33 08 78 01 01           a1 = 0x10178
  6548: 64 a9                    a2 = a3
  6550: 28 a1 fb                 jump @398
      :                          @490
  6553: 95 11 70 ff              sp = sp + 0xffffffffffffff70
  6557: 7b 10 88 00              u64 [sp + 0x88] = ra
  6561: 7b 15 80 00              u64 [sp + 0x80] = s0
  6565: 7b 16 78                 u64 [sp + 0x78] = s1
  6568: 64 75                    s0 = a0
  6570: 7c 77 08                 a0 = u8 [a0 + 0x8]
  6573: 64 8b                    a4 = a1
  6575: 33 08 01                 a1 = 0x1
  6578: 33 06 01                 s1 = 0x1
  6581: 51 07 1d                 jump @492 if a0 == 0
      :                          @491
  6584: 78 56 08                 u8 [s0 + 0x8] = s1
  6587: 46 15 09 01              u8 [s0 + 9] = 0x1
  6591: 64 57                    a0 = s0
  6593: 82 10 88 00              ra = u64 [sp + 0x88]
  6597: 82 15 80 00              s0 = u64 [sp + 0x80]
  6601: 82 16 78                 s1 = u64 [sp + 0x78]
  6604: 95 11 90 00              sp = sp + 0x90
  6608: 32 00                    ret
      :                          @492
  6610: 64 9a                    a3 = a2
  6612: 82 5c                    a5 = u64 [s0]
  6614: 80 c7 34                 a0 = u32 [a5 + 0x34]
  6617: 7c 58 09                 a1 = u8 [s0 + 0x9]
  6620: 84 79 04                 a2 = a0 & 0x4
  6623: 52 09 45                 jump @498 if a2 != 0
      :                          @493
  6626: 51 08 32                 jump @496 if a1 == 0
      :                          @494
  6629: 82 c8 28                 a1 = u64 [a5 + 0x28]
  6632: 82 c7 20                 a0 = u64 [a5 + 0x20]
  6635: 82 83 18                 t1 = u64 [a1 + 0x18]
  6638: 33 08 ac 01 01           a1 = 0x101ac
  6643: 33 09 02                 a2 = 0x2
  6646: 64 a6                    s1 = a3
  6648: 7b 1b 10                 u64 [sp + 0x10] = a4
  6651: 7b 1c 08                 u64 [sp + 0x8] = a5
  6654: b4 30 02 86 00           ra = 134, jump [t1]
      :                          @495 [@dyn 67]
  6659: 82 1c 08                 a5 = u64 [sp + 0x8]
  6662: 82 1b 10                 a4 = u64 [sp + 0x10]
  6665: 64 6a                    a3 = s1
  6667: 33 08 01                 a1 = 0x1
  6670: 33 06 01                 s1 = 0x1
  6673: 52 07 a7                 jump @491 if a0 != 0
      :                          @496
  6676: 64 b7                    a0 = a4
  6678: 64 c8                    a1 = a5
  6680: b4 a0 02 88 00           ra = 136, jump [a3]
      :                          @497 [@dyn 68]
  6685: 33 08 01                 a1 = 0x1
  6688: 64 76                    s1 = a0
  6690: 28 96                    jump @491
      :                          @498
  6692: 52 08 37                 jump @502 if a1 != 0
      :                          @499
  6695: 82 c8 28                 a1 = u64 [a5 + 0x28]
  6698: 82 c7 20                 a0 = u64 [a5 + 0x20]
  6701: 82 83 18                 t1 = u64 [a1 + 0x18]
  6704: 33 08 b0 01 01           a1 = 0x101b0
  6709: 33 09 01                 a2 = 0x1
  6712: 33 06 01                 s1 = 0x1
  6715: 7b 1a                    u64 [sp] = a3
  6717: 7b 1b 10                 u64 [sp + 0x10] = a4
  6720: 7b 1c 08                 u64 [sp + 0x8] = a5
  6723: b4 30 02 8a 00           ra = 138, jump [t1]
      :                          @500 [@dyn 69]
  6728: 82 1c 08                 a5 = u64 [sp + 0x8]
  6731: 82 1b 10                 a4 = u64 [sp + 0x10]
  6734: 82 1a                    a3 = u64 [sp]
  6736: 33 08 01                 a1 = 0x1
  6739: 52 07 65 ff              jump @491 if a0 != 0
      :                          @501
  6743: 81 c7 34                 a0 = i32 [a5 + 0x34]
  6746: 01                       fallthrough
      :                          @502
  6747: 33 06 01                 s1 = 0x1
  6750: 78 16 37                 u8 [sp + 0x37] = s1
  6753: 82 c8 20                 a1 = u64 [a5 + 0x20]
  6756: 82 c9 28                 a2 = u64 [a5 + 0x28]
  6759: 7b 18 18                 u64 [sp + 0x18] = a1
  6762: 7b 19 20                 u64 [sp + 0x20] = a2
  6765: 95 18 37                 a1 = sp + 0x37
  6768: 7b 18 28                 u64 [sp + 0x28] = a1
  6771: 81 c8 30                 a1 = i32 [a5 + 0x30]
  6774: 7c c9 38                 a2 = u8 [a5 + 0x38]
  6777: 82 c3                    t1 = u64 [a5]
  6779: 82 c4 08                 t2 = u64 [a5 + 0x8]
  6782: 82 c0 10                 ra = u64 [a5 + 0x10]
  6785: 82 c2 18                 t0 = u64 [a5 + 0x18]
  6788: 7a 17 6c                 u32 [sp + 0x6c] = a0
  6791: 7a 18 68                 u32 [sp + 0x68] = a1
  6794: 78 19 70                 u8 [sp + 0x70] = a2
  6797: 7b 13 38                 u64 [sp + 0x38] = t1
  6800: 7b 14 40                 u64 [sp + 0x40] = t2
  6803: 7b 10 48                 u64 [sp + 0x48] = ra
  6806: 7b 12 50                 u64 [sp + 0x50] = t0
  6809: 95 17 18                 a0 = sp + 0x18
  6812: 7b 17 58                 u64 [sp + 0x58] = a0
  6815: 33 07 78 01 01           a0 = 0x10178
  6820: 7b 17 60                 u64 [sp + 0x60] = a0
  6823: 95 18 38                 a1 = sp + 0x38
  6826: 64 b7                    a0 = a4
  6828: b4 a0 02 8c 00           ra = 140, jump [a3]
      :                          @503 [@dyn 70]
  6833: 52 07 21                 jump @506 if a0 != 0
      :                          @504
  6836: 82 18 60                 a1 = u64 [sp + 0x60]
  6839: 82 17 58                 a0 = u64 [sp + 0x58]
  6842: 82 8a 18                 a3 = u64 [a1 + 0x18]
  6845: 33 08 ae 01 01           a1 = 0x101ae
  6850: 33 09 02                 a2 = 0x2
  6853: b4 a0 02 8e 00           ra = 142, jump [a3]
      :                          @505 [@dyn 71]
  6858: 64 76                    s1 = a0
  6860: 33 08 01                 a1 = 0x1
  6863: 28 e9 fe                 jump @491
      :                          @506
  6866: 33 08 01                 a1 = 0x1
  6869: 28 e3 fe                 jump @491
      :                          @507
  6872: 51 08 9b 00              jump @528 if a1 == 0
      :                          @508
  6876: 64 79                    a2 = a0
  6878: 7c 77                    a0 = u8 [a0]
  6880: 51 07 91 00              jump @527 if a0 == 0
      :                          @509
  6884: 51 27 ff 00 90 00        jump @529 if a0 == 255
      :                          @510
  6890: 6c 7a                    a3 = sext.b a0
  6892: 57 0a 09                 jump @512 if a3 <s 0
      :                          @511
  6895: 33 0a                    a3 = 0
  6897: 33 08                    a1 = 0
  6899: 28 73                    jump @526
      :                          @512
  6901: 55 27 c0 00 0d           jump @514 if a0 >=u 192
      :                          @513
  6906: 33 0a 01                 a3 = 0x1
  6909: 33 0b 80                 a4 = 0xffffffffffffff80
  6912: 28 4a                    jump @523
      :                          @514
  6914: 55 27 e0 00 0e           jump @516 if a0 >=u 224
      :                          @515
  6919: 33 0a 02                 a3 = 0x2
  6922: 33 0b 40 ff              a4 = 0xffffffffffffff40
  6926: 28 3c                    jump @523
      :                          @516
  6928: 55 27 f0 00 0e           jump @518 if a0 >=u 240
      :                          @517
  6933: 33 0a 03                 a3 = 0x3
  6936: 33 0b 20 ff              a4 = 0xffffffffffffff20
  6940: 28 2e                    jump @523
      :                          @518
  6942: 55 27 f8 00 0e           jump @520 if a0 >=u 248
      :                          @519
  6947: 33 0a 04                 a3 = 0x4
  6950: 33 0b 10 ff              a4 = 0xffffffffffffff10
  6954: 28 20                    jump @523
      :                          @520
  6956: 55 27 fc 00 0e           jump @522 if a0 >=u 252
      :                          @521
  6961: 33 0a 05                 a3 = 0x5
  6964: 33 0b 08 ff              a4 = 0xffffffffffffff08
  6968: 28 12                    jump @523
      :                          @522
  6970: 88 7a fe 00              a3 = a0 <u 0xfe
  6974: 33 0b 04 ff              a4 = 0xffffffffffffff04
  6978: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  6982: 85 aa 07                 a3 = a3 ^ 0x7
  6985: 01                       fallthrough
      :                          @523
  6986: ae 8a 2b                 jump @530 if a3 >=u a1
      :                          @524
  6989: 33 08                    a1 = 0
  6991: c8 b7 07                 a0 = a0 + a4
  6994: 64 ab                    a4 = a3
  6996: 01                       fallthrough
      :                          @525
  6997: c8 b9 0c                 a5 = a2 + a4
  7000: 7c cc                    a5 = u8 [a5]
  7002: 97 88 08                 a1 = a1 << 0x8
  7005: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  7008: d4 c8 08                 a1 = a1 | a5
  7011: 52 0b f2                 jump @525 if a4 != 0
      :                          @526
  7014: 8a a9 03                 i32 a2 = a3 << 0x3
  7017: cf 97 07                 a0 = a0 << a2
  7020: c8 87 07                 a0 = a0 + a1
  7023: 32 00                    ret
      :                          @527
  7025: 32 00                    ret
      :                          @528
  7027: 00                       trap
      :                          @529
  7028: 00                       trap
      :                          @530
  7029: 00                       trap
      :                          @531 [@dyn 72]
  7030: 95 11 d0                 sp = sp + 0xffffffffffffffd0
  7033: 7b 10 28                 u64 [sp + 0x28] = ra
  7036: 7b 15 20                 u64 [sp + 0x20] = s0
  7039: 7b 16 18                 u64 [sp + 0x18] = s1
  7042: 64 86                    s1 = a1
  7044: 82 88 28                 a1 = u64 [a1 + 0x28]
  7047: 82 6a 20                 a3 = u64 [s1 + 0x20]
  7050: 82 8b 18                 a4 = u64 [a1 + 0x18]
  7053: 64 75                    s0 = a0
  7055: 33 08 70 01 01           a1 = 0x10170
  7060: 33 09 01                 a2 = 0x1
  7063: 64 a7                    a0 = a3
  7065: b4 b0 02 92 00           ra = 146, jump [a4]
      :                          @532 [@dyn 73]
  7070: 7b 16                    u64 [sp] = s1
  7072: 78 17 08                 u8 [sp + 0x8] = a0
  7075: 46 11 09                 u8 [sp + 9] = 0
  7078: 7b 15 10                 u64 [sp + 0x10] = s0
  7081: 33 09 98 00              a2 = 0x98
  7085: 64 17                    a0 = sp
  7087: 95 18 10                 a1 = sp + 0x10
  7090: 50 20 94 00 e7 fd        ra = 148, jump @490
      :                          @533 [@dyn 74]
  7096: 33 07 01                 a0 = 0x1
  7099: 7c 18 08                 a1 = u8 [sp + 0x8]
  7102: 52 08 1b                 jump @535 if a1 != 0
      :                          @534
  7105: 82 17                    a0 = u64 [sp]
  7107: 82 78 28                 a1 = u64 [a0 + 0x28]
  7110: 82 77 20                 a0 = u64 [a0 + 0x20]
  7113: 82 8a 18                 a3 = u64 [a1 + 0x18]
  7116: 33 08 b1 01 01           a1 = 0x101b1
  7121: 33 09 01                 a2 = 0x1
  7124: b4 a0 02 96 00           ra = 150, jump [a3]
      :                          @535 [@dyn 75]
  7129: 82 10 28                 ra = u64 [sp + 0x28]
  7132: 82 15 20                 s0 = u64 [sp + 0x20]
  7135: 82 16 18                 s1 = u64 [sp + 0x18]
  7138: 95 11 30                 sp = sp + 0x30
  7141: 32 00                    ret
      :                          @536 [@dyn 76]
  7143: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  7147: 7b 10 80 00              u64 [sp + 0x80] = ra
  7151: 80 89 34                 a2 = u32 [a1 + 0x34]
  7154: 82 77                    a0 = u64 [a0]
  7156: 84 9a 10                 a3 = a2 & 0x10
  7159: 52 0a 16                 jump @539 if a3 != 0
      :                          @537
  7162: 84 99 20                 a2 = a2 & 0x20
  7165: 52 09 41                 jump @542 if a2 != 0
      :                          @538
  7168: 7c 77                    a0 = u8 [a0]
  7170: 82 10 80 00              ra = u64 [sp + 0x80]
  7174: 95 11 88 00              sp = sp + 0x88
  7178: 28 97 f5                 jump @336
      :                          @539
  7181: 7c 77                    a0 = u8 [a0]
  7183: 33 0b 81 00              a4 = 0x81
  7187: 95 19 7f                 a2 = sp + 0x7f
  7190: 33 02 57                 t0 = 0x57
  7193: 01                       fallthrough
      :                          @540
  7194: 64 bc                    a5 = a4
  7196: 84 7b 0f                 a4 = a0 & 0xf
  7199: 97 77 38                 a0 = a0 << 0x38
  7202: 98 77 3c                 a0 = a0 >> 0x3c
  7205: 88 b3 0a                 t1 = a4 <u 0xa
  7208: 33 0a 30                 a3 = 0x30
  7211: da 32 0a                 a3 = t0 if t1 == 0
  7214: be ba 0a                 i32 a3 = a3 + a4
  7217: 78 9a                    u8 [a2] = a3
  7219: 95 99 ff                 a2 = a2 + 0xffffffffffffffff
  7222: 95 cb ff                 a4 = a5 + 0xffffffffffffffff
  7225: 52 07 e1                 jump @540 if a0 != 0
      :                          @541
  7228: 28 31                    jump @544
      :                          @542
  7230: 7c 77                    a0 = u8 [a0]
  7232: 33 0b 81 00              a4 = 0x81
  7236: 95 19 7f                 a2 = sp + 0x7f
  7239: 33 02 37                 t0 = 0x37
  7242: 01                       fallthrough
      :                          @543
  7243: 64 bc                    a5 = a4
  7245: 84 7b 0f                 a4 = a0 & 0xf
  7248: 97 77 38                 a0 = a0 << 0x38
  7251: 98 77 3c                 a0 = a0 >> 0x3c
  7254: 88 b3 0a                 t1 = a4 <u 0xa
  7257: 33 0a 30                 a3 = 0x30
  7260: da 32 0a                 a3 = t0 if t1 == 0
  7263: be ba 0a                 i32 a3 = a3 + a4
  7266: 78 9a                    u8 [a2] = a3
  7268: 95 99 ff                 a2 = a2 + 0xffffffffffffffff
  7271: 95 cb ff                 a4 = a5 + 0xffffffffffffffff
  7274: 52 07 e1                 jump @543 if a0 != 0
      :                          @544
  7277: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
  7280: 56 27 80 00 28           jump @547 if a0 >u 128
      :                          @545
  7285: 9a bb 81 00              a4 = 0x81 - a4
  7289: 64 1a                    a3 = sp
  7291: c8 7a 0a                 a3 = a3 + a0
  7294: 33 09 02                 a2 = 0x2
  7297: 64 87                    a0 = a1
  7299: 33 08 b2 01 01           a1 = 0x101b2
  7304: 50 20 9a 00 40 f6        ra = 154, jump @346
      :                          @546 [@dyn 77]
  7310: 82 10 80 00              ra = u64 [sp + 0x80]
  7314: 95 11 88 00              sp = sp + 0x88
  7318: 32 00                    ret
      :                          @547
  7320: 00                       trap
