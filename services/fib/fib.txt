// RO data = 736/736 bytes
// RW data = 16/65616 bytes
// Stack size = 65536 bytes
// RO data = [70, 73, 66, 32, 111, 110, 95, 116, 114, 97, 110, 115, 102, 101, 114, 58, 32, 116, 105, 109, 101, 115, 108, 111, 116, 61, 32, 115, 101, 114, 118, 105, 99, 101, 95, 105, 110, 100, 101, 120, 61, 32, 115, 101, 110, 100, 101, 114, 61, 32, 97, 109, 111, 117, 110, 116, 61, 32, 108, 101, 110, 103, 116, 104, 61, 32, 114, 101, 99, 101, 105, 118, 101, 114, 61, 32, 109, 101, 109, 111, 61, 32, 103, 97, 115, 95, 108, 105, 109, 105, 116, 61, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 26, 0, 1, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 41, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 65, 0, 1, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 49, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 75, 0, 1, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 81, 0, 1, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 70, 73, 66, 32, 111, 110, 95, 116, 114, 97, 110, 115, 102, 101, 114, 32, 103, 97, 115, 58, 32, 103, 111, 116, 32, 32, 40, 114, 101, 99, 111, 114, 100, 101, 100, 32, 97, 116, 32, 107, 101, 121, 32, 52, 41, 0, 0, 0, 208, 0, 1, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 233, 0, 1, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 44, 32, 44, 10, 10, 93, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 112, 97, 114, 115, 101, 95, 97, 99, 99, 117, 109, 117, 108, 97, 116, 101, 95, 97, 114, 103, 115, 32, 115, 116, 97, 114, 116, 95, 97, 100, 100, 114, 101, 115, 115, 61, 92, 2, 1, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 57, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 119, 114, 105, 116, 101, 95, 114, 101, 115, 117, 108, 116, 32, 107, 101, 121, 61, 44, 32, 114, 101, 115, 117, 108, 116, 61, 0, 0, 0, 0, 0, 0, 160, 2, 1, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 177, 2, 1, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0]
// RW data = [75, 89, 134, 56, 214, 197, 109, 52, 128, 128, 128, 128, 128, 128, 128, 128]
// Instructions = 2344
// Code size = 7041 bytes

      :                          @0
     0: 28 ea 01 00 00           jump @34
      :                          @1
     5: 28 55 02 00 00           jump @39
      :                          @2
    10: 28 ba 05                 jump @131
      :                          @3 [@dyn 1]
    13: 95 11 78 ff              sp = sp + 0xffffffffffffff78
    17: 7b 10 80 00              u64 [sp + 0x80] = ra
    21: 80 89 34                 a2 = u32 [a1 + 0x34]
    24: 84 9a 10                 a3 = a2 & 0x10
    27: 52 0a 16                 jump @6 if a3 != 0
      :                          @4
    30: 84 99 20                 a2 = a2 & 0x20
    33: 52 09 40                 jump @9 if a2 != 0
      :                          @5
    36: 80 77                    a0 = u32 [a0]
    38: 82 10 80 00              ra = u64 [sp + 0x80]
    42: 95 11 88 00              sp = sp + 0x88
    46: 28 5c 10                 jump @308
      :                          @6
    49: 81 7b                    a4 = i32 [a0]
    51: 33 09 81 00              a2 = 0x81
    55: 95 17 7f                 a0 = sp + 0x7f
    58: 33 02 57                 t0 = 0x57
    61: 01                       fallthrough
      :                          @7
    62: 64 9c                    a5 = a2
    64: 8b ba 04                 i32 a3 = a4 >> 0x4
    67: 84 bb 0f                 a4 = a4 & 0xf
    70: 88 b3 0a                 t1 = a4 <u 0xa
    73: 33 09 30                 a2 = 0x30
    76: da 32 09                 a2 = t0 if t1 == 0
    79: be b9 09                 i32 a2 = a2 + a4
    82: 78 79                    u8 [a0] = a2
    84: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
    87: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
    90: 64 ab                    a4 = a3
    92: 52 0a e2                 jump @7 if a3 != 0
      :                          @8
    95: 28 30                    jump @11
      :                          @9
    97: 81 7b                    a4 = i32 [a0]
    99: 33 09 81 00              a2 = 0x81
   103: 95 17 7f                 a0 = sp + 0x7f
   106: 33 02 37                 t0 = 0x37
   109: 01                       fallthrough
      :                          @10
   110: 64 9c                    a5 = a2
   112: 8b ba 04                 i32 a3 = a4 >> 0x4
   115: 84 bb 0f                 a4 = a4 & 0xf
   118: 88 b3 0a                 t1 = a4 <u 0xa
   121: 33 09 30                 a2 = 0x30
   124: da 32 09                 a2 = t0 if t1 == 0
   127: be b9 09                 i32 a2 = a2 + a4
   130: 78 79                    u8 [a0] = a2
   132: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   135: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   138: 64 ab                    a4 = a3
   140: 52 0a e2                 jump @10 if a3 != 0
      :                          @11
   143: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
   146: 56 27 80 00 27           jump @14 if a0 >u 128
      :                          @12
   151: 9a 9b 81 00              a4 = 0x81 - a2
   155: 64 1a                    a3 = sp
   157: c8 7a 0a                 a3 = a3 + a0
   160: 33 09 02                 a2 = 0x2
   163: 64 87                    a0 = a1
   165: 33 08 92 01 01           a1 = 0x10192
   170: 50 10 04 07 11           ra = 4, jump @318
      :                          @13 [@dyn 2]
   175: 82 10 80 00              ra = u64 [sp + 0x80]
   179: 95 11 88 00              sp = sp + 0x88
   183: 32 00                    ret
      :                          @14
   185: 00                       trap
      :                          @15 [@dyn 3]
   186: 95 11 78 ff              sp = sp + 0xffffffffffffff78
   190: 7b 10 80 00              u64 [sp + 0x80] = ra
   194: 80 89 34                 a2 = u32 [a1 + 0x34]
   197: 84 9a 10                 a3 = a2 & 0x10
   200: 52 0a 16                 jump @18 if a3 != 0
      :                          @16
   203: 84 99 20                 a2 = a2 & 0x20
   206: 52 09 40                 jump @21 if a2 != 0
      :                          @17
   209: 82 77                    a0 = u64 [a0]
   211: 82 10 80 00              ra = u64 [sp + 0x80]
   215: 95 11 88 00              sp = sp + 0x88
   219: 28 af 0f                 jump @308
      :                          @18
   222: 82 7b                    a4 = u64 [a0]
   224: 33 09 81 00              a2 = 0x81
   228: 95 17 7f                 a0 = sp + 0x7f
   231: 33 02 57                 t0 = 0x57
   234: 01                       fallthrough
      :                          @19
   235: 64 9c                    a5 = a2
   237: 98 ba 04                 a3 = a4 >> 0x4
   240: 84 bb 0f                 a4 = a4 & 0xf
   243: 88 b3 0a                 t1 = a4 <u 0xa
   246: 33 09 30                 a2 = 0x30
   249: da 32 09                 a2 = t0 if t1 == 0
   252: be b9 09                 i32 a2 = a2 + a4
   255: 78 79                    u8 [a0] = a2
   257: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   260: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   263: 64 ab                    a4 = a3
   265: 52 0a e2                 jump @19 if a3 != 0
      :                          @20
   268: 28 30                    jump @23
      :                          @21
   270: 82 7b                    a4 = u64 [a0]
   272: 33 09 81 00              a2 = 0x81
   276: 95 17 7f                 a0 = sp + 0x7f
   279: 33 02 37                 t0 = 0x37
   282: 01                       fallthrough
      :                          @22
   283: 64 9c                    a5 = a2
   285: 98 ba 04                 a3 = a4 >> 0x4
   288: 84 bb 0f                 a4 = a4 & 0xf
   291: 88 b3 0a                 t1 = a4 <u 0xa
   294: 33 09 30                 a2 = 0x30
   297: da 32 09                 a2 = t0 if t1 == 0
   300: be b9 09                 i32 a2 = a2 + a4
   303: 78 79                    u8 [a0] = a2
   305: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   308: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   311: 64 ab                    a4 = a3
   313: 52 0a e2                 jump @22 if a3 != 0
      :                          @23
   316: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
   319: 56 27 80 00 27           jump @26 if a0 >u 128
      :                          @24
   324: 9a 9b 81 00              a4 = 0x81 - a2
   328: 64 1a                    a3 = sp
   330: c8 7a 0a                 a3 = a3 + a0
   333: 33 09 02                 a2 = 0x2
   336: 64 87                    a0 = a1
   338: 33 08 92 01 01           a1 = 0x10192
   343: 50 10 08 5a 10           ra = 8, jump @318
      :                          @25 [@dyn 4]
   348: 82 10 80 00              ra = u64 [sp + 0x80]
   352: 95 11 88 00              sp = sp + 0x88
   356: 32 00                    ret
      :                          @26
   358: 00                       trap
      :                          @27 [@dyn 5]
   359: 95 11 c8                 sp = sp + 0xffffffffffffffc8
   362: 7b 10 30                 u64 [sp + 0x30] = ra
   365: 7b 15 28                 u64 [sp + 0x28] = s0
   368: 7b 16 20                 u64 [sp + 0x20] = s1
   371: 64 86                    s1 = a1
   373: 82 88 28                 a1 = u64 [a1 + 0x28]
   376: 82 6a 20                 a3 = u64 [s1 + 0x20]
   379: 82 8b 18                 a4 = u64 [a1 + 0x18]
   382: 64 75                    s0 = a0
   384: 33 08 50 01 01           a1 = 0x10150
   389: 33 09 01                 a2 = 0x1
   392: 64 a7                    a0 = a3
   394: b4 b0 01 0c              ra = 12, jump [a4]
      :                          @28 [@dyn 6]
   398: 7b 16 08                 u64 [sp + 0x8] = s1
   401: 78 17 10                 u8 [sp + 0x10] = a0
   404: 46 11 11                 u8 [sp + 17] = 0
   407: 33 06 80 00              s1 = 0x80
   411: 33 07 92 00              a0 = 0x92
   415: 7b 17                    u64 [sp] = a0
   417: 01                       fallthrough
      :                          @29
   418: 7b 15 18                 u64 [sp + 0x18] = s0
   421: 95 17 08                 a0 = sp + 0x8
   424: 95 18 18                 a1 = sp + 0x18
   427: 82 19                    a2 = u64 [sp]
   429: 50 10 0e d4 16           ra = 14, jump @462
      :                          @30 [@dyn 7]
   434: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
   437: 95 55 01                 s0 = s0 + 0x1
   440: 52 06 ea                 jump @29 if s1 != 0
      :                          @31
   443: 7c 18 10                 a1 = u8 [sp + 0x10]
   446: 33 07 01                 a0 = 0x1
   449: 52 08 1b                 jump @33 if a1 != 0
      :                          @32
   452: 82 17 08                 a0 = u64 [sp + 0x8]
   455: 82 78 28                 a1 = u64 [a0 + 0x28]
   458: 82 77 20                 a0 = u64 [a0 + 0x20]
   461: 82 8a 18                 a3 = u64 [a1 + 0x18]
   464: 33 08 91 01 01           a1 = 0x10191
   469: 33 09 01                 a2 = 0x1
   472: b4 a0 01 10              ra = 16, jump [a3]
      :                          @33 [@dyn 8]
   476: 82 10 30                 ra = u64 [sp + 0x30]
   479: 82 15 28                 s0 = u64 [sp + 0x28]
   482: 82 16 20                 s1 = u64 [sp + 0x20]
   485: 95 11 38                 sp = sp + 0x38
   488: 32 00                    ret
      :                          @34 [export #0: 'refine']
   490: 95 11 e8                 sp = sp + 0xffffffffffffffe8
   493: 7b 10 10                 u64 [sp + 0x10] = ra
   496: 7b 15 08                 u64 [sp + 0x8] = s0
   499: 7b 16                    u64 [sp] = s1
   501: 33 05 34 00 03           s0 = 0x30034
   506: 33 09 0c                 a2 = 0xc
   509: 33 0a 05                 a3 = 0x5
   512: 33 07 34 00 03           a0 = 0x30034
   517: 33 08                    a1 = 0
   519: 33 0b                    a4 = 0
   521: 33 0c                    a5 = 0
   523: 0a 12                    ecalli 18 // 'fetch'
   525: 01                       fallthrough
      :                          @35
   526: 51 17 ff 1b              jump @37 if a0 == 4294967295
      :                          @36
   530: 39 07 38 00 03           a0 = i32 [0x30038]
   535: 39 08 3c 00 03           a1 = i32 [0x3003c]
   540: 39 09 34 00 03           a2 = i32 [0x30034]
   545: be 78 08                 i32 a1 = a1 + a0
   548: 83 99 01                 i32 a2 = a2 + 0x1
   551: 28 0b                    jump @38
      :                          @37
   553: 33 07                    a0 = 0
   555: 33 09 01                 a2 = 0x1
   558: 33 08 01                 a1 = 0x1
   561: 01                       fallthrough
      :                          @38
   562: 3d 09 34 00 03           u32 [0x30034] = a2
   567: 3d 08 38 00 03           u32 [0x30038] = a1
   572: 3d 07 3c 00 03           u32 [0x3003c] = a0
   577: 33 08 0c                 a1 = 0xc
   580: 64 57                    a0 = s0
   582: 0a 13                    ecalli 19 // 'export'
   584: 33 08 0c                 a1 = 0xc
   587: 64 57                    a0 = s0
   589: 82 10 10                 ra = u64 [sp + 0x10]
   592: 82 15 08                 s0 = u64 [sp + 0x8]
   595: 82 16                    s1 = u64 [sp]
   597: 95 11 18                 sp = sp + 0x18
   600: 32 00                    ret
      :                          @39 [export #1: 'accumulate']
   602: 95 11 60 ff              sp = sp + 0xffffffffffffff60
   606: 7b 10 98 00              u64 [sp + 0x98] = ra
   610: 7b 15 90 00              u64 [sp + 0x90] = s0
   614: 7b 16 88 00              u64 [sp + 0x88] = s1
   618: 7b 17 10                 u64 [sp + 0x10] = a0
   621: 7b 18 18                 u64 [sp + 0x18] = a1
   624: 51 08 8d 02              jump @108 if a1 == 0
      :                          @40
   628: 7b 17 08                 u64 [sp + 0x8] = a0
   631: 7b 18                    u64 [sp] = a1
   633: 95 17 10                 a0 = sp + 0x10
   636: 7b 17 68                 u64 [sp + 0x68] = a0
   639: 33 07 52                 a0 = 0x52
   642: 7b 17 70                 u64 [sp + 0x70] = a0
   645: 95 18 18                 a1 = sp + 0x18
   648: 7b 18 78                 u64 [sp + 0x78] = a1
   651: 7b 17 80 00              u64 [sp + 0x80] = a0
   655: 33 07 80 02 01           a0 = 0x10280
   660: 7b 17 38                 u64 [sp + 0x38] = a0
   663: 49 11 40 02              u64 [sp + 64] = 0x2
   667: 49 11 58                 u64 [sp + 88] = 0
   670: 95 18 68                 a1 = sp + 0x68
   673: 7b 18 48                 u64 [sp + 0x48] = a1
   676: 49 11 50 02              u64 [sp + 80] = 0x2
   680: 95 17 20                 a0 = sp + 0x20
   683: 95 18 38                 a1 = sp + 0x38
   686: 50 10 12 af 0a           ra = 18, jump @237
      :                          @41 [@dyn 9]
   691: 82 16 28                 s1 = u64 [sp + 0x28]
   694: 82 1b 30                 a4 = u64 [sp + 0x30]
   697: 82 15 20                 s0 = u64 [sp + 0x20]
   700: 33 07 02                 a0 = 0x2
   703: 33 08                    a1 = 0
   705: 33 09                    a2 = 0
   707: 64 6a                    a3 = s1
   709: 33 00 14                 ra = 0x14
   712: 0a 64                    ecalli 100 // 'log'
   714: 01                       fallthrough
      :                          @42 [@dyn 10]
   715: 95 58 ff ff fe           a1 = s0 + 0xfffffffffffeffff
   720: 53 38 00 00 ff 27        jump @48 if a1 <u 4294901760
      :                          @43
   726: 33 07 40 00 03           a0 = 0x30040
   731: 95 77 00 00 01           a0 = a0 + 0x10000
   736: 01                       fallthrough
      :                          @44
   737: 82 78                    a1 = u64 [a0]
   739: c9 87 09                 a2 = a0 - a1
   742: ab 69 11                 jump @48 if a2 != s1
      :                          @45
   745: c9 58 09                 a2 = a1 - s0
   748: 01                       fallthrough
      :                          @46
   749: 82 7a                    a3 = u64 [a0]
   751: ab 8a f2                 jump @44 if a3 != a1
      :                          @47
   754: 7b 79                    u64 [a0] = a2
   756: 33 0b                    a4 = 0
   758: 01                       fallthrough
      :                          @48
   759: 82 17 08                 a0 = u64 [sp + 0x8]
   762: 7d 78                    a1 = i8 [a0]
   764: 33 06 01                 s1 = 0x1
   767: 59 08 37                 jump @55 if a1 >=s 0
      :                          @49
   770: 84 89 ff 00              a2 = a1 & 0xff
   774: 33 06 02                 s1 = 0x2
   777: 53 29 c0 00 2d           jump @55 if a2 <u 192
      :                          @50
   782: 33 06 03                 s1 = 0x3
   785: 53 29 e0 00 25           jump @55 if a2 <u 224
      :                          @51
   790: 33 06 04                 s1 = 0x4
   793: 53 29 f0 00 1d           jump @55 if a2 <u 240
      :                          @52
   798: 33 06 05                 s1 = 0x5
   801: 53 29 f8 00 15           jump @55 if a2 <u 248
      :                          @53
   806: 33 06 06                 s1 = 0x6
   809: 53 29 fc 00 0d           jump @55 if a2 <u 252
      :                          @54
   814: 88 98 fe 00              a1 = a2 <u 0xfe
   818: 9a 86 08                 s1 = 0x8 - a1
   821: 01                       fallthrough
      :                          @55
   822: 82 15                    s0 = u64 [sp]
   824: ac 65 c5 01              jump @108 if s0 <u s1
      :                          @56
   828: 64 68                    a1 = s1
   830: 50 10 16 82 16           ra = 22, jump @479
      :                          @57 [@dyn 11]
   835: 82 17 08                 a0 = u64 [sp + 0x8]
   838: aa 65 b7 01              jump @108 if s0 == s1
      :                          @58
   842: c8 67 07                 a0 = a0 + s1
   845: 7d 78                    a1 = i8 [a0]
   847: c9 65 05                 s0 = s0 - s1
   850: 33 06 01                 s1 = 0x1
   853: 59 08 37                 jump @65 if a1 >=s 0
      :                          @59
   856: 84 89 ff 00              a2 = a1 & 0xff
   860: 33 06 02                 s1 = 0x2
   863: 53 29 c0 00 2d           jump @65 if a2 <u 192
      :                          @60
   868: 33 06 03                 s1 = 0x3
   871: 53 29 e0 00 25           jump @65 if a2 <u 224
      :                          @61
   876: 33 06 04                 s1 = 0x4
   879: 53 29 f0 00 1d           jump @65 if a2 <u 240
      :                          @62
   884: 33 06 05                 s1 = 0x5
   887: 53 29 f8 00 15           jump @65 if a2 <u 248
      :                          @63
   892: 33 06 06                 s1 = 0x6
   895: 53 29 fc 00 0d           jump @65 if a2 <u 252
      :                          @64
   900: 88 98 fe 00              a1 = a2 <u 0xfe
   904: 9a 86 08                 s1 = 0x8 - a1
   907: 01                       fallthrough
      :                          @65
   908: ac 65 71 01              jump @108 if s0 <u s1
      :                          @66
   912: 64 68                    a1 = s1
   914: 7b 17 08                 u64 [sp + 0x8] = a0
   917: 50 10 18 2b 16           ra = 24, jump @479
      :                          @67 [@dyn 12]
   922: 82 17 08                 a0 = u64 [sp + 0x8]
   925: c8 67 07                 a0 = a0 + s1
   928: c9 65 0a                 a3 = s0 - s1
   931: 7b 1a 08                 u64 [sp + 0x8] = a3
   934: ab 65 07                 jump @69 if s0 != s1
      :                          @68
   937: 33 06                    s1 = 0
   939: 28 42                    jump @77
      :                          @69
   941: 7d 78                    a1 = i8 [a0]
   943: 33 06 01                 s1 = 0x1
   946: 59 08 37                 jump @76 if a1 >=s 0
      :                          @70
   949: 84 89 ff 00              a2 = a1 & 0xff
   953: 33 06 02                 s1 = 0x2
   956: 53 29 c0 00 2d           jump @76 if a2 <u 192
      :                          @71
   961: 33 06 03                 s1 = 0x3
   964: 53 29 e0 00 25           jump @76 if a2 <u 224
      :                          @72
   969: 33 06 04                 s1 = 0x4
   972: 53 29 f0 00 1d           jump @76 if a2 <u 240
      :                          @73
   977: 33 06 05                 s1 = 0x5
   980: 53 29 f8 00 15           jump @76 if a2 <u 248
      :                          @74
   985: 33 06 06                 s1 = 0x6
   988: 53 29 fc 00 0d           jump @76 if a2 <u 252
      :                          @75
   993: 88 98 fe 00              a1 = a2 <u 0xfe
   997: 9a 86 08                 s1 = 0x8 - a1
  1000: 01                       fallthrough
      :                          @76
  1001: ac 6a 14 01              jump @108 if a3 <u s1
      :                          @77
  1005: 64 68                    a1 = s1
  1007: 64 75                    s0 = a0
  1009: 50 10 1a cf 15           ra = 26, jump @479
      :                          @78 [@dyn 13]
  1014: 51 07 07 01              jump @108 if a0 == 0
      :                          @79
  1018: 82 17 08                 a0 = u64 [sp + 0x8]
  1021: e4 67 07                 a0 = maxu(a0, s1)
  1024: c9 67 07                 a0 = a0 - s1
  1027: 53 17 60 fa 00           jump @108 if a0 <u 96
      :                          @80
  1032: c8 56 08                 a1 = s1 + s0
  1035: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
  1038: 95 87 60                 a0 = a1 + 0x60
  1041: 7b 17 08                 u64 [sp + 0x8] = a0
  1044: 51 06 4c                 jump @91 if s1 == 0
      :                          @81
  1047: 7d 78                    a1 = i8 [a0]
  1049: 33 05 01                 s0 = 0x1
  1052: 59 08 37                 jump @88 if a1 >=s 0
      :                          @82
  1055: 84 89 ff 00              a2 = a1 & 0xff
  1059: 33 05 02                 s0 = 0x2
  1062: 53 29 c0 00 2d           jump @88 if a2 <u 192
      :                          @83
  1067: 33 05 03                 s0 = 0x3
  1070: 53 29 e0 00 25           jump @88 if a2 <u 224
      :                          @84
  1075: 33 05 04                 s0 = 0x4
  1078: 53 29 f0 00 1d           jump @88 if a2 <u 240
      :                          @85
  1083: 33 05 05                 s0 = 0x5
  1086: 53 29 f8 00 15           jump @88 if a2 <u 248
      :                          @86
  1091: 33 05 06                 s0 = 0x6
  1094: 53 29 fc 00 0d           jump @88 if a2 <u 252
      :                          @87
  1099: 88 98 fe 00              a1 = a2 <u 0xfe
  1103: 9a 85 08                 s0 = 0x8 - a1
  1106: 01                       fallthrough
      :                          @88
  1107: ac 56 6d 01              jump @127 if s1 <u s0
      :                          @89
  1111: 64 58                    a1 = s0
  1113: 50 10 1c 67 15           ra = 28, jump @479
      :                          @90 [@dyn 14]
  1118: 28 07                    jump @92
      :                          @91
  1120: 33 05                    s0 = 0
  1122: 33 07                    a0 = 0
  1124: 01                       fallthrough
      :                          @92
  1125: e4 56 08                 a1 = maxu(s1, s0)
  1128: c9 58 08                 a1 = a1 - s0
  1131: e4 78 08                 a1 = maxu(a1, a0)
  1134: c9 78 08                 a1 = a1 - a0
  1137: 33 09 20                 a2 = 0x20
  1140: ac 98 89 00              jump @108 if a1 <u a2
      :                          @93
  1144: 82 19 08                 a2 = u64 [sp + 0x8]
  1147: c8 95 05                 s0 = s0 + a2
  1150: c8 57 07                 a0 = a0 + s0
  1153: 95 85 e0                 s0 = a1 + 0xffffffffffffffe0
  1156: 95 77 20                 a0 = a0 + 0x20
  1159: 7b 17 08                 u64 [sp + 0x8] = a0
  1162: 51 05 4c                 jump @104 if s0 == 0
      :                          @94
  1165: 7d 78                    a1 = i8 [a0]
  1167: 33 06 01                 s1 = 0x1
  1170: 59 08 37                 jump @101 if a1 >=s 0
      :                          @95
  1173: 84 89 ff 00              a2 = a1 & 0xff
  1177: 33 06 02                 s1 = 0x2
  1180: 53 29 c0 00 2d           jump @101 if a2 <u 192
      :                          @96
  1185: 33 06 03                 s1 = 0x3
  1188: 53 29 e0 00 25           jump @101 if a2 <u 224
      :                          @97
  1193: 33 06 04                 s1 = 0x4
  1196: 53 29 f0 00 1d           jump @101 if a2 <u 240
      :                          @98
  1201: 33 06 05                 s1 = 0x5
  1204: 53 29 f8 00 15           jump @101 if a2 <u 248
      :                          @99
  1209: 33 06 06                 s1 = 0x6
  1212: 53 29 fc 00 0d           jump @101 if a2 <u 252
      :                          @100
  1217: 88 98 fe 00              a1 = a2 <u 0xfe
  1221: 9a 86 08                 s1 = 0x8 - a1
  1224: 01                       fallthrough
      :                          @101
  1225: ac 65 f8 00              jump @128 if s0 <u s1
      :                          @102
  1229: 64 68                    a1 = s1
  1231: 50 10 1e f1 14           ra = 30, jump @479
      :                          @103 [@dyn 15]
  1236: 28 05                    jump @105
      :                          @104
  1238: 33 06                    s1 = 0
  1240: 01                       fallthrough
      :                          @105
  1241: ae 56 24                 jump @108 if s1 >=u s0
      :                          @106
  1244: 82 17 08                 a0 = u64 [sp + 0x8]
  1247: c8 67 07                 a0 = a0 + s1
  1250: 7c 78                    a1 = u8 [a0]
  1252: 51 08 35                 jump @110 if a1 == 0
      :                          @107
  1255: 46 11 38                 u8 [sp + 56] = 0
  1258: 95 17 38                 a0 = sp + 0x38
  1261: 33 08 01                 a1 = 0x1
  1264: 33 09                    a2 = 0
  1266: 33 0a                    a3 = 0
  1268: 0a 03                    ecalli 3 // 'write'
  1270: 33 08                    a1 = 0
  1272: 33 05                    s0 = 0
  1274: 28 af 00                 jump @125
      :                          @108
  1277: 33 08                    a1 = 0
  1279: 33 06 00 00 01           s1 = 0x10000
  1284: 01                       fallthrough
      :                          @109
  1285: 64 67                    a0 = s1
  1287: 82 10 98 00              ra = u64 [sp + 0x98]
  1291: 82 15 90 00              s0 = u64 [sp + 0x90]
  1295: 82 16 88 00              s1 = u64 [sp + 0x88]
  1299: 95 11 a0 00              sp = sp + 0xa0
  1303: 32 00                    ret
      :                          @110
  1305: e4 65 08                 a1 = maxu(s0, s1)
  1308: c9 68 08                 a1 = a1 - s1
  1311: 95 76 01                 s1 = a0 + 0x1
  1314: 33 07 01                 a0 = 0x1
  1317: e4 78 07                 a0 = maxu(a1, a0)
  1320: 33 09 02                 a2 = 0x2
  1323: 95 7a ff                 a3 = a0 + 0xffffffffffffffff
  1326: ae 98 09                 jump @112 if a1 >=u a2
      :                          @111
  1329: 33 05                    s0 = 0
  1331: 33 07                    a0 = 0
  1333: 28 51                    jump @122
      :                          @112
  1335: 7d 67                    a0 = i8 [s1]
  1337: 33 05 01                 s0 = 0x1
  1340: 59 07 37                 jump @119 if a0 >=s 0
      :                          @113
  1343: 84 77 ff 00              a0 = a0 & 0xff
  1347: 33 05 02                 s0 = 0x2
  1350: 53 27 c0 00 2d           jump @119 if a0 <u 192
      :                          @114
  1355: 33 05 03                 s0 = 0x3
  1358: 53 27 e0 00 25           jump @119 if a0 <u 224
      :                          @115
  1363: 33 05 04                 s0 = 0x4
  1366: 53 27 f0 00 1d           jump @119 if a0 <u 240
      :                          @116
  1371: 33 05 05                 s0 = 0x5
  1374: 53 27 f8 00 15           jump @119 if a0 <u 248
      :                          @117
  1379: 33 05 06                 s0 = 0x6
  1382: 53 27 fc 00 0d           jump @119 if a0 <u 252
      :                          @118
  1387: 88 77 fe 00              a0 = a0 <u 0xfe
  1391: 9a 75 08                 s0 = 0x8 - a0
  1394: 01                       fallthrough
      :                          @119
  1395: 7b 1a 08                 u64 [sp + 0x8] = a3
  1398: ac 5a 4d                 jump @130 if a3 <u s0
      :                          @120
  1401: 64 67                    a0 = s1
  1403: 64 58                    a1 = s0
  1405: 50 10 20 43 14           ra = 32, jump @479
      :                          @121 [@dyn 16]
  1410: 82 1a 08                 a3 = u64 [sp + 0x8]
  1413: 01                       fallthrough
      :                          @122
  1414: c8 56 09                 a2 = s1 + s0
  1417: e4 5a 08                 a1 = maxu(a3, s0)
  1420: c9 58 08                 a1 = a1 - s0
  1423: e6 78 05                 s0 = minu(a1, a0)
  1426: 46 11 38                 u8 [sp + 56] = 0
  1429: 95 17 38                 a0 = sp + 0x38
  1432: 33 08 01                 a1 = 0x1
  1435: 64 96                    s1 = a2
  1437: 64 5a                    a3 = s0
  1439: 0a 03                    ecalli 3 // 'write'
  1441: 01                       fallthrough
      :                          @123
  1442: 55 15 21 20              jump @129 if s0 >=u 33
      :                          @124
  1446: 64 68                    a1 = s1
  1448: 01                       fallthrough
      :                          @125
  1449: 33 06 11 00 03           s1 = 0x30011
  1454: 33 07 11 00 03           a0 = 0x30011
  1459: 64 59                    a2 = s0
  1461: 50 10 22 1c 0a           ra = 34, jump @287
      :                          @126 [@dyn 17]
  1466: 33 08 20                 a1 = 0x20
  1469: 28 48 ff                 jump @109
      :                          @127
  1472: 00                       trap
      :                          @128
  1473: 00                       trap
      :                          @129
  1474: 00                       trap
      :                          @130
  1475: 00                       trap
      :                          @131 [export #2: 'on_transfer']
  1476: 95 11 70 fd              sp = sp + 0xfffffffffffffd70
  1480: 7b 10 88 02              u64 [sp + 0x288] = ra
  1484: 7b 15 80 02              u64 [sp + 0x280] = s0
  1488: 7b 16 78 02              u64 [sp + 0x278] = s1
  1492: 64 8c                    a5 = a1
  1494: 64 79                    a2 = a0
  1496: 33 02                    t0 = 0
  1498: 95 7b 04                 a4 = a0 + 0x4
  1501: 33 07 02                 a0 = 0x2
  1504: 7b 17 28                 u64 [sp + 0x28] = a0
  1507: 33 07 06                 a0 = 0x6
  1510: 7b 17 58                 u64 [sp + 0x58] = a0
  1513: 33 07 0a                 a0 = 0xa
  1516: 7b 17 20                 u64 [sp + 0x20] = a0
  1519: 33 07 60 00 01           a0 = 0x10060
  1524: 7b 17 18                 u64 [sp + 0x18] = a0
  1527: 33 07 8a 00              a0 = 0x8a
  1531: 7b 17 10                 u64 [sp + 0x10] = a0
  1534: 33 07 c0 02 01           a0 = 0x102c0
  1539: 7b 17 08                 u64 [sp + 0x8] = a0
  1542: 33 07 40 00 03           a0 = 0x30040
  1547: 95 77 00 00 01           a0 = a0 + 0x10000
  1552: 7b 17 50                 u64 [sp + 0x50] = a0
  1555: 33 07 00 01 01           a0 = 0x10100
  1560: 7b 17                    u64 [sp] = a0
  1562: 95 97 08                 a0 = a2 + 0x8
  1565: 95 ca f8                 a3 = a5 + 0xfffffffffffffff8
  1568: 95 98 0c                 a1 = a2 + 0xc
  1571: 7b 18 60                 u64 [sp + 0x60] = a1
  1574: 33 08 08                 a1 = 0x8
  1577: 33 06 ff ff fe           s1 = 0xfffffffffffeffff
  1582: 7b 16 48                 u64 [sp + 0x48] = s1
  1585: 7b 17 c0 00              u64 [sp + 0xc0] = a0
  1589: 7b 17 b8 00              u64 [sp + 0xb8] = a0
  1593: 7b 1c 40                 u64 [sp + 0x40] = a5
  1596: 7b 19 38                 u64 [sp + 0x38] = a2
  1599: 7b 1b 30                 u64 [sp + 0x30] = a4
  1602: 7b 1a a8 00              u64 [sp + 0xa8] = a3
  1606: ac 8c c0 04              jump @179 if a5 <u a1
      :                          @132
  1610: 51 09 d5 04              jump @180 if a2 == 0
      :                          @133
  1614: 51 0b d1 04              jump @180 if a4 == 0
      :                          @134
  1618: 7c 97                    a0 = u8 [a2]
  1620: 7b 17 78                 u64 [sp + 0x78] = a0
  1623: 7c 97 01                 a0 = u8 [a2 + 0x1]
  1626: 7b 17 68                 u64 [sp + 0x68] = a0
  1629: 7c 97 02                 a0 = u8 [a2 + 0x2]
  1632: 7b 17 70                 u64 [sp + 0x70] = a0
  1635: 7c 97 03                 a0 = u8 [a2 + 0x3]
  1638: 7b 17 80 00              u64 [sp + 0x80] = a0
  1642: 7c b7                    a0 = u8 [a4]
  1644: 7b 17 98 00              u64 [sp + 0x98] = a0
  1648: 7c b7 01                 a0 = u8 [a4 + 0x1]
  1651: 7b 17 88 00              u64 [sp + 0x88] = a0
  1655: 7c b7 02                 a0 = u8 [a4 + 0x2]
  1658: 7b 17 90 00              u64 [sp + 0x90] = a0
  1662: 7c b7 03                 a0 = u8 [a4 + 0x3]
  1665: 7b 17 a0 00              u64 [sp + 0xa0] = a0
  1669: 51 0a 53                 jump @144 if a3 == 0
      :                          @135
  1672: 82 17 c0 00              a0 = u64 [sp + 0xc0]
  1676: 7d 77                    a0 = i8 [a0]
  1678: 33 05 01                 s0 = 0x1
  1681: 59 07 4a                 jump @145 if a0 >=s 0
      :                          @136
  1684: 84 77 ff 00              a0 = a0 & 0xff
  1688: 33 05 02                 s0 = 0x2
  1691: 33 06 c0 00              s1 = 0xc0
  1695: ac 67 33                 jump @142 if a0 <u s1
      :                          @137
  1698: 33 05 03                 s0 = 0x3
  1701: 33 06 e0 00              s1 = 0xe0
  1705: ac 67 29                 jump @142 if a0 <u s1
      :                          @138
  1708: 33 05 04                 s0 = 0x4
  1711: 33 06 f0 00              s1 = 0xf0
  1715: ac 67 1f                 jump @142 if a0 <u s1
      :                          @139
  1718: 33 05 05                 s0 = 0x5
  1721: 33 06 f8 00              s1 = 0xf8
  1725: ac 67 15                 jump @142 if a0 <u s1
      :                          @140
  1728: 33 05 06                 s0 = 0x6
  1731: 33 06 fc 00              s1 = 0xfc
  1735: ac 67 0b                 jump @142 if a0 <u s1
      :                          @141
  1738: 88 77 fe 00              a0 = a0 <u 0xfe
  1742: 9a 75 08                 s0 = 0x8 - a0
  1745: 01                       fallthrough
      :                          @142
  1746: ae 5a 09                 jump @145 if a3 >=u s0
      :                          @143
  1749: 28 31 04                 jump @179
      :                          @144
  1752: 33 05                    s0 = 0
  1754: 01                       fallthrough
      :                          @145
  1755: 82 17 c0 00              a0 = u64 [sp + 0xc0]
  1759: 64 58                    a1 = s0
  1761: 7b 12 b0 00              u64 [sp + 0xb0] = t0
  1765: 50 10 24 db 12           ra = 36, jump @479
      :                          @146 [@dyn 18]
  1770: 33 03 98 00              t1 = 0x98
  1774: 33 02 04                 t0 = 0x4
  1777: 33 06 08                 s1 = 0x8
  1780: 82 1c a8 00              a5 = u64 [sp + 0xa8]
  1784: 82 1b b0 00              a4 = u64 [sp + 0xb0]
  1788: ae 7b 0a 04              jump @179 if a4 >=u a0
      :                          @147
  1792: 82 18 68                 a1 = u64 [sp + 0x68]
  1795: 97 88 08                 a1 = a1 << 0x8
  1798: 82 19 78                 a2 = u64 [sp + 0x78]
  1801: d4 98 08                 a1 = a1 | a2
  1804: 82 19 70                 a2 = u64 [sp + 0x70]
  1807: 97 99 10                 a2 = a2 << 0x10
  1810: 82 1a 80 00              a3 = u64 [sp + 0x80]
  1814: 97 aa 18                 a3 = a3 << 0x18
  1817: d4 a9 09                 a2 = a2 | a3
  1820: d4 89 04                 t2 = a2 | a1
  1823: 82 18 88 00              a1 = u64 [sp + 0x88]
  1827: 97 88 08                 a1 = a1 << 0x8
  1830: 82 19 98 00              a2 = u64 [sp + 0x98]
  1834: d4 98 08                 a1 = a1 | a2
  1837: 82 19 90 00              a2 = u64 [sp + 0x90]
  1841: 97 99 10                 a2 = a2 << 0x10
  1844: 82 1a a0 00              a3 = u64 [sp + 0xa0]
  1848: 97 aa 18                 a3 = a3 << 0x18
  1851: d4 a9 09                 a2 = a2 | a3
  1854: d4 89 00                 ra = a2 | a1
  1857: e4 5c 08                 a1 = maxu(a5, s0)
  1860: c9 58 08                 a1 = a1 - s0
  1863: 82 19 b8 00              a2 = u64 [sp + 0xb8]
  1867: c8 59 09                 a2 = a2 + s0
  1870: 82 1a 60                 a3 = u64 [sp + 0x60]
  1873: c8 a5 05                 s0 = s0 + a3
  1876: 64 ba                    a3 = a4
  1878: 01                       fallthrough
      :                          @148
  1879: ac 68 af 03              jump @179 if a1 <u s1
      :                          @149
  1883: aa 25 c4 03              jump @180 if s0 == t0
      :                          @150
  1887: 51 05 c0 03              jump @180 if s0 == 0
      :                          @151
  1891: ac 38 a3 03              jump @179 if a1 <u t1
      :                          @152
  1895: 51 0a 17                 jump @155 if a3 == 0
      :                          @153
  1898: 95 88 68 ff              a1 = a1 + 0xffffffffffffff68
  1902: 95 55 98 00              s0 = s0 + 0x98
  1906: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  1909: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  1912: 52 07 df                 jump @148 if a0 != 0
      :                          @154
  1915: 28 8b 03                 jump @179
      :                          @155
  1918: 7c 97 01                 a0 = u8 [a2 + 0x1]
  1921: 7c 98                    a1 = u8 [a2]
  1923: 7c 9a 02                 a3 = u8 [a2 + 0x2]
  1926: 7d 9b 03                 a4 = i8 [a2 + 0x3]
  1929: 8a 77 08                 i32 a0 = a0 << 0x8
  1932: d4 87 07                 a0 = a0 | a1
  1935: 8a a8 10                 i32 a1 = a3 << 0x10
  1938: 8a ba 18                 i32 a3 = a4 << 0x18
  1941: d4 a8 08                 a1 = a1 | a3
  1944: d4 87 07                 a0 = a0 | a1
  1947: 7b 17 a0 00              u64 [sp + 0xa0] = a0
  1951: 7c 57 01                 a0 = u8 [s0 + 0x1]
  1954: 7c 58                    a1 = u8 [s0]
  1956: 7c 5a 02                 a3 = u8 [s0 + 0x2]
  1959: 7d 5b 03                 a4 = i8 [s0 + 0x3]
  1962: 8a 77 08                 i32 a0 = a0 << 0x8
  1965: d4 87 07                 a0 = a0 | a1
  1968: 8a a8 10                 i32 a1 = a3 << 0x10
  1971: 8a ba 18                 i32 a3 = a4 << 0x18
  1974: d4 a8 08                 a1 = a1 | a3
  1977: 7c 9a 0f                 a3 = u8 [a2 + 0xf]
  1980: 7c 9b 0e                 a4 = u8 [a2 + 0xe]
  1983: d4 87 07                 a0 = a0 | a1
  1986: 7b 17 98 00              u64 [sp + 0x98] = a0
  1990: 7c 97 0d                 a0 = u8 [a2 + 0xd]
  1993: 97 aa 10                 a3 = a3 << 0x10
  1996: 97 bb 08                 a4 = a4 << 0x8
  1999: d4 ba 0a                 a3 = a3 | a4
  2002: 7c 98 0c                 a1 = u8 [a2 + 0xc]
  2005: 7c 9b 0b                 a4 = u8 [a2 + 0xb]
  2008: d4 a7 07                 a0 = a0 | a3
  2011: 97 77 10                 a0 = a0 << 0x10
  2014: 97 88 08                 a1 = a1 << 0x8
  2017: d4 b8 08                 a1 = a1 | a4
  2020: 7c 9a 0a                 a3 = u8 [a2 + 0xa]
  2023: 7c 9b 09                 a4 = u8 [a2 + 0x9]
  2026: d4 87 07                 a0 = a0 | a1
  2029: 97 77 10                 a0 = a0 << 0x10
  2032: 97 aa 08                 a3 = a3 << 0x8
  2035: d4 ba 0a                 a3 = a3 | a4
  2038: d4 a7 07                 a0 = a0 | a3
  2041: 7c 98 08                 a1 = u8 [a2 + 0x8]
  2044: 97 77 08                 a0 = a0 << 0x8
  2047: 7c 9a 97 00              a3 = u8 [a2 + 0x97]
  2051: 7c 9b 96 00              a4 = u8 [a2 + 0x96]
  2055: d4 87 07                 a0 = a0 | a1
  2058: 7b 17 90 00              u64 [sp + 0x90] = a0
  2062: 7c 97 95 00              a0 = u8 [a2 + 0x95]
  2066: 97 aa 10                 a3 = a3 << 0x10
  2069: 97 bb 08                 a4 = a4 << 0x8
  2072: d4 ba 0a                 a3 = a3 | a4
  2075: d4 a7 07                 a0 = a0 | a3
  2078: 7c 9a 94 00              a3 = u8 [a2 + 0x94]
  2082: 7c 9b 93 00              a4 = u8 [a2 + 0x93]
  2086: 95 98 10                 a1 = a2 + 0x10
  2089: 97 77 10                 a0 = a0 << 0x10
  2092: 97 aa 08                 a3 = a3 << 0x8
  2095: d4 ba 0a                 a3 = a3 | a4
  2098: 7c 9b 92 00              a4 = u8 [a2 + 0x92]
  2102: d4 a7 07                 a0 = a0 | a3
  2105: 7c 9a 91 00              a3 = u8 [a2 + 0x91]
  2109: 97 77 10                 a0 = a0 << 0x10
  2112: 97 bb 08                 a4 = a4 << 0x8
  2115: 7c 99 90 00              a2 = u8 [a2 + 0x90]
  2119: d4 ba 0a                 a3 = a3 | a4
  2122: d4 a7 07                 a0 = a0 | a3
  2125: 97 77 08                 a0 = a0 << 0x8
  2128: d4 97 07                 a0 = a0 | a2
  2131: 7b 17 88 00              u64 [sp + 0x88] = a0
  2135: 95 17 68 01              a0 = sp + 0x168
  2139: 33 09 80 00              a2 = 0x80
  2143: 64 45                    s0 = t2
  2145: 64 06                    s1 = ra
  2147: 50 10 26 6e 07           ra = 38, jump @287
      :                          @156 [@dyn 19]
  2152: 95 17 e0 00              a0 = sp + 0xe0
  2156: 95 18 68 01              a1 = sp + 0x168
  2160: 33 09 80 00              a2 = 0x80
  2164: 50 10 28 5d 07           ra = 40, jump @287
      :                          @157 [@dyn 20]
  2169: 7a 15 c8 00              u32 [sp + 0xc8] = s0
  2173: 7a 16 cc 00              u32 [sp + 0xcc] = s1
  2177: 82 17 a0 00              a0 = u64 [sp + 0xa0]
  2181: 7a 17 d0 00              u32 [sp + 0xd0] = a0
  2185: 82 17 98 00              a0 = u64 [sp + 0x98]
  2189: 7a 17 d4 00              u32 [sp + 0xd4] = a0
  2193: 82 17 90 00              a0 = u64 [sp + 0x90]
  2197: 7b 17 d8 00              u64 [sp + 0xd8] = a0
  2201: 82 17 88 00              a0 = u64 [sp + 0x88]
  2205: 7b 17 60 01              u64 [sp + 0x160] = a0
  2209: 95 17 c8 00              a0 = sp + 0xc8
  2213: 7b 17 68 01              u64 [sp + 0x168] = a0
  2217: 82 17 28                 a0 = u64 [sp + 0x28]
  2220: 7b 17 70 01              u64 [sp + 0x170] = a0
  2224: 95 18 cc 00              a1 = sp + 0xcc
  2228: 7b 18 78 01              u64 [sp + 0x178] = a1
  2232: 7b 17 80 01              u64 [sp + 0x180] = a0
  2236: 95 18 d0 00              a1 = sp + 0xd0
  2240: 7b 18 88 01              u64 [sp + 0x188] = a1
  2244: 7b 17 90 01              u64 [sp + 0x190] = a0
  2248: 95 18 d4 00              a1 = sp + 0xd4
  2252: 7b 18 98 01              u64 [sp + 0x198] = a1
  2256: 7b 17 a0 01              u64 [sp + 0x1a0] = a0
  2260: 95 17 d8 00              a0 = sp + 0xd8
  2264: 7b 17 a8 01              u64 [sp + 0x1a8] = a0
  2268: 82 17 58                 a0 = u64 [sp + 0x58]
  2271: 7b 17 b0 01              u64 [sp + 0x1b0] = a0
  2275: 95 18 e0 00              a1 = sp + 0xe0
  2279: 7b 18 b8 01              u64 [sp + 0x1b8] = a1
  2283: 82 18 20                 a1 = u64 [sp + 0x20]
  2286: 7b 18 c0 01              u64 [sp + 0x1c0] = a1
  2290: 95 18 60 01              a1 = sp + 0x160
  2294: 7b 18 c8 01              u64 [sp + 0x1c8] = a1
  2298: 7b 17 d0 01              u64 [sp + 0x1d0] = a0
  2302: 82 17 18                 a0 = u64 [sp + 0x18]
  2305: 7b 17 28 02              u64 [sp + 0x228] = a0
  2309: 49 21 30 02 07           u64 [sp + 560] = 0x7
  2314: 49 21 48 02              u64 [sp + 584] = 0
  2318: 95 17 68 01              a0 = sp + 0x168
  2322: 7b 17 38 02              u64 [sp + 0x238] = a0
  2326: 49 21 40 02 07           u64 [sp + 576] = 0x7
  2331: 95 17 58 02              a0 = sp + 0x258
  2335: 95 18 28 02              a1 = sp + 0x228
  2339: 50 10 2a 3a 04           ra = 42, jump @237
      :                          @158 [@dyn 21]
  2344: 82 15 60 02              s0 = u64 [sp + 0x260]
  2348: 82 1b 68 02              a4 = u64 [sp + 0x268]
  2352: 82 16 58 02              s1 = u64 [sp + 0x258]
  2356: 33 07 02                 a0 = 0x2
  2359: 33 08                    a1 = 0
  2361: 33 09                    a2 = 0
  2363: 64 5a                    a3 = s0
  2365: 33 00 2c                 ra = 0x2c
  2368: 0a 64                    ecalli 100 // 'log'
  2370: 01                       fallthrough
      :                          @159 [@dyn 22]
  2371: 82 17 48                 a0 = u64 [sp + 0x48]
  2374: c8 67 07                 a0 = a0 + s1
  2377: 82 1b 50                 a4 = u64 [sp + 0x50]
  2380: 53 37 00 00 ff 1a        jump @164 if a0 <u 4294901760
      :                          @160
  2386: 82 b7                    a0 = u64 [a4]
  2388: c9 7b 08                 a1 = a4 - a0
  2391: ab 58 0f                 jump @164 if a1 != s0
      :                          @161
  2394: c9 67 08                 a1 = a0 - s1
  2397: 01                       fallthrough
      :                          @162
  2398: 82 b9                    a2 = u64 [a4]
  2400: ab 79 f2                 jump @160 if a2 != a0
      :                          @163
  2403: 7b b8                    u64 [a4] = a1
  2405: 01                       fallthrough
      :                          @164
  2406: 81 17 cc 00              a0 = i32 [sp + 0xcc]
  2410: 7a 17 ec 01              u32 [sp + 0x1ec] = a0
  2414: 95 17 ec 01              a0 = sp + 0x1ec
  2418: 33 08 04                 a1 = 0x4
  2421: 95 19 e0 00              a2 = sp + 0xe0
  2425: 33 0a 80 00              a3 = 0x80
  2429: 0a 03                    ecalli 3 // 'write'
  2431: 0a                       ecalli 0 // 'gas'
  2432: 7b 17 f0 01              u64 [sp + 0x1f0] = a0
  2436: 7b 17 f8 01              u64 [sp + 0x1f8] = a0
  2440: 46 21 07 02 04           u8 [sp + 519] = 0x4
  2445: 7b 17 08 02              u64 [sp + 0x208] = a0
  2449: 95 17 07 02              a0 = sp + 0x207
  2453: 33 08 01                 a1 = 0x1
  2456: 95 19 08 02              a2 = sp + 0x208
  2460: 33 0a 08                 a3 = 0x8
  2463: 0a 03                    ecalli 3 // 'write'
  2465: 49 21 68 01 02           u64 [sp + 360] = 0x2
  2470: 49 21 78 01 02           u64 [sp + 376] = 0x2
  2475: 49 21 88 01              u64 [sp + 392] = 0
  2479: 14 07 20 00 00 00 10 00 00 00 a0 = 0x1000000020
  2489: 7b 17 90 01              u64 [sp + 0x190] = a0
  2493: 46 21 98 01 03           u8 [sp + 408] = 0x3
  2498: 49 21 a0 01 02           u64 [sp + 416] = 0x2
  2503: 49 21 b0 01 02           u64 [sp + 432] = 0x2
  2508: 49 21 c0 01 01           u64 [sp + 448] = 0x1
  2513: 7b 17 c8 01              u64 [sp + 0x1c8] = a0
  2517: 95 17 07 02              a0 = sp + 0x207
  2521: 7b 17 58 02              u64 [sp + 0x258] = a0
  2525: 82 17 10                 a0 = u64 [sp + 0x10]
  2528: 7b 17 60 02              u64 [sp + 0x260] = a0
  2532: 95 17 f8 01              a0 = sp + 0x1f8
  2536: 7b 17 68 02              u64 [sp + 0x268] = a0
  2540: 82 17 58                 a0 = u64 [sp + 0x58]
  2543: 7b 17 70 02              u64 [sp + 0x270] = a0
  2547: 46 21 d0 01 03           u8 [sp + 464] = 0x3
  2552: 82 17 08                 a0 = u64 [sp + 0x8]
  2555: 7b 17 28 02              u64 [sp + 0x228] = a0
  2559: 49 21 30 02 02           u64 [sp + 560] = 0x2
  2564: 95 17 68 01              a0 = sp + 0x168
  2568: 7b 17 48 02              u64 [sp + 0x248] = a0
  2572: 49 21 50 02 02           u64 [sp + 592] = 0x2
  2577: 95 17 58 02              a0 = sp + 0x258
  2581: 7b 17 38 02              u64 [sp + 0x238] = a0
  2585: 49 21 40 02 02           u64 [sp + 576] = 0x2
  2590: 95 17 10 02              a0 = sp + 0x210
  2594: 95 18 28 02              a1 = sp + 0x228
  2598: 50 10 2e 37 03           ra = 46, jump @237
      :                          @165 [@dyn 23]
  2603: 82 15 18 02              s0 = u64 [sp + 0x218]
  2607: 82 1b 20 02              a4 = u64 [sp + 0x220]
  2611: 82 16 10 02              s1 = u64 [sp + 0x210]
  2615: 33 07 02                 a0 = 0x2
  2618: 33 08                    a1 = 0
  2620: 33 09                    a2 = 0
  2622: 64 5a                    a3 = s0
  2624: 33 00 30                 ra = 0x30
  2627: 0a 64                    ecalli 100 // 'log'
  2629: 01                       fallthrough
      :                          @166 [@dyn 24]
  2630: 82 1b 50                 a4 = u64 [sp + 0x50]
  2633: 82 17 48                 a0 = u64 [sp + 0x48]
  2636: c8 67 07                 a0 = a0 + s1
  2639: 53 37 00 00 ff 1a        jump @171 if a0 <u 4294901760
      :                          @167
  2645: 82 b7                    a0 = u64 [a4]
  2647: c9 7b 08                 a1 = a4 - a0
  2650: ab 58 0f                 jump @171 if a1 != s0
      :                          @168
  2653: c9 67 08                 a1 = a0 - s1
  2656: 01                       fallthrough
      :                          @169
  2657: 82 b9                    a2 = u64 [a4]
  2659: ab 79 f2                 jump @167 if a2 != a0
      :                          @170
  2662: 7b b8                    u64 [a4] = a1
  2664: 01                       fallthrough
      :                          @171
  2665: 95 17 f0 01              a0 = sp + 0x1f0
  2669: 7b 17 58 02              u64 [sp + 0x258] = a0
  2673: 82 17 58                 a0 = u64 [sp + 0x58]
  2676: 7b 17 60 02              u64 [sp + 0x260] = a0
  2680: 82 17                    a0 = u64 [sp]
  2682: 7b 17 68 01              u64 [sp + 0x168] = a0
  2686: 49 21 70 01 02           u64 [sp + 368] = 0x2
  2691: 49 21 88 01              u64 [sp + 392] = 0
  2695: 95 17 58 02              a0 = sp + 0x258
  2699: 7b 17 78 01              u64 [sp + 0x178] = a0
  2703: 49 21 80 01 01           u64 [sp + 384] = 0x1
  2708: 95 17 28 02              a0 = sp + 0x228
  2712: 95 18 68 01              a1 = sp + 0x168
  2716: 50 10 32 c1 02           ra = 50, jump @237
      :                          @172 [@dyn 25]
  2721: 82 15 30 02              s0 = u64 [sp + 0x230]
  2725: 82 1b 38 02              a4 = u64 [sp + 0x238]
  2729: 82 16 28 02              s1 = u64 [sp + 0x228]
  2733: 33 07 02                 a0 = 0x2
  2736: 33 08                    a1 = 0
  2738: 33 09                    a2 = 0
  2740: 64 5a                    a3 = s0
  2742: 33 00 34                 ra = 0x34
  2745: 0a 64                    ecalli 100 // 'log'
  2747: 01                       fallthrough
      :                          @173 [@dyn 26]
  2748: 82 1b 50                 a4 = u64 [sp + 0x50]
  2751: 82 17 48                 a0 = u64 [sp + 0x48]
  2754: c8 67 07                 a0 = a0 + s1
  2757: 53 37 00 00 ff 1a        jump @178 if a0 <u 4294901760
      :                          @174
  2763: 82 b7                    a0 = u64 [a4]
  2765: c9 7b 08                 a1 = a4 - a0
  2768: ab 58 0f                 jump @178 if a1 != s0
      :                          @175
  2771: c9 67 08                 a1 = a0 - s1
  2774: 01                       fallthrough
      :                          @176
  2775: 82 b9                    a2 = u64 [a4]
  2777: ab 79 f2                 jump @174 if a2 != a0
      :                          @177
  2780: 7b b8                    u64 [a4] = a1
  2782: 01                       fallthrough
      :                          @178
  2783: 82 12 b0 00              t0 = u64 [sp + 0xb0]
  2787: 95 22 01                 t0 = t0 + 0x1
  2790: 82 17 b8 00              a0 = u64 [sp + 0xb8]
  2794: 95 77 98 00              a0 = a0 + 0x98
  2798: 7b 17 b8 00              u64 [sp + 0xb8] = a0
  2802: 82 1c 40                 a5 = u64 [sp + 0x40]
  2805: 82 19 38                 a2 = u64 [sp + 0x38]
  2808: 82 1b 30                 a4 = u64 [sp + 0x30]
  2811: 82 1a a8 00              a3 = u64 [sp + 0xa8]
  2815: 33 08 08                 a1 = 0x8
  2818: ae 8c 48 fb              jump @132 if a5 >=u a1
      :                          @179
  2822: 33 07 00 00 01           a0 = 0x10000
  2827: 33 08                    a1 = 0
  2829: 82 10 88 02              ra = u64 [sp + 0x288]
  2833: 82 15 80 02              s0 = u64 [sp + 0x280]
  2837: 82 16 78 02              s1 = u64 [sp + 0x278]
  2841: 95 11 90 02              sp = sp + 0x290
  2845: 32 00                    ret
      :                          @180
  2847: 00                       trap
      :                          @181
  2848: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  2851: 7b 10 40                 u64 [sp + 0x40] = ra
  2854: 7b 15 38                 u64 [sp + 0x38] = s0
  2857: 7b 16 30                 u64 [sp + 0x30] = s1
  2860: c8 89 09                 a2 = a2 + a1
  2863: ac 89 52                 jump @189 if a2 <u a1
      :                          @182
  2866: 64 75                    s0 = a0
  2868: 82 77                    a0 = u64 [a0]
  2870: 97 78 01                 a1 = a0 << 0x1
  2873: 33 0a 08                 a3 = 0x8
  2876: e4 a9 09                 a2 = maxu(a2, a3)
  2879: e4 98 06                 s1 = maxu(a1, a2)
  2882: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  2885: 98 88 3f                 a1 = a1 >> 0x3f
  2888: 51 07 12                 jump @184 if a0 == 0
      :                          @183
  2891: 82 59 08                 a2 = u64 [s0 + 0x8]
  2894: 7b 19 18                 u64 [sp + 0x18] = a2
  2897: 49 11 20 01              u64 [sp + 32] = 0x1
  2901: 7b 17 28                 u64 [sp + 0x28] = a0
  2904: 28 06                    jump @185
      :                          @184
  2906: 49 11 20                 u64 [sp + 32] = 0
  2909: 01                       fallthrough
      :                          @185
  2910: 64 17                    a0 = sp
  2912: 95 1a 18                 a3 = sp + 0x18
  2915: 64 69                    a2 = s1
  2917: 50 10 36 32              ra = 54, jump @193
      :                          @186 [@dyn 27]
  2921: 82 18                    a1 = u64 [sp]
  2923: 82 17 08                 a0 = u64 [sp + 0x8]
  2926: 51 08 14                 jump @190 if a1 == 0
      :                          @187
  2929: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  2939: aa 87 0d                 jump @191 if a0 == a1
      :                          @188
  2942: 52 07 18                 jump @192 if a0 != 0
      :                          @189
  2945: 00                       trap
      :                          @190
  2946: 7b 57 08                 u64 [s0 + 0x8] = a0
  2949: 7b 56                    u64 [s0] = s1
  2951: 01                       fallthrough
      :                          @191
  2952: 82 10 40                 ra = u64 [sp + 0x40]
  2955: 82 15 38                 s0 = u64 [sp + 0x38]
  2958: 82 16 30                 s1 = u64 [sp + 0x30]
  2961: 95 11 48                 sp = sp + 0x48
  2964: 32 00                    ret
      :                          @192
  2966: 00                       trap
      :                          @193
  2967: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  2970: 7b 10 30                 u64 [sp + 0x30] = ra
  2973: 7b 15 28                 u64 [sp + 0x28] = s0
  2976: 7b 16 20                 u64 [sp + 0x20] = s1
  2979: 64 95                    s0 = a2
  2981: 64 72                    t0 = a0
  2983: 51 08 79                 jump @203 if a1 == 0
      :                          @194
  2986: 82 a7 08                 a0 = u64 [a3 + 0x8]
  2989: 51 07 7c                 jump @204 if a0 == 0
      :                          @195
  2992: 82 a9 10                 a2 = u64 [a3 + 0x10]
  2995: 51 09 aa 00              jump @211 if a2 == 0
      :                          @196
  2999: 82 a8                    a1 = u64 [a3]
  3001: 33 06 40 00 03           s1 = 0x30040
  3006: 33 03 00 00 01           t1 = 0x10000
  3011: c8 36 06                 s1 = s1 + t1
  3014: 01                       fallthrough
      :                          @197
  3015: 82 6a                    a3 = u64 [s1]
  3017: c8 5a 07                 a0 = a3 + s0
  3020: ac a7 cf 00              jump @217 if a0 <u a3
      :                          @198
  3024: 95 7b 01                 a4 = a0 + 0x1
  3027: 88 bc 01                 a5 = a4 <u 0x1
  3030: d8 b3 0b                 a4 = t1 <u a4
  3033: d4 cb 0b                 a4 = a4 | a5
  3036: 52 0b bf 00              jump @217 if a4 != 0
      :                          @199
  3040: 82 6b                    a4 = u64 [s1]
  3042: ab ab e5                 jump @197 if a4 != a3
      :                          @200
  3045: 7b 67                    u64 [s1] = a0
  3047: 33 0c                    a5 = 0
  3049: 7b 12 18                 u64 [sp + 0x18] = t0
  3052: 33 0a 40 00 03           a3 = 0x30040
  3057: 33 0b 00 00 01           a4 = 0x10000
  3062: 7b 1a                    u64 [sp] = a3
  3064: c8 ba 0a                 a3 = a3 + a4
  3067: c9 7a 07                 a0 = a3 - a0
  3070: 7b 17 10                 u64 [sp + 0x10] = a0
  3073: 7b 18 08                 u64 [sp + 0x8] = a1
  3076: 64 96                    s1 = a2
  3078: 50 10 38 cb 03           ra = 56, jump @287
      :                          @201 [@dyn 28]
  3083: 54 36 00 00 01 98 00     jump @218 if s1 <=u 65536
      :                          @202
  3090: 82 12 18                 t0 = u64 [sp + 0x18]
  3093: 82 18 10                 a1 = u64 [sp + 0x10]
  3096: 33 07                    a0 = 0
  3098: 7b 28 08                 u64 [t0 + 0x8] = a1
  3101: 28 b5 00                 jump @224
      :                          @203
  3104: 49 12 08                 u64 [t0 + 8] = 0
  3107: 33 07 01                 a0 = 0x1
  3110: 28 ac 00                 jump @224
      :                          @204
  3113: 33 09 40 00 03           a2 = 0x30040
  3118: 33 07 00 00 01           a0 = 0x10000
  3123: c8 79 09                 a2 = a2 + a0
  3126: 01                       fallthrough
      :                          @205
  3127: 82 9a                    a3 = u64 [a2]
  3129: c8 5a 08                 a1 = a3 + s0
  3132: ac a8 5f                 jump @217 if a1 <u a3
      :                          @206
  3135: 95 8b 01                 a4 = a1 + 0x1
  3138: 88 bc 01                 a5 = a4 <u 0x1
  3141: d8 b7 0b                 a4 = a0 <u a4
  3144: d4 cb 0b                 a4 = a4 | a5
  3147: 52 0b 50                 jump @217 if a4 != 0
      :                          @207
  3150: 82 9b                    a4 = u64 [a2]
  3152: ab ab e7                 jump @205 if a4 != a3
      :                          @208
  3155: 7b 98                    u64 [a2] = a1
  3157: 33 0c                    a5 = 0
  3159: 01                       fallthrough
      :                          @209
  3160: ab ab df                 jump @205 if a4 != a3
      :                          @210
  3163: 28 31                    jump @216
      :                          @211
  3165: 33 09 40 00 03           a2 = 0x30040
  3170: 33 07 00 00 01           a0 = 0x10000
  3175: c8 79 09                 a2 = a2 + a0
  3178: 01                       fallthrough
      :                          @212
  3179: 82 9a                    a3 = u64 [a2]
  3181: c8 5a 08                 a1 = a3 + s0
  3184: ac a8 2b                 jump @217 if a1 <u a3
      :                          @213
  3187: 95 8b 01                 a4 = a1 + 0x1
  3190: 88 bc 01                 a5 = a4 <u 0x1
  3193: d8 b7 0b                 a4 = a0 <u a4
  3196: d4 cb 0b                 a4 = a4 | a5
  3199: 52 0b 1c                 jump @217 if a4 != 0
      :                          @214
  3202: 82 9b                    a4 = u64 [a2]
  3204: ab ab e7                 jump @212 if a4 != a3
      :                          @215
  3207: 7b 98                    u64 [a2] = a1
  3209: 33 0c                    a5 = 0
  3211: 01                       fallthrough
      :                          @216
  3212: 33 07 40 00 04           a0 = 0x40040
  3217: c9 87 08                 a1 = a0 - a1
  3220: 33 07                    a0 = 0
  3222: 7b 28 08                 u64 [t0 + 0x8] = a1
  3225: 28 39                    jump @224
      :                          @217
  3227: 33 07 01                 a0 = 0x1
  3230: 7b 27 08                 u64 [t0 + 0x8] = a0
  3233: 28 31                    jump @224
      :                          @218
  3235: 64 6c                    a5 = s1
  3237: 82 17                    a0 = u64 [sp]
  3239: 95 77 00 00 01           a0 = a0 + 0x10000
  3244: 82 12 18                 t0 = u64 [sp + 0x18]
  3247: 82 16 08                 s1 = u64 [sp + 0x8]
  3250: 01                       fallthrough
      :                          @219
  3251: 82 78                    a1 = u64 [a0]
  3253: c9 87 09                 a2 = a0 - a1
  3256: ab 69 11                 jump @223 if a2 != s1
      :                          @220
  3259: c9 c8 09                 a2 = a1 - a5
  3262: 01                       fallthrough
      :                          @221
  3263: 82 7a                    a3 = u64 [a0]
  3265: ab 8a f2                 jump @219 if a3 != a1
      :                          @222
  3268: 7b 79                    u64 [a0] = a2
  3270: 33 0b                    a4 = 0
  3272: 01                       fallthrough
      :                          @223
  3273: 82 18 10                 a1 = u64 [sp + 0x10]
  3276: 33 07                    a0 = 0
  3278: 7b 28 08                 u64 [t0 + 0x8] = a1
  3281: 01                       fallthrough
      :                          @224
  3282: 7b 25 10                 u64 [t0 + 0x10] = s0
  3285: 7b 27                    u64 [t0] = a0
  3287: 82 10 30                 ra = u64 [sp + 0x30]
  3290: 82 15 28                 s0 = u64 [sp + 0x28]
  3293: 82 16 20                 s1 = u64 [sp + 0x20]
  3296: 95 11 38                 sp = sp + 0x38
  3299: 32 00                    ret
      :                          @225
  3301: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  3304: 7b 10 40                 u64 [sp + 0x40] = ra
  3307: 7b 15 38                 u64 [sp + 0x38] = s0
  3310: 7b 16 30                 u64 [sp + 0x30] = s1
  3313: 95 88 01                 a1 = a1 + 0x1
  3316: 51 08 53                 jump @233 if a1 == 0
      :                          @226
  3319: 64 75                    s0 = a0
  3321: 82 77                    a0 = u64 [a0]
  3323: 97 79 01                 a2 = a0 << 0x1
  3326: 33 0a 08                 a3 = 0x8
  3329: e4 a8 08                 a1 = maxu(a1, a3)
  3332: e4 89 06                 s1 = maxu(a2, a1)
  3335: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  3338: 98 88 3f                 a1 = a1 >> 0x3f
  3341: 51 07 12                 jump @228 if a0 == 0
      :                          @227
  3344: 82 59 08                 a2 = u64 [s0 + 0x8]
  3347: 7b 19 18                 u64 [sp + 0x18] = a2
  3350: 49 11 20 01              u64 [sp + 32] = 0x1
  3354: 7b 17 28                 u64 [sp + 0x28] = a0
  3357: 28 06                    jump @229
      :                          @228
  3359: 49 11 20                 u64 [sp + 32] = 0
  3362: 01                       fallthrough
      :                          @229
  3363: 64 17                    a0 = sp
  3365: 95 1a 18                 a3 = sp + 0x18
  3368: 64 69                    a2 = s1
  3370: 50 10 3a 6d fe           ra = 58, jump @193
      :                          @230 [@dyn 29]
  3375: 82 18                    a1 = u64 [sp]
  3377: 82 17 08                 a0 = u64 [sp + 0x8]
  3380: 51 08 14                 jump @234 if a1 == 0
      :                          @231
  3383: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  3393: aa 87 0d                 jump @235 if a0 == a1
      :                          @232
  3396: 52 07 18                 jump @236 if a0 != 0
      :                          @233
  3399: 00                       trap
      :                          @234
  3400: 7b 57 08                 u64 [s0 + 0x8] = a0
  3403: 7b 56                    u64 [s0] = s1
  3405: 01                       fallthrough
      :                          @235
  3406: 82 10 40                 ra = u64 [sp + 0x40]
  3409: 82 15 38                 s0 = u64 [sp + 0x38]
  3412: 82 16 30                 s1 = u64 [sp + 0x30]
  3415: 95 11 48                 sp = sp + 0x48
  3418: 32 00                    ret
      :                          @236
  3420: 00                       trap
      :                          @237
  3421: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  3424: 7b 10 30                 u64 [sp + 0x30] = ra
  3427: 7b 15 28                 u64 [sp + 0x28] = s0
  3430: 7b 16 20                 u64 [sp + 0x20] = s1
  3433: 64 89                    a2 = a1
  3435: 82 8a 08                 a3 = u64 [a1 + 0x8]
  3438: 64 75                    s0 = a0
  3440: 51 0a 35                 jump @242 if a3 == 0
      :                          @238
  3443: 82 98                    a1 = u64 [a2]
  3445: 33 07                    a0 = 0
  3447: 95 8b 08                 a4 = a1 + 0x8
  3450: 01                       fallthrough
      :                          @239
  3451: 82 bc                    a5 = u64 [a4]
  3453: c8 c7 07                 a0 = a0 + a5
  3456: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
  3459: 95 bb 10                 a4 = a4 + 0x10
  3462: 52 0a f5                 jump @239 if a3 != 0
      :                          @240
  3465: 82 9a 18                 a3 = u64 [a2 + 0x18]
  3468: 51 0a 24                 jump @244 if a3 == 0
      :                          @241
  3471: 82 88 08                 a1 = u64 [a1 + 0x8]
  3474: 8e 88                    a1 = a1 >u 0
  3476: 88 7a 10                 a3 = a0 <u 0x10
  3479: 85 aa 01                 a3 = a3 ^ 0x1
  3482: d4 a8 08                 a1 = a1 | a3
  3485: 89 7a                    a3 = a0 <s 0
  3487: e0 a8 08                 a1 = a1 & ~a3
  3490: 52 08 0a                 jump @243 if a1 != 0
      :                          @242
  3493: 33 07                    a0 = 0
  3495: 33 08 01                 a1 = 0x1
  3498: 28 4a                    jump @252
      :                          @243
  3500: 97 77 01                 a0 = a0 << 0x1
  3503: 01                       fallthrough
      :                          @244
  3504: 51 07 40                 jump @251 if a0 == 0
      :                          @245
  3507: 57 07 78                 jump @257 if a0 <s 0
      :                          @246
  3510: 64 52                    t0 = s0
  3512: 33 0b 40 00 03           a4 = 0x30040
  3517: 33 08 00 00 01           a1 = 0x10000
  3522: c8 8b 0b                 a4 = a4 + a1
  3525: 01                       fallthrough
      :                          @247
  3526: 82 bc                    a5 = u64 [a4]
  3528: c8 7c 0a                 a3 = a5 + a0
  3531: ac ca 5e                 jump @255 if a3 <u a5
      :                          @248
  3534: 95 a5 01                 s0 = a3 + 0x1
  3537: 88 56 01                 s1 = s0 <u 0x1
  3540: d8 58 05                 s0 = a1 <u s0
  3543: d4 65 05                 s0 = s0 | s1
  3546: 52 05 4f                 jump @255 if s0 != 0
      :                          @249
  3549: 82 b6                    s1 = u64 [a4]
  3551: ab c6 e7                 jump @247 if s1 != a5
      :                          @250
  3554: 7b ba                    u64 [a4] = a3
  3556: 33 08 40 00 04           a1 = 0x40040
  3561: c9 a8 08                 a1 = a1 - a3
  3564: 64 25                    s0 = t0
  3566: 28 06                    jump @252
      :                          @251
  3568: 33 08 01                 a1 = 0x1
  3571: 01                       fallthrough
      :                          @252
  3572: 7b 17                    u64 [sp] = a0
  3574: 7b 18 08                 u64 [sp + 0x8] = a1
  3577: 49 11 10                 u64 [sp + 16] = 0
  3580: 33 08 20 01 01           a1 = 0x10120
  3585: 64 17                    a0 = sp
  3587: 50 10 3c 1d 06           ra = 60, jump @370
      :                          @253 [@dyn 30]
  3592: 52 07 22                 jump @256 if a0 != 0
      :                          @254
  3595: 82 17 10                 a0 = u64 [sp + 0x10]
  3598: 82 18 08                 a1 = u64 [sp + 0x8]
  3601: 82 19                    a2 = u64 [sp]
  3603: 7b 57 10                 u64 [s0 + 0x10] = a0
  3606: 7b 58 08                 u64 [s0 + 0x8] = a1
  3609: 7b 59                    u64 [s0] = a2
  3611: 82 10 30                 ra = u64 [sp + 0x30]
  3614: 82 15 28                 s0 = u64 [sp + 0x28]
  3617: 82 16 20                 s1 = u64 [sp + 0x20]
  3620: 95 11 38                 sp = sp + 0x38
  3623: 32 00                    ret
      :                          @255
  3625: 00                       trap
      :                          @256
  3626: 00                       trap
      :                          @257
  3627: 00                       trap
      :                          @258 [@dyn 31]
  3628: 82 72                    t0 = u64 [a0]
  3630: 33 09 00 00 ff           a2 = 0xffffffffffff0000
  3635: 95 2a ff ff fe           a3 = t0 + 0xfffffffffffeffff
  3640: ac 9a 28                 jump @264 if a3 <u a2
      :                          @259
  3643: 82 77 08                 a0 = u64 [a0 + 0x8]
  3646: 33 09 40 00 03           a2 = 0x30040
  3651: 95 99 00 00 01           a2 = a2 + 0x10000
  3656: 01                       fallthrough
      :                          @260
  3657: 82 9a                    a3 = u64 [a2]
  3659: c9 a9 0b                 a4 = a2 - a3
  3662: ab 7b 12                 jump @264 if a4 != a0
      :                          @261
  3665: c9 2a 0b                 a4 = a3 - t0
  3668: 01                       fallthrough
      :                          @262
  3669: 82 9c                    a5 = u64 [a2]
  3671: ab ac f2                 jump @260 if a5 != a3
      :                          @263
  3674: 7b 9b                    u64 [a2] = a4
  3676: 33 08                    a1 = 0
  3678: 32 00                    ret
      :                          @264
  3680: 32 00                    ret
      :                          @265 [@dyn 32]
  3682: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  3685: 7b 10 18                 u64 [sp + 0x18] = ra
  3688: 7b 15 10                 u64 [sp + 0x10] = s0
  3691: 7b 16 08                 u64 [sp + 0x8] = s1
  3694: 64 75                    s0 = a0
  3696: 82 7a 10                 a3 = u64 [a0 + 0x10]
  3699: 82 77                    a0 = u64 [a0]
  3701: c9 a7 07                 a0 = a0 - a3
  3704: 64 96                    s1 = a2
  3706: ac 97 2a                 jump @268 if a0 <u a2
      :                          @266
  3709: 7b 1a                    u64 [sp] = a3
  3711: 82 57 08                 a0 = u64 [s0 + 0x8]
  3714: c8 a7 07                 a0 = a0 + a3
  3717: 64 69                    a2 = s1
  3719: 50 10 42 4a 01           ra = 66, jump @287
      :                          @267 [@dyn 33]
  3724: 82 17                    a0 = u64 [sp]
  3726: c8 76 06                 s1 = s1 + a0
  3729: 7b 56 10                 u64 [s0 + 0x10] = s1
  3732: 33 07                    a0 = 0
  3734: 82 10 18                 ra = u64 [sp + 0x18]
  3737: 82 15 10                 s0 = u64 [sp + 0x10]
  3740: 82 16 08                 s1 = u64 [sp + 0x8]
  3743: 95 11 20                 sp = sp + 0x20
  3746: 32 00                    ret
      :                          @268
  3748: 64 57                    a0 = s0
  3750: 7b 18                    u64 [sp] = a1
  3752: 64 a8                    a1 = a3
  3754: 64 69                    a2 = s1
  3756: 50 10 44 74 fc           ra = 68, jump @181
      :                          @269 [@dyn 34]
  3761: 82 18                    a1 = u64 [sp]
  3763: 82 5a 10                 a3 = u64 [s0 + 0x10]
  3766: 28 c7                    jump @266
      :                          @270 [@dyn 35]
  3768: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  3771: 7b 10 20                 u64 [sp + 0x20] = ra
  3774: 7b 15 18                 u64 [sp + 0x18] = s0
  3777: 7b 16 10                 u64 [sp + 0x10] = s1
  3780: 64 86                    s1 = a1
  3782: 83 88                    i32 a1 = a1 + 0
  3784: 33 09 80 00              a2 = 0x80
  3788: 64 7a                    a3 = a0
  3790: ae 98 2b                 jump @275 if a1 >=u a2
      :                          @271
  3793: 82 a8 10                 a1 = u64 [a3 + 0x10]
  3796: 82 a7                    a0 = u64 [a3]
  3798: ab 78 12                 jump @274 if a1 != a0
      :                          @272
  3801: 64 a7                    a0 = a3
  3803: 64 a5                    s0 = a3
  3805: 50 10 48 08 fe           ra = 72, jump @225
      :                          @273 [@dyn 36]
  3810: 64 5a                    a3 = s0
  3812: 82 58 10                 a1 = u64 [s0 + 0x10]
  3815: 01                       fallthrough
      :                          @274
  3816: 82 a7 08                 a0 = u64 [a3 + 0x8]
  3819: c8 87 07                 a0 = a0 + a1
  3822: 78 76                    u8 [a0] = s1
  3824: 95 88 01                 a1 = a1 + 0x1
  3827: 7b a8 10                 u64 [a3 + 0x10] = a1
  3830: 28 ab 00                 jump @283
      :                          @275
  3833: 8b 67 0b                 i32 a0 = s1 >> 0xb
  3836: 48 11 0c                 u32 [sp + 12] = 0
  3839: 52 07 1c                 jump @277 if a0 != 0
      :                          @276
  3842: 98 67 06                 a0 = s1 >> 0x6
  3845: 86 77 c0 00              a0 = a0 | 0xc0
  3849: 78 17 0c                 u8 [sp + 0xc] = a0
  3852: 84 67 3f                 a0 = s1 & 0x3f
  3855: 86 77 80 00              a0 = a0 | 0x80
  3859: 78 17 0d                 u8 [sp + 0xd] = a0
  3862: 33 06 02                 s1 = 0x2
  3865: 28 63                    jump @280
      :                          @277
  3867: 8b 67 10                 i32 a0 = s1 >> 0x10
  3870: 52 07 29                 jump @279 if a0 != 0
      :                          @278
  3873: 98 67 0c                 a0 = s1 >> 0xc
  3876: 86 77 e0 00              a0 = a0 | 0xe0
  3880: 78 17 0c                 u8 [sp + 0xc] = a0
  3883: 97 67 34                 a0 = s1 << 0x34
  3886: 98 77 3a                 a0 = a0 >> 0x3a
  3889: 95 77 80 00              a0 = a0 + 0x80
  3893: 78 17 0d                 u8 [sp + 0xd] = a0
  3896: 84 67 3f                 a0 = s1 & 0x3f
  3899: 86 77 80 00              a0 = a0 | 0x80
  3903: 78 17 0e                 u8 [sp + 0xe] = a0
  3906: 33 06 03                 s1 = 0x3
  3909: 28 37                    jump @280
      :                          @279
  3911: 97 67 2b                 a0 = s1 << 0x2b
  3914: 98 77 3d                 a0 = a0 >> 0x3d
  3917: 95 77 f0 00              a0 = a0 + 0xf0
  3921: 78 17 0c                 u8 [sp + 0xc] = a0
  3924: 97 67 2e                 a0 = s1 << 0x2e
  3927: 98 77 3a                 a0 = a0 >> 0x3a
  3930: 95 77 80 00              a0 = a0 + 0x80
  3934: 78 17 0d                 u8 [sp + 0xd] = a0
  3937: 97 67 34                 a0 = s1 << 0x34
  3940: 98 77 3a                 a0 = a0 >> 0x3a
  3943: 95 77 80 00              a0 = a0 + 0x80
  3947: 78 17 0e                 u8 [sp + 0xe] = a0
  3950: 84 67 3f                 a0 = s1 & 0x3f
  3953: 86 77 80 00              a0 = a0 | 0x80
  3957: 78 17 0f                 u8 [sp + 0xf] = a0
  3960: 33 06 04                 s1 = 0x4
  3963: 01                       fallthrough
      :                          @280
  3964: 82 a5 10                 s0 = u64 [a3 + 0x10]
  3967: 82 a7                    a0 = u64 [a3]
  3969: c9 57 07                 a0 = a0 - s0
  3972: ac 67 2d                 jump @284 if a0 <u s1
      :                          @281
  3975: 7b 1a                    u64 [sp] = a3
  3977: 82 a7 08                 a0 = u64 [a3 + 0x8]
  3980: c8 57 07                 a0 = a0 + s0
  3983: 95 18 0c                 a1 = sp + 0xc
  3986: 64 69                    a2 = s1
  3988: 50 10 4a 3d              ra = 74, jump @287
      :                          @282 [@dyn 37]
  3992: c8 56 06                 s1 = s1 + s0
  3995: 82 17                    a0 = u64 [sp]
  3997: 7b 76 10                 u64 [a0 + 0x10] = s1
  4000: 01                       fallthrough
      :                          @283
  4001: 33 07                    a0 = 0
  4003: 82 10 20                 ra = u64 [sp + 0x20]
  4006: 82 15 18                 s0 = u64 [sp + 0x18]
  4009: 82 16 10                 s1 = u64 [sp + 0x10]
  4012: 95 11 28                 sp = sp + 0x28
  4015: 32 00                    ret
      :                          @284
  4017: 64 a7                    a0 = a3
  4019: 64 58                    a1 = s0
  4021: 64 69                    a2 = s1
  4023: 64 a5                    s0 = a3
  4025: 50 10 4c 67 fb           ra = 76, jump @181
      :                          @285 [@dyn 38]
  4030: 64 5a                    a3 = s0
  4032: 82 55 10                 s0 = u64 [s0 + 0x10]
  4035: 28 c4                    jump @281
      :                          @286 [@dyn 39]
  4037: 64 8a                    a3 = a1
  4039: 33 08 20 01 01           a1 = 0x10120
  4044: 64 a9                    a2 = a3
  4046: 28 52 04                 jump @370
      :                          @287
  4049: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  4052: 7b 10 18                 u64 [sp + 0x18] = ra
  4055: 7b 15 10                 u64 [sp + 0x10] = s0
  4058: 7b 16 08                 u64 [sp + 0x8] = s1
  4061: 53 19 10 64              jump @296 if a2 <u 16
      :                          @288
  4065: 8d 7a                    i32 a3 = -a0
  4067: 84 a2 07                 t0 = a3 & 0x7
  4070: c8 27 0b                 a4 = a0 + t0
  4073: 51 02 15                 jump @291 if t0 == 0
      :                          @289
  4076: 64 8c                    a5 = a1
  4078: 64 75                    s0 = a0
  4080: 01                       fallthrough
      :                          @290
  4081: 7c ca                    a3 = u8 [a5]
  4083: 78 5a                    u8 [s0] = a3
  4085: 95 55 01                 s0 = s0 + 0x1
  4088: 95 cc 01                 a5 = a5 + 0x1
  4091: ac b5 f6                 jump @290 if s0 <u a4
      :                          @291
  4094: c8 28 03                 t1 = a1 + t0
  4097: c9 29 02                 t0 = a2 - t0
  4100: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  4103: 84 38 07                 a1 = t1 & 0x7
  4106: c8 4b 0a                 a3 = a4 + t2
  4109: 51 08 3b                 jump @298 if a1 == 0
      :                          @292
  4112: 58 04 4b                 jump @301 if t2 <=s 0
      :                          @293
  4115: 97 38 03                 a1 = t1 << 0x3
  4118: 84 80 38                 ra = a1 & 0x38
  4121: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  4124: 82 c5                    s0 = u64 [a5]
  4126: 8d 88                    i32 a1 = -a1
  4128: 84 88 38                 a1 = a1 & 0x38
  4131: 95 cc 08                 a5 = a5 + 0x8
  4134: 01                       fallthrough
      :                          @294
  4135: 82 c6                    s1 = u64 [a5]
  4137: d0 05 05                 s0 = s0 >> ra
  4140: cf 86 09                 a2 = s1 << a1
  4143: d4 59 09                 a2 = a2 | s0
  4146: 7b b9                    u64 [a4] = a2
  4148: 95 bb 08                 a4 = a4 + 0x8
  4151: 95 cc 08                 a5 = a5 + 0x8
  4154: 64 65                    s0 = s1
  4156: ac ab eb                 jump @294 if a4 <u a3
      :                          @295
  4159: 28 1c                    jump @301
      :                          @296
  4161: 64 7a                    a3 = a0
  4163: 52 09 21                 jump @302 if a2 != 0
      :                          @297
  4166: 28 2f                    jump @304
      :                          @298
  4168: 58 04 13                 jump @301 if t2 <=s 0
      :                          @299
  4171: 64 38                    a1 = t1
  4173: 01                       fallthrough
      :                          @300
  4174: 82 89                    a2 = u64 [a1]
  4176: 7b b9                    u64 [a4] = a2
  4178: 95 bb 08                 a4 = a4 + 0x8
  4181: 95 88 08                 a1 = a1 + 0x8
  4184: ac ab f6                 jump @300 if a4 <u a3
      :                          @301
  4187: c8 43 08                 a1 = t1 + t2
  4190: 84 29 07                 a2 = t0 & 0x7
  4193: 51 09 14                 jump @304 if a2 == 0
      :                          @302
  4196: c8 a9 09                 a2 = a2 + a3
  4199: 01                       fallthrough
      :                          @303
  4200: 7c 8b                    a4 = u8 [a1]
  4202: 78 ab                    u8 [a3] = a4
  4204: 95 aa 01                 a3 = a3 + 0x1
  4207: 95 88 01                 a1 = a1 + 0x1
  4210: ac 9a f6                 jump @303 if a3 <u a2
      :                          @304
  4213: 82 10 18                 ra = u64 [sp + 0x18]
  4216: 82 15 10                 s0 = u64 [sp + 0x10]
  4219: 82 16 08                 s1 = u64 [sp + 0x8]
  4222: 95 11 20                 sp = sp + 0x20
  4225: 32 00                    ret
      :                          @305 [@dyn 40]
  4227: 82 77                    a0 = u64 [a0]
  4229: 01                       fallthrough
      :                          @306
  4230: 28                       jump @306
      :                          @307 [@dyn 41]
  4231: 82 77                    a0 = u64 [a0]
  4233: 01                       fallthrough
      :                          @308
  4234: 95 11 a8                 sp = sp + 0xffffffffffffffa8
  4237: 7b 10 50                 u64 [sp + 0x50] = ra
  4240: 7b 15 48                 u64 [sp + 0x48] = s0
  4243: 7b 16 40                 u64 [sp + 0x40] = s1
  4246: 7b 18                    u64 [sp] = a1
  4248: 98 79 04                 a2 = a0 >> 0x4
  4251: 33 08 27                 a1 = 0x27
  4254: 53 29 71 02 81 00        jump @311 if a2 <u 625
      :                          @309
  4260: 33 08 27                 a1 = 0x27
  4263: 95 1a 3e                 a3 = sp + 0x3e
  4266: 3a 09 00 00 03           a2 = u64 [0x30000]
  4271: 7b 19 10                 u64 [sp + 0x10] = a2
  4274: 49 11 08 f0 d8 00        u64 [sp + 8] = 0xd8f0
  4280: 33 04 7b 14              t2 = 0x147b
  4284: 33 0b 94 01 01           a4 = 0x10194
  4289: 33 00 ff e0 f5 05        ra = 0x5f5e0ff
  4295: 01                       fallthrough
      :                          @310
  4296: 64 72                    t0 = a0
  4298: 82 17 10                 a0 = u64 [sp + 0x10]
  4301: d6 72 07                 a0 = t0 mulhu a0
  4304: 98 77 0b                 a0 = a0 >> 0xb
  4307: 82 19 08                 a2 = u64 [sp + 0x8]
  4310: c0 97 0c                 i32 a5 = a0 * a2
  4313: c8 2c 06                 s1 = a5 + t0
  4316: 97 6c 30                 a5 = s1 << 0x30
  4319: 98 cc 32                 a5 = a5 >> 0x32
  4322: ca 4c 0c                 a5 = a5 * t2
  4325: 98 c3 11                 t1 = a5 >> 0x11
  4328: 98 cc 10                 a5 = a5 >> 0x10
  4331: 84 cc fe 07              a5 = a5 & 0x7fe
  4335: 96 39 9c                 a2 = t1 * 0xffffffffffffff9c
  4338: c8 69 09                 a2 = a2 + s1
  4341: 97 99 31                 a2 = a2 << 0x31
  4344: 98 99 30                 a2 = a2 >> 0x30
  4347: c8 bc 0c                 a5 = a5 + a4
  4350: 7c c6                    s1 = u8 [a5]
  4352: 7c cc 01                 a5 = u8 [a5 + 0x1]
  4355: c8 b9 09                 a2 = a2 + a4
  4358: 7c 95 01                 s0 = u8 [a2 + 0x1]
  4361: 7c 99                    a2 = u8 [a2]
  4363: 78 ac ff                 u8 [a3 + 0xffffffffffffffff] = a5
  4366: 78 a6 fe                 u8 [a3 + 0xfffffffffffffffe] = s1
  4369: 78 a5 01                 u8 [a3 + 0x1] = s0
  4372: 78 a9                    u8 [a3] = a2
  4374: 95 88 fc                 a1 = a1 + 0xfffffffffffffffc
  4377: 95 aa fc                 a3 = a3 + 0xfffffffffffffffc
  4380: ac 20 ac                 jump @310 if ra <u t0
      :                          @311
  4383: 54 17 63 3b              jump @313 if a0 <=u 99
      :                          @312
  4387: 97 79 30                 a2 = a0 << 0x30
  4390: 98 99 32                 a2 = a2 >> 0x32
  4393: 96 99 7b 14              a2 = a2 * 0x147b
  4397: 98 99 11                 a2 = a2 >> 0x11
  4400: 96 9a 9c                 a3 = a2 * 0xffffffffffffff9c
  4403: c8 a7 07                 a0 = a0 + a3
  4406: 97 77 31                 a0 = a0 << 0x31
  4409: 98 77 30                 a0 = a0 >> 0x30
  4412: 95 88 fe                 a1 = a1 + 0xfffffffffffffffe
  4415: 33 0a 94 01 01           a3 = 0x10194
  4420: c8 a7 07                 a0 = a0 + a3
  4423: 7c 7a 01                 a3 = u8 [a0 + 0x1]
  4426: 7c 77                    a0 = u8 [a0]
  4428: 95 1b 19                 a4 = sp + 0x19
  4431: c8 8b 0b                 a4 = a4 + a1
  4434: 78 ba 01                 u8 [a4 + 0x1] = a3
  4437: 78 b7                    u8 [a4] = a0
  4439: 64 97                    a0 = a2
  4441: 01                       fallthrough
      :                          @313
  4442: 55 17 0a 14              jump @315 if a0 >=u 10
      :                          @314
  4446: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
  4449: 95 19 19                 a2 = sp + 0x19
  4452: c8 89 09                 a2 = a2 + a1
  4455: 83 77 30                 i32 a0 = a0 + 0x30
  4458: 78 97                    u8 [a2] = a0
  4460: 28 21                    jump @316
      :                          @315
  4462: 97 77 01                 a0 = a0 << 0x1
  4465: 95 88 fe                 a1 = a1 + 0xfffffffffffffffe
  4468: 33 09 94 01 01           a2 = 0x10194
  4473: c8 97 07                 a0 = a0 + a2
  4476: 7c 79 01                 a2 = u8 [a0 + 0x1]
  4479: 7c 77                    a0 = u8 [a0]
  4481: 95 1a 19                 a3 = sp + 0x19
  4484: c8 8a 0a                 a3 = a3 + a1
  4487: 78 a9 01                 u8 [a3 + 0x1] = a2
  4490: 78 a7                    u8 [a3] = a0
  4492: 01                       fallthrough
      :                          @316
  4493: 95 1a 19                 a3 = sp + 0x19
  4496: c8 8a 0a                 a3 = a3 + a1
  4499: 9a 8b 27                 a4 = 0x27 - a1
  4502: 33 08 50 01 01           a1 = 0x10150
  4507: 82 17                    a0 = u64 [sp]
  4509: 33 09                    a2 = 0
  4511: 50 10 54 12              ra = 84, jump @318
      :                          @317 [@dyn 42]
  4515: 82 10 50                 ra = u64 [sp + 0x50]
  4518: 82 15 48                 s0 = u64 [sp + 0x48]
  4521: 82 16 40                 s1 = u64 [sp + 0x40]
  4524: 95 11 58                 sp = sp + 0x58
  4527: 32 00                    ret
      :                          @318
  4529: 95 11 98                 sp = sp + 0xffffffffffffff98
  4532: 7b 10 60                 u64 [sp + 0x60] = ra
  4535: 7b 15 58                 u64 [sp + 0x58] = s0
  4538: 7b 16 50                 u64 [sp + 0x50] = s1
  4541: 80 73 34                 t1 = u32 [a0 + 0x34]
  4544: 7b 1a 20                 u64 [sp + 0x20] = a3
  4547: 64 9c                    a5 = a2
  4549: 84 36 01                 s1 = t1 & 0x1
  4552: 33 02 2b                 t0 = 0x2b
  4555: 33 09 00 00 11           a2 = 0x110000
  4560: 84 3a 04                 a3 = t1 & 0x4
  4563: 7b 1b 28                 u64 [sp + 0x28] = a4
  4566: c8 b6 04                 t2 = s1 + a4
  4569: 7b 1c 30                 u64 [sp + 0x30] = a5
  4572: 52 0a 10                 jump @321 if a3 != 0
      :                          @319
  4575: 49 11 38                 u64 [sp + 56] = 0
  4578: 82 78                    a1 = u64 [a0]
  4580: 94 69 2b                 a2 = 0x2b if s1 != 0
  4583: 52 08 35                 jump @325 if a1 != 0
      :                          @320
  4586: 28 56                    jump @330
      :                          @321
  4588: 7b 18 38                 u64 [sp + 0x38] = a1
  4591: 33 09                    a2 = 0
  4593: 51 0c 1b                 jump @324 if a5 == 0
      :                          @322
  4596: 82 1b 38                 a4 = u64 [sp + 0x38]
  4599: 01                       fallthrough
      :                          @323
  4600: 7d b5                    s0 = i8 [a4]
  4602: 89 55 c0                 s0 = s0 <s 0xffffffffffffffc0
  4605: 85 5a 01                 a3 = s0 ^ 0x1
  4608: c8 a9 09                 a2 = a2 + a3
  4611: 95 cc ff                 a5 = a5 + 0xffffffffffffffff
  4614: 95 bb 01                 a4 = a4 + 0x1
  4617: 52 0c ef                 jump @323 if a5 != 0
      :                          @324
  4620: c8 94 04                 t2 = t2 + a2
  4623: 33 09 00 00 11           a2 = 0x110000
  4628: 82 78                    a1 = u64 [a0]
  4630: db 62 09                 a2 = t0 if s1 != 0
  4633: 51 08 27                 jump @330 if a1 == 0
      :                          @325
  4636: 82 7a 08                 a3 = u64 [a0 + 0x8]
  4639: ae a4 21                 jump @330 if t2 >=u a3
      :                          @326
  4642: 84 38 08                 a1 = t1 & 0x8
  4645: 52 08 50                 jump @333 if a1 != 0
      :                          @327
  4648: 7c 76 38                 s1 = u8 [a0 + 0x38]
  4651: c9 4a 0a                 a3 = a3 - t2
  4654: 7b 19 18                 u64 [sp + 0x18] = a2
  4657: 5a 16 01 9d 00           jump @340 if s1 >s 1
      :                          @328
  4662: 52 06 aa 00              jump @342 if s1 != 0
      :                          @329
  4666: 7b 1a 10                 u64 [sp + 0x10] = a3
  4669: 28 a9 00                 jump @343
      :                          @330
  4672: 82 75 20                 s0 = u64 [a0 + 0x20]
  4675: 82 76 28                 s1 = u64 [a0 + 0x28]
  4678: 64 57                    a0 = s0
  4680: 64 68                    a1 = s1
  4682: 82 1a 38                 a3 = u64 [sp + 0x38]
  4685: 82 1b 30                 a4 = u64 [sp + 0x30]
  4688: 50 10 56 6c 01           ra = 86, jump @363
      :                          @331 [@dyn 43]
  4693: 33 08 01                 a1 = 0x1
  4696: 52 07 bb 00              jump @348 if a0 != 0
      :                          @332
  4700: 82 6c 18                 a5 = u64 [s1 + 0x18]
  4703: 64 57                    a0 = s0
  4705: 82 18 20                 a1 = u64 [sp + 0x20]
  4708: 82 19 28                 a2 = u64 [sp + 0x28]
  4711: 82 10 60                 ra = u64 [sp + 0x60]
  4714: 82 15 58                 s0 = u64 [sp + 0x58]
  4717: 82 16 50                 s1 = u64 [sp + 0x50]
  4720: 95 11 68                 sp = sp + 0x68
  4723: 32 0c                    jump [a5]
      :                          @333
  4725: 7b 1a 40                 u64 [sp + 0x40] = a3
  4728: 64 45                    s0 = t2
  4730: 81 78 30                 a1 = i32 [a0 + 0x30]
  4733: 7b 18 10                 u64 [sp + 0x10] = a1
  4736: 7c 7a 38                 a3 = u8 [a0 + 0x38]
  4739: 7b 1a 08                 u64 [sp + 0x8] = a3
  4742: 82 7a 20                 a3 = u64 [a0 + 0x20]
  4745: 82 78 28                 a1 = u64 [a0 + 0x28]
  4748: 48 17 30 30              u32 [a0 + 48] = 0x30
  4752: 7b 17                    u64 [sp] = a0
  4754: 46 17 38 01              u8 [a0 + 56] = 0x1
  4758: 7b 1a 48                 u64 [sp + 0x48] = a3
  4761: 64 a7                    a0 = a3
  4763: 64 86                    s1 = a1
  4765: 82 1a 38                 a3 = u64 [sp + 0x38]
  4768: 82 1b 30                 a4 = u64 [sp + 0x30]
  4771: 50 10 58 19 01           ra = 88, jump @363
      :                          @334 [@dyn 44]
  4776: 52 07 67                 jump @347 if a0 != 0
      :                          @335
  4779: 82 17 40                 a0 = u64 [sp + 0x40]
  4782: c9 57 05                 s0 = a0 - s0
  4785: 95 55 01                 s0 = s0 + 0x1
  4788: 01                       fallthrough
      :                          @336
  4789: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  4792: 51 05 c6 00              jump @358 if s0 == 0
      :                          @337
  4796: 82 69 20                 a2 = u64 [s1 + 0x20]
  4799: 33 08 30                 a1 = 0x30
  4802: 82 17 48                 a0 = u64 [sp + 0x48]
  4805: b4 90 01 5a              ra = 90, jump [a2]
      :                          @338 [@dyn 45]
  4809: 51 07 ec                 jump @336 if a0 == 0
      :                          @339
  4812: 28 43                    jump @347
      :                          @340
  4814: 52 16 02 12              jump @342 if s1 != 2
      :                          @341
  4818: 98 a6 01                 s1 = a3 >> 0x1
  4821: 95 a8 01                 a1 = a3 + 0x1
  4824: 98 88 01                 a1 = a1 >> 0x1
  4827: 7b 18 10                 u64 [sp + 0x10] = a1
  4830: 28 08                    jump @343
      :                          @342
  4832: 64 a6                    s1 = a3
  4834: 49 11 10                 u64 [sp + 16] = 0
  4837: 01                       fallthrough
      :                          @343
  4838: 82 78 20                 a1 = u64 [a0 + 0x20]
  4841: 7b 18 48                 u64 [sp + 0x48] = a1
  4844: 82 75 28                 s0 = u64 [a0 + 0x28]
  4847: 81 77 30                 a0 = i32 [a0 + 0x30]
  4850: 7b 17 40                 u64 [sp + 0x40] = a0
  4853: 95 66 01                 s1 = s1 + 0x1
  4856: 01                       fallthrough
      :                          @344
  4857: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
  4860: 51 06 27                 jump @349 if s1 == 0
      :                          @345
  4863: 82 59 20                 a2 = u64 [s0 + 0x20]
  4866: 82 17 48                 a0 = u64 [sp + 0x48]
  4869: 82 18 40                 a1 = u64 [sp + 0x40]
  4872: b4 90 01 5c              ra = 92, jump [a2]
      :                          @346 [@dyn 46]
  4876: 51 07 ed                 jump @344 if a0 == 0
      :                          @347
  4879: 33 08 01                 a1 = 0x1
  4882: 01                       fallthrough
      :                          @348
  4883: 64 87                    a0 = a1
  4885: 82 10 60                 ra = u64 [sp + 0x60]
  4888: 82 15 58                 s0 = u64 [sp + 0x58]
  4891: 82 16 50                 s1 = u64 [sp + 0x50]
  4894: 95 11 68                 sp = sp + 0x68
  4897: 32 00                    ret
      :                          @349
  4899: 82 16 48                 s1 = u64 [sp + 0x48]
  4902: 64 67                    a0 = s1
  4904: 64 58                    a1 = s0
  4906: 82 19 18                 a2 = u64 [sp + 0x18]
  4909: 82 1a 38                 a3 = u64 [sp + 0x38]
  4912: 82 1b 30                 a4 = u64 [sp + 0x30]
  4915: 50 10 5e 89 00           ra = 94, jump @363
      :                          @350 [@dyn 47]
  4920: 33 08 01                 a1 = 0x1
  4923: 52 07 d8                 jump @348 if a0 != 0
      :                          @351
  4926: 82 5a 18                 a3 = u64 [s0 + 0x18]
  4929: 64 67                    a0 = s1
  4931: 82 18 20                 a1 = u64 [sp + 0x20]
  4934: 82 19 28                 a2 = u64 [sp + 0x28]
  4937: b4 a0 01 60              ra = 96, jump [a3]
      :                          @352 [@dyn 48]
  4941: 33 08 01                 a1 = 0x1
  4944: 52 07 c3                 jump @348 if a0 != 0
      :                          @353
  4947: 82 17 10                 a0 = u64 [sp + 0x10]
  4950: 9a 77                    a0 = -a0
  4952: 7b 17 38                 u64 [sp + 0x38] = a0
  4955: 33 06 ff                 s1 = 0xffffffffffffffff
  4958: 01                       fallthrough
      :                          @354
  4959: 82 17 38                 a0 = u64 [sp + 0x38]
  4962: c8 67 07                 a0 = a0 + s1
  4965: 51 17 ff 42              jump @361 if a0 == 4294967295
      :                          @355
  4969: 82 59 20                 a2 = u64 [s0 + 0x20]
  4972: 82 17 48                 a0 = u64 [sp + 0x48]
  4975: 82 18 40                 a1 = u64 [sp + 0x40]
  4978: b4 90 01 62              ra = 98, jump [a2]
      :                          @356 [@dyn 49]
  4982: 95 66 01                 s1 = s1 + 0x1
  4985: 51 07 e6                 jump @354 if a0 == 0
      :                          @357
  4988: 28 37                    jump @362
      :                          @358
  4990: 82 6a 18                 a3 = u64 [s1 + 0x18]
  4993: 82 17 48                 a0 = u64 [sp + 0x48]
  4996: 82 18 20                 a1 = u64 [sp + 0x20]
  4999: 82 19 28                 a2 = u64 [sp + 0x28]
  5002: b4 a0 01 64              ra = 100, jump [a3]
      :                          @359 [@dyn 50]
  5006: 33 08 01                 a1 = 0x1
  5009: 52 07 82                 jump @348 if a0 != 0
      :                          @360
  5012: 33 08                    a1 = 0
  5014: 82 16                    s1 = u64 [sp]
  5016: 82 17 10                 a0 = u64 [sp + 0x10]
  5019: 7a 67 30                 u32 [s1 + 0x30] = a0
  5022: 82 17 08                 a0 = u64 [sp + 0x8]
  5025: 78 67 38                 u8 [s1 + 0x38] = a0
  5028: 28 6f ff                 jump @348
      :                          @361
  5031: 82 16 10                 s1 = u64 [sp + 0x10]
  5034: 82 17 10                 a0 = u64 [sp + 0x10]
  5037: d8 76 08                 a1 = s1 <u a0
  5040: 28 63 ff                 jump @348
      :                          @362
  5043: 82 17 10                 a0 = u64 [sp + 0x10]
  5046: d8 76 08                 a1 = s1 <u a0
  5049: 28 5a ff                 jump @348
      :                          @363
  5052: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  5055: 7b 10 20                 u64 [sp + 0x20] = ra
  5058: 7b 15 18                 u64 [sp + 0x18] = s0
  5061: 7b 16 10                 u64 [sp + 0x10] = s1
  5064: 83 9c                    i32 a5 = a2 + 0
  5066: 33 02 00 00 11           t0 = 0x110000
  5071: 64 a6                    s1 = a3
  5073: 64 85                    s0 = a1
  5075: 64 7a                    a3 = a0
  5077: aa 2c 20                 jump @366 if a5 == t0
      :                          @364
  5080: 82 5c 20                 a5 = u64 [s0 + 0x20]
  5083: 64 a7                    a0 = a3
  5085: 64 98                    a1 = a2
  5087: 7b 1b 08                 u64 [sp + 0x8] = a4
  5090: 7b 1a                    u64 [sp] = a3
  5092: b4 c0 01 66              ra = 102, jump [a5]
      :                          @365 [@dyn 51]
  5096: 82 1a                    a3 = u64 [sp]
  5098: 82 1b 08                 a4 = u64 [sp + 0x8]
  5101: 64 78                    a1 = a0
  5103: 33 07 01                 a0 = 0x1
  5106: 52 08 20                 jump @369 if a1 != 0
      :                          @366
  5109: 51 06 1a                 jump @368 if s1 == 0
      :                          @367
  5112: 82 5c 18                 a5 = u64 [s0 + 0x18]
  5115: 64 a7                    a0 = a3
  5117: 64 68                    a1 = s1
  5119: 64 b9                    a2 = a4
  5121: 82 10 20                 ra = u64 [sp + 0x20]
  5124: 82 15 18                 s0 = u64 [sp + 0x18]
  5127: 82 16 10                 s1 = u64 [sp + 0x10]
  5130: 95 11 28                 sp = sp + 0x28
  5133: 32 0c                    jump [a5]
      :                          @368
  5135: 33 07                    a0 = 0
  5137: 01                       fallthrough
      :                          @369
  5138: 82 10 20                 ra = u64 [sp + 0x20]
  5141: 82 15 18                 s0 = u64 [sp + 0x18]
  5144: 82 16 10                 s1 = u64 [sp + 0x10]
  5147: 95 11 28                 sp = sp + 0x28
  5150: 32 00                    ret
      :                          @370
  5152: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  5156: 7b 10 80 00              u64 [sp + 0x80] = ra
  5160: 7b 15 78                 u64 [sp + 0x78] = s0
  5163: 7b 16 70                 u64 [sp + 0x70] = s1
  5166: 49 11 60 20              u64 [sp + 96] = 0x20
  5170: 33 0a 03                 a3 = 0x3
  5173: 78 1a 68                 u8 [sp + 0x68] = a3
  5176: 82 96 20                 s1 = u64 [a2 + 0x20]
  5179: 49 11 30                 u64 [sp + 48] = 0
  5182: 49 11 40                 u64 [sp + 64] = 0
  5185: 7b 17 50                 u64 [sp + 0x50] = a0
  5188: 7b 18 58                 u64 [sp + 0x58] = a1
  5191: 51 06 07 01              jump @392 if s1 == 0
      :                          @371
  5195: 82 97 28                 a0 = u64 [a2 + 0x28]
  5198: 51 07 74 01              jump @402 if a0 == 0
      :                          @372
  5202: 49 11 28                 u64 [sp + 40] = 0
  5205: 82 95                    s0 = u64 [a2]
  5207: 7b 19 08                 u64 [sp + 0x8] = a2
  5210: 82 98 10                 a1 = u64 [a2 + 0x10]
  5213: 7b 18 18                 u64 [sp + 0x18] = a1
  5216: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  5219: 97 88 03                 a1 = a1 << 0x3
  5222: 98 88 03                 a1 = a1 >> 0x3
  5225: 95 88 01                 a1 = a1 + 0x1
  5228: 7b 18                    u64 [sp] = a1
  5230: 95 55 08                 s0 = s0 + 0x8
  5233: 96 78 38                 a1 = a0 * 0x38
  5236: 95 66 18                 s1 = s1 + 0x18
  5239: 33 07 50                 a0 = 0x50
  5242: 7b 17 10                 u64 [sp + 0x10] = a0
  5245: 01                       fallthrough
      :                          @373
  5246: 7b 18 20                 u64 [sp + 0x20] = a1
  5249: 82 59                    a2 = u64 [s0]
  5251: 51 09 17                 jump @376 if a2 == 0
      :                          @374
  5254: 82 1a 58                 a3 = u64 [sp + 0x58]
  5257: 82 17 50                 a0 = u64 [sp + 0x50]
  5260: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  5263: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5266: b4 a0 01 68              ra = 104, jump [a3]
      :                          @375 [@dyn 52]
  5270: 52 07 51 01              jump @405 if a0 != 0
      :                          @376
  5274: 81 67 10                 a0 = i32 [s1 + 0x10]
  5277: 7a 17 60                 u32 [sp + 0x60] = a0
  5280: 7c 67 18                 a0 = u8 [s1 + 0x18]
  5283: 78 17 68                 u8 [sp + 0x68] = a0
  5286: 81 67 14                 a0 = i32 [s1 + 0x14]
  5289: 7a 17 64                 u32 [sp + 0x64] = a0
  5292: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  5295: 82 67                    a0 = u64 [s1]
  5297: 51 08 26                 jump @381 if a1 == 0
      :                          @377
  5300: 52 18 01 16              jump @379 if a1 != 1
      :                          @378
  5304: 97 77 04                 a0 = a0 << 0x4
  5307: 82 18 18                 a1 = u64 [sp + 0x18]
  5310: c8 87 07                 a0 = a0 + a1
  5313: 82 78 08                 a1 = u64 [a0 + 0x8]
  5316: 82 19 10                 a2 = u64 [sp + 0x10]
  5319: aa 98 07                 jump @380 if a1 == a2
      :                          @379
  5322: 33 08                    a1 = 0
  5324: 28 0f                    jump @382
      :                          @380
  5326: 82 77                    a0 = u64 [a0]
  5328: 82 77                    a0 = u64 [a0]
  5330: 33 08 01                 a1 = 0x1
  5333: 28 06                    jump @382
      :                          @381
  5335: 33 08 01                 a1 = 0x1
  5338: 01                       fallthrough
      :                          @382
  5339: 7b 18 30                 u64 [sp + 0x30] = a1
  5342: 7b 17 38                 u64 [sp + 0x38] = a0
  5345: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  5348: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  5351: 51 08 26                 jump @387 if a1 == 0
      :                          @383
  5354: 52 18 01 16              jump @385 if a1 != 1
      :                          @384
  5358: 97 77 04                 a0 = a0 << 0x4
  5361: 82 18 18                 a1 = u64 [sp + 0x18]
  5364: c8 87 07                 a0 = a0 + a1
  5367: 82 78 08                 a1 = u64 [a0 + 0x8]
  5370: 82 19 10                 a2 = u64 [sp + 0x10]
  5373: aa 98 07                 jump @386 if a1 == a2
      :                          @385
  5376: 33 08                    a1 = 0
  5378: 28 0f                    jump @388
      :                          @386
  5380: 82 77                    a0 = u64 [a0]
  5382: 82 77                    a0 = u64 [a0]
  5384: 33 08 01                 a1 = 0x1
  5387: 28 06                    jump @388
      :                          @387
  5389: 33 08 01                 a1 = 0x1
  5392: 01                       fallthrough
      :                          @388
  5393: 7b 18 40                 u64 [sp + 0x40] = a1
  5396: 7b 17 48                 u64 [sp + 0x48] = a0
  5399: 82 67 08                 a0 = u64 [s1 + 0x8]
  5402: 97 77 04                 a0 = a0 << 0x4
  5405: 82 18 18                 a1 = u64 [sp + 0x18]
  5408: c8 78 08                 a1 = a1 + a0
  5411: 82 87                    a0 = u64 [a1]
  5413: 82 89 08                 a2 = u64 [a1 + 0x8]
  5416: 95 18 30                 a1 = sp + 0x30
  5419: b4 90 01 6a              ra = 106, jump [a2]
      :                          @389 [@dyn 53]
  5423: 52 07 b8 00              jump @405 if a0 != 0
      :                          @390
  5427: 95 55 10                 s0 = s0 + 0x10
  5430: 82 18 20                 a1 = u64 [sp + 0x20]
  5433: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  5436: 95 66 38                 s1 = s1 + 0x38
  5439: 82 17 28                 a0 = u64 [sp + 0x28]
  5442: 95 77 01                 a0 = a0 + 0x1
  5445: 7b 17 28                 u64 [sp + 0x28] = a0
  5448: 52 08 36 ff              jump @373 if a1 != 0
      :                          @391
  5452: 28 69                    jump @400
      :                          @392
  5454: 82 97 18                 a0 = u64 [a2 + 0x18]
  5457: 51 07 71                 jump @402 if a0 == 0
      :                          @393
  5460: 82 95 10                 s0 = u64 [a2 + 0x10]
  5463: 33 0a                    a3 = 0
  5465: 97 78 04                 a1 = a0 << 0x4
  5468: c8 58 08                 a1 = a1 + s0
  5471: 7b 18 20                 u64 [sp + 0x20] = a1
  5474: 7b 19 08                 u64 [sp + 0x8] = a2
  5477: 82 96                    s1 = u64 [a2]
  5479: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  5482: 97 77 04                 a0 = a0 << 0x4
  5485: 98 77 04                 a0 = a0 >> 0x4
  5488: 95 77 01                 a0 = a0 + 0x1
  5491: 7b 17                    u64 [sp] = a0
  5493: 95 66 08                 s1 = s1 + 0x8
  5496: 01                       fallthrough
      :                          @394
  5497: 7b 1a 28                 u64 [sp + 0x28] = a3
  5500: 82 69                    a2 = u64 [s1]
  5502: 51 09 16                 jump @397 if a2 == 0
      :                          @395
  5505: 82 1a 58                 a3 = u64 [sp + 0x58]
  5508: 82 17 50                 a0 = u64 [sp + 0x50]
  5511: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  5514: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5517: b4 a0 01 6c              ra = 108, jump [a3]
      :                          @396 [@dyn 54]
  5521: 52 07 56                 jump @405 if a0 != 0
      :                          @397
  5524: 82 57                    a0 = u64 [s0]
  5526: 82 59 08                 a2 = u64 [s0 + 0x8]
  5529: 95 18 30                 a1 = sp + 0x30
  5532: b4 90 01 6e              ra = 110, jump [a2]
      :                          @398 [@dyn 55]
  5536: 52 07 47                 jump @405 if a0 != 0
      :                          @399
  5539: 95 66 10                 s1 = s1 + 0x10
  5542: 95 55 10                 s0 = s0 + 0x10
  5545: 82 1a 28                 a3 = u64 [sp + 0x28]
  5548: 95 aa 01                 a3 = a3 + 0x1
  5551: 82 17 20                 a0 = u64 [sp + 0x20]
  5554: ab 75 c7                 jump @394 if s0 != a0
      :                          @400
  5557: 82 19 08                 a2 = u64 [sp + 0x8]
  5560: 82 1a                    a3 = u64 [sp]
  5562: 82 97 08                 a0 = u64 [a2 + 0x8]
  5565: ac 7a 0d                 jump @403 if a3 <u a0
      :                          @401
  5568: 28 2c                    jump @406
      :                          @402
  5570: 33 0a                    a3 = 0
  5572: 82 97 08                 a0 = u64 [a2 + 0x8]
  5575: 54 07 25                 jump @406 if a0 <=u 0
      :                          @403
  5578: 82 97                    a0 = u64 [a2]
  5580: 97 a8 04                 a1 = a3 << 0x4
  5583: c8 87 09                 a2 = a0 + a1
  5586: 82 1a 58                 a3 = u64 [sp + 0x58]
  5589: 82 17 50                 a0 = u64 [sp + 0x50]
  5592: 82 98                    a1 = u64 [a2]
  5594: 82 99 08                 a2 = u64 [a2 + 0x8]
  5597: 82 aa 18                 a3 = u64 [a3 + 0x18]
  5600: b4 a0 01 70              ra = 112, jump [a3]
      :                          @404 [@dyn 56]
  5604: 51 07 08                 jump @406 if a0 == 0
      :                          @405
  5607: 33 07 01                 a0 = 0x1
  5610: 28 05                    jump @407
      :                          @406
  5612: 33 07                    a0 = 0
  5614: 01                       fallthrough
      :                          @407
  5615: 82 10 80 00              ra = u64 [sp + 0x80]
  5619: 82 15 78                 s0 = u64 [sp + 0x78]
  5622: 82 16 70                 s1 = u64 [sp + 0x70]
  5625: 95 11 88 00              sp = sp + 0x88
  5629: 32 00                    ret
      :                          @408 [@dyn 57]
  5631: 32 00                    ret
      :                          @409 [@dyn 58]
  5633: 95 11 80                 sp = sp + 0xffffffffffffff80
  5636: 7b 10 78                 u64 [sp + 0x78] = ra
  5639: 7b 15 70                 u64 [sp + 0x70] = s0
  5642: 7b 16 68                 u64 [sp + 0x68] = s1
  5645: 64 92                    t0 = a2
  5647: 33 00                    ra = 0
  5649: 33 0b                    a4 = 0
  5651: 33 05                    s0 = 0
  5653: 14 03 ff fe fe fe fe fe fe fe t1 = 0xfefefefefefefeff
  5663: 33 0a 0a 0a 0a 0a        a3 = 0xa0a0a0a
  5669: 14 04 0a 0a 0a 0a 0a 0a 0a 0a t2 = 0xa0a0a0a0a0a0a0a
  5679: 82 79 10                 a2 = u64 [a0 + 0x10]
  5682: 7b 19 48                 u64 [sp + 0x48] = a2
  5685: 82 79                    a2 = u64 [a0]
  5687: 7b 19 38                 u64 [sp + 0x38] = a2
  5690: 82 77 08                 a0 = u64 [a0 + 0x8]
  5693: 7b 17 30                 u64 [sp + 0x30] = a0
  5696: 33 07 88 01 01           a0 = 0x10188
  5701: 7b 17 08                 u64 [sp + 0x8] = a0
  5704: 3a 07 08 00 03           a0 = u64 [0x30008]
  5709: 7b 17 60                 u64 [sp + 0x60] = a0
  5712: 7b 18 58                 u64 [sp + 0x58] = a1
  5715: 95 88 08                 a1 = a1 + 0x8
  5718: 7b 18                    u64 [sp] = a1
  5720: 33 0c 0a                 a5 = 0xa
  5723: 7b 12 20                 u64 [sp + 0x20] = t0
  5726: 7b 13 18                 u64 [sp + 0x18] = t1
  5729: 7b 14 10                 u64 [sp + 0x10] = t2
  5732: 28 3a                    jump @413
      :                          @410
  5734: 64 06                    s1 = ra
  5736: c8 89 07                 a0 = a2 + a1
  5739: 7c 77 ff                 a0 = u8 [a0 + 0xffffffffffffffff]
  5742: 95 77 f6                 a0 = a0 + 0xfffffffffffffff6
  5745: 88 77 01                 a0 = a0 <u 0x1
  5748: 01                       fallthrough
      :                          @411
  5749: 82 1a 48                 a3 = u64 [sp + 0x48]
  5752: 78 a7                    u8 [a3] = a0
  5754: 82 17 30                 a0 = u64 [sp + 0x30]
  5757: 82 7a 18                 a3 = u64 [a0 + 0x18]
  5760: 82 17 38                 a0 = u64 [sp + 0x38]
  5763: b4 a0 01 76              ra = 118, jump [a3]
      :                          @412 [@dyn 59]
  5767: 64 5b                    a4 = s0
  5769: 82 12 20                 t0 = u64 [sp + 0x20]
  5772: 82 13 18                 t1 = u64 [sp + 0x18]
  5775: 82 14 10                 t2 = u64 [sp + 0x10]
  5778: 64 60                    ra = s1
  5780: 33 0c 0a                 a5 = 0xa
  5783: 82 15 40                 s0 = u64 [sp + 0x40]
  5786: 52 07 63 01              jump @454 if a0 != 0
      :                          @413
  5790: 84 57 ff 00              a0 = s0 & 0xff
  5794: 52 07 57 01              jump @453 if a0 != 0
      :                          @414
  5798: 7b 1b 50                 u64 [sp + 0x50] = a4
  5801: ae 02 0a                 jump @417 if t0 >=u ra
      :                          @415
  5804: 28 ef 00                 jump @444
      :                          @416
  5807: ac 02 ec 00              jump @444 if t0 <u ra
      :                          @417
  5811: c9 02 08                 a1 = t0 - ra
  5814: 82 16 58                 s1 = u64 [sp + 0x58]
  5817: c8 06 06                 s1 = s1 + ra
  5820: 55 18 10 1d              jump @423 if a1 >=u 16
      :                          @418
  5824: aa 02 d8 00              jump @443 if t0 == ra
      :                          @419
  5828: 33 0a                    a3 = 0
  5830: 01                       fallthrough
      :                          @420
  5831: c8 a6 07                 a0 = s1 + a3
  5834: 7c 77                    a0 = u8 [a0]
  5836: aa c7 a5 00              jump @438 if a0 == a5
      :                          @421
  5840: 95 aa 01                 a3 = a3 + 0x1
  5843: ab a8 f4                 jump @420 if a1 != a3
      :                          @422
  5846: 28 c2 00                 jump @443
      :                          @423
  5849: 95 69 07                 a2 = s1 + 0x7
  5852: 84 9a f8                 a3 = a2 & 0xfffffffffffffff8
  5855: c9 6a 07                 a0 = a3 - s1
  5858: d3 6a 0a                 a3 = a3 ^ s1
  5861: 88 aa 01                 a3 = a3 <u 0x1
  5864: 88 7b 01                 a4 = a0 <u 0x1
  5867: d4 ba 0a                 a3 = a3 | a4
  5870: 51 0a 45                 jump @429 if a3 == 0
      :                          @424
  5873: 33 07                    a0 = 0
  5875: 95 8a f0                 a3 = a1 + 0xfffffffffffffff0
  5878: 82 1b                    a4 = u64 [sp]
  5880: c8 0b 0b                 a4 = a4 + ra
  5883: 28 08                    jump @426
      :                          @425
  5885: 82 1b                    a4 = u64 [sp]
  5887: c8 0b 0b                 a4 = a4 + ra
  5890: 01                       fallthrough
      :                          @426
  5891: c8 76 0c                 a5 = s1 + a0
  5894: 82 cc                    a5 = u64 [a5]
  5896: c8 7b 09                 a2 = a4 + a0
  5899: 82 99                    a2 = u64 [a2]
  5901: d3 4c 05                 s0 = a5 ^ t2
  5904: c8 35 05                 s0 = s0 + t1
  5907: e0 c5 0c                 a5 = s0 & ~a5
  5910: d3 49 05                 s0 = a2 ^ t2
  5913: c8 35 05                 s0 = s0 + t1
  5916: e0 95 09                 a2 = s0 & ~a2
  5919: d4 c9 09                 a2 = a2 | a5
  5922: 82 1c 60                 a5 = u64 [sp + 0x60]
  5925: d2 c9 09                 a2 = a2 & a5
  5928: 52 09 1f                 jump @432 if a2 != 0
      :                          @427
  5931: 95 77 10                 a0 = a0 + 0x10
  5934: ae 7a d5                 jump @426 if a3 >=u a0
      :                          @428
  5937: 28 16                    jump @432
      :                          @429
  5939: c8 a6 0b                 a4 = s1 + a3
  5942: 7c bb                    a4 = u8 [a4]
  5944: aa cb 51                 jump @441 if a4 == a5
      :                          @430
  5947: 95 aa 01                 a3 = a3 + 0x1
  5950: ab a7 f5                 jump @429 if a0 != a3
      :                          @431
  5953: 95 8a f0                 a3 = a1 + 0xfffffffffffffff0
  5956: ae 7a b9                 jump @425 if a3 >=u a0
      :                          @432
  5959: aa 87 9a 00              jump @450 if a0 == a1
      :                          @433
  5963: 33 0a                    a3 = 0
  5965: c8 76 06                 s1 = s1 + a0
  5968: c9 72 08                 a1 = t0 - a0
  5971: c9 08 08                 a1 = a1 - ra
  5974: 33 0c 0a                 a5 = 0xa
  5977: 82 1b 50                 a4 = u64 [sp + 0x50]
  5980: 01                       fallthrough
      :                          @434
  5981: c8 a6 09                 a2 = s1 + a3
  5984: 7c 99                    a2 = u8 [a2]
  5986: aa c9 0b                 jump @437 if a2 == a5
      :                          @435
  5989: 95 aa 01                 a3 = a3 + 0x1
  5992: ab a8 f5                 jump @434 if a1 != a3
      :                          @436
  5995: 28 2d                    jump @443
      :                          @437
  5997: c8 7a 0a                 a3 = a3 + a0
  6000: 01                       fallthrough
      :                          @438
  6001: c8 0a 0a                 a3 = a3 + ra
  6004: 95 a0 01                 ra = a3 + 0x1
  6007: ae 2a 38 ff              jump @416 if a3 >=u t0
      :                          @439
  6011: 82 17 58                 a0 = u64 [sp + 0x58]
  6014: c8 7a 0a                 a3 = a3 + a0
  6017: 7c a7                    a0 = u8 [a3]
  6019: ab c7 2c ff              jump @416 if a0 != a5
      :                          @440
  6023: 28 61                    jump @451
      :                          @441
  6025: 82 1b 50                 a4 = u64 [sp + 0x50]
  6028: c8 0a 0a                 a3 = a3 + ra
  6031: 95 a0 01                 ra = a3 + 0x1
  6034: ac 2a e9                 jump @439 if a3 <u t0
      :                          @442
  6037: 28 1a ff                 jump @416
      :                          @443
  6040: 64 20                    ra = t0
  6042: 01                       fallthrough
      :                          @444
  6043: 49 11 40 01              u64 [sp + 64] = 0x1
  6047: 64 b5                    s0 = a4
  6049: 64 26                    s1 = t0
  6051: aa 2b 56                 jump @453 if a4 == t0
      :                          @445
  6054: 82 17 48                 a0 = u64 [sp + 0x48]
  6057: 7c 77                    a0 = u8 [a0]
  6059: 51 07 22                 jump @448 if a0 == 0
      :                          @446
  6062: 82 17 30                 a0 = u64 [sp + 0x30]
  6065: 82 7a 18                 a3 = u64 [a0 + 0x18]
  6068: 33 09 04                 a2 = 0x4
  6071: 82 17 38                 a0 = u64 [sp + 0x38]
  6074: 82 18 08                 a1 = u64 [sp + 0x8]
  6077: 7b 10 28                 u64 [sp + 0x28] = ra
  6080: b4 a0 01 78              ra = 120, jump [a3]
      :                          @447 [@dyn 60]
  6084: 82 1b 50                 a4 = u64 [sp + 0x50]
  6087: 82 10 28                 ra = u64 [sp + 0x28]
  6090: 52 07 33                 jump @454 if a0 != 0
      :                          @448
  6093: c9 b6 09                 a2 = s1 - a4
  6096: 82 18 58                 a1 = u64 [sp + 0x58]
  6099: c8 b8 08                 a1 = a1 + a4
  6102: ab b6 90 fe              jump @410 if s1 != a4
      :                          @449
  6106: 64 06                    s1 = ra
  6108: 33 07                    a0 = 0
  6110: 28 97 fe                 jump @411
      :                          @450
  6113: 64 20                    ra = t0
  6115: 82 1b 50                 a4 = u64 [sp + 0x50]
  6118: 28 b5                    jump @444
      :                          @451
  6120: 49 11 40                 u64 [sp + 64] = 0
  6123: 64 05                    s0 = ra
  6125: 64 06                    s1 = ra
  6127: 82 17 48                 a0 = u64 [sp + 0x48]
  6130: 7c 77                    a0 = u8 [a0]
  6132: 52 07 ba                 jump @446 if a0 != 0
      :                          @452
  6135: 28 d6                    jump @448
      :                          @453
  6137: 33 07                    a0 = 0
  6139: 28 06                    jump @455
      :                          @454
  6141: 33 07 01                 a0 = 0x1
  6144: 01                       fallthrough
      :                          @455
  6145: 82 10 78                 ra = u64 [sp + 0x78]
  6148: 82 15 70                 s0 = u64 [sp + 0x70]
  6151: 82 16 68                 s1 = u64 [sp + 0x68]
  6154: 95 11 80 00              sp = sp + 0x80
  6158: 32 00                    ret
      :                          @456 [@dyn 61]
  6160: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  6163: 7b 10 20                 u64 [sp + 0x20] = ra
  6166: 7b 15 18                 u64 [sp + 0x18] = s0
  6169: 7b 16 10                 u64 [sp + 0x10] = s1
  6172: 82 75 10                 s0 = u64 [a0 + 0x10]
  6175: 7c 59                    a2 = u8 [s0]
  6177: 82 7b                    a4 = u64 [a0]
  6179: 82 76 08                 s1 = u64 [a0 + 0x8]
  6182: 51 09 32                 jump @460 if a2 == 0
      :                          @457
  6185: 82 6a 18                 a3 = u64 [s1 + 0x18]
  6188: 7b 18 08                 u64 [sp + 0x8] = a1
  6191: 33 08 88 01 01           a1 = 0x10188
  6196: 33 09 04                 a2 = 0x4
  6199: 64 b7                    a0 = a4
  6201: 7b 1b                    u64 [sp] = a4
  6203: b4 a0 01 7c              ra = 124, jump [a3]
      :                          @458 [@dyn 62]
  6207: 82 18 08                 a1 = u64 [sp + 0x8]
  6210: 82 1b                    a4 = u64 [sp]
  6212: 51 07 14                 jump @460 if a0 == 0
      :                          @459
  6215: 33 07 01                 a0 = 0x1
  6218: 82 10 20                 ra = u64 [sp + 0x20]
  6221: 82 15 18                 s0 = u64 [sp + 0x18]
  6224: 82 16 10                 s1 = u64 [sp + 0x10]
  6227: 95 11 28                 sp = sp + 0x28
  6230: 32 00                    ret
      :                          @460
  6232: 83 87                    i32 a0 = a1 + 0
  6234: 95 77 f6                 a0 = a0 + 0xfffffffffffffff6
  6237: 88 77 01                 a0 = a0 <u 0x1
  6240: 78 57                    u8 [s0] = a0
  6242: 82 6c 20                 a5 = u64 [s1 + 0x20]
  6245: 64 b7                    a0 = a4
  6247: 82 10 20                 ra = u64 [sp + 0x20]
  6250: 82 15 18                 s0 = u64 [sp + 0x18]
  6253: 82 16 10                 s1 = u64 [sp + 0x10]
  6256: 95 11 28                 sp = sp + 0x28
  6259: 32 0c                    jump [a5]
      :                          @461 [@dyn 63]
  6261: 64 8a                    a3 = a1
  6263: 33 08 58 01 01           a1 = 0x10158
  6268: 64 a9                    a2 = a3
  6270: 28 a2 fb                 jump @370
      :                          @462
  6273: 95 11 70 ff              sp = sp + 0xffffffffffffff70
  6277: 7b 10 88 00              u64 [sp + 0x88] = ra
  6281: 7b 15 80 00              u64 [sp + 0x80] = s0
  6285: 7b 16 78                 u64 [sp + 0x78] = s1
  6288: 64 75                    s0 = a0
  6290: 7c 77 08                 a0 = u8 [a0 + 0x8]
  6293: 64 8b                    a4 = a1
  6295: 33 08 01                 a1 = 0x1
  6298: 33 06 01                 s1 = 0x1
  6301: 51 07 1d                 jump @464 if a0 == 0
      :                          @463
  6304: 78 56 08                 u8 [s0 + 0x8] = s1
  6307: 46 15 09 01              u8 [s0 + 9] = 0x1
  6311: 64 57                    a0 = s0
  6313: 82 10 88 00              ra = u64 [sp + 0x88]
  6317: 82 15 80 00              s0 = u64 [sp + 0x80]
  6321: 82 16 78                 s1 = u64 [sp + 0x78]
  6324: 95 11 90 00              sp = sp + 0x90
  6328: 32 00                    ret
      :                          @464
  6330: 64 9a                    a3 = a2
  6332: 82 5c                    a5 = u64 [s0]
  6334: 80 c7 34                 a0 = u32 [a5 + 0x34]
  6337: 7c 58 09                 a1 = u8 [s0 + 0x9]
  6340: 84 79 04                 a2 = a0 & 0x4
  6343: 52 09 45                 jump @470 if a2 != 0
      :                          @465
  6346: 51 08 32                 jump @468 if a1 == 0
      :                          @466
  6349: 82 c8 28                 a1 = u64 [a5 + 0x28]
  6352: 82 c7 20                 a0 = u64 [a5 + 0x20]
  6355: 82 83 18                 t1 = u64 [a1 + 0x18]
  6358: 33 08 8c 01 01           a1 = 0x1018c
  6363: 33 09 02                 a2 = 0x2
  6366: 64 a6                    s1 = a3
  6368: 7b 1b 10                 u64 [sp + 0x10] = a4
  6371: 7b 1c 08                 u64 [sp + 0x8] = a5
  6374: b4 30 02 80 00           ra = 128, jump [t1]
      :                          @467 [@dyn 64]
  6379: 82 1c 08                 a5 = u64 [sp + 0x8]
  6382: 82 1b 10                 a4 = u64 [sp + 0x10]
  6385: 64 6a                    a3 = s1
  6387: 33 08 01                 a1 = 0x1
  6390: 33 06 01                 s1 = 0x1
  6393: 52 07 a7                 jump @463 if a0 != 0
      :                          @468
  6396: 64 b7                    a0 = a4
  6398: 64 c8                    a1 = a5
  6400: b4 a0 02 82 00           ra = 130, jump [a3]
      :                          @469 [@dyn 65]
  6405: 33 08 01                 a1 = 0x1
  6408: 64 76                    s1 = a0
  6410: 28 96                    jump @463
      :                          @470
  6412: 52 08 37                 jump @474 if a1 != 0
      :                          @471
  6415: 82 c8 28                 a1 = u64 [a5 + 0x28]
  6418: 82 c7 20                 a0 = u64 [a5 + 0x20]
  6421: 82 83 18                 t1 = u64 [a1 + 0x18]
  6424: 33 08 90 01 01           a1 = 0x10190
  6429: 33 09 01                 a2 = 0x1
  6432: 33 06 01                 s1 = 0x1
  6435: 7b 1a                    u64 [sp] = a3
  6437: 7b 1b 10                 u64 [sp + 0x10] = a4
  6440: 7b 1c 08                 u64 [sp + 0x8] = a5
  6443: b4 30 02 84 00           ra = 132, jump [t1]
      :                          @472 [@dyn 66]
  6448: 82 1c 08                 a5 = u64 [sp + 0x8]
  6451: 82 1b 10                 a4 = u64 [sp + 0x10]
  6454: 82 1a                    a3 = u64 [sp]
  6456: 33 08 01                 a1 = 0x1
  6459: 52 07 65 ff              jump @463 if a0 != 0
      :                          @473
  6463: 81 c7 34                 a0 = i32 [a5 + 0x34]
  6466: 01                       fallthrough
      :                          @474
  6467: 33 06 01                 s1 = 0x1
  6470: 78 16 37                 u8 [sp + 0x37] = s1
  6473: 82 c8 20                 a1 = u64 [a5 + 0x20]
  6476: 82 c9 28                 a2 = u64 [a5 + 0x28]
  6479: 7b 18 18                 u64 [sp + 0x18] = a1
  6482: 7b 19 20                 u64 [sp + 0x20] = a2
  6485: 95 18 37                 a1 = sp + 0x37
  6488: 7b 18 28                 u64 [sp + 0x28] = a1
  6491: 81 c8 30                 a1 = i32 [a5 + 0x30]
  6494: 7c c9 38                 a2 = u8 [a5 + 0x38]
  6497: 82 c3                    t1 = u64 [a5]
  6499: 82 c4 08                 t2 = u64 [a5 + 0x8]
  6502: 82 c0 10                 ra = u64 [a5 + 0x10]
  6505: 82 c2 18                 t0 = u64 [a5 + 0x18]
  6508: 7a 17 6c                 u32 [sp + 0x6c] = a0
  6511: 7a 18 68                 u32 [sp + 0x68] = a1
  6514: 78 19 70                 u8 [sp + 0x70] = a2
  6517: 7b 13 38                 u64 [sp + 0x38] = t1
  6520: 7b 14 40                 u64 [sp + 0x40] = t2
  6523: 7b 10 48                 u64 [sp + 0x48] = ra
  6526: 7b 12 50                 u64 [sp + 0x50] = t0
  6529: 95 17 18                 a0 = sp + 0x18
  6532: 7b 17 58                 u64 [sp + 0x58] = a0
  6535: 33 07 58 01 01           a0 = 0x10158
  6540: 7b 17 60                 u64 [sp + 0x60] = a0
  6543: 95 18 38                 a1 = sp + 0x38
  6546: 64 b7                    a0 = a4
  6548: b4 a0 02 86 00           ra = 134, jump [a3]
      :                          @475 [@dyn 67]
  6553: 52 07 21                 jump @478 if a0 != 0
      :                          @476
  6556: 82 18 60                 a1 = u64 [sp + 0x60]
  6559: 82 17 58                 a0 = u64 [sp + 0x58]
  6562: 82 8a 18                 a3 = u64 [a1 + 0x18]
  6565: 33 08 8e 01 01           a1 = 0x1018e
  6570: 33 09 02                 a2 = 0x2
  6573: b4 a0 02 88 00           ra = 136, jump [a3]
      :                          @477 [@dyn 68]
  6578: 64 76                    s1 = a0
  6580: 33 08 01                 a1 = 0x1
  6583: 28 e9 fe                 jump @463
      :                          @478
  6586: 33 08 01                 a1 = 0x1
  6589: 28 e3 fe                 jump @463
      :                          @479
  6592: 51 08 9b 00              jump @500 if a1 == 0
      :                          @480
  6596: 64 79                    a2 = a0
  6598: 7c 77                    a0 = u8 [a0]
  6600: 51 07 91 00              jump @499 if a0 == 0
      :                          @481
  6604: 51 27 ff 00 90 00        jump @501 if a0 == 255
      :                          @482
  6610: 6c 7a                    a3 = sext.b a0
  6612: 57 0a 09                 jump @484 if a3 <s 0
      :                          @483
  6615: 33 0a                    a3 = 0
  6617: 33 08                    a1 = 0
  6619: 28 73                    jump @498
      :                          @484
  6621: 55 27 c0 00 0d           jump @486 if a0 >=u 192
      :                          @485
  6626: 33 0a 01                 a3 = 0x1
  6629: 33 0b 80                 a4 = 0xffffffffffffff80
  6632: 28 4a                    jump @495
      :                          @486
  6634: 55 27 e0 00 0e           jump @488 if a0 >=u 224
      :                          @487
  6639: 33 0a 02                 a3 = 0x2
  6642: 33 0b 40 ff              a4 = 0xffffffffffffff40
  6646: 28 3c                    jump @495
      :                          @488
  6648: 55 27 f0 00 0e           jump @490 if a0 >=u 240
      :                          @489
  6653: 33 0a 03                 a3 = 0x3
  6656: 33 0b 20 ff              a4 = 0xffffffffffffff20
  6660: 28 2e                    jump @495
      :                          @490
  6662: 55 27 f8 00 0e           jump @492 if a0 >=u 248
      :                          @491
  6667: 33 0a 04                 a3 = 0x4
  6670: 33 0b 10 ff              a4 = 0xffffffffffffff10
  6674: 28 20                    jump @495
      :                          @492
  6676: 55 27 fc 00 0e           jump @494 if a0 >=u 252
      :                          @493
  6681: 33 0a 05                 a3 = 0x5
  6684: 33 0b 08 ff              a4 = 0xffffffffffffff08
  6688: 28 12                    jump @495
      :                          @494
  6690: 88 7a fe 00              a3 = a0 <u 0xfe
  6694: 33 0b 04 ff              a4 = 0xffffffffffffff04
  6698: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  6702: 85 aa 07                 a3 = a3 ^ 0x7
  6705: 01                       fallthrough
      :                          @495
  6706: ae 8a 2b                 jump @502 if a3 >=u a1
      :                          @496
  6709: 33 08                    a1 = 0
  6711: c8 b7 07                 a0 = a0 + a4
  6714: 64 ab                    a4 = a3
  6716: 01                       fallthrough
      :                          @497
  6717: c8 b9 0c                 a5 = a2 + a4
  6720: 7c cc                    a5 = u8 [a5]
  6722: 97 88 08                 a1 = a1 << 0x8
  6725: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  6728: d4 c8 08                 a1 = a1 | a5
  6731: 52 0b f2                 jump @497 if a4 != 0
      :                          @498
  6734: 8a a9 03                 i32 a2 = a3 << 0x3
  6737: cf 97 07                 a0 = a0 << a2
  6740: c8 87 07                 a0 = a0 + a1
  6743: 32 00                    ret
      :                          @499
  6745: 32 00                    ret
      :                          @500
  6747: 00                       trap
      :                          @501
  6748: 00                       trap
      :                          @502
  6749: 00                       trap
      :                          @503 [@dyn 69]
  6750: 95 11 d0                 sp = sp + 0xffffffffffffffd0
  6753: 7b 10 28                 u64 [sp + 0x28] = ra
  6756: 7b 15 20                 u64 [sp + 0x20] = s0
  6759: 7b 16 18                 u64 [sp + 0x18] = s1
  6762: 64 86                    s1 = a1
  6764: 82 88 28                 a1 = u64 [a1 + 0x28]
  6767: 82 6a 20                 a3 = u64 [s1 + 0x20]
  6770: 82 8b 18                 a4 = u64 [a1 + 0x18]
  6773: 64 75                    s0 = a0
  6775: 33 08 50 01 01           a1 = 0x10150
  6780: 33 09 01                 a2 = 0x1
  6783: 64 a7                    a0 = a3
  6785: b4 b0 02 8c 00           ra = 140, jump [a4]
      :                          @504 [@dyn 70]
  6790: 7b 16                    u64 [sp] = s1
  6792: 78 17 08                 u8 [sp + 0x8] = a0
  6795: 46 11 09                 u8 [sp + 9] = 0
  6798: 7b 15 10                 u64 [sp + 0x10] = s0
  6801: 33 09 92 00              a2 = 0x92
  6805: 64 17                    a0 = sp
  6807: 95 18 10                 a1 = sp + 0x10
  6810: 50 20 8e 00 e7 fd        ra = 142, jump @462
      :                          @505 [@dyn 71]
  6816: 33 07 01                 a0 = 0x1
  6819: 7c 18 08                 a1 = u8 [sp + 0x8]
  6822: 52 08 1b                 jump @507 if a1 != 0
      :                          @506
  6825: 82 17                    a0 = u64 [sp]
  6827: 82 78 28                 a1 = u64 [a0 + 0x28]
  6830: 82 77 20                 a0 = u64 [a0 + 0x20]
  6833: 82 8a 18                 a3 = u64 [a1 + 0x18]
  6836: 33 08 91 01 01           a1 = 0x10191
  6841: 33 09 01                 a2 = 0x1
  6844: b4 a0 02 90 00           ra = 144, jump [a3]
      :                          @507 [@dyn 72]
  6849: 82 10 28                 ra = u64 [sp + 0x28]
  6852: 82 15 20                 s0 = u64 [sp + 0x20]
  6855: 82 16 18                 s1 = u64 [sp + 0x18]
  6858: 95 11 30                 sp = sp + 0x30
  6861: 32 00                    ret
      :                          @508 [@dyn 73]
  6863: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  6867: 7b 10 80 00              u64 [sp + 0x80] = ra
  6871: 80 89 34                 a2 = u32 [a1 + 0x34]
  6874: 82 77                    a0 = u64 [a0]
  6876: 84 9a 10                 a3 = a2 & 0x10
  6879: 52 0a 16                 jump @511 if a3 != 0
      :                          @509
  6882: 84 99 20                 a2 = a2 & 0x20
  6885: 52 09 41                 jump @514 if a2 != 0
      :                          @510
  6888: 7c 77                    a0 = u8 [a0]
  6890: 82 10 80 00              ra = u64 [sp + 0x80]
  6894: 95 11 88 00              sp = sp + 0x88
  6898: 28 98 f5                 jump @308
      :                          @511
  6901: 7c 77                    a0 = u8 [a0]
  6903: 33 0b 81 00              a4 = 0x81
  6907: 95 19 7f                 a2 = sp + 0x7f
  6910: 33 02 57                 t0 = 0x57
  6913: 01                       fallthrough
      :                          @512
  6914: 64 bc                    a5 = a4
  6916: 84 7b 0f                 a4 = a0 & 0xf
  6919: 97 77 38                 a0 = a0 << 0x38
  6922: 98 77 3c                 a0 = a0 >> 0x3c
  6925: 88 b3 0a                 t1 = a4 <u 0xa
  6928: 33 0a 30                 a3 = 0x30
  6931: da 32 0a                 a3 = t0 if t1 == 0
  6934: be ba 0a                 i32 a3 = a3 + a4
  6937: 78 9a                    u8 [a2] = a3
  6939: 95 99 ff                 a2 = a2 + 0xffffffffffffffff
  6942: 95 cb ff                 a4 = a5 + 0xffffffffffffffff
  6945: 52 07 e1                 jump @512 if a0 != 0
      :                          @513
  6948: 28 31                    jump @516
      :                          @514
  6950: 7c 77                    a0 = u8 [a0]
  6952: 33 0b 81 00              a4 = 0x81
  6956: 95 19 7f                 a2 = sp + 0x7f
  6959: 33 02 37                 t0 = 0x37
  6962: 01                       fallthrough
      :                          @515
  6963: 64 bc                    a5 = a4
  6965: 84 7b 0f                 a4 = a0 & 0xf
  6968: 97 77 38                 a0 = a0 << 0x38
  6971: 98 77 3c                 a0 = a0 >> 0x3c
  6974: 88 b3 0a                 t1 = a4 <u 0xa
  6977: 33 0a 30                 a3 = 0x30
  6980: da 32 0a                 a3 = t0 if t1 == 0
  6983: be ba 0a                 i32 a3 = a3 + a4
  6986: 78 9a                    u8 [a2] = a3
  6988: 95 99 ff                 a2 = a2 + 0xffffffffffffffff
  6991: 95 cb ff                 a4 = a5 + 0xffffffffffffffff
  6994: 52 07 e1                 jump @515 if a0 != 0
      :                          @516
  6997: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
  7000: 56 27 80 00 28           jump @519 if a0 >u 128
      :                          @517
  7005: 9a bb 81 00              a4 = 0x81 - a4
  7009: 64 1a                    a3 = sp
  7011: c8 7a 0a                 a3 = a3 + a0
  7014: 33 09 02                 a2 = 0x2
  7017: 64 87                    a0 = a1
  7019: 33 08 92 01 01           a1 = 0x10192
  7024: 50 20 94 00 41 f6        ra = 148, jump @318
      :                          @518 [@dyn 74]
  7030: 82 10 80 00              ra = u64 [sp + 0x80]
  7034: 95 11 88 00              sp = sp + 0x88
  7038: 32 00                    ret
      :                          @519
  7040: 00                       trap
