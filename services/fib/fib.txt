// RO data = 328/328 bytes
// RW data = 16/4176 bytes
// Stack size = 8192 bytes
// Jump table entry point size = 2 bytes
// RO data = [70, 73, 66, 32, 111, 110, 95, 116, 114, 97, 110, 115, 102, 101, 114, 58, 32, 115, 116, 97, 114, 116, 95, 97, 100, 100, 114, 101, 115, 115, 61, 32, 108, 101, 110, 103, 116, 104, 61, 0, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 31, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0]
// RW data = [75, 89, 134, 56, 214, 197, 109, 52, 128, 128, 128, 128, 128, 128, 128, 128]
// Instructions = 1294
// Code size = 3701 bytes

      :                          @0
     0: 28 ca 00 00 00           jump @17
      :                          @1
     5: 28 20 01 00 00           jump @22
      :                          @2
    10: 28 e6 02                 jump @78
      :                          @3 [@dyn 1]
    13: 95 11 78 ff              sp = sp + 0xffffffffffffff78
    17: 7b 10 80 00              u64 [sp + 0x80] = ra
    21: 80 89 34                 a2 = u32 [a1 + 0x34]
    24: 84 9a 10                 a3 = a2 & 0x10
    27: 52 0a 14                 jump @6 if a3 != 0
      :                          @4
    30: 84 99 20                 a2 = a2 & 0x20
    33: 52 09 4f                 jump @10 if a2 != 0
      :                          @5
    36: 82 10 80 00              ra = u64 [sp + 0x80]
    40: 95 11 88 00              sp = sp + 0x88
    44: 28 3c 08                 jump @199
      :                          @6
    47: 82 7b                    a4 = u64 [a0]
    49: 33 09 81 00              a2 = 0x81
    53: 95 17 7f                 a0 = sp + 0x7f
    56: 33 02 57                 t0 = 0x57
    59: 01                       fallthrough
      :                          @7
    60: 64 9c                    a5 = a2
    62: 98 ba 04                 a3 = a4 >> 0x4
    65: 84 bb 0f                 a4 = a4 & 0xf
    68: 88 b3 0a                 t1 = a4 <u 0xa
    71: 33 09 30                 a2 = 0x30
    74: da 32 09                 a2 = t0 if t1 == 0
    77: be b9 09                 i32 a2 = a2 + a4
    80: 78 79                    u8 [a0] = a2
    82: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
    85: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
    88: 64 ab                    a4 = a3
    90: 52 0a e2                 jump @7 if a3 != 0
      :                          @8
    93: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
    96: 56 27 80 00 69           jump @16 if a0 >u 128
      :                          @9
   101: 9a 9b 81 00              a4 = 0x81 - a2
   105: 64 1a                    a3 = sp
   107: c8 7a 0a                 a3 = a3 + a0
   110: 28 42                    jump @14
      :                          @10
   112: 82 7b                    a4 = u64 [a0]
   114: 33 09 81 00              a2 = 0x81
   118: 95 17 7f                 a0 = sp + 0x7f
   121: 33 02 37                 t0 = 0x37
   124: 01                       fallthrough
      :                          @11
   125: 64 9c                    a5 = a2
   127: 98 ba 04                 a3 = a4 >> 0x4
   130: 84 bb 0f                 a4 = a4 & 0xf
   133: 88 b3 0a                 t1 = a4 <u 0xa
   136: 33 09 30                 a2 = 0x30
   139: da 32 09                 a2 = t0 if t1 == 0
   142: be b9 09                 i32 a2 = a2 + a4
   145: 78 79                    u8 [a0] = a2
   147: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
   150: 95 c9 ff                 a2 = a5 + 0xffffffffffffffff
   153: 64 ab                    a4 = a3
   155: 52 0a e2                 jump @11 if a3 != 0
      :                          @12
   158: 95 c7 fe                 a0 = a5 + 0xfffffffffffffffe
   161: 56 27 80 00 28           jump @16 if a0 >u 128
      :                          @13
   166: 9a 9b 81 00              a4 = 0x81 - a2
   170: 64 1a                    a3 = sp
   172: c8 7a 0a                 a3 = a3 + a0
   175: 01                       fallthrough
      :                          @14
   176: 33 09 02                 a2 = 0x2
   179: 64 87                    a0 = a1
   181: 33 08 28 00 01           a1 = 0x10028
   186: 50 10 04 cf 08           ra = 4, jump @209
      :                          @15 [@dyn 2]
   191: 82 10 80 00              ra = u64 [sp + 0x80]
   195: 95 11 88 00              sp = sp + 0x88
   199: 32 00                    ret
      :                          @16
   201: 00                       trap
      :                          @17 [export #0: 'refine']
   202: 95 11 e0                 sp = sp + 0xffffffffffffffe0
   205: 7b 10 18                 u64 [sp + 0x18] = ra
   208: 7b 15 10                 u64 [sp + 0x10] = s0
   211: 48 11 08                 u32 [sp + 8] = 0
   214: 49 01                    u64 [sp + 0] = 0
   216: 64 17                    a0 = sp
   218: 33 09 0c                 a2 = 0xc
   221: 33 0a 05                 a3 = 0x5
   224: 33 08                    a1 = 0
   226: 33 0b                    a4 = 0
   228: 33 0c                    a5 = 0
   230: 0a 12                    ecalli 18 // 'fetch'
   232: 01                       fallthrough
      :                          @18
   233: 51 17 ff 14              jump @20 if a0 == 4294967295
      :                          @19
   237: 81 17 04                 a0 = i32 [sp + 0x4]
   240: 81 18 08                 a1 = i32 [sp + 0x8]
   243: 81 19                    a2 = i32 [sp]
   245: be 78 08                 i32 a1 = a1 + a0
   248: 83 99 01                 i32 a2 = a2 + 0x1
   251: 28 0b                    jump @21
      :                          @20
   253: 33 07                    a0 = 0
   255: 33 09 01                 a2 = 0x1
   258: 33 08 01                 a1 = 0x1
   261: 01                       fallthrough
      :                          @21
   262: 7a 19                    u32 [sp] = a2
   264: 7a 18 04                 u32 [sp + 0x4] = a1
   267: 7a 17 08                 u32 [sp + 0x8] = a0
   270: 64 17                    a0 = sp
   272: 33 08 0c                 a1 = 0xc
   275: 0a 13                    ecalli 19 // 'export'
   277: 64 17                    a0 = sp
   279: 33 08 0c                 a1 = 0xc
   282: 82 10 18                 ra = u64 [sp + 0x18]
   285: 82 15 10                 s0 = u64 [sp + 0x10]
   288: 95 11 20                 sp = sp + 0x20
   291: 32 00                    ret
      :                          @22 [export #1: 'accumulate']
   293: 95 11 d8                 sp = sp + 0xffffffffffffffd8
   296: 7b 10 20                 u64 [sp + 0x20] = ra
   299: 7b 15 18                 u64 [sp + 0x18] = s0
   302: 7b 16 10                 u64 [sp + 0x10] = s1
   305: 33 09 08                 a2 = 0x8
   308: ac 98 e5 00              jump @52 if a1 <u a2
      :                          @23
   312: 51 17 fc b3 01           jump @73 if a0 == 4294967292
      :                          @24
   317: 51 07 af 01              jump @74 if a0 == 0
      :                          @25
   321: 95 8a f8                 a3 = a1 + 0xfffffffffffffff8
   324: 95 75 08                 s0 = a0 + 0x8
   327: 51 0a 45                 jump @35 if a3 == 0
      :                          @26
   330: 7d 58                    a1 = i8 [s0]
   332: 33 06 01                 s1 = 0x1
   335: 59 08 40                 jump @36 if a1 >=s 0
      :                          @27
   338: 84 89 ff 00              a2 = a1 & 0xff
   342: 33 06 02                 s1 = 0x2
   345: 53 29 c0 00 2d           jump @33 if a2 <u 192
      :                          @28
   350: 33 06 03                 s1 = 0x3
   353: 53 29 e0 00 25           jump @33 if a2 <u 224
      :                          @29
   358: 33 06 04                 s1 = 0x4
   361: 53 29 f0 00 1d           jump @33 if a2 <u 240
      :                          @30
   366: 33 06 05                 s1 = 0x5
   369: 53 29 f8 00 15           jump @33 if a2 <u 248
      :                          @31
   374: 33 06 06                 s1 = 0x6
   377: 53 29 fc 00 0d           jump @33 if a2 <u 252
      :                          @32
   382: 88 98 fe 00              a1 = a2 <u 0xfe
   386: 9a 86 08                 s1 = 0x8 - a1
   389: 01                       fallthrough
      :                          @33
   390: ae 6a 09                 jump @36 if a3 >=u s1
      :                          @34
   393: 28 90 00                 jump @52
      :                          @35
   396: 33 06                    s1 = 0
   398: 01                       fallthrough
      :                          @36
   399: 7b 16                    u64 [sp] = s1
   401: 64 57                    a0 = s0
   403: 64 68                    a1 = s1
   405: 64 a6                    s1 = a3
   407: 50 10 06 40 0c           ra = 6, jump @299
      :                          @37 [@dyn 3]
   412: 82 1a                    a3 = u64 [sp]
   414: 51 07 7b                 jump @52 if a0 == 0
      :                          @38
   417: e4 a6 07                 a0 = maxu(s1, a3)
   420: c9 a7 07                 a0 = a0 - a3
   423: 53 17 60 72              jump @52 if a0 <u 96
      :                          @39
   427: c8 5a 08                 a1 = a3 + s0
   430: 95 76 a0                 s1 = a0 + 0xffffffffffffffa0
   433: 95 87 60                 a0 = a1 + 0x60
   436: 7b 17                    u64 [sp] = a0
   438: 51 06 4c                 jump @50 if s1 == 0
      :                          @40
   441: 7d 78                    a1 = i8 [a0]
   443: 33 05 01                 s0 = 0x1
   446: 59 08 37                 jump @47 if a1 >=s 0
      :                          @41
   449: 84 89 ff 00              a2 = a1 & 0xff
   453: 33 05 02                 s0 = 0x2
   456: 53 29 c0 00 2d           jump @47 if a2 <u 192
      :                          @42
   461: 33 05 03                 s0 = 0x3
   464: 53 29 e0 00 25           jump @47 if a2 <u 224
      :                          @43
   469: 33 05 04                 s0 = 0x4
   472: 53 29 f0 00 1d           jump @47 if a2 <u 240
      :                          @44
   477: 33 05 05                 s0 = 0x5
   480: 53 29 f8 00 15           jump @47 if a2 <u 248
      :                          @45
   485: 33 05 06                 s0 = 0x6
   488: 53 29 fc 00 0d           jump @47 if a2 <u 252
      :                          @46
   493: 88 98 fe 00              a1 = a2 <u 0xfe
   497: 9a 85 08                 s0 = 0x8 - a1
   500: 01                       fallthrough
      :                          @47
   501: ac 56 f8 00              jump @75 if s1 <u s0
      :                          @48
   505: 64 58                    a1 = s0
   507: 50 10 08 dc 0b           ra = 8, jump @299
      :                          @49 [@dyn 4]
   512: 28 07                    jump @51
      :                          @50
   514: 33 05                    s0 = 0
   516: 33 07                    a0 = 0
   518: 01                       fallthrough
      :                          @51
   519: e4 56 08                 a1 = maxu(s1, s0)
   522: c9 58 08                 a1 = a1 - s0
   525: e4 78 08                 a1 = maxu(a1, a0)
   528: c9 78 08                 a1 = a1 - a0
   531: 33 09 21                 a2 = 0x21
   534: ae 98 1b                 jump @54 if a1 >=u a2
      :                          @52
   537: 33 08                    a1 = 0
   539: 33 06 00 00 01           s1 = 0x10000
   544: 01                       fallthrough
      :                          @53
   545: 64 67                    a0 = s1
   547: 82 10 20                 ra = u64 [sp + 0x20]
   550: 82 15 18                 s0 = u64 [sp + 0x18]
   553: 82 16 10                 s1 = u64 [sp + 0x10]
   556: 95 11 28                 sp = sp + 0x28
   559: 32 00                    ret
      :                          @54
   561: 82 19                    a2 = u64 [sp]
   563: c8 95 05                 s0 = s0 + a2
   566: c8 57 07                 a0 = a0 + s0
   569: 7c 79 20                 a2 = u8 [a0 + 0x20]
   572: 51 09 19                 jump @56 if a2 == 0
      :                          @55
   575: 46 11 0e                 u8 [sp + 14] = 0
   578: 95 17 0e                 a0 = sp + 0xe
   581: 33 08 01                 a1 = 0x1
   584: 33 09                    a2 = 0
   586: 33 0a                    a3 = 0
   588: 0a 03                    ecalli 3 // 'write'
   590: 33 08                    a1 = 0
   592: 33 05                    s0 = 0
   594: 28 82 00                 jump @71
      :                          @56
   597: 95 8a df                 a3 = a1 + 0xffffffffffffffdf
   600: 95 76 21                 s1 = a0 + 0x21
   603: 51 0a 51                 jump @67 if a3 == 0
      :                          @57
   606: 7d 67                    a0 = i8 [s1]
   608: 33 05 01                 s0 = 0x1
   611: 59 07 37                 jump @64 if a0 >=s 0
      :                          @58
   614: 84 77 ff 00              a0 = a0 & 0xff
   618: 33 05 02                 s0 = 0x2
   621: 53 27 c0 00 2d           jump @64 if a0 <u 192
      :                          @59
   626: 33 05 03                 s0 = 0x3
   629: 53 27 e0 00 25           jump @64 if a0 <u 224
      :                          @60
   634: 33 05 04                 s0 = 0x4
   637: 53 27 f0 00 1d           jump @64 if a0 <u 240
      :                          @61
   642: 33 05 05                 s0 = 0x5
   645: 53 27 f8 00 15           jump @64 if a0 <u 248
      :                          @62
   650: 33 05 06                 s0 = 0x6
   653: 53 27 fc 00 0d           jump @64 if a0 <u 252
      :                          @63
   658: 88 77 fe 00              a0 = a0 <u 0xfe
   662: 9a 75 08                 s0 = 0x8 - a0
   665: 01                       fallthrough
      :                          @64
   666: 7b 1a                    u64 [sp] = a3
   668: ac 5a 53                 jump @77 if a3 <u s0
      :                          @65
   671: 64 67                    a0 = s1
   673: 64 58                    a1 = s0
   675: 50 10 0a 34 0b           ra = 10, jump @299
      :                          @66 [@dyn 5]
   680: 82 1a                    a3 = u64 [sp]
   682: 28 07                    jump @68
      :                          @67
   684: 33 05                    s0 = 0
   686: 33 07                    a0 = 0
   688: 01                       fallthrough
      :                          @68
   689: c8 56 09                 a2 = s1 + s0
   692: e4 5a 08                 a1 = maxu(a3, s0)
   695: c9 58 08                 a1 = a1 - s0
   698: e6 78 05                 s0 = minu(a1, a0)
   701: 46 11 0e                 u8 [sp + 14] = 0
   704: 95 17 0e                 a0 = sp + 0xe
   707: 33 08 01                 a1 = 0x1
   710: 64 96                    s1 = a2
   712: 64 5a                    a3 = s0
   714: 0a 03                    ecalli 3 // 'write'
   716: 01                       fallthrough
      :                          @69
   717: 55 15 21 21              jump @76 if s0 >=u 33
      :                          @70
   721: 64 68                    a1 = s1
   723: 01                       fallthrough
      :                          @71
   724: 33 06 11 00 03           s1 = 0x30011
   729: 33 07 11 00 03           a0 = 0x30011
   734: 64 59                    a2 = s0
   736: 50 10 0c d2 04           ra = 12, jump @179
      :                          @72 [@dyn 6]
   741: 33 08 20                 a1 = 0x20
   744: 28 39 ff                 jump @53
      :                          @73
   747: 00                       trap
      :                          @74
   748: 00                       trap
      :                          @75
   749: 00                       trap
      :                          @76
   750: 00                       trap
      :                          @77
   751: 00                       trap
      :                          @78 [export #2: 'on_transfer']
   752: 95 11 60 ff              sp = sp + 0xffffffffffffff60
   756: 7b 10 98 00              u64 [sp + 0x98] = ra
   760: 7b 15 90 00              u64 [sp + 0x90] = s0
   764: 7b 16 88 00              u64 [sp + 0x88] = s1
   768: 7b 17 08                 u64 [sp + 0x8] = a0
   771: 7b 18 10                 u64 [sp + 0x10] = a1
   774: 95 17 08                 a0 = sp + 0x8
   777: 7b 17 48                 u64 [sp + 0x48] = a0
   780: 33 07 02                 a0 = 0x2
   783: 7b 17 50                 u64 [sp + 0x50] = a0
   786: 95 18 10                 a1 = sp + 0x10
   789: 7b 18 58                 u64 [sp + 0x58] = a1
   792: 7b 17 60                 u64 [sp + 0x60] = a0
   795: 33 07 f8 00 01           a0 = 0x100f8
   800: 7b 17 18                 u64 [sp + 0x18] = a0
   803: 49 11 20 02              u64 [sp + 32] = 0x2
   807: 49 11 38                 u64 [sp + 56] = 0
   810: 95 18 48                 a1 = sp + 0x48
   813: 7b 18 28                 u64 [sp + 0x28] = a1
   816: 49 11 30 02              u64 [sp + 48] = 0x2
   820: 33 07 00 10              a0 = 0x1000
   824: 33 06 40 00 03           s1 = 0x30040
   829: c8 76 08                 a1 = s1 + a0
   832: 01                       fallthrough
      :                          @79
   833: 82 8a                    a3 = u64 [a1]
   835: 95 a9 4e                 a2 = a3 + 0x4e
   838: ac a9 9a 00              jump @92 if a2 <u a3
      :                          @80
   842: 95 9b 01                 a4 = a2 + 0x1
   845: 88 bc 01                 a5 = a4 <u 0x1
   848: d8 b7 0b                 a4 = a0 <u a4
   851: d4 cb 0b                 a4 = a4 | a5
   854: 52 0b 8a 00              jump @92 if a4 != 0
      :                          @81
   858: 82 8b                    a4 = u64 [a1]
   860: ab ab e5                 jump @79 if a4 != a3
      :                          @82
   863: 7b 89                    u64 [a1] = a2
   865: 33 0c                    a5 = 0
   867: 7b 16                    u64 [sp] = s1
   869: c9 96 07                 a0 = s1 - a2
   872: 95 77 00 10              a0 = a0 + 0x1000
   876: 49 11 68 4e              u64 [sp + 104] = 0x4e
   880: 7b 17 70                 u64 [sp + 0x70] = a0
   883: 49 11 78                 u64 [sp + 120] = 0
   886: 33 08 18 01 01           a1 = 0x10118
   891: 95 17 68                 a0 = sp + 0x68
   894: 95 19 18                 a2 = sp + 0x18
   897: 50 10 0e 77 08           ra = 14, jump @261
      :                          @83 [@dyn 7]
   902: 52 07 5b                 jump @93 if a0 != 0
      :                          @84
   905: 82 15 70                 s0 = u64 [sp + 0x70]
   908: 82 1b 78                 a4 = u64 [sp + 0x78]
   911: 82 16 68                 s1 = u64 [sp + 0x68]
   914: 33 07 02                 a0 = 0x2
   917: 33 08                    a1 = 0
   919: 33 09                    a2 = 0
   921: 64 5a                    a3 = s0
   923: 33 00 10                 ra = 0x10
   926: 0a 64                    ecalli 100 // 'log'
   928: 01                       fallthrough
      :                          @85 [@dyn 8]
   929: 95 68 ff ef              a1 = s1 + 0xffffffffffffefff
   933: 53 28 00 f0 22           jump @91 if a1 <u 4294963200
      :                          @86
   938: 82 18                    a1 = u64 [sp]
   940: 95 87 00 10              a0 = a1 + 0x1000
   944: 01                       fallthrough
      :                          @87
   945: 82 78                    a1 = u64 [a0]
   947: c9 87 09                 a2 = a0 - a1
   950: ab 59 11                 jump @91 if a2 != s0
      :                          @88
   953: c9 68 09                 a2 = a1 - s1
   956: 01                       fallthrough
      :                          @89
   957: 82 7a                    a3 = u64 [a0]
   959: ab 8a f2                 jump @87 if a3 != a1
      :                          @90
   962: 7b 79                    u64 [a0] = a2
   964: 33 0b                    a4 = 0
   966: 01                       fallthrough
      :                          @91
   967: 33 07 00 00 01           a0 = 0x10000
   972: 33 08                    a1 = 0
   974: 82 10 98 00              ra = u64 [sp + 0x98]
   978: 82 15 90 00              s0 = u64 [sp + 0x90]
   982: 82 16 88 00              s1 = u64 [sp + 0x88]
   986: 95 11 a0 00              sp = sp + 0xa0
   990: 32 00                    ret
      :                          @92
   992: 00                       trap
      :                          @93
   993: 00                       trap
      :                          @94
   994: 95 11 b8                 sp = sp + 0xffffffffffffffb8
   997: 7b 10 40                 u64 [sp + 0x40] = ra
  1000: 7b 15 38                 u64 [sp + 0x38] = s0
  1003: 7b 16 30                 u64 [sp + 0x30] = s1
  1006: c8 89 09                 a2 = a2 + a1
  1009: ac 89 52                 jump @102 if a2 <u a1
      :                          @95
  1012: 64 75                    s0 = a0
  1014: 82 77                    a0 = u64 [a0]
  1016: 97 78 01                 a1 = a0 << 0x1
  1019: 33 0a 08                 a3 = 0x8
  1022: e4 a9 09                 a2 = maxu(a2, a3)
  1025: e4 98 06                 s1 = maxu(a1, a2)
  1028: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1031: 98 88 3f                 a1 = a1 >> 0x3f
  1034: 51 07 12                 jump @97 if a0 == 0
      :                          @96
  1037: 82 59 08                 a2 = u64 [s0 + 0x8]
  1040: 7b 19 18                 u64 [sp + 0x18] = a2
  1043: 49 11 20 01              u64 [sp + 32] = 0x1
  1047: 7b 17 28                 u64 [sp + 0x28] = a0
  1050: 28 06                    jump @98
      :                          @97
  1052: 49 11 20                 u64 [sp + 32] = 0
  1055: 01                       fallthrough
      :                          @98
  1056: 64 17                    a0 = sp
  1058: 95 1a 18                 a3 = sp + 0x18
  1061: 64 69                    a2 = s1
  1063: 50 10 12 32              ra = 18, jump @106
      :                          @99 [@dyn 9]
  1067: 82 18                    a1 = u64 [sp]
  1069: 82 17 08                 a0 = u64 [sp + 0x8]
  1072: 51 08 14                 jump @103 if a1 == 0
      :                          @100
  1075: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1085: aa 87 0d                 jump @104 if a0 == a1
      :                          @101
  1088: 52 07 18                 jump @105 if a0 != 0
      :                          @102
  1091: 00                       trap
      :                          @103
  1092: 7b 57 08                 u64 [s0 + 0x8] = a0
  1095: 7b 56                    u64 [s0] = s1
  1097: 01                       fallthrough
      :                          @104
  1098: 82 10 40                 ra = u64 [sp + 0x40]
  1101: 82 15 38                 s0 = u64 [sp + 0x38]
  1104: 82 16 30                 s1 = u64 [sp + 0x30]
  1107: 95 11 48                 sp = sp + 0x48
  1110: 32 00                    ret
      :                          @105
  1112: 00                       trap
      :                          @106
  1113: 95 11 c8                 sp = sp + 0xffffffffffffffc8
  1116: 7b 10 30                 u64 [sp + 0x30] = ra
  1119: 7b 15 28                 u64 [sp + 0x28] = s0
  1122: 7b 16 20                 u64 [sp + 0x20] = s1
  1125: 64 96                    s1 = a2
  1127: 64 73                    t1 = a0
  1129: 51 08 6e                 jump @116 if a1 == 0
      :                          @107
  1132: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1135: 51 07 71                 jump @117 if a0 == 0
      :                          @108
  1138: 82 a9 10                 a2 = u64 [a3 + 0x10]
  1141: 51 09 9e 00              jump @124 if a2 == 0
      :                          @109
  1145: 82 a8                    a1 = u64 [a3]
  1147: 33 02 00 10              t0 = 0x1000
  1151: 33 04 40 00 03           t2 = 0x30040
  1156: c8 24 07                 a0 = t2 + t0
  1159: 01                       fallthrough
      :                          @110
  1160: 82 7a                    a3 = u64 [a0]
  1162: c8 6a 05                 s0 = a3 + s1
  1165: ac a5 c2 00              jump @130 if s0 <u a3
      :                          @111
  1169: 95 5b 01                 a4 = s0 + 0x1
  1172: 88 bc 01                 a5 = a4 <u 0x1
  1175: d8 b2 0b                 a4 = t0 <u a4
  1178: d4 cb 0b                 a4 = a4 | a5
  1181: 52 0b b2 00              jump @130 if a4 != 0
      :                          @112
  1185: 82 7b                    a4 = u64 [a0]
  1187: ab ab e5                 jump @110 if a4 != a3
      :                          @113
  1190: 7b 75                    u64 [a0] = s0
  1192: 33 0c                    a5 = 0
  1194: 7b 13 18                 u64 [sp + 0x18] = t1
  1197: c9 54 07                 a0 = t2 - s0
  1200: 95 77 00 10              a0 = a0 + 0x1000
  1204: 7b 17 10                 u64 [sp + 0x10] = a0
  1207: 7b 18 08                 u64 [sp + 0x8] = a1
  1210: 64 95                    s0 = a2
  1212: 7b 14                    u64 [sp] = t2
  1214: 50 10 14 f4 02           ra = 20, jump @179
      :                          @114 [@dyn 10]
  1219: 54 25 00 10 94 00        jump @131 if s0 <=u 4096
      :                          @115
  1225: 82 13 18                 t1 = u64 [sp + 0x18]
  1228: 82 18 10                 a1 = u64 [sp + 0x10]
  1231: 33 07                    a0 = 0
  1233: 7b 38 08                 u64 [t1 + 0x8] = a1
  1236: 28 b1 00                 jump @137
      :                          @116
  1239: 49 13 08                 u64 [t1 + 8] = 0
  1242: 33 07 01                 a0 = 0x1
  1245: 28 a8 00                 jump @137
      :                          @117
  1248: 33 07 00 10              a0 = 0x1000
  1252: 33 02 40 00 03           t0 = 0x30040
  1257: c8 72 09                 a2 = t0 + a0
  1260: 01                       fallthrough
      :                          @118
  1261: 82 9b                    a4 = u64 [a2]
  1263: c8 6b 0a                 a3 = a4 + s1
  1266: ac ba 5d                 jump @130 if a3 <u a4
      :                          @119
  1269: 95 ac 01                 a5 = a3 + 0x1
  1272: 88 c8 01                 a1 = a5 <u 0x1
  1275: d8 c7 0c                 a5 = a0 <u a5
  1278: d4 c8 08                 a1 = a1 | a5
  1281: 52 08 4e                 jump @130 if a1 != 0
      :                          @120
  1284: 82 98                    a1 = u64 [a2]
  1286: ab b8 e7                 jump @118 if a1 != a4
      :                          @121
  1289: 7b 9a                    u64 [a2] = a3
  1291: 33 0c                    a5 = 0
  1293: 01                       fallthrough
      :                          @122
  1294: ab b8 df                 jump @118 if a1 != a4
      :                          @123
  1297: 28 30                    jump @129
      :                          @124
  1299: 33 07 00 10              a0 = 0x1000
  1303: 33 02 40 00 03           t0 = 0x30040
  1308: c8 72 09                 a2 = t0 + a0
  1311: 01                       fallthrough
      :                          @125
  1312: 82 9b                    a4 = u64 [a2]
  1314: c8 6b 0a                 a3 = a4 + s1
  1317: ac ba 2a                 jump @130 if a3 <u a4
      :                          @126
  1320: 95 ac 01                 a5 = a3 + 0x1
  1323: 88 c8 01                 a1 = a5 <u 0x1
  1326: d8 c7 0c                 a5 = a0 <u a5
  1329: d4 c8 08                 a1 = a1 | a5
  1332: 52 08 1b                 jump @130 if a1 != 0
      :                          @127
  1335: 82 98                    a1 = u64 [a2]
  1337: ab b8 e7                 jump @125 if a1 != a4
      :                          @128
  1340: 7b 9a                    u64 [a2] = a3
  1342: 33 0c                    a5 = 0
  1344: 01                       fallthrough
      :                          @129
  1345: c9 a2 07                 a0 = t0 - a3
  1348: 95 78 00 10              a1 = a0 + 0x1000
  1352: 33 07                    a0 = 0
  1354: 7b 38 08                 u64 [t1 + 0x8] = a1
  1357: 28 38                    jump @137
      :                          @130
  1359: 33 07 01                 a0 = 0x1
  1362: 7b 37 08                 u64 [t1 + 0x8] = a0
  1365: 28 30                    jump @137
      :                          @131
  1367: 64 5c                    a5 = s0
  1369: 82 18                    a1 = u64 [sp]
  1371: 95 87 00 10              a0 = a1 + 0x1000
  1375: 82 13 18                 t1 = u64 [sp + 0x18]
  1378: 82 15 08                 s0 = u64 [sp + 0x8]
  1381: 01                       fallthrough
      :                          @132
  1382: 82 78                    a1 = u64 [a0]
  1384: c9 87 09                 a2 = a0 - a1
  1387: ab 59 11                 jump @136 if a2 != s0
      :                          @133
  1390: c9 c8 09                 a2 = a1 - a5
  1393: 01                       fallthrough
      :                          @134
  1394: 82 7a                    a3 = u64 [a0]
  1396: ab 8a f2                 jump @132 if a3 != a1
      :                          @135
  1399: 7b 79                    u64 [a0] = a2
  1401: 33 0b                    a4 = 0
  1403: 01                       fallthrough
      :                          @136
  1404: 82 18 10                 a1 = u64 [sp + 0x10]
  1407: 33 07                    a0 = 0
  1409: 7b 38 08                 u64 [t1 + 0x8] = a1
  1412: 01                       fallthrough
      :                          @137
  1413: 7b 36 10                 u64 [t1 + 0x10] = s1
  1416: 7b 37                    u64 [t1] = a0
  1418: 82 10 30                 ra = u64 [sp + 0x30]
  1421: 82 15 28                 s0 = u64 [sp + 0x28]
  1424: 82 16 20                 s1 = u64 [sp + 0x20]
  1427: 95 11 38                 sp = sp + 0x38
  1430: 32 00                    ret
      :                          @138
  1432: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1435: 7b 10 40                 u64 [sp + 0x40] = ra
  1438: 7b 15 38                 u64 [sp + 0x38] = s0
  1441: 7b 16 30                 u64 [sp + 0x30] = s1
  1444: 95 88 01                 a1 = a1 + 0x1
  1447: 51 08 53                 jump @146 if a1 == 0
      :                          @139
  1450: 64 75                    s0 = a0
  1452: 82 77                    a0 = u64 [a0]
  1454: 97 79 01                 a2 = a0 << 0x1
  1457: 33 0a 08                 a3 = 0x8
  1460: e4 a8 08                 a1 = maxu(a1, a3)
  1463: e4 89 06                 s1 = maxu(a2, a1)
  1466: 85 68 ff                 a1 = s1 ^ 0xffffffffffffffff
  1469: 98 88 3f                 a1 = a1 >> 0x3f
  1472: 51 07 12                 jump @141 if a0 == 0
      :                          @140
  1475: 82 59 08                 a2 = u64 [s0 + 0x8]
  1478: 7b 19 18                 u64 [sp + 0x18] = a2
  1481: 49 11 20 01              u64 [sp + 32] = 0x1
  1485: 7b 17 28                 u64 [sp + 0x28] = a0
  1488: 28 06                    jump @142
      :                          @141
  1490: 49 11 20                 u64 [sp + 32] = 0
  1493: 01                       fallthrough
      :                          @142
  1494: 64 17                    a0 = sp
  1496: 95 1a 18                 a3 = sp + 0x18
  1499: 64 69                    a2 = s1
  1501: 50 10 16 7c fe           ra = 22, jump @106
      :                          @143 [@dyn 11]
  1506: 82 18                    a1 = u64 [sp]
  1508: 82 17 08                 a0 = u64 [sp + 0x8]
  1511: 51 08 14                 jump @147 if a1 == 0
      :                          @144
  1514: 14 08 01 00 00 00 00 00 00 80 a1 = 0x8000000000000001
  1524: aa 87 0d                 jump @148 if a0 == a1
      :                          @145
  1527: 52 07 18                 jump @149 if a0 != 0
      :                          @146
  1530: 00                       trap
      :                          @147
  1531: 7b 57 08                 u64 [s0 + 0x8] = a0
  1534: 7b 56                    u64 [s0] = s1
  1536: 01                       fallthrough
      :                          @148
  1537: 82 10 40                 ra = u64 [sp + 0x40]
  1540: 82 15 38                 s0 = u64 [sp + 0x38]
  1543: 82 16 30                 s1 = u64 [sp + 0x30]
  1546: 95 11 48                 sp = sp + 0x48
  1549: 32 00                    ret
      :                          @149
  1551: 00                       trap
      :                          @150 [@dyn 12]
  1552: 82 72                    t0 = u64 [a0]
  1554: 33 09 00 f0              a2 = 0xfffffffffffff000
  1558: 95 2a ff ef              a3 = t0 + 0xffffffffffffefff
  1562: ac 9a 27                 jump @156 if a3 <u a2
      :                          @151
  1565: 82 77 08                 a0 = u64 [a0 + 0x8]
  1568: 33 09 40 00 03           a2 = 0x30040
  1573: 95 99 00 10              a2 = a2 + 0x1000
  1577: 01                       fallthrough
      :                          @152
  1578: 82 9a                    a3 = u64 [a2]
  1580: c9 a9 0b                 a4 = a2 - a3
  1583: ab 7b 12                 jump @156 if a4 != a0
      :                          @153
  1586: c9 2a 0b                 a4 = a3 - t0
  1589: 01                       fallthrough
      :                          @154
  1590: 82 9c                    a5 = u64 [a2]
  1592: ab ac f2                 jump @152 if a5 != a3
      :                          @155
  1595: 7b 9b                    u64 [a2] = a4
  1597: 33 08                    a1 = 0
  1599: 32 00                    ret
      :                          @156
  1601: 32 00                    ret
      :                          @157 [@dyn 13]
  1603: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  1606: 7b 10 18                 u64 [sp + 0x18] = ra
  1609: 7b 15 10                 u64 [sp + 0x10] = s0
  1612: 7b 16 08                 u64 [sp + 0x8] = s1
  1615: 64 75                    s0 = a0
  1617: 82 7a 10                 a3 = u64 [a0 + 0x10]
  1620: 82 77                    a0 = u64 [a0]
  1622: c9 a7 07                 a0 = a0 - a3
  1625: 64 96                    s1 = a2
  1627: ac 97 2a                 jump @160 if a0 <u a2
      :                          @158
  1630: 7b 1a                    u64 [sp] = a3
  1632: 82 57 08                 a0 = u64 [s0 + 0x8]
  1635: c8 a7 07                 a0 = a0 + a3
  1638: 64 69                    a2 = s1
  1640: 50 10 1c 4a 01           ra = 28, jump @179
      :                          @159 [@dyn 14]
  1645: 82 17                    a0 = u64 [sp]
  1647: c8 76 06                 s1 = s1 + a0
  1650: 7b 56 10                 u64 [s0 + 0x10] = s1
  1653: 33 07                    a0 = 0
  1655: 82 10 18                 ra = u64 [sp + 0x18]
  1658: 82 15 10                 s0 = u64 [sp + 0x10]
  1661: 82 16 08                 s1 = u64 [sp + 0x8]
  1664: 95 11 20                 sp = sp + 0x20
  1667: 32 00                    ret
      :                          @160
  1669: 64 57                    a0 = s0
  1671: 7b 18                    u64 [sp] = a1
  1673: 64 a8                    a1 = a3
  1675: 64 69                    a2 = s1
  1677: 50 10 1e 55 fd           ra = 30, jump @94
      :                          @161 [@dyn 15]
  1682: 82 18                    a1 = u64 [sp]
  1684: 82 5a 10                 a3 = u64 [s0 + 0x10]
  1687: 28 c7                    jump @158
      :                          @162 [@dyn 16]
  1689: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  1692: 7b 10 20                 u64 [sp + 0x20] = ra
  1695: 7b 15 18                 u64 [sp + 0x18] = s0
  1698: 7b 16 10                 u64 [sp + 0x10] = s1
  1701: 64 86                    s1 = a1
  1703: 83 88                    i32 a1 = a1 + 0
  1705: 33 09 80 00              a2 = 0x80
  1709: 64 7a                    a3 = a0
  1711: ae 98 2b                 jump @167 if a1 >=u a2
      :                          @163
  1714: 82 a8 10                 a1 = u64 [a3 + 0x10]
  1717: 82 a7                    a0 = u64 [a3]
  1719: ab 78 12                 jump @166 if a1 != a0
      :                          @164
  1722: 64 a7                    a0 = a3
  1724: 64 a5                    s0 = a3
  1726: 50 10 22 da fe           ra = 34, jump @138
      :                          @165 [@dyn 17]
  1731: 64 5a                    a3 = s0
  1733: 82 58 10                 a1 = u64 [s0 + 0x10]
  1736: 01                       fallthrough
      :                          @166
  1737: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1740: c8 87 07                 a0 = a0 + a1
  1743: 78 76                    u8 [a0] = s1
  1745: 95 88 01                 a1 = a1 + 0x1
  1748: 7b a8 10                 u64 [a3 + 0x10] = a1
  1751: 28 ab 00                 jump @175
      :                          @167
  1754: 8b 67 0b                 i32 a0 = s1 >> 0xb
  1757: 48 11 0c                 u32 [sp + 12] = 0
  1760: 52 07 1c                 jump @169 if a0 != 0
      :                          @168
  1763: 98 67 06                 a0 = s1 >> 0x6
  1766: 86 77 c0 00              a0 = a0 | 0xc0
  1770: 78 17 0c                 u8 [sp + 0xc] = a0
  1773: 84 67 3f                 a0 = s1 & 0x3f
  1776: 86 77 80 00              a0 = a0 | 0x80
  1780: 78 17 0d                 u8 [sp + 0xd] = a0
  1783: 33 06 02                 s1 = 0x2
  1786: 28 63                    jump @172
      :                          @169
  1788: 8b 67 10                 i32 a0 = s1 >> 0x10
  1791: 52 07 29                 jump @171 if a0 != 0
      :                          @170
  1794: 98 67 0c                 a0 = s1 >> 0xc
  1797: 86 77 e0 00              a0 = a0 | 0xe0
  1801: 78 17 0c                 u8 [sp + 0xc] = a0
  1804: 97 67 34                 a0 = s1 << 0x34
  1807: 98 77 3a                 a0 = a0 >> 0x3a
  1810: 95 77 80 00              a0 = a0 + 0x80
  1814: 78 17 0d                 u8 [sp + 0xd] = a0
  1817: 84 67 3f                 a0 = s1 & 0x3f
  1820: 86 77 80 00              a0 = a0 | 0x80
  1824: 78 17 0e                 u8 [sp + 0xe] = a0
  1827: 33 06 03                 s1 = 0x3
  1830: 28 37                    jump @172
      :                          @171
  1832: 97 67 2b                 a0 = s1 << 0x2b
  1835: 98 77 3d                 a0 = a0 >> 0x3d
  1838: 95 77 f0 00              a0 = a0 + 0xf0
  1842: 78 17 0c                 u8 [sp + 0xc] = a0
  1845: 97 67 2e                 a0 = s1 << 0x2e
  1848: 98 77 3a                 a0 = a0 >> 0x3a
  1851: 95 77 80 00              a0 = a0 + 0x80
  1855: 78 17 0d                 u8 [sp + 0xd] = a0
  1858: 97 67 34                 a0 = s1 << 0x34
  1861: 98 77 3a                 a0 = a0 >> 0x3a
  1864: 95 77 80 00              a0 = a0 + 0x80
  1868: 78 17 0e                 u8 [sp + 0xe] = a0
  1871: 84 67 3f                 a0 = s1 & 0x3f
  1874: 86 77 80 00              a0 = a0 | 0x80
  1878: 78 17 0f                 u8 [sp + 0xf] = a0
  1881: 33 06 04                 s1 = 0x4
  1884: 01                       fallthrough
      :                          @172
  1885: 82 a5 10                 s0 = u64 [a3 + 0x10]
  1888: 82 a7                    a0 = u64 [a3]
  1890: c9 57 07                 a0 = a0 - s0
  1893: ac 67 2d                 jump @176 if a0 <u s1
      :                          @173
  1896: 7b 1a                    u64 [sp] = a3
  1898: 82 a7 08                 a0 = u64 [a3 + 0x8]
  1901: c8 57 07                 a0 = a0 + s0
  1904: 95 18 0c                 a1 = sp + 0xc
  1907: 64 69                    a2 = s1
  1909: 50 10 24 3d              ra = 36, jump @179
      :                          @174 [@dyn 18]
  1913: c8 56 06                 s1 = s1 + s0
  1916: 82 17                    a0 = u64 [sp]
  1918: 7b 76 10                 u64 [a0 + 0x10] = s1
  1921: 01                       fallthrough
      :                          @175
  1922: 33 07                    a0 = 0
  1924: 82 10 20                 ra = u64 [sp + 0x20]
  1927: 82 15 18                 s0 = u64 [sp + 0x18]
  1930: 82 16 10                 s1 = u64 [sp + 0x10]
  1933: 95 11 28                 sp = sp + 0x28
  1936: 32 00                    ret
      :                          @176
  1938: 64 a7                    a0 = a3
  1940: 64 58                    a1 = s0
  1942: 64 69                    a2 = s1
  1944: 64 a5                    s0 = a3
  1946: 50 10 26 48 fc           ra = 38, jump @94
      :                          @177 [@dyn 19]
  1951: 64 5a                    a3 = s0
  1953: 82 55 10                 s0 = u64 [s0 + 0x10]
  1956: 28 c4                    jump @173
      :                          @178 [@dyn 20]
  1958: 64 8a                    a3 = a1
  1960: 33 08 18 01 01           a1 = 0x10118
  1965: 64 a9                    a2 = a3
  1967: 28 49 04                 jump @261
      :                          @179
  1970: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  1973: 7b 10 18                 u64 [sp + 0x18] = ra
  1976: 7b 15 10                 u64 [sp + 0x10] = s0
  1979: 7b 16 08                 u64 [sp + 0x8] = s1
  1982: 53 19 10 64              jump @188 if a2 <u 16
      :                          @180
  1986: 8d 7a                    i32 a3 = -a0
  1988: 84 a2 07                 t0 = a3 & 0x7
  1991: c8 27 0b                 a4 = a0 + t0
  1994: 51 02 15                 jump @183 if t0 == 0
      :                          @181
  1997: 64 8c                    a5 = a1
  1999: 64 75                    s0 = a0
  2001: 01                       fallthrough
      :                          @182
  2002: 7c ca                    a3 = u8 [a5]
  2004: 78 5a                    u8 [s0] = a3
  2006: 95 55 01                 s0 = s0 + 0x1
  2009: 95 cc 01                 a5 = a5 + 0x1
  2012: ac b5 f6                 jump @182 if s0 <u a4
      :                          @183
  2015: c8 28 03                 t1 = a1 + t0
  2018: c9 29 02                 t0 = a2 - t0
  2021: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  2024: 84 38 07                 a1 = t1 & 0x7
  2027: c8 4b 0a                 a3 = a4 + t2
  2030: 51 08 3b                 jump @190 if a1 == 0
      :                          @184
  2033: 58 04 4b                 jump @193 if t2 <=s 0
      :                          @185
  2036: 97 38 03                 a1 = t1 << 0x3
  2039: 84 80 38                 ra = a1 & 0x38
  2042: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  2045: 82 c5                    s0 = u64 [a5]
  2047: 8d 88                    i32 a1 = -a1
  2049: 84 88 38                 a1 = a1 & 0x38
  2052: 95 cc 08                 a5 = a5 + 0x8
  2055: 01                       fallthrough
      :                          @186
  2056: 82 c6                    s1 = u64 [a5]
  2058: d0 05 05                 s0 = s0 >> ra
  2061: cf 86 09                 a2 = s1 << a1
  2064: d4 59 09                 a2 = a2 | s0
  2067: 7b b9                    u64 [a4] = a2
  2069: 95 bb 08                 a4 = a4 + 0x8
  2072: 95 cc 08                 a5 = a5 + 0x8
  2075: 64 65                    s0 = s1
  2077: ac ab eb                 jump @186 if a4 <u a3
      :                          @187
  2080: 28 1c                    jump @193
      :                          @188
  2082: 64 7a                    a3 = a0
  2084: 52 09 21                 jump @194 if a2 != 0
      :                          @189
  2087: 28 2f                    jump @196
      :                          @190
  2089: 58 04 13                 jump @193 if t2 <=s 0
      :                          @191
  2092: 64 38                    a1 = t1
  2094: 01                       fallthrough
      :                          @192
  2095: 82 89                    a2 = u64 [a1]
  2097: 7b b9                    u64 [a4] = a2
  2099: 95 bb 08                 a4 = a4 + 0x8
  2102: 95 88 08                 a1 = a1 + 0x8
  2105: ac ab f6                 jump @192 if a4 <u a3
      :                          @193
  2108: c8 43 08                 a1 = t1 + t2
  2111: 84 29 07                 a2 = t0 & 0x7
  2114: 51 09 14                 jump @196 if a2 == 0
      :                          @194
  2117: c8 a9 09                 a2 = a2 + a3
  2120: 01                       fallthrough
      :                          @195
  2121: 7c 8b                    a4 = u8 [a1]
  2123: 78 ab                    u8 [a3] = a4
  2125: 95 aa 01                 a3 = a3 + 0x1
  2128: 95 88 01                 a1 = a1 + 0x1
  2131: ac 9a f6                 jump @195 if a3 <u a2
      :                          @196
  2134: 82 10 18                 ra = u64 [sp + 0x18]
  2137: 82 15 10                 s0 = u64 [sp + 0x10]
  2140: 82 16 08                 s1 = u64 [sp + 0x8]
  2143: 95 11 20                 sp = sp + 0x20
  2146: 32 00                    ret
      :                          @197 [@dyn 21]
  2148: 82 77                    a0 = u64 [a0]
  2150: 01                       fallthrough
      :                          @198
  2151: 28                       jump @198
      :                          @199
  2152: 95 11 a8                 sp = sp + 0xffffffffffffffa8
  2155: 7b 10 50                 u64 [sp + 0x50] = ra
  2158: 7b 15 48                 u64 [sp + 0x48] = s0
  2161: 7b 16 40                 u64 [sp + 0x40] = s1
  2164: 82 7a                    a3 = u64 [a0]
  2166: 7b 18                    u64 [sp] = a1
  2168: 98 ab 04                 a4 = a3 >> 0x4
  2171: 33 08 27                 a1 = 0x27
  2174: 33 09 2a 00 01           a2 = 0x1002a
  2179: 53 2b 71 02 7e           jump @202 if a4 <u 625
      :                          @200
  2184: 33 08 27                 a1 = 0x27
  2187: 95 1b 3e                 a4 = sp + 0x3e
  2190: 3a 07 00 00 03           a0 = u64 [0x30000]
  2195: 7b 17 10                 u64 [sp + 0x10] = a0
  2198: 49 11 08 f0 d8 00        u64 [sp + 8] = 0xd8f0
  2204: 33 00 7b 14              ra = 0x147b
  2208: 33 03 ff e0 f5 05        t1 = 0x5f5e0ff
  2214: 33 05 9c                 s0 = 0xffffffffffffff9c
  2217: 01                       fallthrough
      :                          @201
  2218: 64 a4                    t2 = a3
  2220: 82 17 10                 a0 = u64 [sp + 0x10]
  2223: d6 7a 0a                 a3 = a3 mulhu a0
  2226: 98 aa 0b                 a3 = a3 >> 0xb
  2229: 82 17 08                 a0 = u64 [sp + 0x8]
  2232: c0 7a 0c                 i32 a5 = a3 * a0
  2235: c8 4c 06                 s1 = a5 + t2
  2238: 97 6c 30                 a5 = s1 << 0x30
  2241: 98 cc 32                 a5 = a5 >> 0x32
  2244: ca 0c 0c                 a5 = a5 * ra
  2247: 98 c7 11                 a0 = a5 >> 0x11
  2250: 98 cc 10                 a5 = a5 >> 0x10
  2253: 84 cc fe 07              a5 = a5 & 0x7fe
  2257: ca 57 07                 a0 = a0 * s0
  2260: c8 67 07                 a0 = a0 + s1
  2263: 97 77 31                 a0 = a0 << 0x31
  2266: 98 77 30                 a0 = a0 >> 0x30
  2269: c8 9c 0c                 a5 = a5 + a2
  2272: 7c c6                    s1 = u8 [a5]
  2274: 7c cc 01                 a5 = u8 [a5 + 0x1]
  2277: c8 97 07                 a0 = a0 + a2
  2280: 7c 72 01                 t0 = u8 [a0 + 0x1]
  2283: 7c 77                    a0 = u8 [a0]
  2285: 78 bc ff                 u8 [a4 + 0xffffffffffffffff] = a5
  2288: 78 b6 fe                 u8 [a4 + 0xfffffffffffffffe] = s1
  2291: 78 b2 01                 u8 [a4 + 0x1] = t0
  2294: 78 b7                    u8 [a4] = a0
  2296: 95 88 fc                 a1 = a1 + 0xfffffffffffffffc
  2299: 95 bb fc                 a4 = a4 + 0xfffffffffffffffc
  2302: ac 43 ac                 jump @201 if t1 <u t2
      :                          @202
  2305: 54 1a 63 36              jump @204 if a3 <=u 99
      :                          @203
  2309: 97 a7 30                 a0 = a3 << 0x30
  2312: 98 77 32                 a0 = a0 >> 0x32
  2315: 96 77 7b 14              a0 = a0 * 0x147b
  2319: 98 77 11                 a0 = a0 >> 0x11
  2322: 96 7b 9c                 a4 = a0 * 0xffffffffffffff9c
  2325: c8 ba 0a                 a3 = a3 + a4
  2328: 97 aa 31                 a3 = a3 << 0x31
  2331: 98 aa 30                 a3 = a3 >> 0x30
  2334: 95 88 fe                 a1 = a1 + 0xfffffffffffffffe
  2337: c8 9a 0a                 a3 = a3 + a2
  2340: 7c ab 01                 a4 = u8 [a3 + 0x1]
  2343: 7c aa                    a3 = u8 [a3]
  2345: 95 1c 19                 a5 = sp + 0x19
  2348: c8 8c 0c                 a5 = a5 + a1
  2351: 78 cb 01                 u8 [a5 + 0x1] = a4
  2354: 78 ca                    u8 [a5] = a3
  2356: 64 7a                    a3 = a0
  2358: 01                       fallthrough
      :                          @204
  2359: 55 1a 0a 14              jump @206 if a3 >=u 10
      :                          @205
  2363: 95 88 ff                 a1 = a1 + 0xffffffffffffffff
  2366: 95 17 19                 a0 = sp + 0x19
  2369: c8 87 07                 a0 = a0 + a1
  2372: 83 a9 30                 i32 a2 = a3 + 0x30
  2375: 78 79                    u8 [a0] = a2
  2377: 28 1c                    jump @207
      :                          @206
  2379: 97 aa 01                 a3 = a3 << 0x1
  2382: 95 88 fe                 a1 = a1 + 0xfffffffffffffffe
  2385: c8 a9 09                 a2 = a2 + a3
  2388: 7c 97 01                 a0 = u8 [a2 + 0x1]
  2391: 7c 99                    a2 = u8 [a2]
  2393: 95 1a 19                 a3 = sp + 0x19
  2396: c8 8a 0a                 a3 = a3 + a1
  2399: 78 a7 01                 u8 [a3 + 0x1] = a0
  2402: 78 a9                    u8 [a3] = a2
  2404: 01                       fallthrough
      :                          @207
  2405: 95 1a 19                 a3 = sp + 0x19
  2408: c8 8a 0a                 a3 = a3 + a1
  2411: 9a 8b 27                 a4 = 0x27 - a1
  2414: 33 08 28 00 01           a1 = 0x10028
  2419: 82 17                    a0 = u64 [sp]
  2421: 33 09                    a2 = 0
  2423: 50 10 2c 12              ra = 44, jump @209
      :                          @208 [@dyn 22]
  2427: 82 10 50                 ra = u64 [sp + 0x50]
  2430: 82 15 48                 s0 = u64 [sp + 0x48]
  2433: 82 16 40                 s1 = u64 [sp + 0x40]
  2436: 95 11 58                 sp = sp + 0x58
  2439: 32 00                    ret
      :                          @209
  2441: 95 11 98                 sp = sp + 0xffffffffffffff98
  2444: 7b 10 60                 u64 [sp + 0x60] = ra
  2447: 7b 15 58                 u64 [sp + 0x58] = s0
  2450: 7b 16 50                 u64 [sp + 0x50] = s1
  2453: 80 73 34                 t1 = u32 [a0 + 0x34]
  2456: 7b 1a 20                 u64 [sp + 0x20] = a3
  2459: 64 9c                    a5 = a2
  2461: 84 36 01                 s1 = t1 & 0x1
  2464: 33 02 2b                 t0 = 0x2b
  2467: 33 09 00 00 11           a2 = 0x110000
  2472: 84 3a 04                 a3 = t1 & 0x4
  2475: 7b 1b 28                 u64 [sp + 0x28] = a4
  2478: c8 b6 04                 t2 = s1 + a4
  2481: 7b 1c 30                 u64 [sp + 0x30] = a5
  2484: 52 0a 10                 jump @212 if a3 != 0
      :                          @210
  2487: 49 11 38                 u64 [sp + 56] = 0
  2490: 82 78                    a1 = u64 [a0]
  2492: 94 69 2b                 a2 = 0x2b if s1 != 0
  2495: 52 08 35                 jump @216 if a1 != 0
      :                          @211
  2498: 28 56                    jump @221
      :                          @212
  2500: 7b 18 38                 u64 [sp + 0x38] = a1
  2503: 33 09                    a2 = 0
  2505: 51 0c 1b                 jump @215 if a5 == 0
      :                          @213
  2508: 82 1b 38                 a4 = u64 [sp + 0x38]
  2511: 01                       fallthrough
      :                          @214
  2512: 7d b5                    s0 = i8 [a4]
  2514: 89 55 c0                 s0 = s0 <s 0xffffffffffffffc0
  2517: 85 5a 01                 a3 = s0 ^ 0x1
  2520: c8 a9 09                 a2 = a2 + a3
  2523: 95 cc ff                 a5 = a5 + 0xffffffffffffffff
  2526: 95 bb 01                 a4 = a4 + 0x1
  2529: 52 0c ef                 jump @214 if a5 != 0
      :                          @215
  2532: c8 94 04                 t2 = t2 + a2
  2535: 33 09 00 00 11           a2 = 0x110000
  2540: 82 78                    a1 = u64 [a0]
  2542: db 62 09                 a2 = t0 if s1 != 0
  2545: 51 08 27                 jump @221 if a1 == 0
      :                          @216
  2548: 82 7a 08                 a3 = u64 [a0 + 0x8]
  2551: ae a4 21                 jump @221 if t2 >=u a3
      :                          @217
  2554: 84 38 08                 a1 = t1 & 0x8
  2557: 52 08 50                 jump @224 if a1 != 0
      :                          @218
  2560: 7c 76 38                 s1 = u8 [a0 + 0x38]
  2563: c9 4a 0a                 a3 = a3 - t2
  2566: 7b 19 18                 u64 [sp + 0x18] = a2
  2569: 5a 16 01 9d 00           jump @231 if s1 >s 1
      :                          @219
  2574: 52 06 aa 00              jump @233 if s1 != 0
      :                          @220
  2578: 7b 1a 10                 u64 [sp + 0x10] = a3
  2581: 28 a9 00                 jump @234
      :                          @221
  2584: 82 75 20                 s0 = u64 [a0 + 0x20]
  2587: 82 76 28                 s1 = u64 [a0 + 0x28]
  2590: 64 57                    a0 = s0
  2592: 64 68                    a1 = s1
  2594: 82 1a 38                 a3 = u64 [sp + 0x38]
  2597: 82 1b 30                 a4 = u64 [sp + 0x30]
  2600: 50 10 2e 6c 01           ra = 46, jump @254
      :                          @222 [@dyn 23]
  2605: 33 08 01                 a1 = 0x1
  2608: 52 07 bb 00              jump @239 if a0 != 0
      :                          @223
  2612: 82 6c 18                 a5 = u64 [s1 + 0x18]
  2615: 64 57                    a0 = s0
  2617: 82 18 20                 a1 = u64 [sp + 0x20]
  2620: 82 19 28                 a2 = u64 [sp + 0x28]
  2623: 82 10 60                 ra = u64 [sp + 0x60]
  2626: 82 15 58                 s0 = u64 [sp + 0x58]
  2629: 82 16 50                 s1 = u64 [sp + 0x50]
  2632: 95 11 68                 sp = sp + 0x68
  2635: 32 0c                    jump [a5]
      :                          @224
  2637: 7b 1a 40                 u64 [sp + 0x40] = a3
  2640: 64 45                    s0 = t2
  2642: 81 78 30                 a1 = i32 [a0 + 0x30]
  2645: 7b 18 10                 u64 [sp + 0x10] = a1
  2648: 7c 7a 38                 a3 = u8 [a0 + 0x38]
  2651: 7b 1a 08                 u64 [sp + 0x8] = a3
  2654: 82 7a 20                 a3 = u64 [a0 + 0x20]
  2657: 82 78 28                 a1 = u64 [a0 + 0x28]
  2660: 48 17 30 30              u32 [a0 + 48] = 0x30
  2664: 7b 17                    u64 [sp] = a0
  2666: 46 17 38 01              u8 [a0 + 56] = 0x1
  2670: 7b 1a 48                 u64 [sp + 0x48] = a3
  2673: 64 a7                    a0 = a3
  2675: 64 86                    s1 = a1
  2677: 82 1a 38                 a3 = u64 [sp + 0x38]
  2680: 82 1b 30                 a4 = u64 [sp + 0x30]
  2683: 50 10 30 19 01           ra = 48, jump @254
      :                          @225 [@dyn 24]
  2688: 52 07 67                 jump @238 if a0 != 0
      :                          @226
  2691: 82 17 40                 a0 = u64 [sp + 0x40]
  2694: c9 57 05                 s0 = a0 - s0
  2697: 95 55 01                 s0 = s0 + 0x1
  2700: 01                       fallthrough
      :                          @227
  2701: 95 55 ff                 s0 = s0 + 0xffffffffffffffff
  2704: 51 05 c6 00              jump @249 if s0 == 0
      :                          @228
  2708: 82 69 20                 a2 = u64 [s1 + 0x20]
  2711: 33 08 30                 a1 = 0x30
  2714: 82 17 48                 a0 = u64 [sp + 0x48]
  2717: b4 90 01 32              ra = 50, jump [a2]
      :                          @229 [@dyn 25]
  2721: 51 07 ec                 jump @227 if a0 == 0
      :                          @230
  2724: 28 43                    jump @238
      :                          @231
  2726: 52 16 02 12              jump @233 if s1 != 2
      :                          @232
  2730: 98 a6 01                 s1 = a3 >> 0x1
  2733: 95 a8 01                 a1 = a3 + 0x1
  2736: 98 88 01                 a1 = a1 >> 0x1
  2739: 7b 18 10                 u64 [sp + 0x10] = a1
  2742: 28 08                    jump @234
      :                          @233
  2744: 64 a6                    s1 = a3
  2746: 49 11 10                 u64 [sp + 16] = 0
  2749: 01                       fallthrough
      :                          @234
  2750: 82 78 20                 a1 = u64 [a0 + 0x20]
  2753: 7b 18 48                 u64 [sp + 0x48] = a1
  2756: 82 75 28                 s0 = u64 [a0 + 0x28]
  2759: 81 77 30                 a0 = i32 [a0 + 0x30]
  2762: 7b 17 40                 u64 [sp + 0x40] = a0
  2765: 95 66 01                 s1 = s1 + 0x1
  2768: 01                       fallthrough
      :                          @235
  2769: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
  2772: 51 06 27                 jump @240 if s1 == 0
      :                          @236
  2775: 82 59 20                 a2 = u64 [s0 + 0x20]
  2778: 82 17 48                 a0 = u64 [sp + 0x48]
  2781: 82 18 40                 a1 = u64 [sp + 0x40]
  2784: b4 90 01 34              ra = 52, jump [a2]
      :                          @237 [@dyn 26]
  2788: 51 07 ed                 jump @235 if a0 == 0
      :                          @238
  2791: 33 08 01                 a1 = 0x1
  2794: 01                       fallthrough
      :                          @239
  2795: 64 87                    a0 = a1
  2797: 82 10 60                 ra = u64 [sp + 0x60]
  2800: 82 15 58                 s0 = u64 [sp + 0x58]
  2803: 82 16 50                 s1 = u64 [sp + 0x50]
  2806: 95 11 68                 sp = sp + 0x68
  2809: 32 00                    ret
      :                          @240
  2811: 82 16 48                 s1 = u64 [sp + 0x48]
  2814: 64 67                    a0 = s1
  2816: 64 58                    a1 = s0
  2818: 82 19 18                 a2 = u64 [sp + 0x18]
  2821: 82 1a 38                 a3 = u64 [sp + 0x38]
  2824: 82 1b 30                 a4 = u64 [sp + 0x30]
  2827: 50 10 36 89 00           ra = 54, jump @254
      :                          @241 [@dyn 27]
  2832: 33 08 01                 a1 = 0x1
  2835: 52 07 d8                 jump @239 if a0 != 0
      :                          @242
  2838: 82 5a 18                 a3 = u64 [s0 + 0x18]
  2841: 64 67                    a0 = s1
  2843: 82 18 20                 a1 = u64 [sp + 0x20]
  2846: 82 19 28                 a2 = u64 [sp + 0x28]
  2849: b4 a0 01 38              ra = 56, jump [a3]
      :                          @243 [@dyn 28]
  2853: 33 08 01                 a1 = 0x1
  2856: 52 07 c3                 jump @239 if a0 != 0
      :                          @244
  2859: 82 17 10                 a0 = u64 [sp + 0x10]
  2862: 9a 77                    a0 = -a0
  2864: 7b 17 38                 u64 [sp + 0x38] = a0
  2867: 33 06 ff                 s1 = 0xffffffffffffffff
  2870: 01                       fallthrough
      :                          @245
  2871: 82 17 38                 a0 = u64 [sp + 0x38]
  2874: c8 67 07                 a0 = a0 + s1
  2877: 51 17 ff 42              jump @252 if a0 == 4294967295
      :                          @246
  2881: 82 59 20                 a2 = u64 [s0 + 0x20]
  2884: 82 17 48                 a0 = u64 [sp + 0x48]
  2887: 82 18 40                 a1 = u64 [sp + 0x40]
  2890: b4 90 01 3a              ra = 58, jump [a2]
      :                          @247 [@dyn 29]
  2894: 95 66 01                 s1 = s1 + 0x1
  2897: 51 07 e6                 jump @245 if a0 == 0
      :                          @248
  2900: 28 37                    jump @253
      :                          @249
  2902: 82 6a 18                 a3 = u64 [s1 + 0x18]
  2905: 82 17 48                 a0 = u64 [sp + 0x48]
  2908: 82 18 20                 a1 = u64 [sp + 0x20]
  2911: 82 19 28                 a2 = u64 [sp + 0x28]
  2914: b4 a0 01 3c              ra = 60, jump [a3]
      :                          @250 [@dyn 30]
  2918: 33 08 01                 a1 = 0x1
  2921: 52 07 82                 jump @239 if a0 != 0
      :                          @251
  2924: 33 08                    a1 = 0
  2926: 82 16                    s1 = u64 [sp]
  2928: 82 17 10                 a0 = u64 [sp + 0x10]
  2931: 7a 67 30                 u32 [s1 + 0x30] = a0
  2934: 82 17 08                 a0 = u64 [sp + 0x8]
  2937: 78 67 38                 u8 [s1 + 0x38] = a0
  2940: 28 6f ff                 jump @239
      :                          @252
  2943: 82 16 10                 s1 = u64 [sp + 0x10]
  2946: 82 17 10                 a0 = u64 [sp + 0x10]
  2949: d8 76 08                 a1 = s1 <u a0
  2952: 28 63 ff                 jump @239
      :                          @253
  2955: 82 17 10                 a0 = u64 [sp + 0x10]
  2958: d8 76 08                 a1 = s1 <u a0
  2961: 28 5a ff                 jump @239
      :                          @254
  2964: 95 11 d8                 sp = sp + 0xffffffffffffffd8
  2967: 7b 10 20                 u64 [sp + 0x20] = ra
  2970: 7b 15 18                 u64 [sp + 0x18] = s0
  2973: 7b 16 10                 u64 [sp + 0x10] = s1
  2976: 83 9c                    i32 a5 = a2 + 0
  2978: 33 02 00 00 11           t0 = 0x110000
  2983: 64 a6                    s1 = a3
  2985: 64 85                    s0 = a1
  2987: 64 7a                    a3 = a0
  2989: aa 2c 20                 jump @257 if a5 == t0
      :                          @255
  2992: 82 5c 20                 a5 = u64 [s0 + 0x20]
  2995: 64 a7                    a0 = a3
  2997: 64 98                    a1 = a2
  2999: 7b 1b 08                 u64 [sp + 0x8] = a4
  3002: 7b 1a                    u64 [sp] = a3
  3004: b4 c0 01 3e              ra = 62, jump [a5]
      :                          @256 [@dyn 31]
  3008: 82 1a                    a3 = u64 [sp]
  3010: 82 1b 08                 a4 = u64 [sp + 0x8]
  3013: 64 78                    a1 = a0
  3015: 33 07 01                 a0 = 0x1
  3018: 52 08 20                 jump @260 if a1 != 0
      :                          @257
  3021: 51 06 1a                 jump @259 if s1 == 0
      :                          @258
  3024: 82 5c 18                 a5 = u64 [s0 + 0x18]
  3027: 64 a7                    a0 = a3
  3029: 64 68                    a1 = s1
  3031: 64 b9                    a2 = a4
  3033: 82 10 20                 ra = u64 [sp + 0x20]
  3036: 82 15 18                 s0 = u64 [sp + 0x18]
  3039: 82 16 10                 s1 = u64 [sp + 0x10]
  3042: 95 11 28                 sp = sp + 0x28
  3045: 32 0c                    jump [a5]
      :                          @259
  3047: 33 07                    a0 = 0
  3049: 01                       fallthrough
      :                          @260
  3050: 82 10 20                 ra = u64 [sp + 0x20]
  3053: 82 15 18                 s0 = u64 [sp + 0x18]
  3056: 82 16 10                 s1 = u64 [sp + 0x10]
  3059: 95 11 28                 sp = sp + 0x28
  3062: 32 00                    ret
      :                          @261
  3064: 95 11 78 ff              sp = sp + 0xffffffffffffff78
  3068: 7b 10 80 00              u64 [sp + 0x80] = ra
  3072: 7b 15 78                 u64 [sp + 0x78] = s0
  3075: 7b 16 70                 u64 [sp + 0x70] = s1
  3078: 49 11 60 20              u64 [sp + 96] = 0x20
  3082: 33 0a 03                 a3 = 0x3
  3085: 78 1a 68                 u8 [sp + 0x68] = a3
  3088: 82 96 20                 s1 = u64 [a2 + 0x20]
  3091: 49 11 30                 u64 [sp + 48] = 0
  3094: 49 11 40                 u64 [sp + 64] = 0
  3097: 7b 17 50                 u64 [sp + 0x50] = a0
  3100: 7b 18 58                 u64 [sp + 0x58] = a1
  3103: 51 06 07 01              jump @283 if s1 == 0
      :                          @262
  3107: 82 97 28                 a0 = u64 [a2 + 0x28]
  3110: 51 07 74 01              jump @293 if a0 == 0
      :                          @263
  3114: 49 11 28                 u64 [sp + 40] = 0
  3117: 82 95                    s0 = u64 [a2]
  3119: 7b 19 08                 u64 [sp + 0x8] = a2
  3122: 82 98 10                 a1 = u64 [a2 + 0x10]
  3125: 7b 18 18                 u64 [sp + 0x18] = a1
  3128: 95 78 ff                 a1 = a0 + 0xffffffffffffffff
  3131: 97 88 03                 a1 = a1 << 0x3
  3134: 98 88 03                 a1 = a1 >> 0x3
  3137: 95 88 01                 a1 = a1 + 0x1
  3140: 7b 18                    u64 [sp] = a1
  3142: 95 55 08                 s0 = s0 + 0x8
  3145: 96 78 38                 a1 = a0 * 0x38
  3148: 95 66 18                 s1 = s1 + 0x18
  3151: 33 07 2a                 a0 = 0x2a
  3154: 7b 17 10                 u64 [sp + 0x10] = a0
  3157: 01                       fallthrough
      :                          @264
  3158: 7b 18 20                 u64 [sp + 0x20] = a1
  3161: 82 59                    a2 = u64 [s0]
  3163: 51 09 17                 jump @267 if a2 == 0
      :                          @265
  3166: 82 1a 58                 a3 = u64 [sp + 0x58]
  3169: 82 17 50                 a0 = u64 [sp + 0x50]
  3172: 82 58 f8                 a1 = u64 [s0 + 0xfffffffffffffff8]
  3175: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3178: b4 a0 01 40              ra = 64, jump [a3]
      :                          @266 [@dyn 32]
  3182: 52 07 51 01              jump @296 if a0 != 0
      :                          @267
  3186: 81 67 10                 a0 = i32 [s1 + 0x10]
  3189: 7a 17 60                 u32 [sp + 0x60] = a0
  3192: 7c 67 18                 a0 = u8 [s1 + 0x18]
  3195: 78 17 68                 u8 [sp + 0x68] = a0
  3198: 81 67 14                 a0 = i32 [s1 + 0x14]
  3201: 7a 17 64                 u32 [sp + 0x64] = a0
  3204: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3207: 82 67                    a0 = u64 [s1]
  3209: 51 08 26                 jump @272 if a1 == 0
      :                          @268
  3212: 52 18 01 16              jump @270 if a1 != 1
      :                          @269
  3216: 97 77 04                 a0 = a0 << 0x4
  3219: 82 18 18                 a1 = u64 [sp + 0x18]
  3222: c8 87 07                 a0 = a0 + a1
  3225: 82 78 08                 a1 = u64 [a0 + 0x8]
  3228: 82 19 10                 a2 = u64 [sp + 0x10]
  3231: aa 98 07                 jump @271 if a1 == a2
      :                          @270
  3234: 33 08                    a1 = 0
  3236: 28 0f                    jump @273
      :                          @271
  3238: 82 77                    a0 = u64 [a0]
  3240: 82 77                    a0 = u64 [a0]
  3242: 33 08 01                 a1 = 0x1
  3245: 28 06                    jump @273
      :                          @272
  3247: 33 08 01                 a1 = 0x1
  3250: 01                       fallthrough
      :                          @273
  3251: 7b 18 30                 u64 [sp + 0x30] = a1
  3254: 7b 17 38                 u64 [sp + 0x38] = a0
  3257: 82 68 e8                 a1 = u64 [s1 + 0xffffffffffffffe8]
  3260: 82 67 f0                 a0 = u64 [s1 + 0xfffffffffffffff0]
  3263: 51 08 26                 jump @278 if a1 == 0
      :                          @274
  3266: 52 18 01 16              jump @276 if a1 != 1
      :                          @275
  3270: 97 77 04                 a0 = a0 << 0x4
  3273: 82 18 18                 a1 = u64 [sp + 0x18]
  3276: c8 87 07                 a0 = a0 + a1
  3279: 82 78 08                 a1 = u64 [a0 + 0x8]
  3282: 82 19 10                 a2 = u64 [sp + 0x10]
  3285: aa 98 07                 jump @277 if a1 == a2
      :                          @276
  3288: 33 08                    a1 = 0
  3290: 28 0f                    jump @279
      :                          @277
  3292: 82 77                    a0 = u64 [a0]
  3294: 82 77                    a0 = u64 [a0]
  3296: 33 08 01                 a1 = 0x1
  3299: 28 06                    jump @279
      :                          @278
  3301: 33 08 01                 a1 = 0x1
  3304: 01                       fallthrough
      :                          @279
  3305: 7b 18 40                 u64 [sp + 0x40] = a1
  3308: 7b 17 48                 u64 [sp + 0x48] = a0
  3311: 82 67 08                 a0 = u64 [s1 + 0x8]
  3314: 97 77 04                 a0 = a0 << 0x4
  3317: 82 18 18                 a1 = u64 [sp + 0x18]
  3320: c8 78 08                 a1 = a1 + a0
  3323: 82 87                    a0 = u64 [a1]
  3325: 82 89 08                 a2 = u64 [a1 + 0x8]
  3328: 95 18 30                 a1 = sp + 0x30
  3331: b4 90 01 42              ra = 66, jump [a2]
      :                          @280 [@dyn 33]
  3335: 52 07 b8 00              jump @296 if a0 != 0
      :                          @281
  3339: 95 55 10                 s0 = s0 + 0x10
  3342: 82 18 20                 a1 = u64 [sp + 0x20]
  3345: 95 88 c8                 a1 = a1 + 0xffffffffffffffc8
  3348: 95 66 38                 s1 = s1 + 0x38
  3351: 82 17 28                 a0 = u64 [sp + 0x28]
  3354: 95 77 01                 a0 = a0 + 0x1
  3357: 7b 17 28                 u64 [sp + 0x28] = a0
  3360: 52 08 36 ff              jump @264 if a1 != 0
      :                          @282
  3364: 28 69                    jump @291
      :                          @283
  3366: 82 97 18                 a0 = u64 [a2 + 0x18]
  3369: 51 07 71                 jump @293 if a0 == 0
      :                          @284
  3372: 82 95 10                 s0 = u64 [a2 + 0x10]
  3375: 33 0a                    a3 = 0
  3377: 97 78 04                 a1 = a0 << 0x4
  3380: c8 58 08                 a1 = a1 + s0
  3383: 7b 18 20                 u64 [sp + 0x20] = a1
  3386: 7b 19 08                 u64 [sp + 0x8] = a2
  3389: 82 96                    s1 = u64 [a2]
  3391: 95 77 ff                 a0 = a0 + 0xffffffffffffffff
  3394: 97 77 04                 a0 = a0 << 0x4
  3397: 98 77 04                 a0 = a0 >> 0x4
  3400: 95 77 01                 a0 = a0 + 0x1
  3403: 7b 17                    u64 [sp] = a0
  3405: 95 66 08                 s1 = s1 + 0x8
  3408: 01                       fallthrough
      :                          @285
  3409: 7b 1a 28                 u64 [sp + 0x28] = a3
  3412: 82 69                    a2 = u64 [s1]
  3414: 51 09 16                 jump @288 if a2 == 0
      :                          @286
  3417: 82 1a 58                 a3 = u64 [sp + 0x58]
  3420: 82 17 50                 a0 = u64 [sp + 0x50]
  3423: 82 68 f8                 a1 = u64 [s1 + 0xfffffffffffffff8]
  3426: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3429: b4 a0 01 44              ra = 68, jump [a3]
      :                          @287 [@dyn 34]
  3433: 52 07 56                 jump @296 if a0 != 0
      :                          @288
  3436: 82 57                    a0 = u64 [s0]
  3438: 82 59 08                 a2 = u64 [s0 + 0x8]
  3441: 95 18 30                 a1 = sp + 0x30
  3444: b4 90 01 46              ra = 70, jump [a2]
      :                          @289 [@dyn 35]
  3448: 52 07 47                 jump @296 if a0 != 0
      :                          @290
  3451: 95 66 10                 s1 = s1 + 0x10
  3454: 95 55 10                 s0 = s0 + 0x10
  3457: 82 1a 28                 a3 = u64 [sp + 0x28]
  3460: 95 aa 01                 a3 = a3 + 0x1
  3463: 82 17 20                 a0 = u64 [sp + 0x20]
  3466: ab 75 c7                 jump @285 if s0 != a0
      :                          @291
  3469: 82 19 08                 a2 = u64 [sp + 0x8]
  3472: 82 1a                    a3 = u64 [sp]
  3474: 82 97 08                 a0 = u64 [a2 + 0x8]
  3477: ac 7a 0d                 jump @294 if a3 <u a0
      :                          @292
  3480: 28 2c                    jump @297
      :                          @293
  3482: 33 0a                    a3 = 0
  3484: 82 97 08                 a0 = u64 [a2 + 0x8]
  3487: 54 07 25                 jump @297 if a0 <=u 0
      :                          @294
  3490: 82 97                    a0 = u64 [a2]
  3492: 97 a8 04                 a1 = a3 << 0x4
  3495: c8 87 09                 a2 = a0 + a1
  3498: 82 1a 58                 a3 = u64 [sp + 0x58]
  3501: 82 17 50                 a0 = u64 [sp + 0x50]
  3504: 82 98                    a1 = u64 [a2]
  3506: 82 99 08                 a2 = u64 [a2 + 0x8]
  3509: 82 aa 18                 a3 = u64 [a3 + 0x18]
  3512: b4 a0 01 48              ra = 72, jump [a3]
      :                          @295 [@dyn 36]
  3516: 51 07 08                 jump @297 if a0 == 0
      :                          @296
  3519: 33 07 01                 a0 = 0x1
  3522: 28 05                    jump @298
      :                          @297
  3524: 33 07                    a0 = 0
  3526: 01                       fallthrough
      :                          @298
  3527: 82 10 80 00              ra = u64 [sp + 0x80]
  3531: 82 15 78                 s0 = u64 [sp + 0x78]
  3534: 82 16 70                 s1 = u64 [sp + 0x70]
  3537: 95 11 88 00              sp = sp + 0x88
  3541: 32 00                    ret
      :                          @299
  3543: 51 08 9b 00              jump @320 if a1 == 0
      :                          @300
  3547: 64 79                    a2 = a0
  3549: 7c 77                    a0 = u8 [a0]
  3551: 51 07 91 00              jump @319 if a0 == 0
      :                          @301
  3555: 51 27 ff 00 90 00        jump @321 if a0 == 255
      :                          @302
  3561: 6c 7a                    a3 = sext.b a0
  3563: 57 0a 09                 jump @304 if a3 <s 0
      :                          @303
  3566: 33 0a                    a3 = 0
  3568: 33 08                    a1 = 0
  3570: 28 73                    jump @318
      :                          @304
  3572: 55 27 c0 00 0d           jump @306 if a0 >=u 192
      :                          @305
  3577: 33 0a 01                 a3 = 0x1
  3580: 33 0b 80                 a4 = 0xffffffffffffff80
  3583: 28 4a                    jump @315
      :                          @306
  3585: 55 27 e0 00 0e           jump @308 if a0 >=u 224
      :                          @307
  3590: 33 0a 02                 a3 = 0x2
  3593: 33 0b 40 ff              a4 = 0xffffffffffffff40
  3597: 28 3c                    jump @315
      :                          @308
  3599: 55 27 f0 00 0e           jump @310 if a0 >=u 240
      :                          @309
  3604: 33 0a 03                 a3 = 0x3
  3607: 33 0b 20 ff              a4 = 0xffffffffffffff20
  3611: 28 2e                    jump @315
      :                          @310
  3613: 55 27 f8 00 0e           jump @312 if a0 >=u 248
      :                          @311
  3618: 33 0a 04                 a3 = 0x4
  3621: 33 0b 10 ff              a4 = 0xffffffffffffff10
  3625: 28 20                    jump @315
      :                          @312
  3627: 55 27 fc 00 0e           jump @314 if a0 >=u 252
      :                          @313
  3632: 33 0a 05                 a3 = 0x5
  3635: 33 0b 08 ff              a4 = 0xffffffffffffff08
  3639: 28 12                    jump @315
      :                          @314
  3641: 88 7a fe 00              a3 = a0 <u 0xfe
  3645: 33 0b 04 ff              a4 = 0xffffffffffffff04
  3649: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  3653: 85 aa 07                 a3 = a3 ^ 0x7
  3656: 01                       fallthrough
      :                          @315
  3657: ae 8a 2b                 jump @322 if a3 >=u a1
      :                          @316
  3660: 33 08                    a1 = 0
  3662: c8 b7 07                 a0 = a0 + a4
  3665: 64 ab                    a4 = a3
  3667: 01                       fallthrough
      :                          @317
  3668: c8 b9 0c                 a5 = a2 + a4
  3671: 7c cc                    a5 = u8 [a5]
  3673: 97 88 08                 a1 = a1 << 0x8
  3676: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  3679: d4 c8 08                 a1 = a1 | a5
  3682: 52 0b f2                 jump @317 if a4 != 0
      :                          @318
  3685: 8a a9 03                 i32 a2 = a3 << 0x3
  3688: cf 97 07                 a0 = a0 << a2
  3691: c8 87 07                 a0 = a0 + a1
  3694: 32 00                    ret
      :                          @319
  3696: 32 00                    ret
      :                          @320
  3698: 00                       trap
      :                          @321
  3699: 00                       trap
      :                          @322
  3700: 00                       trap
