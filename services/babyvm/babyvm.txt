// RO data = 67/68 bytes
// RW data = 0/0 bytes
// Stack size = 40960 bytes
// Jump table entry point size = 2 bytes
// RO data = [115, 101, 116, 117, 112, 95, 112, 97, 103, 101, 58, 32, 122, 101, 114, 111, 32, 102, 97, 105, 108, 101, 100, 115, 101, 116, 117, 112, 95, 112, 97, 103, 101, 58, 32, 112, 111, 107, 101, 32, 102, 97, 105, 108, 101, 100, 103, 101, 116, 95, 112, 97, 103, 101, 58, 32, 112, 101, 101, 107, 32, 102, 97, 105, 108, 101, 100]
// RW data = []
// Instructions = 1045
// Code size = 3104 bytes

      :                          @0
     0: 28 0d 00 00 00           jump @3
      :                          @1
     5: 28 82 07 00 00           jump @143
      :                          @2
    10: 28 69 0a                 jump @230
      :                          @3 [export #0: 'refine']
    13: 95 11 08 f8              sp = sp + 0xfffffffffffff808
    17: 7b 10 f0 07              u64 [sp + 0x7f0] = ra
    21: 7b 15 e8 07              u64 [sp + 0x7e8] = s0
    25: 7b 16 e0 07              u64 [sp + 0x7e0] = s1
    29: 95 11 68 b4              sp = sp + 0xffffffffffffb468
    33: 64 79                    a2 = a0
    35: 33 0a 04                 a3 = 0x4
    38: 33 07 00 00 01           a0 = 0x10000
    43: ac a8 fc 00              jump @33 if a1 <u a3
      :                          @4
    47: 95 88 fc                 a1 = a1 + 0xfffffffffffffffc
    50: 51 08 f8 00              jump @34 if a1 == 0
      :                          @5
    54: 95 95 04                 s0 = a2 + 0x4
    57: 7d 5a                    a3 = i8 [s0]
    59: 80 93                    t1 = u32 [a2]
    61: 84 a6 ff 00              s1 = a3 & 0xff
    65: 33 02 01                 t0 = 0x1
    68: 59 0a 3a                 jump @13 if a3 >=s 0
      :                          @6
    71: 33 02 02                 t0 = 0x2
    74: 53 26 c0 00 30           jump @12 if s1 <u 192
      :                          @7
    79: 33 02 03                 t0 = 0x3
    82: 53 26 e0 00 28           jump @12 if s1 <u 224
      :                          @8
    87: 33 02 04                 t0 = 0x4
    90: 53 26 f0 00 20           jump @12 if s1 <u 240
      :                          @9
    95: 33 02 05                 t0 = 0x5
    98: 53 26 f8 00 18           jump @12 if s1 <u 248
      :                          @10
   103: 33 02 06                 t0 = 0x6
   106: 53 26 fc 00 10           jump @12 if s1 <u 252
      :                          @11
   111: 88 69 fe 00              a2 = s1 <u 0xfe
   115: 33 0a 08                 a3 = 0x8
   118: c9 9a 02                 t0 = a3 - a2
   121: 01                       fallthrough
      :                          @12
   122: ac 28 e7 06              jump @138 if a1 <u t0
      :                          @13
   126: 51 06 91 00              jump @32 if s1 == 0
      :                          @14
   130: 51 26 ff 00 de 06        jump @137 if s1 == 255
      :                          @15
   136: 6c 69                    a2 = sext.b s1
   138: 57 09 09                 jump @17 if a2 <s 0
      :                          @16
   141: 33 09                    a2 = 0
   143: 33 0b                    a4 = 0
   145: 28 74                    jump @31
      :                          @17
   147: 55 26 c0 00 0d           jump @19 if s1 >=u 192
      :                          @18
   152: 33 09 01                 a2 = 0x1
   155: 33 0a 80                 a3 = 0xffffffffffffff80
   158: 28 4a                    jump @28
      :                          @19
   160: 55 26 e0 00 0e           jump @21 if s1 >=u 224
      :                          @20
   165: 33 09 02                 a2 = 0x2
   168: 33 0a 40 ff              a3 = 0xffffffffffffff40
   172: 28 3c                    jump @28
      :                          @21
   174: 55 26 f0 00 0e           jump @23 if s1 >=u 240
      :                          @22
   179: 33 09 03                 a2 = 0x3
   182: 33 0a 20 ff              a3 = 0xffffffffffffff20
   186: 28 2e                    jump @28
      :                          @23
   188: 55 26 f8 00 0e           jump @25 if s1 >=u 248
      :                          @24
   193: 33 09 04                 a2 = 0x4
   196: 33 0a 10 ff              a3 = 0xffffffffffffff10
   200: 28 20                    jump @28
      :                          @25
   202: 55 26 fc 00 0e           jump @27 if s1 >=u 252
      :                          @26
   207: 33 09 05                 a2 = 0x5
   210: 33 0a 08 ff              a3 = 0xffffffffffffff08
   214: 28 12                    jump @28
      :                          @27
   216: 88 69 fe 00              a2 = s1 <u 0xfe
   220: 33 0a 04 ff              a3 = 0xffffffffffffff04
   224: 93 9a 02 ff              a3 = 0xffffffffffffff02 if a2 == 0
   228: 85 99 07                 a2 = a2 ^ 0x7
   231: 01                       fallthrough
      :                          @28
   232: ae 29 7a 06              jump @139 if a2 >=u t0
      :                          @29
   236: 33 0b                    a4 = 0
   238: c8 a6 06                 s1 = s1 + a3
   241: 64 9a                    a3 = a2
   243: 01                       fallthrough
      :                          @30
   244: c8 a5 0c                 a5 = s0 + a3
   247: 7c cc                    a5 = u8 [a5]
   249: 97 bb 08                 a4 = a4 << 0x8
   252: 95 aa ff                 a3 = a3 + 0xffffffffffffffff
   255: d4 cb 0b                 a4 = a4 | a5
   258: 52 0a f2                 jump @30 if a3 != 0
      :                          @31
   261: 8a 99 03                 i32 a2 = a2 << 0x3
   264: cf 96 09                 a2 = s1 << a2
   267: c8 9b 06                 s1 = a4 + a2
   270: 01                       fallthrough
      :                          @32
   271: e4 28 08                 a1 = maxu(a1, t0)
   274: c9 28 08                 a1 = a1 - t0
   277: d8 68 09                 a2 = a1 <u s1
   280: e4 68 08                 a1 = maxu(a1, s1)
   283: c9 68 08                 a1 = a1 - s1
   286: 88 88 20                 a1 = a1 <u 0x20
   289: d4 98 08                 a1 = a1 | a2
   292: 51 08 1f                 jump @35 if a1 == 0
      :                          @33
   295: 33 08                    a1 = 0
   297: 01                       fallthrough
      :                          @34
   298: 33 09 98 4b              a2 = 0x4b98
   302: c8 91 01                 sp = sp + a2
   305: 82 10 f0 07              ra = u64 [sp + 0x7f0]
   309: 82 15 e8 07              s0 = u64 [sp + 0x7e8]
   313: 82 16 e0 07              s1 = u64 [sp + 0x7e0]
   317: 95 11 f8 07              sp = sp + 0x7f8
   321: 32 00                    ret
      :                          @35
   323: 7b 13 60                 u64 [sp + 0x60] = t1
   326: 7b 12 28                 u64 [sp + 0x28] = t0
   329: 7b 15 40                 u64 [sp + 0x40] = s0
   332: 48 21 88 00              u32 [sp + 136] = 0
   336: 49 21 80 00              u64 [sp + 128] = 0
   340: 49 11 78                 u64 [sp + 120] = 0
   343: 49 11 70                 u64 [sp + 112] = 0
   346: 49 11 68                 u64 [sp + 104] = 0
   349: 95 17 68                 a0 = sp + 0x68
   352: 33 09 24                 a2 = 0x24
   355: 33 0a 03                 a3 = 0x3
   358: 33 0b                    a4 = 0
   360: 33 0c                    a5 = 0
   362: 0a 12                    ecalli 18 // 'fetch'
   364: 01                       fallthrough
      :                          @36
   365: 95 17 68                 a0 = sp + 0x68
   368: 33 08 24                 a1 = 0x24
   371: 53 16 08 b7              jump @34 if s1 <u 8
      :                          @37
   375: 7b 16 38                 u64 [sp + 0x38] = s1
   378: 95 17 90 00              a0 = sp + 0x90
   382: 33 09 00 02              a2 = 0x200
   386: 33 08                    a1 = 0
   388: 50 10 02 aa 09           ra = 2, jump @249
      :                          @38 [@dyn 1]
   393: 95 18 68                 a1 = sp + 0x68
   396: 95 19 90 00              a2 = sp + 0x90
   400: 33 0b 00 02              a4 = 0x200
   404: 82 17 60                 a0 = u64 [sp + 0x60]
   407: 33 0a                    a3 = 0
   409: 0a 11                    ecalli 17 // 'historical_lookup'
   411: 01                       fallthrough
      :                          @39
   412: 51 17 ff b8 05           jump @134 if a0 == 4294967295
      :                          @40
   417: 64 75                    s0 = a0
   419: 82 17 38                 a0 = u64 [sp + 0x38]
   422: 98 77 03                 a0 = a0 >> 0x3
   425: 49 21 c8 02              u64 [sp + 712] = 0
   429: 49 21 c0 02              u64 [sp + 704] = 0
   433: 49 21 b8 02              u64 [sp + 696] = 0
   437: 49 21 b0 02              u64 [sp + 688] = 0
   441: 49 21 a8 02              u64 [sp + 680] = 0
   445: 49 21 a0 02              u64 [sp + 672] = 0
   449: 49 21 98 02              u64 [sp + 664] = 0
   453: 95 76 ff                 s1 = a0 + 0xffffffffffffffff
   456: 49 21 90 02              u64 [sp + 656] = 0
   460: 51 06 3e 01              jump @73 if s1 == 0
      :                          @41
   464: 95 17 90 00              a0 = sp + 0x90
   468: 64 58                    a1 = s0
   470: 33 09                    a2 = 0
   472: 0a 14                    ecalli 20 // 'machine'
   474: 01                       fallthrough
      :                          @42
   475: 7a 17 90 02              u32 [sp + 0x290] = a0
   479: 51 16 01 2b 01           jump @73 if s1 == 1
      :                          @43
   484: 95 17 90 00              a0 = sp + 0x90
   488: 64 58                    a1 = s0
   490: 33 09                    a2 = 0
   492: 0a 14                    ecalli 20 // 'machine'
   494: 01                       fallthrough
      :                          @44
   495: 7a 17 94 02              u32 [sp + 0x294] = a0
   499: 51 16 02 17 01           jump @73 if s1 == 2
      :                          @45
   504: 95 17 90 00              a0 = sp + 0x90
   508: 64 58                    a1 = s0
   510: 33 09                    a2 = 0
   512: 0a 14                    ecalli 20 // 'machine'
   514: 01                       fallthrough
      :                          @46
   515: 7a 17 98 02              u32 [sp + 0x298] = a0
   519: 51 16 03 03 01           jump @73 if s1 == 3
      :                          @47
   524: 95 17 90 00              a0 = sp + 0x90
   528: 64 58                    a1 = s0
   530: 33 09                    a2 = 0
   532: 0a 14                    ecalli 20 // 'machine'
   534: 01                       fallthrough
      :                          @48
   535: 7a 17 9c 02              u32 [sp + 0x29c] = a0
   539: 51 16 04 ef 00           jump @73 if s1 == 4
      :                          @49
   544: 95 17 90 00              a0 = sp + 0x90
   548: 64 58                    a1 = s0
   550: 33 09                    a2 = 0
   552: 0a 14                    ecalli 20 // 'machine'
   554: 01                       fallthrough
      :                          @50
   555: 7a 17 a0 02              u32 [sp + 0x2a0] = a0
   559: 51 16 05 db 00           jump @73 if s1 == 5
      :                          @51
   564: 95 17 90 00              a0 = sp + 0x90
   568: 64 58                    a1 = s0
   570: 33 09                    a2 = 0
   572: 0a 14                    ecalli 20 // 'machine'
   574: 01                       fallthrough
      :                          @52
   575: 7a 17 a4 02              u32 [sp + 0x2a4] = a0
   579: 51 16 06 c7 00           jump @73 if s1 == 6
      :                          @53
   584: 95 17 90 00              a0 = sp + 0x90
   588: 64 58                    a1 = s0
   590: 33 09                    a2 = 0
   592: 0a 14                    ecalli 20 // 'machine'
   594: 01                       fallthrough
      :                          @54
   595: 7a 17 a8 02              u32 [sp + 0x2a8] = a0
   599: 51 16 07 b3 00           jump @73 if s1 == 7
      :                          @55
   604: 95 17 90 00              a0 = sp + 0x90
   608: 64 58                    a1 = s0
   610: 33 09                    a2 = 0
   612: 0a 14                    ecalli 20 // 'machine'
   614: 01                       fallthrough
      :                          @56
   615: 7a 17 ac 02              u32 [sp + 0x2ac] = a0
   619: 51 16 08 9f 00           jump @73 if s1 == 8
      :                          @57
   624: 95 17 90 00              a0 = sp + 0x90
   628: 64 58                    a1 = s0
   630: 33 09                    a2 = 0
   632: 0a 14                    ecalli 20 // 'machine'
   634: 01                       fallthrough
      :                          @58
   635: 7a 17 b0 02              u32 [sp + 0x2b0] = a0
   639: 51 16 09 8b 00           jump @73 if s1 == 9
      :                          @59
   644: 95 17 90 00              a0 = sp + 0x90
   648: 64 58                    a1 = s0
   650: 33 09                    a2 = 0
   652: 0a 14                    ecalli 20 // 'machine'
   654: 01                       fallthrough
      :                          @60
   655: 7a 17 b4 02              u32 [sp + 0x2b4] = a0
   659: 51 16 0a 77              jump @73 if s1 == 10
      :                          @61
   663: 95 17 90 00              a0 = sp + 0x90
   667: 64 58                    a1 = s0
   669: 33 09                    a2 = 0
   671: 0a 14                    ecalli 20 // 'machine'
   673: 01                       fallthrough
      :                          @62
   674: 7a 17 b8 02              u32 [sp + 0x2b8] = a0
   678: 51 16 0b 64              jump @73 if s1 == 11
      :                          @63
   682: 95 17 90 00              a0 = sp + 0x90
   686: 64 58                    a1 = s0
   688: 33 09                    a2 = 0
   690: 0a 14                    ecalli 20 // 'machine'
   692: 01                       fallthrough
      :                          @64
   693: 7a 17 bc 02              u32 [sp + 0x2bc] = a0
   697: 51 16 0c 51              jump @73 if s1 == 12
      :                          @65
   701: 95 17 90 00              a0 = sp + 0x90
   705: 64 58                    a1 = s0
   707: 33 09                    a2 = 0
   709: 0a 14                    ecalli 20 // 'machine'
   711: 01                       fallthrough
      :                          @66
   712: 7a 17 c0 02              u32 [sp + 0x2c0] = a0
   716: 51 16 0d 3e              jump @73 if s1 == 13
      :                          @67
   720: 95 17 90 00              a0 = sp + 0x90
   724: 64 58                    a1 = s0
   726: 33 09                    a2 = 0
   728: 0a 14                    ecalli 20 // 'machine'
   730: 01                       fallthrough
      :                          @68
   731: 7a 17 c4 02              u32 [sp + 0x2c4] = a0
   735: 51 16 0e 2b              jump @73 if s1 == 14
      :                          @69
   739: 95 17 90 00              a0 = sp + 0x90
   743: 64 58                    a1 = s0
   745: 33 09                    a2 = 0
   747: 0a 14                    ecalli 20 // 'machine'
   749: 01                       fallthrough
      :                          @70
   750: 7a 17 c8 02              u32 [sp + 0x2c8] = a0
   754: 51 16 0f 18              jump @73 if s1 == 15
      :                          @71
   758: 95 17 90 00              a0 = sp + 0x90
   762: 64 58                    a1 = s0
   764: 33 09                    a2 = 0
   766: 0a 14                    ecalli 20 // 'machine'
   768: 01                       fallthrough
      :                          @72
   769: 7a 17 cc 02              u32 [sp + 0x2cc] = a0
   773: 52 16 10 77 04           jump @142 if s1 != 16
      :                          @73
   778: 7b 16 30                 u64 [sp + 0x30] = s1
   781: 33 05 08 10              s0 = 0x1008
   785: 95 17 d0 02              a0 = sp + 0x2d0
   789: 33 08                    a1 = 0
   791: 33 09 08 10              a2 = 0x1008
   795: 50 10 04 13 08           ra = 4, jump @249
      :                          @74 [@dyn 2]
   800: 95 17 d0 02              a0 = sp + 0x2d0
   804: 33 0a 06                 a3 = 0x6
   807: 33 08                    a1 = 0
   809: 7b 15 58                 u64 [sp + 0x58] = s0
   812: 64 59                    a2 = s0
   814: 33 0b                    a4 = 0
   816: 33 0c                    a5 = 0
   818: 0a 12                    ecalli 18 // 'fetch'
   820: 01                       fallthrough
      :                          @75
   821: 51 17 ff 7e              jump @85 if a0 == 4294967295
      :                          @76
   825: 33 06 01                 s1 = 0x1
   828: 33 07 17 00 01           a0 = 0x10017
   833: 7b 17 48                 u64 [sp + 0x48] = a0
   836: 33 07 00 00 01           a0 = 0x10000
   841: 7b 17 50                 u64 [sp + 0x50] = a0
   844: 28 2c                    jump @80
      :                          @77
   846: 33 07 02                 a0 = 0x2
   849: 33 0b 17                 a4 = 0x17
   852: 33 08                    a1 = 0
   854: 33 09                    a2 = 0
   856: 82 1a 50                 a3 = u64 [sp + 0x50]
   859: 0a 64                    ecalli 100 // 'log'
   861: 01                       fallthrough
      :                          @78
   862: 95 17 d0 02              a0 = sp + 0x2d0
   866: 33 0a 06                 a3 = 0x6
   869: 33 08                    a1 = 0
   871: 82 19 58                 a2 = u64 [sp + 0x58]
   874: 64 6b                    a4 = s1
   876: 33 0c                    a5 = 0
   878: 0a 12                    ecalli 18 // 'fetch'
   880: 01                       fallthrough
      :                          @79
   881: 95 66 01                 s1 = s1 + 0x1
   884: 51 17 ff 3f              jump @85 if a0 == 4294967295
      :                          @80
   888: 80 17 d0 02              a0 = u32 [sp + 0x2d0]
   892: 80 15 d4 02              s0 = u32 [sp + 0x2d4]
   896: 33 09 01                 a2 = 0x1
   899: 7b 17 60                 u64 [sp + 0x60] = a0
   902: 64 58                    a1 = s0
   904: 0a 17                    ecalli 23 // 'zero'
   906: 01                       fallthrough
      :                          @81
   907: 52 07 c3                 jump @77 if a0 != 0
      :                          @82
   910: 97 59 0c                 a2 = s0 << 0xc
   913: 33 0a 00 10              a3 = 0x1000
   917: 82 17 60                 a0 = u64 [sp + 0x60]
   920: 95 18 d8 02              a1 = sp + 0x2d8
   924: 0a 16                    ecalli 22 // 'poke'
   926: 01                       fallthrough
      :                          @83
   927: 51 07 bf                 jump @78 if a0 == 0
      :                          @84
   930: 33 07 02                 a0 = 0x2
   933: 33 0b 17                 a4 = 0x17
   936: 33 08                    a1 = 0
   938: 33 09                    a2 = 0
   940: 82 1a 48                 a3 = u64 [sp + 0x48]
   943: 0a 64                    ecalli 100 // 'log'
   945: 28 ad                    jump @78
      :                          @85
   947: 82 16 30                 s1 = u64 [sp + 0x30]
   950: 51 06 94 03              jump @133 if s1 == 0
      :                          @86
   954: 82 17 40                 a0 = u64 [sp + 0x40]
   957: 82 18 28                 a1 = u64 [sp + 0x28]
   960: c8 87 07                 a0 = a0 + a1
   963: 51 07 a0 03              jump @140 if a0 == 0
      :                          @87
   967: 95 77 04                 a0 = a0 + 0x4
   970: 7b 17 60                 u64 [sp + 0x60] = a0
   973: 33 05 08 10              s0 = 0x1008
   977: 14 07 00 00 ff ff 00 00 00 00 a0 = 0xffff0000
   987: 7b 17 20                 u64 [sp + 0x20] = a0
   990: 14 07 00 00 fe fe 00 00 00 00 a0 = 0xfefe0000
  1000: 7b 17 18                 u64 [sp + 0x18] = a0
  1003: 33 07 17 00 01           a0 = 0x10017
  1008: 7b 17 10                 u64 [sp + 0x10] = a0
  1011: 33 07 00 00 01           a0 = 0x10000
  1016: 7b 17 28                 u64 [sp + 0x28] = a0
  1019: 33 07 2e 00 01           a0 = 0x1002e
  1024: 7b 17 08                 u64 [sp + 0x8] = a0
  1027: 95 17 90 02              a0 = sp + 0x290
  1031: 7b 17 50                 u64 [sp + 0x50] = a0
  1034: 33 07 08                 a0 = 0x8
  1037: 7b 15 48                 u64 [sp + 0x48] = s0
  1040: 28 3d                    jump @91
      :                          @88
  1042: 33 07 02                 a0 = 0x2
  1045: 33 0b 17                 a4 = 0x17
  1048: 33 08                    a1 = 0
  1050: 33 09                    a2 = 0
  1052: 82 1a 28                 a3 = u64 [sp + 0x28]
  1055: 0a 64                    ecalli 100 // 'log'
  1057: 01                       fallthrough
      :                          @89
  1058: 95 17 e8 32              a0 = sp + 0x32e8
  1062: 82 15 48                 s0 = u64 [sp + 0x48]
  1065: 64 58                    a1 = s0
  1067: 0a 13                    ecalli 19 // 'export'
  1069: 01                       fallthrough
      :                          @90
  1070: 82 17 50                 a0 = u64 [sp + 0x50]
  1073: 95 77 04                 a0 = a0 + 0x4
  1076: 7b 17 50                 u64 [sp + 0x50] = a0
  1079: 82 17 60                 a0 = u64 [sp + 0x60]
  1082: 95 77 08                 a0 = a0 + 0x8
  1085: 7b 17 60                 u64 [sp + 0x60] = a0
  1088: 95 66 ff                 s1 = s1 + 0xffffffffffffffff
  1091: 82 17 58                 a0 = u64 [sp + 0x58]
  1094: 95 77 08                 a0 = a0 + 0x8
  1097: 51 06 01 03              jump @133 if s1 == 0
      :                          @91
  1101: 7b 17 58                 u64 [sp + 0x58] = a0
  1104: 95 17 d8 12              a0 = sp + 0x12d8
  1108: 33 08                    a1 = 0
  1110: 64 59                    a2 = s0
  1112: 50 10 06 d6 06           ra = 6, jump @249
      :                          @92 [@dyn 3]
  1117: 95 17 e0 22              a0 = sp + 0x22e0
  1121: 33 08                    a1 = 0
  1123: 64 59                    a2 = s0
  1125: 50 10 08 c9 06           ra = 8, jump @249
      :                          @93 [@dyn 4]
  1130: 95 17 e8 32              a0 = sp + 0x32e8
  1134: 33 08                    a1 = 0
  1136: 64 59                    a2 = s0
  1138: 50 10 0a bc 06           ra = 10, jump @249
      :                          @94 [@dyn 5]
  1143: 82 17 58                 a0 = u64 [sp + 0x58]
  1146: 95 18 f0 42              a1 = sp + 0x42f0
  1150: 49 08                    u64 [a1 + 0] = 0
  1152: 48 18 08                 u32 [a1 + 8] = 0
  1155: 51 27 88 00 db 02        jump @135 if a0 == 136
      :                          @95
  1161: 82 18 38                 a1 = u64 [sp + 0x38]
  1164: ac 78 d3 02              jump @136 if a1 <u a0
      :                          @96
  1168: 82 1a 60                 a3 = u64 [sp + 0x60]
  1171: 7c a7 01                 a0 = u8 [a3 + 0x1]
  1174: 7c a8                    a1 = u8 [a3]
  1176: 7c a9 02                 a2 = u8 [a3 + 0x2]
  1179: 7d aa 03                 a3 = i8 [a3 + 0x3]
  1182: 97 77 08                 a0 = a0 << 0x8
  1185: d4 87 07                 a0 = a0 | a1
  1188: 97 99 10                 a2 = a2 << 0x10
  1191: 97 aa 18                 a3 = a3 << 0x18
  1194: d4 a9 09                 a2 = a2 | a3
  1197: d4 97 07                 a0 = a0 | a2
  1200: 52 17 01 72 ff           jump @89 if a0 != 1
      :                          @97
  1205: 82 17 50                 a0 = u64 [sp + 0x50]
  1208: 80 75                    s0 = u32 [a0]
  1210: 83 57                    i32 a0 = s0 + 0
  1212: 95 18 f0 42              a1 = sp + 0x42f0
  1216: 49 18 10 00 00 01        u64 [a1 + 16] = 0x10000
  1222: 82 19 20                 a2 = u64 [sp + 0x20]
  1225: 7b 89 18                 u64 [a1 + 0x18] = a2
  1228: 82 19 18                 a2 = u64 [sp + 0x18]
  1231: 7b 89 20                 u64 [a1 + 0x20] = a2
  1234: 95 19 18 43              a2 = sp + 0x4318
  1238: 49 19 20                 u64 [a2 + 32] = 0
  1241: 49 19 18                 u64 [a2 + 24] = 0
  1244: 49 19 10                 u64 [a2 + 16] = 0
  1247: 49 19 08                 u64 [a2 + 8] = 0
  1250: 49 09                    u64 [a2 + 0] = 0
  1252: 49 18 50 02              u64 [a1 + 80] = 0x2
  1256: 95 18 48 43              a1 = sp + 0x4348
  1260: 49 18 20                 u64 [a1 + 32] = 0
  1263: 49 18 18                 u64 [a1 + 24] = 0
  1266: 49 18 10                 u64 [a1 + 16] = 0
  1269: 49 18 08                 u64 [a1 + 8] = 0
  1272: 49 08                    u64 [a1 + 0] = 0
  1274: 64 58                    a1 = s0
  1276: 7b 15 40                 u64 [sp + 0x40] = s0
  1279: 51 07 29 01              jump @116 if a0 == 0
      :                          @98
  1283: 52 17 01 64              jump @105 if a0 != 1
      :                          @99
  1287: 33 09 00 10              a2 = 0x1000
  1291: 95 15 78 43              s0 = sp + 0x4378
  1295: 64 57                    a0 = s0
  1297: 33 08                    a1 = 0
  1299: 50 10 0c 1b 06           ra = 12, jump @249
      :                          @100 [@dyn 6]
  1304: 95 17 f0 42              a0 = sp + 0x42f0
  1308: 48 27 80 00              u32 [a0 + 128] = 0
  1312: 48 27 84 00 10           u32 [a0 + 132] = 0x10
  1317: 33 09 00 00 01           a2 = 0x10000
  1322: 33 0a 00 10              a3 = 0x1000
  1326: 33 07                    a0 = 0
  1328: 64 58                    a1 = s0
  1330: 0a 15                    ecalli 21 // 'peek'
  1332: 01                       fallthrough
      :                          @101
  1333: 51 07 13                 jump @103 if a0 == 0
      :                          @102
  1336: 33 07 02                 a0 = 0x2
  1339: 33 0b 15                 a4 = 0x15
  1342: 33 08                    a1 = 0
  1344: 33 09                    a2 = 0
  1346: 82 1a 08                 a3 = u64 [sp + 0x8]
  1349: 0a 64                    ecalli 100 // 'log'
  1351: 01                       fallthrough
      :                          @103
  1352: 95 17 d8 12              a0 = sp + 0x12d8
  1356: 95 18 70 43              a1 = sp + 0x4370
  1360: 82 19 48                 a2 = u64 [sp + 0x48]
  1363: 50 10 0e 29 05           ra = 14, jump @231
      :                          @104 [@dyn 7]
  1368: 33 08 01                 a1 = 0x1
  1371: 95 17 e8 22              a0 = sp + 0x22e8
  1375: 7a 78                    u32 [a0] = a1
  1377: 82 15 40                 s0 = u64 [sp + 0x40]
  1380: 28 c4 00                 jump @116
      :                          @105
  1383: 83 55 fe                 i32 s0 = s0 + 0xfffffffffffffffe
  1386: 33 09 00 10              a2 = 0x1000
  1390: 95 17 78 43              a0 = sp + 0x4378
  1394: 33 08                    a1 = 0
  1396: 50 10 10 ba 05           ra = 16, jump @249
      :                          @106 [@dyn 8]
  1401: 95 17 f0 42              a0 = sp + 0x42f0
  1405: 7a 75 80 00              u32 [a0 + 0x80] = s0
  1409: 48 27 84 00 10           u32 [a0 + 132] = 0x10
  1414: 97 57 20                 a0 = s0 << 0x20
  1417: 98 77 20                 a0 = a0 >> 0x20
  1420: 33 09 00 00 01           a2 = 0x10000
  1425: 33 0a 00 10              a3 = 0x1000
  1429: 95 18 78 43              a1 = sp + 0x4378
  1433: 0a 15                    ecalli 21 // 'peek'
  1435: 01                       fallthrough
      :                          @107
  1436: 51 07 15                 jump @109 if a0 == 0
      :                          @108
  1439: 33 0a 2e 00 01           a3 = 0x1002e
  1444: 33 07 02                 a0 = 0x2
  1447: 33 0b 15                 a4 = 0x15
  1450: 33 08                    a1 = 0
  1452: 33 09                    a2 = 0
  1454: 0a 64                    ecalli 100 // 'log'
  1456: 01                       fallthrough
      :                          @109
  1457: 95 17 d8 12              a0 = sp + 0x12d8
  1461: 95 18 70 43              a1 = sp + 0x4370
  1465: 82 19 48                 a2 = u64 [sp + 0x48]
  1468: 50 10 12 c0 04           ra = 18, jump @231
      :                          @110 [@dyn 9]
  1473: 82 15 40                 s0 = u64 [sp + 0x40]
  1476: 83 55 ff                 i32 s0 = s0 + 0xffffffffffffffff
  1479: 33 09 00 10              a2 = 0x1000
  1483: 95 17 78 43              a0 = sp + 0x4378
  1487: 33 08                    a1 = 0
  1489: 50 10 14 5d 05           ra = 20, jump @249
      :                          @111 [@dyn 10]
  1494: 95 17 f0 42              a0 = sp + 0x42f0
  1498: 7a 75 80 00              u32 [a0 + 0x80] = s0
  1502: 48 27 84 00 10           u32 [a0 + 132] = 0x10
  1507: 97 57 20                 a0 = s0 << 0x20
  1510: 98 77 20                 a0 = a0 >> 0x20
  1513: 33 09 00 00 01           a2 = 0x10000
  1518: 33 0a 00 10              a3 = 0x1000
  1522: 95 18 78 43              a1 = sp + 0x4378
  1526: 0a 15                    ecalli 21 // 'peek'
  1528: 01                       fallthrough
      :                          @112
  1529: 51 07 15                 jump @114 if a0 == 0
      :                          @113
  1532: 33 0a 2e 00 01           a3 = 0x1002e
  1537: 33 07 02                 a0 = 0x2
  1540: 33 0b 15                 a4 = 0x15
  1543: 33 08                    a1 = 0
  1545: 33 09                    a2 = 0
  1547: 0a 64                    ecalli 100 // 'log'
  1549: 01                       fallthrough
      :                          @114
  1550: 95 17 e0 22              a0 = sp + 0x22e0
  1554: 95 18 70 43              a1 = sp + 0x4370
  1558: 82 19 48                 a2 = u64 [sp + 0x48]
  1561: 50 10 16 63 04           ra = 22, jump @231
      :                          @115 [@dyn 11]
  1566: 95 15 e8 22              s0 = sp + 0x22e8
  1570: 81 58                    a1 = i32 [s0]
  1572: 82 15 40                 s0 = u64 [sp + 0x40]
  1575: 01                       fallthrough
      :                          @116
  1576: 95 19 d8 12              a2 = sp + 0x12d8
  1580: 7a 95                    u32 [a2] = s0
  1582: 81 97 08                 a0 = i32 [a2 + 0x8]
  1585: 48 19 04 10              u32 [a2 + 4] = 0x10
  1589: 95 1a e8 22              a3 = sp + 0x22e8
  1593: 7a a5 f8                 u32 [a3 + 0xfffffffffffffff8] = s0
  1596: 48 1a fc 11              u32 [a3 + 4294967292] = 0x11
  1600: 95 19 f0 42              a2 = sp + 0x42f0
  1604: 7a 97 08                 u32 [a2 + 0x8] = a0
  1607: 7a 98 04                 u32 [a2 + 0x4] = a1
  1610: 33 08 10                 a1 = 0x10
  1613: 33 09 01                 a2 = 0x1
  1616: 64 57                    a0 = s0
  1618: 0a 17                    ecalli 23 // 'zero'
  1620: 01                       fallthrough
      :                          @117
  1621: 7b 16 30                 u64 [sp + 0x30] = s1
  1624: 51 07 14                 jump @119 if a0 == 0
      :                          @118
  1627: 33 07 02                 a0 = 0x2
  1630: 33 0b 17                 a4 = 0x17
  1633: 33 08                    a1 = 0
  1635: 33 09                    a2 = 0
  1637: 82 1a 28                 a3 = u64 [sp + 0x28]
  1640: 0a 64                    ecalli 100 // 'log'
  1642: 28 27                    jump @122
      :                          @119
  1644: 33 09 00 00 01           a2 = 0x10000
  1649: 33 0a 00 10              a3 = 0x1000
  1653: 64 57                    a0 = s0
  1655: 95 18 e0 12              a1 = sp + 0x12e0
  1659: 0a 16                    ecalli 22 // 'poke'
  1661: 01                       fallthrough
      :                          @120
  1662: 51 07 13                 jump @122 if a0 == 0
      :                          @121
  1665: 33 07 02                 a0 = 0x2
  1668: 33 0b 17                 a4 = 0x17
  1671: 33 08                    a1 = 0
  1673: 33 09                    a2 = 0
  1675: 82 1a 10                 a3 = u64 [sp + 0x10]
  1678: 0a 64                    ecalli 100 // 'log'
  1680: 01                       fallthrough
      :                          @122
  1681: 95 15 e8 22              s0 = sp + 0x22e8
  1685: 80 56 f8                 s1 = u32 [s0 + 0xfffffffffffffff8]
  1688: 80 55 fc                 s0 = u32 [s0 + 0xfffffffffffffffc]
  1691: 33 09 01                 a2 = 0x1
  1694: 64 67                    a0 = s1
  1696: 64 58                    a1 = s0
  1698: 0a 17                    ecalli 23 // 'zero'
  1700: 01                       fallthrough
      :                          @123
  1701: 51 07 17                 jump @125 if a0 == 0
      :                          @124
  1704: 33 07 02                 a0 = 0x2
  1707: 33 0b 17                 a4 = 0x17
  1710: 33 08                    a1 = 0
  1712: 33 09                    a2 = 0
  1714: 82 1a 28                 a3 = u64 [sp + 0x28]
  1717: 0a 64                    ecalli 100 // 'log'
  1719: 82 16 30                 s1 = u64 [sp + 0x30]
  1722: 28 28                    jump @128
      :                          @125
  1724: 97 59 0c                 a2 = s0 << 0xc
  1727: 33 0a 00 10              a3 = 0x1000
  1731: 64 67                    a0 = s1
  1733: 95 18 e8 22              a1 = sp + 0x22e8
  1737: 0a 16                    ecalli 22 // 'poke'
  1739: 01                       fallthrough
      :                          @126
  1740: 82 16 30                 s1 = u64 [sp + 0x30]
  1743: 51 07 13                 jump @128 if a0 == 0
      :                          @127
  1746: 33 07 02                 a0 = 0x2
  1749: 33 0b 17                 a4 = 0x17
  1752: 33 08                    a1 = 0
  1754: 33 09                    a2 = 0
  1756: 82 1a 10                 a3 = u64 [sp + 0x10]
  1759: 0a 64                    ecalli 100 // 'log'
  1761: 01                       fallthrough
      :                          @128
  1762: 95 18 00 43              a1 = sp + 0x4300
  1766: 82 15 40                 s0 = u64 [sp + 0x40]
  1769: 64 57                    a0 = s0
  1771: 0a 19                    ecalli 25 // 'invoke'
  1773: 95 17 f0 42              a0 = sp + 0x42f0
  1777: 82 79 50                 a2 = u64 [a0 + 0x50]
  1780: 33 0a 00 10              a3 = 0x1000
  1784: 64 57                    a0 = s0
  1786: 95 18 f0 32              a1 = sp + 0x32f0
  1790: 0a 15                    ecalli 21 // 'peek'
  1792: 95 18 e8 32              a1 = sp + 0x32e8
  1796: 81 87 08                 a0 = i32 [a1 + 0x8]
  1799: 7a 85                    u32 [a1] = s0
  1801: 48 18 04 10              u32 [a1 + 4] = 0x10
  1805: 95 18 f0 42              a1 = sp + 0x42f0
  1809: 7a 87                    u32 [a1] = a0
  1811: 33 08 10                 a1 = 0x10
  1814: 33 09 01                 a2 = 0x1
  1817: 64 57                    a0 = s0
  1819: 0a 17                    ecalli 23 // 'zero'
  1821: 01                       fallthrough
      :                          @129
  1822: 52 07 f4 fc              jump @88 if a0 != 0
      :                          @130
  1826: 33 09 00 00 01           a2 = 0x10000
  1831: 33 0a 00 10              a3 = 0x1000
  1835: 64 57                    a0 = s0
  1837: 95 18 f0 32              a1 = sp + 0x32f0
  1841: 0a 16                    ecalli 22 // 'poke'
  1843: 01                       fallthrough
      :                          @131
  1844: 51 07 ee fc              jump @89 if a0 == 0
      :                          @132
  1848: 33 07 02                 a0 = 0x2
  1851: 33 0b 17                 a4 = 0x17
  1854: 33 08                    a1 = 0
  1856: 33 09                    a2 = 0
  1858: 82 1a 10                 a3 = u64 [sp + 0x10]
  1861: 0a 64                    ecalli 100 // 'log'
  1863: 28 db fc                 jump @89
      :                          @133
  1866: 95 17 f0 42              a0 = sp + 0x42f0
  1870: 33 08 0c                 a1 = 0xc
  1873: 28 d9 f9                 jump @34
      :                          @134
  1876: 33 08                    a1 = 0
  1878: 33 07 00 00 01           a0 = 0x10000
  1883: 28 cf f9                 jump @34
      :                          @135
  1886: 00                       trap
      :                          @136
  1887: 00                       trap
      :                          @137
  1888: 00                       trap
      :                          @138
  1889: 00                       trap
      :                          @139
  1890: 00                       trap
      :                          @140
  1891: 33 09 08 10              a2 = 0x1008
  1895: 95 17 e8 32              a0 = sp + 0x32e8
  1899: 33 08                    a1 = 0
  1901: 50 10 18 c1 03           ra = 24, jump @249
      :                          @141 [@dyn 12]
  1906: 95 17 f0 42              a0 = sp + 0x42f0
  1910: 49 07                    u64 [a0 + 0] = 0
  1912: 48 17 08                 u32 [a0 + 8] = 0
  1915: 00                       trap
      :                          @142
  1916: 95 17 90 00              a0 = sp + 0x90
  1920: 64 58                    a1 = s0
  1922: 33 09                    a2 = 0
  1924: 0a 14                    ecalli 20 // 'machine'
  1926: 00                       trap
      :                          @143 [export #1: 'accumulate']
  1927: 95 11 b8                 sp = sp + 0xffffffffffffffb8
  1930: 7b 10 40                 u64 [sp + 0x40] = ra
  1933: 7b 15 38                 u64 [sp + 0x38] = s0
  1936: 7b 16 30                 u64 [sp + 0x30] = s1
  1939: 95 8a f8                 a3 = a1 + 0xfffffffffffffff8
  1942: 33 02 00 00 01           t0 = 0x10000
  1947: 51 0a 52                 jump @152 if a3 == 0
      :                          @144
  1950: 95 75 08                 s0 = a0 + 0x8
  1953: 7d 5b                    a4 = i8 [s0]
  1955: 84 b8 ff 00              a1 = a4 & 0xff
  1959: 33 09 01                 a2 = 0x1
  1962: 59 0b 40                 jump @151 if a4 >=s 0
      :                          @145
  1965: 33 0b c0 00              a4 = 0xc0
  1969: 33 09 02                 a2 = 0x2
  1972: ac b8 36                 jump @151 if a1 <u a4
      :                          @146
  1975: 33 0b e0 00              a4 = 0xe0
  1979: 33 09 03                 a2 = 0x3
  1982: ac b8 2c                 jump @151 if a1 <u a4
      :                          @147
  1985: 33 0b f0 00              a4 = 0xf0
  1989: 33 09 04                 a2 = 0x4
  1992: ac b8 22                 jump @151 if a1 <u a4
      :                          @148
  1995: 33 0b f8 00              a4 = 0xf8
  1999: 33 09 05                 a2 = 0x5
  2002: ac b8 18                 jump @151 if a1 <u a4
      :                          @149
  2005: 33 0b fc 00              a4 = 0xfc
  2009: 33 09 06                 a2 = 0x6
  2012: ac b8 0e                 jump @151 if a1 <u a4
      :                          @150
  2015: 88 89 fe 00              a2 = a1 <u 0xfe
  2019: 33 0b 08                 a4 = 0x8
  2022: c9 9b 09                 a2 = a4 - a2
  2025: 01                       fallthrough
      :                          @151
  2026: ae 9a 16                 jump @154 if a3 >=u a2
      :                          @152
  2029: 33 08                    a1 = 0
  2031: 01                       fallthrough
      :                          @153
  2032: 64 27                    a0 = t0
  2034: 82 10 40                 ra = u64 [sp + 0x40]
  2037: 82 15 38                 s0 = u64 [sp + 0x38]
  2040: 82 16 30                 s1 = u64 [sp + 0x30]
  2043: 95 11 48                 sp = sp + 0x48
  2046: 32 00                    ret
      :                          @154
  2048: 51 08 f0                 jump @153 if a1 == 0
      :                          @155
  2051: 51 28 ff 00 6a 02        jump @224 if a1 == 255
      :                          @156
  2057: 6c 8b                    a4 = sext.b a1
  2059: 57 0b 09                 jump @158 if a4 <s 0
      :                          @157
  2062: 33 0b                    a4 = 0
  2064: 33 06                    s1 = 0
  2066: 28 74                    jump @172
      :                          @158
  2068: 55 28 c0 00 0d           jump @160 if a1 >=u 192
      :                          @159
  2073: 33 0b 01                 a4 = 0x1
  2076: 33 0c 80                 a5 = 0xffffffffffffff80
  2079: 28 4a                    jump @169
      :                          @160
  2081: 55 28 e0 00 0e           jump @162 if a1 >=u 224
      :                          @161
  2086: 33 0b 02                 a4 = 0x2
  2089: 33 0c 40 ff              a5 = 0xffffffffffffff40
  2093: 28 3c                    jump @169
      :                          @162
  2095: 55 28 f0 00 0e           jump @164 if a1 >=u 240
      :                          @163
  2100: 33 0b 03                 a4 = 0x3
  2103: 33 0c 20 ff              a5 = 0xffffffffffffff20
  2107: 28 2e                    jump @169
      :                          @164
  2109: 55 28 f8 00 0e           jump @166 if a1 >=u 248
      :                          @165
  2114: 33 0b 04                 a4 = 0x4
  2117: 33 0c 10 ff              a5 = 0xffffffffffffff10
  2121: 28 20                    jump @169
      :                          @166
  2123: 55 28 fc 00 0e           jump @168 if a1 >=u 252
      :                          @167
  2128: 33 0b 05                 a4 = 0x5
  2131: 33 0c 08 ff              a5 = 0xffffffffffffff08
  2135: 28 12                    jump @169
      :                          @168
  2137: 88 8b fe 00              a4 = a1 <u 0xfe
  2141: 33 0c 04 ff              a5 = 0xffffffffffffff04
  2145: 93 bc 02 ff              a5 = 0xffffffffffffff02 if a4 == 0
  2149: 85 bb 07                 a4 = a4 ^ 0x7
  2152: 01                       fallthrough
      :                          @169
  2153: ae 9b 05 02              jump @225 if a4 >=u a2
      :                          @170
  2157: 33 06                    s1 = 0
  2159: c8 c8 08                 a1 = a1 + a5
  2162: 64 bc                    a5 = a4
  2164: 01                       fallthrough
      :                          @171
  2165: c8 c5 07                 a0 = s0 + a5
  2168: 7c 77                    a0 = u8 [a0]
  2170: 97 66 08                 s1 = s1 << 0x8
  2173: 95 cc ff                 a5 = a5 + 0xffffffffffffffff
  2176: d4 76 06                 s1 = s1 | a0
  2179: 52 0c f2                 jump @171 if a5 != 0
      :                          @172
  2182: 8a b7 03                 i32 a0 = a4 << 0x3
  2185: cf 78 07                 a0 = a1 << a0
  2188: 9a 77                    a0 = -a0
  2190: aa 76 5f ff              jump @152 if s1 == a0
      :                          @173
  2194: e4 9a 08                 a1 = maxu(a3, a2)
  2197: c9 98 08                 a1 = a1 - a2
  2200: 33 07 60                 a0 = 0x60
  2203: ac 78 52 ff              jump @152 if a1 <u a0
      :                          @174
  2207: c8 59 09                 a2 = a2 + s0
  2210: 95 88 a0                 a1 = a1 + 0xffffffffffffffa0
  2213: 95 95 60                 s0 = a2 + 0x60
  2216: 51 08 65                 jump @187 if a1 == 0
      :                          @175
  2219: 7d 5a                    a3 = i8 [s0]
  2221: 84 ac ff 00              a5 = a3 & 0xff
  2225: 33 09 01                 a2 = 0x1
  2228: 59 0a 40                 jump @182 if a3 >=s 0
      :                          @176
  2231: 33 0a c0 00              a3 = 0xc0
  2235: 33 09 02                 a2 = 0x2
  2238: ac ac 36                 jump @182 if a5 <u a3
      :                          @177
  2241: 33 0a e0 00              a3 = 0xe0
  2245: 33 09 03                 a2 = 0x3
  2248: ac ac 2c                 jump @182 if a5 <u a3
      :                          @178
  2251: 33 0a f0 00              a3 = 0xf0
  2255: 33 09 04                 a2 = 0x4
  2258: ac ac 22                 jump @182 if a5 <u a3
      :                          @179
  2261: 33 0a f8 00              a3 = 0xf8
  2265: 33 09 05                 a2 = 0x5
  2268: ac ac 18                 jump @182 if a5 <u a3
      :                          @180
  2271: 33 0a fc 00              a3 = 0xfc
  2275: 33 09 06                 a2 = 0x6
  2278: ac ac 0e                 jump @182 if a5 <u a3
      :                          @181
  2281: 88 c9 fe 00              a2 = a5 <u 0xfe
  2285: 33 0a 08                 a3 = 0x8
  2288: c9 9a 09                 a2 = a3 - a2
  2291: 01                       fallthrough
      :                          @182
  2292: ac 98 7b 01              jump @226 if a1 <u a2
      :                          @183
  2296: 51 0c 97 00              jump @203 if a5 == 0
      :                          @184
  2300: 51 2c ff 00 71 01        jump @224 if a5 == 255
      :                          @185
  2306: 6c ca                    a3 = sext.b a5
  2308: 57 0a 0f                 jump @188 if a3 <s 0
      :                          @186
  2311: 33 06                    s1 = 0
  2313: 33 0a                    a3 = 0
  2315: 28 7a                    jump @202
      :                          @187
  2317: 33 09                    a2 = 0
  2319: 33 0c                    a5 = 0
  2321: 28 7e                    jump @203
      :                          @188
  2323: 55 2c c0 00 0d           jump @190 if a5 >=u 192
      :                          @189
  2328: 33 06 01                 s1 = 0x1
  2331: 33 0b 80                 a4 = 0xffffffffffffff80
  2334: 28 4a                    jump @199
      :                          @190
  2336: 55 2c e0 00 0e           jump @192 if a5 >=u 224
      :                          @191
  2341: 33 06 02                 s1 = 0x2
  2344: 33 0b 40 ff              a4 = 0xffffffffffffff40
  2348: 28 3c                    jump @199
      :                          @192
  2350: 55 2c f0 00 0e           jump @194 if a5 >=u 240
      :                          @193
  2355: 33 06 03                 s1 = 0x3
  2358: 33 0b 20 ff              a4 = 0xffffffffffffff20
  2362: 28 2e                    jump @199
      :                          @194
  2364: 55 2c f8 00 0e           jump @196 if a5 >=u 248
      :                          @195
  2369: 33 06 04                 s1 = 0x4
  2372: 33 0b 10 ff              a4 = 0xffffffffffffff10
  2376: 28 20                    jump @199
      :                          @196
  2378: 55 2c fc 00 0e           jump @198 if a5 >=u 252
      :                          @197
  2383: 33 06 05                 s1 = 0x5
  2386: 33 0b 08 ff              a4 = 0xffffffffffffff08
  2390: 28 12                    jump @199
      :                          @198
  2392: 88 ca fe 00              a3 = a5 <u 0xfe
  2396: 33 0b 04 ff              a4 = 0xffffffffffffff04
  2400: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  2404: 85 a6 07                 s1 = a3 ^ 0x7
  2407: 01                       fallthrough
      :                          @199
  2408: ae 96 09 01              jump @228 if s1 >=u a2
      :                          @200
  2412: 33 0a                    a3 = 0
  2414: c8 bc 0c                 a5 = a5 + a4
  2417: 64 6b                    a4 = s1
  2419: 01                       fallthrough
      :                          @201
  2420: c8 b5 07                 a0 = s0 + a4
  2423: 7c 77                    a0 = u8 [a0]
  2425: 97 aa 08                 a3 = a3 << 0x8
  2428: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  2431: d4 7a 0a                 a3 = a3 | a0
  2434: 52 0b f2                 jump @201 if a4 != 0
      :                          @202
  2437: 8a 67 03                 i32 a0 = s1 << 0x3
  2440: cf 7c 0c                 a5 = a5 << a0
  2443: c8 ac 0c                 a5 = a5 + a3
  2446: 01                       fallthrough
      :                          @203
  2447: e4 98 07                 a0 = maxu(a1, a2)
  2450: c9 97 07                 a0 = a0 - a2
  2453: e4 c7 08                 a1 = maxu(a0, a5)
  2456: c9 c8 08                 a1 = a1 - a5
  2459: 53 18 21 52 fe           jump @152 if a1 <u 33
      :                          @204
  2464: c8 59 09                 a2 = a2 + s0
  2467: c8 9c 0c                 a5 = a5 + a2
  2470: 7c c7 20                 a0 = u8 [a5 + 0x20]
  2473: 51 07 0a                 jump @206 if a0 == 0
      :                          @205
  2476: 33 05                    s0 = 0
  2478: 33 06                    s1 = 0
  2480: 28 84 00                 jump @220
      :                          @206
  2483: 95 8b df                 a4 = a1 + 0xffffffffffffffdf
  2486: 95 c9 21                 a2 = a5 + 0x21
  2489: 51 0b 55                 jump @217 if a4 == 0
      :                          @207
  2492: 7d 97                    a0 = i8 [a2]
  2494: 33 05 01                 s0 = 0x1
  2497: 59 07 37                 jump @214 if a0 >=s 0
      :                          @208
  2500: 84 77 ff 00              a0 = a0 & 0xff
  2504: 33 05 02                 s0 = 0x2
  2507: 53 27 c0 00 2d           jump @214 if a0 <u 192
      :                          @209
  2512: 33 05 03                 s0 = 0x3
  2515: 53 27 e0 00 25           jump @214 if a0 <u 224
      :                          @210
  2520: 33 05 04                 s0 = 0x4
  2523: 53 27 f0 00 1d           jump @214 if a0 <u 240
      :                          @211
  2528: 33 05 05                 s0 = 0x5
  2531: 53 27 f8 00 15           jump @214 if a0 <u 248
      :                          @212
  2536: 33 05 06                 s0 = 0x6
  2539: 53 27 fc 00 0d           jump @214 if a0 <u 252
      :                          @213
  2544: 88 77 fe 00              a0 = a0 <u 0xfe
  2548: 9a 75 08                 s0 = 0x8 - a0
  2551: 01                       fallthrough
      :                          @214
  2552: 7b 1b                    u64 [sp] = a4
  2554: ac 5b 78                 jump @229 if a4 <u s0
      :                          @215
  2557: 64 97                    a0 = a2
  2559: 64 58                    a1 = s0
  2561: 64 96                    s1 = a2
  2563: 50 10 1a 86 01           ra = 26, jump @262
      :                          @216 [@dyn 13]
  2568: 64 69                    a2 = s1
  2570: 82 1b                    a4 = u64 [sp]
  2572: 28 07                    jump @218
      :                          @217
  2574: 33 05                    s0 = 0
  2576: 33 07                    a0 = 0
  2578: 01                       fallthrough
      :                          @218
  2579: e4 5b 08                 a1 = maxu(a4, s0)
  2582: c9 58 08                 a1 = a1 - s0
  2585: e6 78 06                 s1 = minu(a1, a0)
  2588: c8 95 05                 s0 = s0 + a2
  2591: 52 16 24 15              jump @220 if s1 != 36
      :                          @219
  2595: 80 58 20                 a1 = u32 [s0 + 0x20]
  2598: 64 57                    a0 = s0
  2600: 0a 0e                    ecalli 14 // 'solicit'
  2602: 33 02 00 00 01           t0 = 0x10000
  2607: 33 08                    a1 = 0
  2609: 28 bf fd                 jump @153
      :                          @220
  2612: 46 11 0f                 u8 [sp + 15] = 0
  2615: 95 17 0f                 a0 = sp + 0xf
  2618: 33 08 01                 a1 = 0x1
  2621: 64 59                    a2 = s0
  2623: 64 6a                    a3 = s1
  2625: 0a 03                    ecalli 3 // 'write'
  2627: 01                       fallthrough
      :                          @221
  2628: 49 11 28                 u64 [sp + 40] = 0
  2631: 49 11 20                 u64 [sp + 32] = 0
  2634: 49 11 18                 u64 [sp + 24] = 0
  2637: 49 11 10                 u64 [sp + 16] = 0
  2640: 55 16 21 20              jump @227 if s1 >=u 33
      :                          @222
  2644: 95 17 10                 a0 = sp + 0x10
  2647: 64 58                    a1 = s0
  2649: 64 69                    a2 = s1
  2651: 50 10 1c 21              ra = 28, jump @231
      :                          @223 [@dyn 14]
  2655: 95 17 10                 a0 = sp + 0x10
  2658: 0a 10                    ecalli 16 // 'oyield'
  2660: 95 12 10                 t0 = sp + 0x10
  2663: 33 08 20                 a1 = 0x20
  2666: 28 86 fd                 jump @153
      :                          @224
  2669: 00                       trap
      :                          @225
  2670: 00                       trap
      :                          @226
  2671: 00                       trap
      :                          @227
  2672: 00                       trap
      :                          @228
  2673: 00                       trap
      :                          @229
  2674: 00                       trap
      :                          @230 [export #2: 'on_transfer']
  2675: 33 07 00 00 01           a0 = 0x10000
  2680: 33 08                    a1 = 0
  2682: 32 00                    ret
      :                          @231
  2684: 95 11 e0                 sp = sp + 0xffffffffffffffe0
  2687: 7b 10 18                 u64 [sp + 0x18] = ra
  2690: 7b 15 10                 u64 [sp + 0x10] = s0
  2693: 7b 16 08                 u64 [sp + 0x8] = s1
  2696: 53 19 10 64              jump @240 if a2 <u 16
      :                          @232
  2700: 8d 7a                    i32 a3 = -a0
  2702: 84 a2 07                 t0 = a3 & 0x7
  2705: c8 27 0b                 a4 = a0 + t0
  2708: 51 02 15                 jump @235 if t0 == 0
      :                          @233
  2711: 64 8c                    a5 = a1
  2713: 64 75                    s0 = a0
  2715: 01                       fallthrough
      :                          @234
  2716: 7c ca                    a3 = u8 [a5]
  2718: 78 5a                    u8 [s0] = a3
  2720: 95 55 01                 s0 = s0 + 0x1
  2723: 95 cc 01                 a5 = a5 + 0x1
  2726: ac b5 f6                 jump @234 if s0 <u a4
      :                          @235
  2729: c8 28 03                 t1 = a1 + t0
  2732: c9 29 02                 t0 = a2 - t0
  2735: 84 24 f8                 t2 = t0 & 0xfffffffffffffff8
  2738: 84 38 07                 a1 = t1 & 0x7
  2741: c8 4b 0a                 a3 = a4 + t2
  2744: 51 08 3b                 jump @242 if a1 == 0
      :                          @236
  2747: 58 04 4b                 jump @245 if t2 <=s 0
      :                          @237
  2750: 97 38 03                 a1 = t1 << 0x3
  2753: 84 80 38                 ra = a1 & 0x38
  2756: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  2759: 82 c5                    s0 = u64 [a5]
  2761: 8d 88                    i32 a1 = -a1
  2763: 84 88 38                 a1 = a1 & 0x38
  2766: 95 cc 08                 a5 = a5 + 0x8
  2769: 01                       fallthrough
      :                          @238
  2770: 82 c6                    s1 = u64 [a5]
  2772: d0 05 05                 s0 = s0 >> ra
  2775: cf 86 09                 a2 = s1 << a1
  2778: d4 59 09                 a2 = a2 | s0
  2781: 7b b9                    u64 [a4] = a2
  2783: 95 bb 08                 a4 = a4 + 0x8
  2786: 95 cc 08                 a5 = a5 + 0x8
  2789: 64 65                    s0 = s1
  2791: ac ab eb                 jump @238 if a4 <u a3
      :                          @239
  2794: 28 1c                    jump @245
      :                          @240
  2796: 64 7a                    a3 = a0
  2798: 52 09 21                 jump @246 if a2 != 0
      :                          @241
  2801: 28 2f                    jump @248
      :                          @242
  2803: 58 04 13                 jump @245 if t2 <=s 0
      :                          @243
  2806: 64 38                    a1 = t1
  2808: 01                       fallthrough
      :                          @244
  2809: 82 89                    a2 = u64 [a1]
  2811: 7b b9                    u64 [a4] = a2
  2813: 95 bb 08                 a4 = a4 + 0x8
  2816: 95 88 08                 a1 = a1 + 0x8
  2819: ac ab f6                 jump @244 if a4 <u a3
      :                          @245
  2822: c8 43 08                 a1 = t1 + t2
  2825: 84 29 07                 a2 = t0 & 0x7
  2828: 51 09 14                 jump @248 if a2 == 0
      :                          @246
  2831: c8 a9 09                 a2 = a2 + a3
  2834: 01                       fallthrough
      :                          @247
  2835: 7c 8b                    a4 = u8 [a1]
  2837: 78 ab                    u8 [a3] = a4
  2839: 95 aa 01                 a3 = a3 + 0x1
  2842: 95 88 01                 a1 = a1 + 0x1
  2845: ac 9a f6                 jump @247 if a3 <u a2
      :                          @248
  2848: 82 10 18                 ra = u64 [sp + 0x18]
  2851: 82 15 10                 s0 = u64 [sp + 0x10]
  2854: 82 16 08                 s1 = u64 [sp + 0x8]
  2857: 95 11 20                 sp = sp + 0x20
  2860: 32 00                    ret
      :                          @249
  2862: 53 19 10 48              jump @258 if a2 <u 16
      :                          @250
  2866: 8d 7a                    i32 a3 = -a0
  2868: 84 aa 07                 a3 = a3 & 0x7
  2871: c8 a7 0b                 a4 = a0 + a3
  2874: 51 0a 0e                 jump @253 if a3 == 0
      :                          @251
  2877: 64 7c                    a5 = a0
  2879: 01                       fallthrough
      :                          @252
  2880: 78 c8                    u8 [a5] = a1
  2882: 95 cc 01                 a5 = a5 + 0x1
  2885: ac bc fb                 jump @252 if a5 <u a4
      :                          @253
  2888: c9 a9 03                 t1 = a2 - a3
  2891: 84 3c f8                 a5 = t1 & 0xfffffffffffffff8
  2894: c8 cb 0a                 a3 = a4 + a5
  2897: 58 0c 1d                 jump @256 if a5 <=s 0
      :                          @254
  2900: 84 82 ff 00              t0 = a1 & 0xff
  2904: 14 09 01 01 01 01 01 01 01 01 a2 = 0x101010101010101
  2914: ca 92 0c                 a5 = t0 * a2
  2917: 01                       fallthrough
      :                          @255
  2918: 7b bc                    u64 [a4] = a5
  2920: 95 bb 08                 a4 = a4 + 0x8
  2923: ac ab fb                 jump @255 if a4 <u a3
      :                          @256
  2926: 84 39 07                 a2 = t1 & 0x7
  2929: 52 09 0a                 jump @259 if a2 != 0
      :                          @257
  2932: 28 13                    jump @261
      :                          @258
  2934: 64 7a                    a3 = a0
  2936: 51 09 0f                 jump @261 if a2 == 0
      :                          @259
  2939: c8 a9 09                 a2 = a2 + a3
  2942: 01                       fallthrough
      :                          @260
  2943: 78 a8                    u8 [a3] = a1
  2945: 95 aa 01                 a3 = a3 + 0x1
  2948: ac 9a fb                 jump @260 if a3 <u a2
      :                          @261
  2951: 32 00                    ret
      :                          @262
  2953: 64 79                    a2 = a0
  2955: 7c 77                    a0 = u8 [a0]
  2957: 51 07 7b fe              jump @216 if a0 == 0
      :                          @263
  2961: 51 27 ff 00 8d 00        jump @281 if a0 == 255
      :                          @264
  2967: 6c 7a                    a3 = sext.b a0
  2969: 57 0a 09                 jump @266 if a3 <s 0
      :                          @265
  2972: 33 0a                    a3 = 0
  2974: 33 08                    a1 = 0
  2976: 28 73                    jump @280
      :                          @266
  2978: 55 27 c0 00 0d           jump @268 if a0 >=u 192
      :                          @267
  2983: 33 0a 01                 a3 = 0x1
  2986: 33 0b 80                 a4 = 0xffffffffffffff80
  2989: 28 4a                    jump @277
      :                          @268
  2991: 55 27 e0 00 0e           jump @270 if a0 >=u 224
      :                          @269
  2996: 33 0a 02                 a3 = 0x2
  2999: 33 0b 40 ff              a4 = 0xffffffffffffff40
  3003: 28 3c                    jump @277
      :                          @270
  3005: 55 27 f0 00 0e           jump @272 if a0 >=u 240
      :                          @271
  3010: 33 0a 03                 a3 = 0x3
  3013: 33 0b 20 ff              a4 = 0xffffffffffffff20
  3017: 28 2e                    jump @277
      :                          @272
  3019: 55 27 f8 00 0e           jump @274 if a0 >=u 248
      :                          @273
  3024: 33 0a 04                 a3 = 0x4
  3027: 33 0b 10 ff              a4 = 0xffffffffffffff10
  3031: 28 20                    jump @277
      :                          @274
  3033: 55 27 fc 00 0e           jump @276 if a0 >=u 252
      :                          @275
  3038: 33 0a 05                 a3 = 0x5
  3041: 33 0b 08 ff              a4 = 0xffffffffffffff08
  3045: 28 12                    jump @277
      :                          @276
  3047: 88 7a fe 00              a3 = a0 <u 0xfe
  3051: 33 0b 04 ff              a4 = 0xffffffffffffff04
  3055: 93 ab 02 ff              a4 = 0xffffffffffffff02 if a3 == 0
  3059: 85 aa 07                 a3 = a3 ^ 0x7
  3062: 01                       fallthrough
      :                          @277
  3063: ae 8a 28                 jump @282 if a3 >=u a1
      :                          @278
  3066: 33 08                    a1 = 0
  3068: c8 b7 07                 a0 = a0 + a4
  3071: 64 ab                    a4 = a3
  3073: 01                       fallthrough
      :                          @279
  3074: c8 b9 0c                 a5 = a2 + a4
  3077: 7c cc                    a5 = u8 [a5]
  3079: 97 88 08                 a1 = a1 << 0x8
  3082: 95 bb ff                 a4 = a4 + 0xffffffffffffffff
  3085: d4 c8 08                 a1 = a1 | a5
  3088: 52 0b f2                 jump @279 if a4 != 0
      :                          @280
  3091: 8a a9 03                 i32 a2 = a3 << 0x3
  3094: cf 97 07                 a0 = a0 << a2
  3097: c8 87 07                 a0 = a0 + a1
  3100: 32 00                    ret
      :                          @281
  3102: 00                       trap
      :                          @282
  3103: 00                       trap
